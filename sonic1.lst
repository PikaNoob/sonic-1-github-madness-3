00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330                            ; HzMd NT/PL MCD JP/OV TMSS TMSS TMSS TMSS
00000330 7061                       		moveq	#$EF,d0
00000332 1039 00A1 0001             		move.b	($A10001).l,d0
00000338 0880 0007                  		bclr	#7,d0
0000033C 6700                       		beq.s	@jap
0000033E 0000 0010                  		or.b	#1<<4,d0
00000342                            @jap:
00000342 7201                       		moveq	#1,d1
00000344 C279 00C0 0004             		and.w	($C00004).l,d1
0000034A E219                       		ror.b	#1,d1
0000034C 8001                       		or.b	d1,d0
0000034E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000352 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000035A                            
0000035A                            GameInit:
0000035A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000360 7E00                       		moveq	#0,d7
00000362 3C3C 3F7F                  		move.w	#$3F7F,d6
00000366                            
00000366                            GameClrRAM:
00000366 2CC7                       		move.l	d7,(a6)+
00000368 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000036C                            
0000036C 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000372 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
0000037A                            
0000037A 6100 0000                  		bsr.w	VDPSetupGame
0000037E 6100 0000                  		bsr.w	SoundDriverLoad
00000382 6100 0000                  		bsr.w	JoypadInit
00000386                            
00000386                            ;		move.b	($FFFFFFF8).w,d0
00000386                            ;		and.w	#$F,d0
00000386                            ;		beq.s	@notmss
00000386                            ;		jsr	GM_AntiTMSS
00000386                            @notmss:
00000386 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000038C                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
0000038C                            
0000038C                            MainGameLoop:
0000038C 707E                       		moveq	#$7E,d0
0000038E C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
00000392 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000396 60F4                       		bra.s	MainGameLoop
00000398                            ; ===========================================================================
00000398                            ; ---------------------------------------------------------------------------
00000398                            ; Main game mode array
00000398                            ; ---------------------------------------------------------------------------
00000398                            
00000398                            GameModeArray:
00000398 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039C                            ; ===========================================================================
0000039C 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003A0                            ; ===========================================================================
000003A0 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A4                            ; ===========================================================================
000003A4 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A8                            ; ===========================================================================
000003A8 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AC                            ; ===========================================================================
000003AC 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003B0                            ; ===========================================================================
000003B0 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B4                            ; ===========================================================================
000003B4 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B8                            ; ===========================================================================
000003B8 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003BE                            ; ===========================================================================
000003BE                            
000003BE                            CheckSumError:
000003BE 6100 0000                  		bsr.w	VDPSetupGame
000003C2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CC 7E3F                       		moveq	#$3F,d7
000003CE                            
000003CE                            CheckSum_Red:
000003CE 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D6 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003DA                            
000003DA                            CheckSum_Loop:
000003DA 60FE                       		bra.s	CheckSum_Loop
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            BusError:
000003DC 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E2 6000                       		bra.s	loc_43A
000003E4                            ; ===========================================================================
000003E4                            
000003E4                            AddressError:
000003E4 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003EA 6000                       		bra.s	loc_43A
000003EC                            ; ===========================================================================
000003EC                            
000003EC                            IllegalInstr:
000003EC 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F2 54AF 0002                  		addq.l	#2,2(sp)
000003F6 6000                       		bra.s	loc_462
000003F8                            ; ===========================================================================
000003F8                            
000003F8                            ZeroDivide:
000003F8 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FE 6000                       		bra.s	loc_462
00000400                            ; ===========================================================================
00000400                            
00000400                            ChkInstr:
00000400 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000406 6000                       		bra.s	loc_462
00000408                            ; ===========================================================================
00000408                            
00000408                            TrapvInstr:
00000408 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            PrivilegeViol:
00000410 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            Trace:
00000418 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041E 6000                       		bra.s	loc_462
00000420                            ; ===========================================================================
00000420                            
00000420                            Line1010Emu:
00000420 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000426 54AF 0002                  		addq.l	#2,2(sp)
0000042A 6000                       		bra.s	loc_462
0000042C                            ; ===========================================================================
0000042C                            
0000042C                            Line1111Emu:
0000042C 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000432 54AF 0002                  		addq.l	#2,2(sp)
00000436 6000                       		bra.s	loc_462
00000438                            ; ===========================================================================
00000438                            
00000438                            ErrorExcept:
00000438 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043E 6000                       		bra.s	loc_462
00000440                            ; ===========================================================================
00000440                            
00000440                            loc_43A:
00000440 46FC 2700                  		move	#$2700,sr
00000444 544F                       		addq.w	#2,sp
00000446 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000044A 544F                       		addq.w	#2,sp
0000044C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000452 6100 0000                  		bsr.w	ShowErrorMsg
00000456 202F 0002                  		move.l	2(sp),d0
0000045A 6100 0000                  		bsr.w	sub_5BA
0000045E 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000462 6100 0000                  		bsr.w	sub_5BA
00000466 6000                       		bra.s	loc_478
00000468                            ; ===========================================================================
00000468                            
00000468                            loc_462:
00000468 46FC 2700                  		move	#$2700,sr
0000046C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000472 6100 0000                  		bsr.w	ShowErrorMsg
00000476 202F 0002                  		move.l	2(sp),d0
0000047A 6100 0000                  		bsr.w	sub_5BA
0000047E                            
0000047E                            loc_478:
0000047E 6100 0000                  		bsr.w	ErrorWaitForC
00000482 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000488 46FC 2300                  		move	#$2300,sr
0000048C 4E73                       		rte	
0000048E                            
0000048E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048E                            
0000048E                            
0000048E                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048E 4DF9 00C0 0000             		lea	($C00000).l,a6
00000494 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049E 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A4 323C 027F                  		move.w	#$27F,d1
000004A8                            
000004A8                            Error_LoadGfx:
000004A8 3C98                       		move.w	(a0)+,(a6)
000004AA 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AE 7000                       		moveq	#0,d0		; clear	d0
000004B0 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B4 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B8 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BC 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C6 7212                       		moveq	#$12,d1		; number of characters
000004C8                            
000004C8                            Error_LoopChars:
000004C8 7000                       		moveq	#0,d0
000004CA 1018                       		move.b	(a0)+,d0
000004CC 0640 0790                  		addi.w	#$790,d0
000004D0 3C80                       		move.w	d0,(a6)
000004D2 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D6 4E75                       		rts	
000004D8                            ; End of function ShowErrorMsg
000004D8                            
000004D8                            ; ===========================================================================
000004D8 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DC 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004E0 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E4 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E8 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EC 0000                       		dc.w asc_5A6-ErrorText
000004EE 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000501 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000514 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000527 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000053A 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054D 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000560 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000573 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000586 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000599 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AC 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005C0 00                         		even
000005C0                            
000005C0                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005C0                            
000005C0                            
000005C0                            sub_5BA:				; XREF: loc_43A; loc_462
000005C0 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C4 7407                       		moveq	#7,d2
000005C6                            
000005C6                            loc_5C0:
000005C6 E998                       		rol.l	#4,d0
000005C8 6100                       		bsr.s	sub_5CA
000005CA 51CA FFFA                  		dbf	d2,loc_5C0
000005CE 4E75                       		rts	
000005D0                            ; End of function sub_5BA
000005D0                            
000005D0                            
000005D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005D0                            
000005D0                            
000005D0                            sub_5CA:				; XREF: sub_5BA
000005D0 3200                       		move.w	d0,d1
000005D2 0241 000F                  		andi.w	#$F,d1
000005D6 0C41 000A                  		cmpi.w	#$A,d1
000005DA 6500                       		bcs.s	loc_5D8
000005DC 5E41                       		addq.w	#7,d1
000005DE                            
000005DE                            loc_5D8:
000005DE 0641 07C0                  		addi.w	#$7C0,d1
000005E2 3C81                       		move.w	d1,(a6)
000005E4 4E75                       		rts	
000005E6                            ; End of function sub_5CA
000005E6                            
000005E6                            
000005E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E6                            
000005E6                            
000005E6                            ErrorWaitForC:				; XREF: loc_478
000005E6 6100 0000                  		bsr.w	ReadJoypads
000005EA 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005F0 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F4 4E75                       		rts	
000005F6                            ; End of function ErrorWaitForC
000005F6                            
000005F6                            ; ===========================================================================
000005F6                            
000005F6                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D36                            Art_Text_end:		even
00000D36                            
00000D36                            ; ===========================================================================
00000D36                            ;VBlank
00000D36                            loc_B10:				; XREF: Vectors
00000D36 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D3A 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D3E 6700                       		beq.s	loc_B88
00000D40 3039 00C0 0004             		move.w	($C00004).l,d0
00000D46 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D50 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D58                            ;		btst	#6,($FFFFFFF8).w
00000D58                            ;		beq.s	loc_B42
00000D58                            ;		move.w	#$700,d0
00000D58                            ;
00000D58                            ;loc_B3E:
00000D58                            ;		dbf	d0,loc_B3E
00000D58                            
00000D58                            ;loc_B42:
00000D58 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D5C 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D62 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D68 0240 003E                  		andi.w	#$3E,d0
00000D6C 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D70 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D74                            
00000D74                            loc_B5E:				; XREF: loc_B88
00000D74 4EB9 0000 0000             		jsr	sub_71B4C
00000D7A                            
00000D7A                            loc_B64:				; XREF: loc_D50
00000D7A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D7E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D82 4E73                       		rte	
00000D84                            ; ===========================================================================
00000D84 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D88 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D8C 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D90 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D94 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000D98 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000D9C 0000                       		dc.w loc_E72-off_B6E
00000D9E                            ; ===========================================================================
00000D9E                            
00000D9E                            loc_B88:				; XREF: loc_B10; off_B6E
00000D9E 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DA4 6700                       		beq.s	loc_B9A
00000DA6 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DAC 6600 FFC6                  		bne.w	loc_B5E
00000DB0                            
00000DB0                            loc_B9A:
00000DB0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DB6 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DBA 3039 00C0 0004             		move.w	($C00004).l,d0
00000DC0                            ;		btst	#6,($FFFFFFF8).w
00000DC0                            ;		beq.s	loc_BBA
00000DC0                            ;		move.w	#$700,d0
00000DC0                            ;
00000DC0                            ;loc_BB6:
00000DC0                            ;		dbf	d0,loc_BB6
00000DC0                            ;
00000DC0                            ;loc_BBA:
00000DC0 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DCE                            
00000DCE                            loc_BC8:
00000DCE 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DD6 66F6                       		bne.s	loc_BC8
00000DD8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DDC 6600                       		bne.s	loc_BFE
00000DDE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DEA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DF0 3ABC 977F                  		move.w	#$977F,(a5)
00000DF4 3ABC C000                  		move.w	#$C000,(a5)
00000DF8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DFE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E02 6000                       		bra.s	loc_C22
00000E04                            ; ===========================================================================
00000E04                            
00000E04                            loc_BFE:				; XREF: loc_BC8
00000E04 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E10 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E16 3ABC 977F                  		move.w	#$977F,(a5)
00000E1A 3ABC C000                  		move.w	#$C000,(a5)
00000E1E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E24 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E28                            
00000E28                            loc_C22:				; XREF: loc_BC8
00000E28 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E2C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E34 6000 FF3E                  		bra.w	loc_B5E
00000E38                            ; ===========================================================================
00000E38                            
00000E38                            loc_C32:				; XREF: off_B6E
00000E38 6100 0000                  		bsr.w	sub_106E
00000E3C                            
00000E3C                            loc_C36:				; XREF: off_B6E
00000E3C 4A78 F614                  		tst.w	($FFFFF614).w
00000E40 6700 0000                  		beq.w	locret_C42
00000E44 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E48                            
00000E48                            locret_C42:
00000E48 4E75                       		rts	
00000E4A                            ; ===========================================================================
00000E4A                            
00000E4A                            loc_C44:				; XREF: off_B6E
00000E4A 6100 0000                  		bsr.w	sub_106E
00000E4E 6100 0000                  		bsr.w	sub_6886
00000E52 6100 0000                  		bsr.w	sub_1642
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C5C
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C5C:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C5E:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 4E75                       		rts	
00000E6A                            ; ===========================================================================
00000E6A                            
00000E6A                            loc_C64:				; XREF: off_B6E
00000E6A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E70 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E74                            
00000E74                            loc_C6E:				; XREF: off_B6E
00000E74 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E7C                            
00000E7C                            loc_C76:
00000E7C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E84 66F6                       		bne.s	loc_C76		; if not, branch
00000E86 6100 0000                  		bsr.w	ReadJoypads
00000E8A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E8E 6600                       		bne.s	loc_CB0
00000E90 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E96 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E9C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EA2 3ABC 977F                  		move.w	#$977F,(a5)
00000EA6 3ABC C000                  		move.w	#$C000,(a5)
00000EAA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EB0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EB4 6000                       		bra.s	loc_CD4
00000EB6                            ; ===========================================================================
00000EB6                            
00000EB6                            loc_CB0:				; XREF: loc_C76
00000EB6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EBC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EC2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EC8 3ABC 977F                  		move.w	#$977F,(a5)
00000ECC 3ABC C000                  		move.w	#$C000,(a5)
00000ED0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ED6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EDA                            
00000EDA                            loc_CD4:				; XREF: loc_C76
00000EDA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EDE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE4 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
00000EEA 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
00000EEE 6A00                       		bpl.s	@60hz
00000EF0 303C 93E0                  		move.w	#$93E0,d0		; 240
00000EF4                            @60hz:
00000EF4 2A80                       		move.l	d0,(a5)
00000EF6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EFC 3ABC 977F                  		move.w	#$977F,(a5)
00000F00 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F04 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F0A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F14 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F1A 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F20 3ABC 977F                  		move.w	#$977F,(a5)
00000F24 3ABC 7800                  		move.w	#$7800,(a5)
00000F28 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F32 4A38 F767                  		tst.b	($FFFFF767).w
00000F36 6700                       		beq.s	loc_D50
00000F38 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F3E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F44 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F4A 3ABC 977F                  		move.w	#$977F,(a5)
00000F4E 3ABC 7000                  		move.w	#$7000,(a5)
00000F52 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F58 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F5C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F62                            
00000F62                            loc_D50:
00000F62 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F6A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F70 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F76 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F7C 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F82 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F88 6400                       		bcc.s	Demo_Time
00000F8A 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F90 588F                       		addq.l	#4,sp
00000F92 6000 FDE6                  		bra.w	loc_B64
00000F96                            
00000F96                            ; ---------------------------------------------------------------------------
00000F96                            ; Subroutine to	run a demo for an amount of time
00000F96                            ; ---------------------------------------------------------------------------
00000F96                            
00000F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F96                            
00000F96                            
00000F96                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000F96 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F9A 4EB9 0000 0000             		jsr	AniArt_Load
00000FA0 4EB9 0000 0000             		jsr	HudUpdate
00000FA6 6100 0000                  		bsr.w	sub_165E
00000FAA 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FAE 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FB2 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FB6                            
00000FB6                            Demo_TimeEnd:
00000FB6 4E75                       		rts	
00000FB8                            ; End of function Demo_Time
00000FB8                            
00000FB8                            ; ===========================================================================
00000FB8                            
00000FB8                            loc_DA6:				; XREF: off_B6E
00000FB8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FC0                            
00000FC0                            loc_DAE:
00000FC0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FC8 66F6                       		bne.s	loc_DAE		; if not, branch
00000FCA 6100 0000                  		bsr.w	ReadJoypads
00000FCE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FD4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FDA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FE0 3ABC 977F                  		move.w	#$977F,(a5)
00000FE4 3ABC C000                  		move.w	#$C000,(a5)
00000FE8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FEE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FF2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FF8 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FFE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001004 3ABC 977F                  		move.w	#$977F,(a5)
00001008 3ABC 7800                  		move.w	#$7800,(a5)
0000100C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001012 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001016 4BF9 00C0 0004             		lea	($C00004).l,a5
0000101C 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
00001022 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
00001026 6A00                       		bpl.s	@60hz
00001028 303C 93E0                  		move.w	#$93E0,d0		; 240
0000102C                            @60hz:
0000102C 2A80                       		move.l	d0,(a5)
0000102E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001034 3ABC 977F                  		move.w	#$977F,(a5)
00001038 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001042 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001046 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000104E 6100 0000                  		bsr.w	PalCycle_SS
00001052 4A38 F767                  		tst.b	($FFFFF767).w
00001056 6700                       		beq.s	loc_E64
00001058 4BF9 00C0 0004             		lea	($C00004).l,a5
0000105E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001064 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106A 3ABC 977F                  		move.w	#$977F,(a5)
0000106E 3ABC 7000                  		move.w	#$7000,(a5)
00001072 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001078 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001082                            
00001082                            loc_E64:
00001082 4A78 F614                  		tst.w	($FFFFF614).w
00001086 6700 0000                  		beq.w	locret_E70
0000108A 5378 F614                  		subq.w	#1,($FFFFF614).w
0000108E                            
0000108E                            locret_E70:
0000108E 4E75                       		rts	
00001090                            ; ===========================================================================
00001090                            
00001090                            loc_E72:				; XREF: off_B6E
00001090 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001098                            
00001098                            loc_E7A:
00001098 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A0 66F6                       		bne.s	loc_E7A		; if not, branch
000010A2 6100 0000                  		bsr.w	ReadJoypads
000010A6 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AA 6600                       		bne.s	loc_EB4
000010AC 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010B8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010BE 3ABC 977F                  		move.w	#$977F,(a5)
000010C2 3ABC C000                  		move.w	#$C000,(a5)
000010C6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D0 6000                       		bra.s	loc_ED8
000010D2                            ; ===========================================================================
000010D2                            
000010D2                            loc_EB4:				; XREF: loc_E7A
000010D2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010D8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010DE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E4 3ABC 977F                  		move.w	#$977F,(a5)
000010E8 3ABC C000                  		move.w	#$C000,(a5)
000010EC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F6                            
000010F6                            loc_ED8:				; XREF: loc_E7A
000010F6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FA 4BF9 00C0 0004             		lea	($C00004).l,a5
00001100 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
00001106 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
0000110A 6A00                       		bpl.s	@60hz
0000110C 303C 93E0                  		move.w	#$93E0,d0		; 240
00001110                            @60hz:
00001110 2A80                       		move.l	d0,(a5)
00001112 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001118 3ABC 977F                  		move.w	#$977F,(a5)
0000111C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001120 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001126 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000112A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001130 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001136 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000113C 3ABC 977F                  		move.w	#$977F,(a5)
00001140 3ABC 7800                  		move.w	#$7800,(a5)
00001144 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000114A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000114E 4A38 F767                  		tst.b	($FFFFF767).w
00001152 6700                       		beq.s	loc_F54
00001154 4BF9 00C0 0004             		lea	($C00004).l,a5
0000115A 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001160 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001166 3ABC 977F                  		move.w	#$977F,(a5)
0000116A 3ABC 7000                  		move.w	#$7000,(a5)
0000116E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001174 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001178 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000117E                            
0000117E                            loc_F54:
0000117E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001186 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
0000118C 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001192 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001198 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
0000119E 6100 0000                  		bsr.w	LoadTilesAsYouMove
000011A2 4EB9 0000 0000             		jsr	AniArt_Load
000011A8 4EB9 0000 0000             		jsr	HudUpdate
000011AE 6100 0000                  		bsr.w	sub_1642
000011B2 4E75                       		rts	
000011B4                            ; ===========================================================================
000011B4                            
000011B4                            loc_F8A:				; XREF: off_B6E
000011B4 6100 0000                  		bsr.w	sub_106E
000011B8 5238 F628                  		addq.b	#1,($FFFFF628).w
000011BC 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011C2 4E75                       		rts	
000011C4                            ; ===========================================================================
000011C4                            
000011C4                            loc_F9A:				; XREF: off_B6E
000011C4 6100 0000                  		bsr.w	sub_106E
000011C8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011CC 6000 0000                  		bra.w	sub_1642
000011D0                            ; ===========================================================================
000011D0                            
000011D0                            loc_FA6:				; XREF: off_B6E
000011D0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D8                            
000011D8                            loc_FAE:
000011D8 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011E0 66F6                       		bne.s	loc_FAE		; if not, branch
000011E2 6100 0000                  		bsr.w	ReadJoypads
000011E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000011EC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011F2 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F8 3ABC 977F                  		move.w	#$977F,(a5)
000011FC 3ABC C000                  		move.w	#$C000,(a5)
00001200 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001206 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000120A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001210 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001216 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000121C 3ABC 977F                  		move.w	#$977F,(a5)
00001220 3ABC 7800                  		move.w	#$7800,(a5)
00001224 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000122A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000122E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001234 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
0000123A 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
0000123E 6A00                       		bpl.s	@60hz
00001240 303C 93E0                  		move.w	#$93E0,d0		; 240
00001244                            @60hz:
00001244 2A80                       		move.l	d0,(a5)
00001246 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000124C 3ABC 977F                  		move.w	#$977F,(a5)
00001250 3ABC 7C00                  		move.w	#$7C00,(a5)
00001254 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000125A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000125E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001266 4A38 F767                  		tst.b	($FFFFF767).w
0000126A 6700                       		beq.s	loc_1060
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001278 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000127E 3ABC 977F                  		move.w	#$977F,(a5)
00001282 3ABC 7000                  		move.w	#$7000,(a5)
00001286 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000128C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001290 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001296                            
00001296                            loc_1060:
00001296 4A78 F614                  		tst.w	($FFFFF614).w
0000129A 6700 0000                  		beq.w	locret_106C
0000129E 5378 F614                  		subq.w	#1,($FFFFF614).w
000012A2                            
000012A2                            locret_106C:
000012A2 4E75                       		rts	
000012A4                            
000012A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A4                            
000012A4                            
000012A4                            sub_106E:				; XREF: loc_C32; et al
000012A4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000012AC                            
000012AC                            loc_1076:
000012AC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012B4 66F6                       		bne.s	loc_1076	; if not, branch
000012B6 6100 0000                  		bsr.w	ReadJoypads
000012BA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012C0 4A38 F64E                  		tst.b	($FFFFF64E).w
000012C4 6600                       		bne.s	loc_10B0
000012C6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012CC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012D2 3ABC 977F                  		move.w	#$977F,(a5)
000012D6 3ABC C000                  		move.w	#$C000,(a5)
000012DA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012E0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012E4 6000                       		bra.s	loc_10D4
000012E6                            ; ===========================================================================
000012E6                            
000012E6                            loc_10B0:				; XREF: sub_106E
000012E6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012EC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012F2 3ABC 977F                  		move.w	#$977F,(a5)
000012F6 3ABC C000                  		move.w	#$C000,(a5)
000012FA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001300 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001304                            
00001304                            loc_10D4:				; XREF: sub_106E
00001304 2ABC 9401 9340             		move.l	#$94019340,(a5)		; sprites
0000130A 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001310 3ABC 977F                  		move.w	#$977F,(a5)
00001314 3ABC 7800                  		move.w	#$7800,(a5)
00001318 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000131E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001322                            
00001322 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
00001328 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
0000132C 6A00                       		bpl.s	@60hz
0000132E 303C 93E0                  		move.w	#$93E0,d0		; 240
00001332                            @60hz:
00001332 2A80                       		move.l	d0,(a5)
00001334 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000133A 3ABC 977F                  		move.w	#$977F,(a5)
0000133E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001342 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001348 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000134C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001354 4E75                       		rts	
00001356                            ; End of function sub_106E
00001356                            
00001356                            ; ---------------------------------------------------------------------------
00001356                            ; Subroutine to	move pallets from the RAM to CRAM
00001356                            ; ---------------------------------------------------------------------------
00001356                            
00001356                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001356                            
00001356                            
00001356                            PalToCRAM:
00001356 46FC 2700                  		move	#$2700,sr
0000135A 4A78 F644                  		tst.w	($FFFFF644).w
0000135E 6700                       		beq.s	locret_119C
00001360 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001366 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000136A 43F9 00C0 0000             		lea	($C00000).l,a1
00001370 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001374 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000137C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 2298                       		move.l	(a0)+,(a1)
000013B2 2298                       		move.l	(a0)+,(a1)
000013B4 2298                       		move.l	(a0)+,(a1)
000013B6 2298                       		move.l	(a0)+,(a1)
000013B8 2298                       		move.l	(a0)+,(a1)
000013BA 2298                       		move.l	(a0)+,(a1)
000013BC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013C2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013C6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013CA 6600                       		bne.s	loc_119E
000013CC                            
000013CC                            locret_119C:
000013CC 4E73                       		rte	
000013CE                            ; ===========================================================================
000013CE                            
000013CE                            loc_119E:				; XREF: PalToCRAM
000013CE 4238 F64F                  		clr.b	($FFFFF64F).w
000013D2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013D6 6100 FBBE                  		bsr.w	Demo_Time
000013DA 4EB9 0000 0000             		jsr	sub_71B4C
000013E0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013E4 4E73                       		rte	
000013E6                            ; End of function PalToCRAM
000013E6                            
000013E6                            ; ---------------------------------------------------------------------------
000013E6                            ; Subroutine to	initialise joypads
000013E6                            ; ---------------------------------------------------------------------------
000013E6                            
000013E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013E6                            
000013E6                            
000013E6                            JoypadInit:				; XREF: GameClrRAM
000013E6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013EE                            
000013EE                            Joypad_WaitZ80:
000013EE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013F6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013F8 7040                       		moveq	#$40,d0
000013FA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001400 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001406 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
0000140C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001414 4E75                       		rts	
00001416                            ; End of function JoypadInit
00001416                            
00001416                            ; ---------------------------------------------------------------------------
00001416                            ; Subroutine to	read joypad input, and send it to the RAM
00001416                            ; ---------------------------------------------------------------------------
00001416                            
00001416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001416                            
00001416                            
00001416                            ReadJoypads:
00001416 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000141A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001420 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001422 5449                       		addq.w	#2,a1		; do the second	joypad
00001424                            
00001424                            Joypad_Read:
00001424 12BC 0000                  		move.b	#0,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1011                       		move.b	(a1),d0
0000142E E508                       		lsl.b	#2,d0
00001430 0200 00C0                  		andi.b	#$C0,d0
00001434 12BC 0040                  		move.b	#$40,(a1)
00001438 4E71                       		nop	
0000143A 4E71                       		nop	
0000143C 1211                       		move.b	(a1),d1
0000143E 0201 003F                  		andi.b	#$3F,d1
00001442 8001                       		or.b	d1,d0
00001444 4600                       		not.b	d0
00001446 1210                       		move.b	(a0),d1
00001448 B101                       		eor.b	d0,d1
0000144A 10C0                       		move.b	d0,(a0)+
0000144C C200                       		and.b	d0,d1
0000144E 10C1                       		move.b	d1,(a0)+
00001450 4E75                       		rts	
00001452                            ; End of function ReadJoypads
00001452                            
00001452                            
00001452                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001452                            
00001452                            
00001452                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001452 41F9 00C0 0004             		lea	($C00004).l,a0
00001458 43F9 00C0 0000             		lea	($C00000).l,a1
0000145E 45FA 0000                  		lea	VDPSetupArray(pc),a2
00001462 7E12                       		moveq	#$12,d7
00001464                            
00001464                            VDP_Loop:
00001464 309A                       		move.w	(a2)+,(a0)
00001466 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000146A                            
0000146A 303A 0000                  		move.w	VDPSetupArray+2(pc),d0
0000146E 0838 0007 FFF8             		btst	#7,($FFFFFFF8).w	; Is this a PAL console?
00001474 6700                       		beq.s	.UseV28			; If not, skip
00001476 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
0000147A                            .UseV28:
0000147A 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000147E 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001484 7000                       		moveq	#0,d0
00001486 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001490 3E3C 003F                  		move.w	#$3F,d7
00001494                            
00001494                            VDP_ClrCRAM:
00001494 3280                       		move.w	d0,(a1)
00001496 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000149A                            
0000149A 42B8 F616                  		clr.l	($FFFFF616).w
0000149E 42B8 F61A                  		clr.l	($FFFFF61A).w
000014A2 2F01                       		move.l	d1,-(sp)
000014A4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014AA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014AE 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014B4 3ABC 9780                  		move.w	#$9780,(a5)
000014B8 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014BE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014C6                            
000014C6                            loc_128E:
000014C6 3215                       		move.w	(a5),d1
000014C8 0801 0001                  		btst	#1,d1
000014CC 66F8                       		bne.s	loc_128E
000014CE                            
000014CE 3ABC 8F02                  		move.w	#$8F02,(a5)
000014D2 221F                       		move.l	(sp)+,d1
000014D4 4E75                       		rts	
000014D6                            ; End of function VDPSetupGame
000014D6                            
000014D6                            ; ===========================================================================
000014D6 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014DE 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014E6 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014EE 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014F6 9001 9100 9200             		dc.w $9001, $9100, $9200
000014FC                            
000014FC                            ; ---------------------------------------------------------------------------
000014FC                            ; Subroutine to	clear the screen
000014FC                            ; ---------------------------------------------------------------------------
000014FC                            
000014FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014FC                            
000014FC                            
000014FC                            ClearScreen:
000014FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001502 3ABC 8F01                  		move.w	#$8F01,(a5)
00001506 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000150C 3ABC 9780                  		move.w	#$9780,(a5)
00001510 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001516 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000151E                            
0000151E                            loc_12E6:
0000151E 3215                       		move.w	(a5),d1
00001520 0801 0001                  		btst	#1,d1
00001524 66F8                       		bne.s	loc_12E6
00001526                            
00001526 3ABC 8F02                  		move.w	#$8F02,(a5)
0000152A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001530 3ABC 8F01                  		move.w	#$8F01,(a5)
00001534 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000153A 3ABC 9780                  		move.w	#$9780,(a5)
0000153E 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001544 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000154C                            
0000154C                            loc_1314:
0000154C 3215                       		move.w	(a5),d1
0000154E 0801 0001                  		btst	#1,d1
00001552 66F8                       		bne.s	loc_1314
00001554                            
00001554 3ABC 8F02                  		move.w	#$8F02,(a5)
00001558 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001560 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001568 43F8 F800                  		lea	($FFFFF800).w,a1
0000156C 7000                       		moveq	#0,d0
0000156E 323C 009F                  		move.w	#$9F,d1
00001572                            
00001572                            loc_133A:
00001572 22C0                       		move.l	d0,(a1)+
00001574 51C9 FFFC                  		dbf	d1,loc_133A
00001578                            
00001578 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000157C 7000                       		moveq	#0,d0
0000157E 323C 00FF                  		move.w	#$FF,d1
00001582                            
00001582                            loc_134A:
00001582 22C0                       		move.l	d0,(a1)+
00001584 51C9 FFFC                  		dbf	d1,loc_134A
00001588 4E75                       		rts	
0000158A                            ; End of function ClearScreen
0000158A                            
0000158A                            ; ---------------------------------------------------------------------------
0000158A                            ; Subroutine to	load the sound driver
0000158A                            ; ---------------------------------------------------------------------------
0000158A                            
0000158A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000158A                            
0000158A                            
0000158A                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
0000158A 4E71                       		nop	
0000158C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001594 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000159C 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
000015A2 43F9 00A0 0000             		lea	($A00000).l,a1
000015A8 6100 0000                  		bsr.w	KosDec		; decompress
000015AC 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015B4 4E71                       		nop	
000015B6 4E71                       		nop	
000015B8 4E71                       		nop	
000015BA 4E71                       		nop	
000015BC 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015C4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015CC 4E75                       		rts	
000015CE                            ; End of function SoundDriverLoad
000015CE                            
000015CE                            ; ---------------------------------------------------------------------------
000015CE                            ; Subroutine to	play a sound or	music track
000015CE                            ; ---------------------------------------------------------------------------
000015CE                            
000015CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CE                            
000015CE                            
000015CE                            PlaySound:
000015CE 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015D2 4E75                       		rts	
000015D4                            ; End of function PlaySound
000015D4                            
000015D4                            ; ---------------------------------------------------------------------------
000015D4                            ; Subroutine to	play a special sound/music (E0-E4)
000015D4                            ;
000015D4                            ; E0 - Fade out
000015D4                            ; E1 - Sega
000015D4                            ; E2 - Speed up
000015D4                            ; E3 - Normal speed
000015D4                            ; E4 - Stop
000015D4                            ; ---------------------------------------------------------------------------
000015D4                            
000015D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D4                            
000015D4                            
000015D4                            PlaySound_Special:
000015D4 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015D8 4E75                       		rts	
000015DA                            ; End of function PlaySound_Special
000015DA                            
000015DA                            ; ===========================================================================
000015DA                            ; ---------------------------------------------------------------------------
000015DA                            ; Unused sound/music subroutine
000015DA                            ; ---------------------------------------------------------------------------
000015DA                            
000015DA                            PlaySound_Unk:
000015DA 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015DE 4E75                       		rts	
000015E0                            
000015E0                            ; ---------------------------------------------------------------------------
000015E0                            ; Subroutine to	pause the game
000015E0                            ; ---------------------------------------------------------------------------
000015E0                            
000015E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015E0                            
000015E0                            
000015E0                            PauseGame:				; XREF: Level_MainLoop; et al
000015E0 4E71                       		nop	
000015E2 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015E6 6700                       		beq.s	Unpause		; if not, branch
000015E8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015EC 6600                       		bne.s	loc_13BE	; if yes, branch
000015EE 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015F4 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015F6                            
000015F6                            loc_13BE:
000015F6 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015FC 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001602                            
00001602                            loc_13CA:
00001602 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001608 6100 0000                  		bsr.w	DelayProgram
0000160C 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001610 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001612 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001618 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000161A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001620 4E71                       		nop	
00001622 6000                       		bra.s	loc_1404
00001624                            ; ===========================================================================
00001624                            
00001624                            Pause_ChkBC:				; XREF: PauseGame
00001624 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
0000162A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000162C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001632 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001634                            
00001634                            Pause_ChkStart:				; XREF: PauseGame
00001634 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000163A 67C6                       		beq.s	loc_13CA	; if not, branch
0000163C                            
0000163C                            loc_1404:				; XREF: PauseGame
0000163C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001642                            
00001642                            Unpause:				; XREF: PauseGame
00001642 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001648                            
00001648                            Pause_DoNothing:			; XREF: PauseGame
00001648 4E75                       		rts	
0000164A                            ; ===========================================================================
0000164A                            
0000164A                            Pause_SlowMo:				; XREF: PauseGame
0000164A 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001650 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001656 4E75                       		rts	
00001658                            ; End of function PauseGame
00001658                            
00001658                            ; ---------------------------------------------------------------------------
00001658                            ; Subroutine to	display	patterns via the VDP
00001658                            ; ---------------------------------------------------------------------------
00001658                            
00001658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001658                            
00001658                            
00001658                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001658 4DF9 00C0 0000             		lea	($C00000).l,a6
0000165E 283C 0080 0000             		move.l	#$800000,d4
00001664                            
00001664                            loc_142C:
00001664 2D40 0004                  		move.l	d0,4(a6)
00001668 3601                       		move.w	d1,d3
0000166A                            
0000166A                            loc_1432:
0000166A 3C99                       		move.w	(a1)+,(a6)
0000166C 51CB FFFC                  		dbf	d3,loc_1432
00001670 D084                       		add.l	d4,d0
00001672 51CA FFF0                  		dbf	d2,loc_142C
00001676 4E75                       		rts	
00001678                            ; End of function ShowVDPGraphics
00001678                            
00001678                            ; ---------------------------------------------------------------------------
00001678                            ; Nemesis decompression	algorithm
00001678                            ; ---------------------------------------------------------------------------
00001678                            
00001678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001678                            
00001678                            
00001678                            NemDec:
00001678 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167C 47F9 0000 0000             		lea	(loc_1502).l,a3
00001682 49F9 00C0 0000             		lea	($C00000).l,a4
00001688 6000                       		bra.s	loc_145C
0000168A                            ; ===========================================================================
0000168A 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000168E 47F9 0000 0000             		lea	(loc_1518).l,a3
00001694                            
00001694                            loc_145C:				; XREF: NemDec
00001694 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001698 3418                       		move.w	(a0)+,d2
0000169A E34A                       		lsl.w	#1,d2
0000169C 6400                       		bcc.s	loc_146A
0000169E D6FC 000A                  		adda.w	#$A,a3
000016A2                            
000016A2                            loc_146A:
000016A2 E54A                       		lsl.w	#2,d2
000016A4 3A42                       		movea.w	d2,a5
000016A6 7608                       		moveq	#8,d3
000016A8 7400                       		moveq	#0,d2
000016AA 7800                       		moveq	#0,d4
000016AC 6100 0000                  		bsr.w	NemDec4
000016B0 1A18                       		move.b	(a0)+,d5
000016B2 E145                       		asl.w	#8,d5
000016B4 1A18                       		move.b	(a0)+,d5
000016B6 3C3C 0010                  		move.w	#$10,d6
000016BA 6100                       		bsr.s	NemDec2
000016BC 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016C0 4E75                       		rts	
000016C2                            ; End of function NemDec
000016C2                            
000016C2                            
000016C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016C2                            
000016C2                            
000016C2                            NemDec2:				; XREF: NemDec
000016C2 3E06                       		move.w	d6,d7
000016C4 5147                       		subq.w	#8,d7
000016C6 3205                       		move.w	d5,d1
000016C8 EE69                       		lsr.w	d7,d1
000016CA 0C01 00FC                  		cmpi.b	#-4,d1
000016CE 6400                       		bcc.s	loc_14D6
000016D0 0241 00FF                  		andi.w	#$FF,d1
000016D4 D241                       		add.w	d1,d1
000016D6 1031 1000                  		move.b	(a1,d1.w),d0
000016DA 4880                       		ext.w	d0
000016DC 9C40                       		sub.w	d0,d6
000016DE 0C46 0009                  		cmpi.w	#9,d6
000016E2 6400                       		bcc.s	loc_14B2
000016E4 5046                       		addq.w	#8,d6
000016E6 E145                       		asl.w	#8,d5
000016E8 1A18                       		move.b	(a0)+,d5
000016EA                            
000016EA                            loc_14B2:
000016EA 1231 1001                  		move.b	1(a1,d1.w),d1
000016EE 3001                       		move.w	d1,d0
000016F0 0241 000F                  		andi.w	#$F,d1
000016F4 0240 00F0                  		andi.w	#$F0,d0
000016F8                            
000016F8                            loc_14C0:				; XREF: NemDec3
000016F8 E848                       		lsr.w	#4,d0
000016FA                            
000016FA                            loc_14C2:				; XREF: NemDec3
000016FA E98C                       		lsl.l	#4,d4
000016FC 8801                       		or.b	d1,d4
000016FE 5343                       		subq.w	#1,d3
00001700 6600                       		bne.s	loc_14D0
00001702 4ED3                       		jmp	(a3)
00001704                            ; End of function NemDec2
00001704                            
00001704                            
00001704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001704                            
00001704                            
00001704                            NemDec3:				; XREF: loc_1502
00001704 7800                       		moveq	#0,d4
00001706 7608                       		moveq	#8,d3
00001708                            
00001708                            loc_14D0:				; XREF: NemDec2
00001708 51C8 FFF0                  		dbf	d0,loc_14C2
0000170C 60B4                       		bra.s	NemDec2
0000170E                            ; ===========================================================================
0000170E                            
0000170E                            loc_14D6:				; XREF: NemDec2
0000170E 5D46                       		subq.w	#6,d6
00001710 0C46 0009                  		cmpi.w	#9,d6
00001714 6400                       		bcc.s	loc_14E4
00001716 5046                       		addq.w	#8,d6
00001718 E145                       		asl.w	#8,d5
0000171A 1A18                       		move.b	(a0)+,d5
0000171C                            
0000171C                            loc_14E4:				; XREF: NemDec3
0000171C 5F46                       		subq.w	#7,d6
0000171E 3205                       		move.w	d5,d1
00001720 EC69                       		lsr.w	d6,d1
00001722 3001                       		move.w	d1,d0
00001724 0241 000F                  		andi.w	#$F,d1
00001728 0240 0070                  		andi.w	#$70,d0
0000172C 0C46 0009                  		cmpi.w	#9,d6
00001730 64C6                       		bcc.s	loc_14C0
00001732 5046                       		addq.w	#8,d6
00001734 E145                       		asl.w	#8,d5
00001736 1A18                       		move.b	(a0)+,d5
00001738 60BE                       		bra.s	loc_14C0
0000173A                            ; End of function NemDec3
0000173A                            
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            loc_1502:				; XREF: NemDec
0000173A 2884                       		move.l	d4,(a4)
0000173C 534D                       		subq.w	#1,a5
0000173E 380D                       		move.w	a5,d4
00001740 66C2                       		bne.s	NemDec3
00001742 4E75                       		rts	
00001744                            ; ===========================================================================
00001744 B982                       		eor.l	d4,d2
00001746 2882                       		move.l	d2,(a4)
00001748 534D                       		subq.w	#1,a5
0000174A 380D                       		move.w	a5,d4
0000174C 66B6                       		bne.s	NemDec3
0000174E 4E75                       		rts	
00001750                            ; ===========================================================================
00001750                            
00001750                            loc_1518:				; XREF: NemDec
00001750 28C4                       		move.l	d4,(a4)+
00001752 534D                       		subq.w	#1,a5
00001754 380D                       		move.w	a5,d4
00001756 66AC                       		bne.s	NemDec3
00001758 4E75                       		rts	
0000175A                            ; ===========================================================================
0000175A B982                       		eor.l	d4,d2
0000175C 28C2                       		move.l	d2,(a4)+
0000175E 534D                       		subq.w	#1,a5
00001760 380D                       		move.w	a5,d4
00001762 66A0                       		bne.s	NemDec3
00001764 4E75                       		rts	
00001766                            
00001766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001766                            
00001766                            
00001766                            NemDec4:				; XREF: NemDec
00001766 1018                       		move.b	(a0)+,d0
00001768                            
00001768                            loc_1530:
00001768 0C00 00FF                  		cmpi.b	#-1,d0
0000176C 6600                       		bne.s	loc_1538
0000176E 4E75                       		rts	
00001770                            ; ===========================================================================
00001770                            
00001770                            loc_1538:				; XREF: NemDec4
00001770 3E00                       		move.w	d0,d7
00001772                            
00001772                            loc_153A:
00001772 1018                       		move.b	(a0)+,d0
00001774 0C00 0080                  		cmpi.b	#$80,d0
00001778 64EE                       		bcc.s	loc_1530
0000177A 1200                       		move.b	d0,d1
0000177C 0247 000F                  		andi.w	#$F,d7
00001780 0241 0070                  		andi.w	#$70,d1
00001784 8E41                       		or.w	d1,d7
00001786 0240 000F                  		andi.w	#$F,d0
0000178A 1200                       		move.b	d0,d1
0000178C E149                       		lsl.w	#8,d1
0000178E 8E41                       		or.w	d1,d7
00001790 7208                       		moveq	#8,d1
00001792 9240                       		sub.w	d0,d1
00001794 6600                       		bne.s	loc_1568
00001796 1018                       		move.b	(a0)+,d0
00001798 D040                       		add.w	d0,d0
0000179A 3387 0000                  		move.w	d7,(a1,d0.w)
0000179E 60D2                       		bra.s	loc_153A
000017A0                            ; ===========================================================================
000017A0                            
000017A0                            loc_1568:				; XREF: NemDec4
000017A0 1018                       		move.b	(a0)+,d0
000017A2 E368                       		lsl.w	d1,d0
000017A4 D040                       		add.w	d0,d0
000017A6 7A01                       		moveq	#1,d5
000017A8 E36D                       		lsl.w	d1,d5
000017AA 5345                       		subq.w	#1,d5
000017AC                            
000017AC                            loc_1574:
000017AC 3387 0000                  		move.w	d7,(a1,d0.w)
000017B0 5440                       		addq.w	#2,d0
000017B2 51CD FFF8                  		dbf	d5,loc_1574
000017B6 60BA                       		bra.s	loc_153A
000017B8                            ; End of function NemDec4
000017B8                            
000017B8                            ; ---------------------------------------------------------------------------
000017B8                            ; Subroutine to	load pattern load cues
000017B8                            ; ---------------------------------------------------------------------------
000017B8                            
000017B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B8                            
000017B8                            
000017B8                            LoadPLC:
000017B8 48E7 0060                  		movem.l	a1-a2,-(sp)
000017BC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017C2 D040                       		add.w	d0,d0
000017C4 3031 0000                  		move.w	(a1,d0.w),d0
000017C8 43F1 0000                  		lea	(a1,d0.w),a1
000017CC 45F8 F680                  		lea	($FFFFF680).w,a2
000017D0                            
000017D0                            loc_1598:
000017D0 4A92                       		tst.l	(a2)
000017D2 6700                       		beq.s	loc_15A0
000017D4 5C4A                       		addq.w	#6,a2
000017D6 60F8                       		bra.s	loc_1598
000017D8                            ; ===========================================================================
000017D8                            
000017D8                            loc_15A0:				; XREF: LoadPLC
000017D8 3019                       		move.w	(a1)+,d0
000017DA 6B00                       		bmi.s	loc_15AC
000017DC                            
000017DC                            loc_15A4:
000017DC 24D9                       		move.l	(a1)+,(a2)+
000017DE 34D9                       		move.w	(a1)+,(a2)+
000017E0 51C8 FFFA                  		dbf	d0,loc_15A4
000017E4                            
000017E4                            loc_15AC:
000017E4 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017E8 4E75                       		rts	
000017EA                            ; End of function LoadPLC
000017EA                            
000017EA                            
000017EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017EA                            
000017EA                            
000017EA                            LoadPLC2:
000017EA 48E7 0060                  		movem.l	a1-a2,-(sp)
000017EE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017F4 D040                       		add.w	d0,d0
000017F6 3031 0000                  		move.w	(a1,d0.w),d0
000017FA 43F1 0000                  		lea	(a1,d0.w),a1
000017FE 6100                       		bsr.s	ClearPLC
00001800 45F8 F680                  		lea	($FFFFF680).w,a2
00001804 3019                       		move.w	(a1)+,d0
00001806 6B00                       		bmi.s	loc_15D8
00001808                            
00001808                            loc_15D0:
00001808 24D9                       		move.l	(a1)+,(a2)+
0000180A 34D9                       		move.w	(a1)+,(a2)+
0000180C 51C8 FFFA                  		dbf	d0,loc_15D0
00001810                            
00001810                            loc_15D8:
00001810 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001814 4E75                       		rts	
00001816                            ; End of function LoadPLC2
00001816                            
00001816                            ; ---------------------------------------------------------------------------
00001816                            ; Subroutine to	clear the pattern load cues
00001816                            ; ---------------------------------------------------------------------------
00001816                            
00001816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001816                            
00001816                            
00001816                            ClearPLC:				; XREF: LoadPLC2
00001816 45F8 F680                  		lea	($FFFFF680).w,a2
0000181A 701F                       		moveq	#$1F,d0
0000181C                            
0000181C                            ClearPLC_Loop:
0000181C 429A                       		clr.l	(a2)+
0000181E 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001822 4E75                       		rts	
00001824                            ; End of function ClearPLC
00001824                            
00001824                            ; ---------------------------------------------------------------------------
00001824                            ; Subroutine to	use graphics listed in a pattern load cue
00001824                            ; ---------------------------------------------------------------------------
00001824                            
00001824                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001824                            
00001824                            
00001824                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001824 4AB8 F680                  		tst.l	($FFFFF680).w
00001828 6700                       		beq.s	locret_1640
0000182A 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000182E 6600                       		bne.s	locret_1640
00001830 2078 F680                  		movea.l	($FFFFF680).w,a0
00001834 47F9 0000 173A             		lea	(loc_1502).l,a3
0000183A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000183E 3418                       		move.w	(a0)+,d2
00001840 6A00                       		bpl.s	loc_160E
00001842 D6FC 000A                  		adda.w	#$A,a3
00001846                            
00001846                            loc_160E:
00001846 0242 7FFF                  		andi.w	#$7FFF,d2
0000184A 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000184E 6100 FF16                  		bsr.w	NemDec4
00001852 1A18                       		move.b	(a0)+,d5
00001854 E145                       		asl.w	#8,d5
00001856 1A18                       		move.b	(a0)+,d5
00001858 7C10                       		moveq	#$10,d6
0000185A 7000                       		moveq	#0,d0
0000185C 21C8 F680                  		move.l	a0,($FFFFF680).w
00001860 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001864 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001868 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000186C 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001870 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001874 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001878                            
00001878                            locret_1640:
00001878 4E75                       		rts	
0000187A                            ; End of function RunPLC_RAM
0000187A                            
0000187A                            
0000187A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187A                            
0000187A                            
0000187A                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
0000187A 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000187E 6700 0000                  		beq.w	locret_16DA
00001882 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001888 7000                       		moveq	#0,d0
0000188A 3038 F684                  		move.w	($FFFFF684).w,d0
0000188E 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001894 6000                       		bra.s	loc_1676
00001896                            ; End of function sub_1642
00001896                            
00001896                            
00001896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001896                            
00001896                            
00001896                            sub_165E:				; XREF: Demo_Time
00001896 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000189A 6700                       		beq.s	locret_16DA
0000189C 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000018A2 7000                       		moveq	#0,d0
000018A4 3038 F684                  		move.w	($FFFFF684).w,d0
000018A8 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000018AE                            
000018AE                            loc_1676:				; XREF: sub_1642
000018AE 49F9 00C0 0004             		lea	($C00004).l,a4
000018B4 E588                       		lsl.l	#2,d0
000018B6 E448                       		lsr.w	#2,d0
000018B8 0040 4000                  		ori.w	#$4000,d0
000018BC 4840                       		swap	d0
000018BE 2880                       		move.l	d0,(a4)
000018C0 594C                       		subq.w	#4,a4
000018C2 2078 F680                  		movea.l	($FFFFF680).w,a0
000018C6 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018CA 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018CE 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018D2 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018D6 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018DA 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018DE 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018E2                            
000018E2                            loc_16AA:				; XREF: sub_165E
000018E2 3A7C 0008                  		movea.w	#8,a5
000018E6 6100 FE1C                  		bsr.w	NemDec3
000018EA 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018EE 6700                       		beq.s	loc_16DC
000018F0 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018F4 66EC                       		bne.s	loc_16AA
000018F6 21C8 F680                  		move.l	a0,($FFFFF680).w
000018FA 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018FE 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001902 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001906 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000190A 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000190E 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001912                            
00001912                            locret_16DA:				; XREF: sub_1642
00001912 4E75                       		rts	
00001914                            ; ===========================================================================
00001914                            
00001914                            loc_16DC:				; XREF: sub_165E
00001914 41F8 F680                  		lea	($FFFFF680).w,a0
00001918 7015                       		moveq	#$15,d0
0000191A                            
0000191A                            loc_16E2:				; XREF: sub_165E
0000191A 20E8 0006                  		move.l	6(a0),(a0)+
0000191E 51C8 FFFA                  		dbf	d0,loc_16E2
00001922 4E75                       		rts	
00001924                            ; End of function sub_165E
00001924                            
00001924                            ; ---------------------------------------------------------------------------
00001924                            ; Subroutine to	execute	the pattern load cue
00001924                            ; ---------------------------------------------------------------------------
00001924                            
00001924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001924                            
00001924                            
00001924                            RunPLC_ROM:
00001924 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000192A D040                       		add.w	d0,d0
0000192C 3031 0000                  		move.w	(a1,d0.w),d0
00001930 43F1 0000                  		lea	(a1,d0.w),a1
00001934 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001936                            
00001936                            RunPLC_Loop:
00001936 2059                       		movea.l	(a1)+,a0	; get art pointer
00001938 7000                       		moveq	#0,d0
0000193A 3019                       		move.w	(a1)+,d0	; get VRAM address
0000193C E588                       		lsl.l	#2,d0		; divide address by $20
0000193E E448                       		lsr.w	#2,d0
00001940 0040 4000                  		ori.w	#$4000,d0
00001944 4840                       		swap	d0
00001946 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000194C 6100 FD2A                  		bsr.w	NemDec		; decompress
00001950 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001954 4E75                       		rts	
00001956                            ; End of function RunPLC_ROM
00001956                            
00001956                            ; ---------------------------------------------------------------------------
00001956                            ; Enigma decompression algorithm
00001956                            ; ---------------------------------------------------------------------------
00001956                            
00001956                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001956                            
00001956                            
00001956                            EniDec:
00001956 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000195A 3640                       		movea.w	d0,a3
0000195C 1018                       		move.b	(a0)+,d0
0000195E 4880                       		ext.w	d0
00001960 3A40                       		movea.w	d0,a5
00001962 1818                       		move.b	(a0)+,d4
00001964 E70C                       		lsl.b	#3,d4
00001966 3458                       		movea.w	(a0)+,a2
00001968 D4CB                       		adda.w	a3,a2
0000196A 3858                       		movea.w	(a0)+,a4
0000196C D8CB                       		adda.w	a3,a4
0000196E 1A18                       		move.b	(a0)+,d5
00001970 E145                       		asl.w	#8,d5
00001972 1A18                       		move.b	(a0)+,d5
00001974 7C10                       		moveq	#$10,d6
00001976                            
00001976                            loc_173E:				; XREF: loc_1768
00001976 7007                       		moveq	#7,d0
00001978 3E06                       		move.w	d6,d7
0000197A 9E40                       		sub.w	d0,d7
0000197C 3205                       		move.w	d5,d1
0000197E EE69                       		lsr.w	d7,d1
00001980 0241 007F                  		andi.w	#$7F,d1
00001984 3401                       		move.w	d1,d2
00001986 0C41 0040                  		cmpi.w	#$40,d1
0000198A 6400                       		bcc.s	loc_1758
0000198C 7006                       		moveq	#6,d0
0000198E E24A                       		lsr.w	#1,d2
00001990                            
00001990                            loc_1758:
00001990 6100 0000                  		bsr.w	sub_188C
00001994 0242 000F                  		andi.w	#$F,d2
00001998 E849                       		lsr.w	#4,d1
0000199A D241                       		add.w	d1,d1
0000199C 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000019A0                            ; End of function EniDec
000019A0                            
000019A0                            ; ===========================================================================
000019A0                            
000019A0                            loc_1768:				; XREF: loc_17B4
000019A0 32CA                       		move.w	a2,(a1)+
000019A2 524A                       		addq.w	#1,a2
000019A4 51CA FFFA                  		dbf	d2,loc_1768
000019A8 60CC                       		bra.s	loc_173E
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_1772:				; XREF: loc_17B4
000019AA 32CC                       		move.w	a4,(a1)+
000019AC 51CA FFFC                  		dbf	d2,loc_1772
000019B0 60C4                       		bra.s	loc_173E
000019B2                            ; ===========================================================================
000019B2                            
000019B2                            loc_177A:				; XREF: loc_17B4
000019B2 6100 0000                  		bsr.w	loc_17DC
000019B6                            
000019B6                            loc_177E:
000019B6 32C1                       		move.w	d1,(a1)+
000019B8 51CA FFFC                  		dbf	d2,loc_177E
000019BC 60B8                       		bra.s	loc_173E
000019BE                            ; ===========================================================================
000019BE                            
000019BE                            loc_1786:				; XREF: loc_17B4
000019BE 6100 0000                  		bsr.w	loc_17DC
000019C2                            
000019C2                            loc_178A:
000019C2 32C1                       		move.w	d1,(a1)+
000019C4 5241                       		addq.w	#1,d1
000019C6 51CA FFFA                  		dbf	d2,loc_178A
000019CA 60AA                       		bra.s	loc_173E
000019CC                            ; ===========================================================================
000019CC                            
000019CC                            loc_1794:				; XREF: loc_17B4
000019CC 6100 0000                  		bsr.w	loc_17DC
000019D0                            
000019D0                            loc_1798:
000019D0 32C1                       		move.w	d1,(a1)+
000019D2 5341                       		subq.w	#1,d1
000019D4 51CA FFFA                  		dbf	d2,loc_1798
000019D8 609C                       		bra.s	loc_173E
000019DA                            ; ===========================================================================
000019DA                            
000019DA                            loc_17A2:				; XREF: loc_17B4
000019DA 0C42 000F                  		cmpi.w	#$F,d2
000019DE 6700                       		beq.s	loc_17C4
000019E0                            
000019E0                            loc_17A8:
000019E0 6100 0000                  		bsr.w	loc_17DC
000019E4 32C1                       		move.w	d1,(a1)+
000019E6 51CA FFF8                  		dbf	d2,loc_17A8
000019EA 608A                       		bra.s	loc_173E
000019EC                            ; ===========================================================================
000019EC                            
000019EC                            loc_17B4:				; XREF: EniDec
000019EC 60B2                       		bra.s	loc_1768
000019EE                            ; ===========================================================================
000019EE 60B0                       		bra.s	loc_1768
000019F0                            ; ===========================================================================
000019F0 60B8                       		bra.s	loc_1772
000019F2                            ; ===========================================================================
000019F2 60B6                       		bra.s	loc_1772
000019F4                            ; ===========================================================================
000019F4 60BC                       		bra.s	loc_177A
000019F6                            ; ===========================================================================
000019F6 60C6                       		bra.s	loc_1786
000019F8                            ; ===========================================================================
000019F8 60D2                       		bra.s	loc_1794
000019FA                            ; ===========================================================================
000019FA 60DE                       		bra.s	loc_17A2
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17C4:				; XREF: loc_17A2
000019FC 5348                       		subq.w	#1,a0
000019FE 0C46 0010                  		cmpi.w	#$10,d6
00001A02 6600                       		bne.s	loc_17CE
00001A04 5348                       		subq.w	#1,a0
00001A06                            
00001A06                            loc_17CE:
00001A06 3008                       		move.w	a0,d0
00001A08 E248                       		lsr.w	#1,d0
00001A0A 6400                       		bcc.s	loc_17D6
00001A0C 5248                       		addq.w	#1,a0
00001A0E                            
00001A0E                            loc_17D6:
00001A0E 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001A12 4E75                       		rts	
00001A14                            ; ===========================================================================
00001A14                            
00001A14                            loc_17DC:				; XREF: loc_17A2
00001A14 360B                       		move.w	a3,d3
00001A16 1204                       		move.b	d4,d1
00001A18 D201                       		add.b	d1,d1
00001A1A 6400                       		bcc.s	loc_17EE
00001A1C 5346                       		subq.w	#1,d6
00001A1E 0D05                       		btst	d6,d5
00001A20 6700                       		beq.s	loc_17EE
00001A22 0043 8000                  		ori.w	#-$8000,d3
00001A26                            
00001A26                            loc_17EE:
00001A26 D201                       		add.b	d1,d1
00001A28 6400                       		bcc.s	loc_17FC
00001A2A 5346                       		subq.w	#1,d6
00001A2C 0D05                       		btst	d6,d5
00001A2E 6700                       		beq.s	loc_17FC
00001A30 0643 4000                  		addi.w	#$4000,d3
00001A34                            
00001A34                            loc_17FC:
00001A34 D201                       		add.b	d1,d1
00001A36 6400                       		bcc.s	loc_180A
00001A38 5346                       		subq.w	#1,d6
00001A3A 0D05                       		btst	d6,d5
00001A3C 6700                       		beq.s	loc_180A
00001A3E 0643 2000                  		addi.w	#$2000,d3
00001A42                            
00001A42                            loc_180A:
00001A42 D201                       		add.b	d1,d1
00001A44 6400                       		bcc.s	loc_1818
00001A46 5346                       		subq.w	#1,d6
00001A48 0D05                       		btst	d6,d5
00001A4A 6700                       		beq.s	loc_1818
00001A4C 0043 1000                  		ori.w	#$1000,d3
00001A50                            
00001A50                            loc_1818:
00001A50 D201                       		add.b	d1,d1
00001A52 6400                       		bcc.s	loc_1826
00001A54 5346                       		subq.w	#1,d6
00001A56 0D05                       		btst	d6,d5
00001A58 6700                       		beq.s	loc_1826
00001A5A 0043 0800                  		ori.w	#$800,d3
00001A5E                            
00001A5E                            loc_1826:
00001A5E 3205                       		move.w	d5,d1
00001A60 3E06                       		move.w	d6,d7
00001A62 9E4D                       		sub.w	a5,d7
00001A64 6400                       		bcc.s	loc_1856
00001A66 3C07                       		move.w	d7,d6
00001A68 0646 0010                  		addi.w	#$10,d6
00001A6C 4447                       		neg.w	d7
00001A6E EF69                       		lsl.w	d7,d1
00001A70 1A10                       		move.b	(a0),d5
00001A72 EF3D                       		rol.b	d7,d5
00001A74 DE47                       		add.w	d7,d7
00001A76 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A7A D245                       		add.w	d5,d1
00001A7C                            
00001A7C                            loc_1844:				; XREF: loc_1868
00001A7C 300D                       		move.w	a5,d0
00001A7E D040                       		add.w	d0,d0
00001A80 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A84 D243                       		add.w	d3,d1
00001A86 1A18                       		move.b	(a0)+,d5
00001A88 E14D                       		lsl.w	#8,d5
00001A8A 1A18                       		move.b	(a0)+,d5
00001A8C 4E75                       		rts	
00001A8E                            ; ===========================================================================
00001A8E                            
00001A8E                            loc_1856:				; XREF: loc_1826
00001A8E 6700                       		beq.s	loc_1868
00001A90 EE69                       		lsr.w	d7,d1
00001A92 300D                       		move.w	a5,d0
00001A94 D040                       		add.w	d0,d0
00001A96 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A9A D243                       		add.w	d3,d1
00001A9C 300D                       		move.w	a5,d0
00001A9E 6000                       		bra.s	sub_188C
00001AA0                            ; ===========================================================================
00001AA0                            
00001AA0                            loc_1868:				; XREF: loc_1856
00001AA0 7C10                       		moveq	#$10,d6
00001AA2                            
00001AA2                            loc_186A:
00001AA2 60D8                       		bra.s	loc_1844
00001AA4                            ; ===========================================================================
00001AA4 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001ABA 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AC4                            
00001AC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC4                            
00001AC4                            
00001AC4                            sub_188C:				; XREF: EniDec
00001AC4 9C40                       		sub.w	d0,d6
00001AC6 0C46 0009                  		cmpi.w	#9,d6
00001ACA 6400                       		bcc.s	locret_189A
00001ACC 5046                       		addq.w	#8,d6
00001ACE E145                       		asl.w	#8,d5
00001AD0 1A18                       		move.b	(a0)+,d5
00001AD2                            
00001AD2                            locret_189A:
00001AD2 4E75                       		rts	
00001AD4                            ; End of function sub_188C
00001AD4                            
00001AD4                            ; ---------------------------------------------------------------------------
00001AD4                            ; Kosinski decompression algorithm
00001AD4                            ; ---------------------------------------------------------------------------
00001AD4                            
00001AD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AD4                            
00001AD4                            
00001AD4                            KosDec:
00001AD4                            
00001AD4 =FFFFFFFE                  var_2		= -2
00001AD4 =FFFFFFFF                  var_1		= -1
00001AD4                            
00001AD4 558F                       		subq.l	#2,sp
00001AD6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001ADA 1E98                       		move.b	(a0)+,(sp)
00001ADC 3A17                       		move.w	(sp),d5
00001ADE 780F                       		moveq	#$F,d4
00001AE0                            
00001AE0                            loc_18A8:
00001AE0 E24D                       		lsr.w	#1,d5
00001AE2 40C6                       		move	sr,d6
00001AE4 51CC 0000                  		dbf	d4,loc_18BA
00001AE8 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AEC 1E98                       		move.b	(a0)+,(sp)
00001AEE 3A17                       		move.w	(sp),d5
00001AF0 780F                       		moveq	#$F,d4
00001AF2                            
00001AF2                            loc_18BA:
00001AF2 44C6                       		move	d6,ccr
00001AF4 6400                       		bcc.s	loc_18C2
00001AF6 12D8                       		move.b	(a0)+,(a1)+
00001AF8 60E6                       		bra.s	loc_18A8
00001AFA                            ; ===========================================================================
00001AFA                            
00001AFA                            loc_18C2:				; XREF: KosDec
00001AFA 7600                       		moveq	#0,d3
00001AFC E24D                       		lsr.w	#1,d5
00001AFE 40C6                       		move	sr,d6
00001B00 51CC 0000                  		dbf	d4,loc_18D6
00001B04 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B08 1E98                       		move.b	(a0)+,(sp)
00001B0A 3A17                       		move.w	(sp),d5
00001B0C 780F                       		moveq	#$F,d4
00001B0E                            
00001B0E                            loc_18D6:
00001B0E 44C6                       		move	d6,ccr
00001B10 6500                       		bcs.s	loc_1906
00001B12 E24D                       		lsr.w	#1,d5
00001B14 51CC 0000                  		dbf	d4,loc_18EA
00001B18 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1C 1E98                       		move.b	(a0)+,(sp)
00001B1E 3A17                       		move.w	(sp),d5
00001B20 780F                       		moveq	#$F,d4
00001B22                            
00001B22                            loc_18EA:
00001B22 E353                       		roxl.w	#1,d3
00001B24 E24D                       		lsr.w	#1,d5
00001B26 51CC 0000                  		dbf	d4,loc_18FC
00001B2A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B2E 1E98                       		move.b	(a0)+,(sp)
00001B30 3A17                       		move.w	(sp),d5
00001B32 780F                       		moveq	#$F,d4
00001B34                            
00001B34                            loc_18FC:
00001B34 E353                       		roxl.w	#1,d3
00001B36 5243                       		addq.w	#1,d3
00001B38 74FF                       		moveq	#-1,d2
00001B3A 1418                       		move.b	(a0)+,d2
00001B3C 6000                       		bra.s	loc_191C
00001B3E                            ; ===========================================================================
00001B3E                            
00001B3E                            loc_1906:				; XREF: loc_18C2
00001B3E 1018                       		move.b	(a0)+,d0
00001B40 1218                       		move.b	(a0)+,d1
00001B42 74FF                       		moveq	#-1,d2
00001B44 1401                       		move.b	d1,d2
00001B46 EB4A                       		lsl.w	#5,d2
00001B48 1400                       		move.b	d0,d2
00001B4A 0241 0007                  		andi.w	#7,d1
00001B4E 6700                       		beq.s	loc_1928
00001B50 1601                       		move.b	d1,d3
00001B52 5243                       		addq.w	#1,d3
00001B54                            
00001B54                            loc_191C:
00001B54 1031 2000                  		move.b	(a1,d2.w),d0
00001B58 12C0                       		move.b	d0,(a1)+
00001B5A 51CB FFF8                  		dbf	d3,loc_191C
00001B5E 6080                       		bra.s	loc_18A8
00001B60                            ; ===========================================================================
00001B60                            
00001B60                            loc_1928:				; XREF: loc_1906
00001B60 1218                       		move.b	(a0)+,d1
00001B62 6700                       		beq.s	loc_1938
00001B64 0C01 0001                  		cmpi.b	#1,d1
00001B68 6700 FF76                  		beq.w	loc_18A8
00001B6C 1601                       		move.b	d1,d3
00001B6E 60E4                       		bra.s	loc_191C
00001B70                            ; ===========================================================================
00001B70                            
00001B70                            loc_1938:				; XREF: loc_1928
00001B70 548F                       		addq.l	#2,sp
00001B72 4E75                       		rts	
00001B74                            ; End of function KosDec
00001B74                            
00001B74                            ; ---------------------------------------------------------------------------
00001B74                            ; Pallet cycling routine loading subroutine
00001B74                            ; ---------------------------------------------------------------------------
00001B74                            
00001B74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B74                            
00001B74                            
00001B74                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B74 7400                       		moveq	#0,d2
00001B76 7000                       		moveq	#0,d0
00001B78 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B7C D040                       		add.w	d0,d0		; multiply by 2
00001B7E 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B82 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B86                            ; End of function PalCycle_Load
00001B86                            
00001B86                            ; ===========================================================================
00001B86                            ; ---------------------------------------------------------------------------
00001B86                            ; Pallet cycling routines
00001B86                            ; ---------------------------------------------------------------------------
00001B86 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B88 0000                       		dc.w PalCycle_LZ-PalCycle
00001B8A 0000                       		dc.w PalCycle_MZ-PalCycle
00001B8C 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B8E 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B90 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B92 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B94 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B96                            
00001B96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B96                            
00001B96                            
00001B96                            PalCycle_Title:				; XREF: TitleScreen
00001B96 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B9C 6000                       		bra.s	loc_196A
00001B9E                            ; ===========================================================================
00001B9E                            
00001B9E                            PalCycle_GHZ:				; XREF: PalCycle
00001B9E 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001BA4                            
00001BA4                            loc_196A:				; XREF: PalCycle_Title
00001BA4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BA8 6A00                       		bpl.s	locret_1990
00001BAA 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BB0 3038 F632                  		move.w	($FFFFF632).w,d0
00001BB4 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BB8 0240 0003                  		andi.w	#3,d0
00001BBC E748                       		lsl.w	#3,d0
00001BBE 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BC2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BC6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BCA                            
00001BCA                            locret_1990:
00001BCA 4E75                       		rts	
00001BCC                            ; End of function PalCycle_Title
00001BCC                            
00001BCC                            
00001BCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BCC                            
00001BCC                            
00001BCC                            PalCycle_LZ:				; XREF: PalCycle
00001BCC 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BD0 6A00                       		bpl.s	loc_19D8
00001BD2 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BD8 3038 F632                  		move.w	($FFFFF632).w,d0
00001BDC 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BE0 0240 0003                  		andi.w	#3,d0
00001BE4 E748                       		lsl.w	#3,d0
00001BE6 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BEC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BF2 6600                       		bne.s	loc_19C0
00001BF4 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BFA                            
00001BFA                            loc_19C0:
00001BFA 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BFE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C02 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C06 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001C0A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C0E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C12                            
00001C12                            loc_19D8:
00001C12 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C16 0240 0007                  		andi.w	#7,d0
00001C1A 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C1E 6700                       		beq.s	locret_1A3A
00001C20 7201                       		moveq	#1,d1
00001C22 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C26 6700                       		beq.s	loc_19F0
00001C28 4441                       		neg.w	d1
00001C2A                            
00001C2A                            loc_19F0:
00001C2A 3038 F650                  		move.w	($FFFFF650).w,d0
00001C2E 0240 0003                  		andi.w	#3,d0
00001C32 D041                       		add.w	d1,d0
00001C34 0C40 0003                  		cmpi.w	#3,d0
00001C38 6500                       		bcs.s	loc_1A0A
00001C3A 3200                       		move.w	d0,d1
00001C3C 7000                       		moveq	#0,d0
00001C3E 4A41                       		tst.w	d1
00001C40 6A00                       		bpl.s	loc_1A0A
00001C42 7002                       		moveq	#2,d0
00001C44                            
00001C44                            loc_1A0A:
00001C44 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C48 D040                       		add.w	d0,d0
00001C4A 3200                       		move.w	d0,d1
00001C4C D040                       		add.w	d0,d0
00001C4E D041                       		add.w	d1,d0
00001C50 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C56 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C5A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C62 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C68 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C6C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C70 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C74                            
00001C74                            locret_1A3A:
00001C74 4E75                       		rts	
00001C76                            ; End of function PalCycle_LZ
00001C76                            
00001C76                            ; ===========================================================================
00001C76 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C7E                            ; ===========================================================================
00001C7E                            
00001C7E                            PalCycle_MZ:				; XREF: PalCycle
00001C7E 4E75                       		rts	
00001C80                            
00001C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C80                            
00001C80                            
00001C80                            PalCycle_SLZ:				; XREF: PalCycle
00001C80 4E75                       		rts	
00001C82                            ; End of function PalCycle_SLZ
00001C82                            
00001C82                            
00001C82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C82                            
00001C82                            
00001C82                            PalCycle_SYZ:				; XREF: PalCycle
00001C82 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C86 6A00                       		bpl.s	locret_1AC6
00001C88 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C8E 3038 F632                  		move.w	($FFFFF632).w,d0
00001C92 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C96 0240 0003                  		andi.w	#3,d0
00001C9A E548                       		lsl.w	#2,d0
00001C9C 3200                       		move.w	d0,d1
00001C9E D040                       		add.w	d0,d0
00001CA0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CA6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CAA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CAE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CB2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CB8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CBC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CC0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CC6                            
00001CC6                            locret_1AC6:
00001CC6 4E75                       		rts	
00001CC8                            ; End of function PalCycle_SYZ
00001CC8                            
00001CC8                            
00001CC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CC8                            
00001CC8                            
00001CC8                            PalCycle_SBZ:				; XREF: PalCycle
00001CC8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CCE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CD2 6700                       		beq.s	loc_1ADA
00001CD4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CDA                            
00001CDA                            loc_1ADA:
00001CDA 43F8 F650                  		lea	($FFFFF650).w,a1
00001CDE 321A                       		move.w	(a2)+,d1
00001CE0                            
00001CE0                            loc_1AE0:
00001CE0 5311                       		subq.b	#1,(a1)
00001CE2 6B00                       		bmi.s	loc_1AEA
00001CE4 5489                       		addq.l	#2,a1
00001CE6 5C8A                       		addq.l	#6,a2
00001CE8 6000                       		bra.s	loc_1B06
00001CEA                            ; ===========================================================================
00001CEA                            
00001CEA                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CEA 12DA                       		move.b	(a2)+,(a1)+
00001CEC 1011                       		move.b	(a1),d0
00001CEE 5200                       		addq.b	#1,d0
00001CF0 B01A                       		cmp.b	(a2)+,d0
00001CF2 6500                       		bcs.s	loc_1AF6
00001CF4 7000                       		moveq	#0,d0
00001CF6                            
00001CF6                            loc_1AF6:
00001CF6 12C0                       		move.b	d0,(a1)+
00001CF8 0240 000F                  		andi.w	#$F,d0
00001CFC D040                       		add.w	d0,d0
00001CFE 305A                       		movea.w	(a2)+,a0
00001D00 365A                       		movea.w	(a2)+,a3
00001D02 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D06                            
00001D06                            loc_1B06:				; XREF: PalCycle_SBZ
00001D06 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D0A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D0E 6A00                       		bpl.s	locret_1B64
00001D10 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D16 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D1C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D20 6700                       		beq.s	loc_1B2E
00001D22 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D28 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D2E                            
00001D2E                            loc_1B2E:
00001D2E 72FF                       		moveq	#-1,d1
00001D30 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D34 6700                       		beq.s	loc_1B38
00001D36 4441                       		neg.w	d1
00001D38                            
00001D38                            loc_1B38:
00001D38 3038 F632                  		move.w	($FFFFF632).w,d0
00001D3C 0240 0003                  		andi.w	#3,d0
00001D40 D041                       		add.w	d1,d0
00001D42 0C40 0003                  		cmpi.w	#3,d0
00001D46 6500                       		bcs.s	loc_1B52
00001D48 3200                       		move.w	d0,d1
00001D4A 7000                       		moveq	#0,d0
00001D4C 4A41                       		tst.w	d1
00001D4E 6A00                       		bpl.s	loc_1B52
00001D50 7002                       		moveq	#2,d0
00001D52                            
00001D52                            loc_1B52:
00001D52 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D56 D040                       		add.w	d0,d0
00001D58 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D5C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D60 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D64                            
00001D64                            locret_1B64:
00001D64 4E75                       		rts	
00001D66                            ; End of function PalCycle_SBZ
00001D66                            
00001D66                            ; ===========================================================================
00001D66                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D86                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DA6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DC6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DD8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DEA                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E52                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E76                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E96                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EA6                            
00001EA6                            Pal_SBZCycList:
00001EA6                            	include "_inc\SBZ pallet script 1.asm"
00001EA6                            ; ---------------------------------------------------------------------------
00001EA6                            ; Scrap Brain Zone 1 pallet cycling script
00001EA6                            ; ---------------------------------------------------------------------------
00001EA6 0008                       	dc.w 8			; number of entries - 1
00001EA8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001EAA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001EAC FB50                       	dc.w $FB50		; RAM address
00001EAE 0D08                       	dc.b $D, 8
00001EB0 0000                       	dc.w Pal_SBZCyc2
00001EB2 FB52                       	dc.w $FB52
00001EB4 0E08                       	dc.b $E, 8
00001EB6 0000                       	dc.w Pal_SBZCyc3
00001EB8 FB6E                       	dc.w $FB6E
00001EBA 0B08                       	dc.b $B, 8
00001EBC 0000                       	dc.w Pal_SBZCyc5
00001EBE FB70                       	dc.w $FB70
00001EC0 0708                       	dc.b 7,	8
00001EC2 0000                       	dc.w Pal_SBZCyc6
00001EC4 FB72                       	dc.w $FB72
00001EC6 1C10                       	dc.b $1C, $10
00001EC8 0000                       	dc.w Pal_SBZCyc7
00001ECA FB7E                       	dc.w $FB7E
00001ECC 0303                       	dc.b 3,	3
00001ECE 0000                       	dc.w Pal_SBZCyc8
00001ED0 FB78                       	dc.w $FB78
00001ED2 0303                       	dc.b 3,	3
00001ED4 0000                       	dc.w Pal_SBZCyc8+2
00001ED6 FB7A                       	dc.w $FB7A
00001ED8 0303                       	dc.b 3,	3
00001EDA 0000                       	dc.w Pal_SBZCyc8+4
00001EDC FB7C                       	dc.w $FB7C
00001EDE                            	even
00001EDE                            	even
00001EDE                            
00001EDE                            Pal_SBZCycList2:
00001EDE                            	include "_inc\SBZ pallet script 2.asm"
00001EDE                            ; ---------------------------------------------------------------------------
00001EDE                            ; Scrap Brain Zone 2 pallet cycling script
00001EDE                            ; ---------------------------------------------------------------------------
00001EDE 0006                       	dc.w 6
00001EE0 0708                       	dc.b 7,	8
00001EE2 0000                       	dc.w Pal_SBZCyc1
00001EE4 FB50                       	dc.w $FB50
00001EE6 0D08                       	dc.b $D, 8
00001EE8 0000                       	dc.w Pal_SBZCyc2
00001EEA FB52                       	dc.w $FB52
00001EEC 0908                       	dc.b 9,	8
00001EEE 0000                       	dc.w Pal_SBZCyc9
00001EF0 FB70                       	dc.w $FB70
00001EF2 0708                       	dc.b 7,	8
00001EF4 0000                       	dc.w Pal_SBZCyc6
00001EF6 FB72                       	dc.w $FB72
00001EF8 0303                       	dc.b 3,	3
00001EFA 0000                       	dc.w Pal_SBZCyc8
00001EFC FB78                       	dc.w $FB78
00001EFE 0303                       	dc.b 3,	3
00001F00 0000                       	dc.w Pal_SBZCyc8+2
00001F02 FB7A                       	dc.w $FB7A
00001F04 0303                       	dc.b 3,	3
00001F06 0000                       	dc.w Pal_SBZCyc8+4
00001F08 FB7C                       	dc.w $FB7C
00001F0A                            	even
00001F0A                            	even
00001F0A                            
00001F0A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F1A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F2A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F3A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F46                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F56                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F66                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F86                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F90                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FA0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FAC                            ; ---------------------------------------------------------------------------
00001FAC                            ; Subroutine to	fade out and fade in
00001FAC                            ; ---------------------------------------------------------------------------
00001FAC                            
00001FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FAC                            
00001FAC                            
00001FAC                            Pal_FadeTo:
00001FAC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FB2                            
00001FB2                            Pal_FadeTo2:
00001FB2 7000                       		moveq	#0,d0
00001FB4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBC D0C0                       		adda.w	d0,a0
00001FBE 7200                       		moveq	#0,d1
00001FC0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC4                            
00001FC4                            Pal_ToBlack:
00001FC4 30C1                       		move.w	d1,(a0)+
00001FC6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FCA                            
00001FCA 383C 0015                  		move.w	#$15,d4
00001FCE 1A3C 0009                  		move.b	#9,d5
00001FD2                            
00001FD2                            loc_1DCE:
00001FD2 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FD8 6100 0000                  		bsr.w	DelayProgram
00001FDC 6100                       		bsr.s	Pal_FadeIn
00001FDE 6100 F844                  		bsr.w	RunPLC_RAM
00001FE2 51CC FFEE                  		dbf	d4,loc_1DCE
00001FE6 4E75                       		rts	
00001FE8                            ; End of function Pal_FadeTo
00001FE8                            
00001FE8                            ; ---------------------------------------------------------------------------
00001FE8                            ; Pallet fade-in subroutine
00001FE8                            ; ---------------------------------------------------------------------------
00001FE8                            
00001FE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE8                            
00001FE8                            
00001FE8                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FE8 7000                       		moveq	#0,d0
00001FEA 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FEE 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FF2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FF6 D0C0                       		adda.w	d0,a0
00001FF8 D2C0                       		adda.w	d0,a1
00001FFA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FFE                            
00001FFE                            loc_1DFA:
00001FFE 6100                       		bsr.s	Pal_AddColor
00002000 51C8 FFFC                  		dbf	d0,loc_1DFA
00002004 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000200A 6600                       		bne.s	locret_1E24
0000200C 7000                       		moveq	#0,d0
0000200E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002012 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002016 1038 F626                  		move.b	($FFFFF626).w,d0
0000201A D0C0                       		adda.w	d0,a0
0000201C D2C0                       		adda.w	d0,a1
0000201E 1038 F627                  		move.b	($FFFFF627).w,d0
00002022                            
00002022                            loc_1E1E:
00002022 6100                       		bsr.s	Pal_AddColor
00002024 51C8 FFFC                  		dbf	d0,loc_1E1E
00002028                            
00002028                            locret_1E24:
00002028 4E75                       		rts	
0000202A                            ; End of function Pal_FadeIn
0000202A                            
0000202A                            
0000202A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000202A                            
0000202A                            
0000202A                            Pal_AddColor:				; XREF: Pal_FadeIn
0000202A 3419                       		move.w	(a1)+,d2
0000202C 3610                       		move.w	(a0),d3
0000202E B642                       		cmp.w	d2,d3
00002030 6700                       		beq.s	loc_1E4E
00002032 3203                       		move.w	d3,d1
00002034 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002038 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000203A 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
0000203C 30C1                       		move.w	d1,(a0)+	; update pallet
0000203E 4E75                       		rts	
00002040                            ; ===========================================================================
00002040                            
00002040                            Pal_AddGreen:				; XREF: Pal_AddColor
00002040 3203                       		move.w	d3,d1
00002042 0641 0020                  		addi.w	#$20,d1		; increase green value
00002046 B242                       		cmp.w	d2,d1
00002048 6200                       		bhi.s	Pal_AddRed
0000204A 30C1                       		move.w	d1,(a0)+	; update pallet
0000204C 4E75                       		rts	
0000204E                            ; ===========================================================================
0000204E                            
0000204E                            Pal_AddRed:				; XREF: Pal_AddGreen
0000204E 5458                       		addq.w	#2,(a0)+	; increase red value
00002050 4E75                       		rts	
00002052                            ; ===========================================================================
00002052                            
00002052                            loc_1E4E:				; XREF: Pal_AddColor
00002052 5448                       		addq.w	#2,a0
00002054 4E75                       		rts	
00002056                            ; End of function Pal_AddColor
00002056                            
00002056                            
00002056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002056                            
00002056                            
00002056                            Pal_FadeFrom:
00002056 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000205C 383C 0015                  		move.w	#$15,d4
00002060                            loc_1E5C:
00002060 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002066 6100 0000                  		bsr.w	DelayProgram
0000206A 6100                       		bsr.s	Pal_FadeOut
0000206C 6100 F7B6                  		bsr.w	RunPLC_RAM
00002070 51CC FFEE                  		dbf	d4,loc_1E5C
00002074 4E75                       		rts	
00002076                            ; End of function Pal_FadeFrom
00002076                            
00002076                            ; ---------------------------------------------------------------------------
00002076                            ; Pallet fade-out subroutine
00002076                            ; ---------------------------------------------------------------------------
00002076                            
00002076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002076                            
00002076                            
00002076                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002076 7000                       		moveq	#0,d0
00002078 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000207C 1038 F626                  		move.b	($FFFFF626).w,d0
00002080 D0C0                       		adda.w	d0,a0
00002082 1038 F627                  		move.b	($FFFFF627).w,d0
00002086                            
00002086                            loc_1E82:
00002086 6100                       		bsr.s	Pal_DecColor
00002088 51C8 FFFC                  		dbf	d0,loc_1E82
0000208C                            
0000208C 7000                       		moveq	#0,d0
0000208E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002092 1038 F626                  		move.b	($FFFFF626).w,d0
00002096 D0C0                       		adda.w	d0,a0
00002098 1038 F627                  		move.b	($FFFFF627).w,d0
0000209C                            
0000209C                            loc_1E98:
0000209C 6100                       		bsr.s	Pal_DecColor
0000209E 51C8 FFFC                  		dbf	d0,loc_1E98
000020A2 4E75                       		rts	
000020A4                            ; End of function Pal_FadeOut
000020A4                            
000020A4                            
000020A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020A4                            
000020A4                            
000020A4                            Pal_DecColor:				; XREF: Pal_FadeOut
000020A4 3410                       		move.w	(a0),d2
000020A6 6700                       		beq.s	loc_1ECC
000020A8 3202                       		move.w	d2,d1
000020AA 0241 000E                  		andi.w	#$E,d1
000020AE 6700                       		beq.s	Pal_DecGreen
000020B0 5558                       		subq.w	#2,(a0)+	; decrease red value
000020B2 4E75                       		rts	
000020B4                            ; ===========================================================================
000020B4                            
000020B4                            Pal_DecGreen:				; XREF: Pal_DecColor
000020B4 3202                       		move.w	d2,d1
000020B6 0241 00E0                  		andi.w	#$E0,d1
000020BA 6700                       		beq.s	Pal_DecBlue
000020BC 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020C0 4E75                       		rts	
000020C2                            ; ===========================================================================
000020C2                            
000020C2                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020C2 3202                       		move.w	d2,d1
000020C4 0241 0E00                  		andi.w	#$E00,d1
000020C8 6700                       		beq.s	loc_1ECC
000020CA 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020CE 4E75                       		rts	
000020D0                            ; ===========================================================================
000020D0                            
000020D0                            loc_1ECC:				; XREF: Pal_DecColor
000020D0 5448                       		addq.w	#2,a0
000020D2 4E75                       		rts	
000020D4                            ; End of function Pal_DecColor
000020D4                            
000020D4                            ; ---------------------------------------------------------------------------
000020D4                            ; Subroutine to	fill the pallet	with white (special stage)
000020D4                            ; ---------------------------------------------------------------------------
000020D4                            
000020D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020D4                            
000020D4                            
000020D4                            Pal_MakeWhite:				; XREF: SpecialStage
000020D4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020DA 7000                       		moveq	#0,d0
000020DC 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020E0 1038 F626                  		move.b	($FFFFF626).w,d0
000020E4 D0C0                       		adda.w	d0,a0
000020E6 323C 0EEE                  		move.w	#$EEE,d1
000020EA 1038 F627                  		move.b	($FFFFF627).w,d0
000020EE                            
000020EE                            PalWhite_Loop:
000020EE 30C1                       		move.w	d1,(a0)+
000020F0 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020F4 383C 0015                  		move.w	#$15,d4
000020F8                            
000020F8                            loc_1EF4:
000020F8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020FE 6100 0000                  		bsr.w	DelayProgram
00002102 6100                       		bsr.s	Pal_WhiteToBlack
00002104 6100 F71E                  		bsr.w	RunPLC_RAM
00002108 51CC FFEE                  		dbf	d4,loc_1EF4
0000210C 4E75                       		rts	
0000210E                            ; End of function Pal_MakeWhite
0000210E                            
0000210E                            
0000210E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000210E                            
0000210E                            
0000210E                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000210E 7000                       		moveq	#0,d0
00002110 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002114 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002118 1038 F626                  		move.b	($FFFFF626).w,d0
0000211C D0C0                       		adda.w	d0,a0
0000211E D2C0                       		adda.w	d0,a1
00002120 1038 F627                  		move.b	($FFFFF627).w,d0
00002124                            
00002124                            loc_1F20:
00002124 6100                       		bsr.s	Pal_DecColor2
00002126 51C8 FFFC                  		dbf	d0,loc_1F20
0000212A                            
0000212A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002130 6600                       		bne.s	locret_1F4A
00002132 7000                       		moveq	#0,d0
00002134 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002138 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000213C 1038 F626                  		move.b	($FFFFF626).w,d0
00002140 D0C0                       		adda.w	d0,a0
00002142 D2C0                       		adda.w	d0,a1
00002144 1038 F627                  		move.b	($FFFFF627).w,d0
00002148                            
00002148                            loc_1F44:
00002148 6100                       		bsr.s	Pal_DecColor2
0000214A 51C8 FFFC                  		dbf	d0,loc_1F44
0000214E                            
0000214E                            locret_1F4A:
0000214E 4E75                       		rts	
00002150                            ; End of function Pal_WhiteToBlack
00002150                            
00002150                            
00002150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002150                            
00002150                            
00002150                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002150 3419                       		move.w	(a1)+,d2
00002152 3610                       		move.w	(a0),d3
00002154 B642                       		cmp.w	d2,d3
00002156 6700                       		beq.s	loc_1F78
00002158 3203                       		move.w	d3,d1
0000215A 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000215E 6500                       		bcs.s	loc_1F64
00002160 B242                       		cmp.w	d2,d1
00002162 6500                       		bcs.s	loc_1F64
00002164 30C1                       		move.w	d1,(a0)+
00002166 4E75                       		rts	
00002168                            ; ===========================================================================
00002168                            
00002168                            loc_1F64:				; XREF: Pal_DecColor2
00002168 3203                       		move.w	d3,d1
0000216A 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000216E 6500                       		bcs.s	loc_1F74
00002170 B242                       		cmp.w	d2,d1
00002172 6500                       		bcs.s	loc_1F74
00002174 30C1                       		move.w	d1,(a0)+
00002176 4E75                       		rts	
00002178                            ; ===========================================================================
00002178                            
00002178                            loc_1F74:				; XREF: loc_1F64
00002178 5558                       		subq.w	#2,(a0)+	; decrease red value
0000217A 4E75                       		rts	
0000217C                            ; ===========================================================================
0000217C                            
0000217C                            loc_1F78:				; XREF: Pal_DecColor2
0000217C 5448                       		addq.w	#2,a0
0000217E 4E75                       		rts	
00002180                            ; End of function Pal_DecColor2
00002180                            
00002180                            ; ---------------------------------------------------------------------------
00002180                            ; Subroutine to	make a white flash when	you enter a special stage
00002180                            ; ---------------------------------------------------------------------------
00002180                            
00002180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002180                            
00002180                            
00002180                            Pal_MakeFlash:				; XREF: SpecialStage
00002180 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002186 383C 0015                  		move.w	#$15,d4
0000218A                            
0000218A                            loc_1F86:
0000218A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002190 6100 0000                  		bsr.w	DelayProgram
00002194 6100                       		bsr.s	Pal_ToWhite
00002196 6100 F68C                  		bsr.w	RunPLC_RAM
0000219A 51CC FFEE                  		dbf	d4,loc_1F86
0000219E 4E75                       		rts	
000021A0                            ; End of function Pal_MakeFlash
000021A0                            
000021A0                            
000021A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A0                            
000021A0                            
000021A0                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021A0 7000                       		moveq	#0,d0
000021A2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021A6 1038 F626                  		move.b	($FFFFF626).w,d0
000021AA D0C0                       		adda.w	d0,a0
000021AC 1038 F627                  		move.b	($FFFFF627).w,d0
000021B0                            
000021B0                            loc_1FAC:
000021B0 6100                       		bsr.s	Pal_AddColor2
000021B2 51C8 FFFC                  		dbf	d0,loc_1FAC
000021B6 7000                       		moveq	#0,d0
000021B8 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021BC 1038 F626                  		move.b	($FFFFF626).w,d0
000021C0 D0C0                       		adda.w	d0,a0
000021C2 1038 F627                  		move.b	($FFFFF627).w,d0
000021C6                            
000021C6                            loc_1FC2:
000021C6 6100                       		bsr.s	Pal_AddColor2
000021C8 51C8 FFFC                  		dbf	d0,loc_1FC2
000021CC 4E75                       		rts	
000021CE                            ; End of function Pal_ToWhite
000021CE                            
000021CE                            
000021CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021CE                            
000021CE                            
000021CE                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021CE 3410                       		move.w	(a0),d2
000021D0 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021D4 6700                       		beq.s	loc_2006
000021D6 3202                       		move.w	d2,d1
000021D8 0241 000E                  		andi.w	#$E,d1
000021DC 0C41 000E                  		cmpi.w	#$E,d1
000021E0 6700                       		beq.s	loc_1FE2
000021E2 5458                       		addq.w	#2,(a0)+	; increase red value
000021E4 4E75                       		rts	
000021E6                            ; ===========================================================================
000021E6                            
000021E6                            loc_1FE2:				; XREF: Pal_AddColor2
000021E6 3202                       		move.w	d2,d1
000021E8 0241 00E0                  		andi.w	#$E0,d1
000021EC 0C41 00E0                  		cmpi.w	#$E0,d1
000021F0 6700                       		beq.s	loc_1FF4
000021F2 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021F6 4E75                       		rts	
000021F8                            ; ===========================================================================
000021F8                            
000021F8                            loc_1FF4:				; XREF: loc_1FE2
000021F8 3202                       		move.w	d2,d1
000021FA 0241 0E00                  		andi.w	#$E00,d1
000021FE 0C41 0E00                  		cmpi.w	#$E00,d1
00002202 6700                       		beq.s	loc_2006
00002204 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002208 4E75                       		rts	
0000220A                            ; ===========================================================================
0000220A                            
0000220A                            loc_2006:				; XREF: Pal_AddColor2
0000220A 5448                       		addq.w	#2,a0
0000220C 4E75                       		rts	
0000220E                            ; End of function Pal_AddColor2
0000220E                            
0000220E                            ; ---------------------------------------------------------------------------
0000220E                            ; Pallet cycling routine - Sega	logo
0000220E                            ; ---------------------------------------------------------------------------
0000220E                            
0000220E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000220E                            
0000220E                            
0000220E                            PalCycle_Sega:				; XREF: SegaScreen
0000220E 4A38 F635                  		tst.b	($FFFFF635).w
00002212 6600                       		bne.s	loc_206A
00002214 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002218 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000221E 7205                       		moveq	#5,d1
00002220 3038 F632                  		move.w	($FFFFF632).w,d0
00002224                            
00002224                            loc_2020:
00002224 6A00                       		bpl.s	loc_202A
00002226 5448                       		addq.w	#2,a0
00002228 5341                       		subq.w	#1,d1
0000222A 5440                       		addq.w	#2,d0
0000222C 60F6                       		bra.s	loc_2020
0000222E                            ; ===========================================================================
0000222E                            
0000222E                            loc_202A:				; XREF: PalCycle_Sega
0000222E 3400                       		move.w	d0,d2
00002230 0242 001E                  		andi.w	#$1E,d2
00002234 6600                       		bne.s	loc_2034
00002236 5440                       		addq.w	#2,d0
00002238                            
00002238                            loc_2034:
00002238 0C40 0060                  		cmpi.w	#$60,d0
0000223C 6400                       		bcc.s	loc_203E
0000223E 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002242                            
00002242                            loc_203E:
00002242 5440                       		addq.w	#2,d0
00002244 51C9 FFE8                  		dbf	d1,loc_202A
00002248 3038 F632                  		move.w	($FFFFF632).w,d0
0000224C 5440                       		addq.w	#2,d0
0000224E 3400                       		move.w	d0,d2
00002250 0242 001E                  		andi.w	#$1E,d2
00002254 6600                       		bne.s	loc_2054
00002256 5440                       		addq.w	#2,d0
00002258                            
00002258                            loc_2054:
00002258 0C40 0064                  		cmpi.w	#$64,d0
0000225C 6D00                       		blt.s	loc_2062
0000225E 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002264 70F4                       		moveq	#-$C,d0
00002266                            
00002266                            loc_2062:
00002266 31C0 F632                  		move.w	d0,($FFFFF632).w
0000226A 7001                       		moveq	#1,d0
0000226C 4E75                       		rts	
0000226E                            ; ===========================================================================
0000226E                            
0000226E                            loc_206A:				; XREF: loc_202A
0000226E 5338 F634                  		subq.b	#1,($FFFFF634).w
00002272 6A00                       		bpl.s	loc_20BC
00002274 11FC 0004 F634             		move.b	#4,($FFFFF634).w
0000227A 3038 F632                  		move.w	($FFFFF632).w,d0
0000227E 0640 000C                  		addi.w	#$C,d0
00002282 0C40 0030                  		cmpi.w	#$30,d0
00002286 6500                       		bcs.s	loc_2088
00002288 7000                       		moveq	#0,d0
0000228A 4E75                       		rts	
0000228C                            ; ===========================================================================
0000228C                            
0000228C                            loc_2088:				; XREF: loc_206A
0000228C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002290 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002296 41F0 0000                  		lea	(a0,d0.w),a0
0000229A 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000229E 22D8                       		move.l	(a0)+,(a1)+
000022A0 22D8                       		move.l	(a0)+,(a1)+
000022A2 3298                       		move.w	(a0)+,(a1)
000022A4 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022A8 7000                       		moveq	#0,d0
000022AA 722C                       		moveq	#$2C,d1
000022AC                            
000022AC                            loc_20A8:
000022AC 3400                       		move.w	d0,d2
000022AE 0242 001E                  		andi.w	#$1E,d2
000022B2 6600                       		bne.s	loc_20B2
000022B4 5440                       		addq.w	#2,d0
000022B6                            
000022B6                            loc_20B2:
000022B6 3390 0000                  		move.w	(a0),(a1,d0.w)
000022BA 5440                       		addq.w	#2,d0
000022BC 51C9 FFEE                  		dbf	d1,loc_20A8
000022C0                            
000022C0                            loc_20BC:
000022C0 7001                       		moveq	#1,d0
000022C2 4E75                       		rts	
000022C4                            ; End of function PalCycle_Sega
000022C4                            
000022C4                            ; ===========================================================================
000022C4                            
000022C4                            Pal_Sega1:	incbin	pallet\sega1.bin
000022D0                            Pal_Sega2:	incbin	pallet\sega2.bin
00002300                            
00002300                            ; ---------------------------------------------------------------------------
00002300                            ; Subroutines to load pallets
00002300                            ; ---------------------------------------------------------------------------
00002300                            
00002300                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002300                            
00002300                            
00002300                            PalLoad1:
00002300 43F9 0000 0000             		lea	(PalPointers).l,a1
00002306 E748                       		lsl.w	#3,d0
00002308 D2C0                       		adda.w	d0,a1
0000230A 2459                       		movea.l	(a1)+,a2
0000230C 3659                       		movea.w	(a1)+,a3
0000230E D6FC 0080                  		adda.w	#$80,a3
00002312 3E19                       		move.w	(a1)+,d7
00002314                            
00002314                            loc_2110:
00002314 26DA                       		move.l	(a2)+,(a3)+
00002316 51CF FFFC                  		dbf	d7,loc_2110
0000231A 4E75                       		rts	
0000231C                            ; End of function PalLoad1
0000231C                            
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            PalLoad2:
0000231C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002322 E748                       		lsl.w	#3,d0
00002324 D2C0                       		adda.w	d0,a1
00002326 2459                       		movea.l	(a1)+,a2
00002328 3659                       		movea.w	(a1)+,a3
0000232A 3E19                       		move.w	(a1)+,d7
0000232C                            
0000232C                            loc_2128:
0000232C 26DA                       		move.l	(a2)+,(a3)+
0000232E 51CF FFFC                  		dbf	d7,loc_2128
00002332 4E75                       		rts	
00002334                            ; End of function PalLoad2
00002334                            
00002334                            ; ---------------------------------------------------------------------------
00002334                            ; Underwater pallet loading subroutine
00002334                            ; ---------------------------------------------------------------------------
00002334                            
00002334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002334                            
00002334                            
00002334                            PalLoad3_Water:
00002334 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233A E748                       		lsl.w	#3,d0
0000233C D2C0                       		adda.w	d0,a1
0000233E 2459                       		movea.l	(a1)+,a2
00002340 3659                       		movea.w	(a1)+,a3
00002342 96FC 0080                  		suba.w	#$80,a3
00002346 3E19                       		move.w	(a1)+,d7
00002348                            
00002348                            loc_2144:
00002348 26DA                       		move.l	(a2)+,(a3)+
0000234A 51CF FFFC                  		dbf	d7,loc_2144
0000234E 4E75                       		rts	
00002350                            ; End of function PalLoad3_Water
00002350                            
00002350                            
00002350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002350                            
00002350                            
00002350                            PalLoad4_Water:
00002350 43F9 0000 0000             		lea	(PalPointers).l,a1
00002356 E748                       		lsl.w	#3,d0
00002358 D2C0                       		adda.w	d0,a1
0000235A 2459                       		movea.l	(a1)+,a2
0000235C 3659                       		movea.w	(a1)+,a3
0000235E 96FC 0100                  		suba.w	#$100,a3
00002362 3E19                       		move.w	(a1)+,d7
00002364                            
00002364                            loc_2160:
00002364 26DA                       		move.l	(a2)+,(a3)+
00002366 51CF FFFC                  		dbf	d7,loc_2160
0000236A 4E75                       		rts	
0000236C                            ; End of function PalLoad4_Water
0000236C                            
0000236C                            ; ===========================================================================
0000236C                            ; ---------------------------------------------------------------------------
0000236C                            ; Pallet pointers
0000236C                            ; ---------------------------------------------------------------------------
0000236C                            PalPointers:
0000236C                            	include "_inc\Pallet pointers.asm"
0000236C                            ; ---------------------------------------------------------------------------
0000236C                            ; Pallet pointers
0000236C                            ; ---------------------------------------------------------------------------
0000236C 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002370 FB00                       	dc.w $FB00		; RAM address
00002372 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002374 0000 0000                  	dc.l Pal_Title
00002378 FB00                       	dc.w $FB00
0000237A 001F                       	dc.w $1F
0000237C 0000 0000                  	dc.l Pal_LevelSel
00002380 FB00                       	dc.w $FB00
00002382 001F                       	dc.w $1F
00002384 0000 0000                  	dc.l Pal_Sonic
00002388 FB00                       	dc.w $FB00
0000238A 0007                       	dc.w 7
0000238C 0000 0000                  	dc.l Pal_GHZ
00002390 FB20                       	dc.w $FB20
00002392 0017                       	dc.w $17
00002394 0000 0000                  	dc.l Pal_LZ
00002398 FB20                       	dc.w $FB20
0000239A 0017                       	dc.w $17
0000239C 0000 0000                  	dc.l Pal_MZ
000023A0 FB20                       	dc.w $FB20
000023A2 0017                       	dc.w $17
000023A4 0000 0000                  	dc.l Pal_SLZ
000023A8 FB20                       	dc.w $FB20
000023AA 0017                       	dc.w $17
000023AC 0000 0000                  	dc.l Pal_SYZ
000023B0 FB20                       	dc.w $FB20
000023B2 0017                       	dc.w $17
000023B4 0000 0000                  	dc.l Pal_SBZ1
000023B8 FB20                       	dc.w $FB20
000023BA 0017                       	dc.w $17
000023BC 0000 0000                  	dc.l Pal_Special
000023C0 FB00                       	dc.w $FB00
000023C2 001F                       	dc.w $1F
000023C4 0000 0000                  	dc.l Pal_LZWater
000023C8 FB00                       	dc.w $FB00
000023CA 001F                       	dc.w $1F
000023CC 0000 0000                  	dc.l Pal_SBZ3
000023D0 FB20                       	dc.w $FB20
000023D2 0017                       	dc.w $17
000023D4 0000 0000                  	dc.l Pal_SBZ3Water
000023D8 FB00                       	dc.w $FB00
000023DA 001F                       	dc.w $1F
000023DC 0000 0000                  	dc.l Pal_SBZ2
000023E0 FB20                       	dc.w $FB20
000023E2 0017                       	dc.w $17
000023E4 0000 0000                  	dc.l Pal_LZSonWater
000023E8 FB00                       	dc.w $FB00
000023EA 0007                       	dc.w 7
000023EC 0000 0000                  	dc.l Pal_SBZ3SonWat
000023F0 FB00                       	dc.w $FB00
000023F2 0007                       	dc.w 7
000023F4 0000 0000                  	dc.l Pal_SpeResult
000023F8 FB00                       	dc.w $FB00
000023FA 001F                       	dc.w $1F
000023FC 0000 0000                  	dc.l Pal_SpeContinue
00002400 FB00                       	dc.w $FB00
00002402 000F                       	dc.w $F
00002404 0000 0000                  	dc.l Pal_Ending
00002408 FB00                       	dc.w $FB00
0000240A 001F                       	dc.w $1F
0000240C 0000 0000                  	dc.l Pal_Idiot
00002410 FB20                       	dc.w $FB20
00002412 0007                       	dc.w 7
00002414 0000 0000                  	dc.l Pal_BHZ
00002418 FB20                       	dc.w $FB20
0000241A 0017                       	dc.w $17
0000241C 0000 0000                  	dc.l Pal_Gronic
00002420 FB00                       	dc.w $FB00
00002422 0007                       	dc.w 7
00002424 0000 0000                  	dc.l Pal_LZGroWater
00002428 FB00                       	dc.w $FB00
0000242A 0007                       	dc.w 7
0000242C 0000 0000                  	dc.l Pal_SBZ3GroWat
00002430 FB00                       	dc.w $FB00
00002432 0007                       	dc.w 7
00002434 0000 0000                  	dc.l Pal_Anakama
00002438 FB00                       	dc.w $FB00
0000243A 0007                       	dc.w 7
0000243A 0007                       	dc.w 7
0000243C                            
0000243C                            ; ---------------------------------------------------------------------------
0000243C                            ; Pallet data
0000243C                            ; ---------------------------------------------------------------------------
0000243C                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024BC                            Pal_Title:	incbin	pallet\title.bin
0000253C                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025BC                            Pal_Sonic:	incbin	pallet\sonic.bin
000025DC                            Pal_GHZ:	incbin	pallet\ghz.bin
0000263C                            Pal_LZ:		incbin	pallet\lz.bin
0000269C                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
0000271C                            Pal_MZ:		incbin	pallet\mz.bin
0000277C                            Pal_SLZ:	incbin	pallet\slz.bin
000027DC                            Pal_SYZ:	incbin	pallet\syz.bin
0000283C                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000289C                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028FC                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000297C                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029DC                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A5C                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A7C                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A9C                            Pal_BHZ:	incbin	pallet\bhz.bin
00002AFC                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B7C                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002BBC                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C3C                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C5C                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C7C                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C9C                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002CBC                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002D3C                            
00002D3C                            ; ---------------------------------------------------------------------------
00002D3C                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002D3C                            ; ---------------------------------------------------------------------------
00002D3C                            
00002D3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D3C                            
00002D3C                            
00002D3C                            DelayProgram:				; XREF: PauseGame
00002D3C 46FC 2300                  		move	#$2300,sr
00002D40                            
00002D40                            loc_29AC:
00002D40 4A38 F62A                  		tst.b	($FFFFF62A).w
00002D44 66FA                       		bne.s	loc_29AC
00002D46 4E75                       		rts	
00002D48                            ; End of function DelayProgram
00002D48                            
00002D48                            ; ---------------------------------------------------------------------------
00002D48                            ; Subroutine to	generate a pseudo-random number	in d0
00002D48                            ; ---------------------------------------------------------------------------
00002D48                            
00002D48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D48                            
00002D48                            
00002D48                            RandomNumber:
00002D48 2238 F636                  		move.l	($FFFFF636).w,d1
00002D4C 6600                       		bne.s	loc_29C0
00002D4E 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D54                            
00002D54                            loc_29C0:
00002D54 2001                       		move.l	d1,d0
00002D56 E581                       		asl.l	#2,d1
00002D58 D280                       		add.l	d0,d1
00002D5A E781                       		asl.l	#3,d1
00002D5C D280                       		add.l	d0,d1
00002D5E 3001                       		move.w	d1,d0
00002D60 4841                       		swap	d1
00002D62 D041                       		add.w	d1,d0
00002D64 3200                       		move.w	d0,d1
00002D66 4841                       		swap	d1
00002D68 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D6C 4E75                       		rts	
00002D6E                            ; End of function RandomNumber
00002D6E                            
00002D6E                            
00002D6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D6E                            
00002D6E                            
00002D6E                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D6E 0240 00FF                  		andi.w	#$FF,d0
00002D72 D040                       		add.w	d0,d0
00002D74 0640 0080                  		addi.w	#$80,d0
00002D78 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D7C 0440 0080                  		subi.w	#$80,d0
00002D80 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D84 4E75                       		rts	
00002D86                            ; End of function CalcSine
00002D86                            
00002D86                            ; ===========================================================================
00002D86                            
00002D86                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00003006                            
00003006                            ; ===========================================================================
00003006 48E7 6000                  		movem.l	d1-d2,-(sp)
0000300A 3200                       		move.w	d0,d1
0000300C 4841                       		swap	d1
0000300E 7000                       		moveq	#0,d0
00003010 3200                       		move.w	d0,d1
00003012 7407                       		moveq	#7,d2
00003014                            
00003014                            loc_2C80:
00003014 E599                       		rol.l	#2,d1
00003016 D040                       		add.w	d0,d0
00003018 5240                       		addq.w	#1,d0
0000301A 9240                       		sub.w	d0,d1
0000301C 6400                       		bcc.s	loc_2C9A
0000301E D240                       		add.w	d0,d1
00003020 5340                       		subq.w	#1,d0
00003022 51CA FFF0                  		dbf	d2,loc_2C80
00003026 E248                       		lsr.w	#1,d0
00003028 4CDF 0006                  		movem.l	(sp)+,d1-d2
0000302C 4E75                       		rts	
0000302E                            ; ===========================================================================
0000302E                            
0000302E                            loc_2C9A:
0000302E 5240                       		addq.w	#1,d0
00003030 51CA FFE2                  		dbf	d2,loc_2C80
00003034 E248                       		lsr.w	#1,d0
00003036 4CDF 0006                  		movem.l	(sp)+,d1-d2
0000303A 4E75                       		rts	
0000303C                            
0000303C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000303C                            
0000303C                            
0000303C                            CalcAngle:
0000303C 48E7 1800                  		movem.l	d3-d4,-(sp)
00003040 7600                       		moveq	#0,d3
00003042 7800                       		moveq	#0,d4
00003044 3601                       		move.w	d1,d3
00003046 3802                       		move.w	d2,d4
00003048 8843                       		or.w	d3,d4
0000304A 6700                       		beq.s	loc_2D04
0000304C 3802                       		move.w	d2,d4
0000304E 4A43                       		tst.w	d3
00003050 6A00 0000                  		bpl.w	loc_2CC2
00003054 4443                       		neg.w	d3
00003056                            
00003056                            loc_2CC2:
00003056 4A44                       		tst.w	d4
00003058 6A00 0000                  		bpl.w	loc_2CCA
0000305C 4444                       		neg.w	d4
0000305E                            
0000305E                            loc_2CCA:
0000305E B843                       		cmp.w	d3,d4
00003060 6400 0000                  		bcc.w	loc_2CDC
00003064 E18C                       		lsl.l	#8,d4
00003066 88C3                       		divu.w	d3,d4
00003068 7000                       		moveq	#0,d0
0000306A 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
0000306E 6000                       		bra.s	loc_2CE6
00003070                            ; ===========================================================================
00003070                            
00003070                            loc_2CDC:				; XREF: CalcAngle
00003070 E18B                       		lsl.l	#8,d3
00003072 86C4                       		divu.w	d4,d3
00003074 7040                       		moveq	#$40,d0
00003076 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
0000307A                            
0000307A                            loc_2CE6:
0000307A 4A41                       		tst.w	d1
0000307C 6A00 0000                  		bpl.w	loc_2CF2
00003080 4440                       		neg.w	d0
00003082 0640 0080                  		addi.w	#$80,d0
00003086                            
00003086                            loc_2CF2:
00003086 4A42                       		tst.w	d2
00003088 6A00 0000                  		bpl.w	loc_2CFE
0000308C 4440                       		neg.w	d0
0000308E 0640 0100                  		addi.w	#$100,d0
00003092                            
00003092                            loc_2CFE:
00003092 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003096 4E75                       		rts	
00003098                            ; ===========================================================================
00003098                            
00003098                            loc_2D04:				; XREF: CalcAngle
00003098 303C 0040                  		move.w	#$40,d0
0000309C 4CDF 0018                  		movem.l	(sp)+,d3-d4
000030A0 4E75                       		rts	
000030A2                            ; End of function CalcAngle
000030A2                            
000030A2                            ; ===========================================================================
000030A2                            
000030A2                            Angle_Data:	incbin	misc\angles.bin
000031A4                            
000031A4                            ; ===========================================================================
000031A4                            
000031A4                            ; ---------------------------------------------------------------------------
000031A4                            ; Sega screen
000031A4                            ; ---------------------------------------------------------------------------
000031A4                            
000031A4                            SegaScreen:				; XREF: GameModeArray
000031A4 103C 00E4                  		move.b	#$E4,d0
000031A8 6100 E42A                  		bsr.w	PlaySound_Special ; stop music
000031AC 6100 E668                  		bsr.w	ClearPLC
000031B0 6100 EEA4                  		bsr.w	Pal_FadeFrom
000031B4 4DF9 00C0 0004             		lea	($C00004).l,a6
000031BA 3CBC 8004                  		move.w	#$8004,(a6)
000031BE 3CBC 8230                  		move.w	#$8230,(a6)
000031C2 3CBC 8407                  		move.w	#$8407,(a6)
000031C6 3CBC 8700                  		move.w	#$8700,(a6)
000031CA 3CBC 8B00                  		move.w	#$8B00,(a6)
000031CE 4238 F64E                  		clr.b	($FFFFF64E).w
000031D2 46FC 2700                  		move	#$2700,sr
000031D6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031DA 0200 00BF                  		andi.b	#$BF,d0
000031DE 33C0 00C0 0004             		move.w	d0,($C00004).l
000031E4 6100 E316                  		bsr.w	ClearScreen
000031E8 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031F2 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000031F8 6100 E47E                  		bsr.w	NemDec
000031FC 43F9 00FF 0000             		lea	($FF0000).l,a1
00003202 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003208 303C 0000                  		move.w	#0,d0
0000320C 6100 E748                  		bsr.w	EniDec
00003210 43F9 00FF 0000             		lea	($FF0000).l,a1
00003216 203C 6510 0003             		move.l	#$65100003,d0
0000321C 7217                       		moveq	#$17,d1
0000321E 7407                       		moveq	#7,d2
00003220 6100 E436                  		bsr.w	ShowVDPGraphics
00003224 43F9 00FF 0180             		lea	($FF0180).l,a1
0000322A 203C 4000 0003             		move.l	#$40000003,d0
00003230 7227                       		moveq	#$27,d1
00003232 741B                       		moveq	#$1B,d2
00003234 6100 E422                  		bsr.w	ShowVDPGraphics
00003238 7000                       		moveq	#0,d0
0000323A 6100 F0E0                  		bsr.w	PalLoad2	; load Sega logo pallet
0000323E 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003244 31FC 0000 F634             		move.w	#0,($FFFFF634).w
0000324A 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003250 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003256 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000325A 0000 0040                  		ori.b	#$40,d0
0000325E 33C0 00C0 0004             		move.w	d0,($C00004).l
00003264                            
00003264                            Sega_WaitPallet:
00003264 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000326A 6100 FAD0                  		bsr.w	DelayProgram
0000326E 6100 EF9E                  		bsr.w	PalCycle_Sega
00003272 66F0                       		bne.s	Sega_WaitPallet
00003274                            
00003274 103C 00E1                  		move.b	#$E1,d0
00003278 6100 E35A                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
0000327C 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003282 6100 FAB8                  		bsr.w	DelayProgram
00003286 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000328C                            
0000328C                            Sega_WaitEnd:
0000328C 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003292 6100 FAA8                  		bsr.w	DelayProgram
00003296 4A78 F614                  		tst.w	($FFFFF614).w
0000329A 6700                       		beq.s	Sega_GotoTitle
0000329C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000032A2 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000032A4                            
000032A4                            Sega_GotoTitle:
000032A4 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000032AA 4E75                       		rts	
000032AC                            ; ===========================================================================
000032AC                            
000032AC                            ; ---------------------------------------------------------------------------
000032AC                            ; Title	screen
000032AC                            ; ---------------------------------------------------------------------------
000032AC                            
000032AC                            TitleScreen:				; XREF: GameModeArray
000032AC 103C 00E4                  		move.b	#$E4,d0
000032B0 6100 E322                  		bsr.w	PlaySound_Special ; stop music
000032B4 6100 EDA0                  		bsr.w	Pal_FadeFrom
000032B8 6100 E55C                  		bsr.w	ClearPLC
000032BC 46FC 2700                  		move	#$2700,sr
000032C0 6100 E2C8                  		bsr.w	SoundDriverLoad
000032C4 4DF9 00C0 0004             		lea	($C00004).l,a6
000032CA 3CBC 8004                  		move.w	#$8004,(a6)
000032CE 3CBC 8230                  		move.w	#$8230,(a6)
000032D2 3CBC 8407                  		move.w	#$8407,(a6)
000032D6 3CBC 9001                  		move.w	#$9001,(a6)
000032DA 3CBC 9200                  		move.w	#$9200,(a6)
000032DE 3CBC 8B03                  		move.w	#$8B03,(a6)
000032E2 3CBC 8720                  		move.w	#$8720,(a6)
000032E6 4238 F64E                  		clr.b	($FFFFF64E).w
000032EA 6100 E210                  		bsr.w	ClearScreen
000032EE 43F8 D000                  		lea	($FFFFD000).w,a1
000032F2 7000                       		moveq	#0,d0
000032F4 323C 07FF                  		move.w	#$7FF,d1
000032F8                            
000032F8                            Title_ClrObjRam:
000032F8 22C0                       		move.l	d0,(a1)+
000032FA 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000032FE                            
000032FE                            ; gomer
000032FE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003308 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
0000330E 6100 E368                  		bsr.w	NemDec
00003312 7003                       		moveq	#3,d0		; load Sonic's pallet
00003314 6100 EFEA                  		bsr.w	PalLoad1
00003318                            
00003318 43F9 00FF 0000             		lea	($FF0000).l,a1
0000331E 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
00003324 303C 0000                  		move.w	#0,d0
00003328 6100 E62C                  		bsr.w	EniDec
0000332C                            ; help how the fuck can i do this IT SHOWS NOTHING
0000332C 6100 EC7E                  		bsr.w	Pal_FadeTo
00003330 43F9 00FF 0000             		lea	($FF0000).l,a1
00003336 203C 4000 0003             		move.l	#$40000003,d0
0000333C 7227                       		moveq	#$27,d1
0000333E 741B                       		moveq	#$1B,d2
00003340 6100 E316                  		bsr.w	ShowVDPGraphics
00003344                            
00003344                            
00003344 43F9 00FF 0000             		lea	($FF0000).l,a1
0000334A 203C 6000 0003             		move.l	#$60000003,d0
00003350 7227                       		moveq	#$27,d1
00003352 741B                       		moveq	#$1B,d2
00003354                            
00003354 6100 ED00                  		bsr.w	Pal_FadeFrom
00003358                            
00003358                            
00003358 6100 E1A2                  		bsr.w	ClearScreen
0000335C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003366 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000336C 6100 E30A                  		bsr.w	NemDec
00003370 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
0000337A 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003380 6100 E2F6                  		bsr.w	NemDec
00003384 43F9 00FF 0000             		lea	($FF0000).l,a1
0000338A 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003390 303C 0000                  		move.w	#0,d0
00003394 6100 E5C0                  		bsr.w	EniDec
00003398 43F9 00FF 0000             		lea	($FF0000).l,a1
0000339E 203C 4000 0003             		move.l	#$40000003,d0
000033A4 7227                       		moveq	#$27,d1
000033A6 741B                       		moveq	#$1B,d2
000033A8 6100 E2AE                  		bsr.w	ShowVDPGraphics
000033AC 6100 ECA8                  		bsr.w	Pal_FadeFrom
000033B0 43F8 FB80                  		lea	($FFFFFB80).w,a1
000033B4 7000                       		moveq	#0,d0
000033B6 323C 001F                  		move.w	#$1F,d1
000033BA                            
000033BA                            
000033BA                            Title_ClrPallet:
000033BA 22C0                       		move.l	d0,(a1)+
000033BC 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000033C0                            
000033C0 7003                       		moveq	#3,d0		; load Sonic's pallet
000033C2 6100 EF3C                  		bsr.w	PalLoad1
000033C6 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000033CC 4EB9 0000 0000             		jsr	ObjectsLoad
000033D2 4EB9 0000 0000             		jsr	BuildSprites
000033D8 6100 EBD2                  		bsr.w	Pal_FadeTo
000033DC 46FC 2700                  		move	#$2700,sr
000033E0 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000033EA 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000033F0 6100 E286                  		bsr.w	NemDec
000033F4 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000033FE 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003404 6100 E272                  		bsr.w	NemDec
00003408 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003412 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003418 6100 E25E                  		bsr.w	NemDec
0000341C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003422 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000342A 4BF9 0000 05F6             		lea	(Art_Text).l,a5
00003430 323C 0BB8                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003434                            
00003434                            Title_LoadText:
00003434 2C9D                       		move.l	(a5)+,(a6)
00003436 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000343A                            
0000343A 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003440 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003446 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000344C 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003452 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003458 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000345E 6100 0000                  		bsr.w	LevelSizeLoad
00003462 6100 0000                  		bsr.w	DeformBgLayer
00003466                            
00003466 43F8 B000                  		lea	($FFFFB000).w,a1
0000346A 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003470 303C 0000                  		move.w	#0,d0
00003474 6100 E4E0                  		bsr.w	EniDec
00003478 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
0000347E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003484 6100 E64E                  		bsr.w	KosDec
00003488 6100 0000                  		bsr.w	LevelLayoutLoad
0000348C                            
0000348C 46FC 2700                  		move	#$2700,sr
00003490 6100 E06A                  		bsr.w	ClearScreen
00003494 4BF9 00C0 0004             		lea	($C00004).l,a5
0000349A 4DF9 00C0 0000             		lea	($C00000).l,a6
000034A0 47F8 F708                  		lea	($FFFFF708).w,a3
000034A4 49F8 A440                  		lea	($FFFFA440).w,a4
000034A8 343C 6000                  		move.w	#$6000,d2
000034AC 6100 0000                  		bsr.w	LoadTilesFromStart2
000034B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000034B6 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000034BC 303C 0000                  		move.w	#0,d0
000034C0 6100 E494                  		bsr.w	EniDec
000034C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000034CA 203C 4206 0003             		move.l	#$42060003,d0
000034D0 7221                       		moveq	#$21,d1
000034D2 7415                       		moveq	#$15,d2
000034D4 6100 E182                  		bsr.w	ShowVDPGraphics
000034D8 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000034E2 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000034E8 6100 E18E                  		bsr.w	NemDec
000034EC 7001                       		moveq	#1,d0		; load title screen pallet
000034EE 6100 EE10                  		bsr.w	PalLoad1
000034F2 103C 008A                  		move.b	#$8A,d0		; play title screen music
000034F6 6100 E0DC                  		bsr.w	PlaySound_Special
000034FA 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003500 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003506 43F8 D080                  		lea	($FFFFD080).w,a1
0000350A 7000                       		moveq	#0,d0
0000350C 323C 000F                  		move.w	#$F,d1
00003510                            
00003510                            Title_ClrObjRam2:
00003510 22C0                       		move.l	d0,(a1)+
00003512 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003516                            
00003516 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000351C 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003522 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003528 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000352E 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003534 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
0000353A 4EB9 0000 0000             		jsr	ObjectsLoad
00003540 6100 0000                  		bsr.w	DeformBgLayer
00003544 4EB9 0000 0000             		jsr	BuildSprites
0000354A 7000                       		moveq	#0,d0
0000354C 6100 E29C                  		bsr.w	LoadPLC2
00003550 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003556 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000355C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003560 0000 0040                  		ori.b	#$40,d0
00003564 33C0 00C0 0004             		move.w	d0,($C00004).l
0000356A 6100 EA40                  		bsr.w	Pal_FadeTo
0000356E                            
0000356E                            loc_317C:
0000356E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003574 6100 F7C6                  		bsr.w	DelayProgram
00003578 4EB9 0000 0000             		jsr	ObjectsLoad
0000357E 6100 0000                  		bsr.w	DeformBgLayer
00003582 4EB9 0000 0000             		jsr	BuildSprites
00003588 6100 E60C                  		bsr.w	PalCycle_Title
0000358C 6100 E296                  		bsr.w	RunPLC_RAM
00003590 3038 D008                  		move.w	($FFFFD008).w,d0
00003594 5440                       		addq.w	#2,d0
00003596 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
0000359A 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000359E 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000035A0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000035A6 4E75                       		rts	
000035A8                            ; ===========================================================================
000035A8                            
000035A8                            Title_ChkRegion:
000035A8 0838 0004 FFF8             		btst	#4,($FFFFFFF8).w		; check	if the machine is US or	Japanese
000035AE 6700                       		beq.s	Title_RegionJ			; if Japanese, branch
000035B0 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0	; load US code
000035B6 6000                       		bra.s	Title_EnterCheat
000035B8                            ; ===========================================================================
000035B8                            
000035B8                            Title_RegionJ:				; XREF: Title_ChkRegion
000035B8 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000035BE                            
000035BE                            Title_EnterCheat:			; XREF: Title_ChkRegion
000035BE 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000035C2 D0C0                       		adda.w	d0,a0
000035C4 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000035C8 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000035CC B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000035CE 6600                       		bne.s	loc_3210	; if not, branch
000035D0 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000035D4 4A00                       		tst.b	d0
000035D6 6600                       		bne.s	Title_CountC
000035D8 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000035DC 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000035E0 E249                       		lsr.w	#1,d1
000035E2 0241 0003                  		andi.w	#3,d1
000035E6 6700                       		beq.s	Title_PlayRing
000035E8 0838 0004 FFF8             		btst	#4,($FFFFFFF8).w
000035EE 6700                       		beq.s	Title_PlayRing
000035F0 7201                       		moveq	#1,d1
000035F2 1181 1001                  		move.b	d1,1(a0,d1.w)
000035F6                            
000035F6                            Title_PlayRing:
000035F6 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000035FC 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003600 6100 DFD2                  		bsr.w	PlaySound_Special
00003604 6000                       		bra.s	Title_CountC
00003606                            ; ===========================================================================
00003606                            
00003606                            loc_3210:				; XREF: Title_EnterCheat
00003606 4A00                       		tst.b	d0
00003608 6700                       		beq.s	Title_CountC
0000360A 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003610 6700                       		beq.s	Title_CountC
00003612 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003618                            
00003618                            Title_CountC:
00003618 1038 F605                  		move.b	($FFFFF605).w,d0
0000361C 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003620 6700                       		beq.s	loc_3230	; if not, branch
00003622 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003626                            
00003626                            loc_3230:
00003626 4A78 F614                  		tst.w	($FFFFF614).w
0000362A 6700 0000                  		beq.w	Demo
0000362E                            		; (temporary until we have an actual options screen)
0000362E 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
00003634 6700                       		beq.s	@notc
00003636                            
00003636 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
0000363A 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
00003640 6D00                       		blt.s	@notoverflow
00003642 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003648                            	@notoverflow:
00003648 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000364C 6100 DF86                  		bsr.w	PlaySound_Special
00003650                            	@notc:
00003650 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003656 6700 FF16                  		beq.w	loc_317C	; if not, branch
0000365A                            
0000365A                            Title_ChkLevSel:
0000365A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003660 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003664                            		
00003664                            		
00003664 7002                       		moveq	#2,d0
00003666 6100 ECB4                  		bsr.w	PalLoad2	; load level select pallet
0000366A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000366E 7000                       		moveq	#0,d0
00003670 323C 00FF                  		move.w	#$FF,d1
00003674                            
00003674                            Title_ClrScroll:
00003674 22C0                       		move.l	d0,(a1)+
00003676 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000367A                            
0000367A 21C0 F616                  		move.l	d0,($FFFFF616).w
0000367E 46FC 2700                  		move	#$2700,sr
00003682 4DF9 00C0 0000             		lea	($C00000).l,a6
00003688 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003692 323C 03FF                  		move.w	#$3FF,d1
00003696                            
00003696                            Title_ClrVram:
00003696 2C80                       		move.l	d0,(a6)
00003698 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000369C                            
0000369C 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000036A0 6700 0000                  		beq.w	GotoOptions	; if not, play level
000036A4                            
000036A4 6100 0000                  		bsr.w	LevSelTextLoad
000036A8                            		
000036A8                            		; sound test fix
000036A8 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000036AC 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000036B2                            		
000036B2 363C C65F                  		move.w	#$C680-$21,d3 ; selected
000036B6 0C46 0014                  		cmpi.w	#$14,d6
000036BA 6700                       		beq.s	@issndtst
000036BC 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
000036C0                            	@issndtst:
000036C0 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000036C4 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000036C8                            		
000036C8 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000036CC 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000036D4                            		
000036D4 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000036DA 6700                       		beq.s	@issndtst2
000036DC                            		
000036DC 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000036E2 6100 0000                  		bsr.w	CStringSlop
000036E6 6000                       		bra.s	LevelSelect
000036E8                            	@issndtst2:
000036E8 43F9 0000 0000             		lea	(Controls_SND).l,a1
000036EE 6100 0000                  		bsr.w	CStringSlop
000036F2                            		
000036F2                            ; ---------------------------------------------------------------------------
000036F2                            ; Level	Select
000036F2                            ; ---------------------------------------------------------------------------
000036F2                            LevelSelect:
000036F2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036F8 6100 F642                  		bsr.w	DelayProgram
000036FC 6100 0000                  		bsr.w	LevSelControls
00003700 6100 E122                  		bsr.w	RunPLC_RAM
00003704 4AB8 F680                  		tst.l	($FFFFF680).w
00003708 66E8                       		bne.s	LevelSelect
0000370A 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003710 67E0                       		beq.s	LevelSelect	; if not, branch
00003712 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003716 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
0000371A 6600                       		bne.s	@dont	; if not, dont blow this place up
0000371C                            			
0000371C 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
00003722 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003728 6100 F612                  		bsr.w	DelayProgram
0000372C                            	@dont:
0000372C 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003730 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003732                            		
00003732 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003738 67B8                       		beq.s	LevelSelect	; if not, branch
0000373A                            		
0000373A 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003740 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003742                            		
00003742 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003746 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000374A                            		
0000374A 4EB9 0000 0000             		jsr		ShowNow_Playing
00003750 60A0                       		bra.s	LevelSelect
00003752                            ; ===========================================================================
00003752                            
00003752                            LevSel_SEGA:				; XREF: LevelSelect
00003752 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003758 4E75                       		rts	
0000375A                            ; ===========================================================================
0000375A                            
0000375A                            LevSel_Ending:				; XREF: LevelSelect
0000375A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003760 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003766 4E75                       		rts	
00003768                            ; ===========================================================================
00003768                            
00003768                            LevSel_Credits:				; XREF: LevelSelect
00003768 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
0000376E 103C 0091                  		move.b	#$91,d0
00003772 6100 DE60                  		bsr.w	PlaySound_Special ; play credits music
00003776 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000377C 4E75                       		rts	
0000377E                            ; ===========================================================================
0000377E                            
0000377E                            LevSel_Level_SS:			; XREF: LevelSelect
0000377E D040                       		add.w	d0,d0
00003780 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003784 6B00 FF6C                  		bmi.w	LevelSelect
00003788 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
0000378C 6600                       		bne.s	LevSel_Level	; if not, branch
0000378E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003794 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003798 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000379E 7000                       		moveq	#0,d0
000037A0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037A4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037A8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037AC 4E75                       		rts	
000037AE                            ; ===========================================================================
000037AE                            
000037AE                            LevSel_Level:				; XREF: LevSel_Level_SS
000037AE 0240 3FFF                  		andi.w	#$3FFF,d0
000037B2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000037B6                            
000037B6                            PlayLevel:				; XREF: ROM:00003246j ...
000037B6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000037BC 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000037C2 7000                       		moveq	#0,d0
000037C4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037C8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037CC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037D0 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000037D4 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000037D8 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000037DC 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000037E0 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000037E4 103C 00E0                  		move.b	#$E0,d0
000037E8 6100 DDEA                  		bsr.w	PlaySound_Special ; fade out music
000037EC 4E75                       		rts	
000037EE                            ; ===========================================================================
000037EE                            ; ---------------------------------------------------------------------------
000037EE                            ; Level	select - level pointers
000037EE                            ; ---------------------------------------------------------------------------
000037EE                            LSelectPointers:
000037EE 0000                       		dc.w $0000 ; crz
000037F0 0001                       		dc.w $0001
000037F2 0002                       		dc.w $0002
000037F4 0100                       		dc.w $0100 ; ilfez
000037F6 0101                       		dc.w $0101
000037F8 0102                       		dc.w $0102
000037FA 0200                       		dc.w $0200 ; mz
000037FC 0201                       		dc.w $0201
000037FE 0202                       		dc.w $0202
00003800 0300                       		dc.w $0300 ; dgrotz
00003802 0301                       		dc.w $0301 
00003804 0302                       		dc.w $0302 
00003806 0700                       		dc.w $0700 ; the other mz...
00003808 0701                       		dc.w $0701 
0000380A 0702                       		dc.w $0702 
0000380C 0400                       		dc.w $0400 ; tpfbz
0000380E 0401                       		dc.w $0401
00003810 0402                       		dc.w $0402
00003812 0500                       		dc.w $0500 ; zzzzz
00003814 0501                       		dc.w $0501 
00003816 0103                       		dc.w $0103 
00003818 0502                       		dc.w $0502 ; fz
0000381A FFFF                       		dc.w $FFFF ; special
0000381C 8000                       		dc.w $8000 ; sound test
0000381E                            		even
0000381E                            ; --------------------------------------
0000381E                            ; ---------------------------------------------------------------------------
0000381E                            ; Level	select codes
0000381E                            ; ---------------------------------------------------------------------------
0000381E                            LevelSelectCode_J:
0000381E                            		incbin	misc\ls_jcode.bin
00003824                            		even
00003824                            
00003824                            LevelSelectCode_US:
00003824                            		incbin	misc\ls_ucode.bin
0000382A                            		even
0000382A                            ; ===========================================================================
0000382A                            
0000382A                            ; ---------------------------------------------------------------------------
0000382A                            ; Demo mode
0000382A                            ; ---------------------------------------------------------------------------
0000382A                            
0000382A                            Demo:					; XREF: TitleScreen
0000382A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003830                            
00003830                            loc_33B6:				; XREF: loc_33E4
00003830 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003836 6100 F504                  		bsr.w	DelayProgram
0000383A 6100 0000                  		bsr.w	DeformBgLayer
0000383E 6100 E334                  		bsr.w	PalCycle_Load
00003842 6100 DFE0                  		bsr.w	RunPLC_RAM
00003846 3038 D008                  		move.w	($FFFFD008).w,d0
0000384A 5440                       		addq.w	#2,d0
0000384C 31C0 D008                  		move.w	d0,($FFFFD008).w
00003850 0C40 1C00                  		cmpi.w	#$1C00,d0
00003854 6500                       		bcs.s	loc_33E4
00003856 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
0000385C 4E75                       		rts	
0000385E                            ; ===========================================================================
0000385E                            
0000385E                            loc_33E4:				; XREF: Demo
0000385E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003864 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
00003868 4A78 F614                  		tst.w	($FFFFF614).w
0000386C 6600 FFC2                  		bne.w	loc_33B6
00003870 103C 00E0                  		move.b	#$E0,d0
00003874 6100 DD5E                  		bsr.w	PlaySound_Special ; fade out music
00003878 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000387C 0240 0007                  		andi.w	#7,d0
00003880 D040                       		add.w	d0,d0
00003882 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003886 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000388A 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
0000388E 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003894 6500                       		bcs.s	loc_3422	; if yes, branch
00003896 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000389C                            
0000389C                            loc_3422:
0000389C 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000038A2 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000038A8 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000038AC 6600                       		bne.s	Demo_Level	; if not, branch
000038AE 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000038B4 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000038B8 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000038BC                            
000038BC                            Demo_Level:
000038BC 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000038C2 7000                       		moveq	#0,d0
000038C4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000038C8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000038CC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000038D0 4E75                       		rts	
000038D2                            ; ===========================================================================
000038D2                            ; ---------------------------------------------------------------------------
000038D2                            ; Levels used in demos
000038D2                            ; ---------------------------------------------------------------------------
000038D2                            Demo_Levels:	incbin	misc\dm_ord1.bin
000038DA                            		even
000038DA                            
000038DA                            ; ---------------------------------------------------------------------------
000038DA                            ; Subroutine to	change what you're selecting in the level select
000038DA                            ; ---------------------------------------------------------------------------
000038DA                            
000038DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038DA                            
000038DA                            
000038DA                            LevSelControls:				; XREF: LevelSelect
000038DA 1238 F605                  		move.b	($FFFFF605).w,d1
000038DE 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000038E2 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000038E4 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000038E8 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000038EC                            
000038EC                            LevSel_UpDown:
000038EC 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000038F2 1238 F604                  		move.b	($FFFFF604).w,d1
000038F6 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000038FA 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000038FE 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003902 0801 0000                  		btst	#0,d1		; is up	pressed?
00003906 6700                       		beq.s	LevSel_Down	; if not, branch
00003908 5346                       		subq.w	#1,d6		; move up 1 selection
0000390A 6400                       		bcc.s	LevSel_Down
0000390C 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
0000390E                            
0000390E                            LevSel_Down:
0000390E 0801 0001                  		btst	#1,d1		; is down pressed?
00003912 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003914 5246                       		addq.w	#1,d6		; move down 1 selection
00003916 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000391A 6500                       		bcs.s	LevSel_Refresh
0000391C 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
0000391E 6000                       		bra.s	LevSel_Refresh
00003920                            		
00003920                            LevSel_LR:
00003920 0801 0002                  		btst	#2,d1		; is left pressed?
00003924 6700                       		beq.s	LevSel_Right	; if not, branch
00003926 0446 0000                  		sub.w	#lsrow2size,d6
0000392A 64E2                       		bcc.s	LevSel_Down
0000392C 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003930                            LevSel_Right:
00003930 0801 0003                  		btst	#3,d1		; is right pressed?
00003934 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003936 0646 0000                  		add.w	#lsrow1size,d6
0000393A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000393E 6500                       		bcs.s	LevSel_Refresh
00003940 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003944                            ; ===========================================================================
00003944                            LevSel_Refresh:
00003944                            		
00003944 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003948 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000394C                            		
0000394C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003952 6600                       		bne.s	@exitsndtest
00003954                            		
00003954 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003958 43F9 0000 0000             		lea	(Controls_Normal).l,a1
0000395E 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003966 6100 0000                  		bsr.w	CStringSlop
0000396A                            	@exitsndtest:
0000396A                            	
0000396A 363C C65F                  		move.w	#$C680-$21,d3
0000396E 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003972 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003976                            		
00003976 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
0000397C 6600                       		bne.s	@entersndtest
0000397E                            		
0000397E 363C C65F                  		move.w	#$C680-$21,d3
00003982 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003988 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003990 6100 0000                  		bsr.w	CStringSlop
00003994                            	@entersndtest:
00003994 4E75                       		rts	
00003996                            		
00003996                            LevSel_SndTest:				; XREF: LevSelControls
00003996 1238 F605                  		move.b	($FFFFF605).w,d1
0000399A 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
0000399E 6700                       		beq.s	LevSel_NoMove	; if not, branch
000039A0 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
000039A6 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
000039AA                            		
000039AA 1038 FF84                  		move.b	($FFFFFF84).w,d0
000039AE 0801 0002                  		btst	#2,d1		; is left pressed?
000039B2 6700                       		beq.s	SndTest_Right	; if not, branch
000039B4 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
000039B6                            		; no need the fact it's a byte does the trick
000039B6                            
000039B6                            SndTest_Right:
000039B6 0801 0003                  		btst	#3,d1		; is right pressed?
000039BA 6700                       		beq.s	SndTest_A	; if not, branch
000039BC 5200                       		addq.b	#1,d0		; add 1	to sound test
000039BE                            		; same here
000039BE                            		
000039BE                            SndTest_A:
000039BE 0801 0006                  		btst	#6,d1		; is A pressed?
000039C2 6700                       		beq.s	SndTest_B	; if not, branch
000039C4 5100                       		subq.b	#8,d0		; subtract $10 to sound test
000039C6 5100                       		subq.b	#8,d0
000039C8                            		
000039C8                            SndTest_B:
000039C8 0801 0004                  		btst	#4,d1		; is B pressed?
000039CC 6700                       		beq.s	SndTest_Refresh	; if not, branch
000039CE 5000                       		addq.b	#8,d0		; add $10 to sound test
000039D0 5000                       		addq.b	#8,d0
000039D2                            
000039D2                            SndTest_Refresh:
000039D2 363C C65F                  		move.w	#$C680-$21,d3
000039D6 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000039DA 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000039DE                            
000039DE                            LevSel_NoMove:
000039DE 4E75                       		rts	
000039E0                            ; End of function LevSelControls
000039E0                            
000039E0                            ; ---------------------------------------------------------------------------
000039E0                            ; Subroutine to load level select text
000039E0                            ; ---------------------------------------------------------------------------
000039E0                            
000039E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039E0                            
000039E0                            LevSelTextLoad_loop:
000039E0 2D44 0004                  		move.l	d4,4(a6)
000039E4 6100 0000                  		bsr.w	LevSel_ChgLine
000039E8 0684 0080 0000             		addi.l	#$800000,d4
000039EE 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000039F2 4E75                       		rts
000039F4                            LevSelTextLoad:				; XREF: TitleScreen
000039F4 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039FA 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A00 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003A04 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003A0A                            		
00003A0A 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003A0E 61D0                       		bsr.s	LevSelTextLoad_loop
00003A10                            		
00003A10                            		
00003A10 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003A16 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003A1A 61C4                       		bsr.s	LevSelTextLoad_loop
00003A1C 363C C65F                  		move.w	#$C680-$21,d3
00003A20                            		
00003A20                            LevSelHighlightCode:
00003A20 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A26 7000                       		moveq	#0,d0
00003A28 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003A2C 3200                       		move.w	d0,d1
00003A2E 283C 6086 0003             		move.l	#lsscrpos,d4
00003A34                            		
00003A34 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003A38 6D00                       		blt.s	@notsecond
00003A3A                            		
00003A3A 0440 0000                  		sub.w	#lsrow1size,d0
00003A3E 0684 0024 0000             		addi.l	#lsoff,d4
00003A44                            	@notsecond:
00003A44 EF48                       		lsl.w	#7,d0
00003A46 4840                       		swap	d0
00003A48 D880                       		add.l	d0,d4
00003A4A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A50 E749                       		lsl.w	#3,d1
00003A52 D241                       		add.w	d1,d1
00003A54 D2C1                       		adda.w	d1,a1
00003A56 2D44 0004                  		move.l	d4,4(a6)
00003A5A 6100 0000                  		bsr.w	LevSel_ChgLine
00003A5E 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003A64 6700                       		beq.s	LevSelSndTest
00003A66 4E75                       		rts
00003A68                            
00003A68                            LevSelSndTest:
00003A68 0643 0030                  		add.w	#$30,d3
00003A6C 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A76 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A7A 1400                       		move.b	d0,d2
00003A7C E808                       		lsr.b	#4,d0
00003A7E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A82 1002                       		move.b	d2,d0
00003A84 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A88 4E75                       		rts	
00003A8A                            ; End of function LevSelTextLoad
00003A8A                            
00003A8A                            
00003A8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A8A                            
00003A8A                            
00003A8A                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A8A 0240 000F                  		andi.w	#$F,d0
00003A8E 0C00 000A                  		cmpi.b	#$A,d0
00003A92 6500                       		bcs.s	loc_3580
00003A94 5E00                       		addi.b	#7,d0
00003A96                            
00003A96                            loc_3580:
00003A96 D043                       		add.w	d3,d0
00003A98 3C80                       		move.w	d0,(a6)
00003A9A 4E75                       		rts	
00003A9C                            ; End of function LevSel_ChgSnd
00003A9C                            
00003A9C                            
00003A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A9C                            
00003A9C                            
00003A9C                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A9C 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A9E                            
00003A9E                            @loop:
00003A9E 7000                       		moveq	#0,d0
00003AA0 1019                       		move.b	(a1)+,d0
00003AA2 0C00 0020                  		cmpi.b	#$20,d0
00003AA6 6E00                       		bgt.s	@draw
00003AA8 3CBC 0000                  		move.w	#0,(a6)
00003AAC 51CA FFF0                  		dbf	d2,@loop
00003AB0 4E75                       		rts	
00003AB2                            ; ===========================================================================
00003AB2                            
00003AB2                            @draw:				; XREF: LevSel_ChgLine
00003AB2 D043                       		add.w	d3,d0
00003AB4 3C80                       		move.w	d0,(a6)
00003AB6 51CA FFE6                  		dbf	d2,@loop
00003ABA 4E75                       		rts	
00003ABC                            ; End of function LevSel_ChgLine
00003ABC                            		
00003ABC                            CStringSlop_draw:
00003ABC D043                       		add.w	d3,d0
00003ABE 3C80                       		move.w	d0,(a6)
00003AC0                            CStringSlop:				; XREF: LevSelTextLoad
00003AC0 7000                       		moveq	#0,d0
00003AC2 1019                       		move.b	(a1)+,d0
00003AC4 0C00 0020                  		cmpi.b	#$20,d0
00003AC8 6EF2                       		bgt.s	CStringSlop_draw
00003ACA                            		
00003ACA 0C00 0001                  		cmpi.b	#1,d0
00003ACE 6700                       		beq.s	@InsertSpaces
00003AD0 6500                       		blo.s	@end
00003AD2                            		
00003AD2 3CBC 0000                  		move.w	#0,(a6)
00003AD6 60E8                       		bra.s	CStringSlop
00003AD8                            	@end:
00003AD8 4E75                       		rts
00003ADA                            	@InsertSpaces:
00003ADA 7000                       		moveq	#0,d0
00003ADC 1019                       		move.b	(a1)+,d0
00003ADE                            		
00003ADE                            	@insert:
00003ADE 3CBC 0000                  		move.w	#0,(a6)
00003AE2 51C8 FFFA                  		dbf.w	d0,@insert
00003AE6 60D8                       		bra.s	CStringSlop
00003AE8                            ; End of function LevSel_ChgLine
00003AE8                            
00003AE8                            ; ===========================================================================
00003AE8                            ; ---------------------------------------------------------------------------
00003AE8                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003AE8                            ; ---------------------------------------------------------------------------
00003AE8                            LevelMenuText:	
00003AE8 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003AF8 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B08 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B18 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003B28 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003B38 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B48 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003B58 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B68 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B78 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B88 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B98 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BA8 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
00003BB8 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BC8 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BD8                            LMTSecondRow:
00003BD8 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003BE8 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003BF8 2020 2020 2020 2020 2020+          dc.b    "               3"
00003C08 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003C18 2020 2020 2020 2020 2020+          dc.b    "               2"
00003C28 2020 2020 2020 2020 2020+          dc.b    "               3"
00003C38 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003C48 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003C58 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003C68 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003C78 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003C88                            LMTSelectableEnd:
00003C88 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003C98                            LMTEnd:
00003C98                            
00003C98                            Now_Playing:
00003C98 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003CA8                            		even
00003CA8                            NP_Track:
00003CA8 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003CB0                            		even
00003CB0                            NP_SFX:
00003CB0 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003CB8                            		even
00003CB8                            
00003CB8                            ShowNow_Playing:
00003CB8 1C00                       		move.b	d0,d6
00003CBA 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003CBE 43FA FFD8                  		lea	Now_Playing(pc),a1
00003CC2 4DF9 00C0 0000             		lea		($C00000).l,a6
00003CC8 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003CD0 6100 FDEE                  		bsr.w	CStringSlop
00003CD4                            		
00003CD4 43FA FFD2                  		lea	NP_Track(pc),a1
00003CD8 0C06 00A0                  		cmpi.b	#$A0,d6
00003CDC 6D00                       		blt.s	@track
00003CDE                            		
00003CDE 43FA FFD0                  		lea	NP_SFX(pc),a1
00003CE2                            	@track:
00003CE2 6100 FDDC                  		bsr.w	CStringSlop
00003CE6                            		
00003CE6 0643 0030                  		add.w	#$30,d3
00003CEA 1006                       		move.b	d6,d0
00003CEC 1400                       		move.b	d0,d2
00003CEE E808                       		lsr.b	#4,d0
00003CF0 6100 FD98                  		bsr.w	LevSel_ChgSnd
00003CF4 1002                       		move.b	d2,d0
00003CF6 6100 FD92                  		bsr.w	LevSel_ChgSnd
00003CFA 4E75                       		rts	
00003CFC                            
00003CFC                            ; 1 is insert spaces btw
00003CFC                            Controls_Normal:
00003CFC 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003D08                            		even		
00003D08                            Controls_SND:
00003D08 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003D2E 00                         		even
00003D2E                            		
00003D2E                            OptionMenuText:	
00003D2E 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003D3E 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003D4E                            OMTEnd:
00003D4E                            		
00003D4E                            ; ---------------------------------------------------------------------------
00003D4E                            ; Level	Select
00003D4E                            ; ---------------------------------------------------------------------------
00003D4E                            GotoOptions:
00003D4E 43F9 0000 3D2E             		lea	(OptionMenuText).l,a1
00003D54 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D5A 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003D5E 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003D64                            		
00003D64 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003D68 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00003D6C                            
00003D6C                            OptionsMenu:
00003D6C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003D72 6100 EFC8                  		bsr.w	DelayProgram
00003D76 6100 0000                  		bsr.w	OptControls
00003D7A 6100 DAA8                  		bsr.w	RunPLC_RAM
00003D7E 4AB8 F680                  		tst.l	($FFFFF680).w
00003D82 66E8                       		bne.s	OptionsMenu
00003D84 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003D8A 67E0                       		beq.s	OptionsMenu	; if not, branch
00003D8C 4E71                       		nop
00003D8E 60DC                       		bra.s	OptionsMenu
00003D90                            		
00003D90                            OptReturn:
00003D90 4E75                       		rts
00003D92                            OptControls:				; XREF: LevelSelect
00003D92 1238 F605                  		move.b	($FFFFF605).w,d1
00003D96 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003D9A 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003D9C 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003DA0 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003DA2                            Opt_UpDown:
00003DA2 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003DA8 1238 F604                  		move.b	($FFFFF604).w,d1
00003DAC 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003DB0 0801 0000                  		btst	#0,d1		; is up	pressed?
00003DB4 6700                       		beq.s	Opt_Down	; if not, branch
00003DB6 5346                       		subq.w	#1,d6		; move up 1 selection
00003DB8 6400                       		bcc.s	Opt_Down
00003DBA 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003DBC                            
00003DBC                            Opt_Down:
00003DBC 0801 0001                  		btst	#1,d1		; is down pressed?
00003DC0 6700                       		beq.s	Opt_Refresh	; if not, branch
00003DC2 5246                       		addq.w	#1,d6		; move down 1 selection
00003DC4 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003DC8 6500                       		bcs.s	Opt_Refresh
00003DCA 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003DCC                            Opt_Refresh:
00003DCC                            		
00003DCC                            ; ---------------------------------------------------------------------------
00003DCC                            ; Music	playlist
00003DCC                            ; ---------------------------------------------------------------------------
00003DCC                            MusicList1:	incbin	misc\muslist1.bin
00003DD4                            		even
00003DD4                            MusicList2:	incbin	misc\muslist2.bin
00003DDC                            		even
00003DDC                            MusicList3:	incbin	misc\muslist3.bin
00003DE4                            		even
00003DE4                            MusicList4:	incbin	misc\muslist4.bin
00003DEC                            		even
00003DEC                            ; ===========================================================================
00003DEC                            
00003DEC                            ; ---------------------------------------------------------------------------
00003DEC                            ; Level
00003DEC                            ; ---------------------------------------------------------------------------
00003DEC                            
00003DEC                            Level:					; XREF: GameModeArray
00003DEC 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003DF2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DF6 6B00                       		bmi.s	loc_37B6
00003DF8 103C 00E0                  		move.b	#$E0,d0
00003DFC 6100 D7D6                  		bsr.w	PlaySound_Special ; fade out music
00003E00                            
00003E00                            loc_37B6:
00003E00 6100 DA14                  		bsr.w	ClearPLC
00003E04 6100 E250                  		bsr.w	Pal_FadeFrom
00003E08 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E0C 6B00                       		bmi.s	Level_ClrRam
00003E0E 46FC 2700                  		move	#$2700,sr
00003E12 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003E1C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003E22 6100 D854                  		bsr.w	NemDec
00003E26 46FC 2300                  		move	#$2300,sr
00003E2A 7000                       		moveq	#0,d0
00003E2C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E30 E948                       		lsl.w	#4,d0
00003E32 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003E38 45F2 0000                  		lea	(a2,d0.w),a2
00003E3C 7000                       		moveq	#0,d0
00003E3E 1012                       		move.b	(a2),d0
00003E40 6700                       		beq.s	loc_37FC
00003E42 6100 D974                  		bsr.w	LoadPLC		; load level patterns
00003E46                            
00003E46                            loc_37FC:
00003E46 7001                       		moveq	#1,d0
00003E48 6100 D96E                  		bsr.w	LoadPLC		; load standard	patterns
00003E4C                            
00003E4C                            Level_ClrRam:
00003E4C 43F8 D000                  		lea	($FFFFD000).w,a1
00003E50 7000                       		moveq	#0,d0
00003E52 323C 07FF                  		move.w	#$7FF,d1
00003E56                            
00003E56                            Level_ClrObjRam:
00003E56 22C0                       		move.l	d0,(a1)+
00003E58 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003E5C                            
00003E5C 43F8 F628                  		lea	($FFFFF628).w,a1
00003E60 7000                       		moveq	#0,d0
00003E62 323C 0015                  		move.w	#$15,d1
00003E66                            
00003E66                            Level_ClrVars:
00003E66 22C0                       		move.l	d0,(a1)+
00003E68 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003E6C                            
00003E6C 43F8 F700                  		lea	($FFFFF700).w,a1
00003E70 7000                       		moveq	#0,d0
00003E72 323C 003F                  		move.w	#$3F,d1
00003E76                            
00003E76                            Level_ClrVars2:
00003E76 22C0                       		move.l	d0,(a1)+
00003E78 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003E7C                            
00003E7C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003E80 7000                       		moveq	#0,d0
00003E82 323C 0047                  		move.w	#$47,d1
00003E86                            
00003E86                            Level_ClrVars3:
00003E86 22C0                       		move.l	d0,(a1)+
00003E88 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003E8C                            
00003E8C 46FC 2700                  		move	#$2700,sr
00003E90 6100 D66A                  		bsr.w	ClearScreen
00003E94 4DF9 00C0 0004             		lea	($C00004).l,a6
00003E9A 3CBC 8B03                  		move.w	#$8B03,(a6)
00003E9E 3CBC 8230                  		move.w	#$8230,(a6)
00003EA2 3CBC 8407                  		move.w	#$8407,(a6)
00003EA6 3CBC 857C                  		move.w	#$857C,(a6)
00003EAA 3CBC 9001                  		move.w	#$9001,(a6)
00003EAE 3CBC 8004                  		move.w	#$8004,(a6)
00003EB2 3CBC 8720                  		move.w	#$8720,(a6)
00003EB6 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003EBC 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003EC0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003EC6 6600                       		bne.s	Level_LoadPal	; if not, branch
00003EC8 3CBC 8014                  		move.w	#$8014,(a6)
00003ECC 7000                       		moveq	#0,d0
00003ECE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003ED2 D040                       		add.w	d0,d0
00003ED4 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003EDA 3031 0000                  		move.w	(a1,d0.w),d0
00003EDE 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003EE2 31C0 F648                  		move.w	d0,($FFFFF648).w
00003EE6 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003EEA 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003EEE 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003EF2 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003EF8 6000 0000                  		bra.w	Level_LoadPal
00003EFC                            Player_Palette:
00003EFC                            		; normal, lz, sbz, blank
00003EFC 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003F04                            		
00003F04 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003F0C 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003F14 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003F1C                            
00003F1C                            		; add more player palettes
00003F1C                            Level_LoadPal:
00003F1C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003F22 46FC 2300                  		move	#$2300,sr
00003F26                            
00003F26 7200                       		moveq	#0,d1
00003F28 1238 FFE8                  		move.b	(v_character),d1
00003F2C D241                       		add.w	d1,d1
00003F2E D241                       		add.w	d1,d1
00003F30 D241                       		add.w	d1,d1
00003F32 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003F36                            		
00003F36 6100 E3E4                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003F3A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003F40 6600                       		bne.s	Level_GetBgm	; if not, branch
00003F42 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003F46 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003F4C 6600                       		bne.s	Level_WaterPal	; if not, branch
00003F4E 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003F52                            
00003F52                            Level_WaterPal:
00003F52 6100 E3E0                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003F56 4A38 FE30                  		tst.b	($FFFFFE30).w
00003F5A 6700                       		beq.s	Level_GetBgm
00003F5C 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003F62                            
00003F62                            ; NineKode begins here - How to play different songs on different acts
00003F62                             
00003F62                            Level_GetBgm:
00003F62 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F66 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003F6A 7000                       		moveq	#0,d0
00003F6C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F70                             
00003F70 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003F76 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003F78 43F9 0000 3DCC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003F7E 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F80                             
00003F80                            Level_GetBgm2:
00003F80 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003F86 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003F88 43F9 0000 3DD4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003F8E 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F90                             
00003F90                            Level_GetBgm3:
00003F90 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003F96 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003F98 43F9 0000 3DDC             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003F9E 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003FA0                             
00003FA0                            Level_GetBgm4:
00003FA0 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003FA6 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003FA8 43F9 0000 3DE4             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003FAE                             
00003FAE                            Level_PlayBgm:
00003FAE 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003FB2 6100 D61A                  		bsr.w	PlaySound	; play music
00003FB6 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003FBC                             
00003FBC                            ; NineKode ends here
00003FBC                            
00003FBC                            Level_TtlCard:
00003FBC 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003FC2 6100 ED78                  		bsr.w	DelayProgram
00003FC6 4EB9 0000 0000             		jsr	ObjectsLoad
00003FCC 4EB9 0000 0000             		jsr	BuildSprites
00003FD2 6100 D850                  		bsr.w	RunPLC_RAM
00003FD6 3038 D108                  		move.w	($FFFFD108).w,d0
00003FDA B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003FDE 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003FE0 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003FE4 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003FE6 4EB9 0000 0000             		jsr	Hud_Base
00003FEC                            
00003FEC                            loc_3946:
00003FEC 7003                       		moveq	#3,d0
00003FEE 6100 E310                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003FF2 6100 0000                  		bsr.w	LevelSizeLoad
00003FF6 6100 0000                  		bsr.w	DeformBgLayer
00003FFA 08F8 0002 F754             		bset	#2,($FFFFF754).w
00004000 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00004004 6100 0000                  		bsr.w	LoadTilesFromStart
00004008 4EB9 0000 0000             		jsr	FloorLog_Unk
0000400E 6100 0000                  		bsr.w	ColIndexLoad
00004012 6100 0000                  		bsr.w	LZWaterEffects
00004016 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000401C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004020 6B00                       		bmi.s	Level_ChkDebug
00004022 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00004028                            
00004028                            Level_ChkDebug:
00004028 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
0000402C 6700                       		beq.s	Level_ChkWater	; if not, branch
0000402E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004034 6700                       		beq.s	Level_ChkWater	; if not, branch
00004036 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000403C                            
0000403C                            Level_ChkWater:
0000403C 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00004042 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00004048 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000404E 6600                       		bne.s	Level_LoadObj	; if not, branch
00004050 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00004056 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000405C 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004062 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00004068                            
00004068                            Level_LoadObj:
00004068 4EB9 0000 0000             		jsr	ObjPosLoad
0000406E 4EB9 0000 0000             		jsr	ObjectsLoad
00004074 4EB9 0000 0000             		jsr	BuildSprites
0000407A 7000                       		moveq	#0,d0
0000407C 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004080 6600                       		bne.s	loc_39E8	; if yes, branch
00004082 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004086 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000408A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000408E                            
0000408E                            loc_39E8:
0000408E 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004092 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004096 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000409A 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000409E                            		; move.b	d0,($FFFFFE2F).w
0000409E 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
000040A4 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000040A8 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000040AC 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000040B0 6100 0000                  		bsr.w	OscillateNumInit
000040B4 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000040BA 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
000040C0 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
000040C6 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000040CC 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
000040D2 7000                       		moveq	#0,d0
000040D4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000040D8 E548                       		lsl.w	#2,d0
000040DA 2271 0000                  		movea.l	(a1,d0.w),a1
000040DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040E2 6A00                       		bpl.s	Level_Demo	; if yes, branch
000040E4 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000040EA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000040EE 5340                       		subq.w	#1,d0
000040F0 E548                       		lsl.w	#2,d0
000040F2 2271 0000                  		movea.l	(a1,d0.w),a1
000040F6                            
000040F6                            Level_Demo:
000040F6 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000040FC 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00004100 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004106 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000410A 6A00                       		bpl.s	Level_ChkWaterPal
0000410C 31FC 021C F614             		move.w	#540,($FFFFF614).w
00004112 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00004118 6600                       		bne.s	Level_ChkWaterPal
0000411A 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00004120                            
00004120                            Level_ChkWaterPal:
00004120 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00004126 6600                       		bne.s	Level_Delay	; if not, branch
00004128 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
0000412A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00004130 6600                       		bne.s	Level_WaterPal2	; if not, branch
00004132 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00004134                            
00004134                            Level_WaterPal2:
00004134 6100 E21A                  		bsr.w	PalLoad4_Water
00004138                            
00004138                            Level_Delay:
00004138 323C 0003                  		move.w	#3,d1
0000413C                            
0000413C                            Level_DelayLoop:
0000413C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004142 6100 EBF8                  		bsr.w	DelayProgram
00004146 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000414A                            
0000414A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004150 6100 DE60                  		bsr.w	Pal_FadeTo2
00004154 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004158 6B00                       		bmi.s	Level_ClrCardArt
0000415A 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000415E 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00004162 5838 D124                  		addq.b	#4,($FFFFD124).w
00004166 5838 D164                  		addq.b	#4,($FFFFD164).w
0000416A 6000                       		bra.s	Level_StartGame
0000416C                            ; ===========================================================================
0000416C                            
0000416C                            Level_ClrCardArt:
0000416C 7002                       		moveq	#2,d0
0000416E 4EB9 0000 17B8             		jsr	(LoadPLC).l	; load explosion patterns
00004174 7000                       		moveq	#0,d0
00004176 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000417A 0640 0015                  		addi.w	#$15,d0
0000417E 4EB9 0000 17B8             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00004184                            
00004184                            Level_StartGame:
00004184 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
0000418A                            
0000418A                            ; ---------------------------------------------------------------------------
0000418A                            ; Main level loop (when	all title card and loading sequences are finished)
0000418A                            ; ---------------------------------------------------------------------------
0000418A                            
0000418A                            Level_MainLoop:
0000418A 6100 D454                  		bsr.w	PauseGame
0000418E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004194 6100 EBA6                  		bsr.w	DelayProgram
00004198 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
0000419C 6100 0000                  		bsr.w	MoveSonicInDemo
000041A0 6100 0000                  		bsr.w	LZWaterEffects
000041A4 4EB9 0000 0000             		jsr	ObjectsLoad
000041AA 4A78 FE08                  		tst.w	($FFFFFE08).w
000041AE 6600                       		bne.s	loc_3B10
000041B0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000041B6 6400                       		bcc.s	loc_3B14
000041B8                            
000041B8                            loc_3B10:
000041B8 6100 0000                  		bsr.w	DeformBgLayer
000041BC                            
000041BC                            loc_3B14:
000041BC 4EB9 0000 0000             		jsr	BuildSprites
000041C2 4EB9 0000 0000             		jsr	ObjPosLoad
000041C8 6100 D9AA                  		bsr.w	PalCycle_Load
000041CC 6100 D656                  		bsr.w	RunPLC_RAM
000041D0 6100 0000                  		bsr.w	OscillateNumDo
000041D4 6100 0000                  		bsr.w	ChangeRingFrame
000041D8 6100 0000                  		bsr.w	SignpostArtLoad
000041DC 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041E2 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000041E4 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000041E8 6600 FC02                  		bne.w	Level		; if yes, branch
000041EC 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000041F2 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000041F6 4E75                       		rts	
000041F8                            ; ===========================================================================
000041F8                            
000041F8                            Level_ChkDemo:				; XREF: Level_MainLoop
000041F8 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000041FC 6600                       		bne.s	Level_EndDemo	; if yes, branch
000041FE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004202 6700                       		beq.s	Level_EndDemo	; if not, branch
00004204 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000420A 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000420E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004214 4E75                       		rts	
00004216                            ; ===========================================================================
00004216                            
00004216                            Level_EndDemo:				; XREF: Level_ChkDemo
00004216 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
0000421C 6600                       		bne.s	loc_3B88	; if not, branch
0000421E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004224 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004228 6A00                       		bpl.s	loc_3B88	; if yes, branch
0000422A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00004230                            
00004230                            loc_3B88:
00004230 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004236 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000423C 4278 F794                  		clr.w	($FFFFF794).w
00004240                            
00004240                            loc_3B98:
00004240 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004246 6100 EAF4                  		bsr.w	DelayProgram
0000424A 6100 0000                  		bsr.w	MoveSonicInDemo
0000424E 4EB9 0000 0000             		jsr	ObjectsLoad
00004254 4EB9 0000 0000             		jsr	BuildSprites
0000425A 4EB9 0000 0000             		jsr	ObjPosLoad
00004260 5378 F794                  		subq.w	#1,($FFFFF794).w
00004264 6A00                       		bpl.s	loc_3BC8
00004266 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000426C 6100 DE08                  		bsr.w	Pal_FadeOut
00004270                            
00004270                            loc_3BC8:
00004270 4A78 F614                  		tst.w	($FFFFF614).w
00004274 66CA                       		bne.s	loc_3B98
00004276 4E75                       		rts	
00004278                            ; ===========================================================================
00004278                            ; ---------------------------------------------------------------------------
00004278                            ; Subroutine to	do special water effects in Labyrinth Zone
00004278                            ; ---------------------------------------------------------------------------
00004278                            
00004278                            LZWaterEffects:				; XREF: Level
00004278 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000427E 6600                       		bne.s	locret_3C28	; if not, branch
00004280 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004286 6400                       		bcc.s	LZMoveWater
00004288 6100 0000                  		bsr.w	LZWindTunnels
0000428C 6100 0000                  		bsr.w	LZWaterSlides
00004290 6100 0000                  		bsr.w	LZDynamicWater
00004294                            
00004294                            LZMoveWater:
00004294 4238 F64E                  		clr.b	($FFFFF64E).w
00004298 7000                       		moveq	#0,d0
0000429A 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000429E E248                       		lsr.w	#1,d0
000042A0 D078 F648                  		add.w	($FFFFF648).w,d0
000042A4 31C0 F646                  		move.w	d0,($FFFFF646).w
000042A8 3038 F646                  		move.w	($FFFFF646).w,d0
000042AC 9078 F704                  		sub.w	($FFFFF704).w,d0
000042B0 6400                       		bcc.s	loc_3C1A
000042B2 4A40                       		tst.w	d0
000042B4 6A00                       		bpl.s	loc_3C1A
000042B6 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000042BC 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000042C2                            
000042C2                            loc_3C1A:
000042C2 0C40 00DF                  		cmpi.w	#$DF,d0
000042C6 6500                       		bcs.s	loc_3C24
000042C8 303C 00DF                  		move.w	#$DF,d0
000042CC                            
000042CC                            loc_3C24:
000042CC 11C0 F625                  		move.b	d0,($FFFFF625).w
000042D0                            
000042D0                            locret_3C28:
000042D0 4E75                       		rts	
000042D2                            ; ===========================================================================
000042D2                            ; ---------------------------------------------------------------------------
000042D2                            ; Labyrinth default water heights
000042D2                            ; ---------------------------------------------------------------------------
000042D2                            WaterHeight:	incbin	misc\lz_heigh.bin
000042DA                            		even
000042DA                            ; ===========================================================================
000042DA                            
000042DA                            ; ---------------------------------------------------------------------------
000042DA                            ; Labyrinth dynamic water routines
000042DA                            ; ---------------------------------------------------------------------------
000042DA                            
000042DA                            LZDynamicWater:				; XREF: LZWaterEffects
000042DA 7000                       		moveq	#0,d0
000042DC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042E0 D040                       		add.w	d0,d0
000042E2 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000042E6 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000042EA 7200                       		moveq	#0,d1
000042EC 1238 F64C                  		move.b	($FFFFF64C).w,d1
000042F0 3038 F64A                  		move.w	($FFFFF64A).w,d0
000042F4 9078 F648                  		sub.w	($FFFFF648).w,d0
000042F8 6700                       		beq.s	locret_3C5A
000042FA 6400                       		bcc.s	loc_3C56
000042FC 4441                       		neg.w	d1
000042FE                            
000042FE                            loc_3C56:
000042FE D378 F648                  		add.w	d1,($FFFFF648).w
00004302                            
00004302                            locret_3C5A:
00004302 4E75                       		rts	
00004304                            ; ===========================================================================
00004304 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004306 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004308 0000                       		dc.w DynWater_LZ3-DynWater_Index
0000430A 0000                       		dc.w DynWater_SBZ3-DynWater_Index
0000430C                            ; ===========================================================================
0000430C                            
0000430C                            DynWater_LZ1:				; XREF: DynWater_Index
0000430C 3038 F700                  		move.w	($FFFFF700).w,d0
00004310 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004314 6600                       		bne.s	loc_3CD0
00004316 323C 00B8                  		move.w	#$B8,d1
0000431A 0C40 0600                  		cmpi.w	#$600,d0
0000431E 6500                       		bcs.s	loc_3CB4
00004320 323C 0108                  		move.w	#$108,d1
00004324 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
0000432A 6500                       		bcs.s	loc_3CBA
0000432C 0C40 0C00                  		cmpi.w	#$C00,d0
00004330 6500                       		bcs.s	loc_3CB4
00004332 323C 0318                  		move.w	#$318,d1
00004336 0C40 1080                  		cmpi.w	#$1080,d0
0000433A 6500                       		bcs.s	loc_3CB4
0000433C 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004342 323C 05C8                  		move.w	#$5C8,d1
00004346 0C40 1380                  		cmpi.w	#$1380,d0
0000434A 6500                       		bcs.s	loc_3CB4
0000434C 323C 03A8                  		move.w	#$3A8,d1
00004350 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004354 6600                       		bne.s	loc_3CB4
00004356 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000435C                            
0000435C                            loc_3CB4:
0000435C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004360 4E75                       		rts	
00004362                            ; ===========================================================================
00004362                            
00004362                            loc_3CBA:				; XREF: DynWater_LZ1
00004362 0C40 0C80                  		cmpi.w	#$C80,d0
00004366 65F4                       		bcs.s	loc_3CB4
00004368 323C 00E8                  		move.w	#$E8,d1
0000436C 0C40 1500                  		cmpi.w	#$1500,d0
00004370 65EA                       		bcs.s	loc_3CB4
00004372 323C 0108                  		move.w	#$108,d1
00004376 60E4                       		bra.s	loc_3CB4
00004378                            ; ===========================================================================
00004378                            
00004378                            loc_3CD0:				; XREF: DynWater_LZ1
00004378 5302                       		subq.b	#1,d2
0000437A 6600                       		bne.s	locret_3CF4
0000437C 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004382 6400                       		bcc.s	locret_3CF4
00004384 323C 03A8                  		move.w	#$3A8,d1
00004388 0C40 1300                  		cmpi.w	#$1300,d0
0000438C 6500                       		bcs.s	loc_3CF0
0000438E 323C 0108                  		move.w	#$108,d1
00004392 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004398                            
00004398                            loc_3CF0:
00004398 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000439C                            
0000439C                            locret_3CF4:
0000439C 4E75                       		rts	
0000439E                            ; ===========================================================================
0000439E                            
0000439E                            DynWater_LZ2:				; XREF: DynWater_Index
0000439E 3038 F700                  		move.w	($FFFFF700).w,d0
000043A2 323C 0328                  		move.w	#$328,d1
000043A6 0C40 0500                  		cmpi.w	#$500,d0
000043AA 6500                       		bcs.s	loc_3D12
000043AC 323C 03C8                  		move.w	#$3C8,d1
000043B0 0C40 0B00                  		cmpi.w	#$B00,d0
000043B4 6500                       		bcs.s	loc_3D12
000043B6 323C 0428                  		move.w	#$428,d1
000043BA                            
000043BA                            loc_3D12:
000043BA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043BE 4E75                       		rts	
000043C0                            ; ===========================================================================
000043C0                            
000043C0                            DynWater_LZ3:				; XREF: DynWater_Index
000043C0 3038 F700                  		move.w	($FFFFF700).w,d0
000043C4 1438 F64D                  		move.b	($FFFFF64D).w,d2
000043C8 6600                       		bne.s	loc_3D5E
000043CA 323C 0500                  		move.w	#$500,d1
000043CE 0C40 0600                  		cmpi.w	#$600,d0
000043D2 6500                       		bcs.s	loc_3D54
000043D4 0C40 1B00                  		cmpi.w	#$1B00,d0
000043D8 6500                       		bcs.s	loc_3D54
000043DA 323C 0850                  		move.w	#$850,d1
000043DE                            
000043DE                            loc_3D54:
000043DE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043E2 31C1 F648                  		move.w	d1,($FFFFF648).w
000043E6 4E75                       		rts	
000043E8                            ; ===========================================================================
000043E8                            
000043E8                            loc_3D5E:				; XREF: DynWater_LZ3
000043E8 5302                       		subq.b	#1,d2
000043EA 6600                       		bne.s	loc_3DA8
000043EC 323C 04C8                  		move.w	#$4C8,d1
000043F0 0C40 0770                  		cmpi.w	#$770,d0
000043F4 6500                       		bcs.s	loc_3DA2
000043F6 323C 0308                  		move.w	#$308,d1
000043FA 0C40 1400                  		cmpi.w	#$1400,d0
000043FE 6500                       		bcs.s	loc_3DA2
00004400 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004406 6700                       		beq.s	loc_3D8E
00004408 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000440E 6400                       		bcc.s	loc_3D8E
00004410 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004416 6400                       		bcc.s	loc_3DA2
00004418                            
00004418                            loc_3D8E:
00004418 323C 0508                  		move.w	#$508,d1
0000441C 31C1 F648                  		move.w	d1,($FFFFF648).w
00004420 0C40 1770                  		cmpi.w	#$1770,d0
00004424 6500                       		bcs.s	loc_3DA2
00004426 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000442C                            
0000442C                            loc_3DA2:
0000442C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004430 4E75                       		rts	
00004432                            ; ===========================================================================
00004432                            
00004432                            loc_3DA8:
00004432 5302                       		subq.b	#1,d2
00004434 6600                       		bne.s	loc_3DD2
00004436 323C 0508                  		move.w	#$508,d1
0000443A 0C40 1860                  		cmpi.w	#$1860,d0
0000443E 6500                       		bcs.s	loc_3DCC
00004440 323C 0188                  		move.w	#$188,d1
00004444 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004448 6400                       		bcc.s	loc_3DC6
0000444A B278 F648                  		cmp.w	($FFFFF648).w,d1
0000444E 6600                       		bne.s	loc_3DCC
00004450                            
00004450                            loc_3DC6:
00004450 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004456                            
00004456                            loc_3DCC:
00004456 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000445A 4E75                       		rts	
0000445C                            ; ===========================================================================
0000445C                            
0000445C                            loc_3DD2:
0000445C 5302                       		subq.b	#1,d2
0000445E 6600                       		bne.s	loc_3E0E
00004460 323C 0188                  		move.w	#$188,d1
00004464 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004468 6500                       		bcs.s	loc_3E04
0000446A 323C 0900                  		move.w	#$900,d1
0000446E 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004472 6500                       		bcs.s	loc_3E04
00004474 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000447A 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004480 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004486 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000448C 4E75                       		rts	
0000448E                            ; ===========================================================================
0000448E                            
0000448E                            loc_3E04:
0000448E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004492 31C1 F648                  		move.w	d1,($FFFFF648).w
00004496 4E75                       		rts	
00004498                            ; ===========================================================================
00004498                            
00004498                            loc_3E0E:
00004498 0C40 1E00                  		cmpi.w	#$1E00,d0
0000449C 6500                       		bcs.s	locret_3E1A
0000449E 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000044A4                            
000044A4                            locret_3E1A:
000044A4 4E75                       		rts	
000044A6                            ; ===========================================================================
000044A6                            
000044A6                            DynWater_SBZ3:				; XREF: DynWater_Index
000044A6 323C 0228                  		move.w	#$228,d1
000044AA 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000044B0 6500                       		bcs.s	loc_3E2C
000044B2 323C 04C8                  		move.w	#$4C8,d1
000044B6                            
000044B6                            loc_3E2C:
000044B6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000044BA 4E75                       		rts
000044BC                            
000044BC                            ; ---------------------------------------------------------------------------
000044BC                            ; Labyrinth Zone "wind tunnels"	subroutine
000044BC                            ; ---------------------------------------------------------------------------
000044BC                            
000044BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044BC                            
000044BC                            
000044BC                            LZWindTunnels:				; XREF: LZWaterEffects
000044BC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000044C0 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000044C4 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000044CA 7000                       		moveq	#0,d0
000044CC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000044D0 E748                       		lsl.w	#3,d0
000044D2 D4C0                       		adda.w	d0,a2
000044D4 7200                       		moveq	#0,d1
000044D6 4A38 FE11                  		tst.b	($FFFFFE11).w
000044DA 6600                       		bne.s	loc_3E56
000044DC 7201                       		moveq	#1,d1
000044DE 514A                       		subq.w	#8,a2
000044E0                            
000044E0                            loc_3E56:
000044E0 43F8 D000                  		lea	($FFFFD000).w,a1
000044E4                            
000044E4                            LZWind_Loop:
000044E4 3029 0008                  		move.w	8(a1),d0
000044E8 B052                       		cmp.w	(a2),d0
000044EA 6500 0000                  		bcs.w	loc_3EF4
000044EE B06A 0004                  		cmp.w	4(a2),d0
000044F2 6400 0000                  		bcc.w	loc_3EF4
000044F6 3429 000C                  		move.w	$C(a1),d2
000044FA B46A 0002                  		cmp.w	2(a2),d2
000044FE 6500                       		bcs.s	loc_3EF4
00004500 B46A 0006                  		cmp.w	6(a2),d2
00004504 6400                       		bcc.s	loc_3EF4
00004506 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000450A 0200 003F                  		andi.b	#$3F,d0
0000450E 6600                       		bne.s	loc_3E90
00004510 303C 00D0                  		move.w	#$D0,d0
00004514 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play rushing water sound
0000451A                            
0000451A                            loc_3E90:
0000451A 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000451E 6600 0000                  		bne.w	locret_3F0A
00004522 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004528 6400                       		bcc.s	loc_3F06
0000452A 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004530 0440 0080                  		subi.w	#$80,d0
00004534 B052                       		cmp.w	(a2),d0
00004536 6400                       		bcc.s	LZWind_Move
00004538 7002                       		moveq	#2,d0
0000453A 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004540 6600                       		bne.s	loc_3EBA
00004542 4440                       		neg.w	d0
00004544                            
00004544                            loc_3EBA:
00004544 D169 000C                  		add.w	d0,$C(a1)
00004548                            
00004548                            LZWind_Move:
00004548 5869 0008                  		addq.w	#4,8(a1)
0000454C 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004552 337C 0000 0012             		move.w	#0,$12(a1)
00004558 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000455E 08E9 0001 0022             		bset	#1,$22(a1)
00004564 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000456A 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000456C 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004570                            
00004570                            LZWind_MoveDown:
00004570 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004576 6700                       		beq.s	locret_3EF2	; if not, branch
00004578 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000457C                            
0000457C                            locret_3EF2:
0000457C 4E75                       		rts	
0000457E                            ; ===========================================================================
0000457E                            
0000457E                            loc_3EF4:				; XREF: LZWindTunnels
0000457E 504A                       		addq.w	#8,a2
00004580 51C9 FF62                  		dbf	d1,LZWind_Loop
00004584 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004588 6700                       		beq.s	locret_3F0A
0000458A 137C 0000 001C             		move.b	#0,$1C(a1)
00004590                            
00004590                            loc_3F06:
00004590 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004594                            
00004594                            locret_3F0A:
00004594 4E75                       		rts	
00004596                            ; End of function LZWindTunnels
00004596                            
00004596                            ; ===========================================================================
00004596 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000459E 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000045B0 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000045BE                            					; XREF: LZWindTunnels
000045BE                            		even
000045BE                            
000045BE                            ; ---------------------------------------------------------------------------
000045BE                            ; Labyrinth Zone water slide subroutine
000045BE                            ; ---------------------------------------------------------------------------
000045BE                            
000045BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045BE                            
000045BE                            
000045BE                            LZWaterSlides:				; XREF: LZWaterEffects
000045BE 43F8 D000                  		lea	($FFFFD000).w,a1
000045C2 0829 0001 0022             		btst	#1,$22(a1)
000045C8 6600                       		bne.s	loc_3F6A
000045CA 3029 000C                  		move.w	$C(a1),d0
000045CE E248                       		lsr.w	#1,d0
000045D0 0240 0380                  		andi.w	#$380,d0
000045D4 1229 0008                  		move.b	8(a1),d1
000045D8 0241 007F                  		andi.w	#$7F,d1
000045DC D041                       		add.w	d1,d0
000045DE 45F8 A400                  		lea	($FFFFA400).w,a2
000045E2 1032 0000                  		move.b	(a2,d0.w),d0
000045E6 45FA 0000                  		lea	byte_3FCF(pc),a2
000045EA 7206                       		moveq	#6,d1
000045EC                            
000045EC                            loc_3F62:
000045EC B022                       		cmp.b	-(a2),d0
000045EE 57C9 FFFC                  		dbeq	d1,loc_3F62
000045F2 6700                       		beq.s	LZSlide_Move
000045F4                            
000045F4                            loc_3F6A:
000045F4 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000045F8 6700                       		beq.s	locret_3F7A
000045FA 337C 0005 003E             		move.w	#5,$3E(a1)
00004600 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004604                            
00004604                            locret_3F7A:
00004604 4E75                       		rts	
00004606                            ; ===========================================================================
00004606                            
00004606                            LZSlide_Move:				; XREF: LZWaterSlides
00004606 0C41 0003                  		cmpi.w	#3,d1
0000460A 6400                       		bcc.s	loc_3F84
0000460C 4E71                       		nop	
0000460E                            
0000460E                            loc_3F84:
0000460E 08A9 0000 0022             		bclr	#0,$22(a1)
00004614 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004618 1340 0014                  		move.b	d0,$14(a1)
0000461C 6A00                       		bpl.s	loc_3F9A
0000461E 08E9 0000 0022             		bset	#0,$22(a1)
00004624                            
00004624                            loc_3F9A:
00004624 4229 0015                  		clr.b	$15(a1)
00004628 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000462E 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004634 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004638 0200 001F                  		andi.b	#$1F,d0
0000463C 6600                       		bne.s	locret_3FBE
0000463E 303C 00D0                  		move.w	#$D0,d0
00004642 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play water sound
00004648                            
00004648                            locret_3FBE:
00004648 4E75                       		rts	
0000464A                            ; End of function LZWaterSlides
0000464A                            
0000464A                            ; ===========================================================================
0000464A 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004659 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000465A                            		even
0000465A                            
0000465A                            ; ---------------------------------------------------------------------------
0000465A                            ; Subroutine to	move Sonic in demo mode
0000465A                            ; ---------------------------------------------------------------------------
0000465A                            
0000465A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000465A                            
0000465A                            
0000465A                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000465A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000465E 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004660 4E75                       		rts	
00004662                            ; ===========================================================================
00004662                            
00004662                            ; This is an unused subroutine for recording a demo
00004662                            
00004662                            MoveDemo_Record:
00004662 43F9 0008 0000             		lea	($80000).l,a1
00004668 3038 F790                  		move.w	($FFFFF790).w,d0
0000466C D2C0                       		adda.w	d0,a1
0000466E 1038 F604                  		move.b	($FFFFF604).w,d0
00004672 B011                       		cmp.b	(a1),d0
00004674 6600                       		bne.s	loc_3FFA
00004676 5229 0001                  		addq.b	#1,1(a1)
0000467A 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004680 6700                       		beq.s	loc_3FFA
00004682 4E75                       		rts	
00004684                            ; ===========================================================================
00004684                            
00004684                            loc_3FFA:				; XREF: MoveDemo_Record
00004684 1340 0002                  		move.b	d0,2(a1)
00004688 137C 0000 0003             		move.b	#0,3(a1)
0000468E 5478 F790                  		addq.w	#2,($FFFFF790).w
00004692 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004698 4E75                       		rts	
0000469A                            ; ===========================================================================
0000469A                            
0000469A                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000469A 4A38 F604                  		tst.b	($FFFFF604).w
0000469E 6A00                       		bpl.s	loc_4022
000046A0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000046A4 6B00                       		bmi.s	loc_4022
000046A6 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000046AC                            
000046AC                            loc_4022:
000046AC 43F9 0000 0000             		lea	(Demo_Index).l,a1
000046B2 7000                       		moveq	#0,d0
000046B4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000046B8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000046BE 6600                       		bne.s	loc_4038
000046C0 7006                       		moveq	#6,d0
000046C2                            
000046C2                            loc_4038:
000046C2 E548                       		lsl.w	#2,d0
000046C4 2271 0000                  		movea.l	(a1,d0.w),a1
000046C8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000046CC 6A00                       		bpl.s	loc_4056
000046CE 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000046D4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000046D8 5340                       		subq.w	#1,d0
000046DA E548                       		lsl.w	#2,d0
000046DC 2271 0000                  		movea.l	(a1,d0.w),a1
000046E0                            
000046E0                            loc_4056:
000046E0 3038 F790                  		move.w	($FFFFF790).w,d0
000046E4 D2C0                       		adda.w	d0,a1
000046E6 1011                       		move.b	(a1),d0
000046E8 41F8 F604                  		lea	($FFFFF604).w,a0
000046EC 1200                       		move.b	d0,d1
000046EE 1410                       		move.b	(a0),d2
000046F0 B500                       		eor.b	d2,d0
000046F2 10C1                       		move.b	d1,(a0)+
000046F4 C001                       		and.b	d1,d0
000046F6 10C0                       		move.b	d0,(a0)+
000046F8 5338 F792                  		subq.b	#1,($FFFFF792).w
000046FC 6400                       		bcc.s	locret_407E
000046FE 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004704 5478 F790                  		addq.w	#2,($FFFFF790).w
00004708                            
00004708                            locret_407E:
00004708 4E75                       		rts	
0000470A                            ; End of function MoveSonicInDemo
0000470A                            
0000470A                            ; ===========================================================================
0000470A                            ; ---------------------------------------------------------------------------
0000470A                            ; Demo sequence	pointers
0000470A                            ; ---------------------------------------------------------------------------
0000470A                            Demo_Index:
0000470A                            	include "_inc\Demo pointers for intro.asm"
0000470A                            ; ---------------------------------------------------------------------------
0000470A                            ; Demo sequence	pointers
0000470A                            ; ---------------------------------------------------------------------------
0000470A 0000 0000                  	dc.l Demo_GHZ
0000470E 0000 0000                  	dc.l Demo_GHZ
00004712 0000 0000                  	dc.l Demo_MZ
00004716 0000 0000                  	dc.l Demo_MZ
0000471A 0000 0000                  	dc.l Demo_SYZ
0000471E 0000 0000                  	dc.l Demo_SYZ
00004722 0000 0000                  	dc.l Demo_SS
00004726 0000 0000                  	dc.l Demo_SS
00004726 0000 0000                  	dc.l Demo_SS
0000472A                            
0000472A                            Demo_EndIndex:
0000472A                            	include "_inc\Demo pointers for ending.asm"
0000472A                            ; ---------------------------------------------------------------------------
0000472A                            ; Demo (ending) sequence pointers
0000472A                            ; ---------------------------------------------------------------------------
0000472A 0000 0000                  	dc.l Demo_EndGHZ1
0000472E 0000 0000                  	dc.l Demo_EndMZ
00004732 0000 0000                  	dc.l Demo_EndSYZ
00004736 0000 0000                  	dc.l Demo_EndLZ
0000473A 0000 0000                  	dc.l Demo_EndSLZ
0000473E 0000 0000                  	dc.l Demo_EndSBZ1
00004742 0000 0000                  	dc.l Demo_EndSBZ2
00004746 0000 0000                  	dc.l Demo_EndGHZ2
00004746 0000 0000                  	dc.l Demo_EndGHZ2
0000474A                            
0000474A 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000475A 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000476A 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000477A                            		even
0000477A                            
0000477A                            ; ---------------------------------------------------------------------------
0000477A                            ; Collision index loading subroutine
0000477A                            ; ---------------------------------------------------------------------------
0000477A                            
0000477A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000477A                            
0000477A                            
0000477A                            ColIndexLoad:				; XREF: Level
0000477A 7000                       		moveq	#0,d0
0000477C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004780 E548                       		lsl.w	#2,d0
00004782 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004788 4E75                       		rts	
0000478A                            ; End of function ColIndexLoad
0000478A                            
0000478A                            ; ===========================================================================
0000478A                            ; ---------------------------------------------------------------------------
0000478A                            ; Collision index pointers
0000478A                            ; ---------------------------------------------------------------------------
0000478A                            ColPointers:
0000478A                            	include "_inc\Collision index pointers.asm"
0000478A                            ; ---------------------------------------------------------------------------
0000478A                            ; Collision index pointers
0000478A                            ; ---------------------------------------------------------------------------
0000478A 0000 0000                  	dc.l Col_GHZ
0000478E 0000 0000                  	dc.l Col_LZ
00004792 0000 0000                  	dc.l Col_MZ
00004796 0000 0000                  	dc.l Col_SLZ
0000479A 0000 0000                  	dc.l Col_SYZ
0000479E 0000 0000                  	dc.l Col_SBZ
000047A2 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
000047A6 0000 0000                  	dc.l Col_BHZ
000047A6 0000 0000                  	dc.l Col_BHZ
000047AA                            
000047AA                            ; ---------------------------------------------------------------------------
000047AA                            ; Oscillating number subroutine
000047AA                            ; ---------------------------------------------------------------------------
000047AA                            
000047AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047AA                            
000047AA                            
000047AA                            OscillateNumInit:			; XREF: Level
000047AA 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000047AE 45F9 0000 0000             		lea	(Osc_Data).l,a2
000047B4 7220                       		moveq	#$20,d1
000047B6                            
000047B6                            Osc_Loop:
000047B6 32DA                       		move.w	(a2)+,(a1)+
000047B8 51C9 FFFC                  		dbf	d1,Osc_Loop
000047BC 4E75                       		rts	
000047BE                            ; End of function OscillateNumInit
000047BE                            
000047BE                            ; ===========================================================================
000047BE 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000047C2 0000 0080                  		dc.w 0,	$80
000047C6 0000 0080                  		dc.w 0,	$80
000047CA 0000 0080                  		dc.w 0,	$80
000047CE 0000 0080                  		dc.w 0,	$80
000047D2 0000 0080                  		dc.w 0,	$80
000047D6 0000 0080                  		dc.w 0,	$80
000047DA 0000 0080                  		dc.w 0,	$80
000047DE 0000 0080                  		dc.w 0,	$80
000047E2 0000 50F0                  		dc.w 0,	$50F0
000047E6 011E 2080                  		dc.w $11E, $2080
000047EA 00B4 3080                  		dc.w $B4, $3080
000047EE 010E 5080                  		dc.w $10E, $5080
000047F2 01C2 7080                  		dc.w $1C2, $7080
000047F6 0276 0080                  		dc.w $276, $80
000047FA 0000 0080                  		dc.w 0,	$80
000047FE 0000                       		dc.w 0
00004800                            		even
00004800                            
00004800                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004800                            
00004800                            
00004800                            OscillateNumDo:				; XREF: Level
00004800 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004806 6400                       		bcc.s	locret_41C4
00004808 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000480C 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004812 3619                       		move.w	(a1)+,d3
00004814 720F                       		moveq	#$F,d1
00004816                            
00004816                            loc_4184:
00004816 341A                       		move.w	(a2)+,d2
00004818 381A                       		move.w	(a2)+,d4
0000481A 0303                       		btst	d1,d3
0000481C 6600                       		bne.s	loc_41A4
0000481E 3029 0002                  		move.w	2(a1),d0
00004822 D042                       		add.w	d2,d0
00004824 3340 0002                  		move.w	d0,2(a1)
00004828 D151                       		add.w	d0,0(a1)
0000482A B811                       		cmp.b	0(a1),d4
0000482C 6200                       		bhi.s	loc_41BA
0000482E 03C3                       		bset	d1,d3
00004830 6000                       		bra.s	loc_41BA
00004832                            ; ===========================================================================
00004832                            
00004832                            loc_41A4:				; XREF: OscillateNumDo
00004832 3029 0002                  		move.w	2(a1),d0
00004836 9042                       		sub.w	d2,d0
00004838 3340 0002                  		move.w	d0,2(a1)
0000483C D151                       		add.w	d0,0(a1)
0000483E B811                       		cmp.b	0(a1),d4
00004840 6300                       		bls.s	loc_41BA
00004842 0383                       		bclr	d1,d3
00004844                            
00004844                            loc_41BA:
00004844 5849                       		addq.w	#4,a1
00004846 51C9 FFCE                  		dbf	d1,loc_4184
0000484A 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000484E                            
0000484E                            locret_41C4:
0000484E 4E75                       		rts	
00004850                            ; End of function OscillateNumDo
00004850                            
00004850                            ; ===========================================================================
00004850 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004854 0002 0018                  		dc.w 2,	$18
00004858 0002 0020                  		dc.w 2,	$20
0000485C 0002 0030                  		dc.w 2,	$30
00004860 0004 0020                  		dc.w 4,	$20
00004864 0008 0008                  		dc.w 8,	8
00004868 0008 0040                  		dc.w 8,	$40
0000486C 0004 0040                  		dc.w 4,	$40
00004870 0002 0050                  		dc.w 2,	$50
00004874 0002 0050                  		dc.w 2,	$50
00004878 0002 0020                  		dc.w 2,	$20
0000487C 0003 0030                  		dc.w 3,	$30
00004880 0005 0050                  		dc.w 5,	$50
00004884 0007 0070                  		dc.w 7,	$70
00004888 0002 0010                  		dc.w 2,	$10
0000488C 0002 0010                  		dc.w 2,	$10
00004890                            		even
00004890                            
00004890                            ; ---------------------------------------------------------------------------
00004890                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004890                            ; ---------------------------------------------------------------------------
00004890                            
00004890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004890                            
00004890                            
00004890                            ChangeRingFrame:			; XREF: Level
00004890 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004894 6A00                       		bpl.s	loc_421C
00004896 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000489C 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000048A0 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000048A6                            
000048A6                            loc_421C:
000048A6 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000048AA 6A00                       		bpl.s	loc_4232
000048AC 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000048B2 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000048B6 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000048BC                            
000048BC                            loc_4232:
000048BC 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000048C0 6A00                       		bpl.s	loc_4250
000048C2 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000048C8 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000048CC 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000048D2 6500                       		bcs.s	loc_4250
000048D4 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000048DA                            
000048DA                            loc_4250:
000048DA 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000048DE 6700                       		beq.s	locret_4272
000048E0 7000                       		moveq	#0,d0
000048E2 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000048E6 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000048EA 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000048EE EF58                       		rol.w	#7,d0
000048F0 0240 0003                  		andi.w	#3,d0
000048F4 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000048F8 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000048FC                            
000048FC                            locret_4272:
000048FC 4E75                       		rts	
000048FE                            ; End of function ChangeRingFrame
000048FE                            
000048FE                            ; ---------------------------------------------------------------------------
000048FE                            ; End-of-act signpost pattern loading subroutine
000048FE                            ; ---------------------------------------------------------------------------
000048FE                            
000048FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048FE                            
000048FE                            
000048FE                            SignpostArtLoad:			; XREF: Level
000048FE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004902 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004906 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000490C 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000490E 3038 F700                  		move.w	($FFFFF700).w,d0
00004912 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004916 0441 0100                  		subi.w	#$100,d1
0000491A B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000491C 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000491E 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004922 6700                       		beq.s	Signpost_Exit
00004924 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004928 6700                       		beq.s	Signpost_Exit
0000492A 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000492E 7012                       		moveq	#$12,d0
00004930 6000 CEB8                  		bra.w	LoadPLC2	; load signpost	patterns
00004934                            ; ===========================================================================
00004934                            
00004934                            Signpost_Exit:
00004934 4E75                       		rts	
00004936                            ; End of function SignpostArtLoad
00004936                            
00004936                            ; ===========================================================================
00004936                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000049B6                            Demo_MZ:	incbin	demodata\i_mz.bin
00004AE6                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004B66                            Demo_SS:	incbin	demodata\i_ss.bin
00004C66                            ; ===========================================================================
00004C66                            
00004C66                            ; ---------------------------------------------------------------------------
00004C66                            ; Special Stage
00004C66                            ; ---------------------------------------------------------------------------
00004C66                            
00004C66                            SpecialStage:				; XREF: GameModeArray
00004C66 303C 00CA                  		move.w	#$CA,d0
00004C6A 6100 C968                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004C6E 6100 D510                  		bsr.w	Pal_MakeFlash
00004C72 46FC 2700                  		move	#$2700,sr
00004C76 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C7C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004C80 3CBC 8004                  		move.w	#$8004,(a6)
00004C84 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004C8A 3CBC 9011                  		move.w	#$9011,(a6)
00004C8E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C92 0200 00BF                  		andi.b	#$BF,d0
00004C96 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C9C 6100 C85E                  		bsr.w	ClearScreen
00004CA0 46FC 2300                  		move	#$2300,sr
00004CA4 4BF9 00C0 0004             		lea	($C00004).l,a5
00004CAA 3ABC 8F01                  		move.w	#$8F01,(a5)
00004CAE 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004CB4 3ABC 9780                  		move.w	#$9780,(a5)
00004CB8 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004CBE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004CC6                            
00004CC6                            loc_463C:
00004CC6 3215                       		move.w	(a5),d1
00004CC8 0801 0001                  		btst	#1,d1
00004CCC 66F8                       		bne.s	loc_463C
00004CCE 3ABC 8F02                  		move.w	#$8F02,(a5)
00004CD2 6100 0000                  		bsr.w	SS_BGLoad
00004CD6 7014                       		moveq	#$14,d0
00004CD8 6100 CC4A                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004CDC 43F8 D000                  		lea	($FFFFD000).w,a1
00004CE0 7000                       		moveq	#0,d0
00004CE2 323C 07FF                  		move.w	#$7FF,d1
00004CE6                            
00004CE6                            SS_ClrObjRam:
00004CE6 22C0                       		move.l	d0,(a1)+
00004CE8 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004CEC                            
00004CEC 43F8 F700                  		lea	($FFFFF700).w,a1
00004CF0 7000                       		moveq	#0,d0
00004CF2 323C 003F                  		move.w	#$3F,d1
00004CF6                            
00004CF6                            SS_ClrRam:
00004CF6 22C0                       		move.l	d0,(a1)+
00004CF8 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004CFC                            
00004CFC 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004D00 7000                       		moveq	#0,d0
00004D02 323C 0027                  		move.w	#$27,d1
00004D06                            
00004D06                            SS_ClrRam2:
00004D06 22C0                       		move.l	d0,(a1)+
00004D08 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004D0C                            
00004D0C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004D10 7000                       		moveq	#0,d0
00004D12 323C 007F                  		move.w	#$7F,d1
00004D16                            
00004D16                            SS_ClrNemRam:
00004D16 22C0                       		move.l	d0,(a1)+
00004D18 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004D1C                            
00004D1C 4238 F64E                  		clr.b	($FFFFF64E).w
00004D20 4278 FE02                  		clr.w	($FFFFFE02).w
00004D24 700A                       		moveq	#$A,d0
00004D26 6100 D5D8                  		bsr.w	PalLoad1	; load special stage pallet
00004D2A 4EB9 0000 0000             		jsr	SS_Load
00004D30 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004D38 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004D40 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004D46 6100 0000                  		bsr.w	PalCycle_SS
00004D4A 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004D4E 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004D52 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004D58 303C 0089                  		move.w	#$89,d0
00004D5C 6100 C870                  		bsr.w	PlaySound	; play special stage BG	music
00004D60 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004D66 43F9 0000 470A             		lea	(Demo_Index).l,a1
00004D6C 7006                       		moveq	#6,d0
00004D6E E548                       		lsl.w	#2,d0
00004D70 2271 0000                  		movea.l	(a1,d0.w),a1
00004D74 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004D7A 5338 F792                  		subq.b	#1,($FFFFF792).w
00004D7E 4278 FE20                  		clr.w	($FFFFFE20).w
00004D82 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004D86 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004D8C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004D92                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004D92                            ;		beq.s	SS_NoDebug	; if not, branch
00004D92                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004D92                            ;		beq.s	SS_NoDebug	; if not, branch
00004D92                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004D92                            
00004D92                            SS_NoDebug:
00004D92 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D96 0000 0040                  		ori.b	#$40,d0
00004D9A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004DA0 6100 D332                  		bsr.w	Pal_MakeWhite
00004DA4                            
00004DA4                            ; ---------------------------------------------------------------------------
00004DA4                            ; Main Special Stage loop
00004DA4                            ; ---------------------------------------------------------------------------
00004DA4                            
00004DA4                            SS_MainLoop:
00004DA4 6100 C83A                  		bsr.w	PauseGame
00004DA8 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004DAE 6100 DF8C                  		bsr.w	DelayProgram
00004DB2 4A78 F784                          tst.w   ($FFFFF784).w
00004DB6 6700                               beq.s   SS_NotReversed
00004DB8 5378 F784                          subi.w  #1,($FFFFF784).w
00004DBC                            
00004DBC                            SS_NotReversed:
00004DBC 6100 F89C                  		bsr.w	MoveSonicInDemo
00004DC0 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004DC6 4EB9 0000 0000             		jsr	ObjectsLoad
00004DCC 4EB9 0000 0000             		jsr	BuildSprites
00004DD2 4EB9 0000 0000             		jsr	SS_ShowLayout
00004DD8 6100 0000                  		bsr.w	SS_BGAnimate
00004DDC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DE0 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004DE2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004DE6 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004DEA                            
00004DEA                            SS_ChkEnd:
00004DEA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004DF0 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004DF4                            
00004DF4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DF8 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004DFC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004E02 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004E08 6500                       		bcs.s	SS_End		; if not, branch
00004E0A 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004E0E                            
00004E0E                            SS_End:
00004E0E 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004E14 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004E1A 4278 F794                  		clr.w	($FFFFF794).w
00004E1E                            
00004E1E                            SS_EndLoop:
00004E1E 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004E24 6100 DF16                  		bsr.w	DelayProgram
00004E28 6100 F830                  		bsr.w	MoveSonicInDemo
00004E2C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004E32 4EB9 0000 0000             		jsr	ObjectsLoad
00004E38 4EB9 0000 0000             		jsr	BuildSprites
00004E3E 4EB9 0000 0000             		jsr	SS_ShowLayout
00004E44 6100 0000                  		bsr.w	SS_BGAnimate
00004E48 5378 F794                  		subq.w	#1,($FFFFF794).w
00004E4C 6A00                       		bpl.s	loc_47D4
00004E4E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004E54 6100 D34A                  		bsr.w	Pal_ToWhite
00004E58                            
00004E58                            loc_47D4:
00004E58 4A78 F614                  		tst.w	($FFFFF614).w
00004E5C 66C0                       		bne.s	SS_EndLoop
00004E5E                            
00004E5E 46FC 2700                  		move	#$2700,sr
00004E62 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E68 3CBC 8230                  		move.w	#$8230,(a6)
00004E6C 3CBC 8407                  		move.w	#$8407,(a6)
00004E70 3CBC 9001                  		move.w	#$9001,(a6)
00004E74 6100 C686                  		bsr.w	ClearScreen
00004E78 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004E82 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004E88 6100 C7EE                  		bsr.w	NemDec
00004E8C 4EB9 0000 0000             		jsr	Hud_Base
00004E92 46FC 2300                  		move	#$2300,sr
00004E96 7011                       		moveq	#$11,d0
00004E98 6100 D482                  		bsr.w	PalLoad2	; load results screen pallet
00004E9C 7000                       		moveq	#0,d0
00004E9E 6100 C94A                  		bsr.w	LoadPLC2
00004EA2 701B                       		moveq	#$1B,d0
00004EA4 6100 C912                  		bsr.w	LoadPLC		; load results screen patterns
00004EA8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004EAE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004EB4 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004EB8 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004EBC 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004EC0 303C 008E                  		move.w	#$8E,d0
00004EC4 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004ECA 43F8 D000                  		lea	($FFFFD000).w,a1
00004ECE 7000                       		moveq	#0,d0
00004ED0 323C 07FF                  		move.w	#$7FF,d1
00004ED4                            
00004ED4                            SS_EndClrObjRam:
00004ED4 22C0                       		move.l	d0,(a1)+
00004ED6 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004EDA                            
00004EDA 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004EE0                            
00004EE0                            SS_NormalExit:
00004EE0 6100 C6FE                  		bsr.w	PauseGame
00004EE4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004EEA 6100 DE50                  		bsr.w	DelayProgram
00004EEE 4EB9 0000 0000             		jsr	ObjectsLoad
00004EF4 4EB9 0000 0000             		jsr	BuildSprites
00004EFA 6100 C928                  		bsr.w	RunPLC_RAM
00004EFE 4A78 FE02                  		tst.w	($FFFFFE02).w
00004F02 67DC                       		beq.s	SS_NormalExit
00004F04 4AB8 F680                  		tst.l	($FFFFF680).w
00004F08 66D6                       		bne.s	SS_NormalExit
00004F0A 303C 00CA                  		move.w	#$CA,d0
00004F0E 6100 C6C4                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004F12 6100 D26C                  		bsr.w	Pal_MakeFlash
00004F16 4E75                       		rts	
00004F18                            ; ===========================================================================
00004F18                            
00004F18                            SS_ToSegaScreen:
00004F18 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004F1E 4E75                       		rts
00004F20                            
00004F20                            ; ---------------------------------------------------------------------------
00004F20                            ; Special stage	background loading subroutine
00004F20                            ; ---------------------------------------------------------------------------
00004F20                            
00004F20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F20                            
00004F20                            
00004F20                            SS_BGLoad:				; XREF: SpecialStage
00004F20 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F26 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004F2C 303C 4051                  		move.w	#$4051,d0
00004F30 6100 CA24                  		bsr.w	EniDec
00004F34 263C 5000 0001             		move.l	#$50000001,d3
00004F3A 45F9 00FF 0080             		lea	($FF0080).l,a2
00004F40 7E06                       		moveq	#6,d7
00004F42                            
00004F42                            loc_48BE:
00004F42 2003                       		move.l	d3,d0
00004F44 7C03                       		moveq	#3,d6
00004F46 7800                       		moveq	#0,d4
00004F48 0C47 0003                  		cmpi.w	#3,d7
00004F4C 6400                       		bcc.s	loc_48CC
00004F4E 7801                       		moveq	#1,d4
00004F50                            
00004F50                            loc_48CC:
00004F50 7A07                       		moveq	#7,d5
00004F52                            
00004F52                            loc_48CE:
00004F52 224A                       		movea.l	a2,a1
00004F54 0A04 0001                  		eori.b	#1,d4
00004F58 6600                       		bne.s	loc_48E2
00004F5A 0C47 0006                  		cmpi.w	#6,d7
00004F5E 6600                       		bne.s	loc_48F2
00004F60 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F66                            
00004F66                            loc_48E2:
00004F66 48E7 F800                  		movem.l	d0-d4,-(sp)
00004F6A 7207                       		moveq	#7,d1
00004F6C 7407                       		moveq	#7,d2
00004F6E 6100 C6E8                  		bsr.w	ShowVDPGraphics
00004F72 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004F76                            
00004F76                            loc_48F2:
00004F76 0680 0010 0000             		addi.l	#$100000,d0
00004F7C 51CD FFD4                  		dbf	d5,loc_48CE
00004F80 0680 0380 0000             		addi.l	#$3800000,d0
00004F86 0A04 0001                  		eori.b	#1,d4
00004F8A 51CE FFC4                  		dbf	d6,loc_48CC
00004F8E 0683 1000 0000             		addi.l	#$10000000,d3
00004F94 6A00                       		bpl.s	loc_491C
00004F96 4843                       		swap	d3
00004F98 0683 0000 C000             		addi.l	#$C000,d3
00004F9E 4843                       		swap	d3
00004FA0                            
00004FA0                            loc_491C:
00004FA0 D4FC 0080                  		adda.w	#$80,a2
00004FA4 51CF FF9C                  		dbf	d7,loc_48BE
00004FA8 43F9 00FF 0000             		lea	($FF0000).l,a1
00004FAE 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004FB4 303C 4000                  		move.w	#$4000,d0
00004FB8 6100 C99C                  		bsr.w	EniDec
00004FBC 43F9 00FF 0000             		lea	($FF0000).l,a1
00004FC2 203C 4000 0003             		move.l	#$40000003,d0
00004FC8 723F                       		moveq	#$3F,d1
00004FCA 741F                       		moveq	#$1F,d2
00004FCC 6100 C68A                  		bsr.w	ShowVDPGraphics
00004FD0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004FD6 203C 5000 0003             		move.l	#$50000003,d0
00004FDC 723F                       		moveq	#$3F,d1
00004FDE 743F                       		moveq	#$3F,d2
00004FE0 6100 C676                  		bsr.w	ShowVDPGraphics
00004FE4 4E75                       		rts	
00004FE6                            ; End of function SS_BGLoad
00004FE6                            
00004FE6                            ; ---------------------------------------------------------------------------
00004FE6                            ; Pallet cycling routine - special stage
00004FE6                            ; ---------------------------------------------------------------------------
00004FE6                            
00004FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FE6                            
00004FE6                            
00004FE6                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004FE6 4A78 F63A                  		tst.w	($FFFFF63A).w
00004FEA 6600                       		bne.s	locret_49E6
00004FEC 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004FF0 6A00                       		bpl.s	locret_49E6
00004FF2 4DF9 00C0 0004             		lea	($C00004).l,a6
00004FF8 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004FFC 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00005000 0240 001F                  		andi.w	#$1F,d0
00005004 E548                       		lsl.w	#2,d0
00005006 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000500C D0C0                       		adda.w	d0,a0
0000500E 1018                       		move.b	(a0)+,d0
00005010 6A00                       		bpl.s	loc_4992
00005012 303C 01FF                  		move.w	#$1FF,d0
00005016                            
00005016                            loc_4992:
00005016 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000501A 7000                       		moveq	#0,d0
0000501C 1018                       		move.b	(a0)+,d0
0000501E 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005022 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005028 43F1 0000                  		lea	(a1,d0.w),a1
0000502C 303C 8200                  		move.w	#-$7E00,d0
00005030 1019                       		move.b	(a1)+,d0
00005032 3C80                       		move.w	d0,(a6)
00005034 11D1 F616                  		move.b	(a1),($FFFFF616).w
00005038 303C 8400                  		move.w	#-$7C00,d0
0000503C 1018                       		move.b	(a0)+,d0
0000503E 3C80                       		move.w	d0,(a6)
00005040 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000504A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005052 7000                       		moveq	#0,d0
00005054 1018                       		move.b	(a0)+,d0
00005056 6B00                       		bmi.s	loc_49E8
00005058 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000505E D2C0                       		adda.w	d0,a1
00005060 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005064 24D9                       		move.l	(a1)+,(a2)+
00005066 24D9                       		move.l	(a1)+,(a2)+
00005068 24D9                       		move.l	(a1)+,(a2)+
0000506A                            
0000506A                            locret_49E6:
0000506A 4E75                       		rts	
0000506C                            ; ===========================================================================
0000506C                            
0000506C                            loc_49E8:				; XREF: PalCycle_SS
0000506C 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005070 0C40 008A                  		cmpi.w	#$8A,d0
00005074 6500                       		bcs.s	loc_49F4
00005076 5241                       		addq.w	#1,d1
00005078                            
00005078                            loc_49F4:
00005078 C2FC 002A                  		mulu.w	#$2A,d1
0000507C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005082 D2C1                       		adda.w	d1,a1
00005084 0240 007F                  		andi.w	#$7F,d0
00005088 0880 0000                  		bclr	#0,d0
0000508C 6700                       		beq.s	loc_4A18
0000508E 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00005092 24D1                       		move.l	(a1),(a2)+
00005094 24E9 0004                  		move.l	4(a1),(a2)+
00005098 24E9 0008                  		move.l	8(a1),(a2)+
0000509C                            
0000509C                            loc_4A18:
0000509C D2FC 000C                  		adda.w	#$C,a1
000050A0 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
000050A4 0C40 000A                  		cmpi.w	#$A,d0
000050A8 6500                       		bcs.s	loc_4A2E
000050AA 0440 000A                  		subi.w	#$A,d0
000050AE 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
000050B2                            
000050B2                            loc_4A2E:
000050B2 3200                       		move.w	d0,d1
000050B4 D040                       		add.w	d0,d0
000050B6 D041                       		add.w	d1,d0
000050B8 D2C0                       		adda.w	d0,a1
000050BA 24D9                       		move.l	(a1)+,(a2)+
000050BC 34D9                       		move.w	(a1)+,(a2)+
000050BE 4E75                       		rts	
000050C0                            ; End of function PalCycle_SS
000050C0                            
000050C0                            ; ===========================================================================
000050C0 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
000050D0                            					; XREF: PalCycle_SS
000050D0 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000050E0 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000050F0 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005100 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005110 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005120 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005130 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005140                            		even
00005140 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000514E                            					; XREF: PalCycle_SS
0000514E                            		even
0000514E                            
0000514E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005196                            		even
00005196                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005268                            		even
00005268                            
00005268                            ; ---------------------------------------------------------------------------
00005268                            ; Subroutine to	make the special stage background animated
00005268                            ; ---------------------------------------------------------------------------
00005268                            
00005268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005268                            
00005268                            
00005268                            SS_BGAnimate:				; XREF: SpecialStage
00005268 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000526C 6600                       		bne.s	loc_4BF6
0000526E 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005274 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000527A                            
0000527A                            loc_4BF6:
0000527A 0C40 0008                  		cmpi.w	#8,d0
0000527E 6400                       		bcc.s	loc_4C4E
00005280 0C40 0006                  		cmpi.w	#6,d0
00005284 6600                       		bne.s	loc_4C10
00005286 5278 F718                  		addq.w	#1,($FFFFF718).w
0000528A 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000528E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005294                            
00005294                            loc_4C10:
00005294 7000                       		moveq	#0,d0
00005296 3038 F708                  		move.w	($FFFFF708).w,d0
0000529A 4440                       		neg.w	d0
0000529C 4840                       		swap	d0
0000529E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000052A4 47F8 AA00                  		lea	($FFFFAA00).w,a3
000052A8 7609                       		moveq	#9,d3
000052AA                            
000052AA                            loc_4C26:
000052AA 302B 0002                  		move.w	2(a3),d0
000052AE 6100 DABE                  		bsr.w	CalcSine
000052B2 7400                       		moveq	#0,d2
000052B4 1419                       		move.b	(a1)+,d2
000052B6 C1C2                       		muls.w	d2,d0
000052B8 E080                       		asr.l	#8,d0
000052BA 36C0                       		move.w	d0,(a3)+
000052BC 1419                       		move.b	(a1)+,d2
000052BE 4882                       		ext.w	d2
000052C0 D55B                       		add.w	d2,(a3)+
000052C2 51CB FFE6                  		dbf	d3,loc_4C26
000052C6 47F8 AA00                  		lea	($FFFFAA00).w,a3
000052CA 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000052D0 6000                       		bra.s	loc_4C7E
000052D2                            ; ===========================================================================
000052D2                            
000052D2                            loc_4C4E:				; XREF: SS_BGAnimate
000052D2 0C40 000C                  		cmpi.w	#$C,d0
000052D6 6600                       		bne.s	loc_4C74
000052D8 5378 F718                  		subq.w	#1,($FFFFF718).w
000052DC 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052E0 243C 0001 8000             		move.l	#$18000,d2
000052E6 7206                       		moveq	#6,d1
000052E8                            
000052E8                            loc_4C64:
000052E8 2013                       		move.l	(a3),d0
000052EA 9082                       		sub.l	d2,d0
000052EC 26C0                       		move.l	d0,(a3)+
000052EE 0482 0000 2000             		subi.l	#$2000,d2
000052F4 51C9 FFF2                  		dbf	d1,loc_4C64
000052F8                            
000052F8                            loc_4C74:
000052F8 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052FC 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005302                            
00005302                            loc_4C7E:
00005302 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005306 3038 F718                  		move.w	($FFFFF718).w,d0
0000530A 4440                       		neg.w	d0
0000530C 4840                       		swap	d0
0000530E 7600                       		moveq	#0,d3
00005310 161A                       		move.b	(a2)+,d3
00005312 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005316 4442                       		neg.w	d2
00005318 0242 00FF                  		andi.w	#$FF,d2
0000531C E54A                       		lsl.w	#2,d2
0000531E                            
0000531E                            loc_4C9A:
0000531E 301B                       		move.w	(a3)+,d0
00005320 544B                       		addq.w	#2,a3
00005322 7200                       		moveq	#0,d1
00005324 121A                       		move.b	(a2)+,d1
00005326 5341                       		subq.w	#1,d1
00005328                            
00005328                            loc_4CA4:
00005328 2380 2000                  		move.l	d0,(a1,d2.w)
0000532C 5842                       		addq.w	#4,d2
0000532E 0242 03FC                  		andi.w	#$3FC,d2
00005332 51C9 FFF4                  		dbf	d1,loc_4CA4
00005336 51CB FFE6                  		dbf	d3,loc_4C9A
0000533A 4E75                       		rts	
0000533C                            ; End of function SS_BGAnimate
0000533C                            
0000533C                            ; ===========================================================================
0000533C 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005348                            		even
00005348 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005350                            		even
00005350 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005364                            		even
00005364                            					; XREF: SS_BGAnimate
00005364                            ; ===========================================================================
00005364                            
00005364                            ; ---------------------------------------------------------------------------
00005364                            ; Continue screen
00005364                            ; ---------------------------------------------------------------------------
00005364                            
00005364                            ContinueScreen:				; XREF: GameModeArray
00005364 6100 CCF0                  		bsr.w	Pal_FadeFrom
00005368 46FC 2700                  		move	#$2700,sr
0000536C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005370 0200 00BF                  		andi.b	#$BF,d0
00005374 33C0 00C0 0004             		move.w	d0,($C00004).l
0000537A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005380 3CBC 8004                  		move.w	#$8004,(a6)
00005384 3CBC 8700                  		move.w	#$8700,(a6)
00005388 6100 C172                  		bsr.w	ClearScreen
0000538C 43F8 D000                  		lea	($FFFFD000).w,a1
00005390 7000                       		moveq	#0,d0
00005392 323C 07FF                  		move.w	#$7FF,d1
00005396                            
00005396                            Cont_ClrObjRam:
00005396 22C0                       		move.l	d0,(a1)+
00005398 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000539C                            
0000539C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000053A6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000053AC 6100 C2CA                  		bsr.w	NemDec
000053B0 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000053BA 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000053C0 6100 C2B6                  		bsr.w	NemDec
000053C4 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000053CE 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000053D4 6100 C2A2                  		bsr.w	NemDec
000053D8 720A                       		moveq	#10,d1
000053DA 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000053E0 7012                       		moveq	#$12,d0
000053E2 6100 CF1C                  		bsr.w	PalLoad1	; load continue	screen pallet
000053E6 103C 0090                  		move.b	#$90,d0
000053EA 6100 C1E2                  		bsr.w	PlaySound	; play continue	music
000053EE 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000053F4 42B8 F700                  		clr.l	($FFFFF700).w
000053F8 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005400 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005406 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
0000540C 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005412 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005418 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
0000541E 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005424 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
0000542A 4EB9 0000 0000             		jsr	ObjectsLoad
00005430 4EB9 0000 0000             		jsr	BuildSprites
00005436 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000543A 0000 0040                  		ori.b	#$40,d0
0000543E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005444 6100 CB66                  		bsr.w	Pal_FadeTo
00005448                            
00005448                            ; ---------------------------------------------------------------------------
00005448                            ; Continue screen main loop
00005448                            ; ---------------------------------------------------------------------------
00005448                            
00005448                            Cont_MainLoop:
00005448 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000544E 6100 D8EC                  		bsr.w	DelayProgram
00005452 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005458 6400                       		bcc.s	loc_4DF2
0000545A 46FC 2700                  		move	#$2700,sr
0000545E 3238 F614                  		move.w	($FFFFF614).w,d1
00005462 82FC 003C                  		divu.w	#$3C,d1
00005466 0281 0000 000F             		andi.l	#$F,d1
0000546C 4EB9 0000 0000             		jsr	ContScrCounter
00005472 46FC 2300                  		move	#$2300,sr
00005476                            
00005476                            loc_4DF2:
00005476 4EB9 0000 0000             		jsr	ObjectsLoad
0000547C 4EB9 0000 0000             		jsr	BuildSprites
00005482 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005488 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000548A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005490 64B6                       		bcc.s	Cont_MainLoop
00005492 4A78 F614                  		tst.w	($FFFFF614).w
00005496 6600 FFB0                  		bne.w	Cont_MainLoop
0000549A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000054A0 4E75                       		rts	
000054A2                            ; ===========================================================================
000054A2                            
000054A2                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000054A2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000054A8 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000054AE 7000                       		moveq	#0,d0
000054B0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000054B4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000054B8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000054BC 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000054C0 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000054C4 4E75                       		rts	
000054C6                            ; ===========================================================================
000054C6                            
000054C6                            ; ---------------------------------------------------------------------------
000054C6                            ; Object 80 - Continue screen elements
000054C6                            ; ---------------------------------------------------------------------------
000054C6                            
000054C6                            Obj80:					; XREF: Obj_Index
000054C6 7000                       		moveq	#0,d0
000054C8 1028 0024                  		move.b	$24(a0),d0
000054CC 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000054D0 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000054D4                            ; ===========================================================================
000054D4 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000054D6 0000                       		dc.w Obj80_Display-Obj80_Index
000054D8 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000054DA 0000                       		dc.w Obj80_ChkType-Obj80_Index
000054DC                            ; ===========================================================================
000054DC                            
000054DC                            Obj80_Main:				; XREF: Obj80_Index
000054DC 5428 0024                  		addq.b	#2,$24(a0)
000054E0 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054E8 317C 8500 0002             		move.w	#$8500,2(a0)
000054EE 117C 0000 0001             		move.b	#0,1(a0)
000054F4 117C 003C 0019             		move.b	#$3C,$19(a0)
000054FA 317C 0120 0008             		move.w	#$120,8(a0)
00005500 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005506 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
0000550C                            
0000550C                            Obj80_Display:				; XREF: Obj80_Index
0000550C 4EF9 0000 0000             		jmp	DisplaySprite
00005512                            ; ===========================================================================
00005512                            Obj80_MiniSonicPos:
00005512 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005524 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005530                            ; ===========================================================================
00005530                            
00005530                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005530 2248                       		movea.l	a0,a1
00005532 45F9 0000 5512             		lea	(Obj80_MiniSonicPos).l,a2
00005538 7200                       		moveq	#0,d1
0000553A 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000553E 5501                       		subq.b	#2,d1
00005540 6400                       		bcc.s	loc_4EC4
00005542 4EF9 0000 0000             		jmp	DeleteObject
00005548                            ; ===========================================================================
00005548                            
00005548                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005548 7601                       		moveq	#1,d3
0000554A 0C01 000E                  		cmpi.b	#$E,d1
0000554E 6500                       		bcs.s	loc_4ED0
00005550 7600                       		moveq	#0,d3
00005552 720E                       		moveq	#$E,d1
00005554                            
00005554                            loc_4ED0:
00005554 1401                       		move.b	d1,d2
00005556 0202 0001                  		andi.b	#1,d2
0000555A                            
0000555A                            Obj80_MiniSonLoop:
0000555A 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000555E 335A 0008                  		move.w	(a2)+,8(a1)
00005562 4A02                       		tst.b	d2
00005564 6700                       		beq.s	loc_4EEA
00005566 0469 000A 0008             		subi.w	#$A,8(a1)
0000556C                            
0000556C                            loc_4EEA:
0000556C 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005572 137C 0006 001A             		move.b	#6,$1A(a1)
00005578 137C 0006 0024             		move.b	#6,$24(a1)
0000557E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005586 337C 8551 0002             		move.w	#$8551,2(a1)
0000558C 137C 0000 0001             		move.b	#0,1(a1)
00005592 43E9 0040                  		lea	$40(a1),a1
00005596 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000559A 43E9 FFC0                  		lea	-$40(a1),a1
0000559E 1343 0028                  		move.b	d3,$28(a1)
000055A2                            
000055A2                            Obj80_ChkType:				; XREF: Obj80_Index
000055A2 4A28 0028                  		tst.b	$28(a0)
000055A6 6700                       		beq.s	loc_4F40
000055A8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000055AE 6500                       		bcs.s	loc_4F40
000055B0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000055B4 0200 0001                  		andi.b	#1,d0
000055B8 6600                       		bne.s	loc_4F40
000055BA 4A78 D010                  		tst.w	($FFFFD010).w
000055BE 6600                       		bne.s	Obj80_Delete
000055C0 4E75                       		rts	
000055C2                            ; ===========================================================================
000055C2                            
000055C2                            loc_4F40:				; XREF: Obj80_ChkType
000055C2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000055C6 0200 000F                  		andi.b	#$F,d0
000055CA 6600                       		bne.s	Obj80_Display2
000055CC 0868 0000 001A             		bchg	#0,$1A(a0)
000055D2                            
000055D2                            Obj80_Display2:
000055D2 4EF9 0000 0000             		jmp	DisplaySprite
000055D8                            ; ===========================================================================
000055D8                            
000055D8                            Obj80_Delete:				; XREF: Obj80_ChkType
000055D8 4EF9 0000 0000             		jmp	DeleteObject
000055DE                            ; ===========================================================================
000055DE                            
000055DE                            ; ---------------------------------------------------------------------------
000055DE                            ; Object 81 - Sonic on the continue screen
000055DE                            ; ---------------------------------------------------------------------------
000055DE                            
000055DE                            Obj81:					; XREF: Obj_Index
000055DE 7000                       		moveq	#0,d0
000055E0 1028 0024                  		move.b	$24(a0),d0
000055E4 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000055E8 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000055EC 4EF9 0000 0000             		jmp	DisplaySprite
000055F2                            ; ===========================================================================
000055F2 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000055F4 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000055F6 0000                       		dc.w Obj81_Animate-Obj81_Index
000055F8 0000                       		dc.w Obj81_Run-Obj81_Index
000055FA                            ; ===========================================================================
000055FA                            
000055FA                            Obj81_Main:				; XREF: Obj81_Index
000055FA 5428 0024                  		addq.b	#2,$24(a0)
000055FE 317C 00A0 0008             		move.w	#$A0,8(a0)
00005604 317C 00C0 000C             		move.w	#$C0,$C(a0)
0000560A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005612 317C 0780 0002             		move.w	#$780,2(a0)
00005618 117C 0004 0001             		move.b	#4,1(a0)
0000561E 117C 0002 0018             		move.b	#2,$18(a0)
00005624 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
0000562A 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005630                            
00005630                            Obj81_ChkLand:				; XREF: Obj81_Index
00005630 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005636 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005638 5428 0024                  		addq.b	#2,$24(a0)
0000563C 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005640 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005648 317C 8500 0002             		move.w	#$8500,2(a0)
0000564E 117C 0000 001C             		move.b	#0,$1C(a0)
00005654 6000                       		bra.s	Obj81_Animate
00005656                            ; ===========================================================================
00005656                            
00005656                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005656 4EB9 0000 0000             		jsr	SpeedToPos
0000565C 4EB9 0000 0000             		jsr	Sonic_Animate
00005662 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005668                            ; ===========================================================================
00005668                            
00005668                            Obj81_Animate:				; XREF: Obj81_Index
00005668 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000566C 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000566E 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005674 4EF9 0000 0000             		jmp	AnimateSprite
0000567A                            ; ===========================================================================
0000567A                            
0000567A                            Obj81_GetUp:				; XREF: Obj81_Animate
0000567A 5428 0024                  		addq.b	#2,$24(a0)
0000567E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005686 317C 0780 0002             		move.w	#$780,2(a0)
0000568C 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005692 4268 0014                  		clr.w	$14(a0)
00005696 5168 000C                  		subq.w	#8,$C(a0)
0000569A 103C 00E0                  		move.b	#$E0,d0
0000569E 6100 BF34                  		bsr.w	PlaySound_Special ; fade out music
000056A2                            
000056A2                            Obj81_Run:				; XREF: Obj81_Index
000056A2 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000056A8 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000056AA 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000056B0 6000                       		bra.s	Obj81_ShowRun
000056B2                            ; ===========================================================================
000056B2                            
000056B2                            Obj81_AddSpeed:				; XREF: Obj81_Run
000056B2 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000056B8                            
000056B8                            Obj81_ShowRun:				; XREF: Obj81_Run
000056B8 4EB9 0000 0000             		jsr	SpeedToPos
000056BE 4EB9 0000 0000             		jsr	Sonic_Animate
000056C4 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000056CA                            ; ===========================================================================
000056CA                            Ani_obj81:
000056CA                            	include "_anim\obj81.asm"
000056CA                            ; ---------------------------------------------------------------------------
000056CA                            ; Animation script - Sonic on the continue screen
000056CA                            ; ---------------------------------------------------------------------------
000056CA 0000                       		dc.w byte_504A-Ani_obj81
000056CC 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000056D8 00                         		even
000056D8 00                         		even
000056D8                            
000056D8                            ; ---------------------------------------------------------------------------
000056D8                            ; Sprite mappings - Continue screen
000056D8                            ; ---------------------------------------------------------------------------
000056D8                            Map_obj80:
000056D8                            	include "_maps\obj80.asm"
000056D8                            ; ---------------------------------------------------------------------------
000056D8                            ; Sprite mappings - Continue screen
000056D8                            ; ---------------------------------------------------------------------------
000056D8 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000056DC 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000056E0 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000056E4 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000056E8 0B                         byte_5066:	dc.b $B
000056E9 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000056EE F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000056F3 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000056F8 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000056FD F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005702 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005707 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000570C F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005711 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005716 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000571B 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005720 03                         byte_509E:	dc.b 3
00005721 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005726 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000572B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005730 03                         byte_50AE:	dc.b 3
00005731 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005736 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000573B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005740 03                         byte_50BE:	dc.b 3
00005741 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005746 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000574B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005750 02                         byte_50CE:	dc.b 2
00005751 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005756 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000575B 01                         byte_50D9:	dc.b 1
0000575C 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005761 01                         byte_50DF:	dc.b 1
00005762 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005768 00                         		even
00005768 00                         		even
00005768                            
00005768                            ; ===========================================================================
00005768                            ; ---------------------------------------------------------------------------
00005768                            ; Ending sequence in Green Hill	Zone
00005768                            ; ---------------------------------------------------------------------------
00005768                            
00005768                            EndingSequence:				; XREF: GameModeArray
00005768 103C 00E4                  		move.b	#$E4,d0
0000576C 6100 BE66                  		bsr.w	PlaySound_Special ; stop music
00005770 6100 C8E4                  		bsr.w	Pal_FadeFrom
00005774 43F8 D000                  		lea	($FFFFD000).w,a1
00005778 7000                       		moveq	#0,d0
0000577A 323C 07FF                  		move.w	#$7FF,d1
0000577E                            
0000577E                            End_ClrObjRam:
0000577E 22C0                       		move.l	d0,(a1)+
00005780 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005784                            
00005784 43F8 F628                  		lea	($FFFFF628).w,a1
00005788 7000                       		moveq	#0,d0
0000578A 323C 0015                  		move.w	#$15,d1
0000578E                            
0000578E                            End_ClrRam:
0000578E 22C0                       		move.l	d0,(a1)+
00005790 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005794                            
00005794 43F8 F700                  		lea	($FFFFF700).w,a1
00005798 7000                       		moveq	#0,d0
0000579A 323C 003F                  		move.w	#$3F,d1
0000579E                            
0000579E                            End_ClrRam2:
0000579E 22C0                       		move.l	d0,(a1)+
000057A0 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000057A4                            
000057A4 43F8 FE60                  		lea	($FFFFFE60).w,a1
000057A8 7000                       		moveq	#0,d0
000057AA 323C 0047                  		move.w	#$47,d1
000057AE                            
000057AE                            End_ClrRam3:
000057AE 22C0                       		move.l	d0,(a1)+
000057B0 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000057B4                            
000057B4 46FC 2700                  		move	#$2700,sr
000057B8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000057BC 0200 00BF                  		andi.b	#$BF,d0
000057C0 33C0 00C0 0004             		move.w	d0,($C00004).l
000057C6 6100 BD34                  		bsr.w	ClearScreen
000057CA 4DF9 00C0 0004             		lea	($C00004).l,a6
000057D0 3CBC 8B03                  		move.w	#$8B03,(a6)
000057D4 3CBC 8230                  		move.w	#$8230,(a6)
000057D8 3CBC 8407                  		move.w	#$8407,(a6)
000057DC 3CBC 857C                  		move.w	#$857C,(a6)
000057E0 3CBC 9001                  		move.w	#$9001,(a6)
000057E4 3CBC 8004                  		move.w	#$8004,(a6)
000057E8 3CBC 8720                  		move.w	#$8720,(a6)
000057EC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000057F2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000057F6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000057FC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005802 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005808 6700                       		beq.s	End_LoadData	; if yes, branch
0000580A 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005810                            
00005810                            End_LoadData:
00005810 701C                       		moveq	#$1C,d0
00005812 6100 C110                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005816 4EB9 0000 0000             		jsr	Hud_Base
0000581C 6100 0000                  		bsr.w	LevelSizeLoad
00005820 6100 0000                  		bsr.w	DeformBgLayer
00005824 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000582A 6100 0000                  		bsr.w	MainLoadBlockLoad
0000582E 6100 0000                  		bsr.w	LoadTilesFromStart
00005832 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000583A 46FC 2300                  		move	#$2300,sr
0000583E 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005844 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005848 6100 C28A                  		bsr.w	KosDec
0000584C 7003                       		moveq	#3,d0
0000584E 6100 CAB0                  		bsr.w	PalLoad1	; load Sonic's pallet
00005852 303C 008B                  		move.w	#$8B,d0
00005856 6100 BD76                  		bsr.w	PlaySound	; play ending sequence music
0000585A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005860 6700                       		beq.s	End_LoadSonic	; if not, branch
00005862 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005868                            
00005868                            End_LoadSonic:
00005868 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000586E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005874 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000587A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005880 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005886 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000588C 4EB9 0000 0000             		jsr	ObjPosLoad
00005892 4EB9 0000 0000             		jsr	ObjectsLoad
00005898 4EB9 0000 0000             		jsr	BuildSprites
0000589E 7000                       		moveq	#0,d0
000058A0 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000058A4 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000058A8 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000058AC 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000058B0 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000058B4 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000058B8 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000058BC 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000058C0 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000058C4 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000058C8 6100 EEE0                  		bsr.w	OscillateNumInit
000058CC 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000058D2 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000058D8 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000058DE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000058E4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058EA 6100 D450                  		bsr.w	DelayProgram
000058EE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000058F2 0000 0040                  		ori.b	#$40,d0
000058F6 33C0 00C0 0004             		move.w	d0,($C00004).l
000058FC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005902 6100 C6A8                  		bsr.w	Pal_FadeTo
00005906                            
00005906                            ; ---------------------------------------------------------------------------
00005906                            ; Main ending sequence loop
00005906                            ; ---------------------------------------------------------------------------
00005906                            
00005906                            End_MainLoop:
00005906 6100 BCD8                  		bsr.w	PauseGame
0000590A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005910 6100 D42A                  		bsr.w	DelayProgram
00005914 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005918 6100 0000                  		bsr.w	End_MoveSonic
0000591C 4EB9 0000 0000             		jsr	ObjectsLoad
00005922 6100 0000                  		bsr.w	DeformBgLayer
00005926 4EB9 0000 0000             		jsr	BuildSprites
0000592C 4EB9 0000 0000             		jsr	ObjPosLoad
00005932 6100 C240                  		bsr.w	PalCycle_Load
00005936 6100 EEC8                  		bsr.w	OscillateNumDo
0000593A 6100 EF54                  		bsr.w	ChangeRingFrame
0000593E 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005944 6700                       		beq.s	loc_52DA	; if yes, branch
00005946 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000594C 103C 0091                  		move.b	#$91,d0
00005950 6100 BC82                  		bsr.w	PlaySound_Special ; play credits music
00005954 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000595A 4E75                       		rts	
0000595C                            ; ===========================================================================
0000595C                            
0000595C                            loc_52DA:
0000595C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005960 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005964                            
00005964 4278 FE02                  		clr.w	($FFFFFE02).w
00005968 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000596E 4278 F794                  		clr.w	($FFFFF794).w
00005972                            
00005972                            End_AllEmlds:				; XREF: loc_5334
00005972 6100 BC6C                  		bsr.w	PauseGame
00005976 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000597C 6100 D3BE                  		bsr.w	DelayProgram
00005980 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005984 6100 0000                  		bsr.w	End_MoveSonic
00005988 4EB9 0000 0000             		jsr	ObjectsLoad
0000598E 6100 0000                  		bsr.w	DeformBgLayer
00005992 4EB9 0000 0000             		jsr	BuildSprites
00005998 4EB9 0000 0000             		jsr	ObjPosLoad
0000599E 6100 EE60                  		bsr.w	OscillateNumDo
000059A2 6100 EEEC                  		bsr.w	ChangeRingFrame
000059A6 5378 F794                  		subq.w	#1,($FFFFF794).w
000059AA 6A00                       		bpl.s	loc_5334
000059AC 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000059B2 6100 C7EC                  		bsr.w	Pal_ToWhite
000059B6                            
000059B6                            loc_5334:
000059B6 4A78 FE02                  		tst.w	($FFFFFE02).w
000059BA 6700 FFB6                  		beq.w	End_AllEmlds
000059BE 4278 FE02                  		clr.w	($FFFFFE02).w
000059C2 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000059C8 4BF9 00C0 0004             		lea	($C00004).l,a5
000059CE 4DF9 00C0 0000             		lea	($C00000).l,a6
000059D4 47F8 F700                  		lea	($FFFFF700).w,a3
000059D8 49F8 A400                  		lea	($FFFFA400).w,a4
000059DC 343C 4000                  		move.w	#$4000,d2
000059E0 6100 0000                  		bsr.w	LoadTilesFromStart2
000059E4 7013                       		moveq	#$13,d0
000059E6 6100 C918                  		bsr.w	PalLoad1	; load ending pallet
000059EA 6100 C6E8                  		bsr.w	Pal_MakeWhite
000059EE 6000 FF16                  		bra.w	End_MainLoop
000059F2                            
000059F2                            ; ---------------------------------------------------------------------------
000059F2                            ; Subroutine controlling Sonic on the ending sequence
000059F2                            ; ---------------------------------------------------------------------------
000059F2                            
000059F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059F2                            
000059F2                            
000059F2                            End_MoveSonic:				; XREF: End_MainLoop
000059F2 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000059F6 6600                       		bne.s	End_MoveSonic2
000059F8 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000059FE 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005A00 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A04 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005A0A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005A10 4E75                       		rts	
00005A12                            ; ===========================================================================
00005A12                            
00005A12                            End_MoveSonic2:				; XREF: End_MoveSonic
00005A12 5500                       		subq.b	#2,d0
00005A14 6600                       		bne.s	End_MoveSonic3
00005A16 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005A1C 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005A1E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A22 7000                       		moveq	#0,d0
00005A24 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005A28 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005A2C 31C0 D014                  		move.w	d0,($FFFFD014).w
00005A30 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005A36 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005A3C 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005A42 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005A48 4E75                       		rts	
00005A4A                            ; ===========================================================================
00005A4A                            
00005A4A                            End_MoveSonic3:				; XREF: End_MoveSonic
00005A4A 5500                       		subq.b	#2,d0
00005A4C 6600                       		bne.s	End_MoveSonExit
00005A4E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A52 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005A58 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005A5E 4278 D024                  		clr.w	($FFFFD024).w
00005A62                            
00005A62                            End_MoveSonExit:
00005A62 4E75                       		rts	
00005A64                            ; End of function End_MoveSonic
00005A64                            
00005A64                            ; ===========================================================================
00005A64                            ; ---------------------------------------------------------------------------
00005A64                            ; Object 87 - Sonic on ending sequence
00005A64                            ; ---------------------------------------------------------------------------
00005A64                            
00005A64                            Obj87:					; XREF: Obj_Index
00005A64 7000                       		moveq	#0,d0
00005A66 1028 0025                  		move.b	$25(a0),d0
00005A6A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005A6E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005A72 4EF9 0000 0000             		jmp	DisplaySprite
00005A78                            ; ===========================================================================
00005A78 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005A7C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005A80 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005A84 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005A88 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005A8C                            ; ===========================================================================
00005A8C                            
00005A8C                            Obj87_Main:				; XREF: Obj87_Index
00005A8C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A92 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005A94 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005A9A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005AA0 4E75                       		rts	
00005AA2                            ; ===========================================================================
00005AA2                            
00005AA2                            Obj87_Main2:				; XREF: Obj87_Main
00005AA2 5428 0025                  		addq.b	#2,$25(a0)
00005AA6 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005AAE 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005AB4 117C 0004 0001             		move.b	#4,1(a0)
00005ABA 4228 0022                  		clr.b	$22(a0)
00005ABE 117C 0002 0018             		move.b	#2,$18(a0)
00005AC4 117C 0000 001A             		move.b	#0,$1A(a0)
00005ACA 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005AD0                            
00005AD0                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005AD0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005AD4 6600                       		bne.s	Obj87_Wait
00005AD6 5428 0025                  		addq.b	#2,$25(a0)
00005ADA 317C 0001 001C             		move.w	#1,$1C(a0)
00005AE0 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005AE6                            
00005AE6                            Obj87_Wait:
00005AE6 4E75                       		rts	
00005AE8                            ; ===========================================================================
00005AE8                            
00005AE8                            Obj87_LookUp:				; XREF: Obj87_Index
00005AE8 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005AF0 6600                       		bne.s	locret_5480
00005AF2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005AF8 317C 005A 0030             		move.w	#$5A,$30(a0)
00005AFE 5428 0025                  		addq.b	#2,$25(a0)
00005B02                            
00005B02                            locret_5480:
00005B02 4E75                       		rts	
00005B04                            ; ===========================================================================
00005B04                            
00005B04                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005B04 5368 0030                  		subq.w	#1,$30(a0)
00005B08 6600                       		bne.s	Obj87_Wait2
00005B0A 43F8 D400                  		lea	($FFFFD400).w,a1
00005B0E 323C 00FF                  		move.w	#$FF,d1
00005B12                            
00005B12                            Obj87_ClrLoop:
00005B12 4299                       		clr.l	(a1)+
00005B14 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005B18 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005B1E 5428 0025                  		addq.b	#2,$25(a0)
00005B22 117C 0001 001C             		move.b	#1,$1C(a0)
00005B28 317C 003C 0030             		move.w	#$3C,$30(a0)
00005B2E                            
00005B2E                            Obj87_Wait2:
00005B2E 4E75                       		rts	
00005B30                            ; ===========================================================================
00005B30                            
00005B30                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005B30 5368 0030                  		subq.w	#1,$30(a0)
00005B34 6600                       		bne.s	Obj87_Wait3
00005B36 5428 0025                  		addq.b	#2,$25(a0)
00005B3A 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005B40 117C 0002 001C             		move.b	#2,$1C(a0)
00005B46 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B4C                            
00005B4C                            Obj87_Wait3:
00005B4C 4E75                       		rts	
00005B4E                            ; ===========================================================================
00005B4E                            
00005B4E                            Obj87_Animate:				; XREF: Obj87_Index
00005B4E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005B54 4EF9 0000 0000             		jmp	AnimateSprite
00005B5A                            ; ===========================================================================
00005B5A                            
00005B5A                            Obj87_Leap:				; XREF: Obj87_Index
00005B5A 5368 0030                  		subq.w	#1,$30(a0)
00005B5E 6600                       		bne.s	Obj87_Wait4
00005B60 5428 0025                  		addq.b	#2,$25(a0)
00005B64 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005B6C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005B72 117C 0004 0001             		move.b	#4,1(a0)
00005B78 4228 0022                  		clr.b	$22(a0)
00005B7C 117C 0002 0018             		move.b	#2,$18(a0)
00005B82 117C 0005 001A             		move.b	#5,$1A(a0)
00005B88 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005B8E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B94 60B8                       		bra.s	Obj87_Animate
00005B96                            ; ===========================================================================
00005B96                            
00005B96                            Obj87_Wait4:				; XREF: Obj87_Leap
00005B96 4E75                       		rts	
00005B98                            ; ===========================================================================
00005B98                            Ani_obj87:
00005B98                            	include "_anim\obj87.asm"
00005B98                            ; ---------------------------------------------------------------------------
00005B98                            ; Animation script - Sonic on the ending sequence
00005B98                            ; ---------------------------------------------------------------------------
00005B98 0000                       		dc.w byte_551C-Ani_obj87
00005B9A 0000                       		dc.w byte_552A-Ani_obj87
00005B9C 0000                       		dc.w byte_5534-Ani_obj87
00005B9E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005BAC 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005BB6 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005BBE                            		even
00005BBE                            		even
00005BBE                            
00005BBE                            ; ===========================================================================
00005BBE                            ; ---------------------------------------------------------------------------
00005BBE                            ; Object 88 - chaos emeralds on	the ending sequence
00005BBE                            ; ---------------------------------------------------------------------------
00005BBE                            
00005BBE                            Obj88:					; XREF: Obj_Index
00005BBE 7000                       		moveq	#0,d0
00005BC0 1028 0024                  		move.b	$24(a0),d0
00005BC4 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005BC8 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005BCC 4EF9 0000 0000             		jmp	DisplaySprite
00005BD2                            ; ===========================================================================
00005BD2 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005BD4 0000                       		dc.w Obj88_Move-Obj88_Index
00005BD6                            ; ===========================================================================
00005BD6                            
00005BD6                            Obj88_Main:				; XREF: Obj88_Index
00005BD6 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005BDC 6700                       		beq.s	Obj88_Main2
00005BDE 588F                       		addq.l	#4,sp
00005BE0 4E75                       		rts	
00005BE2                            ; ===========================================================================
00005BE2                            
00005BE2                            Obj88_Main2:				; XREF: Obj88_Main
00005BE2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005BE8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005BEE 2248                       		movea.l	a0,a1
00005BF0 7600                       		moveq	#0,d3
00005BF2 7401                       		moveq	#1,d2
00005BF4 7205                       		moveq	#5,d1
00005BF6                            
00005BF6                            Obj88_MainLoop:
00005BF6 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005BFA 5429 0024                  		addq.b	#2,$24(a1)
00005BFE 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005C06 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005C0C 137C 0004 0001             		move.b	#4,1(a1)
00005C12 137C 0001 0018             		move.b	#1,$18(a1)
00005C18 3368 0008 0038             		move.w	8(a0),$38(a1)
00005C1E 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005C24 1342 001C                  		move.b	d2,$1C(a1)
00005C28 1342 001A                  		move.b	d2,$1A(a1)
00005C2C 5202                       		addq.b	#1,d2
00005C2E 1343 0026                  		move.b	d3,$26(a1)
00005C32 0603 002A                  		addi.b	#$2A,d3
00005C36 43E9 0040                  		lea	$40(a1),a1
00005C3A 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005C3E                            
00005C3E                            Obj88_Move:				; XREF: Obj88_Index
00005C3E 3028 003E                  		move.w	$3E(a0),d0
00005C42 D168 0026                  		add.w	d0,$26(a0)
00005C46 1028 0026                  		move.b	$26(a0),d0
00005C4A 4EB9 0000 2D6E             		jsr	(CalcSine).l
00005C50 7800                       		moveq	#0,d4
00005C52 1828 003C                  		move.b	$3C(a0),d4
00005C56 C3C4                       		muls.w	d4,d1
00005C58 E081                       		asr.l	#8,d1
00005C5A C1C4                       		muls.w	d4,d0
00005C5C E080                       		asr.l	#8,d0
00005C5E D268 0038                  		add.w	$38(a0),d1
00005C62 D068 003A                  		add.w	$3A(a0),d0
00005C66 3141 0008                  		move.w	d1,8(a0)
00005C6A 3140 000C                  		move.w	d0,$C(a0)
00005C6E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005C74 6700                       		beq.s	loc_55FA
00005C76 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005C7C                            
00005C7C                            loc_55FA:
00005C7C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005C82 6700                       		beq.s	loc_5608
00005C84 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005C8A                            
00005C8A                            loc_5608:
00005C8A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005C90 6700                       		beq.s	locret_5614
00005C92 5368 003A                  		subq.w	#1,$3A(a0)
00005C96                            
00005C96                            locret_5614:
00005C96 4E75                       		rts	
00005C98                            ; ===========================================================================
00005C98                            ; ---------------------------------------------------------------------------
00005C98                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005C98                            ; ---------------------------------------------------------------------------
00005C98                            
00005C98                            Obj89:					; XREF: Obj_Index
00005C98 7000                       		moveq	#0,d0
00005C9A 1028 0024                  		move.b	$24(a0),d0
00005C9E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005CA2 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005CA6                            ; ===========================================================================
00005CA6 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005CA8 0000                       		dc.w Obj89_Move-Obj89_Index
00005CAA 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005CAC                            ; ===========================================================================
00005CAC                            
00005CAC                            Obj89_Main:				; XREF: Obj89_Index
00005CAC 5428 0024                  		addq.b	#2,$24(a0)
00005CB0 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005CB6 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005CBC 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005CC4 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005CCA 117C 0000 0001             		move.b	#0,1(a0)
00005CD0 117C 0000 0018             		move.b	#0,$18(a0)
00005CD6                            
00005CD6                            Obj89_Move:				; XREF: Obj89_Index
00005CD6 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005CDC 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005CDE 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005CE4 4EB9 0000 0000             		jsr	DisplaySprite
00005CEA                            ; ===========================================================================
00005CEA                            
00005CEA                            Obj89_Delay:				; XREF: Obj89_Move
00005CEA 5428 0024                  		addq.b	#2,$24(a0)
00005CEE 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005CF4                            
00005CF4                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005CF4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005CF8 6A00                       		bpl.s	Obj89_Display
00005CFA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005D00                            
00005D00                            Obj89_Display:
00005D00 4EB9 0000 0000             		jsr	DisplaySprite
00005D06                            ; ===========================================================================
00005D06                            ; ---------------------------------------------------------------------------
00005D06                            ; Sprite mappings - Sonic on the ending	sequence
00005D06                            ; ---------------------------------------------------------------------------
00005D06                            Map_obj87:
00005D06                            	include "_maps\obj87.asm"
00005D06                            ; ---------------------------------------------------------------------------
00005D06                            ; Sprite mappings - Sonic on the ending	sequence
00005D06                            ; ---------------------------------------------------------------------------
00005D06 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005D0A 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005D0E 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005D12 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005D16 02                         byte_5690:	dc.b 2
00005D17 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005D1C 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005D21 03                         byte_569B:	dc.b 3
00005D22 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005D27 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005D2C 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005D31 02                         byte_56AB:	dc.b 2
00005D32 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005D37 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005D3C 02                         byte_56B6:	dc.b 2
00005D3D EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005D42 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005D47 02                         byte_56C1:	dc.b 2
00005D48 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005D4D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005D52 03                         byte_56CC:	dc.b 3
00005D53 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005D58 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005D5D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005D62 07                         byte_56DC:	dc.b 7
00005D63 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005D68 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005D6D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005D72 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005D77 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005D7C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005D81 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005D86 18                         byte_5700:	dc.b $18
00005D87 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005D8C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005D91 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005D96 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005D9B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005DA0 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005DA5 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005DAA A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005DAF B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005DB4 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005DB9 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005DBE C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005DC3 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005DC8 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005DCD B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005DD2 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005DD7 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005DDC D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005DE1 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005DE6 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005DEB D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005DF0 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005DF5 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005DFA F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005E00 00                         		even
00005E00 00                         		even
00005E00                            
00005E00                            ; ---------------------------------------------------------------------------
00005E00                            ; Sprite mappings - chaos emeralds on the ending sequence
00005E00                            ; ---------------------------------------------------------------------------
00005E00                            Map_obj88:
00005E00                            	include "_maps\obj88.asm"
00005E00                            ; ---------------------------------------------------------------------------
00005E00                            ; Sprite mappings - chaos emeralds on the ending sequence
00005E00                            ; ---------------------------------------------------------------------------
00005E00 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005E04 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005E08 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005E0C 0000                       		dc.w byte_57AC-Map_obj88
00005E0E 01                         byte_5788:	dc.b 1
00005E0F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005E14 01                         byte_578E:	dc.b 1
00005E15 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005E1A 01                         byte_5794:	dc.b 1
00005E1B F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005E20 01                         byte_579A:	dc.b 1
00005E21 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005E26 01                         byte_57A0:	dc.b 1
00005E27 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005E2C 01                         byte_57A6:	dc.b 1
00005E2D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005E32 01                         byte_57AC:	dc.b 1
00005E33 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005E38                            		even
00005E38                            		even
00005E38                            
00005E38                            ; ---------------------------------------------------------------------------
00005E38                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005E38                            ; ---------------------------------------------------------------------------
00005E38                            Map_obj89:
00005E38                            	include "_maps\obj89.asm"
00005E38                            ; ---------------------------------------------------------------------------
00005E38                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005E38                            ; ---------------------------------------------------------------------------
00005E38 0000                       		dc.w byte_57B4-Map_obj89
00005E3A 03                         byte_57B4:	dc.b 3
00005E3B F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005E40 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005E45 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005E4A                            		even
00005E4A                            		even
00005E4A                            
00005E4A                            ; ===========================================================================
00005E4A                            ; ---------------------------------------------------------------------------
00005E4A                            ; Credits ending sequence
00005E4A                            ; ---------------------------------------------------------------------------
00005E4A                            
00005E4A                            Credits:				; XREF: GameModeArray
00005E4A 6100 B9CA                  		bsr.w	ClearPLC
00005E4E 6100 C206                  		bsr.w	Pal_FadeFrom
00005E52 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E58 3CBC 8004                  		move.w	#$8004,(a6)
00005E5C 3CBC 8230                  		move.w	#$8230,(a6)
00005E60 3CBC 8407                  		move.w	#$8407,(a6)
00005E64 3CBC 9001                  		move.w	#$9001,(a6)
00005E68 3CBC 9200                  		move.w	#$9200,(a6)
00005E6C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E70 3CBC 8720                  		move.w	#$8720,(a6)
00005E74 4238 F64E                  		clr.b	($FFFFF64E).w
00005E78 6100 B682                  		bsr.w	ClearScreen
00005E7C 43F8 D000                  		lea	($FFFFD000).w,a1
00005E80 7000                       		moveq	#0,d0
00005E82 323C 07FF                  		move.w	#$7FF,d1
00005E86                            
00005E86                            Cred_ClrObjRam:
00005E86 22C0                       		move.l	d0,(a1)+
00005E88 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005E8C                            
00005E8C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005E96 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005E9C 6100 B7DA                  		bsr.w	NemDec
00005EA0 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005EA4 7000                       		moveq	#0,d0
00005EA6 323C 001F                  		move.w	#$1F,d1
00005EAA                            
00005EAA                            Cred_ClrPallet:
00005EAA 22C0                       		move.l	d0,(a1)+
00005EAC 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005EB0                            
00005EB0 7003                       		moveq	#3,d0
00005EB2 6100 C44C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005EB6 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005EBC 4EB9 0000 0000             		jsr	ObjectsLoad
00005EC2 4EB9 0000 0000             		jsr	BuildSprites
00005EC8 6100 0000                  		bsr.w	EndingDemoLoad
00005ECC 7000                       		moveq	#0,d0
00005ECE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005ED2 E948                       		lsl.w	#4,d0
00005ED4 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005EDA 45F2 0000                  		lea	(a2,d0.w),a2
00005EDE 7000                       		moveq	#0,d0
00005EE0 1012                       		move.b	(a2),d0
00005EE2 6700                       		beq.s	loc_5862
00005EE4 6100 B8D2                  		bsr.w	LoadPLC		; load level patterns
00005EE8                            
00005EE8                            loc_5862:
00005EE8 7001                       		moveq	#1,d0
00005EEA 6100 B8CC                  		bsr.w	LoadPLC		; load standard	level patterns
00005EEE 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005EF4 6100 C0B6                  		bsr.w	Pal_FadeTo
00005EF8                            
00005EF8                            Cred_WaitLoop:
00005EF8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005EFE 6100 CE3C                  		bsr.w	DelayProgram
00005F02 6100 B920                  		bsr.w	RunPLC_RAM
00005F06 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005F0A 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005F0C 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005F10 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005F12 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005F18 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005F1C 4E75                       		rts	
00005F1E                            
00005F1E                            ; ---------------------------------------------------------------------------
00005F1E                            ; Ending sequence demo loading subroutine
00005F1E                            ; ---------------------------------------------------------------------------
00005F1E                            
00005F1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005F1E                            
00005F1E                            
00005F1E                            EndingDemoLoad:				; XREF: Credits
00005F1E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005F22 0240 000F                  		andi.w	#$F,d0
00005F26 D040                       		add.w	d0,d0
00005F28 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005F2C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005F30 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005F34 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005F3A 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005F3C 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005F42 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005F48 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005F4E 7000                       		moveq	#0,d0
00005F50 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005F54 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005F58 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005F5C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005F60 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005F66 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005F68 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005F6E 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005F72 303C 0008                  		move.w	#8,d0
00005F76                            
00005F76                            EndDemo_LampLoad:
00005F76 24D9                       		move.l	(a1)+,(a2)+
00005F78 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005F7C                            
00005F7C                            EndDemo_Exit:
00005F7C 4E75                       		rts	
00005F7E                            ; End of function EndingDemoLoad
00005F7E                            
00005F7E                            ; ===========================================================================
00005F7E                            ; ---------------------------------------------------------------------------
00005F7E                            ; Levels used in the end sequence demos
00005F7E                            ; ---------------------------------------------------------------------------
00005F7E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005F8E                            
00005F8E                            ; ---------------------------------------------------------------------------
00005F8E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005F8E                            ; ---------------------------------------------------------------------------
00005F8E                            EndDemo_LampVar:
00005F8E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005F90 0A00 062C 000D             		dc.w $A00, $62C, $D
00005F96 0000 0000                  		dc.l 0
00005F9A 0000                       		dc.b 0,	0
00005F9C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005FB0 0101                       		dc.b 1,	1
00005FB2                            ; ===========================================================================
00005FB2                            ; ---------------------------------------------------------------------------
00005FB2                            ; "TRY AGAIN" and "END"	screens
00005FB2                            ; ---------------------------------------------------------------------------
00005FB2                            
00005FB2                            TryAgainEnd:				; XREF: Credits
00005FB2 6100 B862                  		bsr.w	ClearPLC
00005FB6 6100 C09E                  		bsr.w	Pal_FadeFrom
00005FBA 4DF9 00C0 0004             		lea	($C00004).l,a6
00005FC0 3CBC 8004                  		move.w	#$8004,(a6)
00005FC4 3CBC 8230                  		move.w	#$8230,(a6)
00005FC8 3CBC 8407                  		move.w	#$8407,(a6)
00005FCC 3CBC 9001                  		move.w	#$9001,(a6)
00005FD0 3CBC 9200                  		move.w	#$9200,(a6)
00005FD4 3CBC 8B03                  		move.w	#$8B03,(a6)
00005FD8 3CBC 8720                  		move.w	#$8720,(a6)
00005FDC 4238 F64E                  		clr.b	($FFFFF64E).w
00005FE0 6100 B51A                  		bsr.w	ClearScreen
00005FE4 43F8 D000                  		lea	($FFFFD000).w,a1
00005FE8 7000                       		moveq	#0,d0
00005FEA 323C 07FF                  		move.w	#$7FF,d1
00005FEE                            
00005FEE                            TryAg_ClrObjRam:
00005FEE 22C0                       		move.l	d0,(a1)+
00005FF0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005FF4                            
00005FF4 701D                       		moveq	#$1D,d0
00005FF6 6100 B92C                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005FFA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005FFE 7000                       		moveq	#0,d0
00006000 323C 001F                  		move.w	#$1F,d1
00006004                            
00006004                            TryAg_ClrPallet:
00006004 22C0                       		move.l	d0,(a1)+
00006006 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
0000600A                            
0000600A 7013                       		moveq	#$13,d0
0000600C 6100 C2F2                  		bsr.w	PalLoad1	; load ending pallet
00006010 4278 FBC0                  		clr.w	($FFFFFBC0).w
00006014 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
0000601A 4EB9 0000 0000             		jsr	ObjectsLoad
00006020 4EB9 0000 0000             		jsr	BuildSprites
00006026 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
0000602C 6100 BF7E                  		bsr.w	Pal_FadeTo
00006030                            
00006030                            ; ---------------------------------------------------------------------------
00006030                            ; "TRY AGAIN" and "END"	screen main loop
00006030                            ; ---------------------------------------------------------------------------
00006030                            TryAg_MainLoop:
00006030 6100 B5AE                  		bsr.w	PauseGame
00006034 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000603A 6100 CD00                  		bsr.w	DelayProgram
0000603E 4EB9 0000 0000             		jsr	ObjectsLoad
00006044 4EB9 0000 0000             		jsr	BuildSprites
0000604A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006050 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006052 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006056 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006058 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
0000605E 67D0                       		beq.s	TryAg_MainLoop
00006060                            
00006060                            TryAg_Exit:
00006060 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006066 4E75                       		rts	
00006068                            
00006068                            ; ===========================================================================
00006068                            ; ---------------------------------------------------------------------------
00006068                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006068                            ; ---------------------------------------------------------------------------
00006068                            
00006068                            Obj8B:					; XREF: Obj_Index
00006068 7000                       		moveq	#0,d0
0000606A 1028 0024                  		move.b	$24(a0),d0
0000606E 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00006072 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006076 4EF9 0000 0000             		jmp	DisplaySprite
0000607C                            ; ===========================================================================
0000607C 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
0000607E 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006080 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00006082 0000                       		dc.w loc_5A8E-Obj8B_Index
00006084                            ; ===========================================================================
00006084                            
00006084                            Obj8B_Main:				; XREF: Obj8B_Index
00006084 5428 0024                  		addq.b	#2,$24(a0)
00006088 317C 0120 0008             		move.w	#$120,8(a0)
0000608E 317C 00F4 000A             		move.w	#$F4,$A(a0)
00006094 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000609C 317C 03E1 0002             		move.w	#$3E1,2(a0)
000060A2 117C 0000 0001             		move.b	#0,1(a0)
000060A8 117C 0002 0018             		move.b	#2,$18(a0)
000060AE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
000060B4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000060BA 6700                       		beq.s	Obj8B_Animate	; if yes, branch
000060BC 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
000060C2 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
000060C8 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
000060CE 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
000060D4                            
000060D4                            Obj8B_Animate:				; XREF: Obj8B_Index
000060D4 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
000060DA 4EF9 0000 0000             		jmp	AnimateSprite
000060E0                            ; ===========================================================================
000060E0                            
000060E0                            Obj8B_Juggle:				; XREF: Obj8B_Index
000060E0 5428 0024                  		addq.b	#2,$24(a0)
000060E4 7002                       		moveq	#2,d0
000060E6 0828 0000 001C             		btst	#0,$1C(a0)
000060EC 6700                       		beq.s	loc_5A6A
000060EE 4440                       		neg.w	d0
000060F0                            
000060F0                            loc_5A6A:
000060F0 43F8 D800                  		lea	($FFFFD800).w,a1
000060F4 7205                       		moveq	#5,d1
000060F6                            
000060F6                            loc_5A70:
000060F6 1340 003E                  		move.b	d0,$3E(a1)
000060FA 3400                       		move.w	d0,d2
000060FC E742                       		asl.w	#3,d2
000060FE D529 0026                  		add.b	d2,$26(a1)
00006102 43E9 0040                  		lea	$40(a1),a1
00006106 51C9 FFEE                  		dbf	d1,loc_5A70
0000610A 5228 001A                  		addq.b	#1,$1A(a0)
0000610E 317C 0070 0030             		move.w	#112,$30(a0)
00006114                            
00006114                            loc_5A8E:				; XREF: Obj8B_Index
00006114 5368 0030                  		subq.w	#1,$30(a0)
00006118 6A00                       		bpl.s	locret_5AA0
0000611A 0868 0000 001C             		bchg	#0,$1C(a0)
00006120 117C 0002 0024             		move.b	#2,$24(a0)
00006126                            
00006126                            locret_5AA0:
00006126 4E75                       		rts	
00006128                            ; ===========================================================================
00006128                            Ani_obj8B:
00006128                            	include "_anim\obj8B.asm"
00006128                            ; ---------------------------------------------------------------------------
00006128                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006128                            ; ---------------------------------------------------------------------------
00006128 0000                       		dc.w byte_5AA8-Ani_obj8B
0000612A 0000                       		dc.w byte_5AAC-Ani_obj8B
0000612C 0000                       		dc.w byte_5AB0-Ani_obj8B
0000612E 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00006132 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00006136 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006148                            		even
00006148                            		even
00006148                            
00006148                            ; ===========================================================================
00006148                            ; ---------------------------------------------------------------------------
00006148                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006148                            ; ---------------------------------------------------------------------------
00006148                            
00006148                            Obj8C:					; XREF: Obj_Index
00006148 7000                       		moveq	#0,d0
0000614A 1028 0024                  		move.b	$24(a0),d0
0000614E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006152 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006156 4EF9 0000 0000             		jmp	DisplaySprite
0000615C                            ; ===========================================================================
0000615C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000615E 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006160                            ; ===========================================================================
00006160                            
00006160                            Obj8C_Main:				; XREF: Obj8C_Index
00006160 2248                       		movea.l	a0,a1
00006162 7400                       		moveq	#0,d2
00006164 7600                       		moveq	#0,d3
00006166 7205                       		moveq	#5,d1
00006168 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000616C                            
0000616C                            Obj8C_MakeEms:				; XREF: loc_5B42
0000616C 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006170 5429 0024                  		addq.b	#2,$24(a1)
00006174 237C 0000 5E00 0004        		move.l	#Map_obj88,4(a1)
0000617C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006182 137C 0000 0001             		move.b	#0,1(a1)
00006188 137C 0001 0018             		move.b	#1,$18(a1)
0000618E 337C 0104 0008             		move.w	#$104,8(a1)
00006194 337C 0120 0038             		move.w	#$120,$38(a1)
0000619A 337C 00EC 000A             		move.w	#$EC,$A(a1)
000061A0 3369 000A 003A             		move.w	$A(a1),$3A(a1)
000061A6 137C 001C 003C             		move.b	#$1C,$3C(a1)
000061AC 47F8 FE58                  		lea	($FFFFFE58).w,a3
000061B0                            
000061B0                            Obj8C_ChkEms:
000061B0 7000                       		moveq	#0,d0
000061B2 1038 FE57                  		move.b	($FFFFFE57).w,d0
000061B6 5340                       		subq.w	#1,d0
000061B8 6500                       		bcs.s	loc_5B42
000061BA                            
000061BA                            Obj8C_ChkEmLoop:
000061BA B433 0000                  		cmp.b	(a3,d0.w),d2
000061BE 6600                       		bne.s	loc_5B3E
000061C0 5202                       		addq.b	#1,d2
000061C2 60EC                       		bra.s	Obj8C_ChkEms
000061C4                            ; ===========================================================================
000061C4                            
000061C4                            loc_5B3E:
000061C4 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
000061C8                            
000061C8                            loc_5B42:
000061C8 1342 001A                  		move.b	d2,$1A(a1)
000061CC 5229 001A                  		addq.b	#1,$1A(a1)
000061D0 5202                       		addq.b	#1,d2
000061D2 137C 0080 0026             		move.b	#$80,$26(a1)
000061D8 1343 001E                  		move.b	d3,$1E(a1)
000061DC 1343 001F                  		move.b	d3,$1F(a1)
000061E0 0643 000A                  		addi.w	#$A,d3
000061E4 43E9 0040                  		lea	$40(a1),a1
000061E8 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000061EC                            
000061EC                            Obj8C_Move:				; XREF: Obj8C_Index
000061EC 4A68 003E                  		tst.w	$3E(a0)
000061F0 6700                       		beq.s	locret_5BBA
000061F2 4A28 001E                  		tst.b	$1E(a0)
000061F6 6700                       		beq.s	loc_5B78
000061F8 5328 001E                  		subq.b	#1,$1E(a0)
000061FC 6600                       		bne.s	loc_5B80
000061FE                            
000061FE                            loc_5B78:
000061FE 3028 003E                  		move.w	$3E(a0),d0
00006202 D168 0026                  		add.w	d0,$26(a0)
00006206                            
00006206                            loc_5B80:
00006206 1028 0026                  		move.b	$26(a0),d0
0000620A 6700                       		beq.s	loc_5B8C
0000620C 0C00 0080                  		cmpi.b	#$80,d0
00006210 6600                       		bne.s	loc_5B96
00006212                            
00006212                            loc_5B8C:
00006212 4268 003E                  		clr.w	$3E(a0)
00006216 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0000621C                            
0000621C                            loc_5B96:
0000621C 4EB9 0000 2D6E             		jsr	(CalcSine).l
00006222 7800                       		moveq	#0,d4
00006224 1828 003C                  		move.b	$3C(a0),d4
00006228 C3C4                       		muls.w	d4,d1
0000622A E081                       		asr.l	#8,d1
0000622C C1C4                       		muls.w	d4,d0
0000622E E080                       		asr.l	#8,d0
00006230 D268 0038                  		add.w	$38(a0),d1
00006234 D068 003A                  		add.w	$3A(a0),d0
00006238 3141 0008                  		move.w	d1,8(a0)
0000623C 3140 000A                  		move.w	d0,$A(a0)
00006240                            
00006240                            locret_5BBA:
00006240 4E75                       		rts	
00006242                            ; ===========================================================================
00006242                            ; ---------------------------------------------------------------------------
00006242                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006242                            ; ---------------------------------------------------------------------------
00006242                            Map_obj8B:
00006242                            	include "_maps\obj8B.asm"
00006242                            ; ---------------------------------------------------------------------------
00006242                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006242                            ; ---------------------------------------------------------------------------
00006242 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006246 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000624A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000624E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006252 08                         byte_5BCC:	dc.b 8
00006253 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006258 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000625D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006262 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006267 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000626C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006271 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006276 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000627B 08                         byte_5BF5:	dc.b 8
0000627C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006281 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006286 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000628B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006290 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006295 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000629A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000629F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062A4 08                         byte_5C1E:	dc.b 8
000062A5 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
000062AA F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000062AF E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000062B4 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000062B9 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000062BE 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000062C3 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062C8 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062CD 08                         byte_5C47:	dc.b 8
000062CE E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000062D3 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000062D8 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000062DD F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000062E2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000062E7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000062EC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062F1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062F6 0C                         byte_5C70:	dc.b $C
000062F7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000062FC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006301 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006306 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
0000630B ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006310 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006315 0504 0835 00               		dc.b 5,	4, 8, $35, 0
0000631A 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
0000631F 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006324 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006329 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000632E 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006333 0A                         byte_5CAD:	dc.b $A
00006334 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006339 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
0000633E F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006343 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006348 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000634D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006352 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006357 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000635C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006361 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006366 0A                         byte_5CE0:	dc.b $A
00006367 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000636C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006371 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006376 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000637B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006380 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006385 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000638A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000638F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006394 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006399 0C                         byte_5D13:	dc.b $C
0000639A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000639F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000063A4 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000063A9 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000063AE F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000063B3 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000063B8 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000063BD 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000063C2 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000063C7 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000063CC 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000063D1 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000063D6                            		even
000063D6                            		even
000063D6                            
000063D6                            ; ---------------------------------------------------------------------------
000063D6                            ; Ending sequence demos
000063D6                            ; ---------------------------------------------------------------------------
000063D6                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006404                            		even
00006404                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006444                            		even
00006444                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006474                            		even
00006474                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000064A4                            		even
000064A4                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000064C4                            		even
000064C4                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000064E4                            		even
000064E4                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006514                            		even
00006514                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006544                            		even
00006544                            
00006544                            ; ---------------------------------------------------------------------------
00006544                            ; Subroutine to	load level boundaries and start	locations
00006544                            ; ---------------------------------------------------------------------------
00006544                            
00006544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006544                            
00006544                            
00006544                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006544 7000                       		moveq	#0,d0
00006546 11C0 F740                  		move.b	d0,($FFFFF740).w
0000654A 11C0 F741                  		move.b	d0,($FFFFF741).w
0000654E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006552 11C0 F748                  		move.b	d0,($FFFFF748).w
00006556 11C0 F742                  		move.b	d0,($FFFFF742).w
0000655A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000655E ED08                       		lsl.b	#6,d0
00006560 E848                       		lsr.w	#4,d0
00006562 3200                       		move.w	d0,d1
00006564 D040                       		add.w	d0,d0
00006566 D041                       		add.w	d1,d0
00006568 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000656C 3018                       		move.w	(a0)+,d0
0000656E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006572 2018                       		move.l	(a0)+,d0
00006574 21C0 F728                  		move.l	d0,($FFFFF728).w
00006578 21C0 F720                  		move.l	d0,($FFFFF720).w
0000657C 2018                       		move.l	(a0)+,d0
0000657E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006582 21C0 F724                  		move.l	d0,($FFFFF724).w
00006586 3038 F728                  		move.w	($FFFFF728).w,d0
0000658A 0640 0240                  		addi.w	#$240,d0
0000658E 31C0 F732                  		move.w	d0,($FFFFF732).w
00006592 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006598 3018                       		move.w	(a0)+,d0
0000659A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000659E 6000 0000                  		bra.w	LevSz_ChkLamp
000065A2                            ; ===========================================================================
000065A2                            ; ---------------------------------------------------------------------------
000065A2                            ; Level size array and ending start location array
000065A2                            ; ---------------------------------------------------------------------------
000065A2                            LevelSizeArray:        ; GHZ
000065A2 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000065AE 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000065BA 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000065C6 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000065D2                                    ; LZ
000065D2 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000065DE 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000065EA 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000065F6 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
00006602                                    ; MZ
00006602 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
0000660E 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
0000661A 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00006626 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
00006632                                    ; SLZ
00006632 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
0000663E 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
0000664A 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006656 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006662                                    ; SYZ
00006662 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
0000666E 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
0000667A 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006686 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006692                                    ; SBZ
00006692 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
0000669E 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
000066AA 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
000066B6 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000066C2                                    ; Ending
000066C2 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
000066CE 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
000066DA 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000066E6 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000066F2                                    ; BHZ
000066F2 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000066FE 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
0000670A 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006716 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006722                                    even
00006722                            
00006722                            ; ===========================================================================
00006722                            
00006722                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006722 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006726 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006728 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000672E 3238 D008                  		move.w	($FFFFD008).w,d1
00006732 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006736 6000 0000                  		bra.w	loc_60D0
0000673A                            ; ===========================================================================
0000673A                            
0000673A                            
0000673A                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000673A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000673E ED08                       		lsl.b	#6,d0
00006740 E848                       		lsr.w	#4,d0
00006742 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006746 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000674A 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
0000674E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006752 5340                       		subq.w	#1,d0
00006754 E548                       		lsl.w	#2,d0
00006756 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000675A 6000 0000                  		bra.w	LevSz_SonicPos
0000675E                            
0000675E                            EndingStLocArray:
0000675E                            		incbin	misc\sloc_end.bin
0000677E                            		even
0000677E                            		
0000677E                            ; ===========================================================================
0000677E                            ; ---------------------------------------------------------------------------
0000677E                            ; Sonic	start location array
0000677E                            ; ---------------------------------------------------------------------------
0000677E                            StartLocArray:	incbin	misc\sloc_lev.bin
000067FE                            		even
000067FE                            
000067FE                            LevSz_SonicPos:
000067FE 7200                       		moveq	#0,d1
00006800 3219                       		move.w	(a1)+,d1
00006802 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006806 7000                       		moveq	#0,d0
00006808 3011                       		move.w	(a1),d0
0000680A 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
0000680E                            
0000680E                            loc_60D0:				; XREF: LevSz_ChkLamp
0000680E 0441 00A0                  		subi.w	#$A0,d1
00006812 6400                       		bcc.s	loc_60D8
00006814 7200                       		moveq	#0,d1
00006816                            
00006816                            loc_60D8:
00006816 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000681A B242                       		cmp.w	d2,d1
0000681C 6500                       		bcs.s	loc_60E2
0000681E 3202                       		move.w	d2,d1
00006820                            
00006820                            loc_60E2:
00006820 31C1 F700                  		move.w	d1,($FFFFF700).w
00006824 0440 0060                  		subi.w	#$60,d0
00006828 6400                       		bcc.s	loc_60EE
0000682A 7000                       		moveq	#0,d0
0000682C                            
0000682C                            loc_60EE:
0000682C B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006830 6D00                       		blt.s	loc_60F8
00006832 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006836                            
00006836                            loc_60F8:
00006836 31C0 F704                  		move.w	d0,($FFFFF704).w
0000683A 6100 0000                  		bsr.w	BgScrollSpeed
0000683E 7000                       		moveq	#0,d0
00006840 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006844 E508                       		lsl.b	#2,d0
00006846 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000684C 6000 0000                  		bra.w	LevSz_Unk
00006850                            
00006850                            ; ---------------------------------------------------------------------------
00006850                            ; Which	256x256	tiles contain loops or roll-tunnels
00006850                            ; ---------------------------------------------------------------------------
00006850                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006850                            ; loop,	loop, tunnel, tunnel
00006850                            ; ---------------------------------------------------------------------------
00006850                            LoopTileNums:	incbin	misc\loopnums.bin
00006870                            		even
00006870                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006870                            ; ITS GONJE HELP
00006870                            ; ===========================================================================
00006870                            
00006870                            LevSz_Unk:				; XREF: LevelSizeLoad
00006870 7000                       		moveq	#0,d0
00006872 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006876 E748                       		lsl.w	#3,d0
00006878 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000687C 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006880 24D9                       		move.l	(a1)+,(a2)+
00006882 24D9                       		move.l	(a1)+,(a2)+
00006884 4E75                       		rts	
00006886                            ; End of function LevelSizeLoad
00006886                            
00006886                            ; ===========================================================================
00006886 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000688E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006896 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000689E 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068A6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068AE 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068B6 0070 0100 0100 0100        		dc.l $700100, $1000100
000068BE                            
000068BE                            ; ---------------------------------------------------------------------------
000068BE                            ; Subroutine to	set scroll speed of some backgrounds
000068BE                            ; ---------------------------------------------------------------------------
000068BE                            
000068BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068BE                            
000068BE                            
000068BE                            BgScrollSpeed:				; XREF: LevelSizeLoad
000068BE 4A38 FE30                  		tst.b	($FFFFFE30).w
000068C2 6600                       		bne.s	loc_6206
000068C4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068C8 31C0 F714                  		move.w	d0,($FFFFF714).w
000068CC 31C1 F708                  		move.w	d1,($FFFFF708).w
000068D0 31C1 F710                  		move.w	d1,($FFFFF710).w
000068D4 31C1 F718                  		move.w	d1,($FFFFF718).w
000068D8                            
000068D8                            loc_6206:
000068D8 7400                       		moveq	#0,d2
000068DA 1438 FE10                  		move.b	($FFFFFE10).w,d2
000068DE D442                       		add.w	d2,d2
000068E0 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000068E4 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000068E8                            ; End of function BgScrollSpeed
000068E8                            
000068E8                            ; ===========================================================================
000068E8 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000068EC 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000068F0 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000068F4 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_GHZ-BgScroll_Index
000068F8                            ; ===========================================================================
000068F8                            
000068F8                            BgScroll_GHZ:				; XREF: BgScroll_Index
000068F8 6000 0000                  		bra.w	Deform_GHZ
000068FC                            ; ===========================================================================
000068FC                            
000068FC                            BgScroll_LZ:				; XREF: BgScroll_Index
000068FC E280                       		asr.l	#1,d0
000068FE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006902 4E75                       		rts	
00006904                            ; ===========================================================================
00006904                            
00006904                            BgScroll_MZ:				; XREF: BgScroll_Index
00006904 4E75                       		rts	
00006906                            ; ===========================================================================
00006906                            
00006906                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006906 E280                       		asr.l	#1,d0
00006908 0640 00C0                  		addi.w	#$C0,d0
0000690C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006910 4E75                       		rts	
00006912                            ; ===========================================================================
00006912                            
00006912                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006912 E980                       		asl.l	#4,d0
00006914 2400                       		move.l	d0,d2
00006916 E380                       		asl.l	#1,d0
00006918 D082                       		add.l	d2,d0
0000691A E080                       		asr.l	#8,d0
0000691C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006920 31C0 F714                  		move.w	d0,($FFFFF714).w
00006924 4E75                       		rts	
00006926                            ; ===========================================================================
00006926                            
00006926                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006926 E980                       		asl.l	#4,d0
00006928 E380                       		asl.l	#1,d0
0000692A E080                       		asr.l	#8,d0
0000692C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006930 4E75                       		rts	
00006932                            ; ===========================================================================
00006932                            
00006932                            BgScroll_End:				; XREF: BgScroll_Index
00006932 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006938 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000693E 4E75                       		rts	
00006940                            ; ===========================================================================
00006940 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006946 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000694C 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006952 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006958 4E75                       		rts
0000695A                            
0000695A                            ; ---------------------------------------------------------------------------
0000695A                            ; Background layer deformation subroutines
0000695A                            ; ---------------------------------------------------------------------------
0000695A                            
0000695A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000695A                            
0000695A                            
0000695A                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000695A 4A38 F744                  		tst.b	($FFFFF744).w
0000695E 6700                       		beq.s	loc_628E
00006960 4E75                       		rts	
00006962                            ; ===========================================================================
00006962                            
00006962                            loc_628E:
00006962 4278 F754                  		clr.w	($FFFFF754).w
00006966 4278 F756                  		clr.w	($FFFFF756).w
0000696A 4278 F758                  		clr.w	($FFFFF758).w
0000696E 4278 F75A                  		clr.w	($FFFFF75A).w
00006972 6100 0000                  		bsr.w	ScrollHoriz
00006976 6100 0000                  		bsr.w	ScrollVertical
0000697A 6100 0000                  		bsr.w	DynScrResizeLoad
0000697E 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006984 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000698A 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006990 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006996 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000699C 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000069A2 4879 0000 0000             		pea	Deform_Ripple
000069A8 7000                       		moveq	#0,d0
000069AA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000069AE D040                       		add.w	d0,d0
000069B0 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000069B4 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000069B8                            ; End of function DeformBgLayer
000069B8                            
000069B8                            ; ===========================================================================
000069B8                            ; ---------------------------------------------------------------------------
000069B8                            ; Offset index for background layer deformation	code
000069B8                            ; ---------------------------------------------------------------------------
000069B8 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000069BC 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000069C0 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000069C4 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_GHZ-Deform_Index
000069C8                            ; ---------------------------------------------------------------------------
000069C8                            ; Green	Hill Zone background layer deformation code
000069C8                            ; ---------------------------------------------------------------------------
000069C8                            
000069C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069C8                            
000069C8                            
000069C8                            Deform_GHZ:				; XREF: Deform_Index
000069C8 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069CC 48C4                       		ext.l	d4
000069CE EB84                       		asl.l	#5,d4
000069D0 2204                       		move.l	d4,d1
000069D2 E384                       		asl.l	#1,d4
000069D4 D881                       		add.l	d1,d4
000069D6 7A00                       		moveq	#0,d5
000069D8 6100 0000                  		bsr.w	ScrollBlock1
000069DC 6100 0000                  		bsr.w	ScrollBlock4
000069E0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069E4 3038 F704                  		move.w	($FFFFF704).w,d0
000069E8 0240 07FF                  		andi.w	#$7FF,d0
000069EC EA48                       		lsr.w	#5,d0
000069EE 4440                       		neg.w	d0
000069F0 0640 0026                  		addi.w	#$26,d0
000069F4 31C0 F714                  		move.w	d0,($FFFFF714).w
000069F8 3800                       		move.w	d0,d4
000069FA 6100 0000                  		bsr.w	ScrollBlock3
000069FE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A04 323C 006F                  		move.w	#$6F,d1
00006A08 9244                       		sub.w	d4,d1
00006A0A 3038 F700                  		move.w	($FFFFF700).w,d0
00006A0E 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006A14 6600                       		bne.s	loc_633C
00006A16 7000                       		moveq	#0,d0
00006A18                            
00006A18                            loc_633C:
00006A18 4440                       		neg.w	d0
00006A1A 4840                       		swap	d0
00006A1C 3038 F708                  		move.w	($FFFFF708).w,d0
00006A20 4440                       		neg.w	d0
00006A22                            
00006A22                            loc_6346:
00006A22 22C0                       		move.l	d0,(a1)+
00006A24 51C9 FFFC                  		dbf	d1,loc_6346
00006A28 323C 0027                  		move.w	#$27,d1
00006A2C 3038 F710                  		move.w	($FFFFF710).w,d0
00006A30 4440                       		neg.w	d0
00006A32                            
00006A32                            loc_6356:
00006A32 22C0                       		move.l	d0,(a1)+
00006A34 51C9 FFFC                  		dbf	d1,loc_6356
00006A38 3038 F710                  		move.w	($FFFFF710).w,d0
00006A3C 0640 0000                  		addi.w	#0,d0
00006A40 3438 F700                  		move.w	($FFFFF700).w,d2
00006A44 0642 FE00                  		addi.w	#-$200,d2
00006A48 9440                       		sub.w	d0,d2
00006A4A 48C2                       		ext.l	d2
00006A4C E182                       		asl.l	#8,d2
00006A4E 85FC 0068                  		divs.w	#$68,d2
00006A52 48C2                       		ext.l	d2
00006A54 E182                       		asl.l	#8,d2
00006A56 7600                       		moveq	#0,d3
00006A58 3600                       		move.w	d0,d3
00006A5A 323C 0047                  		move.w	#$47,d1
00006A5E D244                       		add.w	d4,d1
00006A60                            
00006A60                            loc_6384:
00006A60 3003                       		move.w	d3,d0
00006A62 4440                       		neg.w	d0
00006A64 22C0                       		move.l	d0,(a1)+
00006A66 4843                       		swap	d3
00006A68 D682                       		add.l	d2,d3
00006A6A 4843                       		swap	d3
00006A6C 51C9 FFF2                  		dbf	d1,loc_6384
00006A70 4E75                       		rts	
00006A72                            ; End of function Deform_GHZ
00006A72                            
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            ; Labyrinth Zone background layer deformation code
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            
00006A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A72                            
00006A72                            
00006A72                            Deform_LZ:				; XREF: Deform_Index
00006A72 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A76 48C4                       		ext.l	d4
00006A78 EF84                       		asl.l	#7,d4
00006A7A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A7E 48C5                       		ext.l	d5
00006A80 EF85                       		asl.l	#7,d5
00006A82 6100 0000                  		bsr.w	ScrollBlock1
00006A86 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A8C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A90 323C 00DF                  		move.w	#224-1,d1
00006A94 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006A98 6A00                       		bpl.s	@60hz
00006A9A 323C 00EF                  		move.w	#240-1,d1
00006A9E                            @60hz:
00006A9E 3038 F700                  		move.w	($FFFFF700).w,d0
00006AA2 4440                       		neg.w	d0
00006AA4 4840                       		swap	d0
00006AA6 3038 F708                  		move.w	($FFFFF708).w,d0
00006AAA 4440                       		neg.w	d0
00006AAC                            
00006AAC                            loc_63C6:
00006AAC 22C0                       		move.l	d0,(a1)+
00006AAE 51C9 FFFC                  		dbf	d1,loc_63C6
00006AB2 3038 F646                  		move.w	($FFFFF646).w,d0
00006AB6 9078 F704                  		sub.w	($FFFFF704).w,d0
00006ABA 4E75                       		rts	
00006ABC                            ; End of function Deform_LZ
00006ABC                            
00006ABC                            ; ---------------------------------------------------------------------------
00006ABC                            ; Marble Zone background layer deformation code
00006ABC                            ; ---------------------------------------------------------------------------
00006ABC                            
00006ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ABC                            
00006ABC                            
00006ABC                            Deform_MZ:				; XREF: Deform_Index
00006ABC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AC0 48C4                       		ext.l	d4
00006AC2 ED84                       		asl.l	#6,d4
00006AC4 2204                       		move.l	d4,d1
00006AC6 E384                       		asl.l	#1,d4
00006AC8 D881                       		add.l	d1,d4
00006ACA 7A00                       		moveq	#0,d5
00006ACC 6100 0000                  		bsr.w	ScrollBlock1
00006AD0 303C 0200                  		move.w	#$200,d0
00006AD4 3238 F704                  		move.w	($FFFFF704).w,d1
00006AD8 0441 01C8                  		subi.w	#$1C8,d1
00006ADC 6500                       		bcs.s	loc_6402
00006ADE 3401                       		move.w	d1,d2
00006AE0 D241                       		add.w	d1,d1
00006AE2 D242                       		add.w	d2,d1
00006AE4 E441                       		asr.w	#2,d1
00006AE6 D041                       		add.w	d1,d0
00006AE8                            
00006AE8                            loc_6402:
00006AE8 31C0 F714                  		move.w	d0,($FFFFF714).w
00006AEC 6100 0000                  		bsr.w	ScrollBlock3
00006AF0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AF6 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AFA 323C 00DF                  		move.w	#224-1,d1
00006AFE 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006B02 6A00                       		bpl.s	@60hz
00006B04 323C 00EF                  		move.w	#240-1,d1
00006B08                            @60hz:
00006B08 3038 F700                  		move.w	($FFFFF700).w,d0
00006B0C 4440                       		neg.w	d0
00006B0E 4840                       		swap	d0
00006B10 3038 F708                  		move.w	($FFFFF708).w,d0
00006B14 4440                       		neg.w	d0
00006B16                            
00006B16                            loc_6426:
00006B16 22C0                       		move.l	d0,(a1)+
00006B18 51C9 FFFC                  		dbf	d1,loc_6426
00006B1C 4E75                       		rts	
00006B1E                            ; End of function Deform_MZ
00006B1E                            
00006B1E                            ; ---------------------------------------------------------------------------
00006B1E                            ; Star Light Zone background layer deformation code
00006B1E                            ; ---------------------------------------------------------------------------
00006B1E                            
00006B1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B1E                            
00006B1E                            
00006B1E                            Deform_SLZ:				; XREF: Deform_Index
00006B1E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B22 48C4                       		ext.l	d4
00006B24 EB84                       		asl.l	#5,d4
00006B26 2204                       		move.l	d4,d1
00006B28 E384                       		asl.l	#1,d4
00006B2A D881                       		add.l	d1,d4
00006B2C 7A00                       		moveq	#0,d5
00006B2E 6100 0000                  		bsr.w	ScrollBlock1
00006B32 6100 0000                  		bsr.w	ScrollBlock3
00006B36 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B3A                            	;	move.w	($FFFFF704).w,d0
00006B3A                            	;	andi.w	#$7FF,d0
00006B3A EA48                       		lsr.w	#5,d0
00006B3C 4440                       		neg.w	d0
00006B3E 0640 0026                  		addi.w	#$26,d0
00006B42 31C0 F714                  		move.w	d0,($FFFFF714).w
00006B46 3800                       		move.w	d0,d4
00006B48                            	;	bsr.w	ScrollBlock3
00006B48 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006B4E 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006B52                            
00006B52 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B56 4440                       		neg.w	d0			; negate (positive to negative)
00006B58 4840                       		swap	d0			; send to the left side of d0
00006B5A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B5E 45F8 A800                  		lea	($FFFFA800).w,a2
00006B62 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B68 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B6E 3038 A800                  		move.w	($FFFFA800).w,d0
00006B72 4440                       		neg.w	d0			; negate (positive to negative)
00006B74 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B76 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B7A                            slz_DeformLoop_1:
00006B7A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B7C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006B80                            
00006B80 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B84 4440                       		neg.w	d0			; negate (positive to negative)
00006B86 4840                       		swap	d0			; send to the left side of d0
00006B88 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B8C 45F8 A800                  		lea	($FFFFA800).w,a2
00006B90 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B96 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B9C 3038 A800                  		move.w	($FFFFA800).w,d0
00006BA0 4440                       		neg.w	d0			; negate (positive to negative)
00006BA2 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006BA4 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BA8                            slz_DeformLoop_2:
00006BA8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BAA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006BAE                            
00006BAE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BB2 4440                       		neg.w	d0			; negate (positive to negative)
00006BB4 4840                       		swap	d0			; send to the left side of d0
00006BB6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BBA 45F8 A800                  		lea	($FFFFA800).w,a2
00006BBE 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BC4 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BCA 3038 A800                  		move.w	($FFFFA800).w,d0
00006BCE 4440                       		neg.w	d0			; negate (positive to negative)
00006BD0 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006BD2 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BD6                            slz_DeformLoop_3:
00006BD6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BD8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006BDC                            
00006BDC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BE0 4440                       		neg.w	d0			; negate (positive to negative)
00006BE2 4840                       		swap	d0			; send to the left side of d0
00006BE4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BE8 45F8 A800                  		lea	($FFFFA800).w,a2
00006BEC 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BF2 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BF8 3038 A800                  		move.w	($FFFFA800).w,d0
00006BFC 4440                       		neg.w	d0			; negate (positive to negative)
00006BFE E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006C00 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C04                            slz_DeformLoop_4:
00006C04 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C06 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006C0A                            
00006C0A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C0E 4440                       		neg.w	d0			; negate (positive to negative)
00006C10 4840                       		swap	d0			; send to the left side of d0
00006C12 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C16 45F8 A800                  		lea	($FFFFA800).w,a2
00006C1A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006C20 069A 0000 C000             		addi.l	#$C000,(a2)+
00006C26 3038 A800                  		move.w	($FFFFA800).w,d0
00006C2A 4440                       		neg.w	d0			; negate (positive to negative)
00006C2C E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006C2E 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C32                            slz_DeformLoop_5:
00006C32 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C34 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006C38                            
00006C38 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C3C 4440                       		neg.w	d0			; negate (positive to negative)
00006C3E 4840                       		swap	d0			; send to the left side of d0
00006C40 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C44 4440                       		neg.w	d0			; negate (positive to negative)
00006C46 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C48 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C4C                            slz_DeformLoop_6:
00006C4C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C4E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006C52                            
00006C52 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C56 4440                       		neg.w	d0			; negate (positive to negative)
00006C58 4840                       		swap	d0			; send to the left side of d0
00006C5A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C5E 4440                       		neg.w	d0			; negate (positive to negative)
00006C60 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006C62 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C66                            slz_DeformLoop_7:
00006C66 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C68 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006C6C                            
00006C6C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C70 4440                       		neg.w	d0			; negate (positive to negative)
00006C72 4840                       		swap	d0			; send to the left side of d0
00006C74 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C78 4440                       		neg.w	d0			; negate (positive to negative)
00006C7A EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006C7C 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C80                            slz_DeformLoop_8:
00006C80 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C82 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006C86                            
00006C86 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C8A 4440                       		neg.w	d0			; negate (positive to negative)
00006C8C 4840                       		swap	d0			; send to the left side of d0
00006C8E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C92 4440                       		neg.w	d0			; negate (positive to negative)
00006C94 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C96 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C9A                            slz_DeformLoop_9:
00006C9A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C9C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006CA0                            
00006CA0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CA4 4440                       		neg.w	d0			; negate (positive to negative)
00006CA6 4840                       		swap	d0			; send to the left side of d0
00006CA8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CAC 4440                       		neg.w	d0			; negate (positive to negative)
00006CAE E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006CB0 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CB4                            slz_DeformLoop_10:
00006CB4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CB6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006CBA                            
00006CBA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CBE 4440                       		neg.w	d0			; negate (positive to negative)
00006CC0 4840                       		swap	d0			; send to the left side of d0
00006CC2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CC6 4440                       		neg.w	d0			; negate (positive to negative)
00006CC8 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006CCA 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CCE                            slz_DeformLoop_11:
00006CCE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CD0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006CD4                            
00006CD4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CD8 4440                       		neg.w	d0			; negate (positive to negative)
00006CDA 4840                       		swap	d0			; send to the left side of d0
00006CDC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CE0 4440                       		neg.w	d0			; negate (positive to negative)
00006CE2 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006CE4 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CE8                            slz_DeformLoop_12:
00006CE8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CEA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006CEE                            
00006CEE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CF2 4440                       		neg.w	d0			; negate (positive to negative)
00006CF4 4840                       		swap	d0			; send to the left side of d0
00006CF6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CFA 4440                       		neg.w	d0			; negate (positive to negative)
00006CFC E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006CFE 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006D02                            slz_DeformLoop_13:
00006D02 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006D04 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006D08 4E75                       		rts	
00006D0A                            ; End of function Deform_SLZ
00006D0A 4E75                       		rts	
00006D0C                            ; End of function Deform_SLZ_2
00006D0C                            
00006D0C                            ; ---------------------------------------------------------------------------
00006D0C                            ; Spring Yard Zone background layer deformation	code
00006D0C                            ; ---------------------------------------------------------------------------
00006D0C                            
00006D0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D0C                            
00006D0C                            
00006D0C                            Deform_SYZ:				; XREF: Deform_Index
00006D0C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D10 48C4                       		ext.l	d4
00006D12 ED84                       		asl.l	#6,d4
00006D14 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006D18 48C5                       		ext.l	d5
00006D1A E985                       		asl.l	#4,d5
00006D1C 2205                       		move.l	d5,d1
00006D1E E385                       		asl.l	#1,d5
00006D20 DA81                       		add.l	d1,d5
00006D22 6100 0000                  		bsr.w	ScrollBlock1
00006D26 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D2C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D30 323C 00DF                  		move.w	#224-1,d1
00006D34 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006D38 6A00                       		bpl.s	@60hz
00006D3A 323C 00EF                  		move.w	#240-1,d1
00006D3E                            @60hz:
00006D3E 3038 F700                  		move.w	($FFFFF700).w,d0
00006D42 4440                       		neg.w	d0
00006D44 4840                       		swap	d0
00006D46 3038 F708                  		move.w	($FFFFF708).w,d0
00006D4A 4440                       		neg.w	d0
00006D4C                            
00006D4C                            loc_653C:
00006D4C 22C0                       		move.l	d0,(a1)+
00006D4E 51C9 FFFC                  		dbf	d1,loc_653C
00006D52 4E75                       		rts	
00006D54                            ; End of function Deform_SYZ
00006D54                            
00006D54                            ; ---------------------------------------------------------------------------
00006D54                            ; Scrap	Brain Zone background layer deformation	code
00006D54                            ; ---------------------------------------------------------------------------
00006D54                            
00006D54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D54                            
00006D54                            
00006D54                            Deform_SBZ:				; XREF: Deform_Index
00006D54 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D58 48C4                       		ext.l	d4
00006D5A ED84                       		asl.l	#6,d4
00006D5C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006D60 48C5                       		ext.l	d5
00006D62 E985                       		asl.l	#4,d5
00006D64 E385                       		asl.l	#1,d5
00006D66 6100 0000                  		bsr.w	ScrollBlock1
00006D6A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D70 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D74 323C 00DF                  		move.w	#224-1,d1
00006D78 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006D7C 6A00                       		bpl.s	@60hz
00006D7E 323C 00EF                  		move.w	#240-1,d1
00006D82                            @60hz:
00006D82 3038 F700                  		move.w	($FFFFF700).w,d0
00006D86 4440                       		neg.w	d0
00006D88 4840                       		swap	d0
00006D8A 3038 F708                  		move.w	($FFFFF708).w,d0
00006D8E 4440                       		neg.w	d0
00006D90                            
00006D90                            loc_6576:
00006D90 22C0                       		move.l	d0,(a1)+
00006D92 51C9 FFFC                  		dbf	d1,loc_6576
00006D96 4E75                       		rts	
00006D98                            ; End of function Deform_SBZ
00006D98                            ; ---------------------------------------------------------------------------
00006D98                            ; guys, ripple effects are cheap AF they just coded it badly
00006D98                            Deform_Ripple:
00006D98 41F8 CC00                  		lea	($FFFFCC00).w,a0	; hscroll line buffer
00006D9C 323C 00DF                  		move.w	#224-1,d1
00006DA0 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006DA4 6A00                       		bpl.s	@60hz
00006DA6 323C 00EF                  		move.w	#240-1,d1
00006DAA                            @60hz:
00006DAA 4240                       		clr.w	d0
00006DAC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0	; vblank timer
00006DB0                            ;		addq.b	#1,($FFFF8000).w
00006DB0 43FB 0000                  		lea	@ripple(pc,d0.w),a1
00006DB4                            @loop:
00006DB4 1019                       		move.b	(a1)+,d0
00006DB6 4880                       		ext.w	d0
00006DB8 D158                       		add.w	d0,(a0)+
00006DBA 5448                       		addq.w	#2,a0
00006DBC 51C9 FFF6                  		dbf	d1,@loop
00006DC0 4E75                       		rts
00006DC2                            @ripple:
00006DC2                            	rept 2
00006DC2                            	dc.b  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00006DC2                            	dc.b  2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00006DC2                            	dc.b  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00006DC2                            	dc.b  2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00006DC2                            	dc.b  0,-1,-1,-1,-1,-1,-2,-2,-2,-2,-2,-3,-3,-3,-3,-3
00006DC2                            	dc.b -3,-3,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4
00006DC2                            	dc.b -4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-3
00006DC2                            	dc.b -3,-3,-3,-3,-3,-3,-2,-2,-2,-2,-2,-1,-1,-1,-1,-1
00006DC2                            	dc.b  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00006DC2                            	dc.b  2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00006DC2                            	dc.b  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00006DC2                            	dc.b  2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00006DC2                            	dc.b  0,-1,-1,-1,-1,-1,-2,-2,-2,-2,-2,-3,-3,-3,-3,-3
00006DC2                            	dc.b -3,-3,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4
00006DC2                            	dc.b -4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-3
00006DC2                            	dc.b -3,-3,-3,-3,-3,-3,-2,-2,-2,-2,-2,-1,-1,-1,-1,-1
00006DC2 0000 0000 0000 0101 0101+  	endr
00006FC2                            ; ---------------------------------------------------------------------------
00006FC2                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006FC2                            ; ---------------------------------------------------------------------------
00006FC2                            
00006FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FC2                            
00006FC2                            
00006FC2                            ScrollHoriz:				; XREF: DeformBgLayer
00006FC2 3838 F700                  		move.w	($FFFFF700).w,d4
00006FC6 6100                       		bsr.s	ScrollHoriz2
00006FC8 3038 F700                  		move.w	($FFFFF700).w,d0
00006FCC 0240 0010                  		andi.w	#$10,d0
00006FD0 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006FD4 B300                       		eor.b	d1,d0
00006FD6 6600                       		bne.s	locret_65B0
00006FD8 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006FDE 3038 F700                  		move.w	($FFFFF700).w,d0
00006FE2 9044                       		sub.w	d4,d0
00006FE4 6A00                       		bpl.s	loc_65AA
00006FE6 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006FEC 4E75                       		rts	
00006FEE                            ; ===========================================================================
00006FEE                            
00006FEE                            loc_65AA:
00006FEE 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006FF4                            
00006FF4                            locret_65B0:
00006FF4 4E75                       		rts	
00006FF6                            ; End of function ScrollHoriz
00006FF6                            
00006FF6                            
00006FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FF6                            
00006FF6                            
00006FF6                            ScrollHoriz2:				; XREF: ScrollHoriz
00006FF6 3038 D008                  		move.w	($FFFFD008).w,d0
00006FFA 9078 F700                  		sub.w	($FFFFF700).w,d0
00006FFE 0440 0090                  		subi.w	#$90,d0
00007002 6500                       		bcs.s	loc_65F6
00007004 0440 0010                  		subi.w	#$10,d0
00007008 6400                       		bcc.s	loc_65CC
0000700A 4278 F73A                  		clr.w	($FFFFF73A).w
0000700E 4E75                       		rts	
00007010                            ; ===========================================================================
00007010                            
00007010                            loc_65CC:
00007010 0C40 0010                  		cmpi.w	#$10,d0
00007014 6500                       		bcs.s	loc_65D6
00007016 303C 0010                  		move.w	#$10,d0
0000701A                            
0000701A                            loc_65D6:
0000701A D078 F700                  		add.w	($FFFFF700).w,d0
0000701E B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007022 6D00                       		blt.s	loc_65E4
00007024 3038 F72A                  		move.w	($FFFFF72A).w,d0
00007028                            
00007028                            loc_65E4:
00007028 3200                       		move.w	d0,d1
0000702A 9278 F700                  		sub.w	($FFFFF700).w,d1
0000702E E141                       		asl.w	#8,d1
00007030 31C0 F700                  		move.w	d0,($FFFFF700).w
00007034 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00007038 4E75                       		rts	
0000703A                            ; ===========================================================================
0000703A                            
0000703A                            loc_65F6:				; XREF: ScrollHoriz2
0000703A D078 F700                  		add.w	($FFFFF700).w,d0
0000703E B078 F728                  		cmp.w	($FFFFF728).w,d0
00007042 6EE4                       		bgt.s	loc_65E4
00007044 3038 F728                  		move.w	($FFFFF728).w,d0
00007048 60DE                       		bra.s	loc_65E4
0000704A                            ; End of function ScrollHoriz2
0000704A                            
0000704A                            ; ===========================================================================
0000704A 4A40                       		tst.w	d0
0000704C 6A00                       		bpl.s	loc_6610
0000704E 303C FFFE                  		move.w	#-2,d0
00007052 60E6                       		bra.s	loc_65F6
00007054                            ; ===========================================================================
00007054                            
00007054                            loc_6610:
00007054 303C 0002                  		move.w	#2,d0
00007058 60B6                       		bra.s	loc_65CC
0000705A                            
0000705A                            ; ---------------------------------------------------------------------------
0000705A                            ; Subroutine to	scroll the level vertically as Sonic moves
0000705A                            ; ---------------------------------------------------------------------------
0000705A                            
0000705A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000705A                            
0000705A                            
0000705A                            ScrollVertical:				; XREF: DeformBgLayer
0000705A 7200                       		moveq	#0,d1
0000705C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007060 9078 F704                  		sub.w	($FFFFF704).w,d0
00007064 0838 0002 D022             		btst	#2,($FFFFD022).w
0000706A 6700                       		beq.s	loc_662A
0000706C 5B40                       		subq.w	#5,d0
0000706E                            
0000706E                            loc_662A:
0000706E 0838 0001 D022             		btst	#1,($FFFFD022).w
00007074 6700                       		beq.s	loc_664A
00007076 0640 0020                  		addi.w	#$20,d0
0000707A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000707E 6500                       		bcs.s	loc_6696
00007080 0440 0040                  		subi.w	#$40,d0
00007084 6400                       		bcc.s	loc_6696
00007086 4A38 F75C                  		tst.b	($FFFFF75C).w
0000708A 6600                       		bne.s	loc_66A8
0000708C 6000                       		bra.s	loc_6656
0000708E                            ; ===========================================================================
0000708E                            
0000708E                            loc_664A:
0000708E 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007092 6600                       		bne.s	loc_665C
00007094 4A38 F75C                  		tst.b	($FFFFF75C).w
00007098 6600                       		bne.s	loc_66A8
0000709A                            
0000709A                            loc_6656:
0000709A 4278 F73C                  		clr.w	($FFFFF73C).w
0000709E 4E75                       		rts	
000070A0                            ; ===========================================================================
000070A0                            
000070A0                            loc_665C:
000070A0 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
000070A6 6600                       		bne.s	loc_6684
000070A8 3238 D014                  		move.w	($FFFFD014).w,d1
000070AC 6A00                       		bpl.s	loc_666C
000070AE 4441                       		neg.w	d1
000070B0                            
000070B0                            loc_666C:
000070B0 0C41 0800                  		cmpi.w	#$800,d1
000070B4 6400                       		bcc.s	loc_6696
000070B6 323C 0600                  		move.w	#$600,d1
000070BA 0C40 0006                  		cmpi.w	#6,d0
000070BE 6E00                       		bgt.s	loc_66F6
000070C0 0C40 FFFA                  		cmpi.w	#-6,d0
000070C4 6D00                       		blt.s	loc_66C0
000070C6 6000                       		bra.s	loc_66AE
000070C8                            ; ===========================================================================
000070C8                            
000070C8                            loc_6684:
000070C8 323C 0200                  		move.w	#$200,d1
000070CC 0C40 0002                  		cmpi.w	#2,d0
000070D0 6E00                       		bgt.s	loc_66F6
000070D2 0C40 FFFE                  		cmpi.w	#-2,d0
000070D6 6D00                       		blt.s	loc_66C0
000070D8 6000                       		bra.s	loc_66AE
000070DA                            ; ===========================================================================
000070DA                            
000070DA                            loc_6696:
000070DA 323C 1000                  		move.w	#$1000,d1
000070DE 0C40 0010                  		cmpi.w	#$10,d0
000070E2 6E00                       		bgt.s	loc_66F6
000070E4 0C40 FFF0                  		cmpi.w	#-$10,d0
000070E8 6D00                       		blt.s	loc_66C0
000070EA 6000                       		bra.s	loc_66AE
000070EC                            ; ===========================================================================
000070EC                            
000070EC                            loc_66A8:
000070EC 7000                       		moveq	#0,d0
000070EE 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000070F2                            
000070F2                            loc_66AE:
000070F2 7200                       		moveq	#0,d1
000070F4 3200                       		move.w	d0,d1
000070F6 D278 F704                  		add.w	($FFFFF704).w,d1
000070FA 4A40                       		tst.w	d0
000070FC 6A00 0000                  		bpl.w	loc_6700
00007100 6000 0000                  		bra.w	loc_66CC
00007104                            ; ===========================================================================
00007104                            
00007104                            loc_66C0:
00007104 4441                       		neg.w	d1
00007106 48C1                       		ext.l	d1
00007108 E181                       		asl.l	#8,d1
0000710A D2B8 F704                  		add.l	($FFFFF704).w,d1
0000710E 4841                       		swap	d1
00007110                            
00007110                            loc_66CC:
00007110 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007114 6E00                       		bgt.s	loc_6724
00007116 0C41 FF00                  		cmpi.w	#-$100,d1
0000711A 6E00                       		bgt.s	loc_66F0
0000711C 0241 07FF                  		andi.w	#$7FF,d1
00007120 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007126 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0000712C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007132 6000                       		bra.s	loc_6724
00007134                            ; ===========================================================================
00007134                            
00007134                            loc_66F0:
00007134 3238 F72C                  		move.w	($FFFFF72C).w,d1
00007138 6000                       		bra.s	loc_6724
0000713A                            ; ===========================================================================
0000713A                            
0000713A                            loc_66F6:
0000713A 48C1                       		ext.l	d1
0000713C E181                       		asl.l	#8,d1
0000713E D2B8 F704                  		add.l	($FFFFF704).w,d1
00007142 4841                       		swap	d1
00007144                            
00007144                            loc_6700:
00007144 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00007148 6D00                       		blt.s	loc_6724
0000714A 0441 0800                  		subi.w	#$800,d1
0000714E 6500                       		bcs.s	loc_6720
00007150 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007156 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
0000715C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007162 6000                       		bra.s	loc_6724
00007164                            ; ===========================================================================
00007164                            
00007164                            loc_6720:
00007164 3238 F72E                  		move.w	($FFFFF72E).w,d1
00007168                            
00007168                            loc_6724:
00007168 3838 F704                  		move.w	($FFFFF704).w,d4
0000716C 4841                       		swap	d1
0000716E 2601                       		move.l	d1,d3
00007170 96B8 F704                  		sub.l	($FFFFF704).w,d3
00007174 E09B                       		ror.l	#8,d3
00007176 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000717A 21C1 F704                  		move.l	d1,($FFFFF704).w
0000717E 3038 F704                  		move.w	($FFFFF704).w,d0
00007182 0240 0010                  		andi.w	#$10,d0
00007186 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000718A B300                       		eor.b	d1,d0
0000718C 6600                       		bne.s	locret_6766
0000718E 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007194 3038 F704                  		move.w	($FFFFF704).w,d0
00007198 9044                       		sub.w	d4,d0
0000719A 6A00                       		bpl.s	loc_6760
0000719C 08F8 0000 F754             		bset	#0,($FFFFF754).w
000071A2 4E75                       		rts	
000071A4                            ; ===========================================================================
000071A4                            
000071A4                            loc_6760:
000071A4 08F8 0001 F754             		bset	#1,($FFFFF754).w
000071AA                            
000071AA                            locret_6766:
000071AA 4E75                       		rts	
000071AC                            ; End of function ScrollVertical
000071AC                            
000071AC                            
000071AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071AC                            
000071AC                            
000071AC                            ScrollBlock1:				; XREF: Deform_GHZ; et al
000071AC 2438 F708                  		move.l	($FFFFF708).w,d2
000071B0 2002                       		move.l	d2,d0
000071B2 D084                       		add.l	d4,d0
000071B4 21C0 F708                  		move.l	d0,($FFFFF708).w
000071B8 2200                       		move.l	d0,d1
000071BA 4841                       		swap	d1
000071BC 0241 0010                  		andi.w	#$10,d1
000071C0 1638 F74C                  		move.b	($FFFFF74C).w,d3
000071C4 B701                       		eor.b	d3,d1
000071C6 6600                       		bne.s	loc_679C
000071C8 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
000071CE 9082                       		sub.l	d2,d0
000071D0 6A00                       		bpl.s	loc_6796
000071D2 08F8 0002 F756             		bset	#2,($FFFFF756).w
000071D8 6000                       		bra.s	loc_679C
000071DA                            ; ===========================================================================
000071DA                            
000071DA                            loc_6796:
000071DA 08F8 0003 F756             		bset	#3,($FFFFF756).w
000071E0                            
000071E0                            loc_679C:
000071E0 2638 F70C                  		move.l	($FFFFF70C).w,d3
000071E4 2003                       		move.l	d3,d0
000071E6 D085                       		add.l	d5,d0
000071E8 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000071EC 2200                       		move.l	d0,d1
000071EE 4841                       		swap	d1
000071F0 0241 0010                  		andi.w	#$10,d1
000071F4 1438 F74D                  		move.b	($FFFFF74D).w,d2
000071F8 B501                       		eor.b	d2,d1
000071FA 6600                       		bne.s	locret_67D0
000071FC 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007202 9083                       		sub.l	d3,d0
00007204 6A00                       		bpl.s	loc_67CA
00007206 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000720C 4E75                       		rts	
0000720E                            ; ===========================================================================
0000720E                            
0000720E                            loc_67CA:
0000720E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007214                            
00007214                            locret_67D0:
00007214 4E75                       		rts	
00007216                            ; End of function ScrollBlock1
00007216                            
00007216                            
00007216                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007216                            
00007216                            
00007216                            ScrollBlock2:				; XREF: Deform_SLZ
00007216 2438 F708                  		move.l	($FFFFF708).w,d2
0000721A 2002                       		move.l	d2,d0
0000721C D084                       		add.l	d4,d0
0000721E 21C0 F708                  		move.l	d0,($FFFFF708).w
00007222 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007226 2003                       		move.l	d3,d0
00007228 D085                       		add.l	d5,d0
0000722A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000722E 2200                       		move.l	d0,d1
00007230 4841                       		swap	d1
00007232 0241 0010                  		andi.w	#$10,d1
00007236 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000723A B501                       		eor.b	d2,d1
0000723C 6600                       		bne.s	locret_6812
0000723E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007244 9083                       		sub.l	d3,d0
00007246 6A00                       		bpl.s	loc_680C
00007248 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000724E 4E75                       		rts	
00007250                            ; ===========================================================================
00007250                            
00007250                            loc_680C:
00007250 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007256                            
00007256                            locret_6812:
00007256 4E75                       		rts	
00007258                            ; End of function ScrollBlock2
00007258                            
00007258                            
00007258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007258                            
00007258                            
00007258                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00007258 3638 F70C                  		move.w	($FFFFF70C).w,d3
0000725C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007260 3200                       		move.w	d0,d1
00007262 0241 0010                  		andi.w	#$10,d1
00007266 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000726A B501                       		eor.b	d2,d1
0000726C 6600                       		bne.s	locret_6842
0000726E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007274 9043                       		sub.w	d3,d0
00007276 6A00                       		bpl.s	loc_683C
00007278 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000727E 4E75                       		rts	
00007280                            ; ===========================================================================
00007280                            
00007280                            loc_683C:
00007280 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007286                            
00007286                            locret_6842:
00007286 4E75                       		rts	
00007288                            ; End of function ScrollBlock3
00007288                            
00007288                            
00007288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007288                            
00007288                            
00007288                            ScrollBlock4:				; XREF: Deform_GHZ
00007288 3438 F710                  		move.w	($FFFFF710).w,d2
0000728C 3638 F714                  		move.w	($FFFFF714).w,d3
00007290 3038 F73A                  		move.w	($FFFFF73A).w,d0
00007294 48C0                       		ext.l	d0
00007296 EF80                       		asl.l	#7,d0
00007298 D1B8 F710                  		add.l	d0,($FFFFF710).w
0000729C 3038 F710                  		move.w	($FFFFF710).w,d0
000072A0 0240 0010                  		andi.w	#$10,d0
000072A4 1238 F74E                  		move.b	($FFFFF74E).w,d1
000072A8 B300                       		eor.b	d1,d0
000072AA 6600                       		bne.s	locret_6884
000072AC 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000072B2 3038 F710                  		move.w	($FFFFF710).w,d0
000072B6 9042                       		sub.w	d2,d0
000072B8 6A00                       		bpl.s	loc_687E
000072BA 08F8 0002 F758             		bset	#2,($FFFFF758).w
000072C0 6000                       		bra.s	locret_6884
000072C2                            ; ===========================================================================
000072C2                            
000072C2                            loc_687E:
000072C2 08F8 0003 F758             		bset	#3,($FFFFF758).w
000072C8                            
000072C8                            locret_6884:
000072C8 4E75                       		rts	
000072CA                            ; End of function ScrollBlock4
000072CA                            
000072CA                            
000072CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072CA                            
000072CA                            
000072CA                            sub_6886:				; XREF: loc_C44
000072CA 4BF9 00C0 0004             		lea	($C00004).l,a5
000072D0 4DF9 00C0 0000             		lea	($C00000).l,a6
000072D6 45F8 F756                  		lea	($FFFFF756).w,a2
000072DA 47F8 F708                  		lea	($FFFFF708).w,a3
000072DE 49F8 A440                  		lea	($FFFFA440).w,a4
000072E2 343C 6000                  		move.w	#$6000,d2
000072E6 6100 0000                  		bsr.w	sub_6954
000072EA 45F8 F758                  		lea	($FFFFF758).w,a2
000072EE 47F8 F710                  		lea	($FFFFF710).w,a3
000072F2 6000 0000                  		bra.w	sub_69F4
000072F6                            ; End of function sub_6886
000072F6                            
000072F6                            ; ---------------------------------------------------------------------------
000072F6                            ; Subroutine to	display	correct	tiles as you move
000072F6                            ; ---------------------------------------------------------------------------
000072F6                            
000072F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072F6                            
000072F6                            
000072F6                            LoadTilesAsYouMove:			; XREF: Demo_Time
000072F6 4BF9 00C0 0004             		lea	($C00004).l,a5
000072FC 4DF9 00C0 0000             		lea	($C00000).l,a6
00007302 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007306 47F8 FF18                  		lea	($FFFFFF18).w,a3
0000730A 49F8 A440                  		lea	($FFFFA440).w,a4
0000730E 343C 6000                  		move.w	#$6000,d2
00007312 6100 0000                  		bsr.w	sub_6954
00007316 45F8 FF34                  		lea	($FFFFFF34).w,a2
0000731A 47F8 FF20                  		lea	($FFFFFF20).w,a3
0000731E 6100 0000                  		bsr.w	sub_69F4
00007322 45F8 FF30                  		lea	($FFFFFF30).w,a2
00007326 47F8 FF10                  		lea	($FFFFFF10).w,a3
0000732A 49F8 A400                  		lea	($FFFFA400).w,a4
0000732E 343C 4000                  		move.w	#$4000,d2
00007332 4A12                       		tst.b	(a2)
00007334 6700                       		beq.s	locret_6952
00007336 0892 0000                  		bclr	#0,(a2)
0000733A 6700                       		beq.s	loc_6908
0000733C 78F0                       		moveq	#-$10,d4
0000733E 7AF0                       		moveq	#-$10,d5
00007340 6100 0000                  		bsr.w	sub_6C20
00007344 78F0                       		moveq	#-$10,d4
00007346 7AF0                       		moveq	#-$10,d5
00007348 6100 0000                  		bsr.w	sub_6AD8
0000734C                            
0000734C                            loc_6908:
0000734C 0892 0001                  		bclr	#1,(a2)
00007350 6700                       		beq.s	loc_6922
00007352 383C 00E0                  		move.w	#$E0,d4
00007356 7AF0                       		moveq	#-$10,d5
00007358 6100 0000                  		bsr.w	sub_6C20
0000735C 383C 00E0                  		move.w	#$E0,d4
00007360 7AF0                       		moveq	#-$10,d5
00007362 6100 0000                  		bsr.w	sub_6AD8
00007366                            
00007366                            loc_6922:
00007366 0892 0002                  		bclr	#2,(a2)
0000736A 6700                       		beq.s	loc_6938
0000736C 78F0                       		moveq	#-$10,d4
0000736E 7AF0                       		moveq	#-$10,d5
00007370 6100 0000                  		bsr.w	sub_6C20
00007374 78F0                       		moveq	#-$10,d4
00007376 7AF0                       		moveq	#-$10,d5
00007378 6100 0000                  		bsr.w	sub_6B04
0000737C                            
0000737C                            loc_6938:
0000737C 0892 0003                  		bclr	#3,(a2)
00007380 6700                       		beq.s	locret_6952
00007382 78F0                       		moveq	#-$10,d4
00007384 3A3C 0140                  		move.w	#$140,d5
00007388 6100 0000                  		bsr.w	sub_6C20
0000738C 78F0                       		moveq	#-$10,d4
0000738E 3A3C 0140                  		move.w	#$140,d5
00007392 6100 0000                  		bsr.w	sub_6B04
00007396                            
00007396                            locret_6952:
00007396 4E75                       		rts	
00007398                            ; End of function LoadTilesAsYouMove
00007398                            
00007398                            
00007398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007398                            
00007398                            
00007398                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00007398 4A12                       		tst.b	(a2)
0000739A 6700 0000                  		beq.w	locret_69F2
0000739E 0892 0000                  		bclr	#0,(a2)
000073A2 6700                       		beq.s	loc_6972
000073A4 78F0                       		moveq	#-$10,d4
000073A6 7AF0                       		moveq	#-$10,d5
000073A8 6100 0000                  		bsr.w	sub_6C20
000073AC 78F0                       		moveq	#-$10,d4
000073AE 7AF0                       		moveq	#-$10,d5
000073B0 7C1F                       		moveq	#$1F,d6
000073B2 6100 0000                  		bsr.w	sub_6ADA
000073B6                            
000073B6                            loc_6972:
000073B6 0892 0001                  		bclr	#1,(a2)
000073BA 6700                       		beq.s	loc_698E
000073BC 383C 00E0                  		move.w	#$E0,d4
000073C0 7AF0                       		moveq	#-$10,d5
000073C2 6100 0000                  		bsr.w	sub_6C20
000073C6 383C 00E0                  		move.w	#$E0,d4
000073CA 7AF0                       		moveq	#-$10,d5
000073CC 7C1F                       		moveq	#$1F,d6
000073CE 6100 0000                  		bsr.w	sub_6ADA
000073D2                            
000073D2                            loc_698E:
000073D2 0892 0002                  		bclr	#2,(a2)
000073D6 6700                       		beq.s	loc_69BE
000073D8 78F0                       		moveq	#-$10,d4
000073DA 7AF0                       		moveq	#-$10,d5
000073DC 6100 0000                  		bsr.w	sub_6C20
000073E0 78F0                       		moveq	#-$10,d4
000073E2 7AF0                       		moveq	#-$10,d5
000073E4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000073E8 322B 0004                  		move.w	4(a3),d1
000073EC 0241 FFF0                  		andi.w	#-$10,d1
000073F0 9C41                       		sub.w	d1,d6
000073F2 6D00                       		blt.s	loc_69BE
000073F4 E84E                       		lsr.w	#4,d6
000073F6 0C46 000F                  		cmpi.w	#$F,d6
000073FA 6500                       		bcs.s	loc_69BA
000073FC 7C0F                       		moveq	#$F,d6
000073FE                            
000073FE                            loc_69BA:
000073FE 6100 0000                  		bsr.w	sub_6B06
00007402                            
00007402                            loc_69BE:
00007402 0892 0003                  		bclr	#3,(a2)
00007406 6700                       		beq.s	locret_69F2
00007408 78F0                       		moveq	#-$10,d4
0000740A 3A3C 0140                  		move.w	#$140,d5
0000740E 6100 0000                  		bsr.w	sub_6C20
00007412 78F0                       		moveq	#-$10,d4
00007414 3A3C 0140                  		move.w	#$140,d5
00007418 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000741C 322B 0004                  		move.w	4(a3),d1
00007420 0241 FFF0                  		andi.w	#-$10,d1
00007424 9C41                       		sub.w	d1,d6
00007426 6D00                       		blt.s	locret_69F2
00007428 E84E                       		lsr.w	#4,d6
0000742A 0C46 000F                  		cmpi.w	#$F,d6
0000742E 6500                       		bcs.s	loc_69EE
00007430 7C0F                       		moveq	#$F,d6
00007432                            
00007432                            loc_69EE:
00007432 6100 0000                  		bsr.w	sub_6B06
00007436                            
00007436                            locret_69F2:
00007436 4E75                       		rts	
00007438                            ; End of function sub_6954
00007438                            
00007438                            
00007438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007438                            
00007438                            
00007438                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007438 4A12                       		tst.b	(a2)
0000743A 6700 0000                  		beq.w	locret_6A80
0000743E 0892 0002                  		bclr	#2,(a2)
00007442 6700                       		beq.s	loc_6A3E
00007444 0C53 0010                  		cmpi.w	#$10,(a3)
00007448 6500                       		bcs.s	loc_6A3E
0000744A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000744E 322B 0004                  		move.w	4(a3),d1
00007452 0241 FFF0                  		andi.w	#-$10,d1
00007456 9841                       		sub.w	d1,d4
00007458 3F04                       		move.w	d4,-(sp)
0000745A 7AF0                       		moveq	#-$10,d5
0000745C 6100 0000                  		bsr.w	sub_6C20
00007460 381F                       		move.w	(sp)+,d4
00007462 7AF0                       		moveq	#-$10,d5
00007464 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007468 322B 0004                  		move.w	4(a3),d1
0000746C 0241 FFF0                  		andi.w	#-$10,d1
00007470 9C41                       		sub.w	d1,d6
00007472 6D00                       		blt.s	loc_6A3E
00007474 E84E                       		lsr.w	#4,d6
00007476 0446 000E                  		subi.w	#$E,d6
0000747A 6400                       		bcc.s	loc_6A3E
0000747C 4446                       		neg.w	d6
0000747E 6100 0000                  		bsr.w	sub_6B06
00007482                            
00007482                            loc_6A3E:
00007482 0892 0003                  		bclr	#3,(a2)
00007486 6700                       		beq.s	locret_6A80
00007488 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000748C 322B 0004                  		move.w	4(a3),d1
00007490 0241 FFF0                  		andi.w	#-$10,d1
00007494 9841                       		sub.w	d1,d4
00007496 3F04                       		move.w	d4,-(sp)
00007498 3A3C 0140                  		move.w	#$140,d5
0000749C 6100 0000                  		bsr.w	sub_6C20
000074A0 381F                       		move.w	(sp)+,d4
000074A2 3A3C 0140                  		move.w	#$140,d5
000074A6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000074AA 322B 0004                  		move.w	4(a3),d1
000074AE 0241 FFF0                  		andi.w	#-$10,d1
000074B2 9C41                       		sub.w	d1,d6
000074B4 6D00                       		blt.s	locret_6A80
000074B6 E84E                       		lsr.w	#4,d6
000074B8 0446 000E                  		subi.w	#$E,d6
000074BC 6400                       		bcc.s	locret_6A80
000074BE 4446                       		neg.w	d6
000074C0 6100 0000                  		bsr.w	sub_6B06
000074C4                            
000074C4                            locret_6A80:
000074C4 4E75                       		rts	
000074C6                            ; End of function sub_69F4
000074C6                            
000074C6                            ; ===========================================================================
000074C6 4A12                       		tst.b	(a2)
000074C8 6700                       		beq.s	locret_6AD6
000074CA 0892 0002                  		bclr	#2,(a2)
000074CE 6700                       		beq.s	loc_6AAC
000074D0 383C 00D0                  		move.w	#$D0,d4
000074D4 322B 0004                  		move.w	4(a3),d1
000074D8 0241 FFF0                  		andi.w	#-$10,d1
000074DC 9841                       		sub.w	d1,d4
000074DE 3F04                       		move.w	d4,-(sp)
000074E0 7AF0                       		moveq	#-$10,d5
000074E2 6100 0000                  		bsr.w	sub_6C3C
000074E6 381F                       		move.w	(sp)+,d4
000074E8 7AF0                       		moveq	#-$10,d5
000074EA 7C02                       		moveq	#2,d6
000074EC 6100 0000                  		bsr.w	sub_6B06
000074F0                            
000074F0                            loc_6AAC:
000074F0 0892 0003                  		bclr	#3,(a2)
000074F4 6700                       		beq.s	locret_6AD6
000074F6 383C 00D0                  		move.w	#$D0,d4
000074FA 322B 0004                  		move.w	4(a3),d1
000074FE 0241 FFF0                  		andi.w	#-$10,d1
00007502 9841                       		sub.w	d1,d4
00007504 3F04                       		move.w	d4,-(sp)
00007506 3A3C 0140                  		move.w	#$140,d5
0000750A 6100 0000                  		bsr.w	sub_6C3C
0000750E 381F                       		move.w	(sp)+,d4
00007510 3A3C 0140                  		move.w	#$140,d5
00007514 7C02                       		moveq	#2,d6
00007516 6100 0000                  		bsr.w	sub_6B06
0000751A                            
0000751A                            locret_6AD6:
0000751A 4E75                       		rts	
0000751C                            
0000751C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000751C                            
0000751C                            
0000751C                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000751C 7C15                       		moveq	#$15,d6
0000751E                            ; End of function sub_6AD8
0000751E                            
0000751E                            
0000751E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000751E                            
0000751E                            
0000751E                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
0000751E 2E3C 0080 0000             		move.l	#$800000,d7
00007524 2200                       		move.l	d0,d1
00007526                            
00007526                            loc_6AE2:
00007526 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000752A 6100 0000                  		bsr.w	sub_6BD6
0000752E 2001                       		move.l	d1,d0
00007530 6100 0000                  		bsr.w	sub_6B32
00007534 5801                       		addq.b	#4,d1
00007536 0201 007F                  		andi.b	#$7F,d1
0000753A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000753E 0645 0010                  		addi.w	#$10,d5
00007542 51CE FFE2                  		dbf	d6,loc_6AE2
00007546 4E75                       		rts	
00007548                            ; End of function sub_6ADA
00007548                            
00007548                            
00007548                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007548                            
00007548                            
00007548                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007548 7C0F                       		moveq	#$F,d6
0000754A                            ; End of function sub_6B04
0000754A                            
0000754A                            
0000754A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000754A                            
0000754A                            
0000754A                            sub_6B06:				; XREF: sub_6954
0000754A 2E3C 0080 0000             		move.l	#$800000,d7
00007550 2200                       		move.l	d0,d1
00007552                            
00007552                            loc_6B0E:
00007552 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007556 6100 0000                  		bsr.w	sub_6BD6
0000755A 2001                       		move.l	d1,d0
0000755C 6100 0000                  		bsr.w	sub_6B32
00007560 0641 0100                  		addi.w	#$100,d1
00007564 0241 0FFF                  		andi.w	#$FFF,d1
00007568 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000756C 0644 0010                  		addi.w	#$10,d4
00007570 51CE FFE0                  		dbf	d6,loc_6B0E
00007574 4E75                       		rts	
00007576                            ; End of function sub_6B06
00007576                            
00007576                            
00007576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007576                            
00007576                            
00007576                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007576 8042                       		or.w	d2,d0
00007578 4840                       		swap	d0
0000757A 0810 0004                  		btst	#4,(a0)
0000757E 6600                       		bne.s	loc_6B6E
00007580 0810 0003                  		btst	#3,(a0)
00007584 6600                       		bne.s	loc_6B4E
00007586 2A80                       		move.l	d0,(a5)
00007588 2C99                       		move.l	(a1)+,(a6)
0000758A D087                       		add.l	d7,d0
0000758C 2A80                       		move.l	d0,(a5)
0000758E 2C99                       		move.l	(a1)+,(a6)
00007590 4E75                       		rts	
00007592                            ; ===========================================================================
00007592                            
00007592                            loc_6B4E:
00007592 2A80                       		move.l	d0,(a5)
00007594 2819                       		move.l	(a1)+,d4
00007596 0A84 0800 0800             		eori.l	#$8000800,d4
0000759C 4844                       		swap	d4
0000759E 2C84                       		move.l	d4,(a6)
000075A0 D087                       		add.l	d7,d0
000075A2 2A80                       		move.l	d0,(a5)
000075A4 2819                       		move.l	(a1)+,d4
000075A6 0A84 0800 0800             		eori.l	#$8000800,d4
000075AC 4844                       		swap	d4
000075AE 2C84                       		move.l	d4,(a6)
000075B0 4E75                       		rts	
000075B2                            ; ===========================================================================
000075B2                            
000075B2                            loc_6B6E:
000075B2 0810 0003                  		btst	#3,(a0)
000075B6 6600                       		bne.s	loc_6B90
000075B8 2A80                       		move.l	d0,(a5)
000075BA 2A19                       		move.l	(a1)+,d5
000075BC 2819                       		move.l	(a1)+,d4
000075BE 0A84 1000 1000             		eori.l	#$10001000,d4
000075C4 2C84                       		move.l	d4,(a6)
000075C6 D087                       		add.l	d7,d0
000075C8 2A80                       		move.l	d0,(a5)
000075CA 0A85 1000 1000             		eori.l	#$10001000,d5
000075D0 2C85                       		move.l	d5,(a6)
000075D2 4E75                       		rts	
000075D4                            ; ===========================================================================
000075D4                            
000075D4                            loc_6B90:
000075D4 2A80                       		move.l	d0,(a5)
000075D6 2A19                       		move.l	(a1)+,d5
000075D8 2819                       		move.l	(a1)+,d4
000075DA 0A84 1800 1800             		eori.l	#$18001800,d4
000075E0 4844                       		swap	d4
000075E2 2C84                       		move.l	d4,(a6)
000075E4 D087                       		add.l	d7,d0
000075E6 2A80                       		move.l	d0,(a5)
000075E8 0A85 1800 1800             		eori.l	#$18001800,d5
000075EE 4845                       		swap	d5
000075F0 2C85                       		move.l	d5,(a6)
000075F2 4E75                       		rts	
000075F4                            ; End of function sub_6B32
000075F4                            
000075F4                            ; ===========================================================================
000075F4 4E75                       		rts	
000075F6                            ; ===========================================================================
000075F6 2A80                       		move.l	d0,(a5)
000075F8 3A3C 2000                  		move.w	#$2000,d5
000075FC 3819                       		move.w	(a1)+,d4
000075FE D845                       		add.w	d5,d4
00007600 3C84                       		move.w	d4,(a6)
00007602 3819                       		move.w	(a1)+,d4
00007604 D845                       		add.w	d5,d4
00007606 3C84                       		move.w	d4,(a6)
00007608 D087                       		add.l	d7,d0
0000760A 2A80                       		move.l	d0,(a5)
0000760C 3819                       		move.w	(a1)+,d4
0000760E D845                       		add.w	d5,d4
00007610 3C84                       		move.w	d4,(a6)
00007612 3819                       		move.w	(a1)+,d4
00007614 D845                       		add.w	d5,d4
00007616 3C84                       		move.w	d4,(a6)
00007618 4E75                       		rts	
0000761A                            
0000761A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000761A                            
0000761A                            
0000761A                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
0000761A 43F8 B000                  		lea	($FFFFB000).w,a1
0000761E D86B 0004                  		add.w	4(a3),d4
00007622 DA53                       		add.w	(a3),d5
00007624 3604                       		move.w	d4,d3
00007626 E24B                       		lsr.w	#1,d3
00007628 0243 0380                  		andi.w	#$380,d3
0000762C E64D                       		lsr.w	#3,d5
0000762E 3005                       		move.w	d5,d0
00007630 EA48                       		lsr.w	#5,d0
00007632 0240 007F                  		andi.w	#$7F,d0
00007636 D043                       		add.w	d3,d0
00007638 76FF                       		moveq	#-1,d3
0000763A 1634 0000                  		move.b	(a4,d0.w),d3
0000763E 6700                       		beq.s	locret_6C1E
00007640 5303                       		subq.b	#1,d3
00007642 0243 007F                  		andi.w	#$7F,d3
00007646 EE5B                       		ror.w	#7,d3
00007648 D844                       		add.w	d4,d4
0000764A 0244 01E0                  		andi.w	#$1E0,d4
0000764E 0245 001E                  		andi.w	#$1E,d5
00007652 D644                       		add.w	d4,d3
00007654 D645                       		add.w	d5,d3
00007656 2043                       		movea.l	d3,a0
00007658 3610                       		move.w	(a0),d3
0000765A 0243 03FF                  		andi.w	#$3FF,d3
0000765E E74B                       		lsl.w	#3,d3
00007660 D2C3                       		adda.w	d3,a1
00007662                            
00007662                            locret_6C1E:
00007662 4E75                       		rts	
00007664                            ; End of function sub_6BD6
00007664                            
00007664                            
00007664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007664                            
00007664                            
00007664                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007664 D86B 0004                  		add.w	4(a3),d4
00007668 DA53                       		add.w	(a3),d5
0000766A 0244 00F0                  		andi.w	#$F0,d4
0000766E 0245 01F0                  		andi.w	#$1F0,d5
00007672 E94C                       		lsl.w	#4,d4
00007674 E44D                       		lsr.w	#2,d5
00007676 D845                       		add.w	d5,d4
00007678 7003                       		moveq	#3,d0
0000767A 4840                       		swap	d0
0000767C 3004                       		move.w	d4,d0
0000767E 4E75                       		rts	
00007680                            ; End of function sub_6C20
00007680                            
00007680                            
00007680                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007680                            ; not used
00007680                            
00007680                            
00007680                            sub_6C3C:
00007680 D86B 0004                  		add.w	4(a3),d4
00007684 DA53                       		add.w	(a3),d5
00007686 0244 00F0                  		andi.w	#$F0,d4
0000768A 0245 01F0                  		andi.w	#$1F0,d5
0000768E E94C                       		lsl.w	#4,d4
00007690 E44D                       		lsr.w	#2,d5
00007692 D845                       		add.w	d5,d4
00007694 7002                       		moveq	#2,d0
00007696 4840                       		swap	d0
00007698 3004                       		move.w	d4,d0
0000769A 4E75                       		rts	
0000769C                            ; End of function sub_6C3C
0000769C                            
0000769C                            ; ---------------------------------------------------------------------------
0000769C                            ; Subroutine to	load tiles as soon as the level	appears
0000769C                            ; ---------------------------------------------------------------------------
0000769C                            
0000769C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000769C                            
0000769C                            
0000769C                            LoadTilesFromStart:			; XREF: Level; EndingSequence
0000769C 4BF9 00C0 0004             		lea	($C00004).l,a5
000076A2 4DF9 00C0 0000             		lea	($C00000).l,a6
000076A8 47F8 F700                  		lea	($FFFFF700).w,a3
000076AC 49F8 A400                  		lea	($FFFFA400).w,a4
000076B0 343C 4000                  		move.w	#$4000,d2
000076B4 6100                       		bsr.s	LoadTilesFromStart2
000076B6 47F8 F708                  		lea	($FFFFF708).w,a3
000076BA 49F8 A440                  		lea	($FFFFA440).w,a4
000076BE 343C 6000                  		move.w	#$6000,d2
000076C2                            ; End of function LoadTilesFromStart
000076C2                            
000076C2                            
000076C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076C2                            
000076C2                            
000076C2                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000076C2 78F0                       		moveq	#-$10,d4
000076C4 7C0F                       		moveq	#$F,d6
000076C6                            
000076C6                            loc_6C82:
000076C6 48E7 0E00                  		movem.l	d4-d6,-(sp)
000076CA 7A00                       		moveq	#0,d5
000076CC 3204                       		move.w	d4,d1
000076CE 6100 FF94                  		bsr.w	sub_6C20
000076D2 3801                       		move.w	d1,d4
000076D4 7A00                       		moveq	#0,d5
000076D6 7C1F                       		moveq	#$1F,d6
000076D8 6100 FE44                  		bsr.w	sub_6ADA
000076DC 4CDF 0070                  		movem.l	(sp)+,d4-d6
000076E0 0644 0010                  		addi.w	#$10,d4
000076E4 51CE FFE0                  		dbf	d6,loc_6C82
000076E8 4E75                       		rts	
000076EA                            ; End of function LoadTilesFromStart2
000076EA                            
000076EA                            ; ---------------------------------------------------------------------------
000076EA                            ; Main Load Block loading subroutine
000076EA                            ; ---------------------------------------------------------------------------
000076EA                            
000076EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076EA                            
000076EA                            
000076EA                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000076EA 7000                       		moveq	#0,d0
000076EC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000076F0 E948                       		lsl.w	#4,d0
000076F2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000076F8 45F2 0000                  		lea	(a2,d0.w),a2
000076FC 2F0A                       		move.l	a2,-(sp)
000076FE 588A                       		addq.l	#4,a2
00007700 205A                       		movea.l	(a2)+,a0
00007702 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007706 303C 0000                  		move.w	#0,d0
0000770A 6100 A24A                  		bsr.w	EniDec
0000770E 205A                       		movea.l	(a2)+,a0
00007710 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007716 6100 A3BC                  		bsr.w	KosDec
0000771A 6100 0000                  		bsr.w	LevelLayoutLoad
0000771E 301A                       		move.w	(a2)+,d0
00007720 3012                       		move.w	(a2),d0
00007722 0240 00FF                  		andi.w	#$FF,d0
00007726 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000772C 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000772E 700C                       		moveq	#$C,d0		; use SB3 pallet
00007730                            
00007730                            MLB_ChkSBZPal:
00007730 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007736 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007738 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000773E 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007740                            
00007740                            MLB_UsePal0E:
00007740 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007742                            
00007742                            MLB_NormalPal:
00007742 6100 ABBC                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007746 245F                       		movea.l	(sp)+,a2
00007748 584A                       		addq.w	#4,a2
0000774A 7000                       		moveq	#0,d0
0000774C 1012                       		move.b	(a2),d0
0000774E 6700                       		beq.s	locret_6D10
00007750 6100 A066                  		bsr.w	LoadPLC		; load pattern load cues
00007754                            
00007754                            locret_6D10:
00007754 4E75                       		rts	
00007756                            ; End of function MainLoadBlockLoad
00007756                            
00007756                            ; ---------------------------------------------------------------------------
00007756                            ; Level	layout loading subroutine
00007756                            ; ---------------------------------------------------------------------------
00007756                            
00007756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007756                            
00007756                            
00007756                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007756 47F8 A400                  		lea	($FFFFA400).w,a3
0000775A 323C 01FF                  		move.w	#$1FF,d1
0000775E 7000                       		moveq	#0,d0
00007760                            
00007760                            LevLoad_ClrRam:
00007760 26C0                       		move.l	d0,(a3)+
00007762 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007766                            
00007766 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
0000776A 7200                       		moveq	#0,d1
0000776C 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007770 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007774 7202                       		moveq	#2,d1
00007776                            ; End of function LevelLayoutLoad
00007776                            
00007776                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007776                            
00007776                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007776                            
00007776                            
00007776                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007776 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000777A ED08                       		lsl.b	#6,d0
0000777C EA48                       		lsr.w	#5,d0
0000777E 3400                       		move.w	d0,d2
00007780 D040                       		add.w	d0,d0
00007782 D042                       		add.w	d2,d0
00007784 D041                       		add.w	d1,d0
00007786 43F9 0000 0000             		lea	(Level_Index).l,a1
0000778C 3031 0000                  		move.w	(a1,d0.w),d0
00007790 43F1 0000                  		lea	(a1,d0.w),a1
00007794 7200                       		moveq	#0,d1
00007796 3401                       		move.w	d1,d2
00007798 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000779A 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000779C                            
0000779C                            LevLoad_NumRows:
0000779C 3001                       		move.w	d1,d0
0000779E 204B                       		movea.l	a3,a0
000077A0                            
000077A0                            LevLoad_Row:
000077A0 10D9                       		move.b	(a1)+,(a0)+
000077A2 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000077A6 47EB 0080                  		lea	$80(a3),a3	; do next row
000077AA 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000077AE 4E75                       		rts	
000077B0                            ; End of function LevelLayoutLoad2
000077B0                            
000077B0                            ; ---------------------------------------------------------------------------
000077B0                            ; Dynamic screen resize	loading	subroutine
000077B0                            ; ---------------------------------------------------------------------------
000077B0                            
000077B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077B0                            
000077B0                            
000077B0                            DynScrResizeLoad:			; XREF: DeformBgLayer
000077B0 7000                       		moveq	#0,d0
000077B2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000077B6 D040                       		add.w	d0,d0
000077B8 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000077BC 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000077C0 7202                       		moveq	#2,d1
000077C2 3038 F726                  		move.w	($FFFFF726).w,d0
000077C6 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000077CA 6700                       		beq.s	locret_6DAA
000077CC 6400                       		bcc.s	loc_6DAC
000077CE 4441                       		neg.w	d1
000077D0 3038 F704                  		move.w	($FFFFF704).w,d0
000077D4 B078 F726                  		cmp.w	($FFFFF726).w,d0
000077D8 6300                       		bls.s	loc_6DA0
000077DA 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000077DE 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000077E4                            
000077E4                            loc_6DA0:
000077E4 D378 F72E                  		add.w	d1,($FFFFF72E).w
000077E8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000077EE                            
000077EE                            locret_6DAA:
000077EE 4E75                       		rts	
000077F0                            ; ===========================================================================
000077F0                            
000077F0                            loc_6DAC:				; XREF: DynScrResizeLoad
000077F0 3038 F704                  		move.w	($FFFFF704).w,d0
000077F4 5040                       		addq.w	#8,d0
000077F6 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000077FA 6500                       		bcs.s	loc_6DC4
000077FC 0838 0001 D022             		btst	#1,($FFFFD022).w
00007802 6700                       		beq.s	loc_6DC4
00007804 D241                       		add.w	d1,d1
00007806 D241                       		add.w	d1,d1
00007808                            
00007808                            loc_6DC4:
00007808 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000780C 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007812 4E75                       		rts	
00007814                            ; End of function DynScrResizeLoad
00007814                            
00007814                            ; ===========================================================================
00007814                            ; ---------------------------------------------------------------------------
00007814                            ; Offset index for dynamic screen resizing
00007814                            ; ---------------------------------------------------------------------------
00007814 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007818 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000781C 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007820 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
00007824                            ; ===========================================================================
00007824                            ; ---------------------------------------------------------------------------
00007824                            ; Green	Hill Zone dynamic screen resizing
00007824                            ; ---------------------------------------------------------------------------
00007824                            
00007824                            Resize_GHZ:				; XREF: Resize_Index
00007824 7000                       		moveq	#0,d0
00007826 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000782A D040                       		add.w	d0,d0
0000782C 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007830 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007834                            ; ===========================================================================
00007834 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007836 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007838 0000                       		dc.w Resize_GHZ3-Resize_GHZx
0000783A                            ; ===========================================================================
0000783A                            
0000783A                            Resize_GHZ1:
0000783A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007840 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007846 6500                       		bcs.s	locret_6E08	; if not, branch
00007848 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000784E                            
0000784E                            locret_6E08:
0000784E 4E75                       		rts	
00007850                            ; ===========================================================================
00007850                            
00007850                            Resize_GHZ2:
00007850 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007856 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
0000785C 6500                       		bcs.s	locret_6E3A
0000785E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007864 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
0000786A 6500                       		bcs.s	locret_6E3A
0000786C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007872 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
00007878 6500                       		bcs.s	locret_6E3A
0000787A 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
00007880 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
00007886 6500                       		bcs.s	locret_6E3A
00007888 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
0000788E                            		
0000788E                            locret_6E3A:
0000788E 4E75                       		rts	
00007890                            ; ===========================================================================
00007890                            
00007890                            Resize_GHZ3:
00007890 7000                       		moveq	#0,d0
00007892 1038 F742                  		move.b	($FFFFF742).w,d0
00007896 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000789A 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000789E                            ; ===========================================================================
0000789E 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000078A0 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000078A2 0000                       		dc.w Resize_GHZ3end-off_6E4A
000078A4                            ; ===========================================================================
000078A4                            
000078A4                            Resize_GHZ3main:
000078A4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078AA 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000078B0 6500                       		bcs.s	locret_6E96
000078B2 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000078B8 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000078BE 6500                       		bcs.s	locret_6E96
000078C0 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000078C6 6500                       		bcs.s	loc_6E98
000078C8 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000078CE 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000078D4 6400                       		bcc.s	loc_6E8E
000078D6 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000078DC 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000078E2                            
000078E2                            loc_6E8E:
000078E2 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000078E8 6400                       		bcc.s	loc_6E98
000078EA                            
000078EA                            locret_6E96:
000078EA 4E75                       		rts	
000078EC                            ; ===========================================================================
000078EC                            
000078EC                            loc_6E98:
000078EC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000078F6 4E75                       		rts	
000078F8                            ; ===========================================================================
000078F8                            
000078F8                            Resize_GHZ3boss:
000078F8 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000078FE 6400                       		bcc.s	loc_6EB0
00007900 5538 F742                  		subq.b	#2,($FFFFF742).w
00007904                            
00007904                            loc_6EB0:
00007904 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000790A 6500                       		bcs.s	locret_6EE8
0000790C 6100 0000                  		bsr.w	SingleObjLoad
00007910 6600                       		bne.s	loc_6ED0
00007912 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007916 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000791C 337C 0280 000C             		move.w	#$280,$C(a1)
00007922                            
00007922                            loc_6ED0:
00007922 303C 008C                  		move.w	#$8C,d0
00007926 6100 9CA6                  		bsr.w	PlaySound	; play boss music
0000792A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007930 5438 F742                  		addq.b	#2,($FFFFF742).w
00007934 7011                       		moveq	#$11,d0
00007936 6000 9E80                  		bra.w	LoadPLC		; load boss patterns
0000793A                            ; ===========================================================================
0000793A                            
0000793A                            locret_6EE8:
0000793A 4E75                       		rts	
0000793C                            ; ===========================================================================
0000793C                            
0000793C                            Resize_GHZ3end:
0000793C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007942 4E75                       		rts	
00007944                            ; ===========================================================================
00007944                            ; ---------------------------------------------------------------------------
00007944                            ; Labyrinth Zone dynamic screen	resizing
00007944                            ; ---------------------------------------------------------------------------
00007944                            
00007944                            Resize_LZ:				; XREF: Resize_Index
00007944 7000                       		moveq	#0,d0
00007946 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000794A D040                       		add.w	d0,d0
0000794C 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007950 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007954                            ; ===========================================================================
00007954 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007956 0000                       		dc.w Resize_LZ12-Resize_LZx
00007958 0000                       		dc.w Resize_LZ3-Resize_LZx
0000795A 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000795C                            ; ===========================================================================
0000795C                            
0000795C                            Resize_LZ12:
0000795C 4E75                       		rts	
0000795E                            ; ===========================================================================
0000795E                            
0000795E                            Resize_LZ3:
0000795E 7000                       		moveq	#0,d0
00007960 1038 F742                  		move.b	($FFFFF742).w,d0
00007964 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007968 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
0000796C                            ; ===========================================================================
0000796C                            off_6E4A2:	
0000796C 0000                       		dc.w Resize_LZ3boss-off_6E4A2
0000796E 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007970                            ; ===========================================================================
00007970                            Resize_LZ3boss:
00007970 4A38 F742                  		tst.b	($FFFFF742).w
00007974 6600                       		bne.s	locret_6F62
00007976 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000797C 6500                       		bcs.s	locret_6F62
0000797E 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007984 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000798A                            
0000798A 6100 0000                  		bsr.w	SingleObjLoad
0000798E 6600                       		bne.s	loc_6F4A
00007990 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007994 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
0000799A 337C 06E0 000C             		move.w	#$6E0,$C(a1)
000079A0                            loc_6F4A:
000079A0 303C 008C                  		move.w	#$8C,d0
000079A4 6100 9C28                  		bsr.w	PlaySound	; play boss music
000079A8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079AE 5438 F742                  		addq.b	#2,($FFFFF742).w
000079B2 7022                       		moveq	#$22,d0
000079B4 6000 9E02                  		bra.w	LoadPLC		; load boss patterns
000079B8                            ; ===========================================================================
000079B8                            
000079B8                            locret_6F62:
000079B8 4E75                       		rts	
000079BA                            ; ===========================================================================
000079BA                            
000079BA                            Resize_LZ3end:
000079BA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000079C0 4E75                       		rts	
000079C2                            ; ===========================================================================
000079C2                            
000079C2                            Resize_SBZ3:
000079C2 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000079C8 6500                       		bcs.s	locret_6F8C
000079CA 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000079D0 6400                       		bcc.s	locret_6F8C	; if not, branch
000079D2 4238 FE30                  		clr.b	($FFFFFE30).w
000079D6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000079DC 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000079E2 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000079E8                            
000079E8                            locret_6F8C:
000079E8 4E75                       		rts	
000079EA                            ; ===========================================================================
000079EA                            ; ---------------------------------------------------------------------------
000079EA                            ; Marble Zone dynamic screen resizing
000079EA                            ; ---------------------------------------------------------------------------
000079EA                            
000079EA                            Resize_MZ:				; XREF: Resize_Index
000079EA 7000                       		moveq	#0,d0
000079EC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000079F0 D040                       		add.w	d0,d0
000079F2 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000079F6 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000079FA                            ; ===========================================================================
000079FA 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000079FC 0000                       		dc.w Resize_MZ2-Resize_MZx
000079FE 0000                       		dc.w Resize_MZ3-Resize_MZx
00007A00                            ; ===========================================================================
00007A00                            
00007A00                            Resize_MZ1:
00007A00 7000                       		moveq	#0,d0
00007A02 1038 F742                  		move.b	($FFFFF742).w,d0
00007A06 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007A0A 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007A0E                            ; ===========================================================================
00007A0E 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007A10 0000                       		dc.w loc_6FEA-off_6FB2
00007A12 0000                       		dc.w loc_702E-off_6FB2
00007A14 0000                       		dc.w loc_7050-off_6FB2
00007A16                            ; ===========================================================================
00007A16                            
00007A16                            loc_6FBA:
00007A16 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007A1C 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007A22 6500                       		bcs.s	locret_6FE8
00007A24 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007A2A 0C78 09A0 F700             		cmpi.w	#$9A0,($FFFFF700).w
00007A30 6500                       		bcs.s	locret_6FE8
00007A32 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A38 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A3E 6500                       		bcs.s	locret_6FE8
00007A40 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A44                            
00007A44                            locret_6FE8:
00007A44 4E75                       		rts	
00007A46                            ; ===========================================================================
00007A46                            
00007A46                            loc_6FEA:
00007A46 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A4C 6400                       		bcc.s	loc_6FF8
00007A4E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007A52 4E75                       		rts	
00007A54                            ; ===========================================================================
00007A54                            
00007A54                            loc_6FF8:
00007A54 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007A5A 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007A60 6400                       		bcc.s	locret_702C
00007A62 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007A68 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A6E 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007A74 6400                       		bcc.s	locret_702C
00007A76 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007A7C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007A82 6500                       		bcs.s	locret_702C
00007A84 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A88                            
00007A88                            locret_702C:
00007A88 4E75                       		rts	
00007A8A                            ; ===========================================================================
00007A8A                            
00007A8A                            loc_702E:
00007A8A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007A90 6400                       		bcc.s	loc_703C
00007A92 5538 F742                  		subq.b	#2,($FFFFF742).w
00007A96 4E75                       		rts	
00007A98                            ; ===========================================================================
00007A98                            
00007A98                            loc_703C:
00007A98 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007A9E 6500                       		bcs.s	locret_704E
00007AA0 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007AA6 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AAA                            
00007AAA                            locret_704E:
00007AAA 4E75                       		rts	
00007AAC                            ; ===========================================================================
00007AAC                            
00007AAC                            loc_7050:
00007AAC 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007AB2 6500                       		bcs.s	locret_7072
00007AB4 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007ABA 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007AC0 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007AC6 6500                       		bcs.s	locret_7072
00007AC8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007ACE                            
00007ACE                            locret_7072:
00007ACE 4E75                       		rts	
00007AD0                            ; ===========================================================================
00007AD0                            
00007AD0                            Resize_MZ2:
00007AD0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007AD6 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007ADC 6500                       		bcs.s	locret_7088
00007ADE 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007AE4                            
00007AE4                            locret_7088:
00007AE4 4E75                       		rts	
00007AE6                            ; ===========================================================================
00007AE6                            
00007AE6                            Resize_MZ3:
00007AE6 7000                       		moveq	#0,d0
00007AE8 1038 F742                  		move.b	($FFFFF742).w,d0
00007AEC 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007AF0 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007AF4                            ; ===========================================================================
00007AF4 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007AF6 0000                       		dc.w Resize_MZ3end-off_7098
00007AF8                            ; ===========================================================================
00007AF8                            
00007AF8                            Resize_MZ3boss:
00007AF8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007AFE 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007B04 6500                       		bcs.s	locret_70E8
00007B06 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B0C 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007B12 6500                       		bcs.s	locret_70E8
00007B14 6100 0000                  		bsr.w	SingleObjLoad
00007B18 6600                       		bne.s	loc_70D0
00007B1A 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007B1E 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007B24 337C 022C 000C             		move.w	#$22C,$C(a1)
00007B2A                            
00007B2A                            loc_70D0:
00007B2A 303C 008C                  		move.w	#$8C,d0
00007B2E 6100 9A9E                  		bsr.w	PlaySound	; play boss music
00007B32 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B38 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B3C 7011                       		moveq	#$11,d0
00007B3E 6000 9C78                  		bra.w	LoadPLC		; load boss patterns
00007B42                            ; ===========================================================================
00007B42                            
00007B42                            locret_70E8:
00007B42 4E75                       		rts	
00007B44                            ; ===========================================================================
00007B44                            
00007B44                            Resize_MZ3end:
00007B44 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007B4A 4E75                       		rts	
00007B4C                            ; ===========================================================================
00007B4C                            ; ---------------------------------------------------------------------------
00007B4C                            ; Star Light Zone dynamic screen resizing
00007B4C                            ; ---------------------------------------------------------------------------
00007B4C                            
00007B4C                            Resize_SLZ:				; XREF: Resize_Index
00007B4C 7000                       		moveq	#0,d0
00007B4E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007B52 D040                       		add.w	d0,d0
00007B54 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007B58 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007B5C                            ; ===========================================================================
00007B5C 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007B5E 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007B60 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007B62                            ; ===========================================================================
00007B62                            
00007B62                            Resize_SLZ1:
00007B62 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00007B68 4E75                       		rts	
00007B6A                            
00007B6A                            Resize_SLZ2:
00007B6A 4E75                       		rts	
00007B6C                            ; ===========================================================================
00007B6C                            
00007B6C                            Resize_SLZ3:
00007B6C 7000                       		moveq	#0,d0
00007B6E 1038 F742                  		move.b	($FFFFF742).w,d0
00007B72 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007B76 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007B7A                            ; ===========================================================================
00007B7A 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007B7C 0000                       		dc.w Resize_SLZ3boss-off_7118
00007B7E 0000                       		dc.w Resize_SLZ3end-off_7118
00007B80                            ; ===========================================================================
00007B80                            
00007B80                            Resize_SLZ3main:
00007B80 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007B86 6500                       		bcs.s	locret_7130
00007B88 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B8E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B92                            
00007B92                            locret_7130:
00007B92 4E75                       		rts	
00007B94                            ; ===========================================================================
00007B94                            
00007B94                            Resize_SLZ3boss:
00007B94 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007B9A 6500                       		bcs.s	locret_715C
00007B9C 6100 0000                  		bsr.w	SingleObjLoad
00007BA0 6600                       		bne.s	loc_7144
00007BA2 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007BA6                            
00007BA6                            loc_7144:
00007BA6 303C 008C                  		move.w	#$8C,d0
00007BAA 6100 9A22                  		bsr.w	PlaySound	; play boss music
00007BAE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007BB4 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BB8 7011                       		moveq	#$11,d0
00007BBA 6000 9BFC                  		bra.w	LoadPLC		; load boss patterns
00007BBE                            ; ===========================================================================
00007BBE                            
00007BBE                            locret_715C:
00007BBE 4E75                       		rts	
00007BC0                            ; ===========================================================================
00007BC0                            
00007BC0                            Resize_SLZ3end:
00007BC0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007BC6 4E75                       		rts
00007BC8 4E75                       		rts
00007BCA                            ; ===========================================================================
00007BCA                            ; ---------------------------------------------------------------------------
00007BCA                            ; Spring Yard Zone dynamic screen resizing
00007BCA                            ; ---------------------------------------------------------------------------
00007BCA                            
00007BCA                            Resize_SYZ:				; XREF: Resize_Index
00007BCA 7000                       		moveq	#0,d0
00007BCC 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007BD0 D040                       		add.w	d0,d0
00007BD2 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007BD6 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007BDA                            ; ===========================================================================
00007BDA 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007BDC 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007BDE 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007BE0                            ; ===========================================================================
00007BE0                            
00007BE0                            Resize_SYZ1:
00007BE0 4E75                       		rts	
00007BE2                            ; ===========================================================================
00007BE2                            
00007BE2                            Resize_SYZ2:
00007BE2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007BE8 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007BEE 6500                       		bcs.s	locret_71A2
00007BF0 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007BF6 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007BFC 6500                       		bcs.s	locret_71A2
00007BFE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C04                            
00007C04                            locret_71A2:
00007C04 4E75                       		rts	
00007C06                            ; ===========================================================================
00007C06                            
00007C06                            Resize_SYZ3:
00007C06 7000                       		moveq	#0,d0
00007C08 1038 F742                  		move.b	($FFFFF742).w,d0
00007C0C 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007C10 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007C14                            ; ===========================================================================
00007C14 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007C16 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007C18 0000                       		dc.w Resize_SYZ3end-off_71B2
00007C1A                            ; ===========================================================================
00007C1A                            
00007C1A                            Resize_SYZ3main:
00007C1A 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007C20 6500                       		bcs.s	locret_71CE
00007C22 6100 0000                  		bsr.w	SingleObjLoad
00007C26 6600                       		bne.s	locret_71CE
00007C28 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007C2C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C30                            
00007C30                            locret_71CE:
00007C30 4E75                       		rts	
00007C32                            ; ===========================================================================
00007C32                            
00007C32                            Resize_SYZ3boss:
00007C32 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007C38 6500                       		bcs.s	locret_7200
00007C3A 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007C40 6100 0000                  		bsr.w	SingleObjLoad
00007C44 6600                       		bne.s	loc_71EC
00007C46 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007C4A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C4E                            
00007C4E                            loc_71EC:
00007C4E 303C 008C                  		move.w	#$8C,d0
00007C52 6100 997A                  		bsr.w	PlaySound	; play boss music
00007C56 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007C5C 7011                       		moveq	#$11,d0
00007C5E 6000 9B58                  		bra.w	LoadPLC		; load boss patterns
00007C62                            ; ===========================================================================
00007C62                            
00007C62                            locret_7200:
00007C62 4E75                       		rts	
00007C64                            ; ===========================================================================
00007C64                            
00007C64                            Resize_SYZ3end:
00007C64 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007C6A 4E75                       		rts	
00007C6C                            ; ===========================================================================
00007C6C                            ; ---------------------------------------------------------------------------
00007C6C                            ; Scrap	Brain Zone dynamic screen resizing
00007C6C                            ; ---------------------------------------------------------------------------
00007C6C                            
00007C6C                            Resize_SBZ:				; XREF: Resize_Index
00007C6C 7000                       		moveq	#0,d0
00007C6E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007C72 D040                       		add.w	d0,d0
00007C74 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007C78 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007C7C                            ; ===========================================================================
00007C7C 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007C7E 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007C80 0000                       		dc.w Resize_FZ-Resize_SBZx
00007C82                            ; ===========================================================================
00007C82                            
00007C82                            Resize_SBZ1:
00007C82 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007C88 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007C8E 6500                       		bcs.s	locret_7242
00007C90 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007C96 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007C9C 6500                       		bcs.s	locret_7242
00007C9E 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007CA4                            
00007CA4                            locret_7242:
00007CA4 4E75                       		rts	
00007CA6                            ; ===========================================================================
00007CA6                            
00007CA6                            Resize_SBZ2:
00007CA6 7000                       		moveq	#0,d0
00007CA8 1038 F742                  		move.b	($FFFFF742).w,d0
00007CAC 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007CB0 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007CB4                            ; ===========================================================================
00007CB4 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007CB6 0000                       		dc.w Resize_SBZ2boss-off_7252
00007CB8 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007CBA 0000                       		dc.w Resize_SBZ2end-off_7252
00007CBC                            ; ===========================================================================
00007CBC                            
00007CBC                            Resize_SBZ2main:
00007CBC 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007CC2 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007CC8 6500                       		bcs.s	locret_727A
00007CCA 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007CD0 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007CD6 6500                       		bcs.s	locret_727A
00007CD8 5438 F742                  		addq.b	#2,($FFFFF742).w
00007CDC                            
00007CDC                            locret_727A:
00007CDC 4E75                       		rts	
00007CDE                            ; ===========================================================================
00007CDE                            
00007CDE                            Resize_SBZ2boss:
00007CDE 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007CE4 6500                       		bcs.s	locret_7298
00007CE6 6100 0000                  		bsr.w	SingleObjLoad
00007CEA 6600                       		bne.s	locret_7298
00007CEC 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007CF0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007CF4 701E                       		moveq	#$1E,d0
00007CF6 6000 9AC0                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007CFA                            ; ===========================================================================
00007CFA                            
00007CFA                            locret_7298:
00007CFA 4E75                       		rts	
00007CFC                            ; ===========================================================================
00007CFC                            
00007CFC                            Resize_SBZ2boss2:
00007CFC 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007D02 6500                       		bcs.s	loc_72B6
00007D04 6100 0000                  		bsr.w	SingleObjLoad
00007D08 6600                       		bne.s	loc_72B0
00007D0A 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007D0E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D12                            
00007D12                            loc_72B0:
00007D12 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D18                            
00007D18                            loc_72B6:
00007D18 6000                       		bra.s	loc_72C2
00007D1A                            ; ===========================================================================
00007D1A                            
00007D1A                            Resize_SBZ2end:
00007D1A 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007D20 6500                       		bcs.s	loc_72C2
00007D22 4E75                       		rts	
00007D24                            ; ===========================================================================
00007D24                            
00007D24                            loc_72C2:
00007D24 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007D2A 4E75                       		rts	
00007D2C                            ; ===========================================================================
00007D2C                            
00007D2C                            Resize_FZ:
00007D2C 7000                       		moveq	#0,d0
00007D2E 1038 F742                  		move.b	($FFFFF742).w,d0
00007D32 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007D36 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007D3A                            ; ===========================================================================
00007D3A 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007D3E 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007D42 0000                       		dc.w Resize_FZend2-off_72D8
00007D44                            ; ===========================================================================
00007D44                            
00007D44                            Resize_FZmain:
00007D44 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007D4A 6500                       		bcs.s	loc_72F4
00007D4C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D50 701F                       		moveq	#$1F,d0
00007D52 6100 9A64                  		bsr.w	LoadPLC		; load FZ boss patterns
00007D56 103C 00E0                  		move.b	#$E0,d0		; fade song
00007D5A 4EB8 15D4                  		jsr	PlaySound_Special
00007D5E                            loc_72F4:
00007D5E 60C4                       		bra.s	loc_72C2
00007D60                            ; ===========================================================================
00007D60                            
00007D60                            Resize_FZboss:
00007D60 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007D66 6500                       		bcs.s	loc_7312
00007D68 6100 0000                  		bsr.w	SingleObjLoad
00007D6C 6600                       		bne.s	loc_7312
00007D6E 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007D72 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D76 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D7C                            
00007D7C                            loc_7312:
00007D7C 60A6                       		bra.s	loc_72C2
00007D7E                            ; ===========================================================================
00007D7E                            
00007D7E                            Resize_FZend:
00007D7E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007D84 6500                       		bcs.s	loc_7320
00007D86 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D8A                            
00007D8A                            loc_7320:
00007D8A 6098                       		bra.s	loc_72C2
00007D8C                            ; ===========================================================================
00007D8C                            
00007D8C                            locret_7322:
00007D8C 4E75                       		rts	
00007D8E                            ; ===========================================================================
00007D8E                            
00007D8E                            Resize_FZend2:
00007D8E 6094                       		bra.s	loc_72C2
00007D90                            ; ===========================================================================
00007D90                            ; ---------------------------------------------------------------------------
00007D90                            ; Ending sequence dynamic screen resizing (empty)
00007D90                            ; ---------------------------------------------------------------------------
00007D90                            
00007D90                            Resize_Ending:				; XREF: Resize_Index
00007D90 4E75                       		rts	
00007D92                            ; ===========================================================================
00007D92                            ; ---------------------------------------------------------------------------
00007D92                            ; Object 11 - GHZ bridge
00007D92                            ; ---------------------------------------------------------------------------
00007D92                            
00007D92                            Obj11:					; XREF: Obj_Index
00007D92 7000                       		moveq	#0,d0
00007D94 1028 0024                  		move.b	$24(a0),d0
00007D98 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007D9C 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007DA0                            ; ===========================================================================
00007DA0 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007DA4 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007DA8 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007DAC                            ; ===========================================================================
00007DAC                            
00007DAC                            Obj11_Main:				; XREF: Obj11_Index
00007DAC 5428 0024                  		addq.b	#2,$24(a0)
00007DB0 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007DB8 317C 438E 0002             		move.w	#$438E,2(a0)
00007DBE 117C 0004 0001             		move.b	#4,1(a0)
00007DC4 117C 0003 0018             		move.b	#3,$18(a0)
00007DCA 117C 0080 0019             		move.b	#$80,$19(a0)
00007DD0 3428 000C                  		move.w	$C(a0),d2
00007DD4 3628 0008                  		move.w	8(a0),d3
00007DD8 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007DDA 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007DDE 7200                       		moveq	#0,d1
00007DE0 1212                       		move.b	(a2),d1		; copy a2 to d1
00007DE2 14FC 0000                  		move.b	#0,(a2)+
00007DE6 3001                       		move.w	d1,d0
00007DE8 E248                       		lsr.w	#1,d0
00007DEA E948                       		lsl.w	#4,d0
00007DEC 9640                       		sub.w	d0,d3
00007DEE 5501                       		subq.b	#2,d1
00007DF0 6500                       		bcs.s	Obj11_Action
00007DF2                            
00007DF2                            Obj11_MakeBdg:
00007DF2 6100 0000                  		bsr.w	SingleObjLoad
00007DF6 6600                       		bne.s	Obj11_Action
00007DF8 5228 0028                  		addq.b	#1,$28(a0)
00007DFC B668 0008                  		cmp.w	8(a0),d3
00007E00 6600                       		bne.s	loc_73B8
00007E02 0643 0010                  		addi.w	#$10,d3
00007E06 3142 000C                  		move.w	d2,$C(a0)
00007E0A 3142 003C                  		move.w	d2,$3C(a0)
00007E0E 3A08                       		move.w	a0,d5
00007E10 0445 D000                  		subi.w	#-$3000,d5
00007E14 EC4D                       		lsr.w	#6,d5
00007E16 0245 007F                  		andi.w	#$7F,d5
00007E1A 14C5                       		move.b	d5,(a2)+
00007E1C 5228 0028                  		addq.b	#1,$28(a0)
00007E20                            
00007E20                            loc_73B8:				; XREF: ROM:00007398j
00007E20 3A09                       		move.w	a1,d5
00007E22 0445 D000                  		subi.w	#-$3000,d5
00007E26 EC4D                       		lsr.w	#6,d5
00007E28 0245 007F                  		andi.w	#$7F,d5
00007E2C 14C5                       		move.b	d5,(a2)+
00007E2E 137C 000A 0024             		move.b	#$A,$24(a1)
00007E34 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007E36 3342 000C                  		move.w	d2,$C(a1)
00007E3A 3342 003C                  		move.w	d2,$3C(a1)
00007E3E 3343 0008                  		move.w	d3,8(a1)
00007E42 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007E4A 337C 438E 0002             		move.w	#$438E,2(a1)
00007E50 137C 0004 0001             		move.b	#4,1(a1)
00007E56 137C 0003 0018             		move.b	#3,$18(a1)
00007E5C 137C 0008 0019             		move.b	#8,$19(a1)
00007E62 0643 0010                  		addi.w	#$10,d3
00007E66 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007E6A                            
00007E6A                            Obj11_Action:				; XREF: Obj11_Index
00007E6A 6100                       		bsr.s	Obj11_Solid
00007E6C 4A28 003E                  		tst.b	$3E(a0)
00007E70 6700                       		beq.s	Obj11_Display
00007E72 5928 003E                  		subq.b	#4,$3E(a0)
00007E76 6100 0000                  		bsr.w	Obj11_Bend
00007E7A                            
00007E7A                            Obj11_Display:
00007E7A 6100 0000                  		bsr.w	DisplaySprite
00007E7E 6000 0000                  		bra.w	Obj11_ChkDel
00007E82                            
00007E82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E82                            
00007E82                            
00007E82                            Obj11_Solid:				; XREF: Obj11_Action
00007E82 7200                       		moveq	#0,d1
00007E84 1228 0028                  		move.b	$28(a0),d1
00007E88 E749                       		lsl.w	#3,d1
00007E8A 3401                       		move.w	d1,d2
00007E8C 5041                       		addq.w	#8,d1
00007E8E D442                       		add.w	d2,d2
00007E90 43F8 D000                  		lea	($FFFFD000).w,a1
00007E94 4A69 0012                  		tst.w	$12(a1)
00007E98 6B00 0000                  		bmi.w	locret_751E
00007E9C 3029 0008                  		move.w	8(a1),d0
00007EA0 9068 0008                  		sub.w	8(a0),d0
00007EA4 D041                       		add.w	d1,d0
00007EA6 6B00 0000                  		bmi.w	locret_751E
00007EAA B042                       		cmp.w	d2,d0
00007EAC 6400 0000                  		bcc.w	locret_751E
00007EB0 6000                       		bra.s	Platform2
00007EB2                            ; End of function Obj11_Solid
00007EB2                            
00007EB2                            ; ---------------------------------------------------------------------------
00007EB2                            ; Platform subroutine
00007EB2                            ; ---------------------------------------------------------------------------
00007EB2                            
00007EB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EB2                            
00007EB2                            
00007EB2                            PlatformObject:
00007EB2 43F8 D000                  		lea	($FFFFD000).w,a1
00007EB6 4A69 0012                  		tst.w	$12(a1)
00007EBA 6B00 0000                  		bmi.w	locret_751E
00007EBE 3029 0008                  		move.w	8(a1),d0
00007EC2 9068 0008                  		sub.w	8(a0),d0
00007EC6 D041                       		add.w	d1,d0
00007EC8 6B00 0000                  		bmi.w	locret_751E
00007ECC D241                       		add.w	d1,d1
00007ECE B041                       		cmp.w	d1,d0
00007ED0 6400 0000                  		bcc.w	locret_751E
00007ED4                            
00007ED4                            Platform2:
00007ED4 3028 000C                  		move.w	$C(a0),d0
00007ED8 5140                       		subq.w	#8,d0
00007EDA                            
00007EDA                            Platform3:
00007EDA 3429 000C                  		move.w	$C(a1),d2
00007EDE 1229 0016                  		move.b	$16(a1),d1
00007EE2 4881                       		ext.w	d1
00007EE4 D242                       		add.w	d2,d1
00007EE6 5841                       		addq.w	#4,d1
00007EE8 9041                       		sub.w	d1,d0
00007EEA 6200 0000                  		bhi.w	locret_751E
00007EEE 0C40 FFF0                  		cmpi.w	#-$10,d0
00007EF2 6500 0000                  		bcs.w	locret_751E
00007EF6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007EFA 6B00 0000                  		bmi.w	locret_751E
00007EFE 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007F04 6400 0000                  		bcc.w	locret_751E
00007F08 D440                       		add.w	d0,d2
00007F0A 5642                       		addq.w	#3,d2
00007F0C 3342 000C                  		move.w	d2,$C(a1)
00007F10 5428 0024                  		addq.b	#2,$24(a0)
00007F14                            
00007F14                            loc_74AE:
00007F14 0829 0003 0022             		btst	#3,$22(a1)
00007F1A 6700                       		beq.s	loc_74DC
00007F1C 7000                       		moveq	#0,d0
00007F1E 1029 003D                  		move.b	$3D(a1),d0
00007F22 ED48                       		lsl.w	#6,d0
00007F24 0680 00FF D000             		addi.l	#$FFD000,d0
00007F2A 2440                       		movea.l	d0,a2
00007F2C 08AA 0003 0022             		bclr	#3,$22(a2)
00007F32 422A 0025                  		clr.b	$25(a2)
00007F36 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007F3C 6600                       		bne.s	loc_74DC
00007F3E 552A 0024                  		subq.b	#2,$24(a2)
00007F42                            
00007F42                            loc_74DC:
00007F42 3008                       		move.w	a0,d0
00007F44 0440 D000                  		subi.w	#-$3000,d0
00007F48 EC48                       		lsr.w	#6,d0
00007F4A 0240 007F                  		andi.w	#$7F,d0
00007F4E 1340 003D                  		move.b	d0,$3D(a1)
00007F52 137C 0000 0026             		move.b	#0,$26(a1)
00007F58 337C 0000 0012             		move.w	#0,$12(a1)
00007F5E 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007F64 0829 0001 0022             		btst	#1,$22(a1)
00007F6A 6700                       		beq.s	loc_7512
00007F6C 2F08                       		move.l	a0,-(sp)
00007F6E 2049                       		movea.l	a1,a0
00007F70 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007F76 205F                       		movea.l	(sp)+,a0
00007F78                            
00007F78                            loc_7512:
00007F78 08E9 0003 0022             		bset	#3,$22(a1)
00007F7E 08E8 0003 0022             		bset	#3,$22(a0)
00007F84                            
00007F84                            locret_751E:
00007F84 4E75                       		rts	
00007F86                            ; End of function PlatformObject
00007F86                            
00007F86                            ; ---------------------------------------------------------------------------
00007F86                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007F86                            ; ---------------------------------------------------------------------------
00007F86                            
00007F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F86                            
00007F86                            
00007F86                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007F86 43F8 D000                  		lea	($FFFFD000).w,a1
00007F8A 4A69 0012                  		tst.w	$12(a1)
00007F8E 6B00 FFF4                  		bmi.w	locret_751E
00007F92 3029 0008                  		move.w	8(a1),d0
00007F96 9068 0008                  		sub.w	8(a0),d0
00007F9A D041                       		add.w	d1,d0
00007F9C 6BE6                       		bmi.s	locret_751E
00007F9E D241                       		add.w	d1,d1
00007FA0 B041                       		cmp.w	d1,d0
00007FA2 64E0                       		bcc.s	locret_751E
00007FA4 0828 0000 0001             		btst	#0,1(a0)
00007FAA 6700                       		beq.s	loc_754A
00007FAC 4640                       		not.w	d0
00007FAE D041                       		add.w	d1,d0
00007FB0                            
00007FB0                            loc_754A:
00007FB0 E248                       		lsr.w	#1,d0
00007FB2 7600                       		moveq	#0,d3
00007FB4 1632 0000                  		move.b	(a2,d0.w),d3
00007FB8 3028 000C                  		move.w	$C(a0),d0
00007FBC 9043                       		sub.w	d3,d0
00007FBE 6000 FF1A                  		bra.w	Platform3
00007FC2                            ; End of function SlopeObject
00007FC2                            
00007FC2                            
00007FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FC2                            
00007FC2                            
00007FC2                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007FC2 43F8 D000                  		lea	($FFFFD000).w,a1
00007FC6 4A69 0012                  		tst.w	$12(a1)
00007FCA 6B00 FFB8                  		bmi.w	locret_751E
00007FCE 3029 0008                  		move.w	8(a1),d0
00007FD2 9068 0008                  		sub.w	8(a0),d0
00007FD6 D041                       		add.w	d1,d0
00007FD8 6B00 FFAA                  		bmi.w	locret_751E
00007FDC D241                       		add.w	d1,d1
00007FDE B041                       		cmp.w	d1,d0
00007FE0 6400 FFA2                  		bcc.w	locret_751E
00007FE4 3028 000C                  		move.w	$C(a0),d0
00007FE8 9043                       		sub.w	d3,d0
00007FEA 6000 FEEE                  		bra.w	Platform3
00007FEE                            ; End of function Obj15_Solid
00007FEE                            
00007FEE                            ; ===========================================================================
00007FEE                            
00007FEE                            Obj11_Action2:				; XREF: Obj11_Index
00007FEE 6100                       		bsr.s	Obj11_WalkOff
00007FF0 6100 0000                  		bsr.w	DisplaySprite
00007FF4 6000 0000                  		bra.w	Obj11_ChkDel
00007FF8                            
00007FF8                            ; ---------------------------------------------------------------------------
00007FF8                            ; Subroutine allowing Sonic to walk off a bridge
00007FF8                            ; ---------------------------------------------------------------------------
00007FF8                            
00007FF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FF8                            
00007FF8                            
00007FF8                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007FF8 7200                       		moveq	#0,d1
00007FFA 1228 0028                  		move.b	$28(a0),d1
00007FFE E749                       		lsl.w	#3,d1
00008000 3401                       		move.w	d1,d2
00008002 5041                       		addq.w	#8,d1
00008004 6100                       		bsr.s	ExitPlatform2
00008006 6400                       		bcc.s	locret_75BE
00008008 E848                       		lsr.w	#4,d0
0000800A 1140 003F                  		move.b	d0,$3F(a0)
0000800E 1028 003E                  		move.b	$3E(a0),d0
00008012 0C00 0040                  		cmpi.b	#$40,d0
00008016 6700                       		beq.s	loc_75B6
00008018 5828 003E                  		addq.b	#4,$3E(a0)
0000801C                            
0000801C                            loc_75B6:
0000801C 6100 0000                  		bsr.w	Obj11_Bend
00008020 6100 0000                  		bsr.w	Obj11_MoveSonic
00008024                            
00008024                            locret_75BE:
00008024 4E75                       		rts	
00008026                            ; End of function Obj11_WalkOff
00008026                            
00008026                            ; ---------------------------------------------------------------------------
00008026                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008026                            ; ---------------------------------------------------------------------------
00008026                            
00008026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008026                            
00008026                            
00008026                            ExitPlatform:
00008026 3401                       		move.w	d1,d2
00008028                            
00008028                            ExitPlatform2:
00008028 D442                       		add.w	d2,d2
0000802A 43F8 D000                  		lea	($FFFFD000).w,a1
0000802E 0829 0001 0022             		btst	#1,$22(a1)
00008034 6600                       		bne.s	loc_75E0
00008036 3029 0008                  		move.w	8(a1),d0
0000803A 9068 0008                  		sub.w	8(a0),d0
0000803E D041                       		add.w	d1,d0
00008040 6B00                       		bmi.s	loc_75E0
00008042 B042                       		cmp.w	d2,d0
00008044 6500                       		bcs.s	locret_75F2
00008046                            
00008046                            loc_75E0:
00008046 08A9 0003 0022             		bclr	#3,$22(a1)
0000804C 117C 0002 0024             		move.b	#2,$24(a0)
00008052 08A8 0003 0022             		bclr	#3,$22(a0)
00008058                            
00008058                            locret_75F2:
00008058 4E75                       		rts	
0000805A                            ; End of function ExitPlatform
0000805A                            
0000805A                            
0000805A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000805A                            
0000805A                            
0000805A                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
0000805A 7000                       		moveq	#0,d0
0000805C 1028 003F                  		move.b	$3F(a0),d0
00008060 1030 0029                  		move.b	$29(a0,d0.w),d0
00008064 ED48                       		lsl.w	#6,d0
00008066 0680 00FF D000             		addi.l	#$FFD000,d0
0000806C 2440                       		movea.l	d0,a2
0000806E 43F8 D000                  		lea	($FFFFD000).w,a1
00008072 302A 000C                  		move.w	$C(a2),d0
00008076 5140                       		subq.w	#8,d0
00008078 7200                       		moveq	#0,d1
0000807A 1229 0016                  		move.b	$16(a1),d1
0000807E 9041                       		sub.w	d1,d0
00008080 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00008084 4E75                       		rts	
00008086                            ; End of function Obj11_MoveSonic
00008086                            
00008086                            
00008086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008086                            
00008086                            
00008086                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00008086 1028 003E                  		move.b	$3E(a0),d0
0000808A 6100 ACE2                  		bsr.w	CalcSine
0000808E 3800                       		move.w	d0,d4
00008090 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008096 7000                       		moveq	#0,d0
00008098 1028 0028                  		move.b	$28(a0),d0
0000809C E948                       		lsl.w	#4,d0
0000809E 7600                       		moveq	#0,d3
000080A0 1628 003F                  		move.b	$3F(a0),d3
000080A4 3403                       		move.w	d3,d2
000080A6 D640                       		add.w	d0,d3
000080A8 7A00                       		moveq	#0,d5
000080AA 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
000080B0 1A35 3000                  		move.b	(a5,d3.w),d5
000080B4 0243 000F                  		andi.w	#$F,d3
000080B8 E94B                       		lsl.w	#4,d3
000080BA 47F4 3000                  		lea	(a4,d3.w),a3
000080BE 45E8 0029                  		lea	$29(a0),a2
000080C2                            
000080C2                            loc_765C:
000080C2 7000                       		moveq	#0,d0
000080C4 101A                       		move.b	(a2)+,d0
000080C6 ED48                       		lsl.w	#6,d0
000080C8 0680 00FF D000             		addi.l	#$FFD000,d0
000080CE 2240                       		movea.l	d0,a1
000080D0 7000                       		moveq	#0,d0
000080D2 101B                       		move.b	(a3)+,d0
000080D4 5240                       		addq.w	#1,d0
000080D6 C0C5                       		mulu.w	d5,d0
000080D8 C0C4                       		mulu.w	d4,d0
000080DA 4840                       		swap	d0
000080DC D069 003C                  		add.w	$3C(a1),d0
000080E0 3340 000C                  		move.w	d0,$C(a1)
000080E4 51CA FFDC                  		dbf	d2,loc_765C
000080E8 7000                       		moveq	#0,d0
000080EA 1028 0028                  		move.b	$28(a0),d0
000080EE 7600                       		moveq	#0,d3
000080F0 1628 003F                  		move.b	$3F(a0),d3
000080F4 5203                       		addq.b	#1,d3
000080F6 9600                       		sub.b	d0,d3
000080F8 4403                       		neg.b	d3
000080FA 6B00                       		bmi.s	locret_76CA
000080FC 3403                       		move.w	d3,d2
000080FE E94B                       		lsl.w	#4,d3
00008100 47F4 3000                  		lea	(a4,d3.w),a3
00008104 D6C2                       		adda.w	d2,a3
00008106 5342                       		subq.w	#1,d2
00008108 6500                       		bcs.s	locret_76CA
0000810A                            
0000810A                            loc_76A4:
0000810A 7000                       		moveq	#0,d0
0000810C 101A                       		move.b	(a2)+,d0
0000810E ED48                       		lsl.w	#6,d0
00008110 0680 00FF D000             		addi.l	#$FFD000,d0
00008116 2240                       		movea.l	d0,a1
00008118 7000                       		moveq	#0,d0
0000811A 1023                       		move.b	-(a3),d0
0000811C 5240                       		addq.w	#1,d0
0000811E C0C5                       		mulu.w	d5,d0
00008120 C0C4                       		mulu.w	d4,d0
00008122 4840                       		swap	d0
00008124 D069 003C                  		add.w	$3C(a1),d0
00008128 3340 000C                  		move.w	d0,$C(a1)
0000812C 51CA FFDC                  		dbf	d2,loc_76A4
00008130                            
00008130                            locret_76CA:
00008130 4E75                       		rts	
00008132                            ; End of function Obj11_Bend
00008132                            
00008132                            ; ===========================================================================
00008132                            ; ---------------------------------------------------------------------------
00008132                            ; GHZ bridge-bending data
00008132                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008132                            ; ---------------------------------------------------------------------------
00008132                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00008242                            		even
00008242                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00008342                            		even
00008342                            
00008342                            ; ===========================================================================
00008342                            
00008342                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00008342 3028 0008                  		move.w	8(a0),d0
00008346 0240 FF80                  		andi.w	#$FF80,d0
0000834A 3238 F700                  		move.w	($FFFFF700).w,d1
0000834E 0441 0080                  		subi.w	#$80,d1
00008352 0241 FF80                  		andi.w	#$FF80,d1
00008356 9041                       		sub.w	d1,d0
00008358 0C40 0280                  		cmpi.w	#$280,d0
0000835C 6200 0000                  		bhi.w	Obj11_DelAll
00008360 4E75                       		rts	
00008362                            ; ===========================================================================
00008362                            
00008362                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00008362 7400                       		moveq	#0,d2
00008364 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008368 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000836A 5302                       		subq.b	#1,d2		; subtract 1
0000836C 6500                       		bcs.s	Obj11_Delete
0000836E                            
0000836E                            Obj11_DelLoop:
0000836E 7000                       		moveq	#0,d0
00008370 101A                       		move.b	(a2)+,d0
00008372 ED48                       		lsl.w	#6,d0
00008374 0680 00FF D000             		addi.l	#$FFD000,d0
0000837A 2240                       		movea.l	d0,a1
0000837C B048                       		cmp.w	a0,d0
0000837E 6700                       		beq.s	loc_791E
00008380 6100 0000                  		bsr.w	DeleteObject2
00008384                            
00008384                            loc_791E:
00008384 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00008388                            
00008388                            Obj11_Delete:
00008388 6100 0000                  		bsr.w	DeleteObject
0000838C 4E75                       		rts	
0000838E                            ; ===========================================================================
0000838E                            
0000838E                            Obj11_Delete2:				; XREF: Obj11_Index
0000838E 6100 0000                  		bsr.w	DeleteObject
00008392 4E75                       		rts	
00008394                            ; ===========================================================================
00008394                            
00008394                            Obj11_Display2:				; XREF: Obj11_Index
00008394 6100 0000                  		bsr.w	DisplaySprite
00008398 4E75                       		rts	
0000839A                            ; ===========================================================================
0000839A                            ; ---------------------------------------------------------------------------
0000839A                            ; Sprite mappings - GHZ	bridge
0000839A                            ; ---------------------------------------------------------------------------
0000839A                            Map_obj11:
0000839A                            	include "_maps\obj11.asm"
0000839A                            ; ---------------------------------------------------------------------------
0000839A                            ; Sprite mappings - GHZ	bridge
0000839A                            ; ---------------------------------------------------------------------------
0000839A 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
0000839E 0000                       		dc.w byte_794B-Map_obj11
000083A0 01                         byte_793A:	dc.b 1
000083A1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000083A6 02                         byte_7940:	dc.b 2
000083A7 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
000083AC 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000083B1 01                         byte_794B:	dc.b 1
000083B2 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
000083B8 00                         		even
000083B8 00                         		even
000083B8                            
000083B8                            ; ===========================================================================
000083B8                            ; ---------------------------------------------------------------------------
000083B8                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000083B8                            ;	    - spiked ball on a chain (SBZ)
000083B8                            ; ---------------------------------------------------------------------------
000083B8                            
000083B8                            Obj15:					; XREF: Obj_Index
000083B8 7000                       		moveq	#0,d0
000083BA 1028 0024                  		move.b	$24(a0),d0
000083BE 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
000083C2 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
000083C6                            ; ===========================================================================
000083C6 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
000083CA 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
000083CE 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
000083D2 0000                       		dc.w Obj15_Action-Obj15_Index
000083D4                            ; ===========================================================================
000083D4                            
000083D4                            Obj15_Main:				; XREF: Obj15_Index
000083D4 5428 0024                  		addq.b	#2,$24(a0)
000083D8 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
000083E0 317C 4380 0002             		move.w	#$4380,2(a0)
000083E6 117C 0004 0001             		move.b	#4,1(a0)
000083EC 117C 0003 0018             		move.b	#3,$18(a0)
000083F2 117C 0018 0019             		move.b	#$18,$19(a0)
000083F8 117C 0008 0016             		move.b	#8,$16(a0)
000083FE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008404 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000840A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008410 6600                       		bne.s	Obj15_NotSLZ
00008412 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
0000841A 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008420 117C 0020 0019             		move.b	#$20,$19(a0)
00008426 117C 0010 0016             		move.b	#$10,$16(a0)
0000842C 117C 0099 0020             		move.b	#$99,$20(a0)
00008432                            
00008432                            Obj15_NotSLZ:
00008432 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008438 6600                       		bne.s	Obj15_SetLength
0000843A 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008442 317C 0391 0002             		move.w	#$391,2(a0)
00008448 117C 0018 0019             		move.b	#$18,$19(a0)
0000844E 117C 0018 0016             		move.b	#$18,$16(a0)
00008454 117C 0086 0020             		move.b	#$86,$20(a0)
0000845A 117C 000C 0024             		move.b	#$C,$24(a0)
00008460                            
00008460                            Obj15_SetLength:
00008460 1810                       		move.b	0(a0),d4
00008462 7200                       		moveq	#0,d1
00008464 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008468 1212                       		move.b	(a2),d1		; move a2 to d1
0000846A 3F01                       		move.w	d1,-(sp)
0000846C 0241 000F                  		andi.w	#$F,d1
00008470 14FC 0000                  		move.b	#0,(a2)+
00008474 3601                       		move.w	d1,d3
00008476 E94B                       		lsl.w	#4,d3
00008478 5003                       		addq.b	#8,d3
0000847A 1143 003C                  		move.b	d3,$3C(a0)
0000847E 5103                       		subq.b	#8,d3
00008480 4A28 001A                  		tst.b	$1A(a0)
00008484 6700                       		beq.s	Obj15_MakeChain
00008486 5003                       		addq.b	#8,d3
00008488 5341                       		subq.w	#1,d1
0000848A                            
0000848A                            Obj15_MakeChain:
0000848A 6100 0000                  		bsr.w	SingleObjLoad
0000848E 6600                       		bne.s	loc_7A92
00008490 5228 0028                  		addq.b	#1,$28(a0)
00008494 3A09                       		move.w	a1,d5
00008496 0445 D000                  		subi.w	#-$3000,d5
0000849A EC4D                       		lsr.w	#6,d5
0000849C 0245 007F                  		andi.w	#$7F,d5
000084A0 14C5                       		move.b	d5,(a2)+
000084A2 137C 000A 0024             		move.b	#$A,$24(a1)
000084A8 1284                       		move.b	d4,0(a1)	; load swinging	object
000084AA 2368 0004 0004             		move.l	4(a0),4(a1)
000084B0 3368 0002 0002             		move.w	2(a0),2(a1)
000084B6 08A9 0006 0002             		bclr	#6,2(a1)
000084BC 137C 0004 0001             		move.b	#4,1(a1)
000084C2 137C 0004 0018             		move.b	#4,$18(a1)
000084C8 137C 0008 0019             		move.b	#8,$19(a1)
000084CE 137C 0001 001A             		move.b	#1,$1A(a1)
000084D4 1343 003C                  		move.b	d3,$3C(a1)
000084D8 0403 0010                  		subi.b	#$10,d3
000084DC 6400                       		bcc.s	loc_7A8E
000084DE 137C 0002 001A             		move.b	#2,$1A(a1)
000084E4 137C 0003 0018             		move.b	#3,$18(a1)
000084EA 08E9 0006 0002             		bset	#6,2(a1)
000084F0                            
000084F0                            loc_7A8E:
000084F0 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
000084F4                            
000084F4                            loc_7A92:
000084F4 3A08                       		move.w	a0,d5
000084F6 0445 D000                  		subi.w	#-$3000,d5
000084FA EC4D                       		lsr.w	#6,d5
000084FC 0245 007F                  		andi.w	#$7F,d5
00008500 14C5                       		move.b	d5,(a2)+
00008502 317C 4080 0026             		move.w	#$4080,$26(a0)
00008508 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000850E 321F                       		move.w	(sp)+,d1
00008510 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008514 6700                       		beq.s	loc_7AD4	; if not, branch
00008516 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000851E 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008524 117C 0001 001A             		move.b	#1,$1A(a0)
0000852A 117C 0002 0018             		move.b	#2,$18(a0)
00008530 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008536                            
00008536                            loc_7AD4:
00008536 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000853C 6700                       		beq.s	Obj15_Action	; if yes, branch
0000853E                            
0000853E                            Obj15_SetSolid:				; XREF: Obj15_Index
0000853E 7200                       		moveq	#0,d1
00008540 1228 0019                  		move.b	$19(a0),d1
00008544 7600                       		moveq	#0,d3
00008546 1628 0016                  		move.b	$16(a0),d3
0000854A 6100 FA76                  		bsr.w	Obj15_Solid
0000854E                            
0000854E                            Obj15_Action:				; XREF: Obj15_Index
0000854E 6100 0000                  		bsr.w	Obj15_Move
00008552 6100 0000                  		bsr.w	DisplaySprite
00008556 6000 0000                  		bra.w	Obj15_ChkDel
0000855A                            ; ===========================================================================
0000855A                            
0000855A                            Obj15_Action2:				; XREF: Obj15_Index
0000855A 7200                       		moveq	#0,d1
0000855C 1228 0019                  		move.b	$19(a0),d1
00008560 6100 FAC4                  		bsr.w	ExitPlatform
00008564 3F28 0008                  		move.w	8(a0),-(sp)
00008568 6100 0000                  		bsr.w	Obj15_Move
0000856C 341F                       		move.w	(sp)+,d2
0000856E 7600                       		moveq	#0,d3
00008570 1628 0016                  		move.b	$16(a0),d3
00008574 5203                       		addq.b	#1,d3
00008576 6100 0000                  		bsr.w	MvSonicOnPtfm
0000857A 6100 0000                  		bsr.w	DisplaySprite
0000857E 6000 0000                  		bra.w	Obj15_ChkDel
00008582                            
00008582 4E75                       		rts
00008584                            
00008584                            ; ---------------------------------------------------------------------------
00008584                            ; Subroutine to	change Sonic's position with a platform
00008584                            ; ---------------------------------------------------------------------------
00008584                            
00008584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008584                            
00008584                            
00008584                            MvSonicOnPtfm:
00008584 43F8 D000                  		lea	($FFFFD000).w,a1
00008588 3028 000C                  		move.w	$C(a0),d0
0000858C 9043                       		sub.w	d3,d0
0000858E 6000                       		bra.s	MvSonic2
00008590                            ; End of function MvSonicOnPtfm
00008590                            
00008590                            ; ---------------------------------------------------------------------------
00008590                            ; Subroutine to	change Sonic's position with a platform
00008590                            ; ---------------------------------------------------------------------------
00008590                            
00008590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008590                            
00008590                            
00008590                            MvSonicOnPtfm2:
00008590 43F8 D000                  		lea	($FFFFD000).w,a1
00008594 3028 000C                  		move.w	$C(a0),d0
00008598 0440 0009                  		subi.w	#9,d0
0000859C                            
0000859C                            MvSonic2:
0000859C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000085A0 6B00                       		bmi.s	locret_7B62
000085A2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000085A8 6400                       		bcc.s	locret_7B62
000085AA 4A78 FE08                  		tst.w	($FFFFFE08).w
000085AE 6600                       		bne.s	locret_7B62
000085B0 7200                       		moveq	#0,d1
000085B2 1229 0016                  		move.b	$16(a1),d1
000085B6 9041                       		sub.w	d1,d0
000085B8 3340 000C                  		move.w	d0,$C(a1)
000085BC 9468 0008                  		sub.w	8(a0),d2
000085C0 9569 0008                  		sub.w	d2,8(a1)
000085C4                            
000085C4                            locret_7B62:
000085C4 4E75                       		rts	
000085C6                            ; End of function MvSonicOnPtfm2
000085C6                            
000085C6                            
000085C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085C6                            
000085C6                            
000085C6                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000085C6 1038 FE78                  		move.b	($FFFFFE78).w,d0
000085CA 323C 0080                  		move.w	#$80,d1
000085CE 0828 0000 0022             		btst	#0,$22(a0)
000085D4 6700                       		beq.s	loc_7B78
000085D6 4440                       		neg.w	d0
000085D8 D041                       		add.w	d1,d0
000085DA                            
000085DA                            loc_7B78:
000085DA 6000                       		bra.s	Obj15_Move2
000085DC                            ; End of function Obj15_Move
000085DC                            
000085DC                            
000085DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085DC                            
000085DC                            
000085DC                            Obj48_Move:				; XREF: Obj48_Display2
000085DC 4A28 003D                  		tst.b	$3D(a0)
000085E0 6600                       		bne.s	loc_7B9C
000085E2 3028 003E                  		move.w	$3E(a0),d0
000085E6 5040                       		addq.w	#8,d0
000085E8 3140 003E                  		move.w	d0,$3E(a0)
000085EC D168 0026                  		add.w	d0,$26(a0)
000085F0 0C40 0200                  		cmpi.w	#$200,d0
000085F4 6600                       		bne.s	loc_7BB6
000085F6 117C 0001 003D             		move.b	#1,$3D(a0)
000085FC 6000                       		bra.s	loc_7BB6
000085FE                            ; ===========================================================================
000085FE                            
000085FE                            loc_7B9C:
000085FE 3028 003E                  		move.w	$3E(a0),d0
00008602 5140                       		subq.w	#8,d0
00008604 3140 003E                  		move.w	d0,$3E(a0)
00008608 D168 0026                  		add.w	d0,$26(a0)
0000860C 0C40 FE00                  		cmpi.w	#-$200,d0
00008610 6600                       		bne.s	loc_7BB6
00008612 117C 0000 003D             		move.b	#0,$3D(a0)
00008618                            
00008618                            loc_7BB6:
00008618 1028 0026                  		move.b	$26(a0),d0
0000861C                            ; End of function Obj48_Move
0000861C                            
0000861C                            
0000861C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000861C                            
0000861C                            
0000861C                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000861C 6100 A750                  		bsr.w	CalcSine
00008620 3428 0038                  		move.w	$38(a0),d2
00008624 3628 003A                  		move.w	$3A(a0),d3
00008628 45E8 0028                  		lea	$28(a0),a2
0000862C 7C00                       		moveq	#0,d6
0000862E 1C1A                       		move.b	(a2)+,d6
00008630                            
00008630                            loc_7BCE:
00008630 7800                       		moveq	#0,d4
00008632 181A                       		move.b	(a2)+,d4
00008634 ED4C                       		lsl.w	#6,d4
00008636 0684 00FF D000             		addi.l	#$FFD000,d4
0000863C 2244                       		movea.l	d4,a1
0000863E 7800                       		moveq	#0,d4
00008640 1829 003C                  		move.b	$3C(a1),d4
00008644 2A04                       		move.l	d4,d5
00008646 C9C0                       		muls.w	d0,d4
00008648 E084                       		asr.l	#8,d4
0000864A CBC1                       		muls.w	d1,d5
0000864C E085                       		asr.l	#8,d5
0000864E D842                       		add.w	d2,d4
00008650 DA43                       		add.w	d3,d5
00008652 3344 000C                  		move.w	d4,$C(a1)
00008656 3345 0008                  		move.w	d5,8(a1)
0000865A 51CE FFD4                  		dbf	d6,loc_7BCE
0000865E 4E75                       		rts	
00008660                            ; End of function Obj15_Move2
00008660                            
00008660                            ; ===========================================================================
00008660                            
00008660                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008660 3028 003A                  		move.w	$3A(a0),d0
00008664 0240 FF80                  		andi.w	#$FF80,d0
00008668 3238 F700                  		move.w	($FFFFF700).w,d1
0000866C 0441 0080                  		subi.w	#$80,d1
00008670 0241 FF80                  		andi.w	#$FF80,d1
00008674 9041                       		sub.w	d1,d0
00008676 0C40 0280                  		cmpi.w	#$280,d0
0000867A 6200 0000                  		bhi.w	Obj15_DelAll
0000867E 4E75                       		rts	
00008680                            ; ===========================================================================
00008680                            
00008680                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008680 7400                       		moveq	#0,d2
00008682 45E8 0028                  		lea	$28(a0),a2
00008686 141A                       		move.b	(a2)+,d2
00008688                            
00008688                            Obj15_DelLoop:
00008688 7000                       		moveq	#0,d0
0000868A 101A                       		move.b	(a2)+,d0
0000868C ED48                       		lsl.w	#6,d0
0000868E 0680 00FF D000             		addi.l	#$FFD000,d0
00008694 2240                       		movea.l	d0,a1
00008696 6100 0000                  		bsr.w	DeleteObject2
0000869A 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000869E 4E75                       		rts	
000086A0                            ; ===========================================================================
000086A0                            
000086A0                            Obj15_Delete:				; XREF: Obj15_Index
000086A0 6100 0000                  		bsr.w	DeleteObject
000086A4 4E75                       		rts	
000086A6                            ; ===========================================================================
000086A6                            
000086A6                            Obj15_Display:				; XREF: Obj15_Index
000086A6 6000 0000                  		bra.w	DisplaySprite
000086AA                            ; ===========================================================================
000086AA                            ; ---------------------------------------------------------------------------
000086AA                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086AA                            ; ---------------------------------------------------------------------------
000086AA                            Map_obj15:
000086AA                            	include "_maps\obj15ghz.asm"
000086AA                            ; ---------------------------------------------------------------------------
000086AA                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086AA                            ; ---------------------------------------------------------------------------
000086AA 0000                       		dc.w byte_7C4E-Map_obj15
000086AC 0000                       		dc.w byte_7C59-Map_obj15
000086AE 0000                       		dc.w byte_7C5F-Map_obj15
000086B0 02                         byte_7C4E:	dc.b 2
000086B1 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000086B6 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000086BB 01                         byte_7C59:	dc.b 1
000086BC F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000086C1 01                         byte_7C5F:	dc.b 1
000086C2 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000086C8 00                         		even
000086C8 00                         		even
000086C8                            
000086C8                            ; ---------------------------------------------------------------------------
000086C8                            ; Sprite mappings - SLZ	swinging platforms
000086C8                            ; ---------------------------------------------------------------------------
000086C8                            Map_obj15a:
000086C8                            	include "_maps\obj15slz.asm"
000086C8                            ; ---------------------------------------------------------------------------
000086C8                            ; Sprite mappings - SLZ	swinging platforms
000086C8                            ; ---------------------------------------------------------------------------
000086C8 0000                       		dc.w byte_7C6C-Map_obj15a
000086CA 0000                       		dc.w byte_7C95-Map_obj15a
000086CC 0000                       		dc.w byte_7C9B-Map_obj15a
000086CE 08                         byte_7C6C:	dc.b 8
000086CF F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000086D4 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000086D9 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000086DE F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000086E3 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000086E8 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000086ED 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000086F2 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000086F7 01                         byte_7C95:	dc.b 1
000086F8 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000086FD 01                         byte_7C9B:	dc.b 1
000086FE F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008704 00                         		even
00008704 00                         		even
00008704                            
00008704                            ; ===========================================================================
00008704                            ; ---------------------------------------------------------------------------
00008704                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008704                            ; ---------------------------------------------------------------------------
00008704                            
00008704                            Obj17:					; XREF: Obj_Index
00008704 7000                       		moveq	#0,d0
00008706 1028 0024                  		move.b	$24(a0),d0
0000870A 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000870E 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008712                            ; ===========================================================================
00008712 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008714 0000                       		dc.w Obj17_Action-Obj17_Index
00008716 0000                       		dc.w Obj17_Action-Obj17_Index
00008718 0000                       		dc.w Obj17_Delete-Obj17_Index
0000871A 0000                       		dc.w Obj17_Display-Obj17_Index
0000871C                            ; ===========================================================================
0000871C                            
0000871C                            Obj17_Main:				; XREF: Obj17_Index
0000871C 5428 0024                  		addq.b	#2,$24(a0)
00008720 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008728 317C 4398 0002             		move.w	#$4398,2(a0)
0000872E 117C 0007 0022             		move.b	#7,$22(a0)
00008734 117C 0004 0001             		move.b	#4,1(a0)
0000873A 117C 0003 0018             		move.b	#3,$18(a0)
00008740 117C 0008 0019             		move.b	#8,$19(a0)
00008746 3428 000C                  		move.w	$C(a0),d2
0000874A 3628 0008                  		move.w	8(a0),d3
0000874E 1810                       		move.b	0(a0),d4
00008750 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008754 7200                       		moveq	#0,d1
00008756 1212                       		move.b	(a2),d1		; move a2 to d1
00008758 14FC 0000                  		move.b	#0,(a2)+
0000875C 3001                       		move.w	d1,d0
0000875E E248                       		lsr.w	#1,d0
00008760 E948                       		lsl.w	#4,d0
00008762 9640                       		sub.w	d0,d3
00008764 5501                       		subq.b	#2,d1
00008766 6500                       		bcs.s	Obj17_Action
00008768 7C00                       		moveq	#0,d6
0000876A                            
0000876A                            Obj17_MakeHelix:
0000876A 6100 0000                  		bsr.w	SingleObjLoad
0000876E 6600                       		bne.s	Obj17_Action
00008770 5228 0028                  		addq.b	#1,$28(a0)
00008774 3A09                       		move.w	a1,d5
00008776 0445 D000                  		subi.w	#$D000,d5
0000877A EC4D                       		lsr.w	#6,d5
0000877C 0245 007F                  		andi.w	#$7F,d5
00008780 14C5                       		move.b	d5,(a2)+
00008782 137C 0008 0024             		move.b	#8,$24(a1)
00008788 1284                       		move.b	d4,0(a1)
0000878A 3342 000C                  		move.w	d2,$C(a1)
0000878E 3343 0008                  		move.w	d3,8(a1)
00008792 2368 0004 0004             		move.l	4(a0),4(a1)
00008798 337C 4398 0002             		move.w	#$4398,2(a1)
0000879E 137C 0004 0001             		move.b	#4,1(a1)
000087A4 137C 0003 0018             		move.b	#3,$18(a1)
000087AA 137C 0008 0019             		move.b	#8,$19(a1)
000087B0 1346 003E                  		move.b	d6,$3E(a1)
000087B4 5206                       		addq.b	#1,d6
000087B6 0206 0007                  		andi.b	#7,d6
000087BA 0643 0010                  		addi.w	#$10,d3
000087BE B668 0008                  		cmp.w	8(a0),d3
000087C2 6600                       		bne.s	loc_7D78
000087C4 1146 003E                  		move.b	d6,$3E(a0)
000087C8 5206                       		addq.b	#1,d6
000087CA 0206 0007                  		andi.b	#7,d6
000087CE 0643 0010                  		addi.w	#$10,d3
000087D2 5228 0028                  		addq.b	#1,$28(a0)
000087D6                            
000087D6                            loc_7D78:
000087D6 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000087DA                            
000087DA                            Obj17_Action:				; XREF: Obj17_Index
000087DA 6100 0000                  		bsr.w	Obj17_RotateSpikes
000087DE 6100 0000                  		bsr.w	DisplaySprite
000087E2 6000 0000                  		bra.w	Obj17_ChkDel
000087E6                            
000087E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087E6                            
000087E6                            
000087E6                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000087E6 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000087EA 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000087F0 D028 003E                  		add.b	$3E(a0),d0
000087F4 0200 0007                  		andi.b	#7,d0
000087F8 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000087FC 6600                       		bne.s	locret_7DA6
000087FE 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008804                            
00008804                            locret_7DA6:
00008804 4E75                       		rts	
00008806                            ; End of function Obj17_RotateSpikes
00008806                            
00008806                            ; ===========================================================================
00008806                            
00008806                            Obj17_ChkDel:				; XREF: Obj17_Action
00008806 3028 0008                  		move.w	8(a0),d0
0000880A 0240 FF80                  		andi.w	#$FF80,d0
0000880E 3238 F700                  		move.w	($FFFFF700).w,d1
00008812 0441 0080                  		subi.w	#$80,d1
00008816 0241 FF80                  		andi.w	#$FF80,d1
0000881A 9041                       		sub.w	d1,d0
0000881C 0C40 0280                  		cmpi.w	#$280,d0
00008820 6200 0000                  		bhi.w	Obj17_DelAll
00008824 4E75                       		rts	
00008826                            ; ===========================================================================
00008826                            
00008826                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008826 7400                       		moveq	#0,d2
00008828 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000882C 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000882E 5502                       		subq.b	#2,d2
00008830 6500                       		bcs.s	Obj17_Delete
00008832                            
00008832                            Obj17_DelLoop:
00008832 7000                       		moveq	#0,d0
00008834 101A                       		move.b	(a2)+,d0
00008836 ED48                       		lsl.w	#6,d0
00008838 0680 00FF D000             		addi.l	#$FFD000,d0
0000883E 2240                       		movea.l	d0,a1
00008840 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008844 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008848                            
00008848                            Obj17_Delete:				; XREF: Obj17_Index
00008848 6100 0000                  		bsr.w	DeleteObject
0000884C 4E75                       		rts	
0000884E                            ; ===========================================================================
0000884E                            
0000884E                            Obj17_Display:				; XREF: Obj17_Index
0000884E 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008852 6000 0000                  		bra.w	DisplaySprite
00008856                            ; ===========================================================================
00008856                            ; ---------------------------------------------------------------------------
00008856                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008856                            ; ---------------------------------------------------------------------------
00008856                            Map_obj17:
00008856                            	include "_maps\obj17.asm"
00008856                            ; ---------------------------------------------------------------------------
00008856                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008856                            ; ---------------------------------------------------------------------------
00008856 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000885A 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000885E 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008862 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008866 01                         byte_7E08:	dc.b 1
00008867 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000886C 01                         byte_7E0E:	dc.b 1
0000886D F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008872 01                         byte_7E14:	dc.b 1
00008873 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008878 01                         byte_7E1A:	dc.b 1
00008879 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000887E 01                         byte_7E20:	dc.b 1
0000887F 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008884 01                         byte_7E26:	dc.b 1
00008885 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000888A 01                         byte_7E2C:	dc.b 1
0000888B F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008890                            		even
00008890                            		even
00008890                            
00008890                            ; ===========================================================================
00008890                            ; ---------------------------------------------------------------------------
00008890                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008890                            ; ---------------------------------------------------------------------------
00008890                            
00008890                            Obj18:					; XREF: Obj_Index
00008890 7000                       		moveq	#0,d0
00008892 1028 0024                  		move.b	$24(a0),d0
00008896 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000889A 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000889E                            ; ===========================================================================
0000889E 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000088A0 0000                       		dc.w Obj18_Solid-Obj18_Index
000088A2 0000                       		dc.w Obj18_Action2-Obj18_Index
000088A4 0000                       		dc.w Obj18_Delete-Obj18_Index
000088A6 0000                       		dc.w Obj18_Action-Obj18_Index
000088A8                            ; ===========================================================================
000088A8                            
000088A8                            Obj18_Main:				; XREF: Obj18_Index
000088A8 5428 0024                  		addq.b	#2,$24(a0)
000088AC 317C 4000 0002             		move.w	#$4000,2(a0)
000088B2 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000088BA 117C 0020 0019             		move.b	#$20,$19(a0)
000088C0 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000088C6 6600                       		bne.s	Obj18_NotSYZ
000088C8 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000088D0 117C 0020 0019             		move.b	#$20,$19(a0)
000088D6                            
000088D6                            Obj18_NotSYZ:
000088D6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000088DC 6600                       		bne.s	Obj18_NotSLZ
000088DE 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000088E6 117C 0020 0019             		move.b	#$20,$19(a0)
000088EC 317C 4000 0002             		move.w	#$4000,2(a0)
000088F2 117C 0003 0028             		move.b	#3,$28(a0)
000088F8                            
000088F8                            Obj18_NotSLZ:
000088F8 117C 0004 0001             		move.b	#4,1(a0)
000088FE 117C 0004 0018             		move.b	#4,$18(a0)
00008904 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000890A 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008910 3168 0008 0032             		move.w	8(a0),$32(a0)
00008916 317C 0080 0026             		move.w	#$80,$26(a0)
0000891C 7200                       		moveq	#0,d1
0000891E 1028 0028                  		move.b	$28(a0),d0
00008922 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008926 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008928 5201                       		addq.b	#1,d1		; use frame #1
0000892A 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008930                            
00008930                            Obj18_SetFrame:
00008930 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008934                            
00008934                            Obj18_Solid:				; XREF: Obj18_Index
00008934 4A28 0038                  		tst.b	$38(a0)
00008938 6700                       		beq.s	loc_7EE0
0000893A 5928 0038                  		subq.b	#4,$38(a0)
0000893E                            
0000893E                            loc_7EE0:
0000893E 7200                       		moveq	#0,d1
00008940 1228 0019                  		move.b	$19(a0),d1
00008944 6100 F56C                  		bsr.w	PlatformObject
00008948                            
00008948                            Obj18_Action:				; XREF: Obj18_Index
00008948 6100 0000                  		bsr.w	Obj18_Move
0000894C 6100 0000                  		bsr.w	Obj18_Nudge
00008950 6100 0000                  		bsr.w	DisplaySprite
00008954 6000 0000                  		bra.w	Obj18_ChkDel
00008958                            ; ===========================================================================
00008958                            
00008958                            Obj18_Action2:				; XREF: Obj18_Index
00008958 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000895E 6700                       		beq.s	loc_7F06
00008960 5828 0038                  		addq.b	#4,$38(a0)
00008964                            
00008964                            loc_7F06:
00008964 7200                       		moveq	#0,d1
00008966 1228 0019                  		move.b	$19(a0),d1
0000896A 6100 F6BA                  		bsr.w	ExitPlatform
0000896E 3F28 0008                  		move.w	8(a0),-(sp)
00008972 6100 0000                  		bsr.w	Obj18_Move
00008976 6100 0000                  		bsr.w	Obj18_Nudge
0000897A 341F                       		move.w	(sp)+,d2
0000897C 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008980 6100 0000                  		bsr.w	DisplaySprite
00008984 6000 0000                  		bra.w	Obj18_ChkDel
00008988                            
00008988 4E75                       		rts
0000898A                            
0000898A                            ; ---------------------------------------------------------------------------
0000898A                            ; Subroutine to	move platform slightly when you	stand on it
0000898A                            ; ---------------------------------------------------------------------------
0000898A                            
0000898A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000898A                            
0000898A                            
0000898A                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000898A 1028 0038                  		move.b	$38(a0),d0
0000898E 6100 A3DE                  		bsr.w	CalcSine
00008992 323C 0400                  		move.w	#$400,d1
00008996 C1C1                       		muls.w	d1,d0
00008998 4840                       		swap	d0
0000899A D068 002C                  		add.w	$2C(a0),d0
0000899E 3140 000C                  		move.w	d0,$C(a0)
000089A2 4E75                       		rts	
000089A4                            ; End of function Obj18_Nudge
000089A4                            
000089A4                            ; ---------------------------------------------------------------------------
000089A4                            ; Subroutine to	move platforms
000089A4                            ; ---------------------------------------------------------------------------
000089A4                            
000089A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089A4                            
000089A4                            
000089A4                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000089A4 7000                       		moveq	#0,d0
000089A6 1028 0028                  		move.b	$28(a0),d0
000089AA 0240 000F                  		andi.w	#$F,d0
000089AE D040                       		add.w	d0,d0
000089B0 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000089B4 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000089B8                            ; End of function Obj18_Move
000089B8                            
000089B8                            ; ===========================================================================
000089B8 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000089BC 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000089C0 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000089C4 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000089C8 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000089CC 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000089D0 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000089D2                            ; ===========================================================================
000089D2                            
000089D2                            Obj18_Type00:
000089D2 4E75                       		rts			; platform 00 doesn't move
000089D4                            ; ===========================================================================
000089D4                            
000089D4                            Obj18_Type05:
000089D4 3028 0032                  		move.w	$32(a0),d0
000089D8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000089DC 4401                       		neg.b	d1		; reverse platform-motion
000089DE 0601 0040                  		addi.b	#$40,d1
000089E2 6000                       		bra.s	Obj18_01_Move
000089E4                            ; ===========================================================================
000089E4                            
000089E4                            Obj18_Type01:
000089E4 3028 0032                  		move.w	$32(a0),d0
000089E8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000089EC 0401 0040                  		subi.b	#$40,d1
000089F0                            
000089F0                            Obj18_01_Move:
000089F0 4881                       		ext.w	d1
000089F2 D041                       		add.w	d1,d0
000089F4 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000089F8 6000 0000                  		bra.w	Obj18_ChgMotion
000089FC                            ; ===========================================================================
000089FC                            
000089FC                            Obj18_Type0C:
000089FC 3028 0034                  		move.w	$34(a0),d0
00008A00 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A04 4401                       		neg.b	d1		; reverse platform-motion
00008A06 0601 0030                  		addi.b	#$30,d1
00008A0A 6000                       		bra.s	Obj18_02_Move
00008A0C                            ; ===========================================================================
00008A0C                            
00008A0C                            Obj18_Type0B:
00008A0C 3028 0034                  		move.w	$34(a0),d0
00008A10 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A14 0401 0030                  		subi.b	#$30,d1
00008A18 6000                       		bra.s	Obj18_02_Move
00008A1A                            ; ===========================================================================
00008A1A                            
00008A1A                            Obj18_Type06:
00008A1A 3028 0034                  		move.w	$34(a0),d0
00008A1E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A22 4401                       		neg.b	d1		; reverse platform-motion
00008A24 0601 0040                  		addi.b	#$40,d1
00008A28 6000                       		bra.s	Obj18_02_Move
00008A2A                            ; ===========================================================================
00008A2A                            
00008A2A                            Obj18_Type02:
00008A2A 3028 0034                  		move.w	$34(a0),d0
00008A2E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A32 0401 0040                  		subi.b	#$40,d1
00008A36                            
00008A36                            Obj18_02_Move:
00008A36 4881                       		ext.w	d1
00008A38 D041                       		add.w	d1,d0
00008A3A 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008A3E 6000 0000                  		bra.w	Obj18_ChgMotion
00008A42                            ; ===========================================================================
00008A42                            
00008A42                            Obj18_Type03:
00008A42 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008A46 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008A48 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008A4E 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008A50 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008A56                            
00008A56                            Obj18_03_NoMove:
00008A56 4E75                       		rts	
00008A58                            ; ===========================================================================
00008A58                            
00008A58                            Obj18_03_Wait:
00008A58 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008A5C 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008A5E 317C 0020 003A             		move.w	#32,$3A(a0)
00008A64 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008A68 4E75                       		rts	
00008A6A                            ; ===========================================================================
00008A6A                            
00008A6A                            Obj18_Type04:
00008A6A 4A68 003A                  		tst.w	$3A(a0)
00008A6E 6700                       		beq.s	loc_8048
00008A70 5368 003A                  		subq.w	#1,$3A(a0)
00008A74 6600                       		bne.s	loc_8048
00008A76 0828 0003 0022             		btst	#3,$22(a0)
00008A7C 6700                       		beq.s	loc_8042
00008A7E 08E9 0001 0022             		bset	#1,$22(a1)
00008A84 08A9 0003 0022             		bclr	#3,$22(a1)
00008A8A 137C 0002 0024             		move.b	#2,$24(a1)
00008A90 08A8 0003 0022             		bclr	#3,$22(a0)
00008A96 4228 0025                  		clr.b	$25(a0)
00008A9A 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008AA0                            
00008AA0                            loc_8042:
00008AA0 117C 0008 0024             		move.b	#8,$24(a0)
00008AA6                            
00008AA6                            loc_8048:
00008AA6 2628 002C                  		move.l	$2C(a0),d3
00008AAA 3028 0012                  		move.w	$12(a0),d0
00008AAE 48C0                       		ext.l	d0
00008AB0 E180                       		asl.l	#8,d0
00008AB2 D680                       		add.l	d0,d3
00008AB4 2143 002C                  		move.l	d3,$2C(a0)
00008AB8 0668 0038 0012             		addi.w	#$38,$12(a0)
00008ABE 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008AC2 0640 00E0                  		addi.w	#$E0,d0
00008AC6 B068 002C                  		cmp.w	$2C(a0),d0
00008ACA 6400                       		bcc.s	locret_8074
00008ACC 117C 0006 0024             		move.b	#6,$24(a0)
00008AD2                            
00008AD2                            locret_8074:
00008AD2 4E75                       		rts	
00008AD4                            ; ===========================================================================
00008AD4                            
00008AD4                            Obj18_Type07:
00008AD4 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008AD8 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008ADA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008ADE 7000                       		moveq	#0,d0
00008AE0 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008AE4 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008AE6 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008AEA 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008AEC 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008AF2                            
00008AF2                            Obj18_07_NoMove:
00008AF2 4E75                       		rts	
00008AF4                            ; ===========================================================================
00008AF4                            
00008AF4                            Obj18_07_Wait:
00008AF4 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008AF8 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008AFA 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008AFE 4E75                       		rts	
00008B00                            ; ===========================================================================
00008B00                            
00008B00                            Obj18_Type08:
00008B00 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008B04 3028 0034                  		move.w	$34(a0),d0
00008B08 0440 0200                  		subi.w	#$200,d0
00008B0C B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008B10 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008B12 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008B16                            
00008B16                            Obj18_08_NoStop:
00008B16 4E75                       		rts	
00008B18                            ; ===========================================================================
00008B18                            
00008B18                            Obj18_Type0A:
00008B18 3028 0034                  		move.w	$34(a0),d0
00008B1C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008B20 0401 0040                  		subi.b	#$40,d1
00008B24 4881                       		ext.w	d1
00008B26 E241                       		asr.w	#1,d1
00008B28 D041                       		add.w	d1,d0
00008B2A 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008B2E                            
00008B2E                            Obj18_ChgMotion:
00008B2E 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008B34 4E75                       		rts	
00008B36                            ; ===========================================================================
00008B36                            
00008B36                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008B36 3028 0032                  		move.w	$32(a0),d0
00008B3A 0240 FF80                  		andi.w	#$FF80,d0
00008B3E 3238 F700                  		move.w	($FFFFF700).w,d1
00008B42 0441 0080                  		subi.w	#$80,d1
00008B46 0241 FF80                  		andi.w	#$FF80,d1
00008B4A 9041                       		sub.w	d1,d0
00008B4C 0C40 0280                  		cmpi.w	#$280,d0
00008B50 6200                       		bhi.s	Obj18_Delete
00008B52 4E75                       		rts	
00008B54                            ; ===========================================================================
00008B54                            
00008B54                            Obj18_Delete:				; XREF: Obj18_Index
00008B54 6000 0000                  		bra.w	DeleteObject
00008B58                            ; ===========================================================================
00008B58                            ; ---------------------------------------------------------------------------
00008B58                            ; Sprite mappings - unused
00008B58                            ; ---------------------------------------------------------------------------
00008B58                            Map_obj18x:
00008B58                            	include "_maps\obj18x.asm"
00008B58                            ; ---------------------------------------------------------------------------
00008B58                            ; Sprite mappings - unused
00008B58                            ; ---------------------------------------------------------------------------
00008B58 0000                       		dc.w byte_80FE-Map_obj18x
00008B5A 0000                       		dc.w byte_8109-Map_obj18x
00008B5C 02                         byte_80FE:	dc.b 2
00008B5D F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008B62 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008B67 0A                         byte_8109:	dc.b $A
00008B68 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008B6D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008B72 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008B77 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008B7C 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008B81 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008B86 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008B8B 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008B90 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008B95 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008B9A                            		even
00008B9A                            		even
00008B9A                            
00008B9A                            ; ---------------------------------------------------------------------------
00008B9A                            ; Sprite mappings - GHZ	platforms
00008B9A                            ; ---------------------------------------------------------------------------
00008B9A                            Map_obj18:
00008B9A                            	include "_maps\obj18ghz.asm"
00008B9A                            ; ---------------------------------------------------------------------------
00008B9A                            ; Sprite mappings - GHZ	platforms
00008B9A                            ; ---------------------------------------------------------------------------
00008B9A 0000                       		dc.w byte_8140-Map_obj18
00008B9C 0000                       		dc.w byte_8155-Map_obj18
00008B9E 04                         byte_8140:	dc.b 4
00008B9F F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008BA4 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008BA9 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008BAE F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008BB3 0A                         byte_8155:	dc.b $A
00008BB4 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008BB9 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008BBE 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008BC3 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008BC8 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008BCD F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008BD2 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008BD7 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008BDC 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008BE1 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008BE6                            		even
00008BE6                            		even
00008BE6                            
00008BE6                            ; ---------------------------------------------------------------------------
00008BE6                            ; Sprite mappings - SYZ	platforms
00008BE6                            ; ---------------------------------------------------------------------------
00008BE6                            Map_obj18a:
00008BE6                            	include "_maps\obj18syz.asm"
00008BE6                            ; ---------------------------------------------------------------------------
00008BE6                            ; Sprite mappings - SYZ	platforms
00008BE6                            ; ---------------------------------------------------------------------------
00008BE6 0000                       		dc.w byte_818A-Map_obj18a
00008BE8 03                         byte_818A:	dc.b 3
00008BE9 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008BEE F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008BF3 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008BF8                            		even
00008BF8                            		even
00008BF8                            
00008BF8                            ; ---------------------------------------------------------------------------
00008BF8                            ; Sprite mappings - SLZ	platforms
00008BF8                            ; ---------------------------------------------------------------------------
00008BF8                            Map_obj18b:
00008BF8                            	include "_maps\obj18slz.asm"
00008BF8                            ; ---------------------------------------------------------------------------
00008BF8                            ; Sprite mappings - SLZ	platforms
00008BF8                            ; ---------------------------------------------------------------------------
00008BF8 0000                       		dc.w byte_819C-Map_obj18b
00008BFA 02                         byte_819C:	dc.b 2
00008BFB F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008C00 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008C06 00                         		even
00008C06 00                         		even
00008C06                            
00008C06                            ; ===========================================================================
00008C06                            ; ---------------------------------------------------------------------------
00008C06                            ; Object 19 - Pearto bombs
00008C06                            ; ---------------------------------------------------------------------------
00008C06                            Obj19:					; XREF: Obj_Index
00008C06 7000                       		moveq	#0,d0
00008C08 1028 0024                  		move.b	$24(a0),d0
00008C0C 323B 0000                  		move.w	off_7070(pc,d0.w),d1
00008C10 4EFB 1000                  		jmp	off_7070(pc,d1.w)
00008C14                            ; ---------------------------------------------------------------------------
00008C14                            
00008C14 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
00008C1A                            ; ---------------------------------------------------------------------------
00008C1A                            
00008C1A                            loc_7076:
00008C1A 5428 0024                  		addq.b	#2,$24(a0)
00008C1E 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
00008C26 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008C2C 117C 0004 0001             		move.b	#4,1(a0)
00008C32 117C 0003 0019             		move.b	#3,$19(a0)
00008C38 117C 0087 0020             		move.b	#$87,$20(a0)
00008C3E 117C 0008 0018             		move.b	#8,$18(a0)
00008C44 317C 0018 0030             		move.w	#$18,$30(a0)
00008C4A                            
00008C4A                            loc_70A6:
00008C4A 0828 0007 0022             		btst	#7,$22(a0)
00008C50 6600                       		bne.s	loc_70C2
00008C52 4A68 0030                  		tst.w	$30(a0)
00008C56 6600                       		bne.s	loc_70D2
00008C58 4EB9 0000 0000             		jsr	ObjHitFloor
00008C5E 4A41                       		tst.w	d1
00008C60 6A00                       		bpl.s	loc_70D6
00008C62 D368 000C                  		add.w	d1,$C(a0)
00008C66                            
00008C66                            loc_70C2:
00008C66 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008C6A 117C 0000 0024             		move.b	#0,$24(a0)
00008C70                            ; ---------------------------------------------------------------------------
00008C70                            
00008C70                            loc_70D2:
00008C70 5368 0030                  		subq.w	#1,$30(a0)
00008C74                            
00008C74                            loc_70D6:
00008C74 6100 0000                  		bsr.w	ObjectFall
00008C78 6100 0000                  		bsr.w	DisplaySprite
00008C7C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008C80 0640 00E0                  		addi.w	#$E0,d0
00008C84 B068 000C                  		cmp.w	$C(a0),d0
00008C88 6500                       		bcs.s	loc_70EE
00008C8A 4E75                       		rts
00008C8C                            ; ---------------------------------------------------------------------------
00008C8C                            
00008C8C                            loc_70EE:
00008C8C 6100 0000                  		bsr.w	DeleteObject
00008C90 4E75                       		rts
00008C92                            		
00008C92                            Map_obj19:
00008C92                            	include "_maps\obj19.asm"
00008C92                            Map_02b4:
00008C92 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
00008C94 01                         Map_02b4_2: 	dc.b $1
00008C95 F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008C9A                            	even
00008C9A                            	even
00008C9A                            ; ===========================================================================
00008C9A                            ; ---------------------------------------------------------------------------
00008C9A                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C9A                            ; ---------------------------------------------------------------------------
00008C9A                            Map_obj48:
00008C9A                            	include "_maps\obj48.asm"
00008C9A                            ; ---------------------------------------------------------------------------
00008C9A                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C9A                            ; ---------------------------------------------------------------------------
00008C9A 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008C9E 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008CA2 06                         byte_81B2:	dc.b 6
00008CA3 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008CA8 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008CAD E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008CB2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008CB7 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008CBC 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008CC1 04                         byte_81D1:	dc.b 4
00008CC2 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008CC7 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008CCC 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008CD1 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008CD6 04                         byte_81E6:	dc.b 4
00008CD7 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008CDC E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008CE1 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008CE6 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008CEB 04                         byte_81FB:	dc.b 4
00008CEC E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008CF1 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008CF6 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008CFB 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008D00                            		even
00008D00                            		even
00008D00                            
00008D00                            ; ===========================================================================
00008D00                            ; ---------------------------------------------------------------------------
00008D00                            ; Object 1A - GHZ collapsing ledge
00008D00                            ; ---------------------------------------------------------------------------
00008D00                            
00008D00                            Obj1A:					; XREF: Obj_Index
00008D00 7000                       		moveq	#0,d0
00008D02 1028 0024                  		move.b	$24(a0),d0
00008D06 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008D0A 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008D0E                            ; ===========================================================================
00008D0E 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008D12 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008D16 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008D1A                            ; ===========================================================================
00008D1A                            
00008D1A                            Obj1A_Main:				; XREF: Obj1A_Index
00008D1A 5428 0024                  		addq.b	#2,$24(a0)
00008D1E 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008D26 317C 4000 0002             		move.w	#$4000,2(a0)
00008D2C 0028 0004 0001             		ori.b	#4,1(a0)
00008D32 117C 0004 0018             		move.b	#4,$18(a0)
00008D38 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008D3E 117C 0064 0019             		move.b	#$64,$19(a0)
00008D44 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008D4A 117C 0038 0016             		move.b	#$38,$16(a0)
00008D50 08E8 0004 0001             		bset	#4,1(a0)
00008D56                            
00008D56                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008D56 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008D5A 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008D5C 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008D60 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008D64 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008D68                            
00008D68                            Obj1A_Slope:
00008D68 323C 0030                  		move.w	#$30,d1
00008D6C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D72 6100 F212                  		bsr.w	SlopeObject
00008D76 6000 0000                  		bra.w	MarkObjGone
00008D7A                            ; ===========================================================================
00008D7A                            
00008D7A                            Obj1A_Touch:				; XREF: Obj1A_Index
00008D7A 4A28 0038                  		tst.b	$38(a0)
00008D7E 6700 0000                  		beq.w	loc_847A
00008D82 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008D88 5328 0038                  		subq.b	#1,$38(a0)
00008D8C                            
00008D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D8C                            
00008D8C                            
00008D8C                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008D8C 323C 0030                  		move.w	#$30,d1
00008D90 6100 F294                  		bsr.w	ExitPlatform
00008D94 323C 0030                  		move.w	#$30,d1
00008D98 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D9E 3428 0008                  		move.w	8(a0),d2
00008DA2 6100 0000                  		bsr.w	SlopeObject2
00008DA6 6000 0000                  		bra.w	MarkObjGone
00008DAA                            ; End of function Obj1A_WalkOff
00008DAA                            
00008DAA                            ; ===========================================================================
00008DAA                            
00008DAA                            Obj1A_Display:				; XREF: Obj1A_Index
00008DAA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008DAE 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008DB0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008DB4 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008DB8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008DBC 6000 0000                  		bra.w	DisplaySprite
00008DC0                            ; ===========================================================================
00008DC0                            
00008DC0                            loc_82D0:				; XREF: Obj1A_Display
00008DC0 5328 0038                  		subq.b	#1,$38(a0)
00008DC4 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008DC8 43F8 D000                  		lea	($FFFFD000).w,a1
00008DCC 0829 0003 0022             		btst	#3,$22(a1)
00008DD2 6700                       		beq.s	loc_82FC
00008DD4 4A28 0038                  		tst.b	$38(a0)
00008DD8 6600                       		bne.s	locret_8308
00008DDA 08A9 0003 0022             		bclr	#3,$22(a1)
00008DE0 08A9 0005 0022             		bclr	#5,$22(a1)
00008DE6 137C 0001 001D             		move.b	#1,$1D(a1)
00008DEC                            
00008DEC                            loc_82FC:
00008DEC 117C 0000 003A             		move.b	#0,$3A(a0)
00008DF2 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008DF8                            
00008DF8                            locret_8308:
00008DF8 4E75                       		rts	
00008DFA                            ; ===========================================================================
00008DFA                            
00008DFA                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008DFA 6100 0000                  		bsr.w	ObjectFall
00008DFE 6100 0000                  		bsr.w	DisplaySprite
00008E02 4A28 0001                  		tst.b	1(a0)
00008E06 6A00                       		bpl.s	Obj1A_Delete
00008E08 4E75                       		rts	
00008E0A                            ; ===========================================================================
00008E0A                            
00008E0A                            Obj1A_Delete:				; XREF: Obj1A_Index
00008E0A 6100 0000                  		bsr.w	DeleteObject
00008E0E 4E75                       		rts	
00008E10                            ; ===========================================================================
00008E10                            ; ---------------------------------------------------------------------------
00008E10                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008E10                            ; ---------------------------------------------------------------------------
00008E10                            
00008E10                            Obj53:					; XREF: Obj_Index
00008E10 7000                       		moveq	#0,d0
00008E12 1028 0024                  		move.b	$24(a0),d0
00008E16 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008E1A 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008E1E                            ; ===========================================================================
00008E1E 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008E22 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008E26 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008E2A                            ; ===========================================================================
00008E2A                            
00008E2A                            Obj53_Main:				; XREF: Obj53_Index
00008E2A 5428 0024                  		addq.b	#2,$24(a0)
00008E2E 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008E36 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008E3C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008E42 6600                       		bne.s	Obj53_NotSLZ
00008E44 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008E4A 5428 001A                  		addq.b	#2,$1A(a0)
00008E4E                            
00008E4E                            Obj53_NotSLZ:
00008E4E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008E54 6600                       		bne.s	Obj53_NotSBZ
00008E56 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008E5C                            
00008E5C                            Obj53_NotSBZ:
00008E5C 0028 0004 0001             		ori.b	#4,1(a0)
00008E62 117C 0004 0018             		move.b	#4,$18(a0)
00008E68 117C 0007 0038             		move.b	#7,$38(a0)
00008E6E 117C 0044 0019             		move.b	#$44,$19(a0)
00008E74                            
00008E74                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008E74 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E78 6700                       		beq.s	Obj53_Solid	; if not, branch
00008E7A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E7E 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008E82 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008E86                            
00008E86                            Obj53_Solid:
00008E86 323C 0020                  		move.w	#$20,d1
00008E8A 6100 F026                  		bsr.w	PlatformObject
00008E8E 4A28 0028                  		tst.b	$28(a0)
00008E92 6A00                       		bpl.s	Obj53_MarkAsGone
00008E94 0829 0003 0022             		btst	#3,$22(a1)
00008E9A 6700                       		beq.s	Obj53_MarkAsGone
00008E9C 08A8 0000 0001             		bclr	#0,1(a0)
00008EA2 3029 0008                  		move.w	8(a1),d0
00008EA6 9068 0008                  		sub.w	8(a0),d0
00008EAA 6400                       		bcc.s	Obj53_MarkAsGone
00008EAC 08E8 0000 0001             		bset	#0,1(a0)
00008EB2                            
00008EB2                            Obj53_MarkAsGone:
00008EB2 6000 0000                  		bra.w	MarkObjGone
00008EB6                            ; ===========================================================================
00008EB6                            
00008EB6                            Obj53_Touch:				; XREF: Obj53_Index
00008EB6 4A28 0038                  		tst.b	$38(a0)
00008EBA 6700 0000                  		beq.w	loc_8458
00008EBE 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008EC4 5328 0038                  		subq.b	#1,$38(a0)
00008EC8                            
00008EC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EC8                            
00008EC8                            
00008EC8                            Obj53_WalkOff:				; XREF: Obj53_Index
00008EC8 323C 0020                  		move.w	#$20,d1
00008ECC 6100 F158                  		bsr.w	ExitPlatform
00008ED0 3428 0008                  		move.w	8(a0),d2
00008ED4 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008ED8 6000 0000                  		bra.w	MarkObjGone
00008EDC                            ; End of function Obj53_WalkOff
00008EDC                            
00008EDC                            ; ===========================================================================
00008EDC                            
00008EDC                            Obj53_Display:				; XREF: Obj53_Index
00008EDC 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008EE0 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008EE2 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008EE6 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008EEA 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008EEE 6000 0000                  		bra.w	DisplaySprite
00008EF2                            ; ===========================================================================
00008EF2                            
00008EF2                            loc_8402:
00008EF2 5328 0038                  		subq.b	#1,$38(a0)
00008EF6 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008EFA 43F8 D000                  		lea	($FFFFD000).w,a1
00008EFE 0829 0003 0022             		btst	#3,$22(a1)
00008F04 6700                       		beq.s	loc_842E
00008F06 4A28 0038                  		tst.b	$38(a0)
00008F0A 6600                       		bne.s	locret_843A
00008F0C 08A9 0003 0022             		bclr	#3,$22(a1)
00008F12 08A9 0005 0022             		bclr	#5,$22(a1)
00008F18 137C 0001 001D             		move.b	#1,$1D(a1)
00008F1E                            
00008F1E                            loc_842E:
00008F1E 117C 0000 003A             		move.b	#0,$3A(a0)
00008F24 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008F2A                            
00008F2A                            locret_843A:
00008F2A 4E75                       		rts	
00008F2C                            ; ===========================================================================
00008F2C                            
00008F2C                            Obj53_TimeZero:				; XREF: Obj53_Display
00008F2C 6100 0000                  		bsr.w	ObjectFall
00008F30 6100 0000                  		bsr.w	DisplaySprite
00008F34 4A28 0001                  		tst.b	1(a0)
00008F38 6A00                       		bpl.s	Obj53_Delete
00008F3A 4E75                       		rts	
00008F3C                            ; ===========================================================================
00008F3C                            
00008F3C                            Obj53_Delete:				; XREF: Obj53_Index
00008F3C 6100 0000                  		bsr.w	DeleteObject
00008F40 4E75                       		rts	
00008F42                            ; ===========================================================================
00008F42                            
00008F42                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008F42 117C 0000 003A             		move.b	#0,$3A(a0)
00008F48                            
00008F48                            loc_8458:				; XREF: Obj53_Touch
00008F48 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008F4E 0828 0000 0028             		btst	#0,$28(a0)
00008F54 6700                       		beq.s	loc_846C
00008F56 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008F5C                            
00008F5C                            loc_846C:
00008F5C 7207                       		moveq	#7,d1
00008F5E 5228 001A                  		addq.b	#1,$1A(a0)
00008F62 6000                       		bra.s	loc_8486
00008F64                            ; ===========================================================================
00008F64                            
00008F64                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008F64 117C 0000 003A             		move.b	#0,$3A(a0)
00008F6A                            
00008F6A                            loc_847A:				; XREF: Obj1A_Touch
00008F6A 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008F70 7218                       		moveq	#$18,d1
00008F72 5428 001A                  		addq.b	#2,$1A(a0)
00008F76                            
00008F76                            loc_8486:				; XREF: Obj53_Collapse
00008F76 7000                       		moveq	#0,d0
00008F78 1028 001A                  		move.b	$1A(a0),d0
00008F7C D040                       		add.w	d0,d0
00008F7E 2668 0004                  		movea.l	4(a0),a3
00008F82 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008F86 524B                       		addq.w	#1,a3
00008F88 08E8 0005 0001             		bset	#5,1(a0)
00008F8E 1810                       		move.b	0(a0),d4
00008F90 1A28 0001                  		move.b	1(a0),d5
00008F94 2248                       		movea.l	a0,a1
00008F96 6000                       		bra.s	loc_84B2
00008F98                            ; ===========================================================================
00008F98                            
00008F98                            loc_84AA:
00008F98 6100 0000                  		bsr.w	SingleObjLoad
00008F9C 6600                       		bne.s	loc_84F2
00008F9E 5A4B                       		addq.w	#5,a3
00008FA0                            
00008FA0                            loc_84B2:
00008FA0 137C 0006 0024             		move.b	#6,$24(a1)
00008FA6 1284                       		move.b	d4,0(a1)
00008FA8 234B 0004                  		move.l	a3,4(a1)
00008FAC 1345 0001                  		move.b	d5,1(a1)
00008FB0 3368 0008 0008             		move.w	8(a0),8(a1)
00008FB6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008FBC 3368 0002 0002             		move.w	2(a0),2(a1)
00008FC2 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008FC8 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008FCE 135C 0038                  		move.b	(a4)+,$38(a1)
00008FD2 B3C8                       		cmpa.l	a0,a1
00008FD4 6400                       		bcc.s	loc_84EE
00008FD6 6100 0000                  		bsr.w	DisplaySprite2
00008FDA                            
00008FDA                            loc_84EE:
00008FDA 51C9 FFBC                  		dbf	d1,loc_84AA
00008FDE                            
00008FDE                            loc_84F2:
00008FDE 6100 0000                  		bsr.w	DisplaySprite
00008FE2 303C 00B9                  		move.w	#$B9,d0
00008FE6 4EF9 0000 15D4             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008FEC                            ; ===========================================================================
00008FEC                            ; ---------------------------------------------------------------------------
00008FEC                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008FEC                            ; ---------------------------------------------------------------------------
00008FEC 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008FFC 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009006 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000900E 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009016                            
00009016                            ; ---------------------------------------------------------------------------
00009016                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009016                            ; ---------------------------------------------------------------------------
00009016                            
00009016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009016                            
00009016                            
00009016                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00009016 43F8 D000                  		lea	($FFFFD000).w,a1
0000901A 0829 0003 0022             		btst	#3,$22(a1)
00009020 6700                       		beq.s	locret_856E
00009022 3029 0008                  		move.w	8(a1),d0
00009026 9068 0008                  		sub.w	8(a0),d0
0000902A D041                       		add.w	d1,d0
0000902C E248                       		lsr.w	#1,d0
0000902E 0828 0000 0001             		btst	#0,1(a0)
00009034 6700                       		beq.s	loc_854E
00009036 4640                       		not.w	d0
00009038 D041                       		add.w	d1,d0
0000903A                            
0000903A                            loc_854E:
0000903A 7200                       		moveq	#0,d1
0000903C 1232 0000                  		move.b	(a2,d0.w),d1
00009040 3028 000C                  		move.w	$C(a0),d0
00009044 9041                       		sub.w	d1,d0
00009046 7200                       		moveq	#0,d1
00009048 1229 0016                  		move.b	$16(a1),d1
0000904C 9041                       		sub.w	d1,d0
0000904E 3340 000C                  		move.w	d0,$C(a1)
00009052 9468 0008                  		sub.w	8(a0),d2
00009056 9569 0008                  		sub.w	d2,8(a1)
0000905A                            
0000905A                            locret_856E:
0000905A 4E75                       		rts	
0000905C                            ; End of function SlopeObject2
0000905C                            
0000905C                            ; ===========================================================================
0000905C                            ; ---------------------------------------------------------------------------
0000905C                            ; Collision data for GHZ collapsing ledge
0000905C                            ; ---------------------------------------------------------------------------
0000905C                            Obj1A_SlopeData:
0000905C                            		incbin	misc\ghzledge.bin
0000908C                            		even
0000908C                            
0000908C                            ; ---------------------------------------------------------------------------
0000908C                            ; Sprite mappings - GHZ	collapsing ledge
0000908C                            ; ---------------------------------------------------------------------------
0000908C                            Map_obj1A:
0000908C                            	include "_maps\obj1A.asm"
0000908C                            ; ---------------------------------------------------------------------------
0000908C                            ; Sprite mappings - GHZ	collapsing ledge
0000908C                            ; ---------------------------------------------------------------------------
0000908C 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00009090 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009094 10                         byte_85A8:	dc.b $10
00009095 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000909A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000909F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000090A4 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000090A9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000090AE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000090B3 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000090B8 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000090BD F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000090C2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000090C7 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000090CC 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000090D1 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000090D6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000090DB 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000090E0 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000090E5 10                         byte_85F9:	dc.b $10
000090E6 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000090EB D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000090F0 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000090F5 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000090FA D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000090FF D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009104 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009109 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000910E F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009113 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009118 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000911D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009122 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009127 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000912C 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009131 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009136 19                         byte_864A:	dc.b $19
00009137 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000913C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009141 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009146 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000914B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009150 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009155 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000915A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000915F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009164 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009169 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000916E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009173 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009178 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000917D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009182 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009187 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000918C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009191 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009196 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000919B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000091A0 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000091A5 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000091AA 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000091AF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000091B4 19                         byte_86C8:	dc.b $19
000091B5 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000091BA C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000091BF D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000091C4 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000091C9 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000091CE E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000091D3 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000091D8 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000091DD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000091E2 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000091E7 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000091EC F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000091F1 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000091F6 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000091FB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009200 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009205 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000920A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000920F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009214 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009219 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000921E 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009223 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009228 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000922D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009232                            		even
00009232                            		even
00009232                            
00009232                            ; ---------------------------------------------------------------------------
00009232                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009232                            ; ---------------------------------------------------------------------------
00009232                            Map_obj53:
00009232                            	include "_maps\obj53.asm"
00009232                            ; ---------------------------------------------------------------------------
00009232                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009232                            ; ---------------------------------------------------------------------------
00009232 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00009236 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000923A 04                         byte_874E:	dc.b 4
0000923B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00009240 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00009245 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000924A 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000924F 08                         byte_8763:	dc.b 8
00009250 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009255 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000925A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000925F F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00009264 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009269 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000926E 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00009273 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009278 04                         byte_878C:	dc.b 4
00009279 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000927E 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00009283 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009288 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000928D 08                         byte_87A1:	dc.b 8
0000928E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009293 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009298 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000929D F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000092A2 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000092A7 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000092AC 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000092B1 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000092B6                            		even
000092B6                            		even
000092B6                            
000092B6                            ; ===========================================================================
000092B6                            ; ---------------------------------------------------------------------------
000092B6                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000092B6                            ; ---------------------------------------------------------------------------
000092B6                            
000092B6                            Obj1C:					; XREF: Obj_Index
000092B6 7000                       		moveq	#0,d0
000092B8 1028 0024                  		move.b	$24(a0),d0
000092BC 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
000092C0 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
000092C4                            ; ===========================================================================
000092C4 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
000092C6 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
000092C8                            ; ===========================================================================
000092C8                            
000092C8                            Obj1C_Main:				; XREF: Obj1C_Index
000092C8 5428 0024                  		addq.b	#2,$24(a0)
000092CC 7000                       		moveq	#0,d0
000092CE 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
000092D2 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
000092D6 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
000092DA 2159 0004                  		move.l	(a1)+,4(a0)
000092DE 3159 0002                  		move.w	(a1)+,2(a0)
000092E2 0028 0004 0001             		ori.b	#4,1(a0)
000092E8 1159 001A                  		move.b	(a1)+,$1A(a0)
000092EC 1159 0019                  		move.b	(a1)+,$19(a0)
000092F0 1159 0018                  		move.b	(a1)+,$18(a0)
000092F4 1159 0020                  		move.b	(a1)+,$20(a0)
000092F8                            
000092F8                            Obj1C_ChkDel:				; XREF: Obj1C_Index
000092F8 3028 0008                  		move.w	8(a0),d0
000092FC 0240 FF80                  		andi.w	#$FF80,d0
00009300 3238 F700                  		move.w	($FFFFF700).w,d1
00009304 0441 0080                  		subi.w	#$80,d1
00009308 0241 FF80                  		andi.w	#$FF80,d1
0000930C 9041                       		sub.w	d1,d0
0000930E 0C40 0280                  		cmpi.w	#$280,d0
00009312 6200 0000                  		bhi.w	DeleteObject
00009316 6000 0000                  		bra.w	DisplaySprite
0000931A                            ; ===========================================================================
0000931A                            ; ---------------------------------------------------------------------------
0000931A                            ; Variables for	object $1C are stored in an array
0000931A                            ; ---------------------------------------------------------------------------
0000931A 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000931E 44D8                       		dc.w $44D8		; VRAM setting
00009320 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009324 0000 0000                  		dc.l Map_obj1C
00009328 44D8                       		dc.w $44D8
0000932A 0008 0200                  		dc.b 0,	8, 2, 0
0000932E 0000 0000                  		dc.l Map_obj1C
00009332 44D8                       		dc.w $44D8
00009334 0008 0200                  		dc.b 0,	8, 2, 0
00009338 0000 839A                  		dc.l Map_obj11
0000933C 438E                       		dc.w $438E
0000933E 0110 0100                  		dc.b 1,	$10, 1,	0
00009342                            ; ---------------------------------------------------------------------------
00009342                            ; Sprite mappings - SLZ	lava thrower
00009342                            ; ---------------------------------------------------------------------------
00009342                            Map_obj1C:
00009342                            	include "_maps\obj1C.asm"
00009342                            ; ---------------------------------------------------------------------------
00009342                            ; Sprite mappings - SLZ	lava thrower
00009342                            ; ---------------------------------------------------------------------------
00009342 0000                       		dc.w byte_8858-Map_obj1C
00009344 01                         byte_8858:	dc.b 1
00009345 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000934A                            		even
0000934A                            		even
0000934A                            
0000934A                            ; ===========================================================================
0000934A                            ; ---------------------------------------------------------------------------
0000934A                            ; Object 1D - switch that activates when Sonic touches it
0000934A                            ; (this	is not used anywhere in	the game)
0000934A                            ; ---------------------------------------------------------------------------
0000934A                            
0000934A                            Obj1D:					; XREF: Obj_Index
0000934A 7000                       		moveq	#0,d0
0000934C 1028 0024                  		move.b	$24(a0),d0
00009350 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009354 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009358                            ; ===========================================================================
00009358 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000935A 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000935C 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000935E                            ; ===========================================================================
0000935E                            
0000935E                            Obj1D_Main:				; XREF: Obj1D_Index
0000935E 5428 0024                  		addq.b	#2,$24(a0)
00009362 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000936A 317C 4000 0002             		move.w	#$4000,2(a0)
00009370 117C 0004 0001             		move.b	#4,1(a0)
00009376 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000937C 117C 0010 0019             		move.b	#$10,$19(a0)
00009382 117C 0005 0018             		move.b	#5,$18(a0)
00009388                            
00009388                            Obj1D_Action:				; XREF: Obj1D_Index
00009388 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000938E 323C 0010                  		move.w	#$10,d1
00009392 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009396 6700                       		beq.s	Obj1D_ChkDel
00009398 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000939C 7001                       		moveq	#1,d0
0000939E 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000093A2                            
000093A2                            Obj1D_ChkDel:
000093A2 6100 0000                  		bsr.w	DisplaySprite
000093A6 3028 0008                  		move.w	8(a0),d0
000093AA 0240 FF80                  		andi.w	#$FF80,d0
000093AE 3238 F700                  		move.w	($FFFFF700).w,d1
000093B2 0441 0080                  		subi.w	#$80,d1
000093B6 0241 FF80                  		andi.w	#$FF80,d1
000093BA 9041                       		sub.w	d1,d0
000093BC 0C40 0280                  		cmpi.w	#$280,d0
000093C0 6200 0000                  		bhi.w	Obj1D_Delete
000093C4 4E75                       		rts	
000093C6                            ; ===========================================================================
000093C6                            
000093C6                            Obj1D_Delete:				; XREF: Obj1D_Index
000093C6 6100 0000                  		bsr.w	DeleteObject
000093CA 4E75                       		rts	
000093CC                            ; ---------------------------------------------------------------------------
000093CC                            ; Subroutine to	check if Sonic touches the object
000093CC                            ; ---------------------------------------------------------------------------
000093CC                            
000093CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093CC                            
000093CC                            
000093CC                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
000093CC 43F8 D000                  		lea	($FFFFD000).w,a1
000093D0 3029 0008                  		move.w	8(a1),d0
000093D4 9068 0008                  		sub.w	8(a0),d0
000093D8 D041                       		add.w	d1,d0
000093DA 6B00                       		bmi.s	loc_8918
000093DC D241                       		add.w	d1,d1
000093DE B041                       		cmp.w	d1,d0
000093E0 6400                       		bcc.s	loc_8918
000093E2 3429 000C                  		move.w	$C(a1),d2
000093E6 1229 0016                  		move.b	$16(a1),d1
000093EA 4881                       		ext.w	d1
000093EC D242                       		add.w	d2,d1
000093EE 3028 000C                  		move.w	$C(a0),d0
000093F2 0440 0010                  		subi.w	#$10,d0
000093F6 9041                       		sub.w	d1,d0
000093F8 6200                       		bhi.s	loc_8918
000093FA 0C40 FFF0                  		cmpi.w	#-$10,d0
000093FE 6500                       		bcs.s	loc_8918
00009400 70FF                       		moveq	#-1,d0
00009402 4E75                       		rts	
00009404                            ; ===========================================================================
00009404                            
00009404                            loc_8918:
00009404 7000                       		moveq	#0,d0
00009406 4E75                       		rts	
00009408                            ; End of function Obj1D_ChkTouch
00009408                            
00009408                            ; ===========================================================================
00009408                            ; ---------------------------------------------------------------------------
00009408                            ; Sprite mappings - object 1D
00009408                            ; ---------------------------------------------------------------------------
00009408                            Map_obj1D:
00009408                            	include "_maps\obj1D.asm"
00009408                            ; ---------------------------------------------------------------------------
00009408                            ; Sprite mappings - object 1D
00009408                            ; ---------------------------------------------------------------------------
00009408 0000                       		dc.w byte_891E-Map_obj1D
0000940A 04                         byte_891E:	dc.b 4
0000940B E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009410 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009415 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000941A 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009420 00                         		even
00009420 00                         		even
00009420                            
00009420                            ; ===========================================================================
00009420                            ; ---------------------------------------------------------------------------
00009420                            ; Object 2A - doors (SBZ)
00009420                            ; ---------------------------------------------------------------------------
00009420                            
00009420                            Obj2A:					; XREF: Obj_Index
00009420 7000                       		moveq	#0,d0
00009422 1028 0024                  		move.b	$24(a0),d0
00009426 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000942A 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000942E                            ; ===========================================================================
0000942E 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009430 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009432                            ; ===========================================================================
00009432                            
00009432                            Obj2A_Main:				; XREF: Obj2A_Index
00009432 5428 0024                  		addq.b	#2,$24(a0)
00009436 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000943E 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009444 0028 0004 0001             		ori.b	#4,1(a0)
0000944A 117C 0008 0019             		move.b	#8,$19(a0)
00009450 117C 0004 0018             		move.b	#4,$18(a0)
00009456                            
00009456                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009456 323C 0040                  		move.w	#$40,d1
0000945A 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000945E 3038 D008                  		move.w	($FFFFD008).w,d0
00009462 D041                       		add.w	d1,d0
00009464 B068 0008                  		cmp.w	8(a0),d0
00009468 6500                       		bcs.s	Obj2A_Animate
0000946A 9041                       		sub.w	d1,d0
0000946C 9041                       		sub.w	d1,d0
0000946E B068 0008                  		cmp.w	8(a0),d0
00009472 6400                       		bcc.s	Obj2A_Animate
00009474 D041                       		add.w	d1,d0
00009476 B068 0008                  		cmp.w	8(a0),d0
0000947A 6400                       		bcc.s	loc_899A
0000947C 0828 0000 0022             		btst	#0,$22(a0)
00009482 6600                       		bne.s	Obj2A_Animate
00009484 6000                       		bra.s	Obj2A_Open
00009486                            ; ===========================================================================
00009486                            
00009486                            loc_899A:				; XREF: Obj2A_OpenShut
00009486 0828 0000 0022             		btst	#0,$22(a0)
0000948C 6700                       		beq.s	Obj2A_Animate
0000948E                            
0000948E                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000948E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009494                            
00009494                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009494 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000949A 6100 0000                  		bsr.w	AnimateSprite
0000949E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000094A2 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000094A4 323C 0011                  		move.w	#$11,d1
000094A8 343C 0020                  		move.w	#$20,d2
000094AC 3602                       		move.w	d2,d3
000094AE 5243                       		addq.w	#1,d3
000094B0 3828 0008                  		move.w	8(a0),d4
000094B4 6100 0000                  		bsr.w	SolidObject
000094B8                            
000094B8                            Obj2A_MarkAsUsed:
000094B8 6000 0000                  		bra.w	MarkObjGone
000094BC                            ; ===========================================================================
000094BC                            Ani_obj2A:
000094BC                            	include "_anim\obj2A.asm"
000094BC                            ; ---------------------------------------------------------------------------
000094BC                            ; Animation script - doors (SBZ)
000094BC                            ; ---------------------------------------------------------------------------
000094BC 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
000094BE 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
000094C0 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000094CC 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000094D8                            		even
000094D8                            		even
000094D8                            
000094D8                            ; ---------------------------------------------------------------------------
000094D8                            ; Sprite mappings - doors (SBZ)
000094D8                            ; ---------------------------------------------------------------------------
000094D8                            Map_obj2A:
000094D8                            	include "_maps\obj2A.asm"
000094D8                            ; ---------------------------------------------------------------------------
000094D8                            ; Sprite mappings - doors (SBZ)
000094D8                            ; ---------------------------------------------------------------------------
000094D8 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000094DC 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000094E0 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000094E4 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000094E8 0000                       		dc.w byte_8A56-Map_obj2A
000094EA 02                         byte_89FE:	dc.b 2
000094EB E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000094F0 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000094F5 02                         byte_8A09:	dc.b 2
000094F6 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000094FB 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009500 02                         byte_8A14:	dc.b 2
00009501 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009506 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000950B 02                         byte_8A1F:	dc.b 2
0000950C D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009511 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009516 02                         byte_8A2A:	dc.b 2
00009517 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000951C 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009521 02                         byte_8A35:	dc.b 2
00009522 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009527 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000952C 02                         byte_8A40:	dc.b 2
0000952D C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009532 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009537 02                         byte_8A4B:	dc.b 2
00009538 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000953D 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009542 02                         byte_8A56:	dc.b 2
00009543 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009548 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000954E 00                         		even
0000954E 00                         		even
0000954E                            
0000954E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000954E                            
0000954E                            
0000954E                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000954E 6100 0000                  		bsr.w	Obj44_SolidWall2
00009552 6700                       		beq.s	loc_8AA8
00009554 6B00 0000                  		bmi.w	loc_8AC4
00009558 4A40                       		tst.w	d0
0000955A 6700 0000                  		beq.w	loc_8A92
0000955E 6B00                       		bmi.s	loc_8A7C
00009560 4A69 0010                  		tst.w	$10(a1)
00009564 6B00                       		bmi.s	loc_8A92
00009566 6000                       		bra.s	loc_8A82
00009568                            ; ===========================================================================
00009568                            
00009568                            loc_8A7C:
00009568 4A69 0010                  		tst.w	$10(a1)
0000956C 6A00                       		bpl.s	loc_8A92
0000956E                            
0000956E                            loc_8A82:
0000956E 9169 0008                  		sub.w	d0,8(a1)
00009572 337C 0000 0014             		move.w	#0,$14(a1)
00009578 337C 0000 0010             		move.w	#0,$10(a1)
0000957E                            
0000957E                            loc_8A92:
0000957E 0829 0001 0022             		btst	#1,$22(a1)
00009584 6600                       		bne.s	loc_8AB6
00009586 08E9 0005 0022             		bset	#5,$22(a1)
0000958C 08E8 0005 0022             		bset	#5,$22(a0)
00009592 4E75                       		rts	
00009594                            ; ===========================================================================
00009594                            
00009594                            loc_8AA8:
00009594 0828 0005 0022             		btst	#5,$22(a0)
0000959A 6700                       		beq.s	locret_8AC2
0000959C 337C 0001 001C             		move.w	#1,$1C(a1)
000095A2                            
000095A2                            loc_8AB6:
000095A2 08A8 0005 0022             		bclr	#5,$22(a0)
000095A8 08A9 0005 0022             		bclr	#5,$22(a1)
000095AE                            
000095AE                            locret_8AC2:
000095AE 4E75                       		rts	
000095B0                            ; ===========================================================================
000095B0                            
000095B0                            loc_8AC4:
000095B0 4A69 0012                  		tst.w	$12(a1)
000095B4 6A00                       		bpl.s	locret_8AD8
000095B6 4A43                       		tst.w	d3
000095B8 6A00                       		bpl.s	locret_8AD8
000095BA 9769 000C                  		sub.w	d3,$C(a1)
000095BE 337C 0000 0012             		move.w	#0,$12(a1)
000095C4                            
000095C4                            locret_8AD8:
000095C4 4E75                       		rts	
000095C6                            ; End of function Obj44_SolidWall
000095C6                            
000095C6                            
000095C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095C6                            
000095C6                            
000095C6                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
000095C6 43F8 D000                  		lea	($FFFFD000).w,a1
000095CA 3029 0008                  		move.w	8(a1),d0
000095CE 9068 0008                  		sub.w	8(a0),d0
000095D2 D041                       		add.w	d1,d0
000095D4 6B00                       		bmi.s	loc_8B48
000095D6 3601                       		move.w	d1,d3
000095D8 D643                       		add.w	d3,d3
000095DA B043                       		cmp.w	d3,d0
000095DC 6200                       		bhi.s	loc_8B48
000095DE 1629 0016                  		move.b	$16(a1),d3
000095E2 4883                       		ext.w	d3
000095E4 D443                       		add.w	d3,d2
000095E6 3629 000C                  		move.w	$C(a1),d3
000095EA 9668 000C                  		sub.w	$C(a0),d3
000095EE D642                       		add.w	d2,d3
000095F0 6B00                       		bmi.s	loc_8B48
000095F2 3802                       		move.w	d2,d4
000095F4 D844                       		add.w	d4,d4
000095F6 B644                       		cmp.w	d4,d3
000095F8 6400                       		bcc.s	loc_8B48
000095FA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000095FE 6B00                       		bmi.s	loc_8B48
00009600 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009606 6400                       		bcc.s	loc_8B48
00009608 4A78 FE08                  		tst.w	($FFFFFE08).w
0000960C 6600                       		bne.s	loc_8B48
0000960E 3A00                       		move.w	d0,d5
00009610 B240                       		cmp.w	d0,d1
00009612 6400                       		bcc.s	loc_8B30
00009614 D241                       		add.w	d1,d1
00009616 9041                       		sub.w	d1,d0
00009618 3A00                       		move.w	d0,d5
0000961A 4445                       		neg.w	d5
0000961C                            
0000961C                            loc_8B30:
0000961C 3203                       		move.w	d3,d1
0000961E B443                       		cmp.w	d3,d2
00009620 6400                       		bcc.s	loc_8B3C
00009622 9644                       		sub.w	d4,d3
00009624 3203                       		move.w	d3,d1
00009626 4441                       		neg.w	d1
00009628                            
00009628                            loc_8B3C:
00009628 BA41                       		cmp.w	d1,d5
0000962A 6200                       		bhi.s	loc_8B44
0000962C 7801                       		moveq	#1,d4
0000962E 4E75                       		rts	
00009630                            ; ===========================================================================
00009630                            
00009630                            loc_8B44:
00009630 78FF                       		moveq	#-1,d4
00009632 4E75                       		rts	
00009634                            ; ===========================================================================
00009634                            
00009634                            loc_8B48:
00009634 7800                       		moveq	#0,d4
00009636 4E75                       		rts	
00009638                            ; End of function Obj44_SolidWall2
00009638                            
00009638                            ; ===========================================================================
00009638                            ; ---------------------------------------------------------------------------
00009638                            ; Object 1E - Ball Hog enemy (SBZ)
00009638                            ; ---------------------------------------------------------------------------
00009638                            
00009638                            Obj1E:					; XREF: Obj_Index
00009638 7000                       		moveq	#0,d0
0000963A 1028 0024                  		move.b	$24(a0),d0
0000963E 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009642 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009646                            ; ===========================================================================
00009646 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009648 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000964A                            ; ===========================================================================
0000964A                            
0000964A                            Obj1E_Main:				; XREF: Obj1E_Index
0000964A 117C 0013 0016             		move.b	#$13,$16(a0)
00009650 117C 0008 0017             		move.b	#8,$17(a0)
00009656 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000965E 317C 2302 0002             		move.w	#$2302,2(a0)
00009664 117C 0004 0001             		move.b	#4,1(a0)
0000966A 117C 0004 0018             		move.b	#4,$18(a0)
00009670 117C 0005 0020             		move.b	#5,$20(a0)
00009676 117C 000C 0019             		move.b	#$C,$19(a0)
0000967C 6100 0000                  		bsr.w	ObjectFall
00009680 4EB9 0000 0000             		jsr	ObjHitFloor
00009686 4A41                       		tst.w	d1
00009688 6A00                       		bpl.s	locret_8BAC
0000968A D368 000C                  		add.w	d1,$C(a0)
0000968E 317C 0000 0012             		move.w	#0,$12(a0)
00009694 5428 0024                  		addq.b	#2,$24(a0)
00009698                            
00009698                            locret_8BAC:
00009698 4E75                       		rts	
0000969A                            ; ===========================================================================
0000969A                            
0000969A                            Obj1E_Action:				; XREF: Obj1E_Index
0000969A 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000096A0 6100 0000                  		bsr.w	AnimateSprite
000096A4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
000096AA 6600                       		bne.s	Obj1E_SetBall	; if not, branch
000096AC 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
000096B0 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
000096B2 6000                       		bra.s	Obj1E_MarkAsGone
000096B4                            ; ===========================================================================
000096B4                            
000096B4                            Obj1E_SetBall:				; XREF: Obj1E_Action
000096B4 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
000096B8                            
000096B8                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
000096B8 6000 0000                  		bra.w	MarkObjGone
000096BC                            ; ===========================================================================
000096BC                            
000096BC                            Obj1E_MakeBall:				; XREF: Obj1E_Action
000096BC 117C 0001 0032             		move.b	#1,$32(a0)
000096C2 6100 0000                  		bsr.w	SingleObjLoad
000096C6 6600                       		bne.s	loc_8C1A
000096C8 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000096CC 3368 0008 0008             		move.w	8(a0),8(a1)
000096D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000096D8 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
000096DE 337C 0000 0012             		move.w	#0,$12(a1)
000096E4 70FC                       		moveq	#-4,d0
000096E6 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000096EC 6700                       		beq.s	loc_8C0A	; if not, branch
000096EE 4440                       		neg.w	d0
000096F0 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000096F4                            
000096F4                            loc_8C0A:
000096F4 D169 0008                  		add.w	d0,8(a1)
000096F8 0669 000C 000C             		addi.w	#$C,$C(a1)
000096FE 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009704                            
00009704                            loc_8C1A:
00009704 60B2                       		bra.s	Obj1E_MarkAsGone
00009706                            ; ===========================================================================
00009706                            ; ---------------------------------------------------------------------------
00009706                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009706                            ; ---------------------------------------------------------------------------
00009706                            
00009706                            Obj20:					; XREF: Obj_Index
00009706 7000                       		moveq	#0,d0
00009708 1028 0024                  		move.b	$24(a0),d0
0000970C 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009710 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009714                            ; ===========================================================================
00009714 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009716 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009718                            ; ===========================================================================
00009718                            
00009718                            Obj20_Main:				; XREF: Obj20_Index
00009718 5428 0024                  		addq.b	#2,$24(a0)
0000971C 117C 0007 0016             		move.b	#7,$16(a0)
00009722 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000972A 317C 2302 0002             		move.w	#$2302,2(a0)
00009730 117C 0004 0001             		move.b	#4,1(a0)
00009736 117C 0003 0018             		move.b	#3,$18(a0)
0000973C 117C 0087 0020             		move.b	#$87,$20(a0)
00009742 117C 0008 0019             		move.b	#8,$19(a0)
00009748 7000                       		moveq	#0,d0
0000974A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000974E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009752 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009756 117C 0004 001A             		move.b	#4,$1A(a0)
0000975C                            
0000975C                            Obj20_Bounce:				; XREF: Obj20_Index
0000975C 4EB9 0000 0000             		jsr	ObjectFall
00009762 4A68 0012                  		tst.w	$12(a0)
00009766 6B00                       		bmi.s	Obj20_ChkExplode
00009768 4EB9 0000 0000             		jsr	ObjHitFloor
0000976E 4A41                       		tst.w	d1
00009770 6A00                       		bpl.s	Obj20_ChkExplode
00009772 D368 000C                  		add.w	d1,$C(a0)
00009776 317C FD00 0012             		move.w	#-$300,$12(a0)
0000977C 4A03                       		tst.b	d3
0000977E 6700                       		beq.s	Obj20_ChkExplode
00009780 6B00                       		bmi.s	loc_8CA4
00009782 4A68 0010                  		tst.w	$10(a0)
00009786 6A00                       		bpl.s	Obj20_ChkExplode
00009788 4468 0010                  		neg.w	$10(a0)
0000978C 6000                       		bra.s	Obj20_ChkExplode
0000978E                            ; ===========================================================================
0000978E                            
0000978E                            loc_8CA4:				; XREF: Obj20_Bounce
0000978E 4A68 0010                  		tst.w	$10(a0)
00009792 6B00                       		bmi.s	Obj20_ChkExplode
00009794 4468 0010                  		neg.w	$10(a0)
00009798                            
00009798                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009798 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000979C 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000979E 10BC 0024                  		move.b	#$24,0(a0)
000097A2 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000097A6 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
000097AC 6000 0000                  		bra.w	Obj3F		; jump to explosion code
000097B0                            ; ===========================================================================
000097B0                            
000097B0                            Obj20_Animate:				; XREF: Obj20_ChkExplode
000097B0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000097B4 6A00                       		bpl.s	Obj20_Display
000097B6 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
000097BC 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000097C2                            
000097C2                            Obj20_Display:
000097C2 6100 0000                  		bsr.w	DisplaySprite
000097C6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000097CA 0640 00E0                  		addi.w	#$E0,d0
000097CE B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000097D2 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000097D6 4E75                       		rts	
000097D8                            ; ===========================================================================
000097D8                            ; ---------------------------------------------------------------------------
000097D8                            ; Object 24 - explosion	from a destroyed monitor
000097D8                            ; ---------------------------------------------------------------------------
000097D8                            
000097D8                            Obj24:					; XREF: Obj_Index
000097D8 7000                       		moveq	#0,d0
000097DA 1028 0024                  		move.b	$24(a0),d0
000097DE 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000097E2 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000097E6                            ; ===========================================================================
000097E6 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000097E8 0000                       		dc.w Obj24_Animate-Obj24_Index
000097EA                            ; ===========================================================================
000097EA                            
000097EA                            Obj24_Main:				; XREF: Obj24_Index
000097EA 5428 0024                  		addq.b	#2,$24(a0)
000097EE 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000097F6 317C 041C 0002             		move.w	#$41C,2(a0)
000097FC 117C 0004 0001             		move.b	#4,1(a0)
00009802 117C 0001 0018             		move.b	#1,$18(a0)
00009808 117C 0000 0020             		move.b	#0,$20(a0)
0000980E 117C 000C 0019             		move.b	#$C,$19(a0)
00009814 117C 0009 001E             		move.b	#9,$1E(a0)
0000981A 117C 0000 001A             		move.b	#0,$1A(a0)
00009820 303C 00A5                  		move.w	#$A5,d0
00009824 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play explosion sound
0000982A                            
0000982A                            Obj24_Animate:				; XREF: Obj24_Index
0000982A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000982E 6A00                       		bpl.s	Obj24_Display
00009830 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009836 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000983A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009840 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009844                            
00009844                            Obj24_Display:
00009844 6000 0000                  		bra.w	DisplaySprite
00009848                            ; ===========================================================================
00009848                            ; ---------------------------------------------------------------------------
00009848                            ; Object 27 - explosion	from a destroyed enemy
00009848                            ; ---------------------------------------------------------------------------
00009848                            
00009848                            Obj27:					; XREF: Obj_Index
00009848 7000                       		moveq	#0,d0
0000984A 1028 0024                  		move.b	$24(a0),d0
0000984E 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009852 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009856                            ; ===========================================================================
00009856 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009858 0000                       		dc.w Obj27_Main-Obj27_Index
0000985A 0000                       		dc.w Obj27_Animate-Obj27_Index
0000985C                            ; ===========================================================================
0000985C                            
0000985C                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000985C 5428 0024                  		addq.b	#2,$24(a0)
00009860 6100 0000                  		bsr.w	SingleObjLoad
00009864 6600                       		bne.s	Obj27_Main
00009866 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000986A 3368 0008 0008             		move.w	8(a0),8(a1)
00009870 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009876 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000987C                            
0000987C                            Obj27_Main:				; XREF: Obj27_Index
0000987C 5428 0024                  		addq.b	#2,$24(a0)
00009880 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009888 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000988E 117C 0004 0001             		move.b	#4,1(a0)
00009894 117C 0001 0018             		move.b	#1,$18(a0)
0000989A 117C 0000 0020             		move.b	#0,$20(a0)
000098A0 117C 000C 0019             		move.b	#$C,$19(a0)
000098A6                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000098A6 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000098AC 117C 0000 001A             		move.b	#0,$1A(a0)
000098B2 303C 00C1                  		move.w	#$C1,d0
000098B6 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000098BC                            
000098BC 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
000098C2 1028 0028                  		move.b	$28(a0),d0
000098C6 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000098CC 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000098D2                            
000098D2                            Obj27_Animate:				; XREF: Obj27_Index
000098D2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000098D6 6A00                       		bpl.s	Obj27_Display
000098D8                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000098D8 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000098DE 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000098E2 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000098E8 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000098EC                            
000098EC                            Obj27_Display:
000098EC 4EB9 0000 0000             		jsr	ObjectFall
000098F2 6000 0000                  		bra.w	DisplaySprite
000098F6                            ; ===========================================================================
000098F6                            ; ---------------------------------------------------------------------------
000098F6                            Obj27_ExplosionXYSpd:
000098F6                            		; dc.w	-$350, -$300	; Left
000098F6                            		; dc.w	-$200, -$450	; Near middle (left)
000098F6                            		; dc.w	0, -$500	; Middle
000098F6                            		; dc.w	$200, -$450	; Near middle (right)
000098F6                            		; dc.w	$350, -$300	; Right
000098F6                            
000098F6 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000098FA FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000098FE 0000 FA00                  		dc.w	0, -$600	; Middle
00009902 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009906 0150 FC00                  		dc.w	$150, -$400	; Right
0000990A                            
0000990A 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009924                            ; ---------------------------------------------------------------------------
00009924                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009924                            ; ---------------------------------------------------------------------------
00009924                            
00009924                            Obj3F:					; XREF: Obj_Index
00009924 7000                       		moveq	#0,d0
00009926 1028 0024                  		move.b	$24(a0),d0
0000992A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000992E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009932                            ; ===========================================================================
00009932 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009934 FFA0                       		dc.w Obj27_Animate-Obj3F_Index
00009936                            ; ===========================================================================
00009936                            
00009936                            Obj3F_Main:				; XREF: Obj3F_Index
00009936 5428 0024                  		addq.b	#2,$24(a0)
0000993A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009942 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009948 117C 0004 0001             		move.b	#4,1(a0)
0000994E 117C 0001 0018             		move.b	#1,$18(a0)
00009954 117C 0000 0020             		move.b	#0,$20(a0)
0000995A 117C 000C 0019             		move.b	#$C,$19(a0)
00009960 117C 0007 001E             		move.b	#7,$1E(a0)
00009966 117C 0000 001A             		move.b	#0,$1A(a0)
0000996C 303C 00C4                  		move.w	#$C4,d0
00009970 4EF9 0000 15D4             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009976                            ; ===========================================================================
00009976                            Ani_obj1E:
00009976                            	include "_anim\obj1E.asm"
00009976                            ; ---------------------------------------------------------------------------
00009976                            ; Animation script - doors (SBZ)
00009976                            ; ---------------------------------------------------------------------------
00009976 0000                       		dc.w byte_8E4A-Ani_obj1E
00009978 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009990 00                         		even
00009990 00                         		even
00009990                            
00009990                            ; ---------------------------------------------------------------------------
00009990                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009990                            ; ---------------------------------------------------------------------------
00009990                            Map_obj1E:
00009990                            	include "_maps\obj1E.asm"
00009990                            Map_a7ad:
00009990 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
00009992 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
00009994 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009996 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009998 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
0000999A 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
0000999C 02                         Map_a7ad_C: 	dc.b $2
0000999D EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
000099A2 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
000099A7 02                         Map_a7ad_17: 	dc.b $2
000099A8 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
000099AD FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
000099B2 02                         Map_a7ad_22: 	dc.b $2
000099B3 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
000099B8 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
000099BD 02                         Map_a7ad_2D: 	dc.b $2
000099BE E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
000099C3 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
000099C8 02                         Map_a7ad_38: 	dc.b $2
000099C9 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
000099CE E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
000099D3 02                         Map_a7ad_43: 	dc.b $2
000099D4 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
000099D9 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
000099DE                            	even
000099DE                            	even
000099DE                            
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            ; Sprite mappings - explosion
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            Map_obj24:
000099DE                            	include "_maps\obj24.asm"
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            ; Sprite mappings - explosion
000099DE                            ; ---------------------------------------------------------------------------
000099DE 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000099E2 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000099E6 01                         byte_8EAE:	dc.b 1
000099E7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000099EC 01                         byte_8EB4:	dc.b 1
000099ED F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000099F2 01                         byte_8EBA:	dc.b 1
000099F3 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000099F8 01                         byte_8EC0:	dc.b 1
000099F9 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000099FE                            		even
000099FE                            		even
000099FE                            
000099FE                            ; ---------------------------------------------------------------------------
000099FE                            ; Sprite mappings - explosion
000099FE                            ; ---------------------------------------------------------------------------
000099FE 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009A02 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009A06 0000                       		dc.w byte_8EF7-Map_obj27
00009A08 01                         byte_8ED0:	dc.b 1
00009A09 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009A0E 01                         byte_8ED6:	dc.b 1
00009A0F F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009A14 01                         byte_8EDC:	dc.b 1
00009A15 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009A1A 04                         byte_8EE2:	dc.b 4
00009A1B EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009A20 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009A25 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009A2A FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009A2F 04                         byte_8EF7:	dc.b 4
00009A30 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009A35 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009A3A 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009A3F FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009A44                            		even
00009A44                            ; ---------------------------------------------------------------------------
00009A44                            ; Sprite mappings - explosion from when	a boss is destroyed
00009A44                            ; ---------------------------------------------------------------------------
00009A44 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009A46 0000                       		dc.w byte_8F16-Map_obj3F
00009A48 0000                       		dc.w byte_8F1C-Map_obj3F
00009A4A FFD6                       		dc.w byte_8EE2-Map_obj3F
00009A4C FFEB                       		dc.w byte_8EF7-Map_obj3F
00009A4E 01                         byte_8F16:	dc.b 1
00009A4F F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009A54 01                         byte_8F1C:	dc.b 1
00009A55 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009A5A                            		even
00009A5A                            ; ===========================================================================
00009A5A                            ; ---------------------------------------------------------------------------
00009A5A                            ; Object 28 - animals
00009A5A                            ; ---------------------------------------------------------------------------
00009A5A                            
00009A5A                            Obj28:					; XREF: Obj_Index
00009A5A 7000                       		moveq	#0,d0
00009A5C 1028 0024                  		move.b	$24(a0),d0
00009A60 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009A64 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009A68                            ; ===========================================================================
00009A68 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009A6C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009A70 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009A74 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009A78 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009A7C 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009A80 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009A84 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009A88 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009A8C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009A90 0000                       		dc.w loc_92D6-Obj28_Index
00009A92                            
00009A92 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
00009AA2                            
00009AA2 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009AA6 0000 0000                  		dc.l Map_obj28
00009AAA FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009AAE 0000 0000                  		dc.l Map_obj28a		; mappings address
00009AB2 FE80 FD00                  		dc.w $FE80, $FD00
00009AB6 0000 0000                  		dc.l Map_obj28
00009ABA FEC0 FE80                  		dc.w $FEC0, $FE80
00009ABE 0000 0000                  		dc.l Map_obj28a
00009AC2 FE40 FD00                  		dc.w $FE40, $FD00
00009AC6 0000 0000                  		dc.l Map_obj28b
00009ACA FD00 FC00                  		dc.w $FD00, $FC00
00009ACE 0000 0000                  		dc.l Map_obj28a
00009AD2 FD80 FC80                  		dc.w $FD80, $FC80
00009AD6 0000 0000                  		dc.l Map_obj28b
00009ADA                            
00009ADA FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009AEA FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009AFA FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009B06                            
00009B06 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009B1A 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009B2E 0000 0000                  		dc.l Map_obj28b
00009B32                            
00009B32 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009B44 0565 05B3                  		dc.w $565, $5B3
00009B48                            ; ===========================================================================
00009B48                            
00009B48                            Obj28_Ending:				; XREF: Obj28_Index
00009B48 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009B4C 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009B50 7000                       		moveq	#0,d0
00009B52 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009B56 D040                       		add.w	d0,d0		; multiply d0 by 2
00009B58 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009B5C 0440 0014                  		subi.w	#$14,d0
00009B60 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009B66 D040                       		add.w	d0,d0
00009B68 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009B6E 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009B72 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009B78 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009B7E 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009B84 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009B8A 117C 000C 0016             		move.b	#$C,$16(a0)
00009B90 117C 0004 0001             		move.b	#4,1(a0)
00009B96 08E8 0000 0001             		bset	#0,1(a0)
00009B9C 117C 0006 0018             		move.b	#6,$18(a0)
00009BA2 117C 0008 0019             		move.b	#8,$19(a0)
00009BA8 117C 0007 001E             		move.b	#7,$1E(a0)
00009BAE 6000 0000                  		bra.w	DisplaySprite
00009BB2                            ; ===========================================================================
00009BB2                            
00009BB2                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009BB2 5428 0024                  		addq.b	#2,$24(a0)
00009BB6 6100 9190                  		bsr.w	RandomNumber
00009BBA 0240 0001                  		andi.w	#1,d0
00009BBE 7200                       		moveq	#0,d1
00009BC0 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009BC4 D241                       		add.w	d1,d1
00009BC6 D240                       		add.w	d0,d1
00009BC8 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
00009BCC 1031 1000                  		move.b	(a1,d1.w),d0
00009BD0 1140 0030                  		move.b	d0,$30(a0)
00009BD4 E748                       		lsl.w	#3,d0
00009BD6 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009BDA D2C0                       		adda.w	d0,a1
00009BDC 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009BE0 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009BE4 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009BE8 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009BEE 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009BF4 6700                       		beq.s	loc_90C0	; if yes, branch
00009BF6 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009BFC                            
00009BFC                            loc_90C0:
00009BFC 117C 000C 0016             		move.b	#$C,$16(a0)
00009C02 117C 0004 0001             		move.b	#4,1(a0)
00009C08 08E8 0000 0001             		bset	#0,1(a0)
00009C0E 117C 0006 0018             		move.b	#6,$18(a0)
00009C14 117C 0008 0019             		move.b	#8,$19(a0)
00009C1A 117C 0007 001E             		move.b	#7,$1E(a0)
00009C20 117C 0002 001A             		move.b	#2,$1A(a0)
00009C26 317C FC00 0012             		move.w	#-$400,$12(a0)
00009C2C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009C30 6600                       		bne.s	loc_911C
00009C32 6100 0000                  		bsr.w	SingleObjLoad
00009C36 6600                       		bne.s	Obj28_Display
00009C38 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009C3C 3368 0008 0008             		move.w	8(a0),8(a1)
00009C42 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009C48 3028 003E                  		move.w	$3E(a0),d0
00009C4C E248                       		lsr.w	#1,d0
00009C4E 1340 001A                  		move.b	d0,$1A(a1)
00009C52                            
00009C52                            Obj28_Display:
00009C52 6000 0000                  		bra.w	DisplaySprite
00009C56                            ; ===========================================================================
00009C56                            
00009C56                            loc_911C:
00009C56 117C 0012 0024             		move.b	#$12,$24(a0)
00009C5C 4268 0010                  		clr.w	$10(a0)
00009C60 6000 0000                  		bra.w	DisplaySprite
00009C64                            ; ===========================================================================
00009C64                            
00009C64                            loc_912A:				; XREF: Obj28_Index
00009C64 4A28 0001                  		tst.b	1(a0)
00009C68 6A00 0000                  		bpl.w	DeleteObject
00009C6C 6100 0000                  		bsr.w	ObjectFall
00009C70 4A68 0012                  		tst.w	$12(a0)
00009C74 6B00                       		bmi.s	loc_9180
00009C76 4EB9 0000 0000             		jsr	ObjHitFloor
00009C7C 4A41                       		tst.w	d1
00009C7E 6A00                       		bpl.s	loc_9180
00009C80 D368 000C                  		add.w	d1,$C(a0)
00009C84 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009C8A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C90 117C 0001 001A             		move.b	#1,$1A(a0)
00009C96 1028 0030                  		move.b	$30(a0),d0
00009C9A D000                       		add.b	d0,d0
00009C9C 5800                       		addq.b	#4,d0
00009C9E 1140 0024                  		move.b	d0,$24(a0)
00009CA2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009CA6 6700                       		beq.s	loc_9180
00009CA8 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009CAE 6700                       		beq.s	loc_9180
00009CB0 4468 0010                  		neg.w	$10(a0)
00009CB4 0868 0000 0001             		bchg	#0,1(a0)
00009CBA                            
00009CBA                            loc_9180:
00009CBA 6000 0000                  		bra.w	DisplaySprite
00009CBE                            ; ===========================================================================
00009CBE                            
00009CBE                            loc_9184:				; XREF: Obj28_Index
00009CBE 6100 0000                  		bsr.w	ObjectFall
00009CC2 117C 0001 001A             		move.b	#1,$1A(a0)
00009CC8 4A68 0012                  		tst.w	$12(a0)
00009CCC 6B00                       		bmi.s	loc_91AE
00009CCE 117C 0000 001A             		move.b	#0,$1A(a0)
00009CD4 4EB9 0000 0000             		jsr	ObjHitFloor
00009CDA 4A41                       		tst.w	d1
00009CDC 6A00                       		bpl.s	loc_91AE
00009CDE D368 000C                  		add.w	d1,$C(a0)
00009CE2 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009CE8                            
00009CE8                            loc_91AE:
00009CE8 4A28 0028                  		tst.b	$28(a0)
00009CEC 6600                       		bne.s	loc_9224
00009CEE 4A28 0001                  		tst.b	1(a0)
00009CF2 6A00 0000                  		bpl.w	DeleteObject
00009CF6 6000 0000                  		bra.w	DisplaySprite
00009CFA                            ; ===========================================================================
00009CFA                            
00009CFA                            loc_91C0:				; XREF: Obj28_Index
00009CFA 7218                       		moveq	#$18,d1
00009CFC 4EB9 0000 0000             		jsr	ObjectFallCustom
00009D02 4A68 0012                  		tst.w	$12(a0)
00009D06 6B00                       		bmi.s	loc_91FC
00009D08 4EB9 0000 0000             		jsr	ObjHitFloor
00009D0E 4A41                       		tst.w	d1
00009D10 6A00                       		bpl.s	loc_91FC
00009D12 D368 000C                  		add.w	d1,$C(a0)
00009D16 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D1C 4A28 0028                  		tst.b	$28(a0)
00009D20 6700                       		beq.s	loc_91FC
00009D22 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009D28 6700                       		beq.s	loc_91FC
00009D2A 4468 0010                  		neg.w	$10(a0)
00009D2E 0868 0000 0001             		bchg	#0,1(a0)
00009D34                            
00009D34                            loc_91FC:
00009D34 5328 001E                  		subq.b	#1,$1E(a0)
00009D38 6A00                       		bpl.s	loc_9212
00009D3A 117C 0001 001E             		move.b	#1,$1E(a0)
00009D40 5228 001A                  		addq.b	#1,$1A(a0)
00009D44 0228 0001 001A             		andi.b	#1,$1A(a0)
00009D4A                            
00009D4A                            loc_9212:
00009D4A 4A28 0028                  		tst.b	$28(a0)
00009D4E 6600                       		bne.s	loc_9224
00009D50 4A28 0001                  		tst.b	1(a0)
00009D54 6A00 0000                  		bpl.w	DeleteObject
00009D58 6000 0000                  		bra.w	DisplaySprite
00009D5C                            ; ===========================================================================
00009D5C                            
00009D5C                            loc_9224:				; XREF: Obj28_Index
00009D5C 3028 0008                  		move.w	8(a0),d0
00009D60 9078 D008                  		sub.w	($FFFFD008).w,d0
00009D64 6500                       		bcs.s	loc_923C
00009D66 0440 0180                  		subi.w	#$180,d0
00009D6A 6A00                       		bpl.s	loc_923C
00009D6C 4A28 0001                  		tst.b	1(a0)
00009D70 6A00 0000                  		bpl.w	DeleteObject
00009D74                            
00009D74                            loc_923C:
00009D74 6000 0000                  		bra.w	DisplaySprite
00009D78                            ; ===========================================================================
00009D78                            
00009D78                            loc_9240:				; XREF: Obj28_Index
00009D78 4A28 0001                  		tst.b	1(a0)
00009D7C 6A00 0000                  		bpl.w	DeleteObject
00009D80 5368 0036                  		subq.w	#1,$36(a0)
00009D84 6600 0000                  		bne.w	loc_925C
00009D88 117C 0002 0024             		move.b	#2,$24(a0)
00009D8E 117C 0003 0018             		move.b	#3,$18(a0)
00009D94                            
00009D94                            loc_925C:
00009D94 6000 0000                  		bra.w	DisplaySprite
00009D98                            ; ===========================================================================
00009D98                            
00009D98                            loc_9260:				; XREF: Obj28_Index
00009D98 6100 0000                  		bsr.w	sub_9404
00009D9C 6400                       		bcc.s	loc_927C
00009D9E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009DA4 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009DAA 117C 000E 0024             		move.b	#$E,$24(a0)
00009DB0 6000 FF48                  		bra.w	loc_91C0
00009DB4                            ; ===========================================================================
00009DB4                            
00009DB4                            loc_927C:
00009DB4 6000 FFA6                  		bra.w	loc_9224
00009DB8                            ; ===========================================================================
00009DB8                            
00009DB8                            loc_9280:				; XREF: Obj28_Index
00009DB8 6100 0000                  		bsr.w	sub_9404
00009DBC 6A00                       		bpl.s	loc_92B6
00009DBE 4268 0010                  		clr.w	$10(a0)
00009DC2 4268 0032                  		clr.w	$32(a0)
00009DC6 7218                       		moveq	#$18,d1
00009DC8 4EB9 0000 0000             		jsr	ObjectFallCustom
00009DCE 6100 0000                  		bsr.w	loc_93C4
00009DD2 6100 0000                  		bsr.w	loc_93EC
00009DD6 5328 001E                  		subq.b	#1,$1E(a0)
00009DDA 6A00                       		bpl.s	loc_92B6
00009DDC 117C 0001 001E             		move.b	#1,$1E(a0)
00009DE2 5228 001A                  		addq.b	#1,$1A(a0)
00009DE6 0228 0001 001A             		andi.b	#1,$1A(a0)
00009DEC                            
00009DEC                            loc_92B6:
00009DEC 6000 FF6E                  		bra.w	loc_9224
00009DF0                            ; ===========================================================================
00009DF0                            
00009DF0                            loc_92BA:				; XREF: Obj28_Index
00009DF0 6100 0000                  		bsr.w	sub_9404
00009DF4 6A00                       		bpl.s	loc_9310
00009DF6 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009DFC 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E02 117C 0004 0024             		move.b	#4,$24(a0)
00009E08 6000 FEB4                  		bra.w	loc_9184
00009E0C                            ; ===========================================================================
00009E0C                            
00009E0C                            loc_92D6:				; XREF: Obj28_Index
00009E0C 6100 0000                  		bsr.w	ObjectFall
00009E10 117C 0001 001A             		move.b	#1,$1A(a0)
00009E16 4A68 0012                  		tst.w	$12(a0)
00009E1A 6B00                       		bmi.s	loc_9310
00009E1C 117C 0000 001A             		move.b	#0,$1A(a0)
00009E22 4EB9 0000 0000             		jsr	ObjHitFloor
00009E28 4A41                       		tst.w	d1
00009E2A 6A00                       		bpl.s	loc_9310
00009E2C 4628 0029                  		not.b	$29(a0)
00009E30 6600                       		bne.s	loc_9306
00009E32 4468 0010                  		neg.w	$10(a0)
00009E36 0868 0000 0001             		bchg	#0,1(a0)
00009E3C                            
00009E3C                            loc_9306:
00009E3C D368 000C                  		add.w	d1,$C(a0)
00009E40 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E46                            
00009E46                            loc_9310:
00009E46 6000 FF14                  		bra.w	loc_9224
00009E4A                            ; ===========================================================================
00009E4A                            
00009E4A                            loc_9314:				; XREF: Obj28_Index
00009E4A 6100 0000                  		bsr.w	sub_9404
00009E4E 6A00                       		bpl.s	loc_932E
00009E50 4268 0010                  		clr.w	$10(a0)
00009E54 4268 0032                  		clr.w	$32(a0)
00009E58 6100 0000                  		bsr.w	ObjectFall
00009E5C 6100 0000                  		bsr.w	loc_93C4
00009E60 6100 0000                  		bsr.w	loc_93EC
00009E64                            
00009E64                            loc_932E:
00009E64 6000 FEF6                  		bra.w	loc_9224
00009E68                            ; ===========================================================================
00009E68                            
00009E68                            loc_9332:				; XREF: Obj28_Index
00009E68 6100 0000                  		bsr.w	sub_9404
00009E6C 6A00                       		bpl.s	loc_936C
00009E6E 6100 0000                  		bsr.w	ObjectFall
00009E72 117C 0001 001A             		move.b	#1,$1A(a0)
00009E78 4A68 0012                  		tst.w	$12(a0)
00009E7C 6B00                       		bmi.s	loc_936C
00009E7E 117C 0000 001A             		move.b	#0,$1A(a0)
00009E84 4EB9 0000 0000             		jsr	ObjHitFloor
00009E8A 4A41                       		tst.w	d1
00009E8C 6A00                       		bpl.s	loc_936C
00009E8E 4468 0010                  		neg.w	$10(a0)
00009E92 0868 0000 0001             		bchg	#0,1(a0)
00009E98 D368 000C                  		add.w	d1,$C(a0)
00009E9C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009EA2                            
00009EA2                            loc_936C:
00009EA2 6000 FEB8                  		bra.w	loc_9224
00009EA6                            ; ===========================================================================
00009EA6                            
00009EA6                            loc_9370:				; XREF: Obj28_Index
00009EA6 6100 0000                  		bsr.w	sub_9404
00009EAA 6A00                       		bpl.s	loc_93C0
00009EAC 7218                       		moveq	#$18,d1
00009EAE 4EB9 0000 0000             		jsr	ObjectFallCustom
00009EB4 4A68 0012                  		tst.w	$12(a0)
00009EB8 6B00                       		bmi.s	loc_93AA
00009EBA 4EB9 0000 0000             		jsr	ObjHitFloor
00009EC0 4A41                       		tst.w	d1
00009EC2 6A00                       		bpl.s	loc_93AA
00009EC4 4628 0029                  		not.b	$29(a0)
00009EC8 6600                       		bne.s	loc_93A0
00009ECA 4468 0010                  		neg.w	$10(a0)
00009ECE 0868 0000 0001             		bchg	#0,1(a0)
00009ED4                            
00009ED4                            loc_93A0:
00009ED4 D368 000C                  		add.w	d1,$C(a0)
00009ED8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009EDE                            
00009EDE                            loc_93AA:
00009EDE 5328 001E                  		subq.b	#1,$1E(a0)
00009EE2 6A00                       		bpl.s	loc_93C0
00009EE4 117C 0001 001E             		move.b	#1,$1E(a0)
00009EEA 5228 001A                  		addq.b	#1,$1A(a0)
00009EEE 0228 0001 001A             		andi.b	#1,$1A(a0)
00009EF4                            
00009EF4                            loc_93C0:
00009EF4 6000 FE66                  		bra.w	loc_9224
00009EF8                            ; ===========================================================================
00009EF8                            
00009EF8                            loc_93C4:
00009EF8 117C 0001 001A             		move.b	#1,$1A(a0)
00009EFE 4A68 0012                  		tst.w	$12(a0)
00009F02 6B00                       		bmi.s	locret_93EA
00009F04 117C 0000 001A             		move.b	#0,$1A(a0)
00009F0A 4EB9 0000 0000             		jsr	ObjHitFloor
00009F10 4A41                       		tst.w	d1
00009F12 6A00                       		bpl.s	locret_93EA
00009F14 D368 000C                  		add.w	d1,$C(a0)
00009F18 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009F1E                            
00009F1E                            locret_93EA:
00009F1E 4E75                       		rts	
00009F20                            ; ===========================================================================
00009F20                            
00009F20                            loc_93EC:
00009F20 08E8 0000 0001             		bset	#0,1(a0)
00009F26 3028 0008                  		move.w	8(a0),d0
00009F2A 9078 D008                  		sub.w	($FFFFD008).w,d0
00009F2E 6400                       		bcc.s	locret_9402
00009F30 08A8 0000 0001             		bclr	#0,1(a0)
00009F36                            
00009F36                            locret_9402:
00009F36 4E75                       		rts	
00009F38                            
00009F38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F38                            
00009F38                            
00009F38                            sub_9404:
00009F38 3038 D008                  		move.w	($FFFFD008).w,d0
00009F3C 9068 0008                  		sub.w	8(a0),d0
00009F40 0440 00B8                  		subi.w	#$B8,d0
00009F44 4E75                       		rts	
00009F46                            ; End of function sub_9404
00009F46                            
00009F46                            ; ===========================================================================
00009F46                            ; ---------------------------------------------------------------------------
00009F46                            ; Object 29 - points that appear when you destroy something
00009F46                            ; ---------------------------------------------------------------------------
00009F46                            
00009F46                            Obj29:					; XREF: Obj_Index
00009F46 7000                       		moveq	#0,d0
00009F48 1028 0024                  		move.b	$24(a0),d0
00009F4C 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009F50 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009F54 6000 0000                  		bra.w	DisplaySprite
00009F58                            ; ===========================================================================
00009F58 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009F5A 0000                       		dc.w Obj29_Slower-Obj29_Index
00009F5C                            ; ===========================================================================
00009F5C                            
00009F5C                            Obj29_Main:				; XREF: Obj29_Index
00009F5C 5428 0024                  		addq.b	#2,$24(a0)
00009F60 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009F68 317C 2797 0002             		move.w	#$2797,2(a0)
00009F6E 117C 0004 0001             		move.b	#4,1(a0)
00009F74 117C 0001 0018             		move.b	#1,$18(a0)
00009F7A 117C 0008 0019             		move.b	#8,$19(a0)
00009F80 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009F86                            
00009F86                            Obj29_Slower:				; XREF: Obj29_Index
00009F86 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009F8A 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009F8E 7218                       		moveq	#$18,d1
00009F90 4EF9 0000 0000             		jmp	ObjectFallCustom
00009F96                            ; ===========================================================================
00009F96                            ; ---------------------------------------------------------------------------
00009F96                            ; Sprite mappings - animals
00009F96                            ; ---------------------------------------------------------------------------
00009F96                            Map_obj28:
00009F96                            	include "_maps\obj28.asm"
00009F96                            ; ---------------------------------------------------------------------------
00009F96                            ; Sprite mappings - animals
00009F96                            ; ---------------------------------------------------------------------------
00009F96 0000                       		dc.w byte_9472-Map_obj28
00009F98 0000                       		dc.w byte_9478-Map_obj28
00009F9A 0000                       		dc.w byte_946C-Map_obj28
00009F9C 01                         byte_946C:	dc.b 1
00009F9D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009FA2 01                         byte_9472:	dc.b 1
00009FA3 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009FA8 01                         byte_9478:	dc.b 1
00009FA9 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009FAE                            		even
00009FAE                            		even
00009FAE                            
00009FAE                            Map_obj28a:
00009FAE                            	include "_maps\obj28a.asm"
00009FAE                            ; ---------------------------------------------------------------------------
00009FAE                            ; Sprite mappings - animals
00009FAE                            ; ---------------------------------------------------------------------------
00009FAE 0000                       		dc.w byte_948A-Map_obj28a
00009FB0 0000                       		dc.w byte_9490-Map_obj28a
00009FB2 0000                       		dc.w byte_9484-Map_obj28a
00009FB4 01                         byte_9484:	dc.b 1
00009FB5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009FBA 01                         byte_948A:	dc.b 1
00009FBB FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009FC0 01                         byte_9490:	dc.b 1
00009FC1 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009FC6                            		even
00009FC6                            		even
00009FC6                            
00009FC6                            Map_obj28b:
00009FC6                            	include "_maps\obj28b.asm"
00009FC6                            ; ---------------------------------------------------------------------------
00009FC6                            ; Sprite mappings - animals
00009FC6                            ; ---------------------------------------------------------------------------
00009FC6 0000                       		dc.w byte_94A2-Map_obj28b
00009FC8 0000                       		dc.w byte_94A8-Map_obj28b
00009FCA 0000                       		dc.w byte_949C-Map_obj28b
00009FCC 01                         byte_949C:	dc.b 1
00009FCD F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009FD2 01                         byte_94A2:	dc.b 1
00009FD3 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009FD8 01                         byte_94A8:	dc.b 1
00009FD9 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009FDE                            		even
00009FDE                            		even
00009FDE                            
00009FDE                            ; ---------------------------------------------------------------------------
00009FDE                            ; Sprite mappings - points that	appear when you	destroy	something
00009FDE                            ; ---------------------------------------------------------------------------
00009FDE                            Map_obj29:
00009FDE                            	include "_maps\obj29.asm"
00009FDE                            ; ---------------------------------------------------------------------------
00009FDE                            ; Sprite mappings - points that	appear when you	destroy	something
00009FDE                            ; ---------------------------------------------------------------------------
00009FDE 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009FE2 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009FE6 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009FEA 0000                       		dc.w byte_94E5-Map_obj29
00009FEC 01                         byte_94BC:	dc.b 1
00009FED FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009FF2 01                         byte_94C2:	dc.b 1
00009FF3 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009FF8 01                         byte_94C8:	dc.b 1
00009FF9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009FFE 01                         byte_94CE:	dc.b 1
00009FFF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A004 01                         byte_94D4:	dc.b 1
0000A005 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A00A 02                         byte_94DA:	dc.b 2
0000A00B FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A010 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A015 02                         byte_94E5:	dc.b 2
0000A016 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A01B FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A020                            		even
0000A020                            		even
0000A020                            
0000A020                            ; ===========================================================================
0000A020                            ; ---------------------------------------------------------------------------
0000A020                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A020                            ; ---------------------------------------------------------------------------
0000A020                            
0000A020                            Obj1F:					; XREF: Obj_Index
0000A020 7000                       		moveq	#0,d0
0000A022 1028 0024                  		move.b	$24(a0),d0
0000A026 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A02A 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A02E                            ; ===========================================================================
0000A02E 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A030 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A032 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A034 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A036 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A038                            ; ===========================================================================
0000A038                            
0000A038                            Obj1F_Main:				; XREF: Obj1F_Index
0000A038 117C 0010 0016             		move.b	#$10,$16(a0)
0000A03E 117C 0008 0017             		move.b	#8,$17(a0)
0000A044 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A04C 317C 0400 0002             		move.w	#$400,2(a0)
0000A052 117C 0004 0001             		move.b	#4,1(a0)
0000A058 117C 0003 0018             		move.b	#3,$18(a0)
0000A05E 117C 0006 0020             		move.b	#6,$20(a0)
0000A064 117C 0015 0019             		move.b	#$15,$19(a0)
0000A06A 6100 0000                  		bsr.w	ObjectFall
0000A06E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A074 4A41                       		tst.w	d1
0000A076 6A00                       		bpl.s	locret_955A
0000A078 D368 000C                  		add.w	d1,$C(a0)
0000A07C 1143 0026                  		move.b	d3,$26(a0)
0000A080 317C 0000 0012             		move.w	#0,$12(a0)
0000A086 5428 0024                  		addq.b	#2,$24(a0)
0000A08A                            
0000A08A                            locret_955A:
0000A08A 4E75                       		rts	
0000A08C                            ; ===========================================================================
0000A08C                            
0000A08C                            Obj1F_Action:				; XREF: Obj1F_Index
0000A08C 7000                       		moveq	#0,d0
0000A08E 1028 0025                  		move.b	$25(a0),d0
0000A092 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A096 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A09A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A0A0 6100 0000                  		bsr.w	AnimateSprite
0000A0A4 6000 0000                  		bra.w	MarkObjGone
0000A0A8                            ; ===========================================================================
0000A0A8 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A0AA 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A0AC                            ; ===========================================================================
0000A0AC                            
0000A0AC                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A0AC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A0B0 6A00                       		bpl.s	locret_95B6
0000A0B2 4A28 0001                  		tst.b	1(a0)
0000A0B6 6A00                       		bpl.s	Obj1F_Move
0000A0B8 0868 0001 0032             		bchg	#1,$32(a0)
0000A0BE 6600                       		bne.s	Obj1F_MakeFire
0000A0C0                            
0000A0C0                            Obj1F_Move:
0000A0C0 5428 0025                  		addq.b	#2,$25(a0)
0000A0C4 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A0CA 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A0D0 6100 0000                  		bsr.w	Obj1F_SetAni
0000A0D4 5600                       		addq.b	#3,d0
0000A0D6 1140 001C                  		move.b	d0,$1C(a0)
0000A0DA 0868 0000 0022             		bchg	#0,$22(a0)
0000A0E0 6600                       		bne.s	locret_95B6
0000A0E2 4468 0010                  		neg.w	$10(a0)		; change direction
0000A0E6                            
0000A0E6                            locret_95B6:
0000A0E6 4E75                       		rts	
0000A0E8                            ; ===========================================================================
0000A0E8                            
0000A0E8                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A0E8 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A0EE 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A0F4 6100 0000                  		bsr.w	SingleObjLoad
0000A0F8 6600                       		bne.s	Obj1F_MakeFire2
0000A0FA 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A0FE 137C 0006 0024             		move.b	#6,$24(a1)
0000A104 3368 0008 0008             		move.w	8(a0),8(a1)
0000A10A 0469 0010 0008             		subi.w	#$10,8(a1)
0000A110 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A116 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A11C                            
0000A11C                            Obj1F_MakeFire2:
0000A11C 6100 0000                  		bsr.w	SingleObjLoad
0000A120 6600                       		bne.s	locret_9618
0000A122 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A126 137C 0006 0024             		move.b	#6,$24(a1)
0000A12C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A132 0669 0010 0008             		addi.w	#$10,8(a1)
0000A138 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A13E 337C 0100 0010             		move.w	#$100,$10(a1)
0000A144                            
0000A144                            locret_9618:
0000A144 4E75                       		rts	
0000A146                            ; ===========================================================================
0000A146                            
0000A146                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A146 5368 0030                  		subq.w	#1,$30(a0)
0000A14A 6B00                       		bmi.s	loc_966E
0000A14C 6100 0000                  		bsr.w	SpeedToPos
0000A150 0868 0000 0032             		bchg	#0,$32(a0)
0000A156 6600                       		bne.s	loc_9654
0000A158 3628 0008                  		move.w	8(a0),d3
0000A15C 0643 0010                  		addi.w	#$10,d3
0000A160 0828 0000 0022             		btst	#0,$22(a0)
0000A166 6700                       		beq.s	loc_9640
0000A168 0443 0020                  		subi.w	#$20,d3
0000A16C                            
0000A16C                            loc_9640:
0000A16C 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A172 0C41 FFF8                  		cmpi.w	#-8,d1
0000A176 6D00                       		blt.s	loc_966E
0000A178 0C41 000C                  		cmpi.w	#$C,d1
0000A17C 6C00                       		bge.s	loc_966E
0000A17E 4E75                       		rts	
0000A180                            ; ===========================================================================
0000A180                            
0000A180                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A180 4EB9 0000 0000             		jsr	ObjHitFloor
0000A186 D368 000C                  		add.w	d1,$C(a0)
0000A18A 1143 0026                  		move.b	d3,$26(a0)
0000A18E 6100 0000                  		bsr.w	Obj1F_SetAni
0000A192 5600                       		addq.b	#3,d0
0000A194 1140 001C                  		move.b	d0,$1C(a0)
0000A198 4E75                       		rts	
0000A19A                            ; ===========================================================================
0000A19A                            
0000A19A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A19A 5528 0025                  		subq.b	#2,$25(a0)
0000A19E 317C 003B 0030             		move.w	#59,$30(a0)
0000A1A4 317C 0000 0010             		move.w	#0,$10(a0)
0000A1AA 6100 0000                  		bsr.w	Obj1F_SetAni
0000A1AE 1140 001C                  		move.b	d0,$1C(a0)
0000A1B2 4E75                       		rts	
0000A1B4                            ; ---------------------------------------------------------------------------
0000A1B4                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A1B4                            ; ---------------------------------------------------------------------------
0000A1B4                            
0000A1B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A1B4                            
0000A1B4                            
0000A1B4                            Obj1F_SetAni:				; XREF: loc_966E
0000A1B4 7000                       		moveq	#0,d0
0000A1B6 1628 0026                  		move.b	$26(a0),d3
0000A1BA 6B00                       		bmi.s	loc_96A4
0000A1BC 0C03 0006                  		cmpi.b	#6,d3
0000A1C0 6500                       		bcs.s	locret_96A2
0000A1C2 7001                       		moveq	#1,d0
0000A1C4 0828 0000 0022             		btst	#0,$22(a0)
0000A1CA 6600                       		bne.s	locret_96A2
0000A1CC 7002                       		moveq	#2,d0
0000A1CE                            
0000A1CE                            locret_96A2:
0000A1CE 4E75                       		rts	
0000A1D0                            ; ===========================================================================
0000A1D0                            
0000A1D0                            loc_96A4:				; XREF: Obj1F_SetAni
0000A1D0 0C03 00FA                  		cmpi.b	#-6,d3
0000A1D4 6200                       		bhi.s	locret_96B6
0000A1D6 7002                       		moveq	#2,d0
0000A1D8 0828 0000 0022             		btst	#0,$22(a0)
0000A1DE 6600                       		bne.s	locret_96B6
0000A1E0 7001                       		moveq	#1,d0
0000A1E2                            
0000A1E2                            locret_96B6:
0000A1E2 4E75                       		rts	
0000A1E4                            ; End of function Obj1F_SetAni
0000A1E4                            
0000A1E4                            ; ===========================================================================
0000A1E4                            
0000A1E4                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A1E4 6100 0000                  		bsr.w	DeleteObject
0000A1E8 4E75                       		rts	
0000A1EA                            ; ===========================================================================
0000A1EA                            ; ---------------------------------------------------------------------------
0000A1EA                            ; Sub-object - missile that the	Crabmeat throws
0000A1EA                            ; ---------------------------------------------------------------------------
0000A1EA                            
0000A1EA                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A1EA 5428 0024                  		addq.b	#2,$24(a0)
0000A1EE 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A1F6 317C 0400 0002             		move.w	#$400,2(a0)
0000A1FC 117C 0004 0001             		move.b	#4,1(a0)
0000A202 117C 0003 0018             		move.b	#3,$18(a0)
0000A208 117C 0087 0020             		move.b	#$87,$20(a0)
0000A20E 117C 0008 0019             		move.b	#8,$19(a0)
0000A214 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A21A 117C 0007 001C             		move.b	#7,$1C(a0)
0000A220                            
0000A220                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A220 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A226 6100 0000                  		bsr.w	AnimateSprite
0000A22A 6100 0000                  		bsr.w	ObjectFall
0000A22E 6100 0000                  		bsr.w	DisplaySprite
0000A232 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A236 0640 00E0                  		addi.w	#$E0,d0
0000A23A B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A23E 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A240 4E75                       		rts	
0000A242                            ; ===========================================================================
0000A242                            
0000A242                            Obj1F_Delete2:
0000A242 6000 0000                  		bra.w	DeleteObject
0000A246                            ; ===========================================================================
0000A246                            Ani_obj1F:
0000A246                            	include "_anim\obj1F.asm"
0000A246                            ; ---------------------------------------------------------------------------
0000A246                            ; Animation script - Crabmeat enemy
0000A246                            ; ---------------------------------------------------------------------------
0000A246 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A24C 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A252 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A256 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A25A 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A25E 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A262 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A268 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A26E 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A274 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A278 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A27C                            		even
0000A27C                            		even
0000A27C                            
0000A27C                            ; ---------------------------------------------------------------------------
0000A27C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A27C                            ; ---------------------------------------------------------------------------
0000A27C                            Map_obj1F:
0000A27C                            	include "_maps\obj1F.asm"
0000A27C                            Map_1514:
0000A27C 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
0000A27E 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
0000A280 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
0000A282 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
0000A284 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
0000A286 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
0000A288 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
0000A28A 03                         Map_1514_E: 	dc.b $3
0000A28B F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A290 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A295 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A29A 03                         Map_1514_1E: 	dc.b $3
0000A29B F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2A0 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2A5 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2AA 03                         Map_1514_2E: 	dc.b $3
0000A2AB F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2B0 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2B5 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2BA 03                         Map_1514_3E: 	dc.b $3
0000A2BB F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2C0 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2C5 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2CA 03                         Map_1514_4E: 	dc.b $3
0000A2CB F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2D0 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2D5 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2DA 01                         Map_1514_5E: 	dc.b $1
0000A2DB F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A2E0 01                         Map_1514_64: 	dc.b $1
0000A2E1 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A2E6                            	even
0000A2E6                            	even
0000A2E6                            
0000A2E6                            ; ===========================================================================
0000A2E6                            ; ---------------------------------------------------------------------------
0000A2E6                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A2E6                            ; ---------------------------------------------------------------------------
0000A2E6                            
0000A2E6                            Obj22:					; XREF: Obj_Index
0000A2E6 7000                       		moveq	#0,d0
0000A2E8 1028 0024                  		move.b	$24(a0),d0
0000A2EC 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A2F0 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A2F4                            ; ===========================================================================
0000A2F4 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A2F6 0000                       		dc.w Obj22_Action-Obj22_Index
0000A2F8 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A2FA                            ; ===========================================================================
0000A2FA                            
0000A2FA                            Obj22_Main:				; XREF: Obj22_Index
0000A2FA 5428 0024                  		addq.b	#2,$24(a0)
0000A2FE 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A306 317C 0444 0002             		move.w	#$444,2(a0)
0000A30C 117C 0004 0001             		move.b	#4,1(a0)
0000A312 117C 0003 0018             		move.b	#3,$18(a0)
0000A318 117C 0008 0020             		move.b	#8,$20(a0)
0000A31E 117C 0018 0019             		move.b	#$18,$19(a0)
0000A324                            
0000A324                            Obj22_Action:				; XREF: Obj22_Index
0000A324 7000                       		moveq	#0,d0
0000A326 1028 0025                  		move.b	$25(a0),d0
0000A32A 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A32E 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A332 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A338 6100 0000                  		bsr.w	AnimateSprite
0000A33C 6000 0000                  		bra.w	MarkObjGone
0000A340                            ; ===========================================================================
0000A340 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A342 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A344                            ; ===========================================================================
0000A344                            
0000A344                            Obj22_Move:				; XREF: Obj22_Index2
0000A344 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A348 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A34A 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A350 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A352 5428 0025                  		addq.b	#2,$25(a0)
0000A356 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A35C 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A362 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A368 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A36E 6600                       		bne.s	locret_986C	; if not, branch
0000A370 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A374                            
0000A374                            locret_986C:
0000A374 4E75                       		rts	
0000A376                            ; ===========================================================================
0000A376                            
0000A376                            Obj22_Fire:				; XREF: Obj22_Move
0000A376 6100 0000                  		bsr.w	SingleObjLoad
0000A37A 6600                       		bne.s	locret_98D0
0000A37C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A380 3368 0008 0008             		move.w	8(a0),8(a1)
0000A386 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A38C 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A392 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A398 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A39E 303C 0018                  		move.w	#$18,d0
0000A3A2 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A3A8 6600                       		bne.s	loc_98AA	; if not, branch
0000A3AA 4440                       		neg.w	d0
0000A3AC 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A3B0                            
0000A3B0                            loc_98AA:
0000A3B0 D169 0008                  		add.w	d0,8(a1)
0000A3B4 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A3BA 337C 000E 0032             		move.w	#$E,$32(a1)
0000A3C0 2348 003C                  		move.l	a0,$3C(a1)
0000A3C4 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A3CA 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A3D0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A3D6                            
0000A3D6                            locret_98D0:
0000A3D6 4E75                       		rts	
0000A3D8                            ; ===========================================================================
0000A3D8                            
0000A3D8                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A3D8 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A3DC 6B00                       		bmi.s	Obj22_ChgDir
0000A3DE 6100 0000                  		bsr.w	SpeedToPos
0000A3E2 4A28 0034                  		tst.b	$34(a0)
0000A3E6 6600                       		bne.s	locret_992A
0000A3E8 3038 D008                  		move.w	($FFFFD008).w,d0
0000A3EC 9068 0008                  		sub.w	8(a0),d0
0000A3F0 6A00                       		bpl.s	Obj22_SetNrSonic
0000A3F2 4440                       		neg.w	d0
0000A3F4                            
0000A3F4                            Obj22_SetNrSonic:
0000A3F4 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A3F8 6400                       		bcc.s	locret_992A	; if not, branch
0000A3FA 4A28 0001                  		tst.b	1(a0)
0000A3FE 6A00                       		bpl.s	locret_992A
0000A400 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A406 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A40C 6000                       		bra.s	Obj22_Stop
0000A40E                            ; ===========================================================================
0000A40E                            
0000A40E                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A40E 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A414 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A41A 317C 003B 0032             		move.w	#59,$32(a0)
0000A420                            
0000A420                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A420 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A424 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A42A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A430                            
0000A430                            locret_992A:
0000A430 4E75                       		rts	
0000A432                            ; ===========================================================================
0000A432                            
0000A432                            Obj22_Delete:				; XREF: Obj22_Index
0000A432 6100 0000                  		bsr.w	DeleteObject
0000A436 4E75                       		rts	
0000A438                            ; ===========================================================================
0000A438                            ; ---------------------------------------------------------------------------
0000A438                            ; Object 23 - missile that Buzz	Bomber throws
0000A438                            ; ---------------------------------------------------------------------------
0000A438                            
0000A438                            Obj23:					; XREF: Obj_Index
0000A438 7000                       		moveq	#0,d0
0000A43A 1028 0024                  		move.b	$24(a0),d0
0000A43E 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A442 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A446                            ; ===========================================================================
0000A446 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A448 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A44A 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A44C 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A44E 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A450                            ; ===========================================================================
0000A450                            
0000A450                            Obj23_Main:				; XREF: Obj23_Index
0000A450 5368 0032                  		subq.w	#1,$32(a0)
0000A454 6A00                       		bpl.s	Obj23_ChkCancel
0000A456 5428 0024                  		addq.b	#2,$24(a0)
0000A45A 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A462 317C 2444 0002             		move.w	#$2444,2(a0)
0000A468 117C 0004 0001             		move.b	#4,1(a0)
0000A46E 117C 0003 0018             		move.b	#3,$18(a0)
0000A474 117C 0008 0019             		move.b	#8,$19(a0)
0000A47A 0228 0003 0022             		andi.b	#3,$22(a0)
0000A480 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A484 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A486 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A48C 117C 0087 0020             		move.b	#$87,$20(a0)
0000A492 117C 0001 001C             		move.b	#1,$1C(a0)
0000A498 6000                       		bra.s	Obj23_Animate2
0000A49A                            ; ===========================================================================
0000A49A                            
0000A49A                            Obj23_Animate:				; XREF: Obj23_Index
0000A49A 6100                       		bsr.s	Obj23_ChkCancel
0000A49C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A4A2 6100 0000                  		bsr.w	AnimateSprite
0000A4A6 6000 0000                  		bra.w	DisplaySprite
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A4AA                            ; destroyed, and if it has, then cancel	the missile
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA                            
0000A4AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4AA                            
0000A4AA                            
0000A4AA                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A4AA 2268 003C                  		movea.l	$3C(a0),a1
0000A4AE 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A4B2 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A4B4 4E75                       		rts	
0000A4B6                            ; End of function Obj23_ChkCancel
0000A4B6                            
0000A4B6                            ; ===========================================================================
0000A4B6                            
0000A4B6                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A4B6 0828 0007 0022             		btst	#7,$22(a0)
0000A4BC 6600                       		bne.s	Obj23_Explode
0000A4BE 117C 0087 0020             		move.b	#$87,$20(a0)
0000A4C4 117C 0001 001C             		move.b	#1,$1C(a0)
0000A4CA 6100 0000                  		bsr.w	SpeedToPos
0000A4CE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A4D4 6100 0000                  		bsr.w	AnimateSprite
0000A4D8 6100 0000                  		bsr.w	DisplaySprite
0000A4DC 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A4E0 0640 00E0                  		addi.w	#$E0,d0
0000A4E4 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A4E8 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A4EA 4E75                       		rts	
0000A4EC                            ; ===========================================================================
0000A4EC                            
0000A4EC                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A4EC 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A4F0 117C 0000 0024             		move.b	#0,$24(a0)
0000A4F6 6000 F2E0                  		bra.w	Obj24
0000A4FA                            ; ===========================================================================
0000A4FA                            
0000A4FA                            Obj23_Delete:				; XREF: Obj23_Index
0000A4FA 6100 0000                  		bsr.w	DeleteObject
0000A4FE 4E75                       		rts	
0000A500                            ; ===========================================================================
0000A500                            
0000A500                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A500 4A28 0001                  		tst.b	1(a0)
0000A504 6AF4                       		bpl.s	Obj23_Delete
0000A506 6100 0000                  		bsr.w	SpeedToPos
0000A50A                            
0000A50A                            Obj23_Animate2:				; XREF: Obj23_Main
0000A50A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A510 6100 0000                  		bsr.w	AnimateSprite
0000A514 6100 0000                  		bsr.w	DisplaySprite
0000A518 4E75                       		rts	
0000A51A                            ; ===========================================================================
0000A51A                            Ani_obj22:
0000A51A                            	include "_anim\obj22.asm"
0000A51A                            ; ---------------------------------------------------------------------------
0000A51A                            ; Animation script - Buzz Bomber enemy
0000A51A                            ; ---------------------------------------------------------------------------
0000A51A 0000                       		dc.w byte_9A1E-Ani_obj22
0000A51C 0000                       		dc.w byte_9A22-Ani_obj22
0000A51E 0000                       		dc.w byte_9A26-Ani_obj22
0000A520 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A524 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A528 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A52C                            		even
0000A52C                            		even
0000A52C                            
0000A52C                            Ani_obj23:
0000A52C                            	include "_anim\obj23.asm"
0000A52C                            ; ---------------------------------------------------------------------------
0000A52C                            ; Animation script - missile that Buzz Bomber throws
0000A52C                            ; ---------------------------------------------------------------------------
0000A52C 0000                       		dc.w byte_9A2E-Ani_obj23
0000A52E 0000                       		dc.w byte_9A32-Ani_obj23
0000A530 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A534 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A538                            		even
0000A538                            		even
0000A538                            
0000A538                            ; ---------------------------------------------------------------------------
0000A538                            ; Sprite mappings - Buzz Bomber	enemy
0000A538                            ; ---------------------------------------------------------------------------
0000A538                            Map_obj22:
0000A538                            	include "_maps\obj22.asm"
0000A538                            Map_e97a:
0000A538 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A53A 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A53C 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A53E 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A540 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A542 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A544 06                         Map_e97a_C: 	dc.b $6
0000A545 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A54A F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A54F 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A554 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A559 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A55E F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A563 06                         Map_e97a_2B: 	dc.b $6
0000A564 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A569 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A56E 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A573 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A578 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A57D F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A582 07                         Map_e97a_4A: 	dc.b $7
0000A583 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A588 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A58D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A592 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A597 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A59C F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A5A1 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A5A6 07                         Map_e97a_6E: 	dc.b $7
0000A5A7 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A5AC F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A5B1 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A5B6 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A5BB 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A5C0 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A5C5 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A5CA 06                         Map_e97a_92: 	dc.b $6
0000A5CB F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A5D0 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A5D5 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A5DA 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A5DF F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A5E4 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A5E9 04                         Map_e97a_B1: 	dc.b $4
0000A5EA F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A5EF 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A5F4 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A5F9 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A5FE                            	even
0000A5FE                            	even
0000A5FE                            
0000A5FE                            ; ---------------------------------------------------------------------------
0000A5FE                            ; Sprite mappings - missile that Buzz Bomber throws
0000A5FE                            ; ---------------------------------------------------------------------------
0000A5FE                            Map_obj23:
0000A5FE                            	include "_maps\obj23.asm"
0000A5FE                            ; ---------------------------------------------------------------------------
0000A5FE                            ; Sprite mappings - missile that Buzz Bomber throws
0000A5FE                            ; ---------------------------------------------------------------------------
0000A5FE 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A602 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A606 01                         byte_9B0E:	dc.b 1
0000A607 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A60C 01                         byte_9B14:	dc.b 1
0000A60D F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A612 01                         byte_9B1A:	dc.b 1
0000A613 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A618 01                         byte_9B20:	dc.b 1
0000A619 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A61E                            		even
0000A61E                            		even
0000A61E                            
0000A61E                            ; ===========================================================================
0000A61E                            ; ---------------------------------------------------------------------------
0000A61E                            ; Object 25 - rings
0000A61E                            ; ---------------------------------------------------------------------------
0000A61E                            
0000A61E                            Obj25:					; XREF: Obj_Index
0000A61E 7000                       		moveq	#0,d0
0000A620 1028 0024                  		move.b	$24(a0),d0
0000A624 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A628 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A62C                            ; ===========================================================================
0000A62C 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A62E 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A630 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A632 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A634 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A636                            ; ---------------------------------------------------------------------------
0000A636                            ; Distances between rings (format: horizontal, vertical)
0000A636                            ; ---------------------------------------------------------------------------
0000A636 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A638 1800                       		dc.b $18, 0		; horizontal normal
0000A63A 2000                       		dc.b $20, 0		; horizontal wide
0000A63C 0010                       		dc.b 0,	$10		; vertical tight
0000A63E 0018                       		dc.b 0,	$18		; vertical normal
0000A640 0020                       		dc.b 0,	$20		; vertical wide
0000A642 1010                       		dc.b $10, $10		; diagonal
0000A644 1818                       		dc.b $18, $18
0000A646 2020                       		dc.b $20, $20
0000A648 F010                       		dc.b $F0, $10
0000A64A E818                       		dc.b $E8, $18
0000A64C E020                       		dc.b $E0, $20
0000A64E 1008                       		dc.b $10, 8
0000A650 1810                       		dc.b $18, $10
0000A652 F008                       		dc.b $F0, 8
0000A654 E810                       		dc.b $E8, $10
0000A656                            ; ===========================================================================
0000A656                            
0000A656                            Obj25_Main:				; XREF: Obj25_Index
0000A656 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A65A 7000                       		moveq	#0,d0
0000A65C 1028 0023                  		move.b	$23(a0),d0
0000A660 45F2 0002                  		lea	2(a2,d0.w),a2
0000A664 1812                       		move.b	(a2),d4
0000A666 1228 0028                  		move.b	$28(a0),d1
0000A66A 1001                       		move.b	d1,d0
0000A66C 0241 0007                  		andi.w	#7,d1
0000A670 0C41 0007                  		cmpi.w	#7,d1
0000A674 6600                       		bne.s	loc_9B80
0000A676 7206                       		moveq	#6,d1
0000A678                            
0000A678                            loc_9B80:
0000A678 4841                       		swap	d1
0000A67A 323C 0000                  		move.w	#0,d1
0000A67E E808                       		lsr.b	#4,d0
0000A680 D040                       		add.w	d0,d0
0000A682 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A686 4885                       		ext.w	d5
0000A688 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A68C 4886                       		ext.w	d6
0000A68E 2248                       		movea.l	a0,a1
0000A690 3428 0008                  		move.w	8(a0),d2
0000A694 3628 000C                  		move.w	$C(a0),d3
0000A698 E20C                       		lsr.b	#1,d4
0000A69A 6500                       		bcs.s	loc_9C02
0000A69C 0892 0007                  		bclr	#7,(a2)
0000A6A0 6000                       		bra.s	loc_9BBA
0000A6A2                            ; ===========================================================================
0000A6A2                            
0000A6A2                            Obj25_MakeRings:
0000A6A2 4841                       		swap	d1
0000A6A4 E20C                       		lsr.b	#1,d4
0000A6A6 6500                       		bcs.s	loc_9C02
0000A6A8 0892 0007                  		bclr	#7,(a2)
0000A6AC 6100 0000                  		bsr.w	SingleObjLoad
0000A6B0 6600                       		bne.s	loc_9C0E
0000A6B2                            
0000A6B2                            loc_9BBA:				; XREF: Obj25_Main
0000A6B2 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A6B6 5429 0024                  		addq.b	#2,$24(a1)
0000A6BA 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A6BE 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A6C4 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A6C8 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A6D0 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A6D6 137C 0004 0001             		move.b	#4,1(a1)
0000A6DC 137C 0002 0018             		move.b	#2,$18(a1)
0000A6E2 137C 0047 0020             		move.b	#$47,$20(a1)
0000A6E8 137C 0008 0019             		move.b	#8,$19(a1)
0000A6EE 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A6F4 1341 0034                  		move.b	d1,$34(a1)
0000A6F8                            
0000A6F8                            loc_9C02:
0000A6F8 5241                       		addq.w	#1,d1
0000A6FA D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A6FC D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A6FE 4841                       		swap	d1
0000A700 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A704                            
0000A704                            loc_9C0E:
0000A704 0812 0000                  		btst	#0,(a2)
0000A708 6600 0000                  		bne.w	DeleteObject
0000A70C                            
0000A70C                            Obj25_Animate:				; XREF: Obj25_Index
0000A70C 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A712 6100 0000                  		bsr.w	DisplaySprite
0000A716 3028 0032                  		move.w	$32(a0),d0
0000A71A 0240 FF80                  		andi.w	#$FF80,d0
0000A71E 3238 F700                  		move.w	($FFFFF700).w,d1
0000A722 0441 0080                  		subi.w	#$80,d1
0000A726 0241 FF80                  		andi.w	#$FF80,d1
0000A72A 9041                       		sub.w	d1,d0
0000A72C 0C40 0280                  		cmpi.w	#$280,d0
0000A730 6200                       		bhi.s	Obj25_Delete
0000A732 4E75                       		rts	
0000A734                            ; ===========================================================================
0000A734                            
0000A734                            Obj25_Collect:				; XREF: Obj25_Index
0000A734 5428 0024                  		addq.b	#2,$24(a0)
0000A738 117C 0000 0020             		move.b	#0,$20(a0)
0000A73E 117C 0001 0018             		move.b	#1,$18(a0)
0000A744 6100 0000                  		bsr.w	CollectRing
0000A748 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A74C 7000                       		moveq	#0,d0
0000A74E 1028 0023                  		move.b	$23(a0),d0
0000A752 1228 0034                  		move.b	$34(a0),d1
0000A756 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A75A                            
0000A75A                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A75A 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A760 6100 0000                  		bsr.w	AnimateSprite
0000A764 6000 0000                  		bra.w	DisplaySprite
0000A768                            ; ===========================================================================
0000A768                            
0000A768                            Obj25_Delete:				; XREF: Obj25_Index
0000A768 6000 0000                  		bra.w	DeleteObject
0000A76C                            
0000A76C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A76C                            
0000A76C                            
0000A76C                            CollectRing:				; XREF: Obj25_Collect
0000A76C 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A770 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A776 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A77A 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A780 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A782 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A788 6700                       		beq.s	loc_9CA4
0000A78A 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A790 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A792 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A798 6600                       		bne.s	Obj25_PlaySnd
0000A79A                            
0000A79A                            loc_9CA4:
0000A79A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A79E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A7A2 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A7A6                            
0000A7A6                            Obj25_PlaySnd:
0000A7A6 4EF9 0000 15D4             		jmp	(PlaySound_Special).l
0000A7AC                            ; End of function CollectRing
0000A7AC                            
0000A7AC                            ; ===========================================================================
0000A7AC                            ; ---------------------------------------------------------------------------
0000A7AC                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A7AC                            ; ---------------------------------------------------------------------------
0000A7AC                            
0000A7AC                            Obj37:					; XREF: Obj_Index
0000A7AC 7000                       		moveq	#0,d0
0000A7AE 1028 0024                  		move.b	$24(a0),d0
0000A7B2 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A7B6 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A7BA                            ; ===========================================================================
0000A7BA 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A7BC 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A7BE 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A7C0 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A7C2 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A7C4                            ; ===========================================================================
0000A7C4                            
0000A7C4                            Obj37_CountRings:			; XREF: Obj37_Index
0000A7C4 2248                       		movea.l	a0,a1
0000A7C6 7A00                       		moveq	#0,d5
0000A7C8 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A7CC 7020                       		moveq	#32,d0
0000A7CE BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A7D0 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A7D2 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A7D4                            
0000A7D4                            loc_9CDE:
0000A7D4 5345                       		subq.w	#1,d5
0000A7D6 383C 0288                  		move.w	#$288,d4
0000A7DA 6000                       		bra.s	Obj37_MakeRings
0000A7DC                            ; ===========================================================================
0000A7DC                            
0000A7DC                            Obj37_Loop:
0000A7DC 6100 0000                  		bsr.w	SingleObjLoad
0000A7E0 6600 0000                  		bne.w	Obj37_ResetCounter
0000A7E4                            
0000A7E4                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A7E4 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A7E8 5429 0024                  		addq.b	#2,$24(a1)
0000A7EC 137C 0008 0016             		move.b	#8,$16(a1)
0000A7F2 137C 0008 0017             		move.b	#8,$17(a1)
0000A7F8 3368 0008 0008             		move.w	8(a0),8(a1)
0000A7FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A804 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A80C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A812 137C 0004 0001             		move.b	#4,1(a1)
0000A818 137C 0003 0018             		move.b	#3,$18(a1)
0000A81E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A824 137C 0008 0019             		move.b	#8,$19(a1)
0000A82A 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A830 4A44                       		tst.w	d4
0000A832 6B00                       		bmi.s	loc_9D62
0000A834 3004                       		move.w	d4,d0
0000A836 6100 8536                  		bsr.w	CalcSine
0000A83A 3404                       		move.w	d4,d2
0000A83C E04A                       		lsr.w	#8,d2
0000A83E E560                       		asl.w	d2,d0
0000A840 E561                       		asl.w	d2,d1
0000A842 3400                       		move.w	d0,d2
0000A844 3601                       		move.w	d1,d3
0000A846 0604 0010                  		addi.b	#$10,d4
0000A84A 6400                       		bcc.s	loc_9D62
0000A84C 0444 0080                  		subi.w	#$80,d4
0000A850 6400                       		bcc.s	loc_9D62
0000A852 383C 0288                  		move.w	#$288,d4
0000A856                            
0000A856                            loc_9D62:
0000A856 3342 0010                  		move.w	d2,$10(a1)
0000A85A 3343 0012                  		move.w	d3,$12(a1)
0000A85E 4442                       		neg.w	d2
0000A860 4444                       		neg.w	d4
0000A862 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A866                            
0000A866                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A866 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A86C 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A872 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A878 303C 00C6                  		move.w	#$C6,d0
0000A87C 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A882                            
0000A882                            Obj37_Bounce:				; XREF: Obj37_Index
0000A882 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A888 7218                       		moveq	#$18,d1
0000A88A 4EB9 0000 0000             		jsr	ObjectFallCustom
0000A890 4A68 0012                  		tst.w	$12(a0)
0000A894 6B00                       		bmi.s	Obj37_ChkDel
0000A896 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A89A D007                       		add.b	d7,d0
0000A89C 0200 0003                  		andi.b	#3,d0
0000A8A0 6600                       		bne.s	Obj37_ChkDel
0000A8A2 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8A8 4A41                       		tst.w	d1
0000A8AA 6A00                       		bpl.s	Obj37_ChkDel
0000A8AC D368 000C                  		add.w	d1,$C(a0)
0000A8B0 3028 0012                  		move.w	$12(a0),d0
0000A8B4 E440                       		asr.w	#2,d0
0000A8B6 9168 0012                  		sub.w	d0,$12(a0)
0000A8BA 4468 0012                  		neg.w	$12(a0)
0000A8BE                            
0000A8BE                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A8BE 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A8C2 6700                       		beq.s	Obj37_Delete
0000A8C4 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A8C8 0640 00E0                  		addi.w	#$E0,d0
0000A8CC B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A8D0 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A8D2 6000 0000                  		bra.w	DisplaySprite
0000A8D6                            ; ===========================================================================
0000A8D6                            
0000A8D6                            Obj37_Collect:				; XREF: Obj37_Index
0000A8D6 5428 0024                  		addq.b	#2,$24(a0)
0000A8DA 117C 0000 0020             		move.b	#0,$20(a0)
0000A8E0 117C 0001 0018             		move.b	#1,$18(a0)
0000A8E6 6100 FE84                  		bsr.w	CollectRing
0000A8EA                            
0000A8EA                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A8EA 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A8F0 6100 0000                  		bsr.w	AnimateSprite
0000A8F4 6000 0000                  		bra.w	DisplaySprite
0000A8F8                            ; ===========================================================================
0000A8F8                            
0000A8F8                            Obj37_Delete:				; XREF: Obj37_Index
0000A8F8 6000 0000                  		bra.w	DeleteObject
0000A8FC                            ; ===========================================================================
0000A8FC                            ; ---------------------------------------------------------------------------
0000A8FC                            ; Object 4B - giant ring for entry to special stage
0000A8FC                            ; ---------------------------------------------------------------------------
0000A8FC                            
0000A8FC                            Obj4B:					; XREF: Obj_Index
0000A8FC 7000                       		moveq	#0,d0
0000A8FE 1028 0024                  		move.b	$24(a0),d0
0000A902 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A906 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A90A                            ; ===========================================================================
0000A90A 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A90C 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A90E 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A910 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A912                            ; ===========================================================================
0000A912                            
0000A912                            Obj4B_Main:				; XREF: Obj4B_Index
0000A912 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A91A 317C 2400 0002             		move.w	#$2400,2(a0)
0000A920 0028 0004 0001             		ori.b	#4,1(a0)
0000A926 117C 0040 0019             		move.b	#$40,$19(a0)
0000A92C 4A28 0001                  		tst.b	1(a0)
0000A930 6A00                       		bpl.s	Obj4B_Animate
0000A932 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A938 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A93C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A942 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A944 4E75                       		rts	
0000A946                            ; ===========================================================================
0000A946                            
0000A946                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A946 5428 0024                  		addq.b	#2,$24(a0)
0000A94A 117C 0002 0018             		move.b	#2,$18(a0)
0000A950 117C 0052 0020             		move.b	#$52,$20(a0)
0000A956 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A95C                            
0000A95C                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A95C 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A962 3028 0008                  		move.w	8(a0),d0
0000A966 0240 FF80                  		andi.w	#$FF80,d0
0000A96A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A96E 0441 0080                  		subi.w	#$80,d1
0000A972 0241 FF80                  		andi.w	#$FF80,d1
0000A976 9041                       		sub.w	d1,d0
0000A978 0C40 0280                  		cmpi.w	#$280,d0
0000A97C 6200 0000                  		bhi.w	DeleteObject
0000A980 6000 0000                  		bra.w	DisplaySprite
0000A984                            ; ===========================================================================
0000A984                            
0000A984                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A984 5528 0024                  		subq.b	#2,$24(a0)
0000A988 117C 0000 0020             		move.b	#0,$20(a0)
0000A98E 6100 0000                  		bsr.w	SingleObjLoad
0000A992 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A996 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A99A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9A6 2348 003C                  		move.l	a0,$3C(a1)
0000A9AA 3038 D008                  		move.w	($FFFFD008).w,d0
0000A9AE B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A9B2 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A9B4 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A9BA                            
0000A9BA                            Obj4B_PlaySnd:
0000A9BA 303C 00C3                  		move.w	#$C3,d0
0000A9BE 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A9C4 6096                       		bra.s	Obj4B_Animate
0000A9C6                            ; ===========================================================================
0000A9C6                            
0000A9C6                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A9C6 6000 0000                  		bra.w	DeleteObject
0000A9CA                            ; ===========================================================================
0000A9CA                            ; ---------------------------------------------------------------------------
0000A9CA                            ; Object 7C - flash effect when	you collect the	giant ring
0000A9CA                            ; ---------------------------------------------------------------------------
0000A9CA                            
0000A9CA                            Obj7C:					; XREF: Obj_Index
0000A9CA 7000                       		moveq	#0,d0
0000A9CC 1028 0024                  		move.b	$24(a0),d0
0000A9D0 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A9D4 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A9D8                            ; ===========================================================================
0000A9D8 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A9DA 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A9DC 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A9DE                            ; ===========================================================================
0000A9DE                            
0000A9DE                            Obj7C_Main:				; XREF: Obj7C_Index
0000A9DE 5428 0024                  		addq.b	#2,$24(a0)
0000A9E2 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A9EA 317C 2462 0002             		move.w	#$2462,2(a0)
0000A9F0 0028 0004 0001             		ori.b	#4,1(a0)
0000A9F6 117C 0000 0018             		move.b	#0,$18(a0)
0000A9FC 117C 0020 0019             		move.b	#$20,$19(a0)
0000AA02 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000AA08                            
0000AA08                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000AA08 6100                       		bsr.s	Obj7C_Collect
0000AA0A 3028 0008                  		move.w	8(a0),d0
0000AA0E 0240 FF80                  		andi.w	#$FF80,d0
0000AA12 3238 F700                  		move.w	($FFFFF700).w,d1
0000AA16 0441 0080                  		subi.w	#$80,d1
0000AA1A 0241 FF80                  		andi.w	#$FF80,d1
0000AA1E 9041                       		sub.w	d1,d0
0000AA20 0C40 0280                  		cmpi.w	#$280,d0
0000AA24 6200 0000                  		bhi.w	DeleteObject
0000AA28 6000 0000                  		bra.w	DisplaySprite
0000AA2C                            
0000AA2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA2C                            
0000AA2C                            
0000AA2C                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000AA2C 5328 001E                  		subq.b	#1,$1E(a0)
0000AA30 6A00                       		bpl.s	locret_9F76
0000AA32 117C 0001 001E             		move.b	#1,$1E(a0)
0000AA38 5228 001A                  		addq.b	#1,$1A(a0)
0000AA3C 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000AA42 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000AA44 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000AA4A 6600                       		bne.s	locret_9F76	; if not, branch
0000AA4C 2268 003C                  		movea.l	$3C(a0),a1
0000AA50 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AA56 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AA5C 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AA62 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AA66 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AA6A                            
0000AA6A                            locret_9F76:
0000AA6A 4E75                       		rts	
0000AA6C                            ; ===========================================================================
0000AA6C                            
0000AA6C                            Obj7C_End:				; XREF: Obj7C_Collect
0000AA6C 5428 0024                  		addq.b	#2,$24(a0)
0000AA70 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AA76 588F                       		addq.l	#4,sp
0000AA78 4E75                       		rts	
0000AA7A                            ; End of function Obj7C_Collect
0000AA7A                            
0000AA7A                            ; ===========================================================================
0000AA7A                            
0000AA7A                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AA7A 6000 0000                  		bra.w	DeleteObject
0000AA7E                            ; ===========================================================================
0000AA7E                            Ani_obj25:
0000AA7E                            	include "_anim\obj25.asm"
0000AA7E                            ; ---------------------------------------------------------------------------
0000AA7E                            ; Animation script - ring
0000AA7E                            ; ---------------------------------------------------------------------------
0000AA7E 0000                       		dc.w byte_9F8C-Ani_obj25
0000AA80 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AA86                            		even
0000AA86                            		even
0000AA86                            
0000AA86                            ; ---------------------------------------------------------------------------
0000AA86                            ; Sprite mappings - rings
0000AA86                            ; ---------------------------------------------------------------------------
0000AA86                            Map_obj25:
0000AA86                            	include "_maps\obj25.asm"
0000AA86                            ; ---------------------------------------------------------------------------
0000AA86                            ; Sprite mappings - rings
0000AA86                            ; ---------------------------------------------------------------------------
0000AA86 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AA8A 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AA8E 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AA92 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AA96 01                         byte_9FA2:	dc.b 1
0000AA97 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AA9C 01                         byte_9FA8:	dc.b 1
0000AA9D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AAA2 01                         byte_9FAE:	dc.b 1
0000AAA3 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AAA8 01                         byte_9FB4:	dc.b 1
0000AAA9 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AAAE 01                         byte_9FBA:	dc.b 1
0000AAAF F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AAB4 01                         byte_9FC0:	dc.b 1
0000AAB5 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000AABA 01                         byte_9FC6:	dc.b 1
0000AABB F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000AAC0 01                         byte_9FCC:	dc.b 1
0000AAC1 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000AAC6                            		even
0000AAC6                            		even
0000AAC6                            
0000AAC6                            ; ---------------------------------------------------------------------------
0000AAC6                            ; Sprite mappings - giant ring
0000AAC6                            ; ---------------------------------------------------------------------------
0000AAC6                            Map_obj4B:
0000AAC6                            	include "_maps\obj4B.asm"
0000AAC6                            ; ---------------------------------------------------------------------------
0000AAC6                            ; Sprite mappings - giant ring
0000AAC6                            ; ---------------------------------------------------------------------------
0000AAC6 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000AACA 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000AACE 0A                         byte_9FDA:	dc.b $A
0000AACF E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000AAD4 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000AAD9 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000AADE E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000AAE3 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000AAE8 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000AAED 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000AAF2 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000AAF7 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000AAFC 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000AB01 08                         byte_A00D:	dc.b 8
0000AB02 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000AB07 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000AB0C E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000AB11 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000AB16 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000AB1B 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000AB20 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000AB25 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000AB2A 04                         byte_A036:	dc.b 4
0000AB2B E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000AB30 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000AB35 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000AB3A 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000AB3F 08                         byte_A04B:	dc.b 8
0000AB40 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000AB45 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000AB4A E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000AB4F F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000AB54 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000AB59 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000AB5E 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000AB63 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000AB68                            		even
0000AB68                            		even
0000AB68                            
0000AB68                            ; ---------------------------------------------------------------------------
0000AB68                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB68                            ; ---------------------------------------------------------------------------
0000AB68                            Map_obj7C:
0000AB68                            	include "_maps\obj7C.asm"
0000AB68                            ; ---------------------------------------------------------------------------
0000AB68                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB68                            ; ---------------------------------------------------------------------------
0000AB68 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000AB6C 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000AB70 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000AB74 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000AB78 02                         byte_A084:	dc.b 2
0000AB79 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000AB7E 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000AB83 04                         byte_A08F:	dc.b 4
0000AB84 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000AB89 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000AB8E 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000AB93 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000AB98 04                         byte_A0A4:	dc.b 4
0000AB99 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000AB9E E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000ABA3 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000ABA8 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000ABAD 04                         byte_A0B9:	dc.b 4
0000ABAE E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000ABB3 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000ABB8 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000ABBD 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000ABC2 04                         byte_A0CE:	dc.b 4
0000ABC3 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000ABC8 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000ABCD 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000ABD2 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000ABD7 04                         byte_A0E3:	dc.b 4
0000ABD8 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000ABDD E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000ABE2 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000ABE7 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000ABEC 02                         byte_A0F8:	dc.b 2
0000ABED E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000ABF2 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000ABF7 04                         byte_A103:	dc.b 4
0000ABF8 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000ABFD E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000AC02 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000AC07 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000AC0C                            		even
0000AC0C                            		even
0000AC0C                            
0000AC0C                            ; ===========================================================================
0000AC0C                            ; ---------------------------------------------------------------------------
0000AC0C                            ; Object 26 - monitors
0000AC0C                            ; ---------------------------------------------------------------------------
0000AC0C                            
0000AC0C                            Obj26:					; XREF: Obj_Index
0000AC0C 7000                       		moveq	#0,d0
0000AC0E 1028 0024                  		move.b	$24(a0),d0
0000AC12 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000AC16 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000AC1A                            ; ===========================================================================
0000AC1A 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000AC1C 0000                       		dc.w Obj26_Solid-Obj26_Index
0000AC1E 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000AC20 0000                       		dc.w Obj26_Animate-Obj26_Index
0000AC22 0000                       		dc.w Obj26_Display-Obj26_Index
0000AC24                            ; ===========================================================================
0000AC24                            
0000AC24                            Obj26_Main:				; XREF: Obj26_Index
0000AC24 5428 0024                  		addq.b	#2,$24(a0)
0000AC28 117C 000E 0016             		move.b	#$E,$16(a0)
0000AC2E 117C 000E 0017             		move.b	#$E,$17(a0)
0000AC34 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000AC3C 317C 0680 0002             		move.w	#$680,2(a0)
0000AC42 117C 0004 0001             		move.b	#4,1(a0)
0000AC48 117C 0003 0018             		move.b	#3,$18(a0)
0000AC4E 117C 000F 0019             		move.b	#$F,$19(a0)
0000AC54 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC58 7000                       		moveq	#0,d0
0000AC5A 1028 0023                  		move.b	$23(a0),d0
0000AC5E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AC64 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AC6A 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AC6C 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AC72 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AC78 4E75                       		rts	
0000AC7A                            ; ===========================================================================
0000AC7A                            
0000AC7A                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AC7A 117C 0046 0020             		move.b	#$46,$20(a0)
0000AC80 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000AC86                            
0000AC86                            Obj26_Solid:				; XREF: Obj26_Index
0000AC86 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000AC8A 6700                       		beq.s	loc_A1EC	; if not, branch
0000AC8C 5500                       		subq.b	#2,d0
0000AC8E 6600                       		bne.s	Obj26_Fall
0000AC90 7200                       		moveq	#0,d1
0000AC92 1228 0019                  		move.b	$19(a0),d1
0000AC96 0641 000B                  		addi.w	#$B,d1
0000AC9A 6100 D38A                  		bsr.w	ExitPlatform
0000AC9E 0829 0003 0022             		btst	#3,$22(a1)
0000ACA4 6600 0000                  		bne.w	loc_A1BC
0000ACA8 4228 0025                  		clr.b	$25(a0)
0000ACAC 6000 0000                  		bra.w	Obj26_Animate
0000ACB0                            ; ===========================================================================
0000ACB0                            
0000ACB0                            loc_A1BC:				; XREF: Obj26_Solid
0000ACB0 363C 0010                  		move.w	#$10,d3
0000ACB4 3428 0008                  		move.w	8(a0),d2
0000ACB8 6100 D8CA                  		bsr.w	MvSonicOnPtfm
0000ACBC 6000 0000                  		bra.w	Obj26_Animate
0000ACC0                            ; ===========================================================================
0000ACC0                            
0000ACC0                            Obj26_Fall:				; XREF: Obj26_Solid
0000ACC0 6100 0000                  		bsr.w	ObjectFall
0000ACC4 4EB9 0000 0000             		jsr	ObjHitFloor
0000ACCA 4A41                       		tst.w	d1
0000ACCC 6A00 0000                  		bpl.w	Obj26_Animate
0000ACD0 D368 000C                  		add.w	d1,$C(a0)
0000ACD4 4268 0012                  		clr.w	$12(a0)
0000ACD8 4228 0025                  		clr.b	$25(a0)
0000ACDC 6000 0000                  		bra.w	Obj26_Animate
0000ACE0                            ; ===========================================================================
0000ACE0                            
0000ACE0                            loc_A1EC:				; XREF: Obj26_Solid
0000ACE0 323C 001A                  		move.w	#$1A,d1
0000ACE4 343C 000F                  		move.w	#$F,d2
0000ACE8 6100 0000                  		bsr.w	Obj26_SolidSides
0000ACEC 6700 0000                  		beq.w	loc_A25C
0000ACF0 4A69 0012                  		tst.w	$12(a1)
0000ACF4 6B00                       		bmi.s	loc_A20A
0000ACF6 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000ACFC 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACFE                            
0000ACFE                            loc_A20A:
0000ACFE 4A41                       		tst.w	d1
0000AD00 6A00                       		bpl.s	loc_A220
0000AD02 9769 000C                  		sub.w	d3,$C(a1)
0000AD06 6100 D20C                  		bsr.w	loc_74AE
0000AD0A 117C 0002 0025             		move.b	#2,$25(a0)
0000AD10 6000 0000                  		bra.w	Obj26_Animate
0000AD14                            ; ===========================================================================
0000AD14                            
0000AD14                            loc_A220:
0000AD14 4A40                       		tst.w	d0
0000AD16 6700 0000                  		beq.w	loc_A246
0000AD1A 6B00                       		bmi.s	loc_A230
0000AD1C 4A69 0010                  		tst.w	$10(a1)
0000AD20 6B00                       		bmi.s	loc_A246
0000AD22 6000                       		bra.s	loc_A236
0000AD24                            ; ===========================================================================
0000AD24                            
0000AD24                            loc_A230:
0000AD24 4A69 0010                  		tst.w	$10(a1)
0000AD28 6A00                       		bpl.s	loc_A246
0000AD2A                            
0000AD2A                            loc_A236:
0000AD2A 9169 0008                  		sub.w	d0,8(a1)
0000AD2E 337C 0000 0014             		move.w	#0,$14(a1)
0000AD34 337C 0000 0010             		move.w	#0,$10(a1)
0000AD3A                            
0000AD3A                            loc_A246:
0000AD3A 0829 0001 0022             		btst	#1,$22(a1)
0000AD40 6600                       		bne.s	loc_A26A
0000AD42 08E9 0005 0022             		bset	#5,$22(a1)
0000AD48 08E8 0005 0022             		bset	#5,$22(a0)
0000AD4E 6000                       		bra.s	Obj26_Animate
0000AD50                            ; ===========================================================================
0000AD50                            
0000AD50                            loc_A25C:
0000AD50 0828 0005 0022             		btst	#5,$22(a0)
0000AD56 6700                       		beq.s	Obj26_Animate
0000AD58 337C 0001 001C             		move.w	#1,$1C(a1)
0000AD5E                            
0000AD5E                            loc_A26A:
0000AD5E 08A8 0005 0022             		bclr	#5,$22(a0)
0000AD64 08A9 0005 0022             		bclr	#5,$22(a1)
0000AD6A                            
0000AD6A                            Obj26_Animate:				; XREF: Obj26_Index
0000AD6A 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AD70 6100 0000                  		bsr.w	AnimateSprite
0000AD74                            
0000AD74                            Obj26_Display:				; XREF: Obj26_Index
0000AD74 6100 0000                  		bsr.w	DisplaySprite
0000AD78 3028 0008                  		move.w	8(a0),d0
0000AD7C 0240 FF80                  		andi.w	#$FF80,d0
0000AD80 3238 F700                  		move.w	($FFFFF700).w,d1
0000AD84 0441 0080                  		subi.w	#$80,d1
0000AD88 0241 FF80                  		andi.w	#$FF80,d1
0000AD8C 9041                       		sub.w	d1,d0
0000AD8E 0C40 0280                  		cmpi.w	#$280,d0
0000AD92 6200 0000                  		bhi.w	DeleteObject
0000AD96 4E75                       		rts	
0000AD98                            ; ===========================================================================
0000AD98                            
0000AD98                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AD98 5428 0024                  		addq.b	#2,$24(a0)
0000AD9C 117C 0000 0020             		move.b	#0,$20(a0)
0000ADA2 6100 0000                  		bsr.w	SingleObjLoad
0000ADA6 6600                       		bne.s	Obj26_Explode
0000ADA8 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000ADAC 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADB2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADB8 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000ADBE 7400                       		moveq	#0,d2	; GMZ
0000ADC0 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000ADC2                            
0000ADC2                            Obj26_Explode:
0000ADC2 6100 0000                  		bsr.w	SingleObjLoad
0000ADC6 6600                       		bne.s	Obj26_SetBroken
0000ADC8 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000ADCC 5429 0024                  		addq.b	#2,$24(a1)
0000ADD0 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000ADD4 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADDA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADE0                            
0000ADE0                            Obj26_NextExplosion:
0000ADE0 5802                       		addq.b	#4,d2
0000ADE2 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000ADE6                            
0000ADE6                            Obj26_SetBroken:
0000ADE6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ADEA 7000                       		moveq	#0,d0
0000ADEC 1028 0023                  		move.b	$23(a0),d0
0000ADF0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000ADF6 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000ADFC 6000 0000                  		bra.w	DisplaySprite
0000AE00                            ; ===========================================================================
0000AE00                            ; ---------------------------------------------------------------------------
0000AE00                            ; Object 2E - contents of monitors
0000AE00                            ; ---------------------------------------------------------------------------
0000AE00                            
0000AE00                            Obj2E:					; XREF: Obj_Index
0000AE00 7000                       		moveq	#0,d0
0000AE02 1028 0024                  		move.b	$24(a0),d0
0000AE06 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000AE0A 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000AE0E 6000 0000                  		bra.w	DisplaySprite
0000AE12                            ; ===========================================================================
0000AE12 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000AE14 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AE16 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AE18                            ; ===========================================================================
0000AE18                            
0000AE18                            Obj2E_Main:				; XREF: Obj2E_Index
0000AE18 5428 0024                  		addq.b	#2,$24(a0)
0000AE1C 317C 0680 0002             		move.w	#$680,2(a0)
0000AE22 117C 0024 0001             		move.b	#$24,1(a0)
0000AE28 117C 0003 0018             		move.b	#3,$18(a0)
0000AE2E 117C 0008 0019             		move.b	#8,$19(a0)
0000AE34 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AE3A 7000                       		moveq	#0,d0
0000AE3C 1028 001C                  		move.b	$1C(a0),d0
0000AE40 5400                       		addq.b	#2,d0
0000AE42 1140 001A                  		move.b	d0,$1A(a0)
0000AE46 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AE4C D000                       		add.b	d0,d0
0000AE4E D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AE52 5249                       		addq.w	#1,a1
0000AE54 2149 0004                  		move.l	a1,4(a0)
0000AE58                            
0000AE58                            Obj2E_Move:				; XREF: Obj2E_Index
0000AE58 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE5C 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AE60 7218                       		moveq	#$18,d1
0000AE62 4EF9 0000 0000             		jmp	ObjectFallCustom
0000AE68                            ; ===========================================================================
0000AE68                            
0000AE68                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AE68 5428 0024                  		addq.b	#2,$24(a0)
0000AE6C 317C 001D 001E             		move.w	#29,$1E(a0)
0000AE72 1028 001C                  		move.b	$1C(a0),d0
0000AE76 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AE7A 6600                       		bne.s	Obj2E_ChkSonic
0000AE7C 4E75                       		rts			; Eggman monitor does nothing
0000AE7E                            ; ===========================================================================
0000AE7E                            
0000AE7E                            Obj2E_ChkSonic:
0000AE7E 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AE82 6600                       		bne.s	Obj2E_ChkShoes
0000AE84                            
0000AE84                            ExtraLife:
0000AE84 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AE88 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AE8C 303C 0088                  		move.w	#$88,d0
0000AE90 4EF9 0000 15CE             		jmp	(PlaySound).l	; play extra life music
0000AE96                            ; ===========================================================================
0000AE96                            
0000AE96                            Obj2E_ChkShoes:
0000AE96 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AE9A 6600                       		bne.s	Obj2E_ChkShield
0000AE9C 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AEA2 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AEA8 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AEAE 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AEB4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AEBA 303C 00E2                  		move.w	#$E2,d0
0000AEBE 4EF9 0000 15CE             		jmp	(PlaySound).l	; Speed	up the music
0000AEC4                            ; ===========================================================================
0000AEC4                            
0000AEC4                            Obj2E_ChkShield:
0000AEC4 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AEC8 6600                       		bne.s	Obj2E_ChkInvinc
0000AECA 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AED0 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AED6 303C 00AF                  		move.w	#$AF,d0
0000AEDA 4EF9 0000 15CE             		jmp	(PlaySound).l	; play shield sound
0000AEE0                            ; ===========================================================================
0000AEE0                            
0000AEE0                            Obj2E_ChkInvinc:
0000AEE0 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AEE4 6600                       		bne.s	Obj2E_ChkRings
0000AEE6 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AEEC 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AEF2 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AEF8 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AEFE 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AF04 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AF0A 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AF10 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AF16 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AF1C 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AF22 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AF26 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AF28 303C 0087                  		move.w	#$87,d0
0000AF2C 4EF9 0000 15CE             		jmp	(PlaySound).l	; play invincibility music
0000AF32                            ; ===========================================================================
0000AF32                            
0000AF32                            Obj2E_NoMusic:
0000AF32 4E75                       		rts	
0000AF34                            ; ===========================================================================
0000AF34                            
0000AF34                            Obj2E_ChkRings:
0000AF34 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AF38 6600                       		bne.s	Obj2E_ChkS
0000AF3A 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AF40 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AF46 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AF4C 6500                       		bcs.s	Obj2E_RingSound
0000AF4E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AF54 6700 FF2E                  		beq.w	ExtraLife
0000AF58 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AF5E 6500                       		bcs.s	Obj2E_RingSound
0000AF60 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AF66 6700 FF1C                  		beq.w	ExtraLife
0000AF6A                            
0000AF6A                            Obj2E_RingSound:
0000AF6A 303C 00B5                  		move.w	#$B5,d0
0000AF6E 4EF9 0000 15CE             		jmp	(PlaySound).l	; play ring sound
0000AF74                            ; ===========================================================================
0000AF74                            
0000AF74                            Obj2E_ChkS:
0000AF74 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AF78 6600                       		bne.s	Obj2E_ChkEnd
0000AF7A                            		; nop	
0000AF7A 7201                       		moveq	#1,d1
0000AF7C B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AF80                            
0000AF80                            Obj2E_ChkEnd:
0000AF80 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AF82                            ; ===========================================================================
0000AF82                            
0000AF82                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AF82 5368 001E                  		subq.w	#1,$1E(a0)
0000AF86 6B00 0000                  		bmi.w	DeleteObject
0000AF8A 4E75                       		rts	
0000AF8C                            ; ---------------------------------------------------------------------------
0000AF8C                            ; Subroutine to	make the sides of a monitor solid
0000AF8C                            ; ---------------------------------------------------------------------------
0000AF8C                            
0000AF8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF8C                            
0000AF8C                            
0000AF8C                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AF8C 43F8 D000                  		lea	($FFFFD000).w,a1
0000AF90 3029 0008                  		move.w	8(a1),d0
0000AF94 9068 0008                  		sub.w	8(a0),d0
0000AF98 D041                       		add.w	d1,d0
0000AF9A 6B00                       		bmi.s	loc_A4E6
0000AF9C 3601                       		move.w	d1,d3
0000AF9E D643                       		add.w	d3,d3
0000AFA0 B043                       		cmp.w	d3,d0
0000AFA2 6200                       		bhi.s	loc_A4E6
0000AFA4 1629 0016                  		move.b	$16(a1),d3
0000AFA8 4883                       		ext.w	d3
0000AFAA D443                       		add.w	d3,d2
0000AFAC 3629 000C                  		move.w	$C(a1),d3
0000AFB0 9668 000C                  		sub.w	$C(a0),d3
0000AFB4 D642                       		add.w	d2,d3
0000AFB6 6B00                       		bmi.s	loc_A4E6
0000AFB8 D442                       		add.w	d2,d2
0000AFBA B642                       		cmp.w	d2,d3
0000AFBC 6400                       		bcc.s	loc_A4E6
0000AFBE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AFC2 6B00                       		bmi.s	loc_A4E6
0000AFC4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AFCA 6400                       		bcc.s	loc_A4E6
0000AFCC 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AFD0 6600                       		bne.s	loc_A4E6
0000AFD2 B240                       		cmp.w	d0,d1
0000AFD4 6400                       		bcc.s	loc_A4DC
0000AFD6 D241                       		add.w	d1,d1
0000AFD8 9041                       		sub.w	d1,d0
0000AFDA                            
0000AFDA                            loc_A4DC:
0000AFDA 0C43 0010                  		cmpi.w	#$10,d3
0000AFDE 6500                       		bcs.s	loc_A4EA
0000AFE0                            
0000AFE0                            loc_A4E2:
0000AFE0 7201                       		moveq	#1,d1
0000AFE2 4E75                       		rts	
0000AFE4                            ; ===========================================================================
0000AFE4                            
0000AFE4                            loc_A4E6:
0000AFE4 7200                       		moveq	#0,d1
0000AFE6 4E75                       		rts	
0000AFE8                            ; ===========================================================================
0000AFE8                            
0000AFE8                            loc_A4EA:
0000AFE8 7200                       		moveq	#0,d1
0000AFEA 1228 0019                  		move.b	$19(a0),d1
0000AFEE 5841                       		addq.w	#4,d1
0000AFF0 3401                       		move.w	d1,d2
0000AFF2 D442                       		add.w	d2,d2
0000AFF4 D269 0008                  		add.w	8(a1),d1
0000AFF8 9268 0008                  		sub.w	8(a0),d1
0000AFFC 6BE2                       		bmi.s	loc_A4E2
0000AFFE B242                       		cmp.w	d2,d1
0000B000 64DE                       		bcc.s	loc_A4E2
0000B002 72FF                       		moveq	#-1,d1
0000B004 4E75                       		rts	
0000B006                            ; End of function Obj26_SolidSides
0000B006                            
0000B006                            ; ===========================================================================
0000B006                            Ani_obj26:
0000B006                            	include "_anim\obj26.asm"
0000B006                            ; ---------------------------------------------------------------------------
0000B006                            ; Animation script - monitors
0000B006                            ; ---------------------------------------------------------------------------
0000B006 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B00C 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B012 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B018 0000                       		dc.w byte_A582-Ani_obj26
0000B01A 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B020 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B02C 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B038 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B044 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B050 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B05C 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B068 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B074 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B080 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B088                            		even
0000B088                            		even
0000B088                            
0000B088                            ; ---------------------------------------------------------------------------
0000B088                            ; Sprite mappings - monitors
0000B088                            ; ---------------------------------------------------------------------------
0000B088                            Map_obj26:
0000B088                            	include "_maps\obj26.asm"
0000B088                            ; ================================================================================
0000B088                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000B088                            ; ================================================================================
0000B088                            
0000B088                            DATAY1U343IF3L:
0000B088 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000B08C 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000B090 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000B094 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000B098 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000B09C 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000B0A0 05                         DATAY1U343IF3L_0: dc.b $5
0000B0A1 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B0A6 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B0AB E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B0B0 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B0B5 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B0BA 06                         DATAY1U343IF3L_1: dc.b $6
0000B0BB F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000B0C0 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B0C5 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B0CA E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B0CF 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B0D4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B0D9 05                         DATAY1U343IF3L_2: dc.b $5
0000B0DA E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B0DF 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B0E4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B0E9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B0EE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B0F3 05                         DATAY1U343IF3L_3: dc.b $5
0000B0F4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B0F9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B0FE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B103 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B108 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B10D 06                         DATAY1U343IF3L_4: dc.b $6
0000B10E F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000B113 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B118 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B11D E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B122 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B127 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B12C 06                         DATAY1U343IF3L_5: dc.b $6
0000B12D F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000B132 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B137 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B13C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B141 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B146 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B14B 06                         DATAY1U343IF3L_6: dc.b $6
0000B14C F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000B151 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B156 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B15B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B160 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B165 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B16A 06                         DATAY1U343IF3L_7: dc.b $6
0000B16B F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000B170 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B175 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B17A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B17F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B184 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B189 06                         DATAY1U343IF3L_8: dc.b $6
0000B18A F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000B18F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B194 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B199 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B19E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B1A3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B1A8 06                         DATAY1U343IF3L_9: dc.b $6
0000B1A9 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000B1AE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B1B3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B1B8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B1BD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B1C2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B1C7 05                         DATAY1U343IF3L_A: dc.b $5
0000B1C8 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B1CD 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B1D2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B1D7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B1DC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B1E1 01                         DATAY1U343IF3L_B: dc.b $1
0000B1E2 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000B1E8 00                         	even
0000B1E8 00                         	even
0000B1E8                            
0000B1E8                            ; ===========================================================================
0000B1E8                            ; ---------------------------------------------------------------------------
0000B1E8                            ; Object 0E - Sonic on the title screen
0000B1E8                            ; ---------------------------------------------------------------------------
0000B1E8                            
0000B1E8                            Obj0E:					; XREF: Obj_Index
0000B1E8 7000                       		moveq	#0,d0
0000B1EA 1028 0024                  		move.b	$24(a0),d0
0000B1EE 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B1F2 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B1F6                            ; ===========================================================================
0000B1F6 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B1F8 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B1FA 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B1FC 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B1FE                            ; ===========================================================================
0000B1FE                            
0000B1FE                            Obj0E_Main:				; XREF: Obj0E_Index
0000B1FE 5428 0024                  		addq.b	#2,$24(a0)
0000B202 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B208 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B20E 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B216 317C 2300 0002             		move.w	#$2300,2(a0)
0000B21C 117C 0001 0018             		move.b	#1,$18(a0)
0000B222 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B228 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B22E 6100 0000                  		bsr.w	AnimateSprite
0000B232                            
0000B232                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B232 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B236 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B238 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B23C 6000 0000                  		bra.w	DisplaySprite
0000B240                            ; ===========================================================================
0000B240                            
0000B240                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B240 4E75                       		rts	
0000B242                            ; ===========================================================================
0000B242                            
0000B242                            Obj0E_Move:				; XREF: Obj0E_Index
0000B242 5168 000A                  		subq.w	#8,$A(a0)
0000B246 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B24C 6600                       		bne.s	Obj0E_Display
0000B24E 5428 0024                  		addq.b	#2,$24(a0)
0000B252                            
0000B252                            Obj0E_Display:
0000B252 6000 0000                  		bra.w	DisplaySprite
0000B256                            ; ===========================================================================
0000B256 4E75                       		rts	
0000B258                            ; ===========================================================================
0000B258                            
0000B258                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B258 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B25E 6100 0000                  		bsr.w	AnimateSprite
0000B262 6000 0000                  		bra.w	DisplaySprite
0000B266                            ; ===========================================================================
0000B266 4E75                       		rts	
0000B268                            ; ===========================================================================
0000B268                            ; ---------------------------------------------------------------------------
0000B268                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B268                            ; ---------------------------------------------------------------------------
0000B268                            
0000B268                            Obj0F:					; XREF: Obj_Index
0000B268 7000                       		moveq	#0,d0
0000B26A 1028 0024                  		move.b	$24(a0),d0
0000B26E 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B272 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B276 6000 0000                  		bra.w	DisplaySprite
0000B27A                            ; ===========================================================================
0000B27A 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B27C 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B27E 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B280                            ; ===========================================================================
0000B280                            
0000B280                            Obj0F_Main:				; XREF: Obj0F_Index
0000B280 5428 0024                  		addq.b	#2,$24(a0)
0000B284 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B28A 317C 0130 000A             		move.w	#$130,$A(a0)
0000B290 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B298 317C 0200 0002             		move.w	#$200,2(a0)
0000B29E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B2A4 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B2A6 5428 0024                  		addq.b	#2,$24(a0)
0000B2AA 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B2B0 6600                       		bne.s	locret_A6F8	; if not, branch
0000B2B2 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B2B8 317C 0170 0008             		move.w	#$170,8(a0)
0000B2BE 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B2C4                            
0000B2C4                            locret_A6F8:				; XREF: Obj0F_Index
0000B2C4 4E75                       		rts	
0000B2C6                            ; ===========================================================================
0000B2C6                            
0000B2C6                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B2C6 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B2CC 6000 0000                  		bra.w	AnimateSprite
0000B2D0                            ; ===========================================================================
0000B2D0                            Ani_obj0E:
0000B2D0                            	include "_anim\obj0E.asm"
0000B2D0                            ; ---------------------------------------------------------------------------
0000B2D0                            ; Animation script - Sonic on the title screen
0000B2D0                            ; ---------------------------------------------------------------------------
0000B2D0 0000                       		dc.w byte_A706-Ani_obj0E
0000B2D2 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B2DE                            		even
0000B2DE                            		even
0000B2DE                            
0000B2DE                            Ani_obj0F:
0000B2DE                            	include "_anim\obj0F.asm"
0000B2DE                            ; ---------------------------------------------------------------------------
0000B2DE                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B2DE                            ; ---------------------------------------------------------------------------
0000B2DE 0000                       		dc.w byte_A714-Ani_obj0F
0000B2E0 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B2E4                            		even
0000B2E4                            		even
0000B2E4                            
0000B2E4                            ; ---------------------------------------------------------------------------
0000B2E4                            ; Subroutine to	animate	a sprite using an animation script
0000B2E4                            ; ---------------------------------------------------------------------------
0000B2E4                            
0000B2E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2E4                            
0000B2E4                            
0000B2E4                            AnimateSprite:
0000B2E4 7000                       		moveq	#0,d0
0000B2E6 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B2EA B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B2EE 6700                       		beq.s	Anim_Run	; if not, branch
0000B2F0 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B2F4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B2FA 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B300                            
0000B300                            Anim_Run:
0000B300 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B304 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B306 D040                       		add.w	d0,d0
0000B308 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B30C 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B310 7200                       		moveq	#0,d1
0000B312 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B316 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B31A 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B31C                            
0000B31C                            Anim_Next:
0000B31C 1200                       		move.b	d0,d1
0000B31E 0200 001F                  		andi.b	#$1F,d0
0000B322 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B326 1028 0022                  		move.b	$22(a0),d0
0000B32A E719                       		rol.b	#3,d1
0000B32C B101                       		eor.b	d0,d1
0000B32E 0201 0003                  		andi.b	#3,d1
0000B332 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B338 8328 0001                  		or.b	d1,1(a0)
0000B33C 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B340                            
0000B340                            Anim_Wait:
0000B340 4E75                       		rts	
0000B342                            ; ===========================================================================
0000B342                            
0000B342                            Anim_End_FF:
0000B342 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B344 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B346 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B34C 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B350 60CA                       		bra.s	Anim_Next
0000B352                            ; ===========================================================================
0000B352                            
0000B352                            Anim_End_FE:
0000B352 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B354 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B356 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B35A 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B35E 9200                       		sub.b	d0,d1
0000B360 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B364 60B6                       		bra.s	Anim_Next
0000B366                            ; ===========================================================================
0000B366                            
0000B366                            Anim_End_FD:
0000B366 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B368 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B36A 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B370                            
0000B370                            Anim_End_FC:
0000B370 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B372 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B374 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B378                            
0000B378                            Anim_End_FB:
0000B378 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B37A 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B37C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B382 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B386                            
0000B386                            Anim_End_FA:
0000B386 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B388 6600                       		bne.s	Anim_End	; if not, branch
0000B38A 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B38E                            
0000B38E                            Anim_End:
0000B38E 4E75                       		rts	
0000B390                            ; End of function AnimateSprite
0000B390                            
0000B390                            ; ===========================================================================
0000B390                            ; ---------------------------------------------------------------------------
0000B390                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B390                            ; ---------------------------------------------------------------------------
0000B390                            Map_obj0F:
0000B390                            	include "_maps\obj0F.asm"
0000B390                            ; ---------------------------------------------------------------------------
0000B390                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B390                            ; ---------------------------------------------------------------------------
0000B390 0000                       		dc.w byte_A7CD-Map_obj0F
0000B392 0000                       		dc.w byte_A7CC-Map_obj0F
0000B394 0000                       		dc.w byte_A7EB-Map_obj0F
0000B396 0000                       		dc.w byte_A882-Map_obj0F
0000B398 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B399 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B39E 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B3A3 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B3A8 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B3AD 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B3B2 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B3B7 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B3B8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3BD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3C2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3C7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3CC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3D1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3D6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3DB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3E0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3E5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3EA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B3EF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B3F4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B3F9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B3FE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B403 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B408 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B40D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B412 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B417 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B41C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B421 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B426 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B42B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B430 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B435 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B43A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B43F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B444 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B449 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B44E 01                         byte_A882:	dc.b 1			; "TM"
0000B44F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B454                            		even
0000B454                            		even
0000B454                            
0000B454                            ; ---------------------------------------------------------------------------
0000B454                            ; Sprite mappings - Sonic on the title screen
0000B454                            ; ---------------------------------------------------------------------------
0000B454                            Map_obj0E:
0000B454                            	include "_maps\obj0E.asm"
0000B454                            ; ================================================================================
0000B454                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B454                            ; ================================================================================
0000B454                            
0000B454                            DATAGKI0HYDQBXP:
0000B454 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B458 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B45C 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B460 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B464 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B465 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B46A 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B46F 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B474 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B479 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B47E 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B483 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B488 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B48D 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B48E 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B493 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B498 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B49D 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B4A2 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B4A7 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B4AC 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B4B1 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B4B6 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B4BB 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B4C0 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B4C5 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B4C6 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B4CB F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B4D0 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B4D5 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B4DA 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B4DF 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B4E4 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B4E9 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B4EE 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B4F3 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B4F8 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B4FD 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B4FE FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B503 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B508 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B50D 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B512 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B517 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B51C 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B521 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B526 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B52B 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B530 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B531 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B536 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B53B 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B540 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B545 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B54A 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B54F 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B554 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B559 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B55E 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B563 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B568 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B56D 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B572 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B577 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B57C 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B581 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B582 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B587 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B58C 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B591 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B596 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B59B 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B5A0 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B5A5 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B5AA 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B5AF 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B5B4 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B5B9 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B5BA EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B5BF 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B5C4 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B5C9 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B5CE 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B5D3 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B5D8 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B5DD 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B5E2 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B5E7 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B5EC 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B5F1 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B5F6 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B5FB 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B600 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B605 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B606 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B60B 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B610 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B615 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B61A 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B61F 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B624 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B629 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B62E 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B633 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B638 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B63D 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B642 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B647 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B64C 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B652 00                         	even
0000B652 00                         	even
0000B652                            
0000B652                            ; ===========================================================================
0000B652                            ; ---------------------------------------------------------------------------
0000B652                            ; Object 2B - Chopper enemy (GHZ)
0000B652                            ; ---------------------------------------------------------------------------
0000B652                            
0000B652                            Obj2B:					; XREF: Obj_Index
0000B652 7000                       		moveq	#0,d0
0000B654 1028 0024                  		move.b	$24(a0),d0
0000B658 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B65C 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B660 6000 0000                  		bra.w	MarkObjGone
0000B664                            ; ===========================================================================
0000B664 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B666 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B668                            ; ===========================================================================
0000B668                            
0000B668                            Obj2B_Main:				; XREF: Obj2B_Index
0000B668 5428 0024                  		addq.b	#2,$24(a0)
0000B66C 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B674 317C 047B 0002             		move.w	#$47B,2(a0)
0000B67A 117C 0004 0001             		move.b	#4,1(a0)
0000B680 117C 0004 0018             		move.b	#4,$18(a0)
0000B686 117C 0009 0020             		move.b	#9,$20(a0)
0000B68C 117C 0010 0019             		move.b	#$10,$19(a0)
0000B692 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B698 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B69E                            
0000B69E                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B69E 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B6A4 6100 FC3E                  		bsr.w	AnimateSprite
0000B6A8 7218                       		moveq	#$18,d1
0000B6AA 4EB9 0000 0000             		jsr	ObjectFallCustom
0000B6B0 3028 0030                  		move.w	$30(a0),d0
0000B6B4 B068 000C                  		cmp.w	$C(a0),d0
0000B6B8 6400                       		bcc.s	Obj2B_ChgAni
0000B6BA 3140 000C                  		move.w	d0,$C(a0)
0000B6BE 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B6C4                            
0000B6C4                            Obj2B_ChgAni:
0000B6C4 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B6CA 0440 00C0                  		subi.w	#$C0,d0
0000B6CE B068 000C                  		cmp.w	$C(a0),d0
0000B6D2 6400                       		bcc.s	locret_ABB6
0000B6D4 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B6DA 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B6DE 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B6E0 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B6E6                            
0000B6E6                            locret_ABB6:
0000B6E6 4E75                       		rts	
0000B6E8                            ; ===========================================================================
0000B6E8                            Ani_obj2B:
0000B6E8                            	include "_anim\obj2B.asm"
0000B6E8                            ; ---------------------------------------------------------------------------
0000B6E8                            ; Animation script - Chopper enemy
0000B6E8                            ; ---------------------------------------------------------------------------
0000B6E8 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B6EA 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B6EC 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B6EE 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B6F2 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B6F6 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B6FA 00                         		even
0000B6FA 00                         		even
0000B6FA                            
0000B6FA                            ; ---------------------------------------------------------------------------
0000B6FA                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6FA                            ; ---------------------------------------------------------------------------
0000B6FA                            Map_obj2B:
0000B6FA                            	include "_maps\obj2B.asm"
0000B6FA                            Map_1ff1:
0000B6FA 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B6FC 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B6FE 02                         Map_1ff1_4: 	dc.b $2
0000B6FF E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B704 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B709 02                         Map_1ff1_F: 	dc.b $2
0000B70A E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B70F 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B714                            	even
0000B714                            	even
0000B714                            
0000B714                            ; ===========================================================================
0000B714                            ; ---------------------------------------------------------------------------
0000B714                            ; Object 2C - Jaws enemy (LZ)
0000B714                            ; ---------------------------------------------------------------------------
0000B714                            
0000B714                            Obj2C:					; XREF: Obj_Index
0000B714 7000                       		moveq	#0,d0
0000B716 1028 0024                  		move.b	$24(a0),d0
0000B71A 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B71E 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B722                            ; ===========================================================================
0000B722 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B724 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B726                            ; ===========================================================================
0000B726                            
0000B726                            Obj2C_Main:				; XREF: Obj2C_Index
0000B726 5428 0024                  		addq.b	#2,$24(a0)
0000B72A 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B732 317C 2486 0002             		move.w	#$2486,2(a0)
0000B738 0028 0004 0001             		ori.b	#4,1(a0)
0000B73E 117C 000A 0020             		move.b	#$A,$20(a0)
0000B744 117C 0004 0018             		move.b	#4,$18(a0)
0000B74A 117C 0010 0019             		move.b	#$10,$19(a0)
0000B750 7000                       		moveq	#0,d0
0000B752 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B756 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B758 5340                       		subq.w	#1,d0
0000B75A 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B75E 3140 0032                  		move.w	d0,$32(a0)
0000B762 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B768 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B76E 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B770 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B774                            
0000B774                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B774 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B778 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B77A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B780 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B784 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B78A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B790                            
0000B790                            Obj2C_Animate:
0000B790 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B796 6100 FB4C                  		bsr.w	AnimateSprite
0000B79A 6100 0000                  		bsr.w	SpeedToPos
0000B79E 6000 0000                  		bra.w	MarkObjGone
0000B7A2                            ; ===========================================================================
0000B7A2                            Ani_obj2C:
0000B7A2                            	include "_anim\obj2C.asm"
0000B7A2                            ; ---------------------------------------------------------------------------
0000B7A2                            ; Animation script - Jaws enemy
0000B7A2                            ; ---------------------------------------------------------------------------
0000B7A2 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B7A4 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B7AA                            		even
0000B7AA                            		even
0000B7AA                            
0000B7AA                            ; ---------------------------------------------------------------------------
0000B7AA                            ; Sprite mappings - Jaws enemy (LZ)
0000B7AA                            ; ---------------------------------------------------------------------------
0000B7AA                            Map_obj2C:
0000B7AA                            	include "_maps\obj2C.asm"
0000B7AA                            ; ---------------------------------------------------------------------------
0000B7AA                            ; Sprite mappings - Jaws enemy (LZ)
0000B7AA                            ; ---------------------------------------------------------------------------
0000B7AA 0000                       		dc.w byte_AC78-Map_obj2C
0000B7AC 0000                       		dc.w byte_AC83-Map_obj2C
0000B7AE 0000                       		dc.w byte_AC8E-Map_obj2C
0000B7B0 0000                       		dc.w byte_AC99-Map_obj2C
0000B7B2 02                         byte_AC78:	dc.b 2
0000B7B3 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B7B8 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B7BD 02                         byte_AC83:	dc.b 2
0000B7BE F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B7C3 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B7C8 02                         byte_AC8E:	dc.b 2
0000B7C9 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B7CE F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B7D3 02                         byte_AC99:	dc.b 2
0000B7D4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B7D9 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B7DE                            		even
0000B7DE                            		even
0000B7DE                            
0000B7DE                            ; ===========================================================================
0000B7DE                            ; ---------------------------------------------------------------------------
0000B7DE                            ; Object 2D - Burrobot enemy (LZ)
0000B7DE                            ; ---------------------------------------------------------------------------
0000B7DE                            
0000B7DE                            Obj2D:					; XREF: Obj_Index
0000B7DE 7000                       		moveq	#0,d0
0000B7E0 1028 0024                  		move.b	$24(a0),d0
0000B7E4 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B7E8 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B7EC                            ; ===========================================================================
0000B7EC 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B7EE 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B7F0                            ; ===========================================================================
0000B7F0                            
0000B7F0                            Obj2D_Main:				; XREF: Obj2D_Index
0000B7F0 5428 0024                  		addq.b	#2,$24(a0)
0000B7F4 117C 0013 0016             		move.b	#$13,$16(a0)
0000B7FA 117C 0008 0017             		move.b	#8,$17(a0)
0000B800 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B808 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B80E 0028 0004 0001             		ori.b	#4,1(a0)
0000B814 117C 0004 0018             		move.b	#4,$18(a0)
0000B81A 117C 0005 0020             		move.b	#5,$20(a0)
0000B820 117C 000C 0019             		move.b	#$C,$19(a0)
0000B826 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B82A 117C 0002 001C             		move.b	#2,$1C(a0)
0000B830                            
0000B830                            Obj2D_Action:				; XREF: Obj2D_Index
0000B830 7000                       		moveq	#0,d0
0000B832 1028 0025                  		move.b	$25(a0),d0
0000B836 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B83A 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B83E 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B844 6100 FA9E                  		bsr.w	AnimateSprite
0000B848 6000 0000                  		bra.w	MarkObjGone
0000B84C                            ; ===========================================================================
0000B84C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B84E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B850 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B852 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B854                            ; ===========================================================================
0000B854                            
0000B854                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B854 5368 0030                  		subq.w	#1,$30(a0)
0000B858 6A00                       		bpl.s	locret_AD42
0000B85A 5428 0025                  		addq.b	#2,$25(a0)
0000B85E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B864 317C 0080 0010             		move.w	#$80,$10(a0)
0000B86A 117C 0001 001C             		move.b	#1,$1C(a0)
0000B870 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B876 6700                       		beq.s	locret_AD42
0000B878 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B87C                            
0000B87C                            locret_AD42:
0000B87C 4E75                       		rts	
0000B87E                            ; ===========================================================================
0000B87E                            
0000B87E                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B87E 5368 0030                  		subq.w	#1,$30(a0)
0000B882 6B00                       		bmi.s	loc_AD84
0000B884 6100 0000                  		bsr.w	SpeedToPos
0000B888 0868 0000 0032             		bchg	#0,$32(a0)
0000B88E 6600                       		bne.s	loc_AD78
0000B890 3628 0008                  		move.w	8(a0),d3
0000B894 0643 000C                  		addi.w	#$C,d3
0000B898 0828 0000 0022             		btst	#0,$22(a0)
0000B89E 6600                       		bne.s	loc_AD6A
0000B8A0 0443 0018                  		subi.w	#$18,d3
0000B8A4                            
0000B8A4                            loc_AD6A:
0000B8A4 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B8AA 0C41 000C                  		cmpi.w	#$C,d1
0000B8AE 6C00                       		bge.s	loc_AD84
0000B8B0 4E75                       		rts	
0000B8B2                            ; ===========================================================================
0000B8B2                            
0000B8B2                            loc_AD78:				; XREF: Obj2D_Move
0000B8B2 4EB9 0000 0000             		jsr	ObjHitFloor
0000B8B8 D368 000C                  		add.w	d1,$C(a0)
0000B8BC 4E75                       		rts	
0000B8BE                            ; ===========================================================================
0000B8BE                            
0000B8BE                            loc_AD84:				; XREF: Obj2D_Move
0000B8BE 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B8C4 6700                       		beq.s	loc_ADA4
0000B8C6 5528 0025                  		subq.b	#2,$25(a0)
0000B8CA 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B8D0 317C 0000 0010             		move.w	#0,$10(a0)
0000B8D6 117C 0000 001C             		move.b	#0,$1C(a0)
0000B8DC 4E75                       		rts	
0000B8DE                            ; ===========================================================================
0000B8DE                            
0000B8DE                            loc_ADA4:
0000B8DE 5428 0025                  		addq.b	#2,$25(a0)
0000B8E2 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B8E8 117C 0002 001C             		move.b	#2,$1C(a0)
0000B8EE 4E75                       		rts	
0000B8F0                            ; ===========================================================================
0000B8F0                            
0000B8F0                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B8F0 7218                       		moveq	#$18,d1
0000B8F2 4EB9 0000 0000             		jsr	ObjectFallCustom
0000B8F8 4A68 0012                  		tst.w	$12(a0)
0000B8FC 6B00                       		bmi.s	locret_ADF0
0000B8FE 117C 0003 001C             		move.b	#3,$1C(a0)
0000B904 4EB9 0000 0000             		jsr	ObjHitFloor
0000B90A 4A41                       		tst.w	d1
0000B90C 6A00                       		bpl.s	locret_ADF0
0000B90E D368 000C                  		add.w	d1,$C(a0)
0000B912 317C 0000 0012             		move.w	#0,$12(a0)
0000B918 117C 0001 001C             		move.b	#1,$1C(a0)
0000B91E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B924 5528 0025                  		subq.b	#2,$25(a0)
0000B928 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B92C                            
0000B92C                            locret_ADF0:
0000B92C 4E75                       		rts	
0000B92E                            ; ===========================================================================
0000B92E                            
0000B92E                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B92E 343C 0060                  		move.w	#$60,d2
0000B932 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B936 6400                       		bcc.s	locret_AE20
0000B938 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B93C 9068 000C                  		sub.w	$C(a0),d0
0000B940 6400                       		bcc.s	locret_AE20
0000B942 0C40 FF80                  		cmpi.w	#-$80,d0
0000B946 6500                       		bcs.s	locret_AE20
0000B948 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B94C 6600                       		bne.s	locret_AE20
0000B94E 5528 0025                  		subq.b	#2,$25(a0)
0000B952 3141 0010                  		move.w	d1,$10(a0)
0000B956 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B95C                            
0000B95C                            locret_AE20:
0000B95C 4E75                       		rts	
0000B95E                            
0000B95E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B95E                            
0000B95E                            
0000B95E                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B95E 323C 0080                  		move.w	#$80,d1
0000B962 08E8 0000 0022             		bset	#0,$22(a0)
0000B968 3038 D008                  		move.w	($FFFFD008).w,d0
0000B96C 9068 0008                  		sub.w	8(a0),d0
0000B970 6400                       		bcc.s	loc_AE40
0000B972 4440                       		neg.w	d0
0000B974 4441                       		neg.w	d1
0000B976 08A8 0000 0022             		bclr	#0,$22(a0)
0000B97C                            
0000B97C                            loc_AE40:
0000B97C B042                       		cmp.w	d2,d0
0000B97E 4E75                       		rts	
0000B980                            ; End of function Obj2D_ChkSonic2
0000B980                            
0000B980                            ; ===========================================================================
0000B980                            Ani_obj2D:
0000B980                            	include "_anim\obj2D.asm"
0000B980                            ; ---------------------------------------------------------------------------
0000B980                            ; Animation script - Burrobot enemy but craig
0000B980                            ; ---------------------------------------------------------------------------
0000B980 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B982 0000                       		dc.w byte_AE50-Ani_obj2D
0000B984 0000                       		dc.w byte_AE54-Ani_obj2D
0000B986 0000                       		dc.w byte_AE58-Ani_obj2D
0000B988 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B98B 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B98F 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B99D 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B9A0                            		even
0000B9A0                            		even
0000B9A0                            
0000B9A0                            ; ---------------------------------------------------------------------------
0000B9A0                            ; Sprite mappings - Burrobot enemy (LZ)
0000B9A0                            ; ---------------------------------------------------------------------------
0000B9A0                            Map_obj2D:
0000B9A0                            	include "_maps\obj2D.asm"
0000B9A0                            Map_e3a3:
0000B9A0 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B9A2 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B9A4 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B9A6 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B9A8 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B9AA 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B9AC 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B9AE 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B9B0 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B9B2 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B9B4 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B9B6 02                         Map_e3a3_16: 	dc.b $2
0000B9B7 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B9BC 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B9C1 02                         Map_e3a3_21: 	dc.b $2
0000B9C2 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B9C7 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B9CC 02                         Map_e3a3_2C: 	dc.b $2
0000B9CD EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B9D2 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B9D7 02                         Map_e3a3_37: 	dc.b $2
0000B9D8 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B9DD FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B9E2 02                         Map_e3a3_42: 	dc.b $2
0000B9E3 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B9E8 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B9ED 02                         Map_e3a3_4D: 	dc.b $2
0000B9EE EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B9F3 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B9F8 02                         Map_e3a3_58: 	dc.b $2
0000B9F9 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B9FE FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000BA03 02                         Map_e3a3_63: 	dc.b $2
0000BA04 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000BA09 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000BA0E 02                         Map_e3a3_6E: 	dc.b $2
0000BA0F EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000BA14 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000BA19 02                         Map_e3a3_79: 	dc.b $2
0000BA1A EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000BA1F 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000BA24 02                         Map_e3a3_84: 	dc.b $2
0000BA25 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000BA2A 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000BA30 00                         	even
0000BA30 00                         	even
0000BA30                            
0000BA30                            ; ===========================================================================
0000BA30                            ; ---------------------------------------------------------------------------
0000BA30                            ; Object 2F - large moving platforms (MZ)
0000BA30                            ; ---------------------------------------------------------------------------
0000BA30                            
0000BA30                            Obj2F:					; XREF: Obj_Index
0000BA30 7000                       		moveq	#0,d0
0000BA32 1028 0024                  		move.b	$24(a0),d0
0000BA36 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000BA3A 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000BA3E                            ; ===========================================================================
0000BA3E 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000BA40 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000BA42                            
0000BA42 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000BA44 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000BA46 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000BA48 0140                       		dc.b 1,	$40
0000BA4A 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000BA4C 0220                       		dc.b 2,	$20
0000BA4E                            ; ===========================================================================
0000BA4E                            
0000BA4E                            Obj2F_Main:				; XREF: Obj2F_Index
0000BA4E 5428 0024                  		addq.b	#2,$24(a0)
0000BA52 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000BA5A 317C C000 0002             		move.w	#$C000,2(a0)
0000BA60 117C 0004 0001             		move.b	#4,1(a0)
0000BA66 117C 0005 0018             		move.b	#5,$18(a0)
0000BA6C 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000BA72 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BA78 7000                       		moveq	#0,d0
0000BA7A 1028 0028                  		move.b	$28(a0),d0
0000BA7E E448                       		lsr.w	#2,d0
0000BA80 0240 001C                  		andi.w	#$1C,d0
0000BA84 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000BA88 3019                       		move.w	(a1)+,d0
0000BA8A 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000BA8E 214A 0030                  		move.l	a2,$30(a0)
0000BA92 1159 001A                  		move.b	(a1)+,$1A(a0)
0000BA96 1151 0019                  		move.b	(a1),$19(a0)
0000BA9A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BAA0 117C 0040 0016             		move.b	#$40,$16(a0)
0000BAA6 08E8 0004 0001             		bset	#4,1(a0)
0000BAAC                            
0000BAAC                            Obj2F_Action:				; XREF: Obj2F_Index
0000BAAC 6100 0000                  		bsr.w	Obj2F_Types
0000BAB0 4A28 0025                  		tst.b	$25(a0)
0000BAB4 6700                       		beq.s	Obj2F_Solid
0000BAB6 7200                       		moveq	#0,d1
0000BAB8 1228 0019                  		move.b	$19(a0),d1
0000BABC 0641 000B                  		addi.w	#$B,d1
0000BAC0 6100 C564                  		bsr.w	ExitPlatform
0000BAC4 0829 0003 0022             		btst	#3,$22(a1)
0000BACA 6600 0000                  		bne.w	Obj2F_Slope
0000BACE 4228 0025                  		clr.b	$25(a0)
0000BAD2 6000                       		bra.s	Obj2F_Display
0000BAD4                            ; ===========================================================================
0000BAD4                            
0000BAD4                            Obj2F_Slope:				; XREF: Obj2F_Action
0000BAD4 7200                       		moveq	#0,d1
0000BAD6 1228 0019                  		move.b	$19(a0),d1
0000BADA 0641 000B                  		addi.w	#$B,d1
0000BADE 2468 0030                  		movea.l	$30(a0),a2
0000BAE2 3428 0008                  		move.w	8(a0),d2
0000BAE6 6100 D52E                  		bsr.w	SlopeObject2
0000BAEA 6000                       		bra.s	Obj2F_Display
0000BAEC                            ; ===========================================================================
0000BAEC                            
0000BAEC                            Obj2F_Solid:				; XREF: Obj2F_Action
0000BAEC 7200                       		moveq	#0,d1
0000BAEE 1228 0019                  		move.b	$19(a0),d1
0000BAF2 0641 000B                  		addi.w	#$B,d1
0000BAF6 343C 0020                  		move.w	#$20,d2
0000BAFA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BB00 6600                       		bne.s	loc_AF8E
0000BB02 343C 0030                  		move.w	#$30,d2
0000BB06                            
0000BB06                            loc_AF8E:
0000BB06 2468 0030                  		movea.l	$30(a0),a2
0000BB0A 6100 0000                  		bsr.w	SolidObject2F
0000BB0E                            
0000BB0E                            Obj2F_Display:				; XREF: Obj2F_Action
0000BB0E 6100 0000                  		bsr.w	DisplaySprite
0000BB12 6000 0000                  		bra.w	Obj2F_ChkDel
0000BB16                            
0000BB16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB16                            
0000BB16                            
0000BB16                            Obj2F_Types:				; XREF: Obj2F_Action
0000BB16 7000                       		moveq	#0,d0
0000BB18 1028 0028                  		move.b	$28(a0),d0
0000BB1C 0240 0007                  		andi.w	#7,d0
0000BB20 D040                       		add.w	d0,d0
0000BB22 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000BB26 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000BB2A                            ; End of function Obj2F_Types
0000BB2A                            
0000BB2A                            ; ===========================================================================
0000BB2A 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000BB2C 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000BB2E 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000BB30 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000BB32 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000BB34 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000BB36                            ; ===========================================================================
0000BB36                            
0000BB36                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000BB36 4E75                       		rts			; type 00 platform doesn't move
0000BB38                            ; ===========================================================================
0000BB38                            
0000BB38                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000BB38 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000BB3C 323C 0020                  		move.w	#$20,d1
0000BB40 6000                       		bra.s	Obj2F_Move
0000BB42                            ; ===========================================================================
0000BB42                            
0000BB42                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000BB42 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000BB46 323C 0030                  		move.w	#$30,d1
0000BB4A 6000                       		bra.s	Obj2F_Move
0000BB4C                            ; ===========================================================================
0000BB4C                            
0000BB4C                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000BB4C 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000BB50 323C 0040                  		move.w	#$40,d1
0000BB54 6000                       		bra.s	Obj2F_Move
0000BB56                            ; ===========================================================================
0000BB56                            
0000BB56                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000BB56 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000BB5A 323C 0060                  		move.w	#$60,d1
0000BB5E                            
0000BB5E                            Obj2F_Move:
0000BB5E 0828 0003 0028             		btst	#3,$28(a0)
0000BB64 6700                       		beq.s	loc_AFF2
0000BB66 4440                       		neg.w	d0
0000BB68 D041                       		add.w	d1,d0
0000BB6A                            
0000BB6A                            loc_AFF2:
0000BB6A 3228 002C                  		move.w	$2C(a0),d1
0000BB6E 9240                       		sub.w	d0,d1
0000BB70 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000BB74 4E75                       		rts	
0000BB76                            ; ===========================================================================
0000BB76                            
0000BB76                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000BB76 1028 0034                  		move.b	$34(a0),d0
0000BB7A 4A28 0025                  		tst.b	$25(a0)
0000BB7E 6600                       		bne.s	loc_B010
0000BB80 5500                       		subq.b	#2,d0
0000BB82 6400                       		bcc.s	loc_B01C
0000BB84 7000                       		moveq	#0,d0
0000BB86 6000                       		bra.s	loc_B01C
0000BB88                            ; ===========================================================================
0000BB88                            
0000BB88                            loc_B010:
0000BB88 5800                       		addq.b	#4,d0
0000BB8A 0C00 0040                  		cmpi.b	#$40,d0
0000BB8E 6500                       		bcs.s	loc_B01C
0000BB90 103C 0040                  		move.b	#$40,d0
0000BB94                            
0000BB94                            loc_B01C:
0000BB94 1140 0034                  		move.b	d0,$34(a0)
0000BB98 4EB9 0000 2D6E             		jsr	(CalcSine).l
0000BB9E E848                       		lsr.w	#4,d0
0000BBA0 3200                       		move.w	d0,d1
0000BBA2 D068 002C                  		add.w	$2C(a0),d0
0000BBA6 3140 000C                  		move.w	d0,$C(a0)
0000BBAA 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000BBB0 6600                       		bne.s	loc_B07A
0000BBB2 4A28 0035                  		tst.b	$35(a0)
0000BBB6 6600                       		bne.s	loc_B07A
0000BBB8 117C 0001 0035             		move.b	#1,$35(a0)
0000BBBE 6100 0000                  		bsr.w	SingleObjLoad2
0000BBC2 6600                       		bne.s	loc_B07A
0000BBC4 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000BBC8 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBCE 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000BBD4 5069 002C                  		addq.w	#8,$2C(a1)
0000BBD8 5769 002C                  		subq.w	#3,$2C(a1)
0000BBDC 0469 0040 0008             		subi.w	#$40,8(a1)
0000BBE2 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000BBE8 2348 0038                  		move.l	a0,$38(a1)
0000BBEC 2448                       		movea.l	a0,a2
0000BBEE 6100                       		bsr.s	sub_B09C
0000BBF0                            
0000BBF0                            loc_B07A:
0000BBF0 7400                       		moveq	#0,d2
0000BBF2 45E8 0036                  		lea	$36(a0),a2
0000BBF6 141A                       		move.b	(a2)+,d2
0000BBF8 5302                       		subq.b	#1,d2
0000BBFA 6500                       		bcs.s	locret_B09A
0000BBFC                            
0000BBFC                            loc_B086:
0000BBFC 7000                       		moveq	#0,d0
0000BBFE 101A                       		move.b	(a2)+,d0
0000BC00 ED48                       		lsl.w	#6,d0
0000BC02 0640 D000                  		addi.w	#-$3000,d0
0000BC06 3240                       		movea.w	d0,a1
0000BC08 3341 003C                  		move.w	d1,$3C(a1)
0000BC0C 51CA FFEE                  		dbf	d2,loc_B086
0000BC10                            
0000BC10                            locret_B09A:
0000BC10 4E75                       		rts	
0000BC12                            
0000BC12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC12                            
0000BC12                            
0000BC12                            sub_B09C:
0000BC12 45EA 0036                  		lea	$36(a2),a2
0000BC16 7000                       		moveq	#0,d0
0000BC18 1012                       		move.b	(a2),d0
0000BC1A 5212                       		addq.b	#1,(a2)
0000BC1C 45F2 0001                  		lea	1(a2,d0.w),a2
0000BC20 3009                       		move.w	a1,d0
0000BC22 0440 D000                  		subi.w	#-$3000,d0
0000BC26 EC48                       		lsr.w	#6,d0
0000BC28 0240 007F                  		andi.w	#$7F,d0
0000BC2C 1480                       		move.b	d0,(a2)
0000BC2E 4E75                       		rts	
0000BC30                            ; End of function sub_B09C
0000BC30                            
0000BC30                            ; ===========================================================================
0000BC30                            
0000BC30                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000BC30 4A28 0035                  		tst.b	$35(a0)
0000BC34 6700                       		beq.s	loc_B0C6
0000BC36 4A28 0001                  		tst.b	1(a0)
0000BC3A 6A00                       		bpl.s	Obj2F_DelFlames
0000BC3C                            
0000BC3C                            loc_B0C6:
0000BC3C 3028 002A                  		move.w	$2A(a0),d0
0000BC40 0240 FF80                  		andi.w	#$FF80,d0
0000BC44 3238 F700                  		move.w	($FFFFF700).w,d1
0000BC48 0441 0080                  		subi.w	#$80,d1
0000BC4C 0241 FF80                  		andi.w	#$FF80,d1
0000BC50 9041                       		sub.w	d1,d0
0000BC52 0C40 0280                  		cmpi.w	#$280,d0
0000BC56 6200 0000                  		bhi.w	DeleteObject
0000BC5A 4E75                       		rts	
0000BC5C                            ; ===========================================================================
0000BC5C                            
0000BC5C                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BC5C 7400                       		moveq	#0,d2
0000BC5E                            
0000BC5E                            loc_B0E8:
0000BC5E 45E8 0036                  		lea	$36(a0),a2
0000BC62 1412                       		move.b	(a2),d2
0000BC64 421A                       		clr.b	(a2)+
0000BC66 5302                       		subq.b	#1,d2
0000BC68 6500                       		bcs.s	locret_B116
0000BC6A                            
0000BC6A                            loc_B0F4:
0000BC6A 7000                       		moveq	#0,d0
0000BC6C 1012                       		move.b	(a2),d0
0000BC6E 421A                       		clr.b	(a2)+
0000BC70 ED48                       		lsl.w	#6,d0
0000BC72 0640 D000                  		addi.w	#-$3000,d0
0000BC76 3240                       		movea.w	d0,a1
0000BC78 6100 0000                  		bsr.w	DeleteObject2
0000BC7C 51CA FFEC                  		dbf	d2,loc_B0F4
0000BC80 117C 0000 0035             		move.b	#0,$35(a0)
0000BC86 117C 0000 0034             		move.b	#0,$34(a0)
0000BC8C                            
0000BC8C                            locret_B116:
0000BC8C 4E75                       		rts	
0000BC8E                            ; ===========================================================================
0000BC8E                            ; ---------------------------------------------------------------------------
0000BC8E                            ; Collision data for large moving platforms (MZ)
0000BC8E                            ; ---------------------------------------------------------------------------
0000BC8E                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BCDA                            		even
0000BCDA                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BD06                            		even
0000BD06                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BD52                            		even
0000BD52                            ; ===========================================================================
0000BD52                            ; ---------------------------------------------------------------------------
0000BD52                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BD52                            ; (appears when	you walk on sinking platforms)
0000BD52                            ; ---------------------------------------------------------------------------
0000BD52                            
0000BD52                            Obj35:					; XREF: Obj_Index
0000BD52 7000                       		moveq	#0,d0
0000BD54 1028 0024                  		move.b	$24(a0),d0
0000BD58 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BD5C 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BD60                            ; ===========================================================================
0000BD60 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BD62 0000                       		dc.w loc_B238-Obj35_Index
0000BD64 0000                       		dc.w Obj35_Move-Obj35_Index
0000BD66                            ; ===========================================================================
0000BD66                            
0000BD66                            Obj35_Main:				; XREF: Obj35_Index
0000BD66 5428 0024                  		addq.b	#2,$24(a0)
0000BD6A 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BD72 317C 0345 0002             		move.w	#$345,2(a0)
0000BD78 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BD7E 117C 0004 0001             		move.b	#4,1(a0)
0000BD84 117C 0001 0018             		move.b	#1,$18(a0)
0000BD8A 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BD90 117C 0008 0019             		move.b	#8,$19(a0)
0000BD96 303C 00C8                  		move.w	#$C8,d0
0000BD9A 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play flame sound
0000BDA0 4A28 0028                  		tst.b	$28(a0)
0000BDA4 6700                       		beq.s	loc_B238
0000BDA6 5428 0024                  		addq.b	#2,$24(a0)
0000BDAA 6000 0000                  		bra.w	Obj35_Move
0000BDAE                            ; ===========================================================================
0000BDAE                            
0000BDAE                            loc_B238:				; XREF: Obj35_Index
0000BDAE 2268 0030                  		movea.l	$30(a0),a1
0000BDB2 3228 0008                  		move.w	8(a0),d1
0000BDB6 9268 002A                  		sub.w	$2A(a0),d1
0000BDBA 0641 000C                  		addi.w	#$C,d1
0000BDBE 3001                       		move.w	d1,d0
0000BDC0 E248                       		lsr.w	#1,d0
0000BDC2 1031 0000                  		move.b	(a1,d0.w),d0
0000BDC6 4440                       		neg.w	d0
0000BDC8 D068 002C                  		add.w	$2C(a0),d0
0000BDCC 3400                       		move.w	d0,d2
0000BDCE D068 003C                  		add.w	$3C(a0),d0
0000BDD2 3140 000C                  		move.w	d0,$C(a0)
0000BDD6 0C41 0084                  		cmpi.w	#$84,d1
0000BDDA 6400                       		bcc.s	loc_B2B0
0000BDDC 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BDE4 0C41 0080                  		cmpi.w	#$80,d1
0000BDE8 6400                       		bcc.s	loc_B2B0
0000BDEA 2028 0008                  		move.l	8(a0),d0
0000BDEE 0680 0008 0000             		addi.l	#$80000,d0
0000BDF4 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BDFA 6600                       		bne.s	loc_B2B0
0000BDFC 6100 0000                  		bsr.w	SingleObjLoad2
0000BE00 6600                       		bne.s	loc_B2B0
0000BE02 12BC 0035                  		move.b	#$35,0(a1)
0000BE06 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE0C 3342 002C                  		move.w	d2,$2C(a1)
0000BE10 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BE16 137C 0001 0028             		move.b	#1,$28(a1)
0000BE1C 2468 0038                  		movea.l	$38(a0),a2
0000BE20 6100 FDF0                  		bsr.w	sub_B09C
0000BE24                            
0000BE24                            loc_B2B0:
0000BE24 6000                       		bra.s	Obj35_Animate
0000BE26                            ; ===========================================================================
0000BE26                            
0000BE26                            Obj35_Move:				; XREF: Obj35_Index
0000BE26 3028 002C                  		move.w	$2C(a0),d0
0000BE2A D068 003C                  		add.w	$3C(a0),d0
0000BE2E 3140 000C                  		move.w	d0,$C(a0)
0000BE32                            
0000BE32                            Obj35_Animate:				; XREF: loc_B238
0000BE32 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BE38 6100 F4AA                  		bsr.w	AnimateSprite
0000BE3C 6000 0000                  		bra.w	DisplaySprite
0000BE40                            ; ===========================================================================
0000BE40                            Ani_obj35:
0000BE40                            	include "_anim\obj35.asm"
0000BE40                            ; ---------------------------------------------------------------------------
0000BE40                            ; Animation script - fireball that sits on the	floor (MZ)
0000BE40                            ; ---------------------------------------------------------------------------
0000BE40 0000                       		dc.w byte_B2CE-Ani_obj35
0000BE42 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BE48                            		even
0000BE48                            		even
0000BE48                            
0000BE48                            ; ---------------------------------------------------------------------------
0000BE48                            ; Sprite mappings - large moving platforms (MZ)
0000BE48                            ; ---------------------------------------------------------------------------
0000BE48                            Map_obj2F:
0000BE48                            	include "_maps\obj2F.asm"
0000BE48                            ; ---------------------------------------------------------------------------
0000BE48                            ; Sprite mappings - large moving platforms (MZ)
0000BE48                            ; ---------------------------------------------------------------------------
0000BE48 0000                       		dc.w byte_B2DA-Map_obj2F
0000BE4A 0000                       		dc.w byte_B31C-Map_obj2F
0000BE4C 0000                       		dc.w byte_B34F-Map_obj2F
0000BE4E 0D                         byte_B2DA:	dc.b $D
0000BE4F D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BE54 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BE59 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BE5E D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BE63 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BE68 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE6D D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BE72 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BE77 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BE7C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BE81 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BE86 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BE8B F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BE90 0A                         byte_B31C:	dc.b $A
0000BE91 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BE96 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BE9B 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BEA0 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BEA5 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BEAA F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BEAF C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BEB4 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BEB9 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BEBE E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BEC3 06                         byte_B34F:	dc.b 6
0000BEC4 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BEC9 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BECE 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BED3 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BED8 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BEDD 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BEE2                            		even
0000BEE2                            		even
0000BEE2                            
0000BEE2                            ; ---------------------------------------------------------------------------
0000BEE2                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BEE2                            ; ---------------------------------------------------------------------------
0000BEE2                            Map_obj14:
0000BEE2                            	include "_maps\obj14.asm"
0000BEE2                            ; --------------------------------------------------------------------------------
0000BEE2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BEE2                            ; --------------------------------------------------------------------------------
0000BEE2                            
0000BEE2                            SME_C6wT7:	
0000BEE2 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BEE6 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BEEA 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BEEE 01                         SME_C6wT7_C:	dc.b 1	
0000BEEF E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BEF4 01                         SME_C6wT7_12:	dc.b 1	
0000BEF5 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BEFA 02                         SME_C6wT7_18:	dc.b 2	
0000BEFB EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BF00 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BF05 01                         SME_C6wT7_23:	dc.b 1	
0000BF06 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BF0B 01                         SME_C6wT7_29:	dc.b 1	
0000BF0C F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BF11 01                         SME_C6wT7_2F:	dc.b 1	
0000BF12 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BF18 00                         		even
0000BF18 00                         		even
0000BF18                            
0000BF18                            ; ===========================================================================
0000BF18                            ; ---------------------------------------------------------------------------
0000BF18                            ; Object 30 - large green glassy blocks	(MZ)
0000BF18                            ; ---------------------------------------------------------------------------
0000BF18                            
0000BF18                            Obj30:					; XREF: Obj_Index
0000BF18 7000                       		moveq	#0,d0
0000BF1A 1028 0024                  		move.b	$24(a0),d0
0000BF1E 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BF22 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BF26 3028 0008                  		move.w	8(a0),d0
0000BF2A 0240 FF80                  		andi.w	#$FF80,d0
0000BF2E 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF32 0441 0080                  		subi.w	#$80,d1
0000BF36 0241 FF80                  		andi.w	#$FF80,d1
0000BF3A 9041                       		sub.w	d1,d0
0000BF3C 0C40 0280                  		cmpi.w	#$280,d0
0000BF40 6200 0000                  		bhi.w	Obj30_Delete
0000BF44 6000 0000                  		bra.w	DisplaySprite
0000BF48                            ; ===========================================================================
0000BF48                            
0000BF48                            Obj30_Delete:
0000BF48 6000 0000                  		bra.w	DeleteObject
0000BF4C                            ; ===========================================================================
0000BF4C 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BF4E 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BF50 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BF52 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BF54 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BF56                            
0000BF56 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BF59 0400 01                    		dc.b 4,	0, 1
0000BF5C 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BF5F 0800 01                    		dc.b 8,	0, 1
0000BF62                            ; ===========================================================================
0000BF62                            
0000BF62                            Obj30_Main:				; XREF: Obj30_Index
0000BF62 45F9 0000 BF56             		lea	(Obj30_Vars1).l,a2
0000BF68 7201                       		moveq	#1,d1
0000BF6A 117C 0048 0016             		move.b	#$48,$16(a0)
0000BF70 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BF76 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BF78 45F9 0000 BF5C             		lea	(Obj30_Vars2).l,a2
0000BF7E 7201                       		moveq	#1,d1
0000BF80 117C 0038 0016             		move.b	#$38,$16(a0)
0000BF86                            
0000BF86                            loc_B40C:
0000BF86 2248                       		movea.l	a0,a1
0000BF88 6000                       		bra.s	Obj30_Load	; load main object
0000BF8A                            ; ===========================================================================
0000BF8A                            
0000BF8A                            Obj30_Loop:
0000BF8A 6100 0000                  		bsr.w	SingleObjLoad2
0000BF8E 6600                       		bne.s	loc_B480
0000BF90                            
0000BF90                            Obj30_Load:				; XREF: Obj30_Main
0000BF90 135A 0024                  		move.b	(a2)+,$24(a1)
0000BF94 12BC 0030                  		move.b	#$30,0(a1)
0000BF98 3368 0008 0008             		move.w	8(a0),8(a1)
0000BF9E 101A                       		move.b	(a2)+,d0
0000BFA0 4880                       		ext.w	d0
0000BFA2 D068 000C                  		add.w	$C(a0),d0
0000BFA6 3340 000C                  		move.w	d0,$C(a1)
0000BFAA 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BFB2 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BFB8 137C 0004 0001             		move.b	#4,1(a1)
0000BFBE 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BFC4 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BFCA 137C 0020 0019             		move.b	#$20,$19(a1)
0000BFD0 137C 0004 0018             		move.b	#4,$18(a1)
0000BFD6 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BFDA 2348 003C                  		move.l	a0,$3C(a1)
0000BFDE 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BFE2                            
0000BFE2 137C 0010 0019             		move.b	#$10,$19(a1)
0000BFE8 137C 0003 0018             		move.b	#3,$18(a1)
0000BFEE 5029 0028                  		addq.b	#8,$28(a1)
0000BFF2 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BFF8                            
0000BFF8                            loc_B480:
0000BFF8 317C 0090 0032             		move.w	#$90,$32(a0)
0000BFFE 08E8 0004 0001             		bset	#4,1(a0)
0000C004                            
0000C004                            Obj30_Block012:				; XREF: Obj30_Index
0000C004 6100 0000                  		bsr.w	Obj30_Types
0000C008 323C 002B                  		move.w	#$2B,d1
0000C00C 343C 0048                  		move.w	#$48,d2
0000C010 363C 0049                  		move.w	#$49,d3
0000C014 3828 0008                  		move.w	8(a0),d4
0000C018 6000 0000                  		bra.w	SolidObject
0000C01C                            ; ===========================================================================
0000C01C                            
0000C01C                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C01C 2268 003C                  		movea.l	$3C(a0),a1
0000C020 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C026 6000 0000                  		bra.w	Obj30_Types
0000C02A                            ; ===========================================================================
0000C02A                            
0000C02A                            Obj30_Block34:				; XREF: Obj30_Index
0000C02A 6100 0000                  		bsr.w	Obj30_Types
0000C02E 323C 002B                  		move.w	#$2B,d1
0000C032 343C 0038                  		move.w	#$38,d2
0000C036 363C 0039                  		move.w	#$39,d3
0000C03A 3828 0008                  		move.w	8(a0),d4
0000C03E 6000 0000                  		bra.w	SolidObject
0000C042                            ; ===========================================================================
0000C042                            
0000C042                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C042 2268 003C                  		movea.l	$3C(a0),a1
0000C046 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C04C 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C052 6000 0002                  		bra.w	*+4
0000C056                            
0000C056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C056                            
0000C056                            
0000C056                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C056 7000                       		moveq	#0,d0
0000C058 1028 0028                  		move.b	$28(a0),d0
0000C05C 0240 0007                  		andi.w	#7,d0
0000C060 D040                       		add.w	d0,d0
0000C062 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C066 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C06A                            ; End of function Obj30_Types
0000C06A                            
0000C06A                            ; ===========================================================================
0000C06A 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C06C 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C06E 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C070 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C072 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C074                            ; ===========================================================================
0000C074                            
0000C074                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C074 4E75                       		rts	
0000C076                            ; ===========================================================================
0000C076                            
0000C076                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C076 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C07A 323C 0040                  		move.w	#$40,d1
0000C07E 6000                       		bra.s	loc_B514
0000C080                            ; ===========================================================================
0000C080                            
0000C080                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C080 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C084 323C 0040                  		move.w	#$40,d1
0000C088 4440                       		neg.w	d0
0000C08A D041                       		add.w	d1,d0
0000C08C                            
0000C08C                            loc_B514:				; XREF: Obj30_Type01
0000C08C 0828 0003 0028             		btst	#3,$28(a0)
0000C092 6700                       		beq.s	loc_B526
0000C094 4440                       		neg.w	d0
0000C096 D041                       		add.w	d1,d0
0000C098 E208                       		lsr.b	#1,d0
0000C09A 0640 0020                  		addi.w	#$20,d0
0000C09E                            
0000C09E                            loc_B526:
0000C09E 6000 0000                  		bra.w	loc_B5EE
0000C0A2                            ; ===========================================================================
0000C0A2                            
0000C0A2                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C0A2 0828 0003 0028             		btst	#3,$28(a0)
0000C0A8 6700                       		beq.s	loc_B53E
0000C0AA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C0AE 0440 0010                  		subi.w	#$10,d0
0000C0B2 6000 0000                  		bra.w	loc_B5EE
0000C0B6                            ; ===========================================================================
0000C0B6                            
0000C0B6                            loc_B53E:
0000C0B6 0828 0003 0022             		btst	#3,$22(a0)
0000C0BC 6600                       		bne.s	loc_B54E
0000C0BE 08A8 0000 0034             		bclr	#0,$34(a0)
0000C0C4 6000                       		bra.s	loc_B582
0000C0C6                            ; ===========================================================================
0000C0C6                            
0000C0C6                            loc_B54E:
0000C0C6 4A28 0034                  		tst.b	$34(a0)
0000C0CA 6600                       		bne.s	loc_B582
0000C0CC 117C 0001 0034             		move.b	#1,$34(a0)
0000C0D2 08E8 0000 0035             		bset	#0,$35(a0)
0000C0D8 6700                       		beq.s	loc_B582
0000C0DA 08E8 0007 0034             		bset	#7,$34(a0)
0000C0E0 317C 0010 0036             		move.w	#$10,$36(a0)
0000C0E6 117C 000A 0038             		move.b	#$A,$38(a0)
0000C0EC 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C0F2 6600                       		bne.s	loc_B582
0000C0F4 317C 0040 0036             		move.w	#$40,$36(a0)
0000C0FA                            
0000C0FA                            loc_B582:
0000C0FA 4A28 0034                  		tst.b	$34(a0)
0000C0FE 6A00                       		bpl.s	loc_B5AA
0000C100 4A28 0038                  		tst.b	$38(a0)
0000C104 6700                       		beq.s	loc_B594
0000C106 5328 0038                  		subq.b	#1,$38(a0)
0000C10A 6600                       		bne.s	loc_B5AA
0000C10C                            
0000C10C                            loc_B594:
0000C10C 4A68 0032                  		tst.w	$32(a0)
0000C110 6700                       		beq.s	loc_B5A4
0000C112 5368 0032                  		subq.w	#1,$32(a0)
0000C116 5368 0036                  		subq.w	#1,$36(a0)
0000C11A 6600                       		bne.s	loc_B5AA
0000C11C                            
0000C11C                            loc_B5A4:
0000C11C 08A8 0007 0034             		bclr	#7,$34(a0)
0000C122                            
0000C122                            loc_B5AA:
0000C122 3028 0032                  		move.w	$32(a0),d0
0000C126 6000                       		bra.s	loc_B5EE
0000C128                            ; ===========================================================================
0000C128                            
0000C128                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C128 0828 0003 0028             		btst	#3,$28(a0)
0000C12E 6700                       		beq.s	Obj30_ChkSwitch
0000C130 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C134 0440 0010                  		subi.w	#$10,d0
0000C138 6000                       		bra.s	loc_B5EE
0000C13A                            ; ===========================================================================
0000C13A                            
0000C13A                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C13A 4A28 0034                  		tst.b	$34(a0)
0000C13E 6600                       		bne.s	loc_B5E0
0000C140 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C144 7000                       		moveq	#0,d0
0000C146 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C14A E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C14C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C150 6700                       		beq.s	loc_B5EA	; if not, branch
0000C152 117C 0001 0034             		move.b	#1,$34(a0)
0000C158                            
0000C158                            loc_B5E0:
0000C158 4A68 0032                  		tst.w	$32(a0)
0000C15C 6700                       		beq.s	loc_B5EA
0000C15E 5568 0032                  		subq.w	#2,$32(a0)
0000C162                            
0000C162                            loc_B5EA:
0000C162 3028 0032                  		move.w	$32(a0),d0
0000C166                            
0000C166                            loc_B5EE:
0000C166 3228 0030                  		move.w	$30(a0),d1
0000C16A 9240                       		sub.w	d0,d1
0000C16C 3141 000C                  		move.w	d1,$C(a0)
0000C170 4E75                       		rts	
0000C172                            ; ===========================================================================
0000C172                            ; ---------------------------------------------------------------------------
0000C172                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C172                            ; ---------------------------------------------------------------------------
0000C172                            Map_obj30:
0000C172                            	include "_maps\obj30.asm"
0000C172                            ; ---------------------------------------------------------------------------
0000C172                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C172                            ; ---------------------------------------------------------------------------
0000C172 0000                       		dc.w byte_B600-Map_obj30
0000C174 0000                       		dc.w byte_B63D-Map_obj30
0000C176 0000                       		dc.w byte_B648-Map_obj30
0000C178 0C                         byte_B600:	dc.b $C
0000C179 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C17E B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C183 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C188 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C18D E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C192 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C197 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C19C 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C1A1 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C1A6 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C1AB 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C1B0 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C1B5 02                         byte_B63D:	dc.b 2
0000C1B6 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C1BB 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C1C0 0A                         byte_B648:	dc.b $A
0000C1C1 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C1C6 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C1CB D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C1D0 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C1D5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C1DA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C1DF 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C1E4 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C1E9 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C1EE 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C1F4 00                         		even
0000C1F4 00                         		even
0000C1F4                            
0000C1F4                            ; ===========================================================================
0000C1F4                            ; ---------------------------------------------------------------------------
0000C1F4                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C1F4                            ; ---------------------------------------------------------------------------
0000C1F4                            
0000C1F4                            Obj31:					; XREF: Obj_Index
0000C1F4 7000                       		moveq	#0,d0
0000C1F6 1028 0024                  		move.b	$24(a0),d0
0000C1FA 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C1FE 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C202                            ; ===========================================================================
0000C202 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C204 0000                       		dc.w loc_B798-Obj31_Index
0000C206 0000                       		dc.w loc_B7FE-Obj31_Index
0000C208 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C20A 0000                       		dc.w loc_B7E2-Obj31_Index
0000C20C                            
0000C20C 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C20E 0100                       		dc.b 1,	0
0000C210                            
0000C210 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C213 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C216 08CC 03                    		dc.b 8,	$CC, 3
0000C219 06F0 02                    		dc.b 6,	$F0, 2
0000C21C                            
0000C21C 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C220 5000 7800                  		dc.w $5000, $7800
0000C224 3800 5800                  		dc.w $3800, $5800
0000C228 B800                       		dc.w $B800
0000C22A                            ; ===========================================================================
0000C22A                            
0000C22A                            Obj31_Main:				; XREF: Obj31_Index
0000C22A 7000                       		moveq	#0,d0
0000C22C 1028 0028                  		move.b	$28(a0),d0
0000C230 6A00                       		bpl.s	loc_B6CE
0000C232 0240 007F                  		andi.w	#$7F,d0
0000C236 D040                       		add.w	d0,d0
0000C238 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C23C 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C240 101A                       		move.b	(a2)+,d0
0000C242 1140 0028                  		move.b	d0,$28(a0)
0000C246                            
0000C246                            loc_B6CE:
0000C246 0200 000F                  		andi.b	#$F,d0
0000C24A D040                       		add.w	d0,d0
0000C24C 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C250 4A40                       		tst.w	d0
0000C252 6600                       		bne.s	loc_B6E0
0000C254 3142 0032                  		move.w	d2,$32(a0)
0000C258                            
0000C258                            loc_B6E0:
0000C258 45F9 0000 C210             		lea	(Obj31_Var).l,a2
0000C25E 2248                       		movea.l	a0,a1
0000C260 7203                       		moveq	#3,d1
0000C262 6000                       		bra.s	Obj31_MakeStomper
0000C264                            ; ===========================================================================
0000C264                            
0000C264                            Obj31_Loop:
0000C264 6100 0000                  		bsr.w	SingleObjLoad2
0000C268 6600 0000                  		bne.w	Obj31_SetSize
0000C26C                            
0000C26C                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C26C 135A 0024                  		move.b	(a2)+,$24(a1)
0000C270 12BC 0031                  		move.b	#$31,0(a1)
0000C274 3368 0008 0008             		move.w	8(a0),8(a1)
0000C27A 101A                       		move.b	(a2)+,d0
0000C27C 4880                       		ext.w	d0
0000C27E D068 000C                  		add.w	$C(a0),d0
0000C282 3340 000C                  		move.w	d0,$C(a1)
0000C286 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C28E 337C 0300 0002             		move.w	#$300,2(a1)
0000C294 137C 0004 0001             		move.b	#4,1(a1)
0000C29A 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C2A0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C2A6 137C 0010 0019             		move.b	#$10,$19(a1)
0000C2AC 3342 0034                  		move.w	d2,$34(a1)
0000C2B0 137C 0004 0018             		move.b	#4,$18(a1)
0000C2B6 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C2BA 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C2C0 6600                       		bne.s	loc_B76A
0000C2C2 5341                       		subq.w	#1,d1
0000C2C4 1028 0028                  		move.b	$28(a0),d0
0000C2C8 0240 00F0                  		andi.w	#$F0,d0
0000C2CC 0C40 0020                  		cmpi.w	#$20,d0
0000C2D0 679A                       		beq.s	Obj31_MakeStomper
0000C2D2 137C 0038 0019             		move.b	#$38,$19(a1)
0000C2D8 137C 0090 0020             		move.b	#$90,$20(a1)
0000C2DE 5241                       		addq.w	#1,d1
0000C2E0                            
0000C2E0                            loc_B76A:
0000C2E0 2348 003C                  		move.l	a0,$3C(a1)
0000C2E4 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C2E8                            
0000C2E8 137C 0003 0018             		move.b	#3,$18(a1)
0000C2EE                            
0000C2EE                            Obj31_SetSize:
0000C2EE 7000                       		moveq	#0,d0
0000C2F0 1028 0028                  		move.b	$28(a0),d0
0000C2F4 E648                       		lsr.w	#3,d0
0000C2F6 0200 000E                  		andi.b	#$E,d0
0000C2FA 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C2FE 115A 0019                  		move.b	(a2)+,$19(a0)
0000C302 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C306 6000                       		bra.s	loc_B798
0000C308                            ; ===========================================================================
0000C308 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C30A 3009                       		dc.b $30, 9
0000C30C 100A                       		dc.b $10, $A
0000C30E                            ; ===========================================================================
0000C30E                            
0000C30E                            loc_B798:				; XREF: Obj31_Index
0000C30E 6100 0000                  		bsr.w	Obj31_Types
0000C312 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C318 7200                       		moveq	#0,d1
0000C31A 1228 0019                  		move.b	$19(a0),d1
0000C31E 0641 000B                  		addi.w	#$B,d1
0000C322 343C 000C                  		move.w	#$C,d2
0000C326 363C 000D                  		move.w	#$D,d3
0000C32A 3828 0008                  		move.w	8(a0),d4
0000C32E 6100 0000                  		bsr.w	SolidObject
0000C332 0828 0003 0022             		btst	#3,$22(a0)
0000C338 6700                       		beq.s	Obj31_Display
0000C33A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C340 6400                       		bcc.s	Obj31_Display
0000C342 2448                       		movea.l	a0,a2
0000C344 41F8 D000                  		lea	($FFFFD000).w,a0
0000C348 4EB9 0000 0000             		jsr	KillSonic
0000C34E 204A                       		movea.l	a2,a0
0000C350                            
0000C350                            Obj31_Display:
0000C350 6100 0000                  		bsr.w	DisplaySprite
0000C354 6000 0000                  		bra.w	Obj31_ChkDel
0000C358                            ; ===========================================================================
0000C358                            
0000C358                            loc_B7E2:				; XREF: Obj31_Index
0000C358 117C 0080 0016             		move.b	#$80,$16(a0)
0000C35E 08E8 0004 0001             		bset	#4,1(a0)
0000C364 2268 003C                  		movea.l	$3C(a0),a1
0000C368 1029 0032                  		move.b	$32(a1),d0
0000C36C EA08                       		lsr.b	#5,d0
0000C36E 5600                       		addq.b	#3,d0
0000C370 1140 001A                  		move.b	d0,$1A(a0)
0000C374                            
0000C374                            loc_B7FE:				; XREF: Obj31_Index
0000C374 2268 003C                  		movea.l	$3C(a0),a1
0000C378 7000                       		moveq	#0,d0
0000C37A 1029 0032                  		move.b	$32(a1),d0
0000C37E D068 0030                  		add.w	$30(a0),d0
0000C382 3140 000C                  		move.w	d0,$C(a0)
0000C386                            
0000C386                            Obj31_Display2:				; XREF: Obj31_Index
0000C386 6100 0000                  		bsr.w	DisplaySprite
0000C38A                            
0000C38A                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C38A 3028 0008                  		move.w	8(a0),d0
0000C38E 0240 FF80                  		andi.w	#$FF80,d0
0000C392 3238 F700                  		move.w	($FFFFF700).w,d1
0000C396 0441 0080                  		subi.w	#$80,d1
0000C39A 0241 FF80                  		andi.w	#$FF80,d1
0000C39E 9041                       		sub.w	d1,d0
0000C3A0 0C40 0280                  		cmpi.w	#$280,d0
0000C3A4 6200 0000                  		bhi.w	DeleteObject
0000C3A8 4E75                       		rts	
0000C3AA                            ; ===========================================================================
0000C3AA                            
0000C3AA                            Obj31_Types:				; XREF: loc_B798
0000C3AA 1028 0028                  		move.b	$28(a0),d0
0000C3AE 0240 000F                  		andi.w	#$F,d0
0000C3B2 D040                       		add.w	d0,d0
0000C3B4 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C3B8 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C3BC                            ; ===========================================================================
0000C3BC 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C3BE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C3C0 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C3C2 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C3C4 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C3C6 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C3C8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C3CA                            ; ===========================================================================
0000C3CA                            
0000C3CA                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C3CA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C3CE 7000                       		moveq	#0,d0
0000C3D0 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C3D4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C3D8 6700                       		beq.s	loc_B8A8	; if not, branch
0000C3DA 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C3DE 6A00                       		bpl.s	loc_B872
0000C3E0 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C3E6 6700                       		beq.s	loc_B8A0
0000C3E8                            
0000C3E8                            loc_B872:
0000C3E8 4A68 0032                  		tst.w	$32(a0)
0000C3EC 6700                       		beq.s	loc_B8A0
0000C3EE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C3F2 0200 000F                  		andi.b	#$F,d0
0000C3F6 6600                       		bne.s	loc_B892
0000C3F8 4A28 0001                  		tst.b	1(a0)
0000C3FC 6A00                       		bpl.s	loc_B892
0000C3FE 303C 00C7                  		move.w	#$C7,d0
0000C402 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C408                            
0000C408                            loc_B892:
0000C408 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C40E 6400                       		bcc.s	Obj31_Restart
0000C410 317C 0000 0032             		move.w	#0,$32(a0)
0000C416                            
0000C416                            loc_B8A0:
0000C416 317C 0000 0012             		move.w	#0,$12(a0)
0000C41C 6000                       		bra.s	Obj31_Restart
0000C41E                            ; ===========================================================================
0000C41E                            
0000C41E                            loc_B8A8:				; XREF: Obj31_Type00
0000C41E 3228 0034                  		move.w	$34(a0),d1
0000C422 B268 0032                  		cmp.w	$32(a0),d1
0000C426 6700                       		beq.s	Obj31_Restart
0000C428 3028 0012                  		move.w	$12(a0),d0
0000C42C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C432 D168 0032                  		add.w	d0,$32(a0)
0000C436 B268 0032                  		cmp.w	$32(a0),d1
0000C43A 6200                       		bhi.s	Obj31_Restart
0000C43C 3141 0032                  		move.w	d1,$32(a0)
0000C440 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C446 4A28 0001                  		tst.b	1(a0)
0000C44A 6A00                       		bpl.s	Obj31_Restart
0000C44C 303C 00BD                  		move.w	#$BD,d0
0000C450 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C456                            
0000C456                            Obj31_Restart:
0000C456 7000                       		moveq	#0,d0
0000C458 1028 0032                  		move.b	$32(a0),d0
0000C45C D068 0030                  		add.w	$30(a0),d0
0000C460 3140 000C                  		move.w	d0,$C(a0)
0000C464 4E75                       		rts	
0000C466                            ; ===========================================================================
0000C466                            
0000C466                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C466 4A68 0036                  		tst.w	$36(a0)
0000C46A 6700                       		beq.s	loc_B938
0000C46C 4A68 0038                  		tst.w	$38(a0)
0000C470 6700                       		beq.s	loc_B902
0000C472 5368 0038                  		subq.w	#1,$38(a0)
0000C476 6000                       		bra.s	loc_B97C
0000C478                            ; ===========================================================================
0000C478                            
0000C478                            loc_B902:
0000C478 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C47C 0200 000F                  		andi.b	#$F,d0
0000C480 6600                       		bne.s	loc_B91C
0000C482 4A28 0001                  		tst.b	1(a0)
0000C486 6A00                       		bpl.s	loc_B91C
0000C488 303C 00C7                  		move.w	#$C7,d0
0000C48C 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C492                            
0000C492                            loc_B91C:
0000C492 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C498 6400                       		bcc.s	loc_B97C
0000C49A 317C 0000 0032             		move.w	#0,$32(a0)
0000C4A0 317C 0000 0012             		move.w	#0,$12(a0)
0000C4A6 317C 0000 0036             		move.w	#0,$36(a0)
0000C4AC 6000                       		bra.s	loc_B97C
0000C4AE                            ; ===========================================================================
0000C4AE                            
0000C4AE                            loc_B938:				; XREF: Obj31_Type01
0000C4AE 3228 0034                  		move.w	$34(a0),d1
0000C4B2 B268 0032                  		cmp.w	$32(a0),d1
0000C4B6 6700                       		beq.s	loc_B97C
0000C4B8 3028 0012                  		move.w	$12(a0),d0
0000C4BC 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C4C2 D168 0032                  		add.w	d0,$32(a0)
0000C4C6 B268 0032                  		cmp.w	$32(a0),d1
0000C4CA 6200                       		bhi.s	loc_B97C
0000C4CC 3141 0032                  		move.w	d1,$32(a0)
0000C4D0 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C4D6 317C 0001 0036             		move.w	#1,$36(a0)
0000C4DC 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C4E2 4A28 0001                  		tst.b	1(a0)
0000C4E6 6A00                       		bpl.s	loc_B97C
0000C4E8 303C 00BD                  		move.w	#$BD,d0
0000C4EC 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C4F2                            
0000C4F2                            loc_B97C:
0000C4F2 6000 FF62                  		bra.w	Obj31_Restart
0000C4F6                            ; ===========================================================================
0000C4F6                            
0000C4F6                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C4F6 3038 D008                  		move.w	($FFFFD008).w,d0
0000C4FA 9068 0008                  		sub.w	8(a0),d0
0000C4FE 6400                       		bcc.s	loc_B98C
0000C500 4440                       		neg.w	d0
0000C502                            
0000C502                            loc_B98C:
0000C502 0C40 0090                  		cmpi.w	#$90,d0
0000C506 6400                       		bcc.s	loc_B996
0000C508 5228 0028                  		addq.b	#1,$28(a0)
0000C50C                            
0000C50C                            loc_B996:
0000C50C 6000 FF48                  		bra.w	Obj31_Restart
0000C510                            ; ===========================================================================
0000C510                            ; ---------------------------------------------------------------------------
0000C510                            ; Object 45 - spiked metal block from beta version (MZ)
0000C510                            ; ---------------------------------------------------------------------------
0000C510                            
0000C510                            Obj45:					; XREF: Obj_Index
0000C510 7000                       		moveq	#0,d0
0000C512 1028 0024                  		move.b	$24(a0),d0
0000C516 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C51A 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C51E                            ; ===========================================================================
0000C51E 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C520 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C522 0000                       		dc.w loc_BA8E-Obj45_Index
0000C524 0000                       		dc.w Obj45_Display-Obj45_Index
0000C526 0000                       		dc.w loc_BA7A-Obj45_Index
0000C528                            
0000C528 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C52B 04E4 01                    		dc.b	4, $E4,	  1
0000C52E 0834 03                    		dc.b	8, $34,	  3
0000C531 0628 02                    		dc.b	6, $28,	  2
0000C534                            
0000C534 3800                       word_B9BE:	dc.w $3800
0000C536 A000                       		dc.w -$6000
0000C538 5000                       		dc.w $5000
0000C53A                            ; ===========================================================================
0000C53A                            
0000C53A                            Obj45_Main:				; XREF: Obj45_Index
0000C53A 7000                       		moveq	#0,d0
0000C53C 1028 0028                  		move.b	$28(a0),d0
0000C540 D040                       		add.w	d0,d0
0000C542 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C546 45F9 0000 C528             		lea	(Obj45_Var).l,a2
0000C54C 2248                       		movea.l	a0,a1
0000C54E 7203                       		moveq	#3,d1
0000C550 6000                       		bra.s	Obj45_Load
0000C552                            ; ===========================================================================
0000C552                            
0000C552                            Obj45_Loop:
0000C552 6100 0000                  		bsr.w	SingleObjLoad2
0000C556 6600                       		bne.s	loc_BA52
0000C558                            
0000C558                            Obj45_Load:				; XREF: Obj45_Main
0000C558 135A 0024                  		move.b	(a2)+,$24(a1)
0000C55C 12BC 0045                  		move.b	#$45,0(a1)
0000C560 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C566 101A                       		move.b	(a2)+,d0
0000C568 4880                       		ext.w	d0
0000C56A D068 0008                  		add.w	8(a0),d0
0000C56E 3340 0008                  		move.w	d0,8(a1)
0000C572 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C57A 337C 0300 0002             		move.w	#$300,2(a1)
0000C580 137C 0004 0001             		move.b	#4,1(a1)
0000C586 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C58C 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C592 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C598 137C 0020 0019             		move.b	#$20,$19(a1)
0000C59E 3342 0034                  		move.w	d2,$34(a1)
0000C5A2 137C 0004 0018             		move.b	#4,$18(a1)
0000C5A8 0C12 0001                  		cmpi.b	#1,(a2)
0000C5AC 6600                       		bne.s	loc_BA40
0000C5AE 137C 0091 0020             		move.b	#$91,$20(a1)
0000C5B4                            
0000C5B4                            loc_BA40:
0000C5B4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C5B8 2348 003C                  		move.l	a0,$3C(a1)
0000C5BC 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C5C0                            
0000C5C0 137C 0003 0018             		move.b	#3,$18(a1)
0000C5C6                            
0000C5C6                            loc_BA52:
0000C5C6 117C 0010 0019             		move.b	#$10,$19(a0)
0000C5CC                            
0000C5CC                            Obj45_Solid:				; XREF: Obj45_Index
0000C5CC 3F28 0008                  		move.w	8(a0),-(sp)
0000C5D0 6100 0000                  		bsr.w	Obj45_Move
0000C5D4 323C 0017                  		move.w	#$17,d1
0000C5D8 343C 0020                  		move.w	#$20,d2
0000C5DC 363C 0020                  		move.w	#$20,d3
0000C5E0 381F                       		move.w	(sp)+,d4
0000C5E2 6100 0000                  		bsr.w	SolidObject
0000C5E6 6100 0000                  		bsr.w	DisplaySprite
0000C5EA 6000 0000                  		bra.w	Obj45_ChkDel
0000C5EE                            ; ===========================================================================
0000C5EE                            
0000C5EE                            loc_BA7A:				; XREF: Obj45_Index
0000C5EE 2268 003C                  		movea.l	$3C(a0),a1
0000C5F2 1029 0032                  		move.b	$32(a1),d0
0000C5F6 0600 0010                  		addi.b	#$10,d0
0000C5FA EA08                       		lsr.b	#5,d0
0000C5FC 5600                       		addq.b	#3,d0
0000C5FE 1140 001A                  		move.b	d0,$1A(a0)
0000C602                            
0000C602                            loc_BA8E:				; XREF: Obj45_Index
0000C602 2268 003C                  		movea.l	$3C(a0),a1
0000C606 7000                       		moveq	#0,d0
0000C608 1029 0032                  		move.b	$32(a1),d0
0000C60C 4440                       		neg.w	d0
0000C60E D068 0030                  		add.w	$30(a0),d0
0000C612 3140 0008                  		move.w	d0,8(a0)
0000C616                            
0000C616                            Obj45_Display:				; XREF: Obj45_Index
0000C616 6100 0000                  		bsr.w	DisplaySprite
0000C61A                            
0000C61A                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C61A 3028 003A                  		move.w	$3A(a0),d0
0000C61E 0240 FF80                  		andi.w	#$FF80,d0
0000C622 3238 F700                  		move.w	($FFFFF700).w,d1
0000C626 0441 0080                  		subi.w	#$80,d1
0000C62A 0241 FF80                  		andi.w	#$FF80,d1
0000C62E 9041                       		sub.w	d1,d0
0000C630 0C40 0280                  		cmpi.w	#$280,d0
0000C634 6200 0000                  		bhi.w	DeleteObject
0000C638 4E75                       		rts	
0000C63A                            
0000C63A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C63A                            
0000C63A                            
0000C63A                            Obj45_Move:				; XREF: Obj45_Solid
0000C63A 7000                       		moveq	#0,d0
0000C63C 1028 0028                  		move.b	$28(a0),d0
0000C640 D040                       		add.w	d0,d0
0000C642 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C646 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C64A                            ; End of function Obj45_Move
0000C64A                            
0000C64A                            ; ===========================================================================
0000C64A 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C64C 0000                       		dc.w loc_BADA-off_BAD6
0000C64E                            ; ===========================================================================
0000C64E                            
0000C64E                            loc_BADA:				; XREF: off_BAD6
0000C64E 4A68 0036                  		tst.w	$36(a0)
0000C652 6700                       		beq.s	loc_BB08
0000C654 4A68 0038                  		tst.w	$38(a0)
0000C658 6700                       		beq.s	loc_BAEC
0000C65A 5368 0038                  		subq.w	#1,$38(a0)
0000C65E 6000                       		bra.s	loc_BB3C
0000C660                            ; ===========================================================================
0000C660                            
0000C660                            loc_BAEC:
0000C660 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C666 6400                       		bcc.s	loc_BB3C
0000C668 317C 0000 0032             		move.w	#0,$32(a0)
0000C66E 317C 0000 0010             		move.w	#0,$10(a0)
0000C674 317C 0000 0036             		move.w	#0,$36(a0)
0000C67A 6000                       		bra.s	loc_BB3C
0000C67C                            ; ===========================================================================
0000C67C                            
0000C67C                            loc_BB08:				; XREF: loc_BADA
0000C67C 3228 0034                  		move.w	$34(a0),d1
0000C680 B268 0032                  		cmp.w	$32(a0),d1
0000C684 6700                       		beq.s	loc_BB3C
0000C686 3028 0010                  		move.w	$10(a0),d0
0000C68A 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C690 D168 0032                  		add.w	d0,$32(a0)
0000C694 B268 0032                  		cmp.w	$32(a0),d1
0000C698 6200                       		bhi.s	loc_BB3C
0000C69A 3141 0032                  		move.w	d1,$32(a0)
0000C69E 317C 0000 0010             		move.w	#0,$10(a0)
0000C6A4 317C 0001 0036             		move.w	#1,$36(a0)
0000C6AA 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C6B0                            
0000C6B0                            loc_BB3C:
0000C6B0 7000                       		moveq	#0,d0
0000C6B2 1028 0032                  		move.b	$32(a0),d0
0000C6B6 4440                       		neg.w	d0
0000C6B8 D068 0030                  		add.w	$30(a0),d0
0000C6BC 3140 0008                  		move.w	d0,8(a0)
0000C6C0 4E75                       		rts	
0000C6C2                            ; ===========================================================================
0000C6C2                            ; ---------------------------------------------------------------------------
0000C6C2                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C6C2                            ; ---------------------------------------------------------------------------
0000C6C2                            Map_obj31:
0000C6C2                            	include "_maps\obj31.asm"
0000C6C2                            ; ---------------------------------------------------------------------------
0000C6C2                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C6C2                            ; ---------------------------------------------------------------------------
0000C6C2 0000                       		dc.w byte_BB64-Map_obj31
0000C6C4 0000                       		dc.w byte_BB7E-Map_obj31
0000C6C6 0000                       		dc.w byte_BB98-Map_obj31
0000C6C8 0000                       		dc.w byte_BB9E-Map_obj31
0000C6CA 0000                       		dc.w byte_BBA9-Map_obj31
0000C6CC 0000                       		dc.w byte_BBBE-Map_obj31
0000C6CE 0000                       		dc.w byte_BBDD-Map_obj31
0000C6D0 0000                       		dc.w byte_BC06-Map_obj31
0000C6D2 0000                       		dc.w byte_BC06-Map_obj31
0000C6D4 0000                       		dc.w byte_BC39-Map_obj31
0000C6D6 0000                       		dc.w byte_BC53-Map_obj31
0000C6D8 05                         byte_BB64:	dc.b 5
0000C6D9 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C6DE F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C6E3 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C6E8 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C6ED F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C6F2 05                         byte_BB7E:	dc.b 5
0000C6F3 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C6F8 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C6FD F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C702 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C707 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C70C 01                         byte_BB98:	dc.b 1
0000C70D DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C712 02                         byte_BB9E:	dc.b 2
0000C713 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C718 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C71D 04                         byte_BBA9:	dc.b 4
0000C71E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C723 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C728 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C72D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C732 06                         byte_BBBE:	dc.b 6
0000C733 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C738 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C73D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C742 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C747 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C74C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C751 08                         byte_BBDD:	dc.b 8
0000C752 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C757 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C75C C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C761 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C766 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C76B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C770 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C775 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C77A 0A                         byte_BC06:	dc.b $A
0000C77B 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C780 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C785 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C78A B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C78F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C794 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C799 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C79E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C7A3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C7A8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C7AD 05                         byte_BC39:	dc.b 5
0000C7AE F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C7B3 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C7B8 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C7BD F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C7C2 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C7C7 01                         byte_BC53:	dc.b 1
0000C7C8 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C7CE 00                         		even
0000C7CE 00                         		even
0000C7CE                            
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE                            Map_obj45:
0000C7CE                            	include "_maps\obj45.asm"
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE 0000                       		dc.w byte_BC6C-Map_obj45
0000C7D0 0000                       		dc.w byte_BC7C-Map_obj45
0000C7D2 0000                       		dc.w byte_BC8C-Map_obj45
0000C7D4 0000                       		dc.w byte_BC92-Map_obj45
0000C7D6 0000                       		dc.w byte_BC9D-Map_obj45
0000C7D8 0000                       		dc.w byte_BCB2-Map_obj45
0000C7DA 0000                       		dc.w byte_BCD1-Map_obj45
0000C7DC 0000                       		dc.w byte_BCFA-Map_obj45
0000C7DE 0000                       		dc.w byte_BCFA-Map_obj45
0000C7E0 03                         byte_BC6C:	dc.b 3
0000C7E1 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C7E6 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C7EB F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C7F0 03                         byte_BC7C:	dc.b 3
0000C7F1 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C7F6 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C7FB 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C800 01                         byte_BC8C:	dc.b 1
0000C801 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C806 02                         byte_BC92:	dc.b 2
0000C807 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C80C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C811 04                         byte_BC9D:	dc.b 4
0000C812 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C817 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C81C F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C821 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C826 06                         byte_BCB2:	dc.b 6
0000C827 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C82C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C831 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C836 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C83B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C840 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C845 08                         byte_BCD1:	dc.b 8
0000C846 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C84B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C850 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C855 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C85A F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C85F F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C864 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C869 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C86E 08                         byte_BCFA:	dc.b 8
0000C86F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C874 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C879 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C87E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C883 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C888 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C88D F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C892 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C897 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C89C F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C8A2 00                         		even
0000C8A2 00                         		even
0000C8A2                            
0000C8A2                            ; ===========================================================================
0000C8A2                            ; ---------------------------------------------------------------------------
0000C8A2                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C8A2                            ; ---------------------------------------------------------------------------
0000C8A2                            
0000C8A2                            Obj32:					; XREF: Obj_Index
0000C8A2 7000                       		moveq	#0,d0
0000C8A4 1028 0024                  		move.b	$24(a0),d0
0000C8A8 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C8AC 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C8B0                            ; ===========================================================================
0000C8B0 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C8B2 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C8B4                            ; ===========================================================================
0000C8B4                            
0000C8B4                            Obj32_Main:				; XREF: Obj32_Index
0000C8B4 5428 0024                  		addq.b	#2,$24(a0)
0000C8B8 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C8C0 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C8C6 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C8CC 6700                       		beq.s	loc_BD60
0000C8CE 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C8D4                            
0000C8D4                            loc_BD60:
0000C8D4 117C 0004 0001             		move.b	#4,1(a0)
0000C8DA 117C 0010 0019             		move.b	#$10,$19(a0)
0000C8E0 117C 0004 0018             		move.b	#4,$18(a0)
0000C8E6 5668 000C                  		addq.w	#3,$C(a0)
0000C8EA                            
0000C8EA                            Obj32_Pressed:				; XREF: Obj32_Index
0000C8EA 4A28 0001                  		tst.b	1(a0)
0000C8EE 6A00                       		bpl.s	Obj32_Display
0000C8F0 323C 001B                  		move.w	#$1B,d1
0000C8F4 343C 0005                  		move.w	#5,d2
0000C8F8 363C 0005                  		move.w	#5,d3
0000C8FC 3828 0008                  		move.w	8(a0),d4
0000C900 6100 0000                  		bsr.w	SolidObject
0000C904 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C90A 1028 0028                  		move.b	$28(a0),d0
0000C90E 0240 000F                  		andi.w	#$F,d0
0000C912 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C916 47F3 0000                  		lea	(a3,d0.w),a3
0000C91A 7600                       		moveq	#0,d3
0000C91C 0828 0006 0028             		btst	#6,$28(a0)
0000C922 6700                       		beq.s	loc_BDB2
0000C924 7607                       		moveq	#7,d3
0000C926                            
0000C926                            loc_BDB2:
0000C926 4A28 0028                  		tst.b	$28(a0)
0000C92A 6A00                       		bpl.s	loc_BDBE
0000C92C 6100 0000                  		bsr.w	Obj32_MZBlock
0000C930 6600                       		bne.s	loc_BDC8
0000C932                            
0000C932                            loc_BDBE:
0000C932 4A28 0025                  		tst.b	$25(a0)
0000C936 6600                       		bne.s	loc_BDC8
0000C938 0793                       		bclr	d3,(a3)
0000C93A 6000                       		bra.s	loc_BDDE
0000C93C                            ; ===========================================================================
0000C93C                            
0000C93C                            loc_BDC8:
0000C93C 4A13                       		tst.b	(a3)
0000C93E 6600                       		bne.s	loc_BDD6
0000C940 303C 00CD                  		move.w	#$CD,d0
0000C944 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play switch sound
0000C94A                            
0000C94A                            loc_BDD6:
0000C94A 07D3                       		bset	d3,(a3)
0000C94C 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C952                            
0000C952                            loc_BDDE:
0000C952 0828 0005 0028             		btst	#5,$28(a0)
0000C958 6700                       		beq.s	Obj32_Display
0000C95A 5328 001E                  		subq.b	#1,$1E(a0)
0000C95E 6A00                       		bpl.s	Obj32_Display
0000C960 117C 0007 001E             		move.b	#7,$1E(a0)
0000C966 0868 0001 001A             		bchg	#1,$1A(a0)
0000C96C                            
0000C96C                            Obj32_Display:
0000C96C 6100 0000                  		bsr.w	DisplaySprite
0000C970 3028 0008                  		move.w	8(a0),d0
0000C974 0240 FF80                  		andi.w	#$FF80,d0
0000C978 3238 F700                  		move.w	($FFFFF700).w,d1
0000C97C 0441 0080                  		subi.w	#$80,d1
0000C980 0241 FF80                  		andi.w	#$FF80,d1
0000C984 9041                       		sub.w	d1,d0
0000C986 0C40 0280                  		cmpi.w	#$280,d0
0000C98A 6200 0000                  		bhi.w	Obj32_Delete
0000C98E 4E75                       		rts	
0000C990                            ; ===========================================================================
0000C990                            
0000C990                            Obj32_Delete:
0000C990 6100 0000                  		bsr.w	DeleteObject
0000C994 4E75                       		rts	
0000C996                            
0000C996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C996                            
0000C996                            
0000C996                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C996 3F03                       		move.w	d3,-(sp)
0000C998 3428 0008                  		move.w	8(a0),d2
0000C99C 3628 000C                  		move.w	$C(a0),d3
0000C9A0 0442 0010                  		subi.w	#$10,d2
0000C9A4 5143                       		subq.w	#8,d3
0000C9A6 383C 0020                  		move.w	#$20,d4
0000C9AA 3A3C 0010                  		move.w	#$10,d5
0000C9AE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C9B2 3C3C 005F                  		move.w	#$5F,d6
0000C9B6                            
0000C9B6                            Obj32_MZLoop:
0000C9B6 4A29 0001                  		tst.b	1(a1)
0000C9BA 6A00                       		bpl.s	loc_BE4E
0000C9BC 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C9C0 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C9C2                            
0000C9C2                            loc_BE4E:
0000C9C2 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C9C6 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C9CA                            
0000C9CA 361F                       		move.w	(sp)+,d3
0000C9CC 7000                       		moveq	#0,d0
0000C9CE                            
0000C9CE                            locret_BE5A:
0000C9CE 4E75                       		rts	
0000C9D0                            ; ===========================================================================
0000C9D0 1010                       Obj32_MZData:	dc.b $10, $10
0000C9D2                            ; ===========================================================================
0000C9D2                            
0000C9D2                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C9D2 7001                       		moveq	#1,d0
0000C9D4 0240 003F                  		andi.w	#$3F,d0
0000C9D8 D040                       		add.w	d0,d0
0000C9DA 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C9DE 121A                       		move.b	(a2)+,d1
0000C9E0 4881                       		ext.w	d1
0000C9E2 3029 0008                  		move.w	8(a1),d0
0000C9E6 9041                       		sub.w	d1,d0
0000C9E8 9042                       		sub.w	d2,d0
0000C9EA 6400                       		bcc.s	loc_BE80
0000C9EC D241                       		add.w	d1,d1
0000C9EE D041                       		add.w	d1,d0
0000C9F0 6500                       		bcs.s	loc_BE84
0000C9F2 60CE                       		bra.s	loc_BE4E
0000C9F4                            ; ===========================================================================
0000C9F4                            
0000C9F4                            loc_BE80:
0000C9F4 B044                       		cmp.w	d4,d0
0000C9F6 62CA                       		bhi.s	loc_BE4E
0000C9F8                            
0000C9F8                            loc_BE84:
0000C9F8 121A                       		move.b	(a2)+,d1
0000C9FA 4881                       		ext.w	d1
0000C9FC 3029 000C                  		move.w	$C(a1),d0
0000CA00 9041                       		sub.w	d1,d0
0000CA02 9043                       		sub.w	d3,d0
0000CA04 6400                       		bcc.s	loc_BE9A
0000CA06 D241                       		add.w	d1,d1
0000CA08 D041                       		add.w	d1,d0
0000CA0A 6500                       		bcs.s	loc_BE9E
0000CA0C 60B4                       		bra.s	loc_BE4E
0000CA0E                            ; ===========================================================================
0000CA0E                            
0000CA0E                            loc_BE9A:
0000CA0E B045                       		cmp.w	d5,d0
0000CA10 62B0                       		bhi.s	loc_BE4E
0000CA12                            
0000CA12                            loc_BE9E:
0000CA12 361F                       		move.w	(sp)+,d3
0000CA14 7001                       		moveq	#1,d0
0000CA16 4E75                       		rts	
0000CA18                            ; End of function Obj32_MZBlock
0000CA18                            
0000CA18                            ; ===========================================================================
0000CA18                            ; ---------------------------------------------------------------------------
0000CA18                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CA18                            ; ---------------------------------------------------------------------------
0000CA18                            Map_obj32:
0000CA18                            	include "_maps\obj32.asm"
0000CA18                            ; ---------------------------------------------------------------------------
0000CA18                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CA18                            ; ---------------------------------------------------------------------------
0000CA18 0000                       		dc.w byte_BEAC-Map_obj32
0000CA1A 0000                       		dc.w byte_BEB7-Map_obj32
0000CA1C 0000                       		dc.w byte_BEC2-Map_obj32
0000CA1E 0000                       		dc.w byte_BEB7-Map_obj32
0000CA20 02                         byte_BEAC:	dc.b 2
0000CA21 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000CA26 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000CA2B 02                         byte_BEB7:	dc.b 2
0000CA2C F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000CA31 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000CA36 02                         byte_BEC2:	dc.b 2
0000CA37 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000CA3C F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000CA41 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CA46                            		even
0000CA46                            		even
0000CA46                            
0000CA46                            ; ===========================================================================
0000CA46                            ; ---------------------------------------------------------------------------
0000CA46                            ; Object 33 - pushable blocks (MZ, LZ)
0000CA46                            ; ---------------------------------------------------------------------------
0000CA46                            
0000CA46                            Obj33:					; XREF: Obj_Index
0000CA46 7000                       		moveq	#0,d0
0000CA48 1028 0024                  		move.b	$24(a0),d0
0000CA4C 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000CA50 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000CA54                            ; ===========================================================================
0000CA54 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000CA56 0000                       		dc.w loc_BF6E-Obj33_Index
0000CA58 0000                       		dc.w loc_C02C-Obj33_Index
0000CA5A                            
0000CA5A 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000CA5C 4001                       		dc.b $40, 1
0000CA5E                            ; ===========================================================================
0000CA5E                            
0000CA5E                            Obj33_Main:				; XREF: Obj33_Index
0000CA5E 5428 0024                  		addq.b	#2,$24(a0)
0000CA62 117C 000F 0016             		move.b	#$F,$16(a0)
0000CA68 117C 000F 0017             		move.b	#$F,$17(a0)
0000CA6E 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000CA76 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000CA7C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000CA82 6600                       		bne.s	loc_BF16
0000CA84 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000CA8A                            
0000CA8A                            loc_BF16:
0000CA8A 117C 0004 0001             		move.b	#4,1(a0)
0000CA90 117C 0003 0018             		move.b	#3,$18(a0)
0000CA96 3168 0008 0034             		move.w	8(a0),$34(a0)
0000CA9C 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CAA2 7000                       		moveq	#0,d0
0000CAA4 1028 0028                  		move.b	$28(a0),d0
0000CAA8 D040                       		add.w	d0,d0
0000CAAA 0240 000E                  		andi.w	#$E,d0
0000CAAE 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000CAB2 115A 0019                  		move.b	(a2)+,$19(a0)
0000CAB6 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CABA 4A28 0028                  		tst.b	$28(a0)
0000CABE 6700                       		beq.s	Obj33_ChkGone
0000CAC0 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000CAC6                            
0000CAC6                            Obj33_ChkGone:
0000CAC6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CACA 7000                       		moveq	#0,d0
0000CACC 1028 0023                  		move.b	$23(a0),d0
0000CAD0 6700                       		beq.s	loc_BF6E
0000CAD2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CAD8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CADE 6600 0000                  		bne.w	DeleteObject
0000CAE2                            
0000CAE2                            loc_BF6E:				; XREF: Obj33_Index
0000CAE2 4A28 0032                  		tst.b	$32(a0)
0000CAE6 6600 0000                  		bne.w	loc_C046
0000CAEA 7200                       		moveq	#0,d1
0000CAEC 1228 0019                  		move.b	$19(a0),d1
0000CAF0 0641 000B                  		addi.w	#$B,d1
0000CAF4 343C 0010                  		move.w	#$10,d2
0000CAF8 363C 0011                  		move.w	#$11,d3
0000CAFC 3828 0008                  		move.w	8(a0),d4
0000CB00 6100 0000                  		bsr.w	loc_C186
0000CB04 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000CB0A 6600                       		bne.s	loc_BFC6	; if not, branch
0000CB0C 08A8 0007 0028             		bclr	#7,$28(a0)
0000CB12 3028 0008                  		move.w	8(a0),d0
0000CB16 0C40 0A20                  		cmpi.w	#$A20,d0
0000CB1A 6500                       		bcs.s	loc_BFC6
0000CB1C 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000CB20 6400                       		bcc.s	loc_BFC6
0000CB22 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000CB26 0440 001C                  		subi.w	#$1C,d0
0000CB2A 3140 000C                  		move.w	d0,$C(a0)
0000CB2E 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000CB34 08E8 0007 0028             		bset	#7,$28(a0)
0000CB3A                            
0000CB3A                            loc_BFC6:
0000CB3A 3028 0008                  		move.w	8(a0),d0
0000CB3E 0240 FF80                  		andi.w	#$FF80,d0
0000CB42 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB46 0441 0080                  		subi.w	#$80,d1
0000CB4A 0241 FF80                  		andi.w	#$FF80,d1
0000CB4E 9041                       		sub.w	d1,d0
0000CB50 0C40 0280                  		cmpi.w	#$280,d0
0000CB54 6200                       		bhi.s	loc_BFE6
0000CB56 6000 0000                  		bra.w	DisplaySprite
0000CB5A                            ; ===========================================================================
0000CB5A                            
0000CB5A                            loc_BFE6:
0000CB5A 3028 0034                  		move.w	$34(a0),d0
0000CB5E 0240 FF80                  		andi.w	#$FF80,d0
0000CB62 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB66 0441 0080                  		subi.w	#$80,d1
0000CB6A 0241 FF80                  		andi.w	#$FF80,d1
0000CB6E 9041                       		sub.w	d1,d0
0000CB70 0C40 0280                  		cmpi.w	#$280,d0
0000CB74 6200                       		bhi.s	loc_C016
0000CB76 3168 0034 0008             		move.w	$34(a0),8(a0)
0000CB7C 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000CB82 117C 0004 0024             		move.b	#4,$24(a0)
0000CB88 6000                       		bra.s	loc_C02C
0000CB8A                            ; ===========================================================================
0000CB8A                            
0000CB8A                            loc_C016:
0000CB8A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CB8E 7000                       		moveq	#0,d0
0000CB90 1028 0023                  		move.b	$23(a0),d0
0000CB94 6700                       		beq.s	loc_C028
0000CB96 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000CB9C                            
0000CB9C                            loc_C028:
0000CB9C 6000 0000                  		bra.w	DeleteObject
0000CBA0                            ; ===========================================================================
0000CBA0                            
0000CBA0                            loc_C02C:				; XREF: Obj33_Index
0000CBA0 6100 0000                  		bsr.w	ChkObjOnScreen2
0000CBA4 6700                       		beq.s	locret_C044
0000CBA6 117C 0002 0024             		move.b	#2,$24(a0)
0000CBAC 4228 0032                  		clr.b	$32(a0)
0000CBB0 4268 0010                  		clr.w	$10(a0)
0000CBB4 4268 0012                  		clr.w	$12(a0)
0000CBB8                            
0000CBB8                            locret_C044:
0000CBB8 4E75                       		rts	
0000CBBA                            ; ===========================================================================
0000CBBA                            
0000CBBA                            loc_C046:				; XREF: loc_BF6E
0000CBBA 3F28 0008                  		move.w	8(a0),-(sp)
0000CBBE 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000CBC4 6400                       		bcc.s	loc_C056
0000CBC6 6100 0000                  		bsr.w	SpeedToPos
0000CBCA                            
0000CBCA                            loc_C056:
0000CBCA 0828 0001 0022             		btst	#1,$22(a0)
0000CBD0 6700                       		beq.s	loc_C0A0
0000CBD2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CBD8 4EB9 0000 0000             		jsr	ObjHitFloor
0000CBDE 4A41                       		tst.w	d1
0000CBE0 6A00 0000                  		bpl.w	loc_C09E
0000CBE4 D368 000C                  		add.w	d1,$C(a0)
0000CBE8 4268 0012                  		clr.w	$12(a0)
0000CBEC 08A8 0001 0022             		bclr	#1,$22(a0)
0000CBF2 3011                       		move.w	(a1),d0
0000CBF4 0240 03FF                  		andi.w	#$3FF,d0
0000CBF8 0C40 016A                  		cmpi.w	#$16A,d0
0000CBFC 6500                       		bcs.s	loc_C09E
0000CBFE 3028 0030                  		move.w	$30(a0),d0
0000CC02 E640                       		asr.w	#3,d0
0000CC04 3140 0010                  		move.w	d0,$10(a0)
0000CC08 117C 0001 0032             		move.b	#1,$32(a0)
0000CC0E 4268 000E                  		clr.w	$E(a0)
0000CC12                            
0000CC12                            loc_C09E:
0000CC12 6000                       		bra.s	loc_C0E6
0000CC14                            ; ===========================================================================
0000CC14                            
0000CC14                            loc_C0A0:
0000CC14 4A68 0010                  		tst.w	$10(a0)
0000CC18 6700 0000                  		beq.w	loc_C0D6
0000CC1C 6B00                       		bmi.s	loc_C0BC
0000CC1E 7600                       		moveq	#0,d3
0000CC20 1628 0019                  		move.b	$19(a0),d3
0000CC24 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CC2A 4A41                       		tst.w	d1		; has block touched a wall?
0000CC2C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CC2E 6000                       		bra.s	loc_C0E6
0000CC30                            ; ===========================================================================
0000CC30                            
0000CC30                            loc_C0BC:
0000CC30 7600                       		moveq	#0,d3
0000CC32 1628 0019                  		move.b	$19(a0),d3
0000CC36 4643                       		not.w	d3
0000CC38 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CC3E 4A41                       		tst.w	d1		; has block touched a wall?
0000CC40 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CC42 6000                       		bra.s	loc_C0E6
0000CC44                            ; ===========================================================================
0000CC44                            
0000CC44                            Obj33_StopPush:
0000CC44 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000CC48 6000                       		bra.s	loc_C0E6
0000CC4A                            ; ===========================================================================
0000CC4A                            
0000CC4A                            loc_C0D6:
0000CC4A 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000CC52 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CC58 6400                       		bcc.s	loc_C104
0000CC5A                            
0000CC5A                            loc_C0E6:
0000CC5A 7200                       		moveq	#0,d1
0000CC5C 1228 0019                  		move.b	$19(a0),d1
0000CC60 0641 000B                  		addi.w	#$B,d1
0000CC64 343C 0010                  		move.w	#$10,d2
0000CC68 363C 0011                  		move.w	#$11,d3
0000CC6C 381F                       		move.w	(sp)+,d4
0000CC6E 6100 0000                  		bsr.w	loc_C186
0000CC72 6100                       		bsr.s	Obj33_ChkLava
0000CC74 6000 FEC4                  		bra.w	loc_BFC6
0000CC78                            ; ===========================================================================
0000CC78                            
0000CC78                            loc_C104:
0000CC78 381F                       		move.w	(sp)+,d4
0000CC7A 43F8 D000                  		lea	($FFFFD000).w,a1
0000CC7E 08A9 0003 0022             		bclr	#3,$22(a1)
0000CC84 08A8 0003 0022             		bclr	#3,$22(a0)
0000CC8A 6000 FECE                  		bra.w	loc_BFE6
0000CC8E                            ; ===========================================================================
0000CC8E                            
0000CC8E                            Obj33_ChkLava:
0000CC8E 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CC94 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CC96 343C FFE0                  		move.w	#-$20,d2
0000CC9A 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CCA0 6700                       		beq.s	Obj33_LoadLava
0000CCA2 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CCA8 6700                       		beq.s	Obj33_LoadLava
0000CCAA 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CCB0 6700                       		beq.s	Obj33_LoadLava
0000CCB2 4E75                       		rts	
0000CCB4                            ; ===========================================================================
0000CCB4                            
0000CCB4                            Obj33_ChkLava2:
0000CCB4 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CCBA 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CCBC 343C 0020                  		move.w	#$20,d2
0000CCC0 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CCC6 6700                       		beq.s	Obj33_LoadLava
0000CCC8 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CCCE 6700                       		beq.s	Obj33_LoadLava
0000CCD0                            
0000CCD0                            Obj33_NoLava:
0000CCD0 4E75                       		rts	
0000CCD2                            ; ===========================================================================
0000CCD2                            
0000CCD2                            Obj33_LoadLava:
0000CCD2 6100 0000                  		bsr.w	SingleObjLoad
0000CCD6 6600                       		bne.s	locret_C184
0000CCD8 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CCDC 3368 0008 0008             		move.w	8(a0),8(a1)
0000CCE2 D569 0008                  		add.w	d2,8(a1)
0000CCE6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CCEC 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CCF2 2348 003C                  		move.l	a0,$3C(a1)
0000CCF6                            
0000CCF6                            locret_C184:
0000CCF6 4E75                       		rts	
0000CCF8                            ; ===========================================================================
0000CCF8                            
0000CCF8                            loc_C186:				; XREF: loc_BF6E
0000CCF8 1028 0025                  		move.b	$25(a0),d0
0000CCFC 6700 0000                  		beq.w	loc_C218
0000CD00 5500                       		subq.b	#2,d0
0000CD02 6600                       		bne.s	loc_C1AA
0000CD04 6100 B320                  		bsr.w	ExitPlatform
0000CD08 0829 0003 0022             		btst	#3,$22(a1)
0000CD0E 6600                       		bne.s	loc_C1A4
0000CD10 4228 0025                  		clr.b	$25(a0)
0000CD14 4E75                       		rts	
0000CD16                            ; ===========================================================================
0000CD16                            
0000CD16                            loc_C1A4:
0000CD16 3404                       		move.w	d4,d2
0000CD18 6000 B86A                  		bra.w	MvSonicOnPtfm
0000CD1C                            ; ===========================================================================
0000CD1C                            
0000CD1C                            loc_C1AA:
0000CD1C 5500                       		subq.b	#2,d0
0000CD1E 6600                       		bne.s	loc_C1F2
0000CD20 7218                       		moveq	#$18,d1
0000CD22 4EB9 0000 0000             		jsr	ObjectFallCustom
0000CD28 4EB9 0000 0000             		jsr	ObjHitFloor
0000CD2E 4A41                       		tst.w	d1
0000CD30 6A00 0000                  		bpl.w	locret_C1F0
0000CD34 D368 000C                  		add.w	d1,$C(a0)
0000CD38 4268 0012                  		clr.w	$12(a0)
0000CD3C 4228 0025                  		clr.b	$25(a0)
0000CD40 3011                       		move.w	(a1),d0
0000CD42 0240 03FF                  		andi.w	#$3FF,d0
0000CD46 0C40 016A                  		cmpi.w	#$16A,d0
0000CD4A 6500                       		bcs.s	locret_C1F0
0000CD4C 3028 0030                  		move.w	$30(a0),d0
0000CD50 E640                       		asr.w	#3,d0
0000CD52 3140 0010                  		move.w	d0,$10(a0)
0000CD56 117C 0001 0032             		move.b	#1,$32(a0)
0000CD5C 4268 000E                  		clr.w	$E(a0)
0000CD60                            
0000CD60                            locret_C1F0:
0000CD60 4E75                       		rts	
0000CD62                            ; ===========================================================================
0000CD62                            
0000CD62                            loc_C1F2:
0000CD62 6100 0000                  		bsr.w	SpeedToPos
0000CD66 3028 0008                  		move.w	8(a0),d0
0000CD6A 0240 000C                  		andi.w	#$C,d0
0000CD6E 6600 0000                  		bne.w	locret_C2E4
0000CD72 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CD78 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CD7E 4268 0010                  		clr.w	$10(a0)
0000CD82 5528 0025                  		subq.b	#2,$25(a0)
0000CD86 4E75                       		rts	
0000CD88                            ; ===========================================================================
0000CD88                            
0000CD88                            loc_C218:
0000CD88 6100 0000                  		bsr.w	loc_FAC8
0000CD8C 4A44                       		tst.w	d4
0000CD8E 6700 0000                  		beq.w	locret_C2E4
0000CD92 6B00 0000                  		bmi.w	locret_C2E4
0000CD96 4A28 0032                  		tst.b	$32(a0)
0000CD9A 6700                       		beq.s	loc_C230
0000CD9C 6000 0000                  		bra.w	locret_C2E4
0000CDA0                            ; ===========================================================================
0000CDA0                            
0000CDA0                            loc_C230:
0000CDA0 4A40                       		tst.w	d0
0000CDA2 6700 0000                  		beq.w	locret_C2E4
0000CDA6 6B00                       		bmi.s	loc_C268
0000CDA8 0829 0000 0022             		btst	#0,$22(a1)
0000CDAE 6600 0000                  		bne.w	locret_C2E4
0000CDB2 3F00                       		move.w	d0,-(sp)
0000CDB4 7600                       		moveq	#0,d3
0000CDB6 1628 0019                  		move.b	$19(a0),d3
0000CDBA 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CDC0 301F                       		move.w	(sp)+,d0
0000CDC2 4A41                       		tst.w	d1
0000CDC4 6B00 0000                  		bmi.w	locret_C2E4
0000CDC8 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CDD0 7001                       		moveq	#1,d0
0000CDD2 323C 0040                  		move.w	#$40,d1
0000CDD6 6000                       		bra.s	loc_C294
0000CDD8                            ; ===========================================================================
0000CDD8                            
0000CDD8                            loc_C268:
0000CDD8 0829 0000 0022             		btst	#0,$22(a1)
0000CDDE 6700                       		beq.s	locret_C2E4
0000CDE0 3F00                       		move.w	d0,-(sp)
0000CDE2 7600                       		moveq	#0,d3
0000CDE4 1628 0019                  		move.b	$19(a0),d3
0000CDE8 4643                       		not.w	d3
0000CDEA 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CDF0 301F                       		move.w	(sp)+,d0
0000CDF2 4A41                       		tst.w	d1
0000CDF4 6B00                       		bmi.s	locret_C2E4
0000CDF6 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CDFE 70FF                       		moveq	#-1,d0
0000CE00 323C FFC0                  		move.w	#-$40,d1
0000CE04                            
0000CE04                            loc_C294:
0000CE04 43F8 D000                  		lea	($FFFFD000).w,a1
0000CE08 D169 0008                  		add.w	d0,8(a1)
0000CE0C 3341 0014                  		move.w	d1,$14(a1)
0000CE10 337C 0000 0010             		move.w	#0,$10(a1)
0000CE16 3F00                       		move.w	d0,-(sp)
0000CE18 303C 00A7                  		move.w	#$A7,d0
0000CE1C 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CE22 301F                       		move.w	(sp)+,d0
0000CE24 4A28 0028                  		tst.b	$28(a0)
0000CE28 6B00                       		bmi.s	locret_C2E4
0000CE2A 3F00                       		move.w	d0,-(sp)
0000CE2C 4EB9 0000 0000             		jsr	ObjHitFloor
0000CE32 301F                       		move.w	(sp)+,d0
0000CE34 0C41 0004                  		cmpi.w	#4,d1
0000CE38 6F00                       		ble.s	loc_C2E0
0000CE3A 317C 0400 0010             		move.w	#$400,$10(a0)
0000CE40 4A40                       		tst.w	d0
0000CE42 6A00                       		bpl.s	loc_C2D8
0000CE44 4468 0010                  		neg.w	$10(a0)
0000CE48                            
0000CE48                            loc_C2D8:
0000CE48 117C 0006 0025             		move.b	#6,$25(a0)
0000CE4E 6000                       		bra.s	locret_C2E4
0000CE50                            ; ===========================================================================
0000CE50                            
0000CE50                            loc_C2E0:
0000CE50 D368 000C                  		add.w	d1,$C(a0)
0000CE54                            
0000CE54                            locret_C2E4:
0000CE54 4E75                       		rts	
0000CE56                            ; ===========================================================================
0000CE56                            ; ---------------------------------------------------------------------------
0000CE56                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CE56                            ; ---------------------------------------------------------------------------
0000CE56                            Map_obj33:
0000CE56                            	include "_maps\obj33.asm"
0000CE56                            ; ---------------------------------------------------------------------------
0000CE56                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CE56                            ; ---------------------------------------------------------------------------
0000CE56 0000                       		dc.w byte_C2EA-Map_obj33
0000CE58 0000                       		dc.w byte_C2F0-Map_obj33
0000CE5A 01                         byte_C2EA:	dc.b 1
0000CE5B F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CE60 04                         byte_C2F0:	dc.b 4
0000CE61 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CE66 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CE6B F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CE70 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CE76 00                         		even
0000CE76 00                         		even
0000CE76                            
0000CE76                            ; ===========================================================================
0000CE76                            ; ---------------------------------------------------------------------------
0000CE76                            ; Object 34 - zone title cards
0000CE76                            ; ---------------------------------------------------------------------------
0000CE76                            Obj34:					; XREF: Obj_Index
0000CE76 7000                       		moveq	#0,d0
0000CE78 1028 0024                  		move.b	$24(a0),d0
0000CE7C 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CE80 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CE84                            ; ===========================================================================
0000CE84 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CE86 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CE88 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CE8A 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CE8C                            ; ===========================================================================
0000CE8C                            
0000CE8C                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CE8C 2248                       		movea.l	a0,a1
0000CE8E 7000                       		moveq	#0,d0
0000CE90 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CE94 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CE9A 6600                       		bne.s	Obj34_CheckFZ
0000CE9C 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CE9E                            
0000CE9E                            Obj34_CheckFZ:
0000CE9E 3400                       		move.w	d0,d2
0000CEA0 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CEA6 6600                       		bne.s	Obj34_LoadConfig
0000CEA8 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CEAA 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CEAC                            
0000CEAC                            Obj34_LoadConfig:
0000CEAC 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CEB2 E948                       		lsl.w	#4,d0
0000CEB4 D6C0                       		adda.w	d0,a3
0000CEB6 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CEBC 7203                       		moveq	#3,d1
0000CEBE                            
0000CEBE                            Obj34_Loop:
0000CEBE 12BC 0034                  		move.b	#$34,0(a1)
0000CEC2 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CEC6 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CECA 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CECE 335A 000A                  		move.w	(a2)+,$A(a1)
0000CED2 135A 0024                  		move.b	(a2)+,$24(a1)
0000CED6 101A                       		move.b	(a2)+,d0
0000CED8 6600                       		bne.s	Obj34_ActNumber
0000CEDA 1002                       		move.b	d2,d0
0000CEDC                            
0000CEDC                            Obj34_ActNumber:
0000CEDC 0C00 0007                  		cmpi.b	#7,d0
0000CEE0 6600                       		bne.s	Obj34_MakeSprite
0000CEE2 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CEE6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CEEC 6600                       		bne.s	Obj34_MakeSprite
0000CEEE 5300                       		subq.b	#1,d0
0000CEF0                            
0000CEF0                            Obj34_MakeSprite:
0000CEF0 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CEF4 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CEFC 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF02 137C 0078 0019             		move.b	#$78,$19(a1)
0000CF08 137C 0000 0001             		move.b	#0,1(a1)
0000CF0E 137C 0000 0018             		move.b	#0,$18(a1)
0000CF14 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CF1A 43E9 0040                  		lea	$40(a1),a1	; next object
0000CF1E 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CF22                            
0000CF22                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CF22 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF24 3028 0030                  		move.w	$30(a0),d0
0000CF28 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CF2C 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CF2E 6C00                       		bge.s	Obj34_Move
0000CF30 4441                       		neg.w	d1
0000CF32                            
0000CF32                            Obj34_Move:
0000CF32 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF36                            
0000CF36                            loc_C3C8:
0000CF36 3028 0008                  		move.w	8(a0),d0
0000CF3A 6B00                       		bmi.s	locret_C3D8
0000CF3C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF40 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CF42 6000 0000                  		bra.w	DisplaySprite
0000CF46                            ; ===========================================================================
0000CF46                            
0000CF46                            locret_C3D8:
0000CF46 4E75                       		rts	
0000CF48                            ; ===========================================================================
0000CF48                            
0000CF48                            Obj34_Wait:				; XREF: Obj34_Index
0000CF48 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CF4C 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CF4E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CF52 6000 0000                  		bra.w	DisplaySprite
0000CF56                            ; ===========================================================================
0000CF56                            
0000CF56                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CF56 4A28 0001                  		tst.b	1(a0)
0000CF5A 6A00                       		bpl.s	Obj34_ChangeArt
0000CF5C 7220                       		moveq	#$20,d1
0000CF5E 3028 0032                  		move.w	$32(a0),d0
0000CF62 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CF66 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CF68 6C00                       		bge.s	Obj34_Move2
0000CF6A 4441                       		neg.w	d1
0000CF6C                            
0000CF6C                            Obj34_Move2:
0000CF6C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF70 3028 0008                  		move.w	8(a0),d0
0000CF74 6B00                       		bmi.s	locret_C412
0000CF76 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF7A 6400                       		bcc.s	locret_C412	; if yes, branch
0000CF7C 6000 0000                  		bra.w	DisplaySprite
0000CF80                            ; ===========================================================================
0000CF80                            
0000CF80                            locret_C412:
0000CF80 4E75                       		rts	
0000CF82                            ; ===========================================================================
0000CF82                            
0000CF82                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CF82 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CF88 6600                       		bne.s	Obj34_Delete
0000CF8A 7002                       		moveq	#2,d0
0000CF8C 4EB9 0000 17B8             		jsr	(LoadPLC).l	; load explosion patterns
0000CF92 7000                       		moveq	#0,d0
0000CF94 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CF98 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000CF9C 4EB9 0000 17B8             		jsr	(LoadPLC).l	; load animal patterns
0000CFA2                            
0000CFA2                            Obj34_Delete:
0000CFA2 6000 0000                  		bra.w	DeleteObject
0000CFA6                            
0000CFA6                            ; ===========================================================================
0000CFA6                            Obj34_AnimalPLC:
0000CFA6 15                         		dc.b $15	; "GHZ"
0000CFA7 16                         		dc.b $16
0000CFA8 17                         		dc.b $17
0000CFA9 18                         		dc.b $18
0000CFAA 19                         		dc.b $19
0000CFAB 1A                         		dc.b $1A	; "SBZ"
0000CFAC 15                         		dc.b $15	; Ending (placeholder?
0000CFAD 1A                         		dc.b $1A	; MAKOTO
0000CFAE                            	even
0000CFAE 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CFB0 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CFB2 00E4                       		dc.w $E4
0000CFB4 0206                       		dc.b 2,	6
0000CFB6 00EA                       		dc.w $EA
0000CFB8 0207                       		dc.b 2,	7
0000CFBA 00E0                       		dc.w $E0
0000CFBC 020A                       		dc.b 2,	$A
0000CFBE                            ; ---------------------------------------------------------------------------
0000CFBE                            ; Title	card configuration data
0000CFBE                            ; Format:
0000CFBE                            ; 4 bytes per item (YYYY XXXX)
0000CFBE                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CFBE                            ; ---------------------------------------------------------------------------
0000CFBE 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CFCE 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CFDE 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CFEE 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CFFE 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D00E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D01E 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D02E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D03E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D04E                            ; ===========================================================================
0000D04E                            ; ---------------------------------------------------------------------------
0000D04E                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D04E                            ; ---------------------------------------------------------------------------
0000D04E                            
0000D04E                            Obj39:					; XREF: Obj_Index
0000D04E 7000                       		moveq	#0,d0
0000D050 1028 0024                  		move.b	$24(a0),d0
0000D054 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D058 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D05C                            ; ===========================================================================
0000D05C 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D05E 0000                       		dc.w loc_C50C-Obj39_Index
0000D060 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D062                            ; ===========================================================================
0000D062                            
0000D062                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D062 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D066 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D068 4E75                       		rts	
0000D06A                            ; ===========================================================================
0000D06A                            
0000D06A                            Obj39_Main:
0000D06A 5428 0024                  		addq.b	#2,$24(a0)
0000D06E 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D074 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D07A 6700                       		beq.s	loc_C4EC	; if not, branch
0000D07C 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D082                            
0000D082                            loc_C4EC:
0000D082 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D088 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D090 317C 855E 0002             		move.w	#$855E,2(a0)
0000D096 117C 0000 0001             		move.b	#0,1(a0)
0000D09C 117C 0000 0018             		move.b	#0,$18(a0)
0000D0A2                            
0000D0A2                            loc_C50C:				; XREF: Obj39_Index
0000D0A2 7210                       		moveq	#$10,d1		; set horizontal speed
0000D0A4 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D0AA 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D0AC 6500                       		bcs.s	Obj39_Move
0000D0AE 4441                       		neg.w	d1
0000D0B0                            
0000D0B0                            Obj39_Move:
0000D0B0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D0B4 6000 0000                  		bra.w	DisplaySprite
0000D0B8                            ; ===========================================================================
0000D0B8                            
0000D0B8                            Obj39_SetWait:				; XREF: Obj39_Main
0000D0B8 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D0BE 5428 0024                  		addq.b	#2,$24(a0)
0000D0C2 4E75                       		rts	
0000D0C4                            ; ===========================================================================
0000D0C4                            
0000D0C4                            Obj39_Wait:				; XREF: Obj39_Index
0000D0C4 1038 F605                  		move.b	($FFFFF605).w,d0
0000D0C8 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D0CC 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D0CE 0828 0000 001A             		btst	#0,$1A(a0)
0000D0D4 6600                       		bne.s	Obj39_Display
0000D0D6 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D0DA 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D0DC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D0E0 6000 0000                  		bra.w	DisplaySprite
0000D0E4                            ; ===========================================================================
0000D0E4                            
0000D0E4                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D0E4 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D0E8 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D0EA 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D0F0 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D0F4 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D0F6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D0FC 6000                       		bra.s	Obj39_Display
0000D0FE                            ; ===========================================================================
0000D0FE                            
0000D0FE                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D0FE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D104                            
0000D104                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D104 6000 0000                  		bra.w	DisplaySprite
0000D108                            ; ===========================================================================
0000D108                            ; ---------------------------------------------------------------------------
0000D108                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D108                            ; ---------------------------------------------------------------------------
0000D108                            
0000D108                            Obj3A:					; XREF: Obj_Index
0000D108 7000                       		moveq	#0,d0
0000D10A 1028 0024                  		move.b	$24(a0),d0
0000D10E 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D112 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D116                            ; ===========================================================================
0000D116 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D118 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D11A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D11C 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D11E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D120 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D122 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D124 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D126 0000                       		dc.w loc_C766-Obj3A_Index
0000D128                            ; ===========================================================================
0000D128                            
0000D128                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D128 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D12C 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D12E 4E75                       		rts	
0000D130                            ; ===========================================================================
0000D130                            
0000D130                            Obj3A_Main:
0000D130 2248                       		movea.l	a0,a1
0000D132 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D138 7206                       		moveq	#6,d1
0000D13A                            
0000D13A                            Obj3A_Loop:
0000D13A 12BC 003A                  		move.b	#$3A,0(a1)
0000D13E 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D142 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D146 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D14A 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D14E 135A 0024                  		move.b	(a2)+,$24(a1)
0000D152 101A                       		move.b	(a2)+,d0
0000D154 0C00 0006                  		cmpi.b	#6,d0
0000D158 6600                       		bne.s	loc_C5CA
0000D15A D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D15E                            
0000D15E                            loc_C5CA:
0000D15E 1340 001A                  		move.b	d0,$1A(a1)
0000D162 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D16A 337C 8580 0002             		move.w	#$8580,2(a1)
0000D170 137C 0000 0001             		move.b	#0,1(a1)
0000D176 43E9 0040                  		lea	$40(a1),a1
0000D17A 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D17E                            
0000D17E                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D17E 7210                       		moveq	#$10,d1		; set horizontal speed
0000D180 3028 0030                  		move.w	$30(a0),d0
0000D184 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D188 6700                       		beq.s	loc_C61A	; if yes, branch
0000D18A 6C00                       		bge.s	Obj3A_Move
0000D18C 4441                       		neg.w	d1
0000D18E                            
0000D18E                            Obj3A_Move:
0000D18E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D192                            
0000D192                            loc_C5FE:				; XREF: loc_C61A
0000D192 3028 0008                  		move.w	8(a0),d0
0000D196 6B00                       		bmi.s	locret_C60E
0000D198 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D19C 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D19E 6000 0000                  		bra.w	DisplaySprite
0000D1A2                            ; ===========================================================================
0000D1A2                            
0000D1A2                            locret_C60E:
0000D1A2 4E75                       		rts	
0000D1A4                            ; ===========================================================================
0000D1A4                            
0000D1A4                            loc_C610:				; XREF: loc_C61A
0000D1A4 117C 000E 0024             		move.b	#$E,$24(a0)
0000D1AA 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D1AE                            ; ===========================================================================
0000D1AE                            
0000D1AE                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D1AE 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D1B4 67EE                       		beq.s	loc_C610
0000D1B6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D1BC 66D4                       		bne.s	loc_C5FE
0000D1BE 5428 0024                  		addq.b	#2,$24(a0)
0000D1C2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D1C8                            
0000D1C8                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D1C8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D1CC 6600                       		bne.s	Obj3A_Display
0000D1CE 5428 0024                  		addq.b	#2,$24(a0)
0000D1D2                            
0000D1D2                            Obj3A_Display:
0000D1D2 6000 0000                  		bra.w	DisplaySprite
0000D1D6                            ; ===========================================================================
0000D1D6                            
0000D1D6                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D1D6 6100 0000                  		bsr.w	DisplaySprite
0000D1DA 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D1E0 7000                       		moveq	#0,d0
0000D1E2 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D1E6 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D1E8 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D1EC 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D1F2                            
0000D1F2                            Obj3A_RingBonus:
0000D1F2 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D1F6 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D1F8 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D1FC 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D202                            
0000D202                            Obj3A_ChkBonus:
0000D202 4A40                       		tst.w	d0		; is there any bonus?
0000D204 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D206 303C 00C5                  		move.w	#$C5,d0
0000D20A 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D210 5428 0024                  		addq.b	#2,$24(a0)
0000D214 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D21A 6600                       		bne.s	Obj3A_SetDelay
0000D21C 5828 0024                  		addq.b	#4,$24(a0)
0000D220                            
0000D220                            Obj3A_SetDelay:
0000D220 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D226                            
0000D226                            locret_C692:
0000D226 4E75                       		rts	
0000D228                            ; ===========================================================================
0000D228                            
0000D228                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D228 4EB9 0000 0000             		jsr	AddPoints
0000D22E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D232 0200 0003                  		andi.b	#3,d0
0000D236 66EE                       		bne.s	locret_C692
0000D238 303C 00CD                  		move.w	#$CD,d0
0000D23C 4EF9 0000 15D4             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D242                            ; ===========================================================================
0000D242                            
0000D242                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D242 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D246 0240 0007                  		andi.w	#7,d0
0000D24A E748                       		lsl.w	#3,d0
0000D24C 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D250 0241 0003                  		andi.w	#3,d1
0000D254 D241                       		add.w	d1,d1
0000D256 D041                       		add.w	d1,d0
0000D258 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D25C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D260 4A40                       		tst.w	d0
0000D262 6600                       		bne.s	Obj3A_ChkSS
0000D264 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D26A 6000                       		bra.s	Obj3A_Display2
0000D26C                            ; ===========================================================================
0000D26C                            
0000D26C                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D26C 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D270 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D274 6700                       		beq.s	loc_C6EA	; if not, branch
0000D276 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D27C 6000                       		bra.s	Obj3A_Display2
0000D27E                            ; ===========================================================================
0000D27E                            
0000D27E                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D27E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D284                            
0000D284                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D284 6000 0000                  		bra.w	DisplaySprite
0000D288                            ; ===========================================================================
0000D288                            ; ---------------------------------------------------------------------------
0000D288                            ; Level	order array
0000D288                            ; ---------------------------------------------------------------------------
0000D288                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D2C0                            		even
0000D2C0                            ; ===========================================================================
0000D2C0                            
0000D2C0                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D2C0 7220                       		moveq	#$20,d1		; set horizontal speed
0000D2C2 3028 0032                  		move.w	$32(a0),d0
0000D2C6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D2CA 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D2CC 6C00                       		bge.s	Obj3A_Move2
0000D2CE 4441                       		neg.w	d1
0000D2D0                            
0000D2D0                            Obj3A_Move2:
0000D2D0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D2D4 3028 0008                  		move.w	8(a0),d0
0000D2D8 6B00                       		bmi.s	locret_C748
0000D2DA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D2DE 6400                       		bcc.s	locret_C748	; if yes, branch
0000D2E0 6000 0000                  		bra.w	DisplaySprite
0000D2E4                            ; ===========================================================================
0000D2E4                            
0000D2E4                            locret_C748:
0000D2E4 4E75                       		rts	
0000D2E6                            ; ===========================================================================
0000D2E6                            
0000D2E6                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D2E6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D2EC 6600 0000                  		bne.w	DeleteObject
0000D2F0 5428 0024                  		addq.b	#2,$24(a0)
0000D2F4 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D2F8 303C 008D                  		move.w	#$8D,d0
0000D2FC 4EF9 0000 15CE             		jmp	(PlaySound).l	; play FZ music
0000D302                            ; ===========================================================================
0000D302                            
0000D302                            loc_C766:				; XREF: Obj3A_Index
0000D302 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D306 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D30C 6700 0000                  		beq.w	DeleteObject
0000D310 4E75                       		rts	
0000D312                            ; ===========================================================================
0000D312 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D318 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D31A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D320 0201                       		dc.b 2,	1
0000D322 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D328 0206                       		dc.b 2,	6
0000D32A 0520 0120 00EC             		dc.w $520, $120, $EC
0000D330 0202                       		dc.b 2,	2
0000D332 0540 0120 00FC             		dc.w $540, $120, $FC
0000D338 0203                       		dc.b 2,	3
0000D33A 0560 0120 010C             		dc.w $560, $120, $10C
0000D340 0204                       		dc.b 2,	4
0000D342 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D348 0205                       		dc.b 2,	5
0000D34A                            ; ===========================================================================
0000D34A                            ; ---------------------------------------------------------------------------
0000D34A                            ; Object 7E - special stage results screen
0000D34A                            ; ---------------------------------------------------------------------------
0000D34A                            
0000D34A                            Obj7E:					; XREF: Obj_Index
0000D34A 7000                       		moveq	#0,d0
0000D34C 1028 0024                  		move.b	$24(a0),d0
0000D350 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D354 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D358                            ; ===========================================================================
0000D358 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D35A 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D35C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D35E 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D360 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D362 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D364 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D366 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D368 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D36A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D36C 0000                       		dc.w loc_C91A-Obj7E_Index
0000D36E                            ; ===========================================================================
0000D36E                            
0000D36E                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D36E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D372 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D374 4E75                       		rts	
0000D376                            ; ===========================================================================
0000D376                            
0000D376                            Obj7E_Main:
0000D376 2248                       		movea.l	a0,a1
0000D378 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D37E 7203                       		moveq	#3,d1
0000D380 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D386 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D388 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D38A                            
0000D38A                            Obj7E_Loop:
0000D38A 12BC 007E                  		move.b	#$7E,0(a1)
0000D38E 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D392 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D396 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D39A 135A 0024                  		move.b	(a2)+,$24(a1)
0000D39E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D3A2 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D3AA 337C 8580 0002             		move.w	#$8580,2(a1)
0000D3B0 137C 0000 0001             		move.b	#0,1(a1)
0000D3B6 43E9 0040                  		lea	$40(a1),a1
0000D3BA 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D3BE                            
0000D3BE 7007                       		moveq	#7,d0
0000D3C0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D3C4 6700                       		beq.s	loc_C842
0000D3C6 7000                       		moveq	#0,d0
0000D3C8 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D3CC 6600                       		bne.s	loc_C842	; if not, branch
0000D3CE 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D3D0 317C 0018 0008             		move.w	#$18,8(a0)
0000D3D6 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D3DC                            
0000D3DC                            loc_C842:
0000D3DC 1140 001A                  		move.b	d0,$1A(a0)
0000D3E0                            
0000D3E0                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D3E0 7210                       		moveq	#$10,d1		; set horizontal speed
0000D3E2 3028 0030                  		move.w	$30(a0),d0
0000D3E6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D3EA 6700                       		beq.s	loc_C86C	; if yes, branch
0000D3EC 6C00                       		bge.s	Obj7E_Move
0000D3EE 4441                       		neg.w	d1
0000D3F0                            
0000D3F0                            Obj7E_Move:
0000D3F0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D3F4                            
0000D3F4                            loc_C85A:				; XREF: loc_C86C
0000D3F4 3028 0008                  		move.w	8(a0),d0
0000D3F8 6B00                       		bmi.s	locret_C86A
0000D3FA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D3FE 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D400 6000 0000                  		bra.w	DisplaySprite
0000D404                            ; ===========================================================================
0000D404                            
0000D404                            locret_C86A:
0000D404 4E75                       		rts	
0000D406                            ; ===========================================================================
0000D406                            
0000D406                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D406 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D40C 66E6                       		bne.s	loc_C85A
0000D40E 5428 0024                  		addq.b	#2,$24(a0)
0000D412 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D418 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D41E                            
0000D41E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D41E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D422 6600                       		bne.s	Obj7E_Display
0000D424 5428 0024                  		addq.b	#2,$24(a0)
0000D428                            
0000D428                            Obj7E_Display:
0000D428 6000 0000                  		bra.w	DisplaySprite
0000D42C                            ; ===========================================================================
0000D42C                            
0000D42C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D42C 6100 0000                  		bsr.w	DisplaySprite
0000D430 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D436 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D43A 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D43C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D442 700A                       		moveq	#10,d0		; add 10 to score
0000D444 4EB9 0000 0000             		jsr	AddPoints
0000D44A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D44E 0200 0003                  		andi.b	#3,d0
0000D452 6600                       		bne.s	locret_C8EA
0000D454 303C 00CD                  		move.w	#$CD,d0
0000D458 4EF9 0000 15D4             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D45E                            ; ===========================================================================
0000D45E                            
0000D45E                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D45E 303C 00C5                  		move.w	#$C5,d0
0000D462 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D468 5428 0024                  		addq.b	#2,$24(a0)
0000D46C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D472 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D478 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D47A 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D480 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D484                            
0000D484                            locret_C8EA:
0000D484 4E75                       		rts	
0000D486                            ; ===========================================================================
0000D486                            
0000D486                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D486 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D48C 6000 0000                  		bra.w	DisplaySprite
0000D490                            ; ===========================================================================
0000D490                            
0000D490                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D490 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D496 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D49C 303C 00BF                  		move.w	#$BF,d0
0000D4A0 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play continues music
0000D4A6 5428 0024                  		addq.b	#2,$24(a0)
0000D4AA 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D4B0 6000 0000                  		bra.w	DisplaySprite
0000D4B4                            ; ===========================================================================
0000D4B4                            
0000D4B4                            loc_C91A:				; XREF: Obj7E_Index
0000D4B4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D4B8 0200 000F                  		andi.b	#$F,d0
0000D4BC 6600                       		bne.s	Obj7E_Display2
0000D4BE 0868 0000 001A             		bchg	#0,$1A(a0)
0000D4C4                            
0000D4C4                            Obj7E_Display2:
0000D4C4 6000 0000                  		bra.w	DisplaySprite
0000D4C8                            ; ===========================================================================
0000D4C8 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D4CE 0200                       		dc.b 2,	0		; rountine number, frame number
0000D4D0 0320 0120 0118             		dc.w $320, $120, $118
0000D4D6 0201                       		dc.b 2,	1
0000D4D8 0360 0120 0128             		dc.w $360, $120, $128
0000D4DE 0202                       		dc.b 2,	2
0000D4E0 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D4E6 0203                       		dc.b 2,	3
0000D4E8 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D4EE 0206                       		dc.b 2,	6
0000D4F0                            ; ===========================================================================
0000D4F0                            ; ---------------------------------------------------------------------------
0000D4F0                            ; Object 7F - chaos emeralds from the special stage results screen
0000D4F0                            ; ---------------------------------------------------------------------------
0000D4F0                            
0000D4F0                            Obj7F:					; XREF: Obj_Index
0000D4F0 7000                       		moveq	#0,d0
0000D4F2 1028 0024                  		move.b	$24(a0),d0
0000D4F6 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D4FA 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D4FE                            ; ===========================================================================
0000D4FE 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D500 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D502                            
0000D502                            ; ---------------------------------------------------------------------------
0000D502                            ; X-axis positions for chaos emeralds
0000D502                            ; ---------------------------------------------------------------------------
0000D502 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D50E                            ; ===========================================================================
0000D50E                            
0000D50E                            Obj7F_Main:				; XREF: Obj7F_Index
0000D50E 2248                       		movea.l	a0,a1
0000D510 45F9 0000 D502             		lea	(Obj7F_PosData).l,a2
0000D516 7400                       		moveq	#0,d2
0000D518 7200                       		moveq	#0,d1
0000D51A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D51E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D520 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D524                            
0000D524                            Obj7F_Loop:
0000D524 12BC 007F                  		move.b	#$7F,0(a1)
0000D528 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D52C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D532 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D536 1633 2000                  		move.b	(a3,d2.w),d3
0000D53A 1343 001A                  		move.b	d3,$1A(a1)
0000D53E 1343 001C                  		move.b	d3,$1C(a1)
0000D542 5202                       		addq.b	#1,d2
0000D544 5429 0024                  		addq.b	#2,$24(a1)
0000D548 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D550 337C 8541 0002             		move.w	#$8541,2(a1)
0000D556 137C 0000 0001             		move.b	#0,1(a1)
0000D55C 43E9 0040                  		lea	$40(a1),a1	; next object
0000D560 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D564                            
0000D564                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D564 1028 001A                  		move.b	$1A(a0),d0
0000D568 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D56E 0C00 0006                  		cmpi.b	#6,d0
0000D572 6600                       		bne.s	Obj7F_Display
0000D574 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D57A                            
0000D57A                            Obj7F_Display:
0000D57A 6000 0000                  		bra.w	DisplaySprite
0000D57E                            ; ===========================================================================
0000D57E                            ; ---------------------------------------------------------------------------
0000D57E                            ; Sprite mappings - zone title cards
0000D57E                            ; ---------------------------------------------------------------------------
0000D57E                            Map_obj34:
0000D57E                                    include "_maps\obj34.asm"
0000D57E                            Map_c5df:
0000D57E 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D580 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D582 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D584 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D586 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D588 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D58A 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D58C 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D58E 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D590 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D592 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D594 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D596 0C                         Map_c5df_18: 	dc.b $C
0000D597 F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D59C F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D5A1 F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D5A6 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D5AB F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D5B0 F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D5B5 F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D5BA F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D5BF F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D5C4 F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D5C9 F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D5CE F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D5D3 16                         Map_c5df_55: 	dc.b $16
0000D5D4 F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D5D9 F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D5DE F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D5E3 F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D5E8 F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D5ED F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D5F2 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D5F7 F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D5FC F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D601 F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D606 F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D60B F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D610 F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D615 F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D61A F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D61F F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D624 F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D629 F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D62E F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D633 F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D638 F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D63D F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D642 05                         Map_c5df_C4: 	dc.b $5
0000D643 F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D648 F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D64D F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D652 F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D657 F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D65C 11                         Map_c5df_DE: 	dc.b $11
0000D65D F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D662 F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D667 F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D66C F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D671 F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D676 F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D67B F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D680 F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D685 F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D68A F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D68F F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D694 F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D699 F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D69E F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D6A3 F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D6A8 F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D6AD F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D6B2 15                         Map_c5df_134: 	dc.b $15
0000D6B3 F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D6B8 F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D6BD F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D6C2 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D6C7 F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D6CC F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D6D1 F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D6D6 F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D6DB F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D6E0 F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D6E5 F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D6EA F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D6EF F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D6F4 F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D6F9 F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D6FE F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D703 F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D708 F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D70D F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D712 F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D717 F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D71C 07                         Map_c5df_19E: 	dc.b $7
0000D71D F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D722 F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D727 F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D72C F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D731 F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D736 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D73B F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D740 04                         Map_c5df_1C2: 	dc.b $4
0000D741 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D746 F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D74B F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D750 F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D755 02                         Map_c5df_1D7: 	dc.b $2
0000D756 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D75B F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D760 02                         Map_c5df_1E2: 	dc.b $2
0000D761 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D766 F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D76B 02                         Map_c5df_1ED: 	dc.b $2
0000D76C 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D771 F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D776 0D                         Map_c5df_1F8: 	dc.b $D
0000D777 E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D77C E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D781 EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D786 F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D78B 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D790 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D795 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D79A FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D79F EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D7A4 F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D7A9 FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D7AE 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D7B3 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D7B8 05                         Map_c5df_23A: 	dc.b $5
0000D7B9 F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D7BE F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D7C3 F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D7C8 F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D7CD F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D7D2                            	even
0000D7D2                            	even
0000D7D2                            ; ---------------------------------------------------------------------------
0000D7D2                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D7D2                            ; ---------------------------------------------------------------------------
0000D7D2                            Map_obj39:
0000D7D2                            	include "_maps\obj39.asm"
0000D7D2                            ; ---------------------------------------------------------------------------
0000D7D2                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D7D2                            ; ---------------------------------------------------------------------------
0000D7D2 0000                       		dc.w byte_CBAC-Map_obj39
0000D7D4 0000                       		dc.w byte_CBB7-Map_obj39
0000D7D6 0000                       		dc.w byte_CBC2-Map_obj39
0000D7D8 0000                       		dc.w byte_CBCD-Map_obj39
0000D7DA 02                         byte_CBAC:	dc.b 2
0000D7DB F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D7E0 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D7E5 02                         byte_CBB7:	dc.b 2
0000D7E6 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D7EB F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D7F0 02                         byte_CBC2:	dc.b 2
0000D7F1 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D7F6 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D7FB 02                         byte_CBCD:	dc.b 2
0000D7FC F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D801 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D806                            		even
0000D806                            		even
0000D806                            
0000D806                            ; ---------------------------------------------------------------------------
0000D806                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D806                            ; ---------------------------------------------------------------------------
0000D806 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D808 0000                       		dc.w byte_CC13-Map_obj3A
0000D80A 0000                       		dc.w byte_CC32-Map_obj3A
0000D80C 0000                       		dc.w byte_CC51-Map_obj3A
0000D80E 0000                       		dc.w byte_CC75-Map_obj3A
0000D810                            		;dc.w byte_CB47-Map_obj3A
0000D810                            		;dc.w byte_CB26-Map_obj3A
0000D810                            		;dc.w byte_CB31-Map_obj3A
0000D810                            		;dc.w byte_CB3C-Map_obj3A
0000D810 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D811 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D816 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D81B F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D820 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D825 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D82A F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D82F F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D834 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D839 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D83E F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D843 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D848 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D84D F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D852 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D857 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D85C 06                         byte_CC13:	dc.b 6			; PASSED
0000D85D F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D862 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D867 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D86C F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D871 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D876 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D87B 06                         byte_CC32:	dc.b 6			; SCORE
0000D87C F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D881 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D886 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D88B F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D890 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D895 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D89A 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D89B F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D8A0 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D8A5 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D8AA F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D8AF FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D8B4 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D8B9 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D8BE 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D8BF F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D8C4 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D8C9 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D8CE F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D8D3 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D8D8 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D8DD F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D8E2                            		even
0000D8E2                            ; ---------------------------------------------------------------------------
0000D8E2                            ; Sprite mappings - special stage results screen
0000D8E2                            ; ---------------------------------------------------------------------------
0000D8E2 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D8E4 0000                       		dc.w byte_CCEE-Map_obj7E
0000D8E6 0000                       		dc.w byte_CD0D-Map_obj7E
0000D8E8                            		;dc.w byte_CB47-Map_obj7E
0000D8E8 0000                       		dc.w byte_CD31-Map_obj7E
0000D8EA 0000                       		dc.w byte_CD46-Map_obj7E
0000D8EC 0000                       		dc.w byte_CD5B-Map_obj7E
0000D8EE 0000                       		dc.w byte_CD6B-Map_obj7E
0000D8F0 0000                       		dc.w byte_CDA8-Map_obj7E
0000D8F2 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D8F3 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D8F8 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D8FD F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D902 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D907 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D90C F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D911 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D916 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D91B F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D920 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D925 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D92A F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D92F F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D934 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D935 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D93A F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D93F F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D944 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D949 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D94E FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D953 07                         byte_CD0D:	dc.b 7
0000D954 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D959 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D95E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D963 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D968 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D96D F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D972 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D977 04                         byte_CD31:	dc.b 4
0000D978 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D97D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D982 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D987 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D98C 04                         byte_CD46:	dc.b 4
0000D98D F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D992 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D997 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D99C F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D9A1 03                         byte_CD5B:	dc.b 3
0000D9A2 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D9A7 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D9AC F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D9B1 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D9B2 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D9B7 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D9BC F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D9C1 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D9C6 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D9CB F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D9D0 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D9D5 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D9DA F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D9DF F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D9E4 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D9E9 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D9EE 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D9EF F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D9F4 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D9F9 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D9FE F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000DA03 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000DA08 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000DA0D F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000DA12 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000DA17 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000DA1C F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000DA21 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000DA26 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000DA2B F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000DA30 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000DA35 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000DA3A                            		even
0000DA3A                            ; ---------------------------------------------------------------------------
0000DA3A                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DA3A                            ; ---------------------------------------------------------------------------
0000DA3A                            Map_obj7F:
0000DA3A                            	include "_maps\obj7F.asm"
0000DA3A                            ; ---------------------------------------------------------------------------
0000DA3A                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DA3A                            ; ---------------------------------------------------------------------------
0000DA3A 0000                       		dc.w byte_CE02-Map_obj7F
0000DA3C 0000                       		dc.w byte_CE08-Map_obj7F
0000DA3E 0000                       		dc.w byte_CE0E-Map_obj7F
0000DA40 0000                       		dc.w byte_CE14-Map_obj7F
0000DA42 0000                       		dc.w byte_CE1A-Map_obj7F
0000DA44 0000                       		dc.w byte_CE20-Map_obj7F
0000DA46 0000                       		dc.w byte_CE26-Map_obj7F
0000DA48 01                         byte_CE02:	dc.b 1
0000DA49 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000DA4E 01                         byte_CE08:	dc.b 1
0000DA4F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DA54 01                         byte_CE0E:	dc.b 1
0000DA55 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000DA5A 01                         byte_CE14:	dc.b 1
0000DA5B F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000DA60 01                         byte_CE1A:	dc.b 1
0000DA61 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000DA66 01                         byte_CE20:	dc.b 1
0000DA67 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000DA6C 00                         byte_CE26:	dc.b 0			; Blank frame
0000DA6E 00                         		even
0000DA6E 00                         		even
0000DA6E                            
0000DA6E                            ; ===========================================================================
0000DA6E                            ; ---------------------------------------------------------------------------
0000DA6E                            ; Object 36 - spikes
0000DA6E                            ; ---------------------------------------------------------------------------
0000DA6E                            
0000DA6E                            Obj36:					; XREF: Obj_Index
0000DA6E 7000                       		moveq	#0,d0
0000DA70 1028 0024                  		move.b	$24(a0),d0
0000DA74 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000DA78 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000DA7C                            ; ===========================================================================
0000DA7C 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000DA7E 0000                       		dc.w Obj36_Solid-Obj36_Index
0000DA80                            
0000DA80 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000DA82 0110                       		dc.b 1,	$10
0000DA84 0204                       		dc.b 2,	4
0000DA86 031C                       		dc.b 3,	$1C
0000DA88 0440                       		dc.b 4,	$40
0000DA8A 0510                       		dc.b 5,	$10
0000DA8C                            ; ===========================================================================
0000DA8C                            
0000DA8C                            Obj36_Main:				; XREF: Obj36_Index
0000DA8C 5428 0024                  		addq.b	#2,$24(a0)
0000DA90 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000DA98 317C 051B 0002             		move.w	#$51B,2(a0)
0000DA9E 0028 0004 0001             		ori.b	#4,1(a0)
0000DAA4 117C 0004 0018             		move.b	#4,$18(a0)
0000DAAA 1028 0028                  		move.b	$28(a0),d0
0000DAAE 0228 000F 0028             		andi.b	#$F,$28(a0)
0000DAB4 0240 00F0                  		andi.w	#$F0,d0
0000DAB8 43F9 0000 DA80             		lea	(Obj36_Var).l,a1
0000DABE E648                       		lsr.w	#3,d0
0000DAC0 D2C0                       		adda.w	d0,a1
0000DAC2 1159 001A                  		move.b	(a1)+,$1A(a0)
0000DAC6 1159 0019                  		move.b	(a1)+,$19(a0)
0000DACA 3168 0008 0030             		move.w	8(a0),$30(a0)
0000DAD0 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000DAD6                            
0000DAD6                            Obj36_Solid:				; XREF: Obj36_Index
0000DAD6 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000DADA 343C 0004                  		move.w	#4,d2
0000DADE 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000DAE4 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000DAE6 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000DAEC 6600                       		bne.s	Obj36_Upright	; if not, branch
0000DAEE 343C 0014                  		move.w	#$14,d2
0000DAF2                            
0000DAF2                            ; Spikes types $1x and $5x face	sideways
0000DAF2                            
0000DAF2                            Obj36_SideWays:				; XREF: Obj36_Solid
0000DAF2 323C 001B                  		move.w	#$1B,d1
0000DAF6 3602                       		move.w	d2,d3
0000DAF8 5243                       		addq.w	#1,d3
0000DAFA 3828 0008                  		move.w	8(a0),d4
0000DAFE 6100 0000                  		bsr.w	SolidObject
0000DB02 0828 0003 0022             		btst	#3,$22(a0)
0000DB08 6600                       		bne.s	Obj36_Display
0000DB0A 0C44 0001                  		cmpi.w	#1,d4
0000DB0E 6700                       		beq.s	Obj36_Hurt
0000DB10 6000                       		bra.s	Obj36_Display
0000DB12                            ; ===========================================================================
0000DB12                            
0000DB12                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000DB12                            
0000DB12                            Obj36_Upright:				; XREF: Obj36_Solid
0000DB12 7200                       		moveq	#0,d1
0000DB14 1228 0019                  		move.b	$19(a0),d1
0000DB18 0641 000B                  		addi.w	#$B,d1
0000DB1C 343C 0010                  		move.w	#$10,d2
0000DB20 363C 0011                  		move.w	#$11,d3
0000DB24 3828 0008                  		move.w	8(a0),d4
0000DB28 6100 0000                  		bsr.w	SolidObject
0000DB2C 0828 0003 0022             		btst	#3,$22(a0)
0000DB32 6600                       		bne.s	Obj36_Hurt
0000DB34 4A44                       		tst.w	d4
0000DB36 6A00                       		bpl.s	Obj36_Display
0000DB38                            
0000DB38                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000DB38 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000DB3C 6600                       		bne.s	Obj36_Display	; if yes, branch
0000DB3E 2F08                       		move.l	a0,-(sp)
0000DB40 2448                       		movea.l	a0,a2
0000DB42 41F8 D000                  		lea	($FFFFD000).w,a0
0000DB46 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000DB4C 6400                       		bcc.s	loc_CF20
0000DB4E 2628 000C                  		move.l	$C(a0),d3
0000DB52 3028 0012                  		move.w	$12(a0),d0
0000DB56 48C0                       		ext.l	d0
0000DB58 E180                       		asl.l	#8,d0
0000DB5A 9680                       		sub.l	d0,d3
0000DB5C 2143 000C                  		move.l	d3,$C(a0)
0000DB60 4EB9 0000 0000             		jsr	HurtSonic
0000DB66                            
0000DB66                            loc_CF20:
0000DB66 205F                       		movea.l	(sp)+,a0
0000DB68                            
0000DB68                            Obj36_Display:
0000DB68 6100 0000                  		bsr.w	DisplaySprite
0000DB6C 3028 0030                  		move.w	$30(a0),d0
0000DB70 0240 FF80                  		andi.w	#$FF80,d0
0000DB74 3238 F700                  		move.w	($FFFFF700).w,d1
0000DB78 0441 0080                  		subi.w	#$80,d1
0000DB7C 0241 FF80                  		andi.w	#$FF80,d1
0000DB80 9041                       		sub.w	d1,d0
0000DB82 0C40 0280                  		cmpi.w	#$280,d0
0000DB86 6200 0000                  		bhi.w	DeleteObject
0000DB8A 4E75                       		rts	
0000DB8C                            ; ===========================================================================
0000DB8C                            
0000DB8C                            Obj36_Type0x:				; XREF: Obj36_Solid
0000DB8C 7000                       		moveq	#0,d0
0000DB8E 1028 0028                  		move.b	$28(a0),d0
0000DB92 D040                       		add.w	d0,d0
0000DB94 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000DB98 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000DB9C                            ; ===========================================================================
0000DB9C 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000DB9E 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000DBA0 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000DBA2                            ; ===========================================================================
0000DBA2                            
0000DBA2                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000DBA2 4E75                       		rts			; don't move the object
0000DBA4                            ; ===========================================================================
0000DBA4                            
0000DBA4                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000DBA4 6100 0000                  		bsr.w	Obj36_Wait
0000DBA8 7000                       		moveq	#0,d0
0000DBAA 1028 0034                  		move.b	$34(a0),d0
0000DBAE D068 0032                  		add.w	$32(a0),d0
0000DBB2 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000DBB6 4E75                       		rts	
0000DBB8                            ; ===========================================================================
0000DBB8                            
0000DBB8                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000DBB8 6100 0000                  		bsr.w	Obj36_Wait
0000DBBC 7000                       		moveq	#0,d0
0000DBBE 1028 0034                  		move.b	$34(a0),d0
0000DBC2 D068 0030                  		add.w	$30(a0),d0
0000DBC6 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000DBCA 4E75                       		rts	
0000DBCC                            ; ===========================================================================
0000DBCC                            
0000DBCC                            Obj36_Wait:
0000DBCC 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000DBD0 6700                       		beq.s	loc_CFA4	; if yes, branch
0000DBD2 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000DBD6 6600                       		bne.s	locret_CFE6
0000DBD8 4A28 0001                  		tst.b	1(a0)
0000DBDC 6A00                       		bpl.s	locret_CFE6
0000DBDE 303C 00B6                  		move.w	#$B6,d0
0000DBE2 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000DBE8 6000                       		bra.s	locret_CFE6
0000DBEA                            ; ===========================================================================
0000DBEA                            
0000DBEA                            loc_CFA4:
0000DBEA 4A68 0036                  		tst.w	$36(a0)
0000DBEE 6700                       		beq.s	loc_CFC6
0000DBF0 0468 0800 0034             		subi.w	#$800,$34(a0)
0000DBF6 6400                       		bcc.s	locret_CFE6
0000DBF8 317C 0000 0034             		move.w	#0,$34(a0)
0000DBFE 317C 0000 0036             		move.w	#0,$36(a0)
0000DC04 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DC0A 6000                       		bra.s	locret_CFE6
0000DC0C                            ; ===========================================================================
0000DC0C                            
0000DC0C                            loc_CFC6:
0000DC0C 0668 0800 0034             		addi.w	#$800,$34(a0)
0000DC12 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000DC18 6500                       		bcs.s	locret_CFE6
0000DC1A 317C 2000 0034             		move.w	#$2000,$34(a0)
0000DC20 317C 0001 0036             		move.w	#1,$36(a0)
0000DC26 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DC2C                            
0000DC2C                            locret_CFE6:
0000DC2C 4E75                       		rts	
0000DC2E                            ; ===========================================================================
0000DC2E                            ; ---------------------------------------------------------------------------
0000DC2E                            ; Sprite mappings - spikes
0000DC2E                            ; ---------------------------------------------------------------------------
0000DC2E                            Map_obj36:
0000DC2E                            	include "_maps\obj36.asm"
0000DC2E                            Map_obj36_inner:
0000DC2E 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000DC30 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000DC32 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000DC34 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000DC36 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000DC38 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000DC3A 03                         Map_obj36_inner_C: 	dc.b $3
0000DC3B F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000DC40 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DC45 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000DC4A 03                         Map_obj36_inner_1C: 	dc.b $3
0000DC4B EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000DC50 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DC55 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000DC5A 01                         Map_obj36_inner_2C: 	dc.b $1
0000DC5B F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DC60 03                         Map_obj36_inner_32: 	dc.b $3
0000DC61 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000DC66 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DC6B F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000DC70 06                         Map_obj36_inner_42: 	dc.b $6
0000DC71 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000DC76 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000DC7B F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000DC80 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000DC85 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000DC8A F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000DC8F 01                         Map_obj36_inner_61: 	dc.b $1
0000DC90 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DC96 00                         	even
0000DC96 00                         	even
0000DC96                            
0000DC96                            ; ===========================================================================
0000DC96                            ; ---------------------------------------------------------------------------
0000DC96                            ; Object 3B - purple rock (GHZ)
0000DC96                            ; ---------------------------------------------------------------------------
0000DC96                            
0000DC96                            Obj3B:					; XREF: Obj_Index
0000DC96 7000                       		moveq	#0,d0
0000DC98 1028 0024                  		move.b	$24(a0),d0
0000DC9C 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DCA0 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DCA4                            ; ===========================================================================
0000DCA4 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DCA6 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DCA8                            ; ===========================================================================
0000DCA8                            
0000DCA8                            Obj3B_Main:				; XREF: Obj3B_Index
0000DCA8 5428 0024                  		addq.b	#2,$24(a0)
0000DCAC 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DCB4 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DCBA 117C 0004 0001             		move.b	#4,1(a0)
0000DCC0 117C 0013 0019             		move.b	#$13,$19(a0)
0000DCC6 117C 0004 0018             		move.b	#4,$18(a0)
0000DCCC                            
0000DCCC                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DCCC 323C 001B                  		move.w	#$1B,d1
0000DCD0 343C 0010                  		move.w	#$10,d2
0000DCD4 363C 0010                  		move.w	#$10,d3
0000DCD8 3828 0008                  		move.w	8(a0),d4
0000DCDC 6100 0000                  		bsr.w	SolidObject
0000DCE0 6100 0000                  		bsr.w	DisplaySprite
0000DCE4 3028 0008                  		move.w	8(a0),d0
0000DCE8 0240 FF80                  		andi.w	#$FF80,d0
0000DCEC 3238 F700                  		move.w	($FFFFF700).w,d1
0000DCF0 0441 0080                  		subi.w	#$80,d1
0000DCF4 0241 FF80                  		andi.w	#$FF80,d1
0000DCF8 9041                       		sub.w	d1,d0
0000DCFA 0C40 0280                  		cmpi.w	#$280,d0
0000DCFE 6200 0000                  		bhi.w	DeleteObject
0000DD02 4E75                       		rts	
0000DD04                            ; ===========================================================================
0000DD04                            ; ---------------------------------------------------------------------------
0000DD04                            ; Object 49 - waterfall	sound effect (GHZ)
0000DD04                            ; ---------------------------------------------------------------------------
0000DD04                            
0000DD04                            Obj49:					; XREF: Obj_Index
0000DD04 7000                       		moveq	#0,d0
0000DD06 1028 0024                  		move.b	$24(a0),d0
0000DD0A 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DD0E 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DD12                            ; ===========================================================================
0000DD12 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DD14 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DD16                            ; ===========================================================================
0000DD16                            
0000DD16                            Obj49_Main:				; XREF: Obj49_Index
0000DD16 5428 0024                  		addq.b	#2,$24(a0)
0000DD1A 117C 0004 0001             		move.b	#4,1(a0)
0000DD20                            
0000DD20                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DD20 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DD24 0200 003F                  		andi.b	#$3F,d0
0000DD28 6600                       		bne.s	Obj49_ChkDel
0000DD2A 303C 00D0                  		move.w	#$D0,d0
0000DD2E 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DD34                            
0000DD34                            Obj49_ChkDel:
0000DD34 3028 0008                  		move.w	8(a0),d0
0000DD38 0240 FF80                  		andi.w	#$FF80,d0
0000DD3C 3238 F700                  		move.w	($FFFFF700).w,d1
0000DD40 0441 0080                  		subi.w	#$80,d1
0000DD44 0241 FF80                  		andi.w	#$FF80,d1
0000DD48 9041                       		sub.w	d1,d0
0000DD4A 0C40 0280                  		cmpi.w	#$280,d0
0000DD4E 6200 0000                  		bhi.w	DeleteObject
0000DD52 4E75                       		rts	
0000DD54                            ; ===========================================================================
0000DD54                            ; ---------------------------------------------------------------------------
0000DD54                            ; Sprite mappings - purple rock	(GHZ)
0000DD54                            ; ---------------------------------------------------------------------------
0000DD54                            Map_obj3B:
0000DD54                            	include "_maps\obj3B.asm"
0000DD54                            ; ---------------------------------------------------------------------------
0000DD54                            ; Sprite mappings - purple rock	(GHZ)
0000DD54                            ; ---------------------------------------------------------------------------
0000DD54 0000                       		dc.w byte_D110-Map_obj3B
0000DD56 02                         byte_D110:	dc.b 2
0000DD57 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DD5C F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DD62 00                         		even
0000DD62 00                         		even
0000DD62                            
0000DD62                            ; ===========================================================================
0000DD62                            ; ---------------------------------------------------------------------------
0000DD62                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DD62                            ; ---------------------------------------------------------------------------
0000DD62                            
0000DD62                            Obj3C:					; XREF: Obj_Index
0000DD62 7000                       		moveq	#0,d0
0000DD64 1028 0024                  		move.b	$24(a0),d0
0000DD68 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DD6C 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DD70 6000 0000                  		bra.w	MarkObjGone
0000DD74                            ; ===========================================================================
0000DD74 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DD76 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DD78 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DD7A                            ; ===========================================================================
0000DD7A                            
0000DD7A                            Obj3C_Main:				; XREF: Obj3C_Index
0000DD7A 5428 0024                  		addq.b	#2,$24(a0)
0000DD7E 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DD86 317C 450F 0002             		move.w	#$450F,2(a0)
0000DD8C 117C 0004 0001             		move.b	#4,1(a0)
0000DD92 117C 0010 0019             		move.b	#$10,$19(a0)
0000DD98 117C 0004 0018             		move.b	#4,$18(a0)
0000DD9E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DDA4                            
0000DDA4                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DDA4 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DDAA 323C 001B                  		move.w	#$1B,d1
0000DDAE 343C 0020                  		move.w	#$20,d2
0000DDB2 363C 0020                  		move.w	#$20,d3
0000DDB6 3828 0008                  		move.w	8(a0),d4
0000DDBA 6100 0000                  		bsr.w	SolidObject
0000DDBE 0828 0005 0022             		btst	#5,$22(a0)
0000DDC4 6600                       		bne.s	Obj3C_ChkRoll
0000DDC6                            
0000DDC6                            locret_D180:
0000DDC6 4E75                       		rts	
0000DDC8                            ; ===========================================================================
0000DDC8                            
0000DDC8                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DDC8 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DDCE 66F6                       		bne.s	locret_D180	; if not, branch
0000DDD0 3028 0030                  		move.w	$30(a0),d0
0000DDD4 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DDD6 4440                       		neg.w	d0
0000DDD8                            
0000DDD8                            Obj3C_ChkSpeed:
0000DDD8 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DDDC 65E8                       		bcs.s	locret_D180	; if not, branch
0000DDDE 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DDE4 5869 0008                  		addq.w	#4,8(a1)
0000DDE8 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DDEE 3028 0008                  		move.w	8(a0),d0
0000DDF2 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DDF6 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DDF8 5169 0008                  		subq.w	#8,8(a1)
0000DDFC 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DE02                            
0000DE02                            Obj3C_Smash:
0000DE02 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DE08 08A8 0005 0022             		bclr	#5,$22(a0)
0000DE0E 08A9 0005 0022             		bclr	#5,$22(a1)
0000DE14 7207                       		moveq	#7,d1		; load 8 fragments
0000DE16 343C 0070                  		move.w	#$70,d2
0000DE1A 6100                       		bsr.s	SmashObject
0000DE1C                            
0000DE1C                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DE1C 4A28 0001                  		tst.b	1(a0)
0000DE20 6A00 0000                  		bpl.w	DeleteObject
0000DE24 7270                       		moveq	#$70,d1
0000DE26 4EB9 0000 0000             		jsr	ObjectFallCustom
0000DE2C 6000 0000                  		bra.w	DisplaySprite	
0000DE30                            
0000DE30                            ; ---------------------------------------------------------------------------
0000DE30                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DE30                            ; ---------------------------------------------------------------------------
0000DE30                            
0000DE30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE30                            
0000DE30                            
0000DE30                            SmashObject:				; XREF: Obj3C_Smash
0000DE30 7000                       		moveq	#0,d0
0000DE32 1028 001A                  		move.b	$1A(a0),d0
0000DE36 D040                       		add.w	d0,d0
0000DE38 2668 0004                  		movea.l	4(a0),a3
0000DE3C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DE40 524B                       		addq.w	#1,a3
0000DE42 08E8 0005 0001             		bset	#5,1(a0)
0000DE48 1810                       		move.b	0(a0),d4
0000DE4A 1A28 0001                  		move.b	1(a0),d5
0000DE4E 2248                       		movea.l	a0,a1
0000DE50 6000                       		bra.s	Smash_LoadFrag
0000DE52                            ; ===========================================================================
0000DE52                            
0000DE52                            Smash_Loop:
0000DE52 6100 0000                  		bsr.w	SingleObjLoad
0000DE56 6600                       		bne.s	Smash_PlaySnd
0000DE58 5A4B                       		addq.w	#5,a3
0000DE5A                            
0000DE5A                            Smash_LoadFrag:				; XREF: SmashObject
0000DE5A 137C 0004 0024             		move.b	#4,$24(a1)
0000DE60 1284                       		move.b	d4,0(a1)
0000DE62 234B 0004                  		move.l	a3,4(a1)
0000DE66 1345 0001                  		move.b	d5,1(a1)
0000DE6A 3368 0008 0008             		move.w	8(a0),8(a1)
0000DE70 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DE76 3368 0002 0002             		move.w	2(a0),2(a1)
0000DE7C 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DE82 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DE88 335C 0010                  		move.w	(a4)+,$10(a1)
0000DE8C 335C 0012                  		move.w	(a4)+,$12(a1)
0000DE90 B3C8                       		cmpa.l	a0,a1
0000DE92 6400                       		bcc.s	loc_D268
0000DE94 2F08                       		move.l	a0,-(sp)
0000DE96 2049                       		movea.l	a1,a0
0000DE98 6100 0000                  		bsr.w	SpeedToPos
0000DE9C D568 0012                  		add.w	d2,$12(a0)
0000DEA0 205F                       		movea.l	(sp)+,a0
0000DEA2 6100 0000                  		bsr.w	DisplaySprite2
0000DEA6                            
0000DEA6                            loc_D268:
0000DEA6 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DEAA                            
0000DEAA                            Smash_PlaySnd:
0000DEAA 303C 00CB                  		move.w	#$CB,d0
0000DEAE 4EF9 0000 15D4             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DEB4                            ; End of function SmashObject
0000DEB4                            
0000DEB4                            ; ===========================================================================
0000DEB4                            ; Smashed block	fragment speeds
0000DEB4                            ;
0000DEB4 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DEB8 0600 FF00                  		dc.w $600, $FF00
0000DEBC 0600 0100                  		dc.w $600, $100
0000DEC0 0400 0500                  		dc.w $400, $500
0000DEC4 0600 FA00                  		dc.w $600, $FA00
0000DEC8 0800 FE00                  		dc.w $800, $FE00
0000DECC 0800 0200                  		dc.w $800, $200
0000DED0 0600 0600                  		dc.w $600, $600
0000DED4                            
0000DED4 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DED8 F800 FE00                  		dc.w $F800, $FE00
0000DEDC F800 0200                  		dc.w $F800, $200
0000DEE0 FA00 0600                  		dc.w $FA00, $600
0000DEE4 FC00 FB00                  		dc.w $FC00, $FB00
0000DEE8 FA00 FF00                  		dc.w $FA00, $FF00
0000DEEC FA00 0100                  		dc.w $FA00, $100
0000DEF0 FC00 0500                  		dc.w $FC00, $500
0000DEF4                            ; ---------------------------------------------------------------------------
0000DEF4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DEF4                            ; ---------------------------------------------------------------------------
0000DEF4                            Map_obj3C:
0000DEF4                            	include "_maps\obj3C.asm"
0000DEF4                            ; ---------------------------------------------------------------------------
0000DEF4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DEF4                            ; ---------------------------------------------------------------------------
0000DEF4 0000                       		dc.w byte_D2BC-Map_obj3C
0000DEF6 0000                       		dc.w byte_D2E5-Map_obj3C
0000DEF8 0000                       		dc.w byte_D30E-Map_obj3C
0000DEFA 08                         byte_D2BC:	dc.b 8
0000DEFB E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DF00 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DF05 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DF0A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DF0F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DF14 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DF19 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DF1E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DF23 08                         byte_D2E5:	dc.b 8
0000DF24 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DF29 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DF2E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DF33 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DF38 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DF3D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DF42 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DF47 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DF4C 08                         byte_D30E:	dc.b 8
0000DF4D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DF52 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DF57 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DF5C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DF61 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DF66 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DF6B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DF70 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DF76 00                         		even
0000DF76 00                         		even
0000DF76                            
0000DF76                            ; ---------------------------------------------------------------------------
0000DF76                            ; Object code loading subroutine
0000DF76                            ; ---------------------------------------------------------------------------
0000DF76                            
0000DF76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF76                            
0000DF76                            
0000DF76                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DF76 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DF7A 7E7F                       		moveq	#$7F,d7
0000DF7C 7000                       		moveq	#0,d0
0000DF7E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DF84 6400                       		bcc.s	loc_D362
0000DF86                            
0000DF86                            loc_D348:
0000DF86 1010                       		move.b	(a0),d0		; load object number from RAM
0000DF88 6700                       		beq.s	loc_D358
0000DF8A D040                       		add.w	d0,d0
0000DF8C D040                       		add.w	d0,d0
0000DF8E 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DF92 4E91                       		jsr	(a1)		; run the object's code
0000DF94 7000                       		moveq	#0,d0
0000DF96                            
0000DF96                            loc_D358:
0000DF96 41E8 0040                  		lea	$40(a0),a0	; next object
0000DF9A 51CF FFEA                  		dbf	d7,loc_D348
0000DF9E 4E75                       		rts	
0000DFA0                            ; ===========================================================================
0000DFA0                            
0000DFA0                            loc_D362:
0000DFA0 7E1F                       		moveq	#$1F,d7
0000DFA2 61E2                       		bsr.s	loc_D348
0000DFA4 7E5F                       		moveq	#$5F,d7
0000DFA6                            
0000DFA6                            loc_D368:
0000DFA6 7000                       		moveq	#0,d0
0000DFA8 1010                       		move.b	(a0),d0
0000DFAA 6700                       		beq.s	loc_D378
0000DFAC 4A28 0001                  		tst.b	1(a0)
0000DFB0 6A00                       		bpl.s	loc_D378
0000DFB2 6100 0000                  		bsr.w	DisplaySprite
0000DFB6                            
0000DFB6                            loc_D378:
0000DFB6 41E8 0040                  		lea	$40(a0),a0
0000DFBA                            
0000DFBA                            loc_D37C:
0000DFBA 51CF FFEA                  		dbf	d7,loc_D368
0000DFBE 4E75                       		rts	
0000DFC0                            ; End of function ObjectsLoad
0000DFC0                            
0000DFC0                            ; ===========================================================================
0000DFC0                            ; ---------------------------------------------------------------------------
0000DFC0                            ; Object pointers
0000DFC0                            ; ---------------------------------------------------------------------------
0000DFC0                            Obj_Index:
0000DFC0                            	include "_inc\Object pointers.asm"
0000DFC0                            ; ---------------------------------------------------------------------------
0000DFC0                            ; Object pointers
0000DFC0                            ; ---------------------------------------------------------------------------
0000DFC0 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DFD0 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DFE0 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DFF0 0000 0000 0000 B1E8 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E000 0000 7D92 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E010 0000 83B8 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E020 0000 8C06 0000 8D00 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E030 0000 934A 0000 9638 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E040 0000 0000 0000 A2E6 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E050 0000 A61E 0000 AC0C 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E060 0000 9F46 0000 9420 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E070 0000 B7DE 0000 AE00 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E080 0000 C1F4 0000 C8A2 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E090 0000 BD52 0000 DA6E 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E0A0 0000 D04E 0000 D108 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E0B0 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E0C0 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E0D0 0000 C510 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E0E0 0000 DD04 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E0F0 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E100 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E110 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E120 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E130 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E140 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E150 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E160 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E170 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E180 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E190 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E1A0 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E1B0 0000 0000 0000 D34A 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E1C0 0000 55DE 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E1D0 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E1E0 0000 5C98 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E1E0 0000 5C98 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E1F0                            
0000E1F0                            ; ---------------------------------------------------------------------------
0000E1F0                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E1F0                            ; ---------------------------------------------------------------------------
0000E1F0                            
0000E1F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1F0                            
0000E1F0                            
0000E1F0                            ObjectFall:
0000E1F0 7238                       		moveq	#$38,d1
0000E1F2                            
0000E1F2                            ObjectFallCustom:
0000E1F2 6100                       		bsr.s	SpeedToPos
0000E1F4 D368 0012                  		add.w	d1,$12(a0)
0000E1F8 4A38 FFF8                  		tst.b	($FFFFFFF8).w
0000E1FC 6A00                       		bpl.s	@62hz
0000E1FE 4A41                       		tst.w	d1
0000E200 6B00                       		bmi.s	@upward
0000E202 E449                       		lsr.w	#2,d1
0000E204 D368 0012                  		add.w	d1,$12(a0)
0000E208                            @62hz:
0000E208 4E75                       		rts
0000E20A                            @upward:
0000E20A 4441                       		neg.w	d1
0000E20C E449                       		lsr.w	#2,d1
0000E20E 9368 0012                  		sub.w	d1,$12(a0)
0000E212 4E75                       		rts
0000E214                            ; End of function ObjectFall
0000E214                            
0000E214                            ; ---------------------------------------------------------------------------
0000E214                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E214                            ; ---------------------------------------------------------------------------
0000E214                            
0000E214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E214                            
0000E214                            
0000E214                            ObjectFallNoJump:
0000E214 4CA8 0005 0010             		movem.w	$10(a0),d0/d2	; load horizontal speed
0000E21A E180                       		asl.l	#8,d0		; multiply speed by $100
0000E21C E182                       		asl.l	#8,d2		; multiply speed by $100
0000E21E D1A8 0008                  		add.l	d0,8(a0)	; update x-axis	position
0000E222 D5A8 000C                  		add.l	d2,$C(a0)	; update y-axis	position
0000E226 5868 000C                  		addq.w	#4,$C(a0)	; increase vertical speed
0000E22A 4E75                       		rts	
0000E22C                            
0000E22C                            ; End of function ObjectFall
0000E22C                            
0000E22C                            JumpFallSonic:
0000E22C 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000E232                                    
0000E232 E180                               asl.l    #8,d0                ; Apply X speed
0000E234 D1A8 0008                          add.l    d0,$8(a0)
0000E238                                    
0000E238 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000E23C 4A41                               tst.w    d1                ; Are we falling?
0000E23E 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000E240 4440                               neg.w    d0                ; Make Y movement go up
0000E242                                    
0000E242                            .SetYSpeed:
0000E242 48C0                               ext.l    d0                ; Apply Y speed
0000E244 E180                               asl.l    #8,d0
0000E246 D1A8 000C                          add.l    d0,$C(a0)
0000E24A 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000E250 4E75                               rts
0000E252                            
0000E252                            ; ---------------------------------------------------------------------------
0000E252                            ; Subroutine translating object	speed to update	object position
0000E252                            ; ---------------------------------------------------------------------------
0000E252                            
0000E252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E252                            
0000E252                            
0000E252                            SpeedToPos:
0000E252 4CA8 0005 0010             		movem.w	$10(a0),d0/d2	; load horizontal speed
0000E258 E180                       		asl.l	#8,d0		; multiply speed by $100
0000E25A E182                       		asl.l	#8,d2		; multiply speed by $100
0000E25C                            
0000E25C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
0000E260 6A00                       		bpl.s	@60hz
0000E262 2600                       		move.l	d0,d3
0000E264 6A00                       		bpl.s	@xflip
0000E266 4483                       		neg.l	d3
0000E268 E48B                       		lsr.l	#2,d3
0000E26A 9083                       		sub.l	d3,d0
0000E26C 6000                       		bra.s	@xcont
0000E26E                            @xflip:
0000E26E E48B                       		lsr.l	#2,d3
0000E270 D083                       		add.l	d3,d0
0000E272                            @xcont:
0000E272 2602                       		move.l	d2,d3
0000E274 6A00                       		bpl.s	@yflip
0000E276 4483                       		neg.l	d3
0000E278 E48B                       		lsr.l	#2,d3
0000E27A 9483                       		sub.l	d3,d2
0000E27C 6000                       		bra.s	@ycont
0000E27E                            @yflip:
0000E27E E48B                       		lsr.l	#2,d3
0000E280 D483                       		add.l	d3,d2
0000E282                            @ycont:
0000E282                            @60hz:
0000E282 D1A8 0008                  		add.l	d0,8(a0)	; update x-axis	position
0000E286 D5A8 000C                  		add.l	d2,$C(a0)	; update y-axis	position
0000E28A 4E75                       		rts	
0000E28C                            ; End of function SpeedToPos
0000E28C                            
0000E28C                            ; ---------------------------------------------------------------------------
0000E28C                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E28C                            ; ---------------------------------------------------------------------------
0000E28C                            
0000E28C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E28C                            
0000E28C                            
0000E28C                            DisplaySprite:
0000E28C 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E290 3028 0018                  		move.w	$18(a0),d0
0000E294 E248                       		lsr.w	#1,d0
0000E296 0240 0380                  		andi.w	#$380,d0
0000E29A D2C0                       		adda.w	d0,a1
0000E29C 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E2A0 6400                       		bcc.s	locret_D620
0000E2A2 5451                       		addq.w	#2,(a1)
0000E2A4 D2D1                       		adda.w	(a1),a1
0000E2A6 3288                       		move.w	a0,(a1)
0000E2A8                            
0000E2A8                            locret_D620:
0000E2A8 4E75                       		rts	
0000E2AA                            ; End of function DisplaySprite
0000E2AA                            
0000E2AA                            ; ---------------------------------------------------------------------------
0000E2AA                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E2AA                            ; ---------------------------------------------------------------------------
0000E2AA                            
0000E2AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2AA                            
0000E2AA                            
0000E2AA                            DisplaySprite2:
0000E2AA 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E2AE 3029 0018                  		move.w	$18(a1),d0
0000E2B2 E248                       		lsr.w	#1,d0
0000E2B4 0240 0380                  		andi.w	#$380,d0
0000E2B8 D4C0                       		adda.w	d0,a2
0000E2BA 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E2BE 6400                       		bcc.s	locret_D63E
0000E2C0 5452                       		addq.w	#2,(a2)
0000E2C2 D4D2                       		adda.w	(a2),a2
0000E2C4 3489                       		move.w	a1,(a2)
0000E2C6                            
0000E2C6                            locret_D63E:
0000E2C6 4E75                       		rts	
0000E2C8                            ; End of function DisplaySprite2
0000E2C8                            
0000E2C8                            ; ---------------------------------------------------------------------------
0000E2C8                            ; Subroutine to	delete an object
0000E2C8                            ; ---------------------------------------------------------------------------
0000E2C8                            
0000E2C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2C8                            
0000E2C8                            
0000E2C8                            DeleteObject:
0000E2C8 2248                       		movea.l	a0,a1
0000E2CA                            
0000E2CA                            DeleteObject2:
0000E2CA 7200                       		moveq	#0,d1
0000E2CC 700F                       		moveq	#$F,d0
0000E2CE                            
0000E2CE                            loc_D646:
0000E2CE 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E2D0 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E2D4 4E75                       		rts	
0000E2D6                            ; End of function DeleteObject
0000E2D6                            
0000E2D6                            ; ===========================================================================
0000E2D6 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E2DA 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E2DE 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E2E2 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E2E6                            ; ---------------------------------------------------------------------------
0000E2E6                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E2E6                            ; ---------------------------------------------------------------------------
0000E2E6                            
0000E2E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2E6                            
0000E2E6                            
0000E2E6                            BuildSprites:				; XREF: TitleScreen; et al
0000E2E6 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E2EA 7A00                       		moveq	#0,d5
0000E2EC 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E2F0 7E07                       		moveq	#7,d7
0000E2F2                            
0000E2F2                            loc_D66A:
0000E2F2 4A54                       		tst.w	(a4)
0000E2F4 6700 0000                  		beq.w	loc_D72E
0000E2F8 7C02                       		moveq	#2,d6
0000E2FA                            
0000E2FA                            loc_D672:
0000E2FA 3074 6000                  		movea.w	(a4,d6.w),a0
0000E2FE 4A10                       		tst.b	(a0)
0000E300 6700 0000                  		beq.w	loc_D726
0000E304 08A8 0007 0001             		bclr	#7,1(a0)
0000E30A 1028 0001                  		move.b	1(a0),d0
0000E30E 1800                       		move.b	d0,d4
0000E310 0240 000C                  		andi.w	#$C,d0
0000E314 6700                       		beq.s	loc_D6DE
0000E316 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E31A 7000                       		moveq	#0,d0
0000E31C 1028 0019                  		move.b	$19(a0),d0
0000E320 3628 0008                  		move.w	8(a0),d3
0000E324 9651                       		sub.w	(a1),d3
0000E326 3203                       		move.w	d3,d1
0000E328 D240                       		add.w	d0,d1
0000E32A 6B00 0000                  		bmi.w	loc_D726
0000E32E 3203                       		move.w	d3,d1
0000E330 9240                       		sub.w	d0,d1
0000E332 0C41 0140                  		cmpi.w	#$140,d1
0000E336 6C00                       		bge.s	loc_D726
0000E338 0643 0080                  		addi.w	#$80,d3
0000E33C 0804 0004                  		btst	#4,d4
0000E340 6700                       		beq.s	loc_D6E8
0000E342 7000                       		moveq	#0,d0
0000E344 1028 0016                  		move.b	$16(a0),d0
0000E348 3428 000C                  		move.w	$C(a0),d2
0000E34C 9469 0004                  		sub.w	4(a1),d2
0000E350 3202                       		move.w	d2,d1
0000E352 D240                       		add.w	d0,d1
0000E354 6B00                       		bmi.s	loc_D726
0000E356 3202                       		move.w	d2,d1
0000E358 9240                       		sub.w	d0,d1
0000E35A 0C41 00E0                  		cmpi.w	#$E0,d1
0000E35E 6C00                       		bge.s	loc_D726
0000E360 0642 0080                  		addi.w	#$80,d2
0000E364 6000                       		bra.s	loc_D700
0000E366                            ; ===========================================================================
0000E366                            
0000E366                            loc_D6DE:
0000E366 3428 000A                  		move.w	$A(a0),d2
0000E36A 3628 0008                  		move.w	8(a0),d3
0000E36E 6000                       		bra.s	loc_D700
0000E370                            ; ===========================================================================
0000E370                            
0000E370                            loc_D6E8:
0000E370 3428 000C                  		move.w	$C(a0),d2
0000E374 9469 0004                  		sub.w	4(a1),d2
0000E378 0642 0080                  		addi.w	#$80,d2
0000E37C 0C42 0060                  		cmpi.w	#$60,d2
0000E380 6500                       		bcs.s	loc_D726
0000E382 0C42 0180                  		cmpi.w	#$180,d2
0000E386 6400                       		bcc.s	loc_D726
0000E388                            
0000E388                            loc_D700:
0000E388 2268 0004                  		movea.l	4(a0),a1
0000E38C 7200                       		moveq	#0,d1
0000E38E 0804 0005                  		btst	#5,d4
0000E392 6600                       		bne.s	loc_D71C
0000E394 1228 001A                  		move.b	$1A(a0),d1
0000E398 D201                       		add.b	d1,d1
0000E39A D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E39E 1219                       		move.b	(a1)+,d1
0000E3A0 5301                       		subq.b	#1,d1
0000E3A2 6B00                       		bmi.s	loc_D720
0000E3A4                            
0000E3A4                            loc_D71C:
0000E3A4 6100 0000                  		bsr.w	sub_D750
0000E3A8                            
0000E3A8                            loc_D720:
0000E3A8 08E8 0007 0001             		bset	#7,1(a0)
0000E3AE                            
0000E3AE                            loc_D726:
0000E3AE 5446                       		addq.w	#2,d6
0000E3B0 5554                       		subq.w	#2,(a4)
0000E3B2 6600 FF46                  		bne.w	loc_D672
0000E3B6                            
0000E3B6                            loc_D72E:
0000E3B6 49EC 0080                  		lea	$80(a4),a4
0000E3BA 51CF FF36                  		dbf	d7,loc_D66A
0000E3BE 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E3C2 0C05 0050                  		cmpi.b	#$50,d5
0000E3C6 6700                       		beq.s	loc_D748
0000E3C8 24BC 0000 0000             		move.l	#0,(a2)
0000E3CE 4E75                       		rts	
0000E3D0                            ; ===========================================================================
0000E3D0                            
0000E3D0                            loc_D748:
0000E3D0 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E3D6 4E75                       		rts	
0000E3D8                            ; End of function BuildSprites
0000E3D8                            
0000E3D8                            
0000E3D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3D8                            
0000E3D8                            
0000E3D8                            sub_D750:				; XREF: BuildSprites
0000E3D8 3668 0002                  		movea.w	2(a0),a3
0000E3DC 0804 0000                  		btst	#0,d4
0000E3E0 6600                       		bne.s	loc_D796
0000E3E2 0804 0001                  		btst	#1,d4
0000E3E6 6600 0000                  		bne.w	loc_D7E4
0000E3EA                            ; End of function sub_D750
0000E3EA                            
0000E3EA                            
0000E3EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3EA                            
0000E3EA                            
0000E3EA                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E3EA 0C05 0050                  		cmpi.b	#$50,d5
0000E3EE 6700                       		beq.s	locret_D794
0000E3F0 1019                       		move.b	(a1)+,d0
0000E3F2 4880                       		ext.w	d0
0000E3F4 D042                       		add.w	d2,d0
0000E3F6 34C0                       		move.w	d0,(a2)+
0000E3F8 14D9                       		move.b	(a1)+,(a2)+
0000E3FA 5205                       		addq.b	#1,d5
0000E3FC 14C5                       		move.b	d5,(a2)+
0000E3FE 1019                       		move.b	(a1)+,d0
0000E400 E148                       		lsl.w	#8,d0
0000E402 1019                       		move.b	(a1)+,d0
0000E404 D04B                       		add.w	a3,d0
0000E406 34C0                       		move.w	d0,(a2)+
0000E408 1019                       		move.b	(a1)+,d0
0000E40A 4880                       		ext.w	d0
0000E40C D043                       		add.w	d3,d0
0000E40E 0240 01FF                  		andi.w	#$1FF,d0
0000E412 6600                       		bne.s	loc_D78E
0000E414 5240                       		addq.w	#1,d0
0000E416                            
0000E416                            loc_D78E:
0000E416 34C0                       		move.w	d0,(a2)+
0000E418 51C9 FFD0                  		dbf	d1,sub_D762
0000E41C                            
0000E41C                            locret_D794:
0000E41C 4E75                       		rts	
0000E41E                            ; End of function sub_D762
0000E41E                            
0000E41E                            ; ===========================================================================
0000E41E                            
0000E41E                            loc_D796:
0000E41E 0804 0001                  		btst	#1,d4
0000E422 6600 0000                  		bne.w	loc_D82A
0000E426                            
0000E426                            loc_D79E:
0000E426 0C05 0050                  		cmpi.b	#$50,d5
0000E42A 6700                       		beq.s	locret_D7E2
0000E42C 1019                       		move.b	(a1)+,d0
0000E42E 4880                       		ext.w	d0
0000E430 D042                       		add.w	d2,d0
0000E432 34C0                       		move.w	d0,(a2)+
0000E434 1819                       		move.b	(a1)+,d4
0000E436 14C4                       		move.b	d4,(a2)+
0000E438 5205                       		addq.b	#1,d5
0000E43A 14C5                       		move.b	d5,(a2)+
0000E43C 1019                       		move.b	(a1)+,d0
0000E43E E148                       		lsl.w	#8,d0
0000E440 1019                       		move.b	(a1)+,d0
0000E442 D04B                       		add.w	a3,d0
0000E444 0A40 0800                  		eori.w	#$800,d0
0000E448 34C0                       		move.w	d0,(a2)+
0000E44A 1019                       		move.b	(a1)+,d0
0000E44C 4880                       		ext.w	d0
0000E44E 4440                       		neg.w	d0
0000E450 D804                       		add.b	d4,d4
0000E452 0244 0018                  		andi.w	#$18,d4
0000E456 5044                       		addq.w	#8,d4
0000E458 9044                       		sub.w	d4,d0
0000E45A D043                       		add.w	d3,d0
0000E45C 0240 01FF                  		andi.w	#$1FF,d0
0000E460 6600                       		bne.s	loc_D7DC
0000E462 5240                       		addq.w	#1,d0
0000E464                            
0000E464                            loc_D7DC:
0000E464 34C0                       		move.w	d0,(a2)+
0000E466 51C9 FFBE                  		dbf	d1,loc_D79E
0000E46A                            
0000E46A                            locret_D7E2:
0000E46A 4E75                       		rts	
0000E46C                            ; ===========================================================================
0000E46C                            
0000E46C                            loc_D7E4:				; XREF: sub_D750
0000E46C 0C05 0050                  		cmpi.b	#$50,d5
0000E470 6700                       		beq.s	locret_D828
0000E472 1019                       		move.b	(a1)+,d0
0000E474 1811                       		move.b	(a1),d4
0000E476 4880                       		ext.w	d0
0000E478 4440                       		neg.w	d0
0000E47A E70C                       		lsl.b	#3,d4
0000E47C 0244 0018                  		andi.w	#$18,d4
0000E480 5044                       		addq.w	#8,d4
0000E482 9044                       		sub.w	d4,d0
0000E484 D042                       		add.w	d2,d0
0000E486 34C0                       		move.w	d0,(a2)+
0000E488 14D9                       		move.b	(a1)+,(a2)+
0000E48A 5205                       		addq.b	#1,d5
0000E48C 14C5                       		move.b	d5,(a2)+
0000E48E 1019                       		move.b	(a1)+,d0
0000E490 E148                       		lsl.w	#8,d0
0000E492 1019                       		move.b	(a1)+,d0
0000E494 D04B                       		add.w	a3,d0
0000E496 0A40 1000                  		eori.w	#$1000,d0
0000E49A 34C0                       		move.w	d0,(a2)+
0000E49C 1019                       		move.b	(a1)+,d0
0000E49E 4880                       		ext.w	d0
0000E4A0 D043                       		add.w	d3,d0
0000E4A2 0240 01FF                  		andi.w	#$1FF,d0
0000E4A6 6600                       		bne.s	loc_D822
0000E4A8 5240                       		addq.w	#1,d0
0000E4AA                            
0000E4AA                            loc_D822:
0000E4AA 34C0                       		move.w	d0,(a2)+
0000E4AC 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E4B0                            
0000E4B0                            locret_D828:
0000E4B0 4E75                       		rts	
0000E4B2                            ; ===========================================================================
0000E4B2                            
0000E4B2                            loc_D82A:
0000E4B2 0C05 0050                  		cmpi.b	#$50,d5
0000E4B6 6700                       		beq.s	locret_D87C
0000E4B8 1019                       		move.b	(a1)+,d0
0000E4BA 1811                       		move.b	(a1),d4
0000E4BC 4880                       		ext.w	d0
0000E4BE 4440                       		neg.w	d0
0000E4C0 E70C                       		lsl.b	#3,d4
0000E4C2 0244 0018                  		andi.w	#$18,d4
0000E4C6 5044                       		addq.w	#8,d4
0000E4C8 9044                       		sub.w	d4,d0
0000E4CA D042                       		add.w	d2,d0
0000E4CC 34C0                       		move.w	d0,(a2)+
0000E4CE 1819                       		move.b	(a1)+,d4
0000E4D0 14C4                       		move.b	d4,(a2)+
0000E4D2 5205                       		addq.b	#1,d5
0000E4D4 14C5                       		move.b	d5,(a2)+
0000E4D6 1019                       		move.b	(a1)+,d0
0000E4D8 E148                       		lsl.w	#8,d0
0000E4DA 1019                       		move.b	(a1)+,d0
0000E4DC D04B                       		add.w	a3,d0
0000E4DE 0A40 1800                  		eori.w	#$1800,d0
0000E4E2 34C0                       		move.w	d0,(a2)+
0000E4E4 1019                       		move.b	(a1)+,d0
0000E4E6 4880                       		ext.w	d0
0000E4E8 4440                       		neg.w	d0
0000E4EA D804                       		add.b	d4,d4
0000E4EC 0244 0018                  		andi.w	#$18,d4
0000E4F0 5044                       		addq.w	#8,d4
0000E4F2 9044                       		sub.w	d4,d0
0000E4F4 D043                       		add.w	d3,d0
0000E4F6 0240 01FF                  		andi.w	#$1FF,d0
0000E4FA 6600                       		bne.s	loc_D876
0000E4FC 5240                       		addq.w	#1,d0
0000E4FE                            
0000E4FE                            loc_D876:
0000E4FE 34C0                       		move.w	d0,(a2)+
0000E500 51C9 FFB0                  		dbf	d1,loc_D82A
0000E504                            
0000E504                            locret_D87C:
0000E504 4E75                       		rts	
0000E506                            ; ---------------------------------------------------------------------------
0000E506                            ; Subroutine to	check if an object is on the screen
0000E506                            ; ---------------------------------------------------------------------------
0000E506                            
0000E506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E506                            
0000E506                            
0000E506                            ChkObjOnScreen:
0000E506 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E50A 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E50E 6B00                       		bmi.s	NotOnScreen
0000E510 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E514 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E516                            
0000E516 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E51A 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E51E 6B00                       		bmi.s	NotOnScreen
0000E520 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E524 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E526                            
0000E526 7000                       		moveq	#0,d0		; set flag to 0
0000E528 4E75                       		rts	
0000E52A                            ; ===========================================================================
0000E52A                            
0000E52A                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E52A 7001                       		moveq	#1,d0		; set flag to 1
0000E52C 4E75                       		rts	
0000E52E                            ; End of function ChkObjOnScreen
0000E52E                            
0000E52E                            
0000E52E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E52E                            
0000E52E                            
0000E52E                            ChkObjOnScreen2:
0000E52E 7200                       		moveq	#0,d1
0000E530 1228 0019                  		move.b	$19(a0),d1
0000E534 3028 0008                  		move.w	8(a0),d0
0000E538 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E53C D041                       		add.w	d1,d0
0000E53E 6B00                       		bmi.s	NotOnScreen2
0000E540 D241                       		add.w	d1,d1
0000E542 9041                       		sub.w	d1,d0
0000E544 0C40 0140                  		cmpi.w	#320,d0
0000E548 6C00                       		bge.s	NotOnScreen2
0000E54A                            
0000E54A 3228 000C                  		move.w	$C(a0),d1
0000E54E 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E552 6B00                       		bmi.s	NotOnScreen2
0000E554 0C41 00E0                  		cmpi.w	#224,d1
0000E558 6C00                       		bge.s	NotOnScreen2
0000E55A                            
0000E55A 7000                       		moveq	#0,d0
0000E55C 4E75                       		rts	
0000E55E                            ; ===========================================================================
0000E55E                            
0000E55E                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E55E 7001                       		moveq	#1,d0
0000E560 4E75                       		rts	
0000E562                            ; End of function ChkObjOnScreen2
0000E562                            
0000E562                            ; ---------------------------------------------------------------------------
0000E562                            ; Subroutine to	load a level's objects
0000E562                            ; ---------------------------------------------------------------------------
0000E562                            
0000E562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E562                            
0000E562                            
0000E562                            ObjPosLoad:				; XREF: Level; et al
0000E562 7000                       		moveq	#0,d0
0000E564 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E568 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E56C 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E570                            ; End of function ObjPosLoad
0000E570                            
0000E570                            ; ===========================================================================
0000E570 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E572 0000                       		dc.w OPL_Next-OPL_Index
0000E574                            ; ===========================================================================
0000E574                            
0000E574                            OPL_Main:				; XREF: OPL_Index
0000E574 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E578 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E57C ED08                       		lsl.b	#6,d0
0000E57E E848                       		lsr.w	#4,d0
0000E580 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E586 2248                       		movea.l	a0,a1
0000E588 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E58C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E590 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E594 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E598 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E59C 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E5A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E5A4 34FC 0101                  		move.w	#$101,(a2)+
0000E5A8 303C 005E                  		move.w	#$5E,d0
0000E5AC                            
0000E5AC                            OPL_ClrList:
0000E5AC 429A                       		clr.l	(a2)+
0000E5AE 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E5B2                            
0000E5B2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E5B6 7400                       		moveq	#0,d2
0000E5B8 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E5BC 0446 0080                  		subi.w	#$80,d6
0000E5C0 6400                       		bcc.s	loc_D93C
0000E5C2 7C00                       		moveq	#0,d6
0000E5C4                            
0000E5C4                            loc_D93C:
0000E5C4 0246 FF80                  		andi.w	#$FF80,d6
0000E5C8 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E5CC                            
0000E5CC                            loc_D944:
0000E5CC BC50                       		cmp.w	(a0),d6
0000E5CE 6300                       		bls.s	loc_D956
0000E5D0 4A28 0004                  		tst.b	4(a0)
0000E5D4 6A00                       		bpl.s	loc_D952
0000E5D6 1412                       		move.b	(a2),d2
0000E5D8 5212                       		addq.b	#1,(a2)
0000E5DA                            
0000E5DA                            loc_D952:
0000E5DA 5C48                       		addq.w	#6,a0
0000E5DC 60EE                       		bra.s	loc_D944
0000E5DE                            ; ===========================================================================
0000E5DE                            
0000E5DE                            loc_D956:
0000E5DE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E5E2 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E5E6 0446 0080                  		subi.w	#$80,d6
0000E5EA 6500                       		bcs.s	loc_D976
0000E5EC                            
0000E5EC                            loc_D964:
0000E5EC BC50                       		cmp.w	(a0),d6
0000E5EE 6300                       		bls.s	loc_D976
0000E5F0 4A28 0004                  		tst.b	4(a0)
0000E5F4 6A00                       		bpl.s	loc_D972
0000E5F6 522A 0001                  		addq.b	#1,1(a2)
0000E5FA                            
0000E5FA                            loc_D972:
0000E5FA 5C48                       		addq.w	#6,a0
0000E5FC 60EE                       		bra.s	loc_D964
0000E5FE                            ; ===========================================================================
0000E5FE                            
0000E5FE                            loc_D976:
0000E5FE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E602 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E608                            
0000E608                            OPL_Next:				; XREF: OPL_Index
0000E608 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E60C 7400                       		moveq	#0,d2
0000E60E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E612 0246 FF80                  		andi.w	#$FF80,d6
0000E616 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E61A 6700 0000                  		beq.w	locret_DA3A
0000E61E 6C00                       		bge.s	loc_D9F6
0000E620 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E624 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E628 0446 0080                  		subi.w	#$80,d6
0000E62C 6500                       		bcs.s	loc_D9D2
0000E62E                            
0000E62E                            loc_D9A6:
0000E62E BC68 FFFA                  		cmp.w	-6(a0),d6
0000E632 6C00                       		bge.s	loc_D9D2
0000E634 5D48                       		subq.w	#6,a0
0000E636 4A28 0004                  		tst.b	4(a0)
0000E63A 6A00                       		bpl.s	loc_D9BC
0000E63C 532A 0001                  		subq.b	#1,1(a2)
0000E640 142A 0001                  		move.b	1(a2),d2
0000E644                            
0000E644                            loc_D9BC:
0000E644 6100 0000                  		bsr.w	loc_DA3C
0000E648 6600                       		bne.s	loc_D9C6
0000E64A 5D48                       		subq.w	#6,a0
0000E64C 60E0                       		bra.s	loc_D9A6
0000E64E                            ; ===========================================================================
0000E64E                            
0000E64E                            loc_D9C6:
0000E64E 4A28 0004                  		tst.b	4(a0)
0000E652 6A00                       		bpl.s	loc_D9D0
0000E654 522A 0001                  		addq.b	#1,1(a2)
0000E658                            
0000E658                            loc_D9D0:
0000E658 5C48                       		addq.w	#6,a0
0000E65A                            
0000E65A                            loc_D9D2:
0000E65A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E65E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E662 0646 0300                  		addi.w	#$300,d6
0000E666                            
0000E666                            loc_D9DE:
0000E666 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E66A 6E00                       		bgt.s	loc_D9F0
0000E66C 4A28 FFFE                  		tst.b	-2(a0)
0000E670 6A00                       		bpl.s	loc_D9EC
0000E672 5312                       		subq.b	#1,(a2)
0000E674                            
0000E674                            loc_D9EC:
0000E674 5D48                       		subq.w	#6,a0
0000E676 60EE                       		bra.s	loc_D9DE
0000E678                            ; ===========================================================================
0000E678                            
0000E678                            loc_D9F0:
0000E678 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E67C 4E75                       		rts	
0000E67E                            ; ===========================================================================
0000E67E                            
0000E67E                            loc_D9F6:
0000E67E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E682 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E686 0646 0280                  		addi.w	#$280,d6
0000E68A                            
0000E68A                            loc_DA02:
0000E68A BC50                       		cmp.w	(a0),d6
0000E68C 6300                       		bls.s	loc_DA16
0000E68E 4A28 0004                  		tst.b	4(a0)
0000E692 6A00                       		bpl.s	loc_DA10
0000E694 1412                       		move.b	(a2),d2
0000E696 5212                       		addq.b	#1,(a2)
0000E698                            
0000E698                            loc_DA10:
0000E698 6100 0000                  		bsr.w	loc_DA3C
0000E69C 67EC                       		beq.s	loc_DA02
0000E69E                            
0000E69E                            loc_DA16:
0000E69E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E6A2 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E6A6 0446 0300                  		subi.w	#$300,d6
0000E6AA 6500                       		bcs.s	loc_DA36
0000E6AC                            
0000E6AC                            loc_DA24:
0000E6AC BC50                       		cmp.w	(a0),d6
0000E6AE 6300                       		bls.s	loc_DA36
0000E6B0 4A28 0004                  		tst.b	4(a0)
0000E6B4 6A00                       		bpl.s	loc_DA32
0000E6B6 522A 0001                  		addq.b	#1,1(a2)
0000E6BA                            
0000E6BA                            loc_DA32:
0000E6BA 5C48                       		addq.w	#6,a0
0000E6BC 60EE                       		bra.s	loc_DA24
0000E6BE                            ; ===========================================================================
0000E6BE                            
0000E6BE                            loc_DA36:
0000E6BE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E6C2                            
0000E6C2                            locret_DA3A:
0000E6C2 4E75                       		rts	
0000E6C4                            ; ===========================================================================
0000E6C4                            
0000E6C4                            loc_DA3C:
0000E6C4 4A28 0004                  		tst.b	4(a0)
0000E6C8 6A00                       		bpl.s	OPL_MakeItem
0000E6CA 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E6D0 6700                       		beq.s	OPL_MakeItem
0000E6D2 5C48                       		addq.w	#6,a0
0000E6D4 7000                       		moveq	#0,d0
0000E6D6 4E75                       		rts	
0000E6D8                            ; ===========================================================================
0000E6D8                            
0000E6D8                            OPL_MakeItem:
0000E6D8 6100 0000                  		bsr.w	SingleObjLoad
0000E6DC 6600                       		bne.s	locret_DA8A
0000E6DE 3358 0008                  		move.w	(a0)+,8(a1)
0000E6E2 3018                       		move.w	(a0)+,d0
0000E6E4 3200                       		move.w	d0,d1
0000E6E6 0240 0FFF                  		andi.w	#$FFF,d0
0000E6EA 3340 000C                  		move.w	d0,$C(a1)
0000E6EE E559                       		rol.w	#2,d1
0000E6F0 0201 0003                  		andi.b	#3,d1
0000E6F4 1341 0001                  		move.b	d1,1(a1)
0000E6F8 1341 0022                  		move.b	d1,$22(a1)
0000E6FC 1018                       		move.b	(a0)+,d0
0000E6FE 6A00                       		bpl.s	loc_DA80
0000E700 0200 007F                  		andi.b	#$7F,d0
0000E704 1342 0023                  		move.b	d2,$23(a1)
0000E708                            
0000E708                            loc_DA80:
0000E708 1280                       		move.b	d0,0(a1)
0000E70A 1358 0028                  		move.b	(a0)+,$28(a1)
0000E70E 7000                       		moveq	#0,d0
0000E710                            
0000E710                            locret_DA8A:
0000E710 4E75                       		rts	
0000E712                            ; ---------------------------------------------------------------------------
0000E712                            ; Single object	loading	subroutine
0000E712                            ; ---------------------------------------------------------------------------
0000E712                            
0000E712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E712                            
0000E712                            
0000E712                            SingleObjLoad:
0000E712 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E716 303C 005F                  		move.w	#$5F,d0
0000E71A                            
0000E71A                            loc_DA94:
0000E71A 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E71C 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E71E 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E722 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E726                            
0000E726                            locret_DAA0:
0000E726 4E75                       		rts	
0000E728                            ; End of function SingleObjLoad
0000E728                            
0000E728                            
0000E728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E728                            
0000E728                            
0000E728                            SingleObjLoad2:
0000E728 2248                       		movea.l	a0,a1
0000E72A 303C F000                  		move.w	#-$1000,d0
0000E72E 9048                       		sub.w	a0,d0
0000E730 EC48                       		lsr.w	#6,d0
0000E732 5340                       		subq.w	#1,d0
0000E734 6500                       		bcs.s	locret_DABC
0000E736                            
0000E736                            loc_DAB0:
0000E736 4A11                       		tst.b	(a1)
0000E738 6700                       		beq.s	locret_DABC
0000E73A 43E9 0040                  		lea	$40(a1),a1
0000E73E 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E742                            
0000E742                            locret_DABC:
0000E742 4E75                       		rts	
0000E744                            ; End of function SingleObjLoad2
0000E744                            
0000E744                            ; ===========================================================================
0000E744                            ; ---------------------------------------------------------------------------
0000E744                            ; Object 41 - springs
0000E744                            ; ---------------------------------------------------------------------------
0000E744                            
0000E744                            Obj41:					; XREF: Obj_Index
0000E744 7000                       		moveq	#0,d0
0000E746 1028 0024                  		move.b	$24(a0),d0
0000E74A 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E74E 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E752 6100 FB38                  		bsr.w	DisplaySprite
0000E756 3028 0008                  		move.w	8(a0),d0
0000E75A 0240 FF80                  		andi.w	#$FF80,d0
0000E75E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E762 0441 0080                  		subi.w	#$80,d1
0000E766 0241 FF80                  		andi.w	#$FF80,d1
0000E76A 9041                       		sub.w	d1,d0
0000E76C 0C40 0280                  		cmpi.w	#$280,d0
0000E770 6200 FB56                  		bhi.w	DeleteObject
0000E774 4E75                       		rts	
0000E776                            ; ===========================================================================
0000E776 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E778 0000                       		dc.w Obj41_Up-Obj41_Index
0000E77A 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E77C 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E77E 0000                       		dc.w Obj41_LR-Obj41_Index
0000E780 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E782 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E784 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E786 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E788 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E78A                            
0000E78A F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E78C F600                       		dc.w -$A00		; power	of yellow spring
0000E78E                            ; ===========================================================================
0000E78E                            
0000E78E                            Obj41_Main:				; XREF: Obj41_Index
0000E78E 5428 0024                  		addq.b	#2,$24(a0)
0000E792 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E79A 317C 0523 0002             		move.w	#$523,2(a0)
0000E7A0 0028 0004 0001             		ori.b	#4,1(a0)
0000E7A6 117C 0010 0019             		move.b	#$10,$19(a0)
0000E7AC 117C 0004 0018             		move.b	#4,$18(a0)
0000E7B2 1028 0028                  		move.b	$28(a0),d0
0000E7B6 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E7BA 6700                       		beq.s	loc_DB54	; if not, branch
0000E7BC 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E7C2 117C 0001 001C             		move.b	#1,$1C(a0)
0000E7C8 117C 0003 001A             		move.b	#3,$1A(a0)
0000E7CE 317C 0533 0002             		move.w	#$533,2(a0)
0000E7D4 117C 0008 0019             		move.b	#8,$19(a0)
0000E7DA                            
0000E7DA                            loc_DB54:
0000E7DA 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E7DE 6700                       		beq.s	loc_DB66	; if not, branch
0000E7E0 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E7E6 08E8 0001 0022             		bset	#1,$22(a0)
0000E7EC                            
0000E7EC                            loc_DB66:
0000E7EC 0800 0001                  		btst	#1,d0
0000E7F0 6700                       		beq.s	loc_DB72
0000E7F2 08E8 0005 0002             		bset	#5,2(a0)
0000E7F8                            
0000E7F8                            loc_DB72:
0000E7F8 0240 000F                  		andi.w	#$F,d0
0000E7FC 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E802 4E75                       		rts	
0000E804                            ; ===========================================================================
0000E804                            
0000E804                            Obj41_Up:				; XREF: Obj41_Index
0000E804 323C 001B                  		move.w	#$1B,d1
0000E808 343C 0008                  		move.w	#8,d2
0000E80C 363C 0010                  		move.w	#$10,d3
0000E810 3828 0008                  		move.w	8(a0),d4
0000E814 6100 0000                  		bsr.w	SolidObject
0000E818 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E81C 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E81E 4E75                       		rts	
0000E820                            ; ===========================================================================
0000E820                            
0000E820                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E820 5428 0024                  		addq.b	#2,$24(a0)
0000E824 5069 000C                  		addq.w	#8,$C(a1)
0000E828 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E82E 08E9 0001 0022             		bset	#1,$22(a1)
0000E834 08A9 0003 0022             		bclr	#3,$22(a1)
0000E83A 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E840 137C 0002 0024             		move.b	#2,$24(a1)
0000E846 08A8 0003 0022             		bclr	#3,$22(a0)
0000E84C 4228 0025                  		clr.b	$25(a0)
0000E850 303C 00CC                  		move.w	#$CC,d0
0000E854 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play spring sound
0000E85A                            
0000E85A                            Obj41_AniUp:				; XREF: Obj41_Index
0000E85A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E860 6000 CA82                  		bra.w	AnimateSprite
0000E864                            ; ===========================================================================
0000E864                            
0000E864                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E864 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E86A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E86E 4E75                       		rts	
0000E870                            ; ===========================================================================
0000E870                            
0000E870                            Obj41_LR:				; XREF: Obj41_Index
0000E870 323C 0013                  		move.w	#$13,d1
0000E874 343C 000E                  		move.w	#$E,d2
0000E878 363C 000F                  		move.w	#$F,d3
0000E87C 3828 0008                  		move.w	8(a0),d4
0000E880 6100 0000                  		bsr.w	SolidObject
0000E884 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E88A 6600                       		bne.s	loc_DC0C
0000E88C 117C 0008 0024             		move.b	#8,$24(a0)
0000E892                            
0000E892                            loc_DC0C:
0000E892 0828 0005 0022             		btst	#5,$22(a0)
0000E898 6600                       		bne.s	Obj41_BounceLR
0000E89A 4E75                       		rts	
0000E89C                            ; ===========================================================================
0000E89C                            
0000E89C                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E89C 5428 0024                  		addq.b	#2,$24(a0)
0000E8A0 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E8A6 5069 0008                  		addq.w	#8,8(a1)
0000E8AA 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E8B0 6600                       		bne.s	loc_DC36	; if yes, branch
0000E8B2 0469 0010 0008             		subi.w	#$10,8(a1)
0000E8B8 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E8BC                            
0000E8BC                            loc_DC36:
0000E8BC 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E8C2 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E8C8 0869 0000 0022             		bchg	#0,$22(a1)
0000E8CE 0829 0002 0022             		btst	#2,$22(a1)
0000E8D4 6600                       		bne.s	loc_DC56
0000E8D6 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E8DC                            
0000E8DC                            loc_DC56:
0000E8DC 08A8 0005 0022             		bclr	#5,$22(a0)
0000E8E2 08A9 0005 0022             		bclr	#5,$22(a1)
0000E8E8 303C 00CC                  		move.w	#$CC,d0
0000E8EC 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play spring sound
0000E8F2                            
0000E8F2                            Obj41_AniLR:				; XREF: Obj41_Index
0000E8F2 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E8F8 6000 C9EA                  		bra.w	AnimateSprite
0000E8FC                            ; ===========================================================================
0000E8FC                            
0000E8FC                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E8FC 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E902 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E906 4E75                       		rts	
0000E908                            ; ===========================================================================
0000E908                            
0000E908                            Obj41_Dwn:				; XREF: Obj41_Index
0000E908 323C 001B                  		move.w	#$1B,d1
0000E90C 343C 0008                  		move.w	#8,d2
0000E910 363C 0010                  		move.w	#$10,d3
0000E914 3828 0008                  		move.w	8(a0),d4
0000E918 6100 0000                  		bsr.w	SolidObject
0000E91C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E922 6600                       		bne.s	loc_DCA4
0000E924 117C 000E 0024             		move.b	#$E,$24(a0)
0000E92A                            
0000E92A                            loc_DCA4:
0000E92A 4A28 0025                  		tst.b	$25(a0)
0000E92E 6600                       		bne.s	locret_DCAE
0000E930 4A44                       		tst.w	d4
0000E932 6B00                       		bmi.s	Obj41_BounceDwn
0000E934                            
0000E934                            locret_DCAE:
0000E934 4E75                       		rts	
0000E936                            ; ===========================================================================
0000E936                            
0000E936                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E936 5428 0024                  		addq.b	#2,$24(a0)
0000E93A 5169 000C                  		subq.w	#8,$C(a1)
0000E93E 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E944 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E948 08E9 0001 0022             		bset	#1,$22(a1)
0000E94E 08A9 0003 0022             		bclr	#3,$22(a1)
0000E954 137C 0002 0024             		move.b	#2,$24(a1)
0000E95A 08A8 0003 0022             		bclr	#3,$22(a0)
0000E960 4228 0025                  		clr.b	$25(a0)
0000E964 303C 00CC                  		move.w	#$CC,d0
0000E968 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play spring sound
0000E96E                            
0000E96E                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E96E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E974 6000 C96E                  		bra.w	AnimateSprite
0000E978                            ; ===========================================================================
0000E978                            
0000E978                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E978 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E97E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E982 4E75                       		rts	
0000E984                            ; ===========================================================================
0000E984                            Ani_obj41:
0000E984                            	include "_anim\obj41.asm"
0000E984                            ; ---------------------------------------------------------------------------
0000E984                            ; Animation script - springs
0000E984                            ; ---------------------------------------------------------------------------
0000E984 0000                       		dc.w byte_DD02-Ani_obj41
0000E986 0000                       		dc.w byte_DD0E-Ani_obj41
0000E988 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E994 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E9A0                            		even
0000E9A0                            		even
0000E9A0                            
0000E9A0                            ; ---------------------------------------------------------------------------
0000E9A0                            ; Sprite mappings - springs
0000E9A0                            ; ---------------------------------------------------------------------------
0000E9A0                            Map_obj41:
0000E9A0                            	include "_maps\obj41.asm"
0000E9A0                            ; ---------------------------------------------------------------------------
0000E9A0                            ; Sprite mappings - springs
0000E9A0                            ; ---------------------------------------------------------------------------
0000E9A0 0000                       		dc.w byte_DD26-Map_obj41
0000E9A2 0000                       		dc.w byte_DD31-Map_obj41
0000E9A4 0000                       		dc.w byte_DD37-Map_obj41
0000E9A6 0000                       		dc.w byte_DD47-Map_obj41
0000E9A8 0000                       		dc.w byte_DD4D-Map_obj41
0000E9AA 0000                       		dc.w byte_DD53-Map_obj41
0000E9AC 02                         byte_DD26:	dc.b 2
0000E9AD F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E9B2 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E9B7 01                         byte_DD31:	dc.b 1
0000E9B8 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E9BD 03                         byte_DD37:	dc.b 3
0000E9BE E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E9C3 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9C8 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E9CD 01                         byte_DD47:	dc.b 1
0000E9CE F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E9D3 01                         byte_DD4D:	dc.b 1
0000E9D4 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E9D9 04                         byte_DD53:	dc.b 4
0000E9DA F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E9DF F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E9E4 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E9E9 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E9EE                            		even
0000E9EE                            		even
0000E9EE                            
0000E9EE                            ; ===========================================================================
0000E9EE                            ; ---------------------------------------------------------------------------
0000E9EE                            ; Object 42 - Newtron enemy (GHZ)
0000E9EE                            ; ---------------------------------------------------------------------------
0000E9EE                            
0000E9EE                            Obj42:					; XREF: Obj_Index
0000E9EE 7000                       		moveq	#0,d0
0000E9F0 1028 0024                  		move.b	$24(a0),d0
0000E9F4 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E9F8 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E9FC                            ; ===========================================================================
0000E9FC 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E9FE 0000                       		dc.w Obj42_Action-Obj42_Index
0000EA00 0000                       		dc.w Obj42_Delete-Obj42_Index
0000EA02                            ; ===========================================================================
0000EA02                            
0000EA02                            Obj42_Main:				; XREF: Obj42_Index
0000EA02 5428 0024                  		addq.b	#2,$24(a0)
0000EA06 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000EA0E 317C 049B 0002             		move.w	#$49B,2(a0)
0000EA14 117C 0004 0001             		move.b	#4,1(a0)
0000EA1A 117C 0004 0018             		move.b	#4,$18(a0)
0000EA20 117C 0014 0019             		move.b	#$14,$19(a0)
0000EA26 117C 0010 0016             		move.b	#$10,$16(a0)
0000EA2C 117C 0008 0017             		move.b	#8,$17(a0)
0000EA32                            
0000EA32                            Obj42_Action:				; XREF: Obj42_Index
0000EA32 7000                       		moveq	#0,d0
0000EA34 1028 0025                  		move.b	$25(a0),d0
0000EA38 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000EA3C 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000EA40 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000EA46 6100 C89C                  		bsr.w	AnimateSprite
0000EA4A 6000 0000                  		bra.w	MarkObjGone
0000EA4E                            ; ===========================================================================
0000EA4E 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000EA50 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000EA52 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000EA54 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000EA56 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000EA58                            ; ===========================================================================
0000EA58                            
0000EA58                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000EA58 08E8 0000 0022             		bset	#0,$22(a0)
0000EA5E 3038 D008                  		move.w	($FFFFD008).w,d0
0000EA62 9068 0008                  		sub.w	8(a0),d0
0000EA66 6400                       		bcc.s	loc_DDEA
0000EA68 4440                       		neg.w	d0
0000EA6A 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA70                            
0000EA70                            loc_DDEA:
0000EA70 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000EA74 6400                       		bcc.s	locret_DE12	; if not, branch
0000EA76 5428 0025                  		addq.b	#2,$25(a0)
0000EA7A 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA80 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000EA84 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000EA86 317C 249B 0002             		move.w	#$249B,2(a0)
0000EA8C 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000EA92 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000EA98                            
0000EA98                            locret_DE12:
0000EA98 4E75                       		rts	
0000EA9A                            ; ===========================================================================
0000EA9A                            
0000EA9A                            Obj42_Type00:				; XREF: Obj42_Index2
0000EA9A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000EAA0 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000EAA2 08E8 0000 0022             		bset	#0,$22(a0)
0000EAA8 3038 D008                  		move.w	($FFFFD008).w,d0
0000EAAC 9068 0008                  		sub.w	8(a0),d0
0000EAB0 6400                       		bcc.s	locret_DE32
0000EAB2 08A8 0000 0022             		bclr	#0,$22(a0)
0000EAB8                            
0000EAB8                            locret_DE32:
0000EAB8 4E75                       		rts	
0000EABA                            ; ===========================================================================
0000EABA                            
0000EABA                            Obj42_Fall:				; XREF: Obj42_Type00
0000EABA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000EAC0 6600                       		bne.s	loc_DE42
0000EAC2 117C 000C 0020             		move.b	#$C,$20(a0)
0000EAC8                            
0000EAC8                            loc_DE42:
0000EAC8 6100 F726                  		bsr.w	ObjectFall
0000EACC 6100 0000                  		bsr.w	ObjHitFloor
0000EAD0 4A41                       		tst.w	d1		; has newtron hit the floor?
0000EAD2 6A00                       		bpl.s	locret_DE86	; if not, branch
0000EAD4 D368 000C                  		add.w	d1,$C(a0)
0000EAD8 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000EADE 5428 0025                  		addq.b	#2,$25(a0)
0000EAE2 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAE8 0828 0005 0002             		btst	#5,2(a0)
0000EAEE 6700                       		beq.s	Obj42_Move
0000EAF0 5228 001C                  		addq.b	#1,$1C(a0)
0000EAF4                            
0000EAF4                            Obj42_Move:
0000EAF4 117C 000D 0020             		move.b	#$D,$20(a0)
0000EAFA 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000EB00 0828 0000 0022             		btst	#0,$22(a0)
0000EB06 6600                       		bne.s	locret_DE86
0000EB08 4468 0010                  		neg.w	$10(a0)
0000EB0C                            
0000EB0C                            locret_DE86:
0000EB0C 4E75                       		rts	
0000EB0E                            ; ===========================================================================
0000EB0E                            
0000EB0E                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000EB0E 6100 F742                  		bsr.w	SpeedToPos
0000EB12 6100 0000                  		bsr.w	ObjHitFloor
0000EB16 0C41 FFF8                  		cmpi.w	#-8,d1
0000EB1A 6D00                       		blt.s	loc_DEA2
0000EB1C 0C41 000C                  		cmpi.w	#$C,d1
0000EB20 6C00                       		bge.s	loc_DEA2
0000EB22 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000EB26 4E75                       		rts	
0000EB28                            ; ===========================================================================
0000EB28                            
0000EB28                            loc_DEA2:
0000EB28 5428 0025                  		addq.b	#2,$25(a0)
0000EB2C 4E75                       		rts	
0000EB2E                            ; ===========================================================================
0000EB2E                            
0000EB2E                            Obj42_Speed:				; XREF: Obj42_Index2
0000EB2E 6000 F722                  		bra.w	SpeedToPos
0000EB32                            ; ===========================================================================
0000EB32                            
0000EB32                            Obj42_Type01:				; XREF: Obj42_Index2
0000EB32 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000EB38 6600                       		bne.s	Obj42_FireMissile
0000EB3A 117C 000C 0020             		move.b	#$C,$20(a0)
0000EB40                            
0000EB40                            Obj42_FireMissile:
0000EB40 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000EB46 6600                       		bne.s	locret_DF14
0000EB48 4A28 0032                  		tst.b	$32(a0)
0000EB4C 6600                       		bne.s	locret_DF14
0000EB4E 117C 0001 0032             		move.b	#1,$32(a0)
0000EB54 6100 FBBC                  		bsr.w	SingleObjLoad
0000EB58 6600                       		bne.s	locret_DF14
0000EB5A 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000EB5E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EB64 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EB6A 5169 000C                  		subq.w	#8,$C(a1)
0000EB6E 337C 0200 0010             		move.w	#$200,$10(a1)
0000EB74 303C 0014                  		move.w	#$14,d0
0000EB78 0828 0000 0022             		btst	#0,$22(a0)
0000EB7E 6600                       		bne.s	loc_DF04
0000EB80 4440                       		neg.w	d0
0000EB82 4469 0010                  		neg.w	$10(a1)
0000EB86                            
0000EB86                            loc_DF04:
0000EB86 D169 0008                  		add.w	d0,8(a1)
0000EB8A 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000EB90 137C 0001 0028             		move.b	#1,$28(a1)
0000EB96                            
0000EB96                            locret_DF14:
0000EB96 4E75                       		rts	
0000EB98                            ; ===========================================================================
0000EB98                            
0000EB98                            Obj42_Delete:				; XREF: Obj42_Index
0000EB98 6000 F72E                  		bra.w	DeleteObject
0000EB9C                            ; ===========================================================================
0000EB9C                            Ani_obj42:
0000EB9C                            	include "_anim\obj42.asm"
0000EB9C                            ; ---------------------------------------------------------------------------
0000EB9C                            ; Animation script - Newtron enemy
0000EB9C                            ; ---------------------------------------------------------------------------
0000EB9C 0000                       		dc.w byte_DF24-Ani_obj42
0000EB9E 0000                       		dc.w byte_DF28-Ani_obj42
0000EBA0 0000                       		dc.w byte_DF30-Ani_obj42
0000EBA2 0000                       		dc.w byte_DF34-Ani_obj42
0000EBA4 0000                       		dc.w byte_DF38-Ani_obj42
0000EBA6 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000EBAA 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000EBB2 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000EBB6 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000EBBA 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000EBC4                            		even
0000EBC4                            		even
0000EBC4                            
0000EBC4                            ; ---------------------------------------------------------------------------
0000EBC4                            ; Sprite mappings - Newtron enemy (GHZ)
0000EBC4                            ; ---------------------------------------------------------------------------
0000EBC4                            Map_obj42:
0000EBC4                            	include "_maps\obj42.asm"
0000EBC4                            ; ---------------------------------------------------------------------------
0000EBC4                            ; Sprite mappings - Newtron enemy (GHZ)
0000EBC4                            ; ---------------------------------------------------------------------------
0000EBC4 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000EBC8 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000EBCC 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000EBD0 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000EBD4 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000EBD8 0000                       		dc.w byte_DFF8-Map_obj42
0000EBDA 03                         byte_DF58:	dc.b 3
0000EBDB EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000EBE0 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000EBE5 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000EBEA 03                         byte_DF68:	dc.b 3
0000EBEB EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000EBF0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EBF5 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EBFA 03                         byte_DF78:	dc.b 3
0000EBFB EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000EC00 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EC05 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EC0A 04                         byte_DF88:	dc.b 4
0000EC0B EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000EC10 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EC15 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000EC1A 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000EC1F 03                         byte_DF9D:	dc.b 3
0000EC20 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000EC25 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000EC2A 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000EC2F 02                         byte_DFAD:	dc.b 2
0000EC30 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC35 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC3A 03                         byte_DFB8:	dc.b 3
0000EC3B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC40 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC45 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000EC4A 03                         byte_DFC8:	dc.b 3
0000EC4B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC50 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC55 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EC5A 03                         byte_DFD8:	dc.b 3
0000EC5B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC60 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC65 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EC6A 03                         byte_DFE8:	dc.b 3
0000EC6B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC70 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC75 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EC7A 00                         byte_DFF8:	dc.b 0
0000EC7C 00                         		even
0000EC7C 00                         		even
0000EC7C                            
0000EC7C                            ; ===========================================================================
0000EC7C                            ; ---------------------------------------------------------------------------
0000EC7C                            ; Object 43 - Roller enemy (SYZ)
0000EC7C                            ; ---------------------------------------------------------------------------
0000EC7C                            
0000EC7C                            Obj43:					; XREF: Obj_Index
0000EC7C 7000                       		moveq	#0,d0
0000EC7E 1028 0024                  		move.b	$24(a0),d0
0000EC82 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000EC86 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000EC8A                            ; ===========================================================================
0000EC8A 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000EC8C 0000                       		dc.w Obj43_Action-Obj43_Index
0000EC8E                            ; ===========================================================================
0000EC8E                            
0000EC8E                            Obj43_Main:				; XREF: Obj43_Index
0000EC8E 117C 000E 0016             		move.b	#$E,$16(a0)
0000EC94 117C 0008 0017             		move.b	#8,$17(a0)
0000EC9A 6100 F554                  		bsr.w	ObjectFall
0000EC9E 6100 0000                  		bsr.w	ObjHitFloor
0000ECA2 4A41                       		tst.w	d1
0000ECA4 6A00                       		bpl.s	locret_E052
0000ECA6 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000ECAA 317C 0000 0012             		move.w	#0,$12(a0)
0000ECB0 5428 0024                  		addq.b	#2,$24(a0)
0000ECB4 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000ECBC 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000ECC2 117C 0004 0001             		move.b	#4,1(a0)
0000ECC8 117C 0004 0018             		move.b	#4,$18(a0)
0000ECCE 117C 0010 0019             		move.b	#$10,$19(a0)
0000ECD4                            
0000ECD4                            locret_E052:
0000ECD4 4E75                       		rts	
0000ECD6                            ; ===========================================================================
0000ECD6                            
0000ECD6                            Obj43_Action:				; XREF: Obj43_Index
0000ECD6 7000                       		moveq	#0,d0
0000ECD8 1028 0025                  		move.b	$25(a0),d0
0000ECDC 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000ECE0 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000ECE4 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000ECEA 6100 C5F8                  		bsr.w	AnimateSprite
0000ECEE 3028 0008                  		move.w	8(a0),d0
0000ECF2 0240 FF80                  		andi.w	#$FF80,d0
0000ECF6 3238 F700                  		move.w	($FFFFF700).w,d1
0000ECFA 0441 0080                  		subi.w	#$80,d1
0000ECFE 0241 FF80                  		andi.w	#$FF80,d1
0000ED02 9041                       		sub.w	d1,d0
0000ED04 0C40 0280                  		cmpi.w	#$280,d0
0000ED08 6E00 0000                  		bgt.w	Obj43_ChkGone
0000ED0C 6000 F57E                  		bra.w	DisplaySprite
0000ED10                            ; ===========================================================================
0000ED10                            
0000ED10                            Obj43_ChkGone:				; XREF: Obj43_Action
0000ED10 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ED14 7000                       		moveq	#0,d0
0000ED16 1028 0023                  		move.b	$23(a0),d0
0000ED1A 6700                       		beq.s	Obj43_Delete
0000ED1C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000ED22                            
0000ED22                            Obj43_Delete:
0000ED22 6000 F5A4                  		bra.w	DeleteObject
0000ED26                            ; ===========================================================================
0000ED26 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000ED28 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000ED2A 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000ED2C 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000ED2E                            ; ===========================================================================
0000ED2E                            
0000ED2E                            Obj43_RollChk:				; XREF: Obj43_Index2
0000ED2E 3038 D008                  		move.w	($FFFFD008).w,d0
0000ED32 0440 0100                  		subi.w	#$100,d0
0000ED36 6500                       		bcs.s	loc_E0D2
0000ED38 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000ED3C 6500                       		bcs.s	loc_E0D2
0000ED3E 5828 0025                  		addq.b	#4,$25(a0)
0000ED42 117C 0002 001C             		move.b	#2,$1C(a0)
0000ED48 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000ED4E 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000ED54                            
0000ED54                            loc_E0D2:
0000ED54 588F                       		addq.l	#4,sp
0000ED56 4E75                       		rts	
0000ED58                            ; ===========================================================================
0000ED58                            
0000ED58                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000ED58 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000ED5E 6700                       		beq.s	loc_E0F8
0000ED60 5368 0030                  		subq.w	#1,$30(a0)
0000ED64 6A00                       		bpl.s	locret_E0F6
0000ED66 117C 0001 001C             		move.b	#1,$1C(a0)
0000ED6C 317C 0700 0010             		move.w	#$700,$10(a0)
0000ED72 117C 008E 0020             		move.b	#$8E,$20(a0)
0000ED78                            
0000ED78                            locret_E0F6:
0000ED78 4E75                       		rts	
0000ED7A                            ; ===========================================================================
0000ED7A                            
0000ED7A                            loc_E0F8:
0000ED7A 5428 0025                  		addq.b	#2,$25(a0)
0000ED7E 4E75                       		rts	
0000ED80                            ; ===========================================================================
0000ED80                            
0000ED80                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000ED80 6100 0000                  		bsr.w	Obj43_Stop
0000ED84 6100 F4CC                  		bsr.w	SpeedToPos
0000ED88 6100 0000                  		bsr.w	ObjHitFloor
0000ED8C 0C41 FFF8                  		cmpi.w	#-8,d1
0000ED90 6D00                       		blt.s	Obj43_Jump
0000ED92 0C41 000C                  		cmpi.w	#$C,d1
0000ED96 6C00                       		bge.s	Obj43_Jump
0000ED98 D368 000C                  		add.w	d1,$C(a0)
0000ED9C 4E75                       		rts	
0000ED9E                            ; ===========================================================================
0000ED9E                            
0000ED9E                            Obj43_Jump:
0000ED9E 5428 0025                  		addq.b	#2,$25(a0)
0000EDA2 08E8 0000 0032             		bset	#0,$32(a0)
0000EDA8 6700                       		beq.s	locret_E12E
0000EDAA 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EDB0                            
0000EDB0                            locret_E12E:
0000EDB0 4E75                       		rts	
0000EDB2                            ; ===========================================================================
0000EDB2                            
0000EDB2                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EDB2 6100 F43C                  		bsr.w	ObjectFall
0000EDB6 4A68 0012                  		tst.w	$12(a0)
0000EDBA 6B00                       		bmi.s	locret_E150
0000EDBC 6100 0000                  		bsr.w	ObjHitFloor
0000EDC0 4A41                       		tst.w	d1
0000EDC2 6A00                       		bpl.s	locret_E150
0000EDC4 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EDC8 5528 0025                  		subq.b	#2,$25(a0)
0000EDCC 317C 0000 0012             		move.w	#0,$12(a0)
0000EDD2                            
0000EDD2                            locret_E150:
0000EDD2 4E75                       		rts	
0000EDD4                            
0000EDD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EDD4                            
0000EDD4                            
0000EDD4                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EDD4 4A28 0032                  		tst.b	$32(a0)
0000EDD8 6B00                       		bmi.s	locret_E188
0000EDDA 3038 D008                  		move.w	($FFFFD008).w,d0
0000EDDE 0440 0030                  		subi.w	#$30,d0
0000EDE2 9068 0008                  		sub.w	8(a0),d0
0000EDE6 6400                       		bcc.s	locret_E188
0000EDE8 117C 0000 001C             		move.b	#0,$1C(a0)
0000EDEE 117C 000E 0020             		move.b	#$E,$20(a0)
0000EDF4 4268 0010                  		clr.w	$10(a0)
0000EDF8 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EDFE 117C 0002 0025             		move.b	#2,$25(a0)
0000EE04 08E8 0007 0032             		bset	#7,$32(a0)
0000EE0A                            
0000EE0A                            locret_E188:
0000EE0A 4E75                       		rts	
0000EE0C                            ; End of function Obj43_Stop
0000EE0C                            
0000EE0C                            ; ===========================================================================
0000EE0C                            Ani_obj43:
0000EE0C                            	include "_anim\obj43.asm"
0000EE0C                            ; ---------------------------------------------------------------------------
0000EE0C                            ; Animation script - Roller enemy
0000EE0C                            ; ---------------------------------------------------------------------------
0000EE0C 0000                       		dc.w byte_E190-Ani_obj43
0000EE0E 0000                       		dc.w byte_E196-Ani_obj43
0000EE10 0000                       		dc.w byte_E19C-Ani_obj43
0000EE12 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EE18 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EE1E 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EE24 00                         		even
0000EE24 00                         		even
0000EE24                            
0000EE24                            ; ---------------------------------------------------------------------------
0000EE24                            ; Sprite mappings - Roller enemy (SYZ)
0000EE24                            ; ---------------------------------------------------------------------------
0000EE24                            Map_obj43:
0000EE24                            	include "_maps\obj43.asm"
0000EE24                            Map_61da:
0000EE24 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EE26 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EE28 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EE2A 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EE2C 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EE2E 02                         Map_61da_A: 	dc.b $2
0000EE2F DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EE34 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EE39 02                         Map_61da_15: 	dc.b $2
0000EE3A E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EE3F FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EE44 01                         Map_61da_20: 	dc.b $1
0000EE45 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EE4A 01                         Map_61da_26: 	dc.b $1
0000EE4B F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EE50 01                         Map_61da_2C: 	dc.b $1
0000EE51 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EE56                            	even
0000EE56                            	even
0000EE56                            
0000EE56                            ; ===========================================================================
0000EE56                            ; ---------------------------------------------------------------------------
0000EE56                            ; Object 44 - walls (GHZ)
0000EE56                            ; ---------------------------------------------------------------------------
0000EE56                            
0000EE56                            Obj44:					; XREF: Obj_Index
0000EE56 7000                       		moveq	#0,d0
0000EE58 1028 0024                  		move.b	$24(a0),d0
0000EE5C 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EE60 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EE64                            ; ===========================================================================
0000EE64 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EE66 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EE68 0000                       		dc.w Obj44_Display-Obj44_Index
0000EE6A                            ; ===========================================================================
0000EE6A                            
0000EE6A                            Obj44_Main:				; XREF: Obj44_Index
0000EE6A 5428 0024                  		addq.b	#2,$24(a0)
0000EE6E 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EE76 317C 434C 0002             		move.w	#$434C,2(a0)
0000EE7C 0028 0004 0001             		ori.b	#4,1(a0)
0000EE82 117C 0008 0019             		move.b	#8,$19(a0)
0000EE88 117C 0006 0018             		move.b	#6,$18(a0)
0000EE8E 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EE94 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EE9A 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EE9C 5428 0024                  		addq.b	#2,$24(a0)
0000EEA0 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EEA2                            ; ===========================================================================
0000EEA2                            
0000EEA2                            Obj44_Solid:				; XREF: Obj44_Index
0000EEA2 323C 0013                  		move.w	#$13,d1
0000EEA6 343C 0028                  		move.w	#$28,d2
0000EEAA 6100 A6A2                  		bsr.w	Obj44_SolidWall
0000EEAE                            
0000EEAE                            Obj44_Display:				; XREF: Obj44_Index
0000EEAE 6100 F3DC                  		bsr.w	DisplaySprite
0000EEB2 3028 0008                  		move.w	8(a0),d0
0000EEB6 0240 FF80                  		andi.w	#$FF80,d0
0000EEBA 3238 F700                  		move.w	($FFFFF700).w,d1
0000EEBE 0441 0080                  		subi.w	#$80,d1
0000EEC2 0241 FF80                  		andi.w	#$FF80,d1
0000EEC6 9041                       		sub.w	d1,d0
0000EEC8 0C40 0280                  		cmpi.w	#$280,d0
0000EECC 6200 F3FA                  		bhi.w	DeleteObject
0000EED0 4E75                       		rts	
0000EED2                            ; ===========================================================================
0000EED2                            ; ---------------------------------------------------------------------------
0000EED2                            ; Sprite mappings - walls (GHZ)
0000EED2                            ; ---------------------------------------------------------------------------
0000EED2                            Map_obj44:
0000EED2                            	include "_maps\obj44.asm"
0000EED2                            ; ---------------------------------------------------------------------------
0000EED2                            ; Sprite mappings - walls (GHZ)
0000EED2                            ; ---------------------------------------------------------------------------
0000EED2 0000                       		dc.w byte_E256-Map_obj44
0000EED4 0000                       		dc.w byte_E26B-Map_obj44
0000EED6 0000                       		dc.w byte_E280-Map_obj44
0000EED8 04                         byte_E256:	dc.b 4
0000EED9 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EEDE F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EEE3 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EEE8 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EEED 04                         byte_E26B:	dc.b 4
0000EEEE E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EEF3 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EEF8 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EEFD 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EF02 04                         byte_E280:	dc.b 4
0000EF03 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EF08 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EF0D 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EF12 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EF18 00                         		even
0000EF18 00                         		even
0000EF18                            
0000EF18                            ; ===========================================================================
0000EF18                            ; ---------------------------------------------------------------------------
0000EF18                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EF18                            ; ---------------------------------------------------------------------------
0000EF18                            
0000EF18                            Obj13:					; XREF: Obj_Index
0000EF18 7000                       		moveq	#0,d0
0000EF1A 1028 0024                  		move.b	$24(a0),d0
0000EF1E 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EF22 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EF26 6000 0000                  		bra.w	Obj14_ChkDel
0000EF2A                            ; ===========================================================================
0000EF2A 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EF2C 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EF2E                            ; ---------------------------------------------------------------------------
0000EF2E                            ;
0000EF2E                            ; Lava ball production rates
0000EF2E                            ;
0000EF2E 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EF34                            ; ===========================================================================
0000EF34                            
0000EF34                            Obj13_Main:				; XREF: Obj13_Index
0000EF34 5428 0024                  		addq.b	#2,$24(a0)
0000EF38 1028 0028                  		move.b	$28(a0),d0
0000EF3C E848                       		lsr.w	#4,d0
0000EF3E 0240 000F                  		andi.w	#$F,d0
0000EF42 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EF48 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EF4E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EF54                            
0000EF54                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EF54 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EF58 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EF5A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EF60 6100 F5A4                  		bsr.w	ChkObjOnScreen
0000EF64 6600                       		bne.s	locret_E302
0000EF66 6100 F7AA                  		bsr.w	SingleObjLoad
0000EF6A 6600                       		bne.s	locret_E302
0000EF6C 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EF70 3368 0008 0008             		move.w	8(a0),8(a1)
0000EF76 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EF7C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EF82                            
0000EF82                            locret_E302:
0000EF82 4E75                       		rts	
0000EF84                            ; ===========================================================================
0000EF84                            ; ---------------------------------------------------------------------------
0000EF84                            ; Object 14 - lava balls (MZ, SLZ)
0000EF84                            ; ---------------------------------------------------------------------------
0000EF84                            
0000EF84                            Obj14:					; XREF: Obj_Index
0000EF84 7000                       		moveq	#0,d0
0000EF86 1028 0024                  		move.b	$24(a0),d0
0000EF8A 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EF8E 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EF92 6000 F2F8                  		bra.w	DisplaySprite
0000EF96                            ; ===========================================================================
0000EF96 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EF98 0000                       		dc.w Obj14_Action-Obj14_Index
0000EF9A 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EF9C                            
0000EF9C FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EFA6 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EFAE                            ; ===========================================================================
0000EFAE                            
0000EFAE                            Obj14_Main:				; XREF: Obj14_Index
0000EFAE 5428 0024                  		addq.b	#2,$24(a0)
0000EFB2 117C 0008 0016             		move.b	#8,$16(a0)
0000EFB8 117C 0008 0017             		move.b	#8,$17(a0)
0000EFBE 217C 0000 BEE2 0004        		move.l	#Map_obj14,4(a0)
0000EFC6 317C 0345 0002             		move.w	#$345,2(a0)
0000EFCC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EFD2 6600                       		bne.s	loc_E35A
0000EFD4 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EFDA                            
0000EFDA                            loc_E35A:
0000EFDA 117C 0004 0001             		move.b	#4,1(a0)
0000EFE0 117C 0003 0018             		move.b	#3,$18(a0)
0000EFE6 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EFEC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EFF2 4A28 0029                  		tst.b	$29(a0)
0000EFF6 6700                       		beq.s	Obj14_SetSpeed
0000EFF8 5428 0018                  		addq.b	#2,$18(a0)
0000EFFC                            
0000EFFC                            Obj14_SetSpeed:
0000EFFC 7000                       		moveq	#0,d0
0000EFFE 1028 0028                  		move.b	$28(a0),d0
0000F002 D040                       		add.w	d0,d0
0000F004 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000F00A 117C 0008 0019             		move.b	#8,$19(a0)
0000F010 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000F016 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000F018 117C 0010 0019             		move.b	#$10,$19(a0)
0000F01E 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000F024 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000F02A 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000F030                            
0000F030                            Obj14_PlaySnd:
0000F030 303C 00AE                  		move.w	#$AE,d0
0000F034 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000F03A                            
0000F03A                            Obj14_Action:				; XREF: Obj14_Index
0000F03A 7000                       		moveq	#0,d0
0000F03C 1028 0028                  		move.b	$28(a0),d0
0000F040 D040                       		add.w	d0,d0
0000F042 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000F046 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000F04A 6100 F206                  		bsr.w	SpeedToPos
0000F04E 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000F054 6100 C28E                  		bsr.w	AnimateSprite
0000F058                            
0000F058                            Obj14_ChkDel:				; XREF: Obj13
0000F058 3028 0008                  		move.w	8(a0),d0
0000F05C 0240 FF80                  		andi.w	#$FF80,d0
0000F060 3238 F700                  		move.w	($FFFFF700).w,d1
0000F064 0441 0080                  		subi.w	#$80,d1
0000F068 0241 FF80                  		andi.w	#$FF80,d1
0000F06C 9041                       		sub.w	d1,d0
0000F06E 0C40 0280                  		cmpi.w	#$280,d0
0000F072 6200 F254                  		bhi.w	DeleteObject
0000F076 4E75                       		rts	
0000F078                            ; ===========================================================================
0000F078 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F07C 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F080 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000F084 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000F088 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000F08A                            ; ===========================================================================
0000F08A                            ; lavaball types 00-03 fly up and fall back down
0000F08A                            
0000F08A                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000F08A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000F090 3028 0030                  		move.w	$30(a0),d0
0000F094 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000F098 6400                       		bcc.s	loc_E41E	; if not, branch
0000F09A 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000F09E                            
0000F09E                            loc_E41E:
0000F09E 08A8 0001 0022             		bclr	#1,$22(a0)
0000F0A4 4A68 0012                  		tst.w	$12(a0)
0000F0A8 6A00                       		bpl.s	locret_E430
0000F0AA 08E8 0001 0022             		bset	#1,$22(a0)
0000F0B0                            
0000F0B0                            locret_E430:
0000F0B0 4E75                       		rts	
0000F0B2                            ; ===========================================================================
0000F0B2                            ; lavaball type	04 flies up until it hits the ceiling
0000F0B2                            
0000F0B2                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000F0B2 08E8 0001 0022             		bset	#1,$22(a0)
0000F0B8 6100 0000                  		bsr.w	ObjHitCeiling
0000F0BC 4A41                       		tst.w	d1
0000F0BE 6A00                       		bpl.s	locret_E452
0000F0C0 117C 0008 0028             		move.b	#8,$28(a0)
0000F0C6 117C 0001 001C             		move.b	#1,$1C(a0)
0000F0CC 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000F0D2                            
0000F0D2                            locret_E452:
0000F0D2 4E75                       		rts	
0000F0D4                            ; ===========================================================================
0000F0D4                            ; lavaball type	05 falls down until it hits the	floor
0000F0D4                            
0000F0D4                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000F0D4 08A8 0001 0022             		bclr	#1,$22(a0)
0000F0DA 6100 0000                  		bsr.w	ObjHitFloor
0000F0DE 4A41                       		tst.w	d1
0000F0E0 6A00                       		bpl.s	locret_E474
0000F0E2 117C 0008 0028             		move.b	#8,$28(a0)
0000F0E8 117C 0001 001C             		move.b	#1,$1C(a0)
0000F0EE 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000F0F4                            
0000F0F4                            locret_E474:
0000F0F4 4E75                       		rts	
0000F0F6                            ; ===========================================================================
0000F0F6                            ; lavaball types 06-07 move sideways
0000F0F6                            
0000F0F6                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000F0F6 08E8 0000 0022             		bset	#0,$22(a0)
0000F0FC 76F8                       		moveq	#-8,d3
0000F0FE 6100 0000                  		bsr.w	ObjHitWallLeft
0000F102 4A41                       		tst.w	d1
0000F104 6A00                       		bpl.s	locret_E498
0000F106 117C 0008 0028             		move.b	#8,$28(a0)
0000F10C 117C 0003 001C             		move.b	#3,$1C(a0)
0000F112 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F118                            
0000F118                            locret_E498:
0000F118 4E75                       		rts	
0000F11A                            ; ===========================================================================
0000F11A                            
0000F11A                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000F11A 08A8 0000 0022             		bclr	#0,$22(a0)
0000F120 7608                       		moveq	#8,d3
0000F122 6100 0000                  		bsr.w	ObjHitWallRight
0000F126 4A41                       		tst.w	d1
0000F128 6A00                       		bpl.s	locret_E4BC
0000F12A 117C 0008 0028             		move.b	#8,$28(a0)
0000F130 117C 0003 001C             		move.b	#3,$1C(a0)
0000F136 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F13C                            
0000F13C                            locret_E4BC:
0000F13C 4E75                       		rts	
0000F13E                            ; ===========================================================================
0000F13E                            
0000F13E                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000F13E 4E75                       		rts	
0000F140                            ; ===========================================================================
0000F140                            
0000F140                            Obj14_Delete:				; XREF: Obj14_Index
0000F140 6000 F186                  		bra.w	DeleteObject
0000F144                            ; ===========================================================================
0000F144                            Ani_obj14:
0000F144                            	include "_anim\obj14.asm"
0000F144                            ; ---------------------------------------------------------------------------
0000F144                            ; Animation script - lava balls
0000F144                            ; ---------------------------------------------------------------------------
0000F144 0000                       		dc.w byte_E4CC-Ani_obj14
0000F146 0000                       		dc.w byte_E4D2-Ani_obj14
0000F148 0000                       		dc.w byte_E4D6-Ani_obj14
0000F14A 0000                       		dc.w byte_E4DC-Ani_obj14
0000F14C 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000F152 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000F156 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000F15C 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000F160                            		even
0000F160                            		even
0000F160                            
0000F160                            ; ===========================================================================
0000F160                            ; ---------------------------------------------------------------------------
0000F160                            ; Object 6D - flame thrower (SBZ)
0000F160                            ; ---------------------------------------------------------------------------
0000F160                            
0000F160                            Obj6D:					; XREF: Obj_Index
0000F160 7000                       		moveq	#0,d0
0000F162 1028 0024                  		move.b	$24(a0),d0
0000F166 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000F16A 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000F16E                            ; ===========================================================================
0000F16E 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000F170 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000F172                            ; ===========================================================================
0000F172                            
0000F172                            Obj6D_Main:				; XREF: Obj6D_Index
0000F172 5428 0024                  		addq.b	#2,$24(a0)
0000F176 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000F17E 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000F184 0028 0004 0001             		ori.b	#4,1(a0)
0000F18A 117C 0001 0018             		move.b	#1,$18(a0)
0000F190 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F196 117C 000C 0019             		move.b	#$C,$19(a0)
0000F19C 1028 0028                  		move.b	$28(a0),d0
0000F1A0 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F1A4 D040                       		add.w	d0,d0		; multiply by 2
0000F1A6 3140 0030                  		move.w	d0,$30(a0)
0000F1AA 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F1AE 1028 0028                  		move.b	$28(a0),d0
0000F1B2 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F1B6 EB48                       		lsl.w	#5,d0		; multiply by $20
0000F1B8 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F1BC 117C 000A 0036             		move.b	#$A,$36(a0)
0000F1C2 0828 0001 0022             		btst	#1,$22(a0)
0000F1C8 6700                       		beq.s	Obj6D_Action
0000F1CA 117C 0002 001C             		move.b	#2,$1C(a0)
0000F1D0 117C 0015 0036             		move.b	#$15,$36(a0)
0000F1D6                            
0000F1D6                            Obj6D_Action:				; XREF: Obj6D_Index
0000F1D6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F1DA 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F1DC 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F1E2 0868 0000 001C             		bchg	#0,$1C(a0)
0000F1E8 6700                       		beq.s	loc_E57A
0000F1EA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F1F0 303C 00B3                  		move.w	#$B3,d0
0000F1F4 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play flame sound
0000F1FA                            
0000F1FA                            loc_E57A:
0000F1FA 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F200 6100 C0E2                  		bsr.w	AnimateSprite
0000F204 117C 0000 0020             		move.b	#0,$20(a0)
0000F20A 1028 0036                  		move.b	$36(a0),d0
0000F20E B028 001A                  		cmp.b	$1A(a0),d0
0000F212 6600                       		bne.s	Obj6D_ChkDel
0000F214 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F21A                            
0000F21A                            Obj6D_ChkDel:
0000F21A 3028 0008                  		move.w	8(a0),d0
0000F21E 0240 FF80                  		andi.w	#$FF80,d0
0000F222 3238 F700                  		move.w	($FFFFF700).w,d1
0000F226 0441 0080                  		subi.w	#$80,d1
0000F22A 0241 FF80                  		andi.w	#$FF80,d1
0000F22E 9041                       		sub.w	d1,d0
0000F230 0C40 0280                  		cmpi.w	#$280,d0
0000F234 6200 F092                  		bhi.w	DeleteObject
0000F238 6000 F052                  		bra.w	DisplaySprite
0000F23C                            ; ===========================================================================
0000F23C                            Ani_obj6D:
0000F23C                            	include "_anim\obj6D.asm"
0000F23C                            ; ---------------------------------------------------------------------------
0000F23C                            ; Animation script - flamethrower (SBZ)
0000F23C                            ; ---------------------------------------------------------------------------
0000F23C 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F23E 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F240 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F242 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F244 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F252 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F25C 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F26A 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F274                            		even
0000F274                            		even
0000F274                            
0000F274                            ; ---------------------------------------------------------------------------
0000F274                            ; Sprite mappings - flame thrower (SBZ)
0000F274                            ; ---------------------------------------------------------------------------
0000F274                            Map_obj6D:
0000F274                            	include "_maps\obj6D.asm"
0000F274                            ; ---------------------------------------------------------------------------
0000F274                            ; Sprite mappings - flame thrower (SBZ)
0000F274                            ; ---------------------------------------------------------------------------
0000F274 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F278 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F27C 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F280 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F284 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F288 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F28C 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F290 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F294 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F298 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F29C 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F2A0 01                         byte_E620:	dc.b 1
0000F2A1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2A6 02                         byte_E626:	dc.b 2
0000F2A7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F2AC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2B1 02                         byte_E631:	dc.b 2
0000F2B2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2B7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2BC 03                         byte_E63C:	dc.b 3
0000F2BD 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F2C2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F2C7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2CC 03                         byte_E64C:	dc.b 3
0000F2CD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F2D2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2D7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2DC 04                         byte_E65C:	dc.b 4
0000F2DD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F2E2 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F2E7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F2EC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2F1 04                         byte_E671:	dc.b 4
0000F2F2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F2F7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F2FC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F301 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F306 05                         byte_E686:	dc.b 5
0000F307 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F30C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F311 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F316 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F31B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F320 05                         byte_E6A0:	dc.b 5
0000F321 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F326 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F32B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F330 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F335 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F33A 06                         byte_E6BA:	dc.b 6
0000F33B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F340 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F345 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F34A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F34F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F354 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F359 06                         byte_E6D9:	dc.b 6
0000F35A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F35F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F364 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F369 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F36E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F373 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F378 01                         byte_E6F8:	dc.b 1
0000F379 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F37E 02                         byte_E6FE:	dc.b 2
0000F37F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F384 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F389 02                         byte_E709:	dc.b 2
0000F38A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F38F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F394 03                         byte_E714:	dc.b 3
0000F395 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F39A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F39F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F3A4 03                         byte_E724:	dc.b 3
0000F3A5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F3AA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3AF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F3B4 04                         byte_E734:	dc.b 4
0000F3B5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F3BA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F3BF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3C4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F3C9 04                         byte_E749:	dc.b 4
0000F3CA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F3CF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F3D4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3D9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F3DE 05                         byte_E75E:	dc.b 5
0000F3DF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F3E4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F3E9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F3EE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3F3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F3F8 05                         byte_E778:	dc.b 5
0000F3F9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F3FE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F403 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F408 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F40D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F412 06                         byte_E792:	dc.b 6
0000F413 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F418 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F41D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F422 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F427 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F42C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F431 06                         byte_E7B1:	dc.b 6
0000F432 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F437 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F43C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F441 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F446 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F44B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F450                            		even
0000F450                            		even
0000F450                            
0000F450                            ; ===========================================================================
0000F450                            ; ---------------------------------------------------------------------------
0000F450                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F450                            ; ---------------------------------------------------------------------------
0000F450                            
0000F450                            Obj46:					; XREF: Obj_Index
0000F450 7000                       		moveq	#0,d0
0000F452 1028 0024                  		move.b	$24(a0),d0
0000F456 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F45A 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F45E                            ; ===========================================================================
0000F45E 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F460 0000                       		dc.w Obj46_Action-Obj46_Index
0000F462                            ; ===========================================================================
0000F462                            
0000F462                            Obj46_Main:				; XREF: Obj46_Index
0000F462 5428 0024                  		addq.b	#2,$24(a0)
0000F466 117C 000F 0016             		move.b	#$F,$16(a0)
0000F46C 117C 000F 0017             		move.b	#$F,$17(a0)
0000F472 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F47A 317C 4000 0002             		move.w	#$4000,2(a0)
0000F480 117C 0004 0001             		move.b	#4,1(a0)
0000F486 117C 0003 0018             		move.b	#3,$18(a0)
0000F48C 117C 0010 0019             		move.b	#$10,$19(a0)
0000F492 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F498 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F49E                            
0000F49E                            Obj46_Action:				; XREF: Obj46_Index
0000F49E 4A28 0001                  		tst.b	1(a0)
0000F4A2 6A00                       		bpl.s	Obj46_ChkDel
0000F4A4 7000                       		moveq	#0,d0
0000F4A6 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F4AA 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F4AE D040                       		add.w	d0,d0
0000F4B0 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F4B4 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F4B8 323C 001B                  		move.w	#$1B,d1
0000F4BC 343C 0010                  		move.w	#$10,d2
0000F4C0 363C 0011                  		move.w	#$11,d3
0000F4C4 3828 0008                  		move.w	8(a0),d4
0000F4C8 6100 0000                  		bsr.w	SolidObject
0000F4CC                            
0000F4CC                            Obj46_ChkDel:
0000F4CC 6100 EDBE                  		bsr.w	DisplaySprite
0000F4D0 3028 0008                  		move.w	8(a0),d0
0000F4D4 0240 FF80                  		andi.w	#$FF80,d0
0000F4D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F4DC 0441 0080                  		subi.w	#$80,d1
0000F4E0 0241 FF80                  		andi.w	#$FF80,d1
0000F4E4 9041                       		sub.w	d1,d0
0000F4E6 0C40 0280                  		cmpi.w	#$280,d0
0000F4EA 6200 EDDC                  		bhi.w	DeleteObject
0000F4EE 4E75                       		rts	
0000F4F0                            ; ===========================================================================
0000F4F0 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F4F2 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F4F4 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F4F6 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F4F8 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F4FA                            ; ===========================================================================
0000F4FA                            
0000F4FA                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F4FA 4E75                       		rts	
0000F4FC                            ; ===========================================================================
0000F4FC                            
0000F4FC                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F4FC 3038 D008                  		move.w	($FFFFD008).w,d0
0000F500 9068 0008                  		sub.w	8(a0),d0
0000F504 6400                       		bcc.s	loc_E888
0000F506 4440                       		neg.w	d0
0000F508                            
0000F508                            loc_E888:
0000F508 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F50C 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F50E 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F514                            
0000F514                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F514 7000                       		moveq	#0,d0
0000F516 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F51A 0828 0003 0028             		btst	#3,$28(a0)
0000F520 6700                       		beq.s	loc_E8A8
0000F522 4440                       		neg.w	d0
0000F524 0640 0010                  		addi.w	#$10,d0
0000F528                            
0000F528                            loc_E8A8:
0000F528 3228 0030                  		move.w	$30(a0),d1
0000F52C 9240                       		sub.w	d0,d1
0000F52E 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F532 4E75                       		rts	
0000F534                            ; ===========================================================================
0000F534                            
0000F534                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F534 7218                       		moveq	#$18,d1
0000F536 6100 ECBA                  		bsr.w	ObjectFallCustom
0000F53A 6100 0000                  		bsr.w	ObjHitFloor
0000F53E 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F540 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F544 D368 000C                  		add.w	d1,$C(a0)
0000F548 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F54C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F552 117C 0004 0028             		move.b	#4,$28(a0)
0000F558 3011                       		move.w	(a1),d0
0000F55A 0240 03FF                  		andi.w	#$3FF,d0
0000F55E 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F562 6400                       		bcc.s	locret_E8EE
0000F564 117C 0000 0028             		move.b	#0,$28(a0)
0000F56A                            
0000F56A                            locret_E8EE:
0000F56A 4E75                       		rts	
0000F56C                            ; ===========================================================================
0000F56C                            
0000F56C                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F56C 7000                       		moveq	#0,d0
0000F56E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F572 E648                       		lsr.w	#3,d0
0000F574 3228 0030                  		move.w	$30(a0),d1
0000F578 9240                       		sub.w	d0,d1
0000F57A 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F57E 4E75                       		rts	
0000F580                            ; ===========================================================================
0000F580                            ; ---------------------------------------------------------------------------
0000F580                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F580                            ; ---------------------------------------------------------------------------
0000F580                            Map_obj46:
0000F580                            	include "_maps\obj46.asm"
0000F580                            ; ---------------------------------------------------------------------------
0000F580                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F580                            ; ---------------------------------------------------------------------------
0000F580 0000                       		dc.w byte_E906-Map_obj46
0000F582 01                         byte_E906:	dc.b 1
0000F583 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F588                            		even
0000F588                            		even
0000F588                            
0000F588                            ; ===========================================================================
0000F588                            ; ---------------------------------------------------------------------------
0000F588                            ; Object 12 - lamp (SYZ)
0000F588                            ; ---------------------------------------------------------------------------
0000F588                            
0000F588                            Obj12:					; XREF: Obj_Index
0000F588 7000                       		moveq	#0,d0
0000F58A 1028 0024                  		move.b	$24(a0),d0
0000F58E 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F592 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F596                            ; ===========================================================================
0000F596 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F598 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F59A                            ; ===========================================================================
0000F59A                            
0000F59A                            Obj12_Main:				; XREF: Obj12_Index
0000F59A 5428 0024                  		addq.b	#2,$24(a0)
0000F59E 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F5A6 317C 0000 0002             		move.w	#0,2(a0)
0000F5AC 117C 0004 0001             		move.b	#4,1(a0)
0000F5B2 117C 0010 0019             		move.b	#$10,$19(a0)
0000F5B8 117C 0006 0018             		move.b	#6,$18(a0)
0000F5BE                            
0000F5BE                            Obj12_Animate:				; XREF: Obj12_Index
0000F5BE 5328 001E                  		subq.b	#1,$1E(a0)
0000F5C2 6A00                       		bpl.s	Obj12_ChkDel
0000F5C4 117C 0007 001E             		move.b	#7,$1E(a0)
0000F5CA 5228 001A                  		addq.b	#1,$1A(a0)
0000F5CE 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F5D4 6500                       		bcs.s	Obj12_ChkDel
0000F5D6 117C 0000 001A             		move.b	#0,$1A(a0)
0000F5DC                            
0000F5DC                            Obj12_ChkDel:
0000F5DC 3028 0008                  		move.w	8(a0),d0
0000F5E0 0240 FF80                  		andi.w	#$FF80,d0
0000F5E4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5E8 0441 0080                  		subi.w	#$80,d1
0000F5EC 0241 FF80                  		andi.w	#$FF80,d1
0000F5F0 9041                       		sub.w	d1,d0
0000F5F2 0C40 0280                  		cmpi.w	#$280,d0
0000F5F6 6200 ECD0                  		bhi.w	DeleteObject
0000F5FA 6000 EC90                  		bra.w	DisplaySprite
0000F5FE                            ; ===========================================================================
0000F5FE                            ; ---------------------------------------------------------------------------
0000F5FE                            ; Sprite mappings - lamp (SYZ)
0000F5FE                            ; ---------------------------------------------------------------------------
0000F5FE                            Map_obj12:
0000F5FE                            	include "_maps\obj12.asm"
0000F5FE                            ; ---------------------------------------------------------------------------
0000F5FE                            ; Sprite mappings - lamp (SYZ)
0000F5FE                            ; ---------------------------------------------------------------------------
0000F5FE 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F602 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F606 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F60A 02                         byte_E98E:	dc.b 2
0000F60B F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F610 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F615 02                         byte_E999:	dc.b 2
0000F616 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F61B 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F620 02                         byte_E9A4:	dc.b 2
0000F621 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F626 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F62B 02                         byte_E9AF:	dc.b 2
0000F62C F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F631 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F636 02                         byte_E9BA:	dc.b 2
0000F637 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F63C 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F641 02                         byte_E9C5:	dc.b 2
0000F642 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F647 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F64C                            		even
0000F64C                            		even
0000F64C                            
0000F64C                            ; ===========================================================================
0000F64C                            ; ---------------------------------------------------------------------------
0000F64C                            ; Object 47 - pinball bumper (SYZ)
0000F64C                            ; ---------------------------------------------------------------------------
0000F64C                            
0000F64C                            Obj47:					; XREF: Obj_Index
0000F64C 7000                       		moveq	#0,d0
0000F64E 1028 0024                  		move.b	$24(a0),d0
0000F652 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F656 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F65A                            ; ===========================================================================
0000F65A 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F65C 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F65E                            ; ===========================================================================
0000F65E                            
0000F65E                            Obj47_Main:				; XREF: Obj47_Index
0000F65E 5428 0024                  		addq.b	#2,$24(a0)
0000F662 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F66A 317C 0380 0002             		move.w	#$380,2(a0)
0000F670 117C 0004 0001             		move.b	#4,1(a0)
0000F676 117C 0010 0019             		move.b	#$10,$19(a0)
0000F67C 117C 0001 0018             		move.b	#1,$18(a0)
0000F682 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F688                            
0000F688                            Obj47_Hit:				; XREF: Obj47_Index
0000F688 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F68C 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F690 4228 0021                  		clr.b	$21(a0)
0000F694 43F8 D000                  		lea	($FFFFD000).w,a1
0000F698 3228 0008                  		move.w	8(a0),d1
0000F69C 3428 000C                  		move.w	$C(a0),d2
0000F6A0 9269 0008                  		sub.w	8(a1),d1
0000F6A4 9469 000C                  		sub.w	$C(a1),d2
0000F6A8 4EB9 0000 303C             		jsr	(CalcAngle).l
0000F6AE 4EB9 0000 2D6E             		jsr	(CalcSine).l
0000F6B4 C3FC F900                  		muls.w	#-$700,d1
0000F6B8 E081                       		asr.l	#8,d1
0000F6BA 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F6BE C1FC F900                  		muls.w	#-$700,d0
0000F6C2 E080                       		asr.l	#8,d0
0000F6C4 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F6C8 08E9 0001 0022             		bset	#1,$22(a1)
0000F6CE 08A9 0004 0022             		bclr	#4,$22(a1)
0000F6D4 08A9 0005 0022             		bclr	#5,$22(a1)
0000F6DA 4229 003C                  		clr.b	$3C(a1)
0000F6DE 117C 0001 001C             		move.b	#1,$1C(a0)
0000F6E4 303C 00B4                  		move.w	#$B4,d0
0000F6E8 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F6EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F6F2 7000                       		moveq	#0,d0
0000F6F4 1028 0023                  		move.b	$23(a0),d0
0000F6F8 6700                       		beq.s	Obj47_Score
0000F6FA 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F700 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F702 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F706                            
0000F706                            Obj47_Score:
0000F706 7001                       		moveq	#1,d0
0000F708 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F70E 6100 F002                  		bsr.w	SingleObjLoad
0000F712 6600                       		bne.s	Obj47_Display
0000F714 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F718 3368 0008 0008             		move.w	8(a0),8(a1)
0000F71E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F724 137C 0004 001A             		move.b	#4,$1A(a1)
0000F72A                            
0000F72A                            Obj47_Display:
0000F72A 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F730 6100 BBB2                  		bsr.w	AnimateSprite
0000F734 3028 0008                  		move.w	8(a0),d0
0000F738 0240 FF80                  		andi.w	#$FF80,d0
0000F73C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F740 0441 0080                  		subi.w	#$80,d1
0000F744 0241 FF80                  		andi.w	#$FF80,d1
0000F748 9041                       		sub.w	d1,d0
0000F74A 0C40 0280                  		cmpi.w	#$280,d0
0000F74E 6200                       		bhi.s	Obj47_ChkHit
0000F750 6000 EB3A                  		bra.w	DisplaySprite
0000F754                            ; ===========================================================================
0000F754                            
0000F754                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F754 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F758 7000                       		moveq	#0,d0
0000F75A 1028 0023                  		move.b	$23(a0),d0
0000F75E 6700                       		beq.s	Obj47_Delete
0000F760 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F766                            
0000F766                            Obj47_Delete:
0000F766 6000 EB60                  		bra.w	DeleteObject
0000F76A                            ; ===========================================================================
0000F76A                            Ani_obj47:
0000F76A                            	include "_anim\obj47.asm"
0000F76A                            ; ---------------------------------------------------------------------------
0000F76A                            ; Animation script - flamethrower (SBZ)
0000F76A                            ; ---------------------------------------------------------------------------
0000F76A 0000                       		dc.w byte_EAF4-Ani_obj47
0000F76C 0000                       		dc.w byte_EAF8-Ani_obj47
0000F76E 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F772 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F77A                            		even
0000F77A                            		even
0000F77A                            
0000F77A                            ; ---------------------------------------------------------------------------
0000F77A                            ; Sprite mappings - pinball bumper (SYZ)
0000F77A                            ; ---------------------------------------------------------------------------
0000F77A                            Map_obj47:
0000F77A                            	include "_maps\obj47.asm"
0000F77A                            ; ---------------------------------------------------------------------------
0000F77A                            ; Sprite mappings - pinball bumper (SYZ)
0000F77A                            ; ---------------------------------------------------------------------------
0000F77A 0000                       		dc.w byte_EB06-Map_obj47
0000F77C 0000                       		dc.w byte_EB11-Map_obj47
0000F77E 0000                       		dc.w byte_EB1C-Map_obj47
0000F780 02                         byte_EB06:	dc.b 2
0000F781 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F786 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F78B 02                         byte_EB11:	dc.b 2
0000F78C F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F791 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F796 02                         byte_EB1C:	dc.b 2
0000F797 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F79C F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F7A2 00                         		even
0000F7A2 00                         		even
0000F7A2                            
0000F7A2                            ; ===========================================================================
0000F7A2                            ; ---------------------------------------------------------------------------
0000F7A2                            ; Object 0D - signpost at the end of a level
0000F7A2                            ; ---------------------------------------------------------------------------
0000F7A2                            
0000F7A2                            Obj0D:					; XREF: Obj_Index
0000F7A2 7000                       		moveq	#0,d0
0000F7A4 1028 0024                  		move.b	$24(a0),d0
0000F7A8 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F7AC 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F7B0 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F7B6 6100 BB2C                  		bsr.w	AnimateSprite
0000F7BA 6100 EAD0                  		bsr.w	DisplaySprite
0000F7BE 3028 0008                  		move.w	8(a0),d0
0000F7C2 0240 FF80                  		andi.w	#$FF80,d0
0000F7C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7CA 0441 0080                  		subi.w	#$80,d1
0000F7CE 0241 FF80                  		andi.w	#$FF80,d1
0000F7D2 9041                       		sub.w	d1,d0
0000F7D4 0C40 0280                  		cmpi.w	#$280,d0
0000F7D8 6200 EAEE                  		bhi.w	DeleteObject
0000F7DC 4E75                       		rts	
0000F7DE                            ; ===========================================================================
0000F7DE 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F7E0 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F7E2 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F7E4 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F7E6 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F7E8                            ; ===========================================================================
0000F7E8                            
0000F7E8                            Obj0D_Main:				; XREF: Obj0D_Index
0000F7E8 5428 0024                  		addq.b	#2,$24(a0)
0000F7EC 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F7F4 317C 0680 0002             		move.w	#$680,2(a0)
0000F7FA 117C 0004 0001             		move.b	#4,1(a0)
0000F800 117C 0018 0019             		move.b	#$18,$19(a0)
0000F806 117C 0004 0018             		move.b	#4,$18(a0)
0000F80C                            
0000F80C                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F80C 3038 D008                  		move.w	($FFFFD008).w,d0
0000F810 9068 0008                  		sub.w	8(a0),d0
0000F814 6500                       		bcs.s	locret_EBBA
0000F816 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F81A 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F81C 303C 00CF                  		move.w	#$CF,d0
0000F820 4EB9 0000 15CE             		jsr	(PlaySound).l	; play signpost	sound
0000F826 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F82A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F830 5428 0024                  		addq.b	#2,$24(a0)
0000F834                            
0000F834                            locret_EBBA:
0000F834 4E75                       		rts	
0000F836                            ; ===========================================================================
0000F836                            
0000F836                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F836 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F83A 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F83C 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F842 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F846 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F84C 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F84E 5428 0024                  		addq.b	#2,$24(a0)
0000F852                            
0000F852                            Obj0D_Sparkle:
0000F852 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F856 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F858 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F85E 7000                       		moveq	#0,d0
0000F860 1028 0034                  		move.b	$34(a0),d0
0000F864 5428 0034                  		addq.b	#2,$34(a0)
0000F868 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F86E 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F872 6100 EE9E                  		bsr.w	SingleObjLoad
0000F876 6600                       		bne.s	locret_EC42
0000F878 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F87C 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F882 101A                       		move.b	(a2)+,d0
0000F884 4880                       		ext.w	d0
0000F886 D068 0008                  		add.w	8(a0),d0
0000F88A 3340 0008                  		move.w	d0,8(a1)
0000F88E 101A                       		move.b	(a2)+,d0
0000F890 4880                       		ext.w	d0
0000F892 D068 000C                  		add.w	$C(a0),d0
0000F896 3340 000C                  		move.w	d0,$C(a1)
0000F89A 237C 0000 AA86 0004        		move.l	#Map_obj25,4(a1)
0000F8A2 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F8A8 137C 0004 0001             		move.b	#4,1(a1)
0000F8AE 137C 0002 0018             		move.b	#2,$18(a1)
0000F8B4 137C 0008 0019             		move.b	#8,$19(a1)
0000F8BA                            
0000F8BA                            locret_EC42:
0000F8BA 4E75                       		rts	
0000F8BC                            ; ===========================================================================
0000F8BC E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F8BE 0808                       		dc.b	8,   8
0000F8C0 F000                       		dc.b -$10,   0
0000F8C2 18F8                       		dc.b  $18,  -8
0000F8C4 00F8                       		dc.b	0,  -8
0000F8C6 1000                       		dc.b  $10,   0
0000F8C8 E808                       		dc.b -$18,   8
0000F8CA 1810                       		dc.b  $18, $10
0000F8CC                            ; ===========================================================================
0000F8CC                            
0000F8CC                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F8CC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F8D0 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F8D4 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F8DA 6600                       		bne.s	loc_EC70
0000F8DC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F8E2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F8E8 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F8EA 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F8F0 6000                       		bra.s	loc_EC70
0000F8F2                            
0000F8F2                            Obj0D_MoveLeft:
0000F8F2 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F8F8                            
0000F8F8                            loc_EC70:
0000F8F8 4A38 D000                  		tst.b	($FFFFD000).w
0000F8FC 6700                       		beq.s	loc_EC86
0000F8FE 3038 D008                  		move.w	($FFFFD008).w,d0
0000F902 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F906 0641 0128                  		addi.w	#$128,d1
0000F90A B041                       		cmp.w	d1,d0
0000F90C 6500                       		bcs.s	locret_ECEE
0000F90E                            
0000F90E                            loc_EC86:
0000F90E 5428 0024                  		addq.b	#2,$24(a0)
0000F912                            
0000F912                            ; ---------------------------------------------------------------------------
0000F912                            ; Subroutine to	set up bonuses at the end of an	act
0000F912                            ; ---------------------------------------------------------------------------
0000F912                            
0000F912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F912                            
0000F912                            
0000F912                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F912 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F916 6600                       		bne.s	locret_ECEE
0000F918 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F91E 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F922 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F926 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F92C 7010                       		moveq	#$10,d0
0000F92E 4EB9 0000 17EA             		jsr	(LoadPLC2).l	; load title card patterns
0000F934 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F93A 7000                       		moveq	#0,d0
0000F93C 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F940 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F944 7200                       		moveq	#0,d1
0000F946 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F94A D041                       		add.w	d1,d0		; add up your time
0000F94C 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F950 7214                       		moveq	#$14,d1
0000F952 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F954 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F956 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F958                            
0000F958                            loc_ECD0:
0000F958 D040                       		add.w	d0,d0
0000F95A 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F960 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F964 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F968 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F96C 303C 008E                  		move.w	#$8E,d0
0000F970 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F976                            
0000F976                            locret_ECEE:
0000F976 4E75                       		rts	
0000F978                            ; End of function GotThroughAct
0000F978                            
0000F978                            ; ===========================================================================
0000F978 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F98C 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F9A2                            ; ===========================================================================
0000F9A2                            
0000F9A2                            locret_ED1A:				; XREF: Obj0D_Index
0000F9A2 4E75                       		rts	
0000F9A4                            ; ===========================================================================
0000F9A4                            Ani_obj0D:
0000F9A4                            	include "_anim\obj0D.asm"
0000F9A4                            ; ---------------------------------------------------------------------------
0000F9A4                            ; Animation script - signpost
0000F9A4                            ; ---------------------------------------------------------------------------
0000F9A4 0000                       		dc.w byte_ED24-Ani_obj0D
0000F9A6 0000                       		dc.w byte_ED28-Ani_obj0D
0000F9A8 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F9AA 0000                       		dc.w byte_ED34-Ani_obj0D
0000F9AC 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F9B0 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F9B6 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F9BC 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F9C0 00                         		even
0000F9C0 00                         		even
0000F9C0                            
0000F9C0                            ; ---------------------------------------------------------------------------
0000F9C0                            ; Sprite mappings - signpost
0000F9C0                            ; ---------------------------------------------------------------------------
0000F9C0                            Map_obj0D:
0000F9C0                            	include "_maps\obj0D.asm"
0000F9C0                            ; ---------------------------------------------------------------------------
0000F9C0                            ; Sprite mappings - signpost
0000F9C0                            ; ---------------------------------------------------------------------------
0000F9C0 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F9C4 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F9C8 0000                       		dc.w byte_ED73-Map_obj0D
0000F9CA 03                         byte_ED42:	dc.b 3
0000F9CB F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F9D0 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F9D5 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F9DA 02                         byte_ED52:	dc.b 2
0000F9DB F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F9E0 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F9E5 02                         byte_ED5D:	dc.b 2
0000F9E6 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F9EB 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F9F0 02                         byte_ED68:	dc.b 2
0000F9F1 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F9F6 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F9FB 03                         byte_ED73:	dc.b 3
0000F9FC F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000FA01 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000FA06 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FA0C 00                         		even
0000FA0C 00                         		even
0000FA0C                            
0000FA0C                            ; ===========================================================================
0000FA0C                            ; ---------------------------------------------------------------------------
0000FA0C                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000FA0C                            ; ---------------------------------------------------------------------------
0000FA0C                            
0000FA0C                            Obj4C:					; XREF: Obj_Index
0000FA0C 7000                       		moveq	#0,d0
0000FA0E 1028 0024                  		move.b	$24(a0),d0
0000FA12 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000FA16 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000FA1A 6000 0000                  		bra.w	Obj4D_ChkDel
0000FA1E                            ; ===========================================================================
0000FA1E 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000FA20 0000                       		dc.w loc_EDCC-Obj4C_Index
0000FA22 0000                       		dc.w loc_EE3E-Obj4C_Index
0000FA24 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000FA26 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000FA28 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000FA2A                            ; ===========================================================================
0000FA2A                            
0000FA2A                            Obj4C_Main:				; XREF: Obj4C_Index
0000FA2A 5428 0024                  		addq.b	#2,$24(a0)
0000FA2E 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000FA36 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000FA3C 117C 0004 0001             		move.b	#4,1(a0)
0000FA42 117C 0001 0018             		move.b	#1,$18(a0)
0000FA48 117C 0038 0019             		move.b	#$38,$19(a0)
0000FA4E 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000FA54                            
0000FA54                            loc_EDCC:				; XREF: Obj4C_Index
0000FA54 5368 0032                  		subq.w	#1,$32(a0)
0000FA58 6A00                       		bpl.s	locret_EDF0
0000FA5A 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000FA60 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FA64 3228 000C                  		move.w	$C(a0),d1
0000FA68 B041                       		cmp.w	d1,d0
0000FA6A 6400                       		bcc.s	locret_EDF0
0000FA6C 0441 0170                  		subi.w	#$170,d1
0000FA70 B041                       		cmp.w	d1,d0
0000FA72 6500                       		bcs.s	locret_EDF0
0000FA74 5428 0024                  		addq.b	#2,$24(a0)
0000FA78                            
0000FA78                            locret_EDF0:
0000FA78 4E75                       		rts	
0000FA7A                            ; ===========================================================================
0000FA7A                            
0000FA7A                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000FA7A 5428 0024                  		addq.b	#2,$24(a0)
0000FA7E 6100 ECA8                  		bsr.w	SingleObjLoad2
0000FA82 6600                       		bne.s	loc_EE18
0000FA84 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000FA88 3368 0008 0008             		move.w	8(a0),8(a1)
0000FA8E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FA94 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FA9A 2348 003C                  		move.l	a0,$3C(a1)
0000FA9E                            
0000FA9E                            loc_EE18:
0000FA9E 117C 0001 001C             		move.b	#1,$1C(a0)
0000FAA4 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000FAA8 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000FAAA 117C 0004 001C             		move.b	#4,$1C(a0)
0000FAB0 6000                       		bra.s	Obj4C_Display
0000FAB2                            ; ===========================================================================
0000FAB2                            
0000FAB2                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000FAB2 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000FAB6 08E9 0001 0022             		bset	#1,$22(a1)
0000FABC 337C FA80 0012             		move.w	#-$580,$12(a1)
0000FAC2 6000                       		bra.s	Obj4C_Display
0000FAC4                            ; ===========================================================================
0000FAC4                            
0000FAC4                            loc_EE3E:				; XREF: Obj4C_Index
0000FAC4 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000FAC8 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000FACA 5428 0024                  		addq.b	#2,$24(a0)
0000FACE 4E75                       		rts	
0000FAD0                            ; ===========================================================================
0000FAD0                            
0000FAD0                            Obj4C_Display:				; XREF: Obj4C_Index
0000FAD0 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FAD6 6100 B80C                  		bsr.w	AnimateSprite
0000FADA 6100 E7B0                  		bsr.w	DisplaySprite
0000FADE 4E75                       		rts	
0000FAE0                            ; ===========================================================================
0000FAE0                            
0000FAE0                            Obj4C_Delete:				; XREF: Obj4C_Index
0000FAE0 117C 0000 001C             		move.b	#0,$1C(a0)
0000FAE6 117C 0002 0024             		move.b	#2,$24(a0)
0000FAEC 4A28 0028                  		tst.b	$28(a0)
0000FAF0 6700 E7D6                  		beq.w	DeleteObject
0000FAF4 4E75                       		rts	
0000FAF6                            ; ===========================================================================
0000FAF6                            ; ---------------------------------------------------------------------------
0000FAF6                            ; Object 4D - lava geyser / lavafall (MZ)
0000FAF6                            ; ---------------------------------------------------------------------------
0000FAF6                            
0000FAF6                            Obj4D:					; XREF: Obj_Index
0000FAF6 7000                       		moveq	#0,d0
0000FAF8 1028 0024                  		move.b	$24(a0),d0
0000FAFC 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000FB00 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000FB04 6000 E786                  		bra.w	DisplaySprite
0000FB08                            ; ===========================================================================
0000FB08 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000FB0A 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000FB0C 0000                       		dc.w loc_EFFC-Obj4D_Index
0000FB0E 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000FB10                            
0000FB10 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000FB14                            ; ===========================================================================
0000FB14                            
0000FB14                            Obj4D_Main:				; XREF: Obj4D_Index
0000FB14 5428 0024                  		addq.b	#2,$24(a0)
0000FB18 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FB1E 4A28 0028                  		tst.b	$28(a0)
0000FB22 6700                       		beq.s	loc_EEA4
0000FB24 0468 0250 000C             		subi.w	#$250,$C(a0)
0000FB2A                            
0000FB2A                            loc_EEA4:
0000FB2A 7000                       		moveq	#0,d0
0000FB2C 1028 0028                  		move.b	$28(a0),d0
0000FB30 D040                       		add.w	d0,d0
0000FB32 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000FB38 2248                       		movea.l	a0,a1
0000FB3A 7201                       		moveq	#1,d1
0000FB3C 6100                       		bsr.s	Obj4D_MakeLava
0000FB3E 6000                       		bra.s	loc_EF10
0000FB40                            ; ===========================================================================
0000FB40                            
0000FB40                            Obj4D_Loop:
0000FB40 6100 EBE6                  		bsr.w	SingleObjLoad2
0000FB44 6600                       		bne.s	loc_EF0A
0000FB46                            
0000FB46                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000FB46 12BC 004D                  		move.b	#$4D,0(a1)
0000FB4A 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000FB52 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FB58 137C 0004 0001             		move.b	#4,1(a1)
0000FB5E 137C 0020 0019             		move.b	#$20,$19(a1)
0000FB64 3368 0008 0008             		move.w	8(a0),8(a1)
0000FB6A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FB70 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FB76 137C 0001 0018             		move.b	#1,$18(a1)
0000FB7C 137C 0005 001C             		move.b	#5,$1C(a1)
0000FB82 4A28 0028                  		tst.b	$28(a0)
0000FB86 6700                       		beq.s	loc_EF0A
0000FB88 137C 0002 001C             		move.b	#2,$1C(a1)
0000FB8E                            
0000FB8E                            loc_EF0A:
0000FB8E 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000FB92 4E75                       		rts	
0000FB94                            ; ===========================================================================
0000FB94                            
0000FB94                            loc_EF10:				; XREF: Obj4D_Main
0000FB94 0669 0060 000C             		addi.w	#$60,$C(a1)
0000FB9A 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FBA0 0669 0060 0030             		addi.w	#$60,$30(a1)
0000FBA6 137C 0093 0020             		move.b	#$93,$20(a1)
0000FBAC 137C 0080 0016             		move.b	#$80,$16(a1)
0000FBB2 08E9 0004 0001             		bset	#4,1(a1)
0000FBB8 5829 0024                  		addq.b	#4,$24(a1)
0000FBBC 2348 003C                  		move.l	a0,$3C(a1)
0000FBC0 4A28 0028                  		tst.b	$28(a0)
0000FBC4 6700                       		beq.s	Obj4D_PlaySnd
0000FBC6 7200                       		moveq	#0,d1
0000FBC8 6100 FF76                  		bsr.w	Obj4D_Loop
0000FBCC 5429 0024                  		addq.b	#2,$24(a1)
0000FBD0 08E9 0004 0002             		bset	#4,2(a1)
0000FBD6 0669 0100 000C             		addi.w	#$100,$C(a1)
0000FBDC 137C 0000 0018             		move.b	#0,$18(a1)
0000FBE2 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FBE8 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000FBEE 117C 0000 0028             		move.b	#0,$28(a0)
0000FBF4                            
0000FBF4                            Obj4D_PlaySnd:
0000FBF4 303C 00C8                  		move.w	#$C8,d0
0000FBF8 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play flame sound
0000FBFE                            
0000FBFE                            Obj4D_Action:				; XREF: Obj4D_Index
0000FBFE 7000                       		moveq	#0,d0
0000FC00 1028 0028                  		move.b	$28(a0),d0
0000FC04 D040                       		add.w	d0,d0
0000FC06 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000FC0A 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000FC0E 6100 E642                  		bsr.w	SpeedToPos
0000FC12 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FC18 6100 B6CA                  		bsr.w	AnimateSprite
0000FC1C                            
0000FC1C                            Obj4D_ChkDel:				; XREF: Obj4C
0000FC1C 3028 0008                  		move.w	8(a0),d0
0000FC20 0240 FF80                  		andi.w	#$FF80,d0
0000FC24 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC28 0441 0080                  		subi.w	#$80,d1
0000FC2C 0241 FF80                  		andi.w	#$FF80,d1
0000FC30 9041                       		sub.w	d1,d0
0000FC32 0C40 0280                  		cmpi.w	#$280,d0
0000FC36 6200 E690                  		bhi.w	DeleteObject
0000FC3A 4E75                       		rts	
0000FC3C                            ; ===========================================================================
0000FC3C 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000FC3E 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000FC40                            ; ===========================================================================
0000FC40                            
0000FC40                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000FC40 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FC46 3028 0030                  		move.w	$30(a0),d0
0000FC4A B068 000C                  		cmp.w	$C(a0),d0
0000FC4E 6400                       		bcc.s	locret_EFDA
0000FC50 5828 0024                  		addq.b	#4,$24(a0)
0000FC54 2268 003C                  		movea.l	$3C(a0),a1
0000FC58 137C 0003 001C             		move.b	#3,$1C(a1)
0000FC5E                            
0000FC5E                            locret_EFDA:
0000FC5E 4E75                       		rts	
0000FC60                            ; ===========================================================================
0000FC60                            
0000FC60                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FC60 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FC66 3028 0030                  		move.w	$30(a0),d0
0000FC6A B068 000C                  		cmp.w	$C(a0),d0
0000FC6E 6400                       		bcc.s	locret_EFFA
0000FC70 5828 0024                  		addq.b	#4,$24(a0)
0000FC74 2268 003C                  		movea.l	$3C(a0),a1
0000FC78 137C 0001 001C             		move.b	#1,$1C(a1)
0000FC7E                            
0000FC7E                            locret_EFFA:
0000FC7E 4E75                       		rts	
0000FC80                            ; ===========================================================================
0000FC80                            
0000FC80                            loc_EFFC:				; XREF: Obj4D_Index
0000FC80 2268 003C                  		movea.l	$3C(a0),a1
0000FC84 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FC8A 6700 0000                  		beq.w	Obj4D_Delete
0000FC8E 3029 000C                  		move.w	$C(a1),d0
0000FC92 0640 0060                  		addi.w	#$60,d0
0000FC96 3140 000C                  		move.w	d0,$C(a0)
0000FC9A 9068 0030                  		sub.w	$30(a0),d0
0000FC9E 4440                       		neg.w	d0
0000FCA0 7208                       		moveq	#8,d1
0000FCA2 0C40 0040                  		cmpi.w	#$40,d0
0000FCA6 6C00                       		bge.s	loc_F026
0000FCA8 720B                       		moveq	#$B,d1
0000FCAA                            
0000FCAA                            loc_F026:
0000FCAA 0C40 0080                  		cmpi.w	#$80,d0
0000FCAE 6F00                       		ble.s	loc_F02E
0000FCB0 720E                       		moveq	#$E,d1
0000FCB2                            
0000FCB2                            loc_F02E:
0000FCB2 5328 001E                  		subq.b	#1,$1E(a0)
0000FCB6 6A00                       		bpl.s	loc_F04C
0000FCB8 117C 0007 001E             		move.b	#7,$1E(a0)
0000FCBE 5228 001B                  		addq.b	#1,$1B(a0)
0000FCC2 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FCC8 6500                       		bcs.s	loc_F04C
0000FCCA 117C 0000 001B             		move.b	#0,$1B(a0)
0000FCD0                            
0000FCD0                            loc_F04C:
0000FCD0 1028 001B                  		move.b	$1B(a0),d0
0000FCD4 D001                       		add.b	d1,d0
0000FCD6 1140 001A                  		move.b	d0,$1A(a0)
0000FCDA 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FCDE                            ; ===========================================================================
0000FCDE                            
0000FCDE                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FCDE 6000 E5E8                  		bra.w	DeleteObject
0000FCE2                            ; ===========================================================================
0000FCE2                            ; ---------------------------------------------------------------------------
0000FCE2                            ; Object 4E - advancing	wall of	lava (MZ)
0000FCE2                            ; ---------------------------------------------------------------------------
0000FCE2                            
0000FCE2                            Obj4E:					; XREF: Obj_Index
0000FCE2 7000                       		moveq	#0,d0
0000FCE4 1028 0024                  		move.b	$24(a0),d0
0000FCE8 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FCEC 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FCF0                            ; ===========================================================================
0000FCF0 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FCF2 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FCF4 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FCF6 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FCF8 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FCFA                            ; ===========================================================================
0000FCFA                            
0000FCFA                            Obj4E_Main:				; XREF: Obj4E_Index
0000FCFA 5828 0024                  		addq.b	#4,$24(a0)
0000FCFE 2248                       		movea.l	a0,a1
0000FD00 7201                       		moveq	#1,d1
0000FD02 6000                       		bra.s	Obj4E_Main2
0000FD04                            ; ===========================================================================
0000FD04                            
0000FD04                            Obj4E_Loop:
0000FD04 6100 EA22                  		bsr.w	SingleObjLoad2
0000FD08 6600                       		bne.s	loc_F0C8
0000FD0A                            
0000FD0A                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FD0A 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FD0E 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FD16 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FD1C 137C 0004 0001             		move.b	#4,1(a1)
0000FD22 137C 0050 0019             		move.b	#$50,$19(a1)
0000FD28 3368 0008 0008             		move.w	8(a0),8(a1)
0000FD2E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FD34 137C 0001 0018             		move.b	#1,$18(a1)
0000FD3A 137C 0000 001C             		move.b	#0,$1C(a1)
0000FD40 137C 0094 0020             		move.b	#$94,$20(a1)
0000FD46 2348 003C                  		move.l	a0,$3C(a1)
0000FD4A                            
0000FD4A                            loc_F0C8:
0000FD4A 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FD4E                            
0000FD4E 5C29 0024                  		addq.b	#6,$24(a1)
0000FD52 137C 0004 001A             		move.b	#4,$1A(a1)
0000FD58                            
0000FD58                            Obj4E_Action:				; XREF: Obj4E_Index
0000FD58 3038 D008                  		move.w	($FFFFD008).w,d0
0000FD5C 9068 0008                  		sub.w	8(a0),d0
0000FD60 6400                       		bcc.s	Obj4E_ChkSonic
0000FD62 4440                       		neg.w	d0
0000FD64                            
0000FD64                            Obj4E_ChkSonic:
0000FD64 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FD68 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FD6A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FD6E 9068 000C                  		sub.w	$C(a0),d0
0000FD72 6400                       		bcc.s	loc_F0F4
0000FD74 4440                       		neg.w	d0
0000FD76                            
0000FD76                            loc_F0F4:
0000FD76 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FD7A 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FD7C 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FD82 6000                       		bra.s	Obj4E_Solid
0000FD84                            ; ===========================================================================
0000FD84                            
0000FD84                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FD84 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FD88 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FD8A 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FD90 5528 0024                  		subq.b	#2,$24(a0)
0000FD94                            
0000FD94                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FD94 323C 002B                  		move.w	#$2B,d1
0000FD98 343C 0018                  		move.w	#$18,d2
0000FD9C 3602                       		move.w	d2,d3
0000FD9E 5243                       		addq.w	#1,d3
0000FDA0 3828 0008                  		move.w	8(a0),d4
0000FDA4 1028 0024                  		move.b	$24(a0),d0
0000FDA8 3F00                       		move.w	d0,-(sp)
0000FDAA 6100 0000                  		bsr.w	SolidObject
0000FDAE 301F                       		move.w	(sp)+,d0
0000FDB0 1140 0024                  		move.b	d0,$24(a0)
0000FDB4 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FDBA 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FDBC 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FDC0 4228 0036                  		clr.b	$36(a0)
0000FDC4                            
0000FDC4                            Obj4E_Animate:
0000FDC4 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FDCA 6100 B518                  		bsr.w	AnimateSprite
0000FDCE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FDD4 6400                       		bcc.s	Obj4E_ChkDel
0000FDD6 6100 E47A                  		bsr.w	SpeedToPos
0000FDDA                            
0000FDDA                            Obj4E_ChkDel:
0000FDDA 6100 E4B0                  		bsr.w	DisplaySprite
0000FDDE 4A28 0036                  		tst.b	$36(a0)
0000FDE2 6600                       		bne.s	locret_F17E
0000FDE4 3028 0008                  		move.w	8(a0),d0
0000FDE8 0240 FF80                  		andi.w	#$FF80,d0
0000FDEC 3238 F700                  		move.w	($FFFFF700).w,d1
0000FDF0 0441 0080                  		subi.w	#$80,d1
0000FDF4 0241 FF80                  		andi.w	#$FF80,d1
0000FDF8 9041                       		sub.w	d1,d0
0000FDFA 0C40 0280                  		cmpi.w	#$280,d0
0000FDFE 6200                       		bhi.s	Obj4E_ChkGone
0000FE00                            
0000FE00                            locret_F17E:
0000FE00 4E75                       		rts	
0000FE02                            ; ===========================================================================
0000FE02                            
0000FE02                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FE02 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FE06 7000                       		moveq	#0,d0
0000FE08 1028 0023                  		move.b	$23(a0),d0
0000FE0C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FE12 117C 0008 0024             		move.b	#8,$24(a0)
0000FE18 4E75                       		rts	
0000FE1A                            ; ===========================================================================
0000FE1A                            
0000FE1A                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FE1A 2268 003C                  		movea.l	$3C(a0),a1
0000FE1E 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FE24 6700                       		beq.s	Obj4E_Delete
0000FE26 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FE2C 0468 0080 0008             		subi.w	#$80,8(a0)
0000FE32 6000 E458                  		bra.w	DisplaySprite
0000FE36                            ; ===========================================================================
0000FE36                            
0000FE36                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FE36 6000 E490                  		bra.w	DeleteObject
0000FE3A                            ; ===========================================================================
0000FE3A                            ; ---------------------------------------------------------------------------
0000FE3A                            ; Object 54 - invisible	lava tag (MZ)
0000FE3A                            ; ---------------------------------------------------------------------------
0000FE3A                            
0000FE3A                            Obj54:					; XREF: Obj_Index
0000FE3A 7000                       		moveq	#0,d0
0000FE3C 1028 0024                  		move.b	$24(a0),d0
0000FE40 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FE44 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FE48                            ; ===========================================================================
0000FE48 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FE4A 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FE4C                            
0000FE4C 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FE50                            ; ===========================================================================
0000FE50                            
0000FE50                            Obj54_Main:				; XREF: Obj54_Index
0000FE50 5428 0024                  		addq.b	#2,$24(a0)
0000FE54 7000                       		moveq	#0,d0
0000FE56 1028 0028                  		move.b	$28(a0),d0
0000FE5A 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FE60 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FE68 117C 0084 0001             		move.b	#$84,1(a0)
0000FE6E                            
0000FE6E                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FE6E 3028 0008                  		move.w	8(a0),d0
0000FE72 0240 FF80                  		andi.w	#$FF80,d0
0000FE76 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE7A 0441 0080                  		subi.w	#$80,d1
0000FE7E 0241 FF80                  		andi.w	#$FF80,d1
0000FE82 9041                       		sub.w	d1,d0
0000FE84 6B00 E442                  		bmi.w	DeleteObject
0000FE88 0C40 0280                  		cmpi.w	#$280,d0
0000FE8C 6200 E43A                  		bhi.w	DeleteObject
0000FE90 4E75                       		rts	
0000FE92                            ; ===========================================================================
0000FE92                            ; ---------------------------------------------------------------------------
0000FE92                            ; Sprite mappings - invisible lava tag (MZ)
0000FE92                            ; ---------------------------------------------------------------------------
0000FE92                            Map_obj54:
0000FE92                            	include "_maps\obj54.asm"
0000FE92                            ; ---------------------------------------------------------------------------
0000FE92                            ; Sprite mappings - invisible lava tag (MZ)
0000FE92                            ; ---------------------------------------------------------------------------
0000FE92 0000                       		dc.w byte_F212-Map_obj54
0000FE94 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FE96 00                         		even
0000FE96 00                         		even
0000FE96                            
0000FE96                            Ani_obj4C:
0000FE96                            	include "_anim\obj4C.asm"
0000FE96                            ; ---------------------------------------------------------------------------
0000FE96                            ; Animation script - geyser of lava (MZ)
0000FE96                            ; ---------------------------------------------------------------------------
0000FE96 0000                       		dc.w byte_F220-Ani_obj4C
0000FE98 0000                       		dc.w byte_F22A-Ani_obj4C
0000FE9A 0000                       		dc.w byte_F22E-Ani_obj4C
0000FE9C 0000                       		dc.w byte_F232-Ani_obj4C
0000FE9E 0000                       		dc.w byte_F23A-Ani_obj4C
0000FEA0 0000                       		dc.w byte_F23E-Ani_obj4C
0000FEA2 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FEAC 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FEB0 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FEB4 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FEBC 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FEC0 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FEC4                            		even
0000FEC4                            		even
0000FEC4                            
0000FEC4                            Ani_obj4E:
0000FEC4                            	include "_anim\obj4E.asm"
0000FEC4                            ; ---------------------------------------------------------------------------
0000FEC4                            ; Animation script - advancing wall of lava (MZ)
0000FEC4                            ; ---------------------------------------------------------------------------
0000FEC4 0000                       		dc.w byte_F244-Ani_obj4E
0000FEC6 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FECC                            		even
0000FECC                            		even
0000FECC                            
0000FECC                            ; ---------------------------------------------------------------------------
0000FECC                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FECC                            ; ---------------------------------------------------------------------------
0000FECC                            Map_obj4C:
0000FECC                            	include "_maps\obj4C.asm"
0000FECC                            ; ---------------------------------------------------------------------------
0000FECC                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FECC                            ; ---------------------------------------------------------------------------
0000FECC 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FED0 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FED4 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FED8 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FEDC 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FEE0 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FEE4 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FEE8 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FEEC 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FEF0 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FEF4 02                         byte_F272:	dc.b 2
0000FEF5 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FEFA EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FEFF 02                         byte_F27D:	dc.b 2
0000FF00 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FF05 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FF0A 04                         byte_F288:	dc.b 4
0000FF0B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FF10 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FF15 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FF1A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FF1F 04                         byte_F29D:	dc.b 4
0000FF20 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FF25 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FF2A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FF2F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FF34 06                         byte_F2B2:	dc.b 6
0000FF35 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FF3A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FF3F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FF44 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FF49 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FF4E E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FF53 06                         byte_F2D1:	dc.b 6
0000FF54 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FF59 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FF5E F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FF63 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FF68 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FF6D E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FF72 02                         byte_F2F0:	dc.b 2
0000FF73 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FF78 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FF7D 02                         byte_F2FB:	dc.b 2
0000FF7E E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FF83 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FF88 0A                         byte_F306:	dc.b $A
0000FF89 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FF8E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FF93 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FF98 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FF9D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FFA2 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FFA7 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FFAC F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FFB1 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FFB6 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FFBB 0A                         byte_F339:	dc.b $A
0000FFBC 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FFC1 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FFC6 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FFCB B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FFD0 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FFD5 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FFDA F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FFDF F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FFE4 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FFE9 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FFEE 0A                         byte_F36C:	dc.b $A
0000FFEF 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FFF4 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FFF9 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FFFE B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010003 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010008 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001000D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010012 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010017 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001001C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010021 06                         byte_F39F:	dc.b 6
00010022 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010027 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001002C B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010031 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010036 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001003B D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010040 06                         byte_F3BE:	dc.b 6
00010041 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010046 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001004B B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010050 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010055 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001005A D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001005F 06                         byte_F3DD:	dc.b 6
00010060 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010065 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001006A B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001006F B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010074 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010079 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001007E 10                         byte_F3FC:	dc.b $10
0001007F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010084 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010089 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001008E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010093 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010098 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001009D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000100A2 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000100A7 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000100AC 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000100B1 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000100B6 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000100BB 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000100C0 500F 0840 00               		dc.b $50, $F, 8, $40, 0
000100C5 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
000100CA 700F 0840 00               		dc.b $70, $F, 8, $40, 0
000100CF 10                         byte_F44D:	dc.b $10
000100D0 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000100D5 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000100DA B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000100DF B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000100E4 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000100E9 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000100EE F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000100F3 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000100F8 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000100FD 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010102 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010107 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0001010C 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010111 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010116 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0001011B 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010120 10                         byte_F49E:	dc.b $10
00010121 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010126 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001012B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010130 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010135 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001013A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001013F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010144 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010149 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001014E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010153 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010158 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0001015D 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010162 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010167 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001016C 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010171 06                         byte_F4EF:	dc.b 6
00010172 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010177 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001017C E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010181 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010186 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001018B D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010190 06                         byte_F50E:	dc.b 6
00010191 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010196 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001019B E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000101A0 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000101A5 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000101AA D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000101AF 00                         byte_F52D:	dc.b 0
000101B0                            		even
000101B0                            		even
000101B0                            
000101B0                            ; ---------------------------------------------------------------------------
000101B0                            ; Sprite mappings - advancing wall of lava (MZ)
000101B0                            ; ---------------------------------------------------------------------------
000101B0                            Map_obj4E:
000101B0                            	include "_maps\obj4E.asm"
000101B0                            ; ---------------------------------------------------------------------------
000101B0                            ; Sprite mappings - advancing wall of lava (MZ)
000101B0                            ; ---------------------------------------------------------------------------
000101B0 0000                       		dc.w byte_F538-Map_obj4E
000101B2 0000                       		dc.w byte_F566-Map_obj4E
000101B4 0000                       		dc.w byte_F594-Map_obj4E
000101B6 0000                       		dc.w byte_F5C2-Map_obj4E
000101B8 0000                       		dc.w byte_F5F0-Map_obj4E
000101BA 09                         byte_F538:	dc.b 9
000101BB E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
000101C0 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000101C5 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000101CA E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000101CF 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000101D4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000101D9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000101DE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000101E3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000101E8 09                         byte_F566:	dc.b 9
000101E9 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000101EE 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
000101F3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000101F8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000101FD 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010202 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010207 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001020C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010211 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010216 09                         byte_F594:	dc.b 9
00010217 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0001021C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010221 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010226 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001022B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010230 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010235 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001023A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001023F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010244 09                         byte_F5C2:	dc.b 9
00010245 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0001024A 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0001024F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010254 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010259 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001025E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010263 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010268 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001026D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010272 08                         byte_F5F0:	dc.b 8
00010273 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010278 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001027D E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010282 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010287 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001028C 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010291 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010296 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001029C 00                         		even
0001029C 00                         		even
0001029C                            
0001029C                            ; ===========================================================================
0001029C                            ; ---------------------------------------------------------------------------
0001029C                            ; Object 40 - Moto Bug enemy (GHZ)
0001029C                            ; ---------------------------------------------------------------------------
0001029C                            
0001029C                            Obj40:					; XREF: Obj_Index
0001029C 7000                       		moveq	#0,d0
0001029E 1028 0024                  		move.b	$24(a0),d0
000102A2 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
000102A6 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
000102AA                            ; ===========================================================================
000102AA 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
000102AC 0000                       		dc.w Obj40_Action-Obj40_Index
000102AE 0000                       		dc.w Obj40_Animate-Obj40_Index
000102B0 0000                       		dc.w Obj40_Delete-Obj40_Index
000102B2                            ; ===========================================================================
000102B2                            
000102B2                            Obj40_Main:				; XREF: Obj40_Index
000102B2 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
000102BA 317C 04F0 0002             		move.w	#$4F0,2(a0)
000102C0 117C 0004 0001             		move.b	#4,1(a0)
000102C6 117C 0004 0018             		move.b	#4,$18(a0)
000102CC 117C 0014 0019             		move.b	#$14,$19(a0)
000102D2 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
000102D6 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
000102D8 117C 000E 0016             		move.b	#$E,$16(a0)
000102DE 117C 0008 0017             		move.b	#8,$17(a0)
000102E4 117C 000C 0020             		move.b	#$C,$20(a0)
000102EA 6100 DF04                  		bsr.w	ObjectFall
000102EE 4EB9 0000 0000             		jsr	ObjHitFloor
000102F4 4A41                       		tst.w	d1
000102F6 6A00                       		bpl.s	locret_F68A
000102F8 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000102FC 317C 0000 0012             		move.w	#0,$12(a0)
00010302 5428 0024                  		addq.b	#2,$24(a0)
00010306 0868 0000 0022             		bchg	#0,$22(a0)
0001030C                            
0001030C                            locret_F68A:
0001030C 4E75                       		rts	
0001030E                            ; ===========================================================================
0001030E                            
0001030E                            Obj40_SetSmoke:				; XREF: Obj40_Main
0001030E 5828 0024                  		addq.b	#4,$24(a0)
00010312 6000 0000                  		bra.w	Obj40_Animate
00010316                            ; ===========================================================================
00010316                            
00010316                            Obj40_Action:				; XREF: Obj40_Index
00010316 7000                       		moveq	#0,d0
00010318 1028 0025                  		move.b	$25(a0),d0
0001031C 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010320 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00010324 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001032A 6100 AFB8                  		bsr.w	AnimateSprite
0001032E                            
0001032E                            ; ---------------------------------------------------------------------------
0001032E                            ; Routine to mark an enemy/monitor/ring	as destroyed
0001032E                            ; ---------------------------------------------------------------------------
0001032E                            
0001032E                            MarkObjGone:
0001032E 3028 0008                  		move.w	8(a0),d0
00010332 0240 FF80                  		andi.w	#$FF80,d0
00010336 3238 F700                  		move.w	($FFFFF700).w,d1
0001033A 0441 0080                  		subi.w	#$80,d1
0001033E 0241 FF80                  		andi.w	#$FF80,d1
00010342 9041                       		sub.w	d1,d0
00010344 0C40 0280                  		cmpi.w	#$280,d0
00010348 6200 0000                  		bhi.w	Mark_ChkGone
0001034C 6000 DF3E                  		bra.w	DisplaySprite
00010350                            ; ===========================================================================
00010350                            
00010350                            Mark_ChkGone:
00010350 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010354 7000                       		moveq	#0,d0
00010356 1028 0023                  		move.b	$23(a0),d0
0001035A 6700                       		beq.s	Mark_Delete
0001035C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010362                            
00010362                            Mark_Delete:
00010362 6000 DF64                  		bra.w	DeleteObject
00010366                            
00010366                            ; ===========================================================================
00010366 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010368 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0001036A                            ; ===========================================================================
0001036A                            
0001036A                            Obj40_Move:				; XREF: Obj40_Index2
0001036A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001036E 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00010370 5428 0025                  		addq.b	#2,$25(a0)
00010374 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0001037A 117C 0001 001C             		move.b	#1,$1C(a0)
00010380 0868 0000 0022             		bchg	#0,$22(a0)
00010386 6600                       		bne.s	locret_F70A
00010388 4468 0010                  		neg.w	$10(a0)		; change direction
0001038C                            
0001038C                            locret_F70A:
0001038C 4E75                       		rts	
0001038E                            ; ===========================================================================
0001038E                            
0001038E                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0001038E 6100 DEC2                  		bsr.w	SpeedToPos
00010392 4EB9 0000 0000             		jsr	ObjHitFloor
00010398 0C41 FFF8                  		cmpi.w	#-8,d1
0001039C 6D00                       		blt.s	Obj40_Pause
0001039E 0C41 000C                  		cmpi.w	#$C,d1
000103A2 6C00                       		bge.s	Obj40_Pause
000103A4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000103A8 5328 0033                  		subq.b	#1,$33(a0)
000103AC 6A00                       		bpl.s	locret_F756
000103AE 117C 000F 0033             		move.b	#$F,$33(a0)
000103B4 6100 E35C                  		bsr.w	SingleObjLoad
000103B8 6600                       		bne.s	locret_F756
000103BA 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
000103BE 3368 0008 0008             		move.w	8(a0),8(a1)
000103C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000103CA 1368 0022 0022             		move.b	$22(a0),$22(a1)
000103D0 137C 0002 001C             		move.b	#2,$1C(a1)
000103D6                            
000103D6                            locret_F756:
000103D6 4E75                       		rts	
000103D8                            ; ===========================================================================
000103D8                            
000103D8                            Obj40_Pause:				; XREF: Obj40_FixToFloor
000103D8 5528 0025                  		subq.b	#2,$25(a0)
000103DC 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000103E2 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
000103E8 117C 0000 001C             		move.b	#0,$1C(a0)
000103EE 4E75                       		rts	
000103F0                            ; ===========================================================================
000103F0                            
000103F0                            Obj40_Animate:				; XREF: Obj40_Index
000103F0 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000103F6 6100 AEEC                  		bsr.w	AnimateSprite
000103FA 6000 DE90                  		bra.w	DisplaySprite
000103FE                            ; ===========================================================================
000103FE                            
000103FE                            Obj40_Delete:				; XREF: Obj40_Index
000103FE 6000 DEC8                  		bra.w	DeleteObject
00010402                            ; ===========================================================================
00010402                            Ani_obj40:
00010402                            	include "_anim\obj40.asm"
00010402                            ; ---------------------------------------------------------------------------
00010402                            ; Animation script - Motobug enemy
00010402                            ; ---------------------------------------------------------------------------
00010402 0000                       		dc.w byte_F788-Ani_obj40
00010404 0000                       		dc.w byte_F78C-Ani_obj40
00010406 0000                       		dc.w byte_F792-Ani_obj40
00010408 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0001040C 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00010412 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00010420                            		even
00010420                            		even
00010420                            
00010420                            ; ---------------------------------------------------------------------------
00010420                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010420                            ; ---------------------------------------------------------------------------
00010420                            Map_obj40:
00010420                            	include "_maps\obj40.asm"
00010420                            Map_cedc:
00010420 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
00010422 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
00010424 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
00010426 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
00010428 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0001042A 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0001042C 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0001042E 04                         Map_cedc_E: 	dc.b $4
0001042F F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010434 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
00010439 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0001043E 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
00010443 04                         Map_cedc_23: 	dc.b $4
00010444 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
00010449 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0001044E F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
00010453 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
00010458 05                         Map_cedc_38: 	dc.b $5
00010459 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0001045E 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
00010463 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010468 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0001046D 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
00010472 01                         Map_cedc_52: 	dc.b $1
00010473 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
00010478 01                         Map_cedc_58: 	dc.b $1
00010479 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0001047E 01                         Map_cedc_5E: 	dc.b $1
0001047F FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
00010484 00                         Map_cedc_64: 	dc.b $0
00010486 00                         	even
00010486 00                         	even
00010486                            
00010486                            ; ===========================================================================
00010486                            ; ---------------------------------------------------------------------------
00010486                            ; Object 4F - blank
00010486                            ; ---------------------------------------------------------------------------
00010486                            
00010486                            Obj4F:					; XREF: Obj_Index
00010486 4E75                       		rts	
00010488                            
00010488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010488                            
00010488                            
00010488                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010488 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001048C D047                       		add.w	d7,d0
0001048E 0240 0003                  		andi.w	#3,d0
00010492 6600                       		bne.s	loc_F836
00010494 7600                       		moveq	#0,d3
00010496 1628 0019                  		move.b	$19(a0),d3
0001049A 4A68 0010                  		tst.w	$10(a0)
0001049E 6B00                       		bmi.s	loc_F82C
000104A0 6100 0000                  		bsr.w	ObjHitWallRight
000104A4 4A41                       		tst.w	d1
000104A6 6A00                       		bpl.s	loc_F836
000104A8                            
000104A8                            loc_F828:
000104A8 7001                       		moveq	#1,d0
000104AA 4E75                       		rts	
000104AC                            ; ===========================================================================
000104AC                            
000104AC                            loc_F82C:
000104AC 4643                       		not.w	d3
000104AE 6100 0000                  		bsr.w	ObjHitWallLeft
000104B2 4A41                       		tst.w	d1
000104B4 6BF2                       		bmi.s	loc_F828
000104B6                            
000104B6                            loc_F836:
000104B6 7000                       		moveq	#0,d0
000104B8 4E75                       		rts	
000104BA                            ; End of function Obj50_ChkWall
000104BA                            
000104BA                            ; ===========================================================================
000104BA                            ; ---------------------------------------------------------------------------
000104BA                            ; Object 50 - Yadrin enemy (SYZ)
000104BA                            ; ---------------------------------------------------------------------------
000104BA                            
000104BA                            Obj50:					; XREF: Obj_Index
000104BA 7000                       		moveq	#0,d0
000104BC 1028 0024                  		move.b	$24(a0),d0
000104C0 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
000104C4 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000104C8                            ; ===========================================================================
000104C8 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000104CA 0000                       		dc.w Obj50_Action-Obj50_Index
000104CC                            ; ===========================================================================
000104CC                            
000104CC                            Obj50_Main:				; XREF: Obj50_Index
000104CC 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000104D4 317C 247B 0002             		move.w	#$247B,2(a0)
000104DA 117C 0004 0001             		move.b	#4,1(a0)
000104E0 117C 0004 0018             		move.b	#4,$18(a0)
000104E6 117C 0014 0019             		move.b	#$14,$19(a0)
000104EC 117C 0011 0016             		move.b	#$11,$16(a0)
000104F2 117C 0008 0017             		move.b	#8,$17(a0)
000104F8 117C 00CC 0020             		move.b	#$CC,$20(a0)
000104FE 6100 DCF0                  		bsr.w	ObjectFall
00010502 6100 0000                  		bsr.w	ObjHitFloor
00010506 4A41                       		tst.w	d1
00010508 6A00                       		bpl.s	locret_F89E
0001050A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001050E 317C 0000 0012             		move.w	#0,$12(a0)
00010514 5428 0024                  		addq.b	#2,$24(a0)
00010518 0868 0000 0022             		bchg	#0,$22(a0)
0001051E                            
0001051E                            locret_F89E:
0001051E 4E75                       		rts	
00010520                            ; ===========================================================================
00010520                            
00010520                            Obj50_Action:				; XREF: Obj50_Index
00010520 7000                       		moveq	#0,d0
00010522 1028 0025                  		move.b	$25(a0),d0
00010526 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0001052A 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0001052E 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010534 6100 ADAE                  		bsr.w	AnimateSprite
00010538 6000 FDF4                  		bra.w	MarkObjGone
0001053C                            ; ===========================================================================
0001053C 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0001053E 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00010540                            ; ===========================================================================
00010540                            
00010540                            Obj50_Move:				; XREF: Obj50_Index2
00010540 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010544 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010546 5428 0025                  		addq.b	#2,$25(a0)
0001054A 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010550 117C 0001 001C             		move.b	#1,$1C(a0)
00010556 0868 0000 0022             		bchg	#0,$22(a0)
0001055C 6600                       		bne.s	locret_F8E2
0001055E 4468 0010                  		neg.w	$10(a0)		; change direction
00010562                            
00010562                            locret_F8E2:
00010562 4E75                       		rts	
00010564                            ; ===========================================================================
00010564                            
00010564                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010564 6100 DCEC                  		bsr.w	SpeedToPos
00010568 6100 0000                  		bsr.w	ObjHitFloor
0001056C 0C41 FFF8                  		cmpi.w	#-8,d1
00010570 6D00                       		blt.s	Obj50_Pause
00010572 0C41 000C                  		cmpi.w	#$C,d1
00010576 6C00                       		bge.s	Obj50_Pause
00010578 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0001057C 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010580 6600                       		bne.s	Obj50_Pause
00010582 4E75                       		rts	
00010584                            ; ===========================================================================
00010584                            
00010584                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010584 5528 0025                  		subq.b	#2,$25(a0)
00010588 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001058E 317C 0000 0010             		move.w	#0,$10(a0)
00010594 117C 0000 001C             		move.b	#0,$1C(a0)
0001059A 4E75                       		rts	
0001059C                            ; ===========================================================================
0001059C                            Ani_obj50:
0001059C                            	include "_anim\obj50.asm"
0001059C                            ; ---------------------------------------------------------------------------
0001059C                            ; Animation script - Yadrin enemy
0001059C                            ; ---------------------------------------------------------------------------
0001059C 0000                       		dc.w byte_F920-Ani_obj50
0001059E 0000                       		dc.w byte_F924-Ani_obj50
000105A0 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000105A4 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000105AE                            		even
000105AE                            		even
000105AE                            
000105AE                            ; ---------------------------------------------------------------------------
000105AE                            ; Sprite mappings - Yadrin enemy (SYZ)
000105AE                            ; ---------------------------------------------------------------------------
000105AE                            Map_obj50:
000105AE                            	include "_maps\obj50.asm"
000105AE                            Map_ff24:
000105AE 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
000105B0 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
000105B2 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
000105B4 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
000105B6 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
000105B8 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
000105BA 05                         Map_ff24_C: 	dc.b $5
000105BB F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000105C0 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000105C5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000105CA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000105CF 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000105D4 05                         Map_ff24_26: 	dc.b $5
000105D5 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000105DA FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000105DF EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000105E4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000105E9 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000105EE 05                         Map_ff24_40: 	dc.b $5
000105EF F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000105F4 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000105F9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000105FE F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010603 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010608 05                         Map_ff24_5A: 	dc.b $5
00010609 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001060E FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010613 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010618 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001061D 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010622 05                         Map_ff24_74: 	dc.b $5
00010623 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010628 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001062D EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010632 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010637 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001063C 05                         Map_ff24_8E: 	dc.b $5
0001063D F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010642 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010647 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001064C F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010651 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010656                            	even
00010656                            	even
00010656                            
00010656                            ; ---------------------------------------------------------------------------
00010656                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010656                            ;
00010656                            ; variables:
00010656                            ; d1 = width
00010656                            ; d2 = height /	2 (when	jumping)
00010656                            ; d3 = height /	2 (when	walking)
00010656                            ; d4 = x-axis position
00010656                            ; ---------------------------------------------------------------------------
00010656                            
00010656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010656                            
00010656                            
00010656                            SolidObject:
00010656 4A28 0025                  		tst.b	$25(a0)
0001065A 6700 0000                  		beq.w	loc_FAC8
0001065E 3401                       		move.w	d1,d2
00010660 D442                       		add.w	d2,d2
00010662 43F8 D000                  		lea	($FFFFD000).w,a1
00010666 0829 0001 0022             		btst	#1,$22(a1)
0001066C 6600                       		bne.s	loc_F9FE
0001066E 3029 0008                  		move.w	8(a1),d0
00010672 9068 0008                  		sub.w	8(a0),d0
00010676 D041                       		add.w	d1,d0
00010678 6B00                       		bmi.s	loc_F9FE
0001067A B042                       		cmp.w	d2,d0
0001067C 6500                       		bcs.s	loc_FA12
0001067E                            
0001067E                            loc_F9FE:
0001067E 08A9 0003 0022             		bclr	#3,$22(a1)
00010684 08A8 0003 0022             		bclr	#3,$22(a0)
0001068A 4228 0025                  		clr.b	$25(a0)
0001068E 7800                       		moveq	#0,d4
00010690 4E75                       		rts	
00010692                            ; ===========================================================================
00010692                            
00010692                            loc_FA12:
00010692 3404                       		move.w	d4,d2
00010694 4EB9 0000 8584             		jsr	MvSonicOnPtfm 
0001069A 7800                       		moveq	#0,d4
0001069C 4E75                       		rts	
0001069E                            ; ===========================================================================
0001069E                            
0001069E                            SolidObject71:				; XREF: Obj71_Solid
0001069E 4A28 0025                  		tst.b	$25(a0)
000106A2 6700 0000                  		beq.w	loc_FAD0
000106A6 3401                       		move.w	d1,d2
000106A8 D442                       		add.w	d2,d2
000106AA 43F8 D000                  		lea	($FFFFD000).w,a1
000106AE 0829 0001 0022             		btst	#1,$22(a1)
000106B4 6600                       		bne.s	loc_FA44
000106B6 3029 0008                  		move.w	8(a1),d0
000106BA 9068 0008                  		sub.w	8(a0),d0
000106BE D041                       		add.w	d1,d0
000106C0 6B00                       		bmi.s	loc_FA44
000106C2 B042                       		cmp.w	d2,d0
000106C4 6500                       		bcs.s	loc_FA58
000106C6                            
000106C6                            loc_FA44:
000106C6 08A9 0003 0022             		bclr	#3,$22(a1)
000106CC 08A8 0003 0022             		bclr	#3,$22(a0)
000106D2 4228 0025                  		clr.b	$25(a0)
000106D6 7800                       		moveq	#0,d4
000106D8 4E75                       		rts	
000106DA                            ; ===========================================================================
000106DA                            
000106DA                            loc_FA58:
000106DA 3404                       		move.w	d4,d2
000106DC                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000106DC 7800                       		moveq	#0,d4
000106DE 4E75                       		rts	
000106E0                            ; ===========================================================================
000106E0                            
000106E0                            SolidObject2F:				; XREF: Obj2F_Solid
000106E0 43F8 D000                  		lea	($FFFFD000).w,a1
000106E4 4A28 0001                  		tst.b	1(a0)
000106E8 6A00 0000                  		bpl.w	loc_FB92
000106EC 3029 0008                  		move.w	8(a1),d0
000106F0 9068 0008                  		sub.w	8(a0),d0
000106F4 D041                       		add.w	d1,d0
000106F6 6B00 0000                  		bmi.w	loc_FB92
000106FA 3601                       		move.w	d1,d3
000106FC D643                       		add.w	d3,d3
000106FE B043                       		cmp.w	d3,d0
00010700 6200 0000                  		bhi.w	loc_FB92
00010704 3A00                       		move.w	d0,d5
00010706 0828 0000 0001             		btst	#0,1(a0)
0001070C 6700                       		beq.s	loc_FA94
0001070E 4645                       		not.w	d5
00010710 DA43                       		add.w	d3,d5
00010712                            
00010712                            loc_FA94:
00010712 E24D                       		lsr.w	#1,d5
00010714 7600                       		moveq	#0,d3
00010716 1632 5000                  		move.b	(a2,d5.w),d3
0001071A 9612                       		sub.b	(a2),d3
0001071C 3A28 000C                  		move.w	$C(a0),d5
00010720 9A43                       		sub.w	d3,d5
00010722 1629 0016                  		move.b	$16(a1),d3
00010726 4883                       		ext.w	d3
00010728 D443                       		add.w	d3,d2
0001072A 3629 000C                  		move.w	$C(a1),d3
0001072E 9645                       		sub.w	d5,d3
00010730 5843                       		addq.w	#4,d3
00010732 D642                       		add.w	d2,d3
00010734 6B00 0000                  		bmi.w	loc_FB92
00010738 3802                       		move.w	d2,d4
0001073A D844                       		add.w	d4,d4
0001073C B644                       		cmp.w	d4,d3
0001073E 6400 0000                  		bcc.w	loc_FB92
00010742 6000 0000                  		bra.w	loc_FB0E
00010746                            ; ===========================================================================
00010746                            
00010746                            loc_FAC8:
00010746 4A28 0001                  		tst.b	1(a0)
0001074A 6A00 0000                  		bpl.w	loc_FB92
0001074E                            
0001074E                            loc_FAD0:
0001074E 43F8 D000                  		lea	($FFFFD000).w,a1
00010752 3029 0008                  		move.w	8(a1),d0
00010756 9068 0008                  		sub.w	8(a0),d0
0001075A D041                       		add.w	d1,d0
0001075C 6B00 0000                  		bmi.w	loc_FB92
00010760 3601                       		move.w	d1,d3
00010762 D643                       		add.w	d3,d3
00010764 B043                       		cmp.w	d3,d0
00010766 6200 0000                  		bhi.w	loc_FB92
0001076A 1629 0016                  		move.b	$16(a1),d3
0001076E 4883                       		ext.w	d3
00010770 D443                       		add.w	d3,d2
00010772 3629 000C                  		move.w	$C(a1),d3
00010776 9668 000C                  		sub.w	$C(a0),d3
0001077A 5843                       		addq.w	#4,d3
0001077C D642                       		add.w	d2,d3
0001077E 6B00 0000                  		bmi.w	loc_FB92
00010782 3802                       		move.w	d2,d4
00010784 D844                       		add.w	d4,d4
00010786 B644                       		cmp.w	d4,d3
00010788 6400 0000                  		bcc.w	loc_FB92
0001078C                            
0001078C                            loc_FB0E:
0001078C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010790 6B00 0000                  		bmi.w	loc_FB92
00010794 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001079A 6400 0000                  		bcc.w	loc_FB92
0001079E 4A78 FE08                  		tst.w	($FFFFFE08).w
000107A2 6600 0000                  		bne.w	loc_FBAC
000107A6 3A00                       		move.w	d0,d5
000107A8 B240                       		cmp.w	d0,d1
000107AA 6400                       		bcc.s	loc_FB36
000107AC D241                       		add.w	d1,d1
000107AE 9041                       		sub.w	d1,d0
000107B0 3A00                       		move.w	d0,d5
000107B2 4445                       		neg.w	d5
000107B4                            
000107B4                            loc_FB36:
000107B4 3203                       		move.w	d3,d1
000107B6 B443                       		cmp.w	d3,d2
000107B8 6400                       		bcc.s	loc_FB44
000107BA 5943                       		subq.w	#4,d3
000107BC 9644                       		sub.w	d4,d3
000107BE 3203                       		move.w	d3,d1
000107C0 4441                       		neg.w	d1
000107C2                            
000107C2                            loc_FB44:
000107C2 BA41                       		cmp.w	d1,d5
000107C4 6200 0000                  		bhi.w	loc_FBB0
000107C8 0C41 0004                  		cmpi.w	#4,d1
000107CC 6300                       		bls.s	loc_FB8C
000107CE 4A40                       		tst.w	d0
000107D0 6700                       		beq.s	loc_FB70
000107D2 6B00                       		bmi.s	loc_FB5E
000107D4 4A69 0010                  		tst.w	$10(a1)
000107D8 6B00                       		bmi.s	loc_FB70
000107DA 6000                       		bra.s	loc_FB64
000107DC                            ; ===========================================================================
000107DC                            
000107DC                            loc_FB5E:
000107DC 4A69 0010                  		tst.w	$10(a1)
000107E0 6A00                       		bpl.s	loc_FB70
000107E2                            
000107E2                            loc_FB64:
000107E2 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000107E8 337C 0000 0010             		move.w	#0,$10(a1)
000107EE                            
000107EE                            loc_FB70:
000107EE 9169 0008                  		sub.w	d0,8(a1)
000107F2 0829 0001 0022             		btst	#1,$22(a1)
000107F8 6600                       		bne.s	loc_FB8C
000107FA 08E9 0005 0022             		bset	#5,$22(a1)
00010800 08E8 0005 0022             		bset	#5,$22(a0)
00010806 7801                       		moveq	#1,d4
00010808 4E75                       		rts	
0001080A                            ; ===========================================================================
0001080A                            
0001080A                            loc_FB8C:
0001080A 6100                       		bsr.s	loc_FBA0
0001080C 7801                       		moveq	#1,d4
0001080E 4E75                       		rts	
00010810                            ; ===========================================================================
00010810                            
00010810                            loc_FB92:
00010810 0828 0005 0022             		btst	#5,$22(a0)
00010816 6700                       		beq.s	loc_FBAC
00010818 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001081E                            
0001081E                            loc_FBA0:
0001081E 08A8 0005 0022             		bclr	#5,$22(a0)
00010824 08A9 0005 0022             		bclr	#5,$22(a1)
0001082A                            
0001082A                            loc_FBAC:
0001082A 7800                       		moveq	#0,d4
0001082C 4E75                       		rts	
0001082E                            ; ===========================================================================
0001082E                            
0001082E                            loc_FBB0:
0001082E 4A43                       		tst.w	d3
00010830 6B00                       		bmi.s	loc_FBBC
00010832 0C43 0010                  		cmpi.w	#$10,d3
00010836 6500                       		bcs.s	loc_FBEE
00010838 60D6                       		bra.s	loc_FB92
0001083A                            ; ===========================================================================
0001083A                            
0001083A                            loc_FBBC:
0001083A 4A69 0012                  		tst.w	$12(a1)
0001083E 6700                       		beq.s	loc_FBD6
00010840 6A00                       		bpl.s	loc_FBD2
00010842 4A43                       		tst.w	d3
00010844 6A00                       		bpl.s	loc_FBD2
00010846 9769 000C                  		sub.w	d3,$C(a1)
0001084A 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010850                            
00010850                            loc_FBD2:
00010850 78FF                       		moveq	#-1,d4
00010852 4E75                       		rts	
00010854                            ; ===========================================================================
00010854                            
00010854                            loc_FBD6:
00010854 0829 0001 0022             		btst	#1,$22(a1)
0001085A 66F4                       		bne.s	loc_FBD2
0001085C 2F08                       		move.l	a0,-(sp)
0001085E 2049                       		movea.l	a1,a0
00010860 4EB9 0000 0000             		jsr	KillSonic
00010866 205F                       		movea.l	(sp)+,a0
00010868 78FF                       		moveq	#-1,d4
0001086A 4E75                       		rts	
0001086C                            ; ===========================================================================
0001086C                            
0001086C                            loc_FBEE:
0001086C 5943                       		subq.w	#4,d3
0001086E 7200                       		moveq	#0,d1
00010870 1228 0019                  		move.b	$19(a0),d1
00010874 3401                       		move.w	d1,d2
00010876 D442                       		add.w	d2,d2
00010878 D269 0008                  		add.w	8(a1),d1
0001087C 9268 0008                  		sub.w	8(a0),d1
00010880 6B00                       		bmi.s	loc_FC28
00010882 B242                       		cmp.w	d2,d1
00010884 6400                       		bcc.s	loc_FC28
00010886 4A69 0012                  		tst.w	$12(a1)
0001088A 6B00                       		bmi.s	loc_FC28
0001088C 9769 000C                  		sub.w	d3,$C(a1)
00010890 5369 000C                  		subq.w	#1,$C(a1)
00010894 6100                       		bsr.s	sub_FC2C
00010896 117C 0002 0025             		move.b	#2,$25(a0)
0001089C 08E8 0003 0022             		bset	#3,$22(a0)
000108A2 78FF                       		moveq	#-1,d4
000108A4 4E75                       		rts	
000108A6                            ; ===========================================================================
000108A6                            
000108A6                            loc_FC28:
000108A6 7800                       		moveq	#0,d4
000108A8 4E75                       		rts	
000108AA                            ; End of function SolidObject
000108AA                            
000108AA                            
000108AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000108AA                            
000108AA                            
000108AA                            sub_FC2C:				; XREF: SolidObject
000108AA 0829 0003 0022             		btst	#3,$22(a1)
000108B0 6700                       		beq.s	loc_FC4E
000108B2 7000                       		moveq	#0,d0
000108B4 1029 003D                  		move.b	$3D(a1),d0
000108B8 ED48                       		lsl.w	#6,d0
000108BA 0680 00FF D000             		addi.l	#$FFD000,d0
000108C0 2440                       		movea.l	d0,a2
000108C2 08AA 0003 0022             		bclr	#3,$22(a2)
000108C8 422A 0025                  		clr.b	$25(a2)
000108CC                            
000108CC                            loc_FC4E:
000108CC 3008                       		move.w	a0,d0
000108CE 0440 D000                  		subi.w	#-$3000,d0
000108D2 EC48                       		lsr.w	#6,d0
000108D4 0240 007F                  		andi.w	#$7F,d0
000108D8 1340 003D                  		move.b	d0,$3D(a1)
000108DC 137C 0000 0026             		move.b	#0,$26(a1)
000108E2 337C 0000 0012             		move.w	#0,$12(a1)
000108E8 3369 0010 0014             		move.w	$10(a1),$14(a1)
000108EE 0829 0001 0022             		btst	#1,$22(a1)
000108F4 6700                       		beq.s	loc_FC84
000108F6 2F08                       		move.l	a0,-(sp)
000108F8 2049                       		movea.l	a1,a0
000108FA 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010900 205F                       		movea.l	(sp)+,a0
00010902                            
00010902                            loc_FC84:
00010902 08E9 0003 0022             		bset	#3,$22(a1)
00010908 08E8 0003 0022             		bset	#3,$22(a0)
0001090E 4E75                       		rts	
00010910                            ; End of function sub_FC2C
00010910                            
00010910                            ; ===========================================================================
00010910                            ; ---------------------------------------------------------------------------
00010910                            ; Object 51 - smashable	green block (MZ)
00010910                            ; ---------------------------------------------------------------------------
00010910                            
00010910                            Obj51:					; XREF: Obj_Index
00010910 7000                       		moveq	#0,d0
00010912 1028 0024                  		move.b	$24(a0),d0
00010916 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001091A 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001091E 6000 FA0E                  		bra.w	MarkObjGone
00010922                            ; ===========================================================================
00010922 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010924 0000                       		dc.w Obj51_Solid-Obj51_Index
00010926 0000                       		dc.w Obj51_Display-Obj51_Index
00010928                            ; ===========================================================================
00010928                            
00010928                            Obj51_Main:				; XREF: Obj51_Index
00010928 5428 0024                  		addq.b	#2,$24(a0)
0001092C 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010934 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001093A 117C 0004 0001             		move.b	#4,1(a0)
00010940 117C 0010 0019             		move.b	#$10,$19(a0)
00010946 117C 0004 0018             		move.b	#4,$18(a0)
0001094C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010952                            
00010952                            Obj51_Solid:				; XREF: Obj51_Index
00010952 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010958 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001095E 323C 001B                  		move.w	#$1B,d1
00010962 343C 0010                  		move.w	#$10,d2
00010966 363C 0011                  		move.w	#$11,d3
0001096A 3828 0008                  		move.w	8(a0),d4
0001096E 6100 FCE6                  		bsr.w	SolidObject
00010972 0828 0003 0022             		btst	#3,$22(a0)
00010978 6600                       		bne.s	Obj51_Smash
0001097A                            
0001097A                            locret_FCFC:
0001097A 4E75                       		rts	
0001097C                            ; ===========================================================================
0001097C                            
0001097C                            Obj51_Smash:				; XREF: Obj51_Solid
0001097C 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010982 66F6                       		bne.s	locret_FCFC	; if not, branch
00010984 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0001098A 08E9 0002 0022             		bset	#2,$22(a1)
00010990 137C 000E 0016             		move.b	#$E,$16(a1)
00010996 137C 0007 0017             		move.b	#7,$17(a1)
0001099C 137C 0002 001C             		move.b	#2,$1C(a1)
000109A2 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000109A8 08E9 0001 0022             		bset	#1,$22(a1)
000109AE 08A9 0003 0022             		bclr	#3,$22(a1)
000109B4 137C 0002 0024             		move.b	#2,$24(a1)
000109BA 08A8 0003 0022             		bclr	#3,$22(a0)
000109C0 4228 0025                  		clr.b	$25(a0)
000109C4 117C 0001 001A             		move.b	#1,$1A(a0)
000109CA 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000109D0 7203                       		moveq	#3,d1		; set number of	fragments to 4
000109D2 343C 0038                  		move.w	#$38,d2
000109D6 6100 D458                  		bsr.w	SmashObject
000109DA 6100 DD36                  		bsr.w	SingleObjLoad
000109DE 6600                       		bne.s	Obj51_Display
000109E0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000109E4 3368 0008 0008             		move.w	8(a0),8(a1)
000109EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000109F0 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000109F4 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000109F8 0C42 0006                  		cmpi.w	#6,d2
000109FC 6500                       		bcs.s	Obj51_Bonus
000109FE 7406                       		moveq	#6,d2
00010A00                            
00010A00                            Obj51_Bonus:
00010A00 7000                       		moveq	#0,d0
00010A02 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010A06 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010A0C 6500                       		bcs.s	loc_FD98	; if not, branch
00010A0E 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010A12 740A                       		moveq	#10,d2
00010A14                            
00010A14                            loc_FD98:
00010A14 4EB9 0000 0000             		jsr	AddPoints
00010A1A E24A                       		lsr.w	#1,d2
00010A1C 1342 001A                  		move.b	d2,$1A(a1)
00010A20                            
00010A20                            Obj51_Display:				; XREF: Obj51_Index
00010A20 6100 D7CE                  		bsr.w	ObjectFall
00010A24 6100 D866                  		bsr.w	DisplaySprite
00010A28 4A28 0001                  		tst.b	1(a0)
00010A2C 6A00 D89A                  		bpl.w	DeleteObject
00010A30 4E75                       		rts	
00010A32                            ; ===========================================================================
00010A32 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010A36 FF00 FF00                  		dc.w $FF00, $FF00
00010A3A 0200 FE00                  		dc.w $200, $FE00
00010A3E 0100 FF00                  		dc.w $100, $FF00
00010A42                            
00010A42 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010A4A                            ; ---------------------------------------------------------------------------
00010A4A                            ; Sprite mappings - smashable green block (MZ)
00010A4A                            ; ---------------------------------------------------------------------------
00010A4A                            Map_obj51:
00010A4A                            	include "_maps\obj51.asm"
00010A4A                            ; ---------------------------------------------------------------------------
00010A4A                            ; Sprite mappings - smashable green block (MZ)
00010A4A                            ; ---------------------------------------------------------------------------
00010A4A 0000                       		dc.w byte_FDD8-Map_obj51
00010A4C 0000                       		dc.w byte_FDE3-Map_obj51
00010A4E 02                         byte_FDD8:	dc.b 2
00010A4F F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010A54 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010A59 04                         byte_FDE3:	dc.b 4
00010A5A F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010A5F 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010A64 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010A69 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010A6E                            		even
00010A6E                            		even
00010A6E                            
00010A6E                            ; ===========================================================================
00010A6E                            ; ---------------------------------------------------------------------------
00010A6E                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010A6E                            ; ---------------------------------------------------------------------------
00010A6E                            
00010A6E                            Obj52:					; XREF: Obj_Index
00010A6E 7000                       		moveq	#0,d0
00010A70 1028 0024                  		move.b	$24(a0),d0
00010A74 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010A78 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010A7C                            ; ===========================================================================
00010A7C 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010A7E 0000                       		dc.w Obj52_Platform-Obj52_Index
00010A80 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010A82                            
00010A82 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010A84 2001                       		dc.b $20, 1
00010A86 2002                       		dc.b $20, 2
00010A88 4003                       		dc.b $40, 3
00010A8A 3004                       		dc.b $30, 4
00010A8C                            ; ===========================================================================
00010A8C                            
00010A8C                            Obj52_Main:				; XREF: Obj52_Index
00010A8C 5428 0024                  		addq.b	#2,$24(a0)
00010A90 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010A98 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010A9E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010AA4 6600                       		bne.s	loc_FE44
00010AA6 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010AAE 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010AB4 117C 0007 0016             		move.b	#7,$16(a0)
00010ABA                            
00010ABA                            loc_FE44:
00010ABA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010AC0 6600                       		bne.s	loc_FE60
00010AC2 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010AC8 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010ACE 6700                       		beq.s	loc_FE60	; if yes, branch
00010AD0 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010AD6                            
00010AD6                            loc_FE60:
00010AD6 117C 0004 0001             		move.b	#4,1(a0)
00010ADC 7000                       		moveq	#0,d0
00010ADE 1028 0028                  		move.b	$28(a0),d0
00010AE2 E648                       		lsr.w	#3,d0
00010AE4 0240 001E                  		andi.w	#$1E,d0
00010AE8 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010AEC 115A 0019                  		move.b	(a2)+,$19(a0)
00010AF0 115A 001A                  		move.b	(a2)+,$1A(a0)
00010AF4 117C 0004 0018             		move.b	#4,$18(a0)
00010AFA 3168 0008 0030             		move.w	8(a0),$30(a0)
00010B00 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010B06 0228 000F 0028             		andi.b	#$F,$28(a0)
00010B0C                            
00010B0C                            Obj52_Platform:				; XREF: Obj52_Index
00010B0C 6100 0000                  		bsr.w	Obj52_Move
00010B10 7200                       		moveq	#0,d1
00010B12 1228 0019                  		move.b	$19(a0),d1
00010B16 4EB9 0000 7EB2             		jsr	(PlatformObject).l
00010B1C 6000                       		bra.s	Obj52_ChkDel
00010B1E                            ; ===========================================================================
00010B1E                            
00010B1E                            Obj52_StandOn:				; XREF: Obj52_Index
00010B1E 7200                       		moveq	#0,d1
00010B20 1228 0019                  		move.b	$19(a0),d1
00010B24 4EB9 0000 8026             		jsr	(ExitPlatform).l
00010B2A 3F28 0008                  		move.w	8(a0),-(sp)
00010B2E 6100 0000                  		bsr.w	Obj52_Move
00010B32 341F                       		move.w	(sp)+,d2
00010B34 4EB9 0000 8590             		jsr	(MvSonicOnPtfm2).l
00010B3A                            
00010B3A                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010B3A 3028 0030                  		move.w	$30(a0),d0
00010B3E 0240 FF80                  		andi.w	#$FF80,d0
00010B42 3238 F700                  		move.w	($FFFFF700).w,d1
00010B46 0441 0080                  		subi.w	#$80,d1
00010B4A 0241 FF80                  		andi.w	#$FF80,d1
00010B4E 9041                       		sub.w	d1,d0
00010B50 0C40 0280                  		cmpi.w	#$280,d0
00010B54 6200 D772                  		bhi.w	DeleteObject
00010B58 6000 D732                  		bra.w	DisplaySprite
00010B5C                            ; ===========================================================================
00010B5C                            
00010B5C                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010B5C 7000                       		moveq	#0,d0
00010B5E 1028 0028                  		move.b	$28(a0),d0
00010B62 0240 000F                  		andi.w	#$F,d0
00010B66 D040                       		add.w	d0,d0
00010B68 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010B6C 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010B70                            ; ===========================================================================
00010B70 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010B74 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010B78 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010B7C 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010B80 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010B84 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010B86                            ; ===========================================================================
00010B86                            
00010B86                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010B86 4E75                       		rts	
00010B88                            ; ===========================================================================
00010B88                            
00010B88                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010B88 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010B8C 323C 0060                  		move.w	#$60,d1
00010B90 0828 0000 0022             		btst	#0,$22(a0)
00010B96 6700                       		beq.s	loc_FF26
00010B98 4440                       		neg.w	d0
00010B9A D041                       		add.w	d1,d0
00010B9C                            
00010B9C                            loc_FF26:
00010B9C 3228 0030                  		move.w	$30(a0),d1
00010BA0 9240                       		sub.w	d0,d1
00010BA2 3141 0008                  		move.w	d1,8(a0)
00010BA6 4E75                       		rts	
00010BA8                            ; ===========================================================================
00010BA8                            
00010BA8                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010BA8 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010BAE 6600                       		bne.s	Obj52_02_Wait
00010BB0 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010BB4                            
00010BB4                            Obj52_02_Wait:
00010BB4 4E75                       		rts	
00010BB6                            ; ===========================================================================
00010BB6                            
00010BB6                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010BB6 7600                       		moveq	#0,d3
00010BB8 1628 0019                  		move.b	$19(a0),d3
00010BBC 6100 0000                  		bsr.w	ObjHitWallRight
00010BC0 4A41                       		tst.w	d1		; has the platform hit a wall?
00010BC2 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010BC4 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010BC8 3168 0008 0030             		move.w	8(a0),$30(a0)
00010BCE 4E75                       		rts	
00010BD0                            ; ===========================================================================
00010BD0                            
00010BD0                            Obj52_03_End:
00010BD0 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010BD4 4E75                       		rts	
00010BD6                            ; ===========================================================================
00010BD6                            
00010BD6                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010BD6 7600                       		moveq	#0,d3
00010BD8 1628 0019                  		move.b	$19(a0),d3
00010BDC 6100 0000                  		bsr.w	ObjHitWallRight
00010BE0 4A41                       		tst.w	d1		; has the platform hit a wall?
00010BE2 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010BE4 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010BE8 3168 0008 0030             		move.w	8(a0),$30(a0)
00010BEE 4E75                       		rts	
00010BF0                            ; ===========================================================================
00010BF0                            
00010BF0                            Obj52_05_End:
00010BF0 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010BF4 4E75                       		rts	
00010BF6                            ; ===========================================================================
00010BF6                            
00010BF6                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010BF6 7218                       		moveq	#$18,d1
00010BF8 6100 D5F8                  		bsr.w	ObjectFallCustom
00010BFC 6100 0000                  		bsr.w	ObjHitFloor
00010C00 4A41                       		tst.w	d1		; has platform hit the floor?
00010C02 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010C06 D368 000C                  		add.w	d1,$C(a0)
00010C0A 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010C0E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010C12                            
00010C12                            locret_FFA0:
00010C12 4E75                       		rts	
00010C14                            ; ===========================================================================
00010C14                            
00010C14                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010C14 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010C18 6700                       		beq.s	Obj52_07_ChkDel
00010C1A 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010C1E                            
00010C1E                            Obj52_07_ChkDel:
00010C1E 588F                       		addq.l	#4,sp
00010C20 3028 0030                  		move.w	$30(a0),d0
00010C24 0240 FF80                  		andi.w	#$FF80,d0
00010C28 3238 F700                  		move.w	($FFFFF700).w,d1
00010C2C 0441 0080                  		subi.w	#$80,d1
00010C30 0241 FF80                  		andi.w	#$FF80,d1
00010C34 9041                       		sub.w	d1,d0
00010C36 0C40 0280                  		cmpi.w	#$280,d0
00010C3A 6200 D68C                  		bhi.w	DeleteObject
00010C3E 4E75                       		rts	
00010C40                            ; ===========================================================================
00010C40                            
00010C40                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010C40 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C44 323C 0080                  		move.w	#$80,d1
00010C48 0828 0000 0022             		btst	#0,$22(a0)
00010C4E 6700                       		beq.s	loc_FFE2
00010C50 4440                       		neg.w	d0
00010C52 D041                       		add.w	d1,d0
00010C54                            
00010C54                            loc_FFE2:
00010C54 3228 0032                  		move.w	$32(a0),d1
00010C58 9240                       		sub.w	d0,d1
00010C5A 3141 000C                  		move.w	d1,$C(a0)
00010C5E 4E75                       		rts	
00010C60                            ; ===========================================================================
00010C60                            
00010C60                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010C60 7600                       		moveq	#0,d3
00010C62 1628 0019                  		move.b	$19(a0),d3
00010C66 D643                       		add.w	d3,d3
00010C68 7208                       		moveq	#8,d1
00010C6A 0828 0000 0022             		btst	#0,$22(a0)
00010C70 6700                       		beq.s	loc_10004
00010C72 4441                       		neg.w	d1
00010C74 4443                       		neg.w	d3
00010C76                            
00010C76                            loc_10004:
00010C76 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010C7A 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010C7C 3028 0008                  		move.w	8(a0),d0
00010C80 9068 0030                  		sub.w	$30(a0),d0
00010C84 B043                       		cmp.w	d3,d0
00010C86 6700                       		beq.s	Obj52_0A_Wait
00010C88 D368 0008                  		add.w	d1,8(a0)	; move platform
00010C8C 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010C92 4E75                       		rts	
00010C94                            ; ===========================================================================
00010C94                            
00010C94                            Obj52_0A_Wait:
00010C94 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010C98 6600                       		bne.s	locret_1002E	; if time remains, branch
00010C9A 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010CA0                            
00010CA0                            locret_1002E:
00010CA0 4E75                       		rts	
00010CA2                            ; ===========================================================================
00010CA2                            
00010CA2                            Obj52_0A_Back:
00010CA2 3028 0008                  		move.w	8(a0),d0
00010CA6 9068 0030                  		sub.w	$30(a0),d0
00010CAA 6700                       		beq.s	Obj52_0A_Reset
00010CAC 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010CB0 4E75                       		rts	
00010CB2                            ; ===========================================================================
00010CB2                            
00010CB2                            Obj52_0A_Reset:
00010CB2 4268 0036                  		clr.w	$36(a0)
00010CB6 5328 0028                  		subq.b	#1,$28(a0)
00010CBA 4E75                       		rts	
00010CBC                            ; ===========================================================================
00010CBC                            ; ---------------------------------------------------------------------------
00010CBC                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010CBC                            ; ---------------------------------------------------------------------------
00010CBC                            Map_obj52:
00010CBC                            	include "_maps\obj52mz.asm"
00010CBC                            ; ---------------------------------------------------------------------------
00010CBC                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010CBC                            ; ---------------------------------------------------------------------------
00010CBC 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010CC0 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010CC4 0000                       		dc.w byte_1008F-Map_obj52
00010CC6 01                         byte_10054:	dc.b 1
00010CC7 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010CCC 02                         byte_1005A:	dc.b 2
00010CCD F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010CD2 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010CD7 04                         byte_10065:	dc.b 4
00010CD8 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010CDD 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010CE2 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010CE7 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010CEC 04                         byte_1007A:	dc.b 4
00010CED F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010CF2 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010CF7 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010CFC F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010D01 03                         byte_1008F:	dc.b 3
00010D02 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010D07 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010D0C F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010D12 00                         		even
00010D12 00                         		even
00010D12                            
00010D12                            ; ---------------------------------------------------------------------------
00010D12                            ; Sprite mappings - moving block (LZ)
00010D12                            ; ---------------------------------------------------------------------------
00010D12                            Map_obj52a:
00010D12                            	include "_maps\obj52lz.asm"
00010D12                            ; ---------------------------------------------------------------------------
00010D12                            ; Sprite mappings - moving block (LZ)
00010D12                            ; ---------------------------------------------------------------------------
00010D12 0000                       		dc.w byte_100A2-Map_obj52a
00010D14 01                         byte_100A2:	dc.b 1
00010D15 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010D1A                            		even
00010D1A                            		even
00010D1A                            
00010D1A                            ; ===========================================================================
00010D1A                            ; ---------------------------------------------------------------------------
00010D1A                            ; Object 55 - Basaran enemy (MZ)
00010D1A                            ; ---------------------------------------------------------------------------
00010D1A                            
00010D1A                            Obj55:					; XREF: Obj_Index
00010D1A 7000                       		moveq	#0,d0
00010D1C 1028 0024                  		move.b	$24(a0),d0
00010D20 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010D24 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010D28                            ; ===========================================================================
00010D28 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010D2A 0000                       		dc.w Obj55_Action-Obj55_Index
00010D2C                            ; ===========================================================================
00010D2C                            
00010D2C                            Obj55_Main:				; XREF: Obj55_Index
00010D2C 5428 0024                  		addq.b	#2,$24(a0)
00010D30 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010D38 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010D3E 117C 0004 0001             		move.b	#4,1(a0)
00010D44 117C 000C 0016             		move.b	#$C,$16(a0)
00010D4A 117C 0002 0018             		move.b	#2,$18(a0)
00010D50 117C 000B 0020             		move.b	#$B,$20(a0)
00010D56 117C 0010 0019             		move.b	#$10,$19(a0)
00010D5C                            
00010D5C                            Obj55_Action:				; XREF: Obj55_Index
00010D5C 7000                       		moveq	#0,d0
00010D5E 1028 0025                  		move.b	$25(a0),d0
00010D62 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010D66 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010D6A 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010D70 6100 A572                  		bsr.w	AnimateSprite
00010D74 6000 F5B8                  		bra.w	MarkObjGone
00010D78                            ; ===========================================================================
00010D78 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010D7A 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010D7C 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010D7E 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010D80                            ; ===========================================================================
00010D80                            
00010D80                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010D80 343C 0080                  		move.w	#$80,d2
00010D84 6100 0000                  		bsr.w	Obj55_ChkSonic
00010D88 6400                       		bcc.s	Obj55_NoDrop
00010D8A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010D8E 3140 0036                  		move.w	d0,$36(a0)
00010D92 9068 000C                  		sub.w	$C(a0),d0
00010D96 6500                       		bcs.s	Obj55_NoDrop
00010D98 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010D9C 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010D9E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010DA2 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010DA4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010DA8 D007                       		add.b	d7,d0
00010DAA 0200 0007                  		andi.b	#7,d0
00010DAE 6600                       		bne.s	Obj55_NoDrop
00010DB0 117C 0001 001C             		move.b	#1,$1C(a0)
00010DB6 5428 0025                  		addq.b	#2,$25(a0)
00010DBA                            
00010DBA                            Obj55_NoDrop:
00010DBA 4E75                       		rts	
00010DBC                            ; ===========================================================================
00010DBC                            
00010DBC                            Obj55_DropFly:				; XREF: Obj55_Index2
00010DBC 7218                       		moveq	#$18,d1
00010DBE 6100 D432                  		bsr.w	ObjectFallCustom
00010DC2 343C 0080                  		move.w	#$80,d2
00010DC6 6100 0000                  		bsr.w	Obj55_ChkSonic
00010DCA 3028 0036                  		move.w	$36(a0),d0
00010DCE 9068 000C                  		sub.w	$C(a0),d0
00010DD2 6500                       		bcs.s	Obj55_ChkDel
00010DD4 0C40 0010                  		cmpi.w	#$10,d0
00010DD8 6400                       		bcc.s	locret_10180
00010DDA 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010DDE 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010DE4 117C 0002 001C             		move.b	#2,$1C(a0)
00010DEA 5428 0025                  		addq.b	#2,$25(a0)
00010DEE                            
00010DEE                            locret_10180:
00010DEE 4E75                       		rts	
00010DF0                            ; ===========================================================================
00010DF0                            
00010DF0                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010DF0 4A28 0001                  		tst.b	1(a0)
00010DF4 6A00 D4D2                  		bpl.w	DeleteObject
00010DF8 4E75                       		rts	
00010DFA                            ; ===========================================================================
00010DFA                            
00010DFA                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010DFA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010DFE 0200 000F                  		andi.b	#$F,d0
00010E02 6600                       		bne.s	loc_101A0
00010E04 303C 00C0                  		move.w	#$C0,d0
00010E08 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play flapping sound
00010E0E                            
00010E0E                            loc_101A0:
00010E0E 6100 D442                  		bsr.w	SpeedToPos
00010E12 3038 D008                  		move.w	($FFFFD008).w,d0
00010E16 9068 0008                  		sub.w	8(a0),d0
00010E1A 6400                       		bcc.s	loc_101B0
00010E1C 4440                       		neg.w	d0
00010E1E                            
00010E1E                            loc_101B0:
00010E1E 0C40 0080                  		cmpi.w	#$80,d0
00010E22 6500                       		bcs.s	locret_101C6
00010E24 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010E28 D007                       		add.b	d7,d0
00010E2A 0200 0007                  		andi.b	#7,d0
00010E2E 6600                       		bne.s	locret_101C6
00010E30 5428 0025                  		addq.b	#2,$25(a0)
00010E34                            
00010E34                            locret_101C6:
00010E34 4E75                       		rts	
00010E36                            ; ===========================================================================
00010E36                            
00010E36                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010E36 72E8                       		moveq	#-$18,d1
00010E38 4EBA D3B8                  		jsr	ObjectFallCustom
00010E3C 6100 0000                  		bsr.w	ObjHitCeiling
00010E40 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010E42 6A00                       		bpl.s	locret_101F4	; if not, branch
00010E44 9368 000C                  		sub.w	d1,$C(a0)
00010E48 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010E4E 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010E52 4268 0012                  		clr.w	$12(a0)
00010E56 4228 001C                  		clr.b	$1C(a0)
00010E5A 4228 0025                  		clr.b	$25(a0)
00010E5E                            
00010E5E                            locret_101F4:
00010E5E 4E75                       		rts	
00010E60                            ; ===========================================================================
00010E60                            
00010E60                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010E60 323C 0100                  		move.w	#$100,d1
00010E64 08E8 0000 0022             		bset	#0,$22(a0)
00010E6A 3038 D008                  		move.w	($FFFFD008).w,d0
00010E6E 9068 0008                  		sub.w	8(a0),d0
00010E72 6400                       		bcc.s	loc_10214
00010E74 4440                       		neg.w	d0
00010E76 4441                       		neg.w	d1
00010E78 08A8 0000 0022             		bclr	#0,$22(a0)
00010E7E                            
00010E7E                            loc_10214:
00010E7E B042                       		cmp.w	d2,d0
00010E80 4E75                       		rts
00010E82                            ; ===========================================================================
00010E82                            Ani_obj55:
00010E82                            	include "_anim\obj55.asm"
00010E82                            ; ---------------------------------------------------------------------------
00010E82                            ; Animation script - Basaran enemy
00010E82                            ; ---------------------------------------------------------------------------
00010E82 0000                       		dc.w byte_10230-Ani_obj55
00010E84 0000                       		dc.w byte_10234-Ani_obj55
00010E86 0000                       		dc.w byte_10238-Ani_obj55
00010E88 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010E8C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010E90 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010E96                            		even
00010E96                            		even
00010E96                            
00010E96                            ; ---------------------------------------------------------------------------
00010E96                            ; Sprite mappings - Basaran enemy (MZ)
00010E96                            ; ---------------------------------------------------------------------------
00010E96                            Map_obj55:
00010E96                            	include "_maps\obj55.asm"
00010E96                            ; ---------------------------------------------------------------------------
00010E96                            ; Sprite mappings - Basaran enemy (MZ)
00010E96                            ; ---------------------------------------------------------------------------
00010E96 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010E9A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010E9E 01                         byte_10246:	dc.b 1
00010E9F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010EA4 03                         byte_1024C:	dc.b 3
00010EA5 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010EAA 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010EAF 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010EB4 04                         byte_1025C:	dc.b 4
00010EB5 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010EBA 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010EBF 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010EC4 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010EC9 04                         byte_10271:	dc.b 4
00010ECA F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010ECF 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010ED4 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010ED9 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010EDE                            		even
00010EDE                            		even
00010EDE                            
00010EDE                            ; ===========================================================================
00010EDE                            ; ---------------------------------------------------------------------------
00010EDE                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010EDE                            ; ---------------------------------------------------------------------------
00010EDE                            
00010EDE                            Obj56:					; XREF: Obj_Index
00010EDE 7000                       		moveq	#0,d0
00010EE0 1028 0024                  		move.b	$24(a0),d0
00010EE4 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010EE8 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010EEC                            ; ===========================================================================
00010EEC 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010EEE 0000                       		dc.w Obj56_Action-Obj56_Index
00010EF0                            
00010EF0 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010EF2 2020                       		dc.b  $20, $20
00010EF4 1020                       		dc.b  $10, $20
00010EF6 201A                       		dc.b  $20, $1A
00010EF8 1027                       		dc.b  $10, $27
00010EFA 1010                       		dc.b  $10, $10
00010EFC 0820                       		dc.b	8, $20
00010EFE 4010                       		dc.b  $40, $10
00010F00                            ; ===========================================================================
00010F00                            
00010F00                            Obj56_Main:				; XREF: Obj56_Index
00010F00 5428 0024                  		addq.b	#2,$24(a0)
00010F04 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010F0C 317C 4000 0002             		move.w	#$4000,2(a0)
00010F12 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F18 6600                       		bne.s	loc_102C8
00010F1A 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010F20                            
00010F20                            loc_102C8:
00010F20 117C 0004 0001             		move.b	#4,1(a0)
00010F26 117C 0003 0018             		move.b	#3,$18(a0)
00010F2C 7000                       		moveq	#0,d0
00010F2E 1028 0028                  		move.b	$28(a0),d0
00010F32 E648                       		lsr.w	#3,d0
00010F34 0240 000E                  		andi.w	#$E,d0
00010F38 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010F3C 115A 0019                  		move.b	(a2)+,$19(a0)
00010F40 1152 0016                  		move.b	(a2),$16(a0)
00010F44 E248                       		lsr.w	#1,d0
00010F46 1140 001A                  		move.b	d0,$1A(a0)
00010F4A 3168 0008 0034             		move.w	8(a0),$34(a0)
00010F50 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010F56 7000                       		moveq	#0,d0
00010F58 1012                       		move.b	(a2),d0
00010F5A D040                       		add.w	d0,d0
00010F5C 3140 003A                  		move.w	d0,$3A(a0)
00010F60 7000                       		moveq	#0,d0
00010F62 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F68 6700                       		beq.s	loc_10332
00010F6A 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010F6E 0240 000F                  		andi.w	#$F,d0
00010F72 5140                       		subq.w	#8,d0
00010F74 6500                       		bcs.s	loc_10332
00010F76 E548                       		lsl.w	#2,d0
00010F78 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010F7C 45F2 0000                  		lea	(a2,d0.w),a2
00010F80 4A52                       		tst.w	(a2)
00010F82 6A00                       		bpl.s	loc_10332
00010F84 0868 0000 0022             		bchg	#0,$22(a0)
00010F8A                            
00010F8A                            loc_10332:
00010F8A 1028 0028                  		move.b	$28(a0),d0
00010F8E 6A00                       		bpl.s	Obj56_Action
00010F90 0200 000F                  		andi.b	#$F,d0
00010F94 1140 003C                  		move.b	d0,$3C(a0)
00010F98 117C 0005 0028             		move.b	#5,$28(a0)
00010F9E 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010FA4 6600                       		bne.s	Obj56_ChkGone
00010FA6 117C 000C 0028             		move.b	#$C,$28(a0)
00010FAC 317C 0080 003A             		move.w	#$80,$3A(a0)
00010FB2                            
00010FB2                            Obj56_ChkGone:
00010FB2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010FB6 7000                       		moveq	#0,d0
00010FB8 1028 0023                  		move.b	$23(a0),d0
00010FBC 6700                       		beq.s	Obj56_Action
00010FBE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010FC4 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010FCA 6700                       		beq.s	Obj56_Action
00010FCC 5228 0028                  		addq.b	#1,$28(a0)
00010FD0 4268 003A                  		clr.w	$3A(a0)
00010FD4                            
00010FD4                            Obj56_Action:				; XREF: Obj56_Index
00010FD4 3F28 0008                  		move.w	8(a0),-(sp)
00010FD8 7000                       		moveq	#0,d0
00010FDA 1028 0028                  		move.b	$28(a0),d0	; get object type
00010FDE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010FE2 D040                       		add.w	d0,d0
00010FE4 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010FE8 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010FEC 381F                       		move.w	(sp)+,d4
00010FEE 4A28 0001                  		tst.b	1(a0)
00010FF2 6A00                       		bpl.s	Obj56_ChkDel
00010FF4 7200                       		moveq	#0,d1
00010FF6 1228 0019                  		move.b	$19(a0),d1
00010FFA 0641 000B                  		addi.w	#$B,d1
00010FFE 7400                       		moveq	#0,d2
00011000 1428 0016                  		move.b	$16(a0),d2
00011004 3602                       		move.w	d2,d3
00011006 5243                       		addq.w	#1,d3
00011008 6100 F64C                  		bsr.w	SolidObject
0001100C                            
0001100C                            Obj56_ChkDel:
0001100C 3028 0034                  		move.w	$34(a0),d0
00011010 0240 FF80                  		andi.w	#$FF80,d0
00011014 3238 F700                  		move.w	($FFFFF700).w,d1
00011018 0441 0080                  		subi.w	#$80,d1
0001101C 0241 FF80                  		andi.w	#$FF80,d1
00011020 9041                       		sub.w	d1,d0
00011022 0C40 0280                  		cmpi.w	#$280,d0
00011026 6200 D2A0                  		bhi.w	DeleteObject
0001102A 6000 D260                  		bra.w	DisplaySprite
0001102E                            ; ===========================================================================
0001102E 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011032 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011036 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001103A 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001103E 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011042 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011046 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001104A                            ; ===========================================================================
0001104A                            
0001104A                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001104A 4E75                       		rts	
0001104C                            ; ===========================================================================
0001104C                            
0001104C                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001104C 323C 0040                  		move.w	#$40,d1
00011050 7000                       		moveq	#0,d0
00011052 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011056 6000                       		bra.s	Obj56_Move_LR
00011058                            ; ===========================================================================
00011058                            
00011058                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011058 323C 0080                  		move.w	#$80,d1
0001105C 7000                       		moveq	#0,d0
0001105E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011062                            
00011062                            Obj56_Move_LR:
00011062 0828 0000 0022             		btst	#0,$22(a0)
00011068 6700                       		beq.s	loc_10416
0001106A 4440                       		neg.w	d0
0001106C D041                       		add.w	d1,d0
0001106E                            
0001106E                            loc_10416:
0001106E 3228 0034                  		move.w	$34(a0),d1
00011072 9240                       		sub.w	d0,d1
00011074 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011078 4E75                       		rts	
0001107A                            ; ===========================================================================
0001107A                            
0001107A                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0001107A 323C 0040                  		move.w	#$40,d1
0001107E 7000                       		moveq	#0,d0
00011080 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011084 6000                       		bra.s	Obj56_Move_UD
00011086                            ; ===========================================================================
00011086                            
00011086                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011086 323C 0080                  		move.w	#$80,d1
0001108A 7000                       		moveq	#0,d0
0001108C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011090                            
00011090                            Obj56_Move_UD:
00011090 0828 0000 0022             		btst	#0,$22(a0)
00011096 6700                       		beq.s	loc_10444
00011098 4440                       		neg.w	d0
0001109A D041                       		add.w	d1,d0
0001109C                            
0001109C                            loc_10444:
0001109C 3228 0030                  		move.w	$30(a0),d1
000110A0 9240                       		sub.w	d0,d1
000110A2 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000110A6 4E75                       		rts	
000110A8                            ; ===========================================================================
000110A8                            
000110A8                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000110A8 4A28 0038                  		tst.b	$38(a0)
000110AC 6600                       		bne.s	loc_104A4
000110AE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000110B4 6600                       		bne.s	loc_1047A	; if not, branch
000110B6 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000110BC 6600                       		bne.s	loc_1047A
000110BE 4238 F7C9                  		clr.b	($FFFFF7C9).w
000110C2 3038 D008                  		move.w	($FFFFD008).w,d0
000110C6 B068 0008                  		cmp.w	8(a0),d0
000110CA 6400                       		bcc.s	loc_1047A
000110CC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000110D2                            
000110D2                            loc_1047A:
000110D2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000110D6 7000                       		moveq	#0,d0
000110D8 1028 003C                  		move.b	$3C(a0),d0
000110DC 0832 0000 0000             		btst	#0,(a2,d0.w)
000110E2 6700                       		beq.s	loc_104AE
000110E4 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000110EA 6600                       		bne.s	loc_1049E	; if not, branch
000110EC 0C00 0003                  		cmpi.b	#3,d0
000110F0 6600                       		bne.s	loc_1049E
000110F2 4238 F7C9                  		clr.b	($FFFFF7C9).w
000110F6                            
000110F6                            loc_1049E:
000110F6 117C 0001 0038             		move.b	#1,$38(a0)
000110FC                            
000110FC                            loc_104A4:
000110FC 4A68 003A                  		tst.w	$3A(a0)
00011100 6700                       		beq.s	loc_104C8
00011102 5568 003A                  		subq.w	#2,$3A(a0)
00011106                            
00011106                            loc_104AE:
00011106 3028 003A                  		move.w	$3A(a0),d0
0001110A 0828 0000 0022             		btst	#0,$22(a0)
00011110 6700                       		beq.s	loc_104BC
00011112 4440                       		neg.w	d0
00011114                            
00011114                            loc_104BC:
00011114 3228 0030                  		move.w	$30(a0),d1
00011118 D240                       		add.w	d0,d1
0001111A 3141 000C                  		move.w	d1,$C(a0)
0001111E 4E75                       		rts	
00011120                            ; ===========================================================================
00011120                            
00011120                            loc_104C8:
00011120 5228 0028                  		addq.b	#1,$28(a0)
00011124 4228 0038                  		clr.b	$38(a0)
00011128 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001112C 7000                       		moveq	#0,d0
0001112E 1028 0023                  		move.b	$23(a0),d0
00011132 67D2                       		beq.s	loc_104AE
00011134 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001113A 60CA                       		bra.s	loc_104AE
0001113C                            ; ===========================================================================
0001113C                            
0001113C                            Obj56_Type06:				; XREF: Obj56_TypeIndex
0001113C 4A28 0038                  		tst.b	$38(a0)
00011140 6600                       		bne.s	loc_10500
00011142 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011146 7000                       		moveq	#0,d0
00011148 1028 003C                  		move.b	$3C(a0),d0
0001114C 4A32 0000                  		tst.b	(a2,d0.w)
00011150 6A00                       		bpl.s	loc_10512
00011152 117C 0001 0038             		move.b	#1,$38(a0)
00011158                            
00011158                            loc_10500:
00011158 7000                       		moveq	#0,d0
0001115A 1028 0016                  		move.b	$16(a0),d0
0001115E D040                       		add.w	d0,d0
00011160 B068 003A                  		cmp.w	$3A(a0),d0
00011164 6700                       		beq.s	loc_1052C
00011166 5468 003A                  		addq.w	#2,$3A(a0)
0001116A                            
0001116A                            loc_10512:
0001116A 3028 003A                  		move.w	$3A(a0),d0
0001116E 0828 0000 0022             		btst	#0,$22(a0)
00011174 6700                       		beq.s	loc_10520
00011176 4440                       		neg.w	d0
00011178                            
00011178                            loc_10520:
00011178 3228 0030                  		move.w	$30(a0),d1
0001117C D240                       		add.w	d0,d1
0001117E 3141 000C                  		move.w	d1,$C(a0)
00011182 4E75                       		rts	
00011184                            ; ===========================================================================
00011184                            
00011184                            loc_1052C:
00011184 5328 0028                  		subq.b	#1,$28(a0)
00011188 4228 0038                  		clr.b	$38(a0)
0001118C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011190 7000                       		moveq	#0,d0
00011192 1028 0023                  		move.b	$23(a0),d0
00011196 67D2                       		beq.s	loc_10512
00011198 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001119E 60CA                       		bra.s	loc_10512
000111A0                            ; ===========================================================================
000111A0                            
000111A0                            Obj56_Type07:				; XREF: Obj56_TypeIndex
000111A0 4A28 0038                  		tst.b	$38(a0)
000111A4 6600                       		bne.s	loc_1055E
000111A6 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
000111AA 6700                       		beq.s	locret_10578
000111AC 117C 0001 0038             		move.b	#1,$38(a0)
000111B2 4268 003A                  		clr.w	$3A(a0)
000111B6                            
000111B6                            loc_1055E:
000111B6 5268 0008                  		addq.w	#1,8(a0)
000111BA 3168 0008 0034             		move.w	8(a0),$34(a0)
000111C0 5268 003A                  		addq.w	#1,$3A(a0)
000111C4 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000111CA 6600                       		bne.s	locret_10578
000111CC 4228 0028                  		clr.b	$28(a0)
000111D0                            
000111D0                            locret_10578:
000111D0 4E75                       		rts	
000111D2                            ; ===========================================================================
000111D2                            
000111D2                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000111D2 4A28 0038                  		tst.b	$38(a0)
000111D6 6600                       		bne.s	loc_10598
000111D8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000111DC 7000                       		moveq	#0,d0
000111DE 1028 003C                  		move.b	$3C(a0),d0
000111E2 0832 0000 0000             		btst	#0,(a2,d0.w)
000111E8 6700                       		beq.s	loc_105A2
000111EA 117C 0001 0038             		move.b	#1,$38(a0)
000111F0                            
000111F0                            loc_10598:
000111F0 4A68 003A                  		tst.w	$3A(a0)
000111F4 6700                       		beq.s	loc_105C0
000111F6 5568 003A                  		subq.w	#2,$3A(a0)
000111FA                            
000111FA                            loc_105A2:
000111FA 3028 003A                  		move.w	$3A(a0),d0
000111FE 0828 0000 0022             		btst	#0,$22(a0)
00011204 6700                       		beq.s	loc_105B4
00011206 4440                       		neg.w	d0
00011208 0640 0080                  		addi.w	#$80,d0
0001120C                            
0001120C                            loc_105B4:
0001120C 3228 0034                  		move.w	$34(a0),d1
00011210 D240                       		add.w	d0,d1
00011212 3141 0008                  		move.w	d1,8(a0)
00011216 4E75                       		rts	
00011218                            ; ===========================================================================
00011218                            
00011218                            loc_105C0:
00011218 5228 0028                  		addq.b	#1,$28(a0)
0001121C 4228 0038                  		clr.b	$38(a0)
00011220 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011224 7000                       		moveq	#0,d0
00011226 1028 0023                  		move.b	$23(a0),d0
0001122A 67CE                       		beq.s	loc_105A2
0001122C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011232 60C6                       		bra.s	loc_105A2
00011234                            ; ===========================================================================
00011234                            
00011234                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011234 4A28 0038                  		tst.b	$38(a0)
00011238 6600                       		bne.s	loc_105F8
0001123A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001123E 7000                       		moveq	#0,d0
00011240 1028 003C                  		move.b	$3C(a0),d0
00011244 4A32 0000                  		tst.b	(a2,d0.w)
00011248 6A00                       		bpl.s	loc_10606
0001124A 117C 0001 0038             		move.b	#1,$38(a0)
00011250                            
00011250                            loc_105F8:
00011250 303C 0080                  		move.w	#$80,d0
00011254 B068 003A                  		cmp.w	$3A(a0),d0
00011258 6700                       		beq.s	loc_10624
0001125A 5468 003A                  		addq.w	#2,$3A(a0)
0001125E                            
0001125E                            loc_10606:
0001125E 3028 003A                  		move.w	$3A(a0),d0
00011262 0828 0000 0022             		btst	#0,$22(a0)
00011268 6700                       		beq.s	loc_10618
0001126A 4440                       		neg.w	d0
0001126C 0640 0080                  		addi.w	#$80,d0
00011270                            
00011270                            loc_10618:
00011270 3228 0034                  		move.w	$34(a0),d1
00011274 D240                       		add.w	d0,d1
00011276 3141 0008                  		move.w	d1,8(a0)
0001127A 4E75                       		rts	
0001127C                            ; ===========================================================================
0001127C                            
0001127C                            loc_10624:
0001127C 5328 0028                  		subq.b	#1,$28(a0)
00011280 4228 0038                  		clr.b	$38(a0)
00011284 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011288 7000                       		moveq	#0,d0
0001128A 1028 0023                  		move.b	$23(a0),d0
0001128E 67CE                       		beq.s	loc_10606
00011290 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011296 60C6                       		bra.s	loc_10606
00011298                            ; ===========================================================================
00011298                            
00011298                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011298 323C 0010                  		move.w	#$10,d1
0001129C 7000                       		moveq	#0,d0
0001129E 1038 FE88                  		move.b	($FFFFFE88).w,d0
000112A2 E248                       		lsr.w	#1,d0
000112A4 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
000112A8 6000                       		bra.s	Obj56_Move_Sqr
000112AA                            ; ===========================================================================
000112AA                            
000112AA                            Obj56_Type09:				; XREF: Obj56_TypeIndex
000112AA 323C 0030                  		move.w	#$30,d1
000112AE 7000                       		moveq	#0,d0
000112B0 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000112B4 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000112B8 6000                       		bra.s	Obj56_Move_Sqr
000112BA                            ; ===========================================================================
000112BA                            
000112BA                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000112BA 323C 0050                  		move.w	#$50,d1
000112BE 7000                       		moveq	#0,d0
000112C0 1038 FE90                  		move.b	($FFFFFE90).w,d0
000112C4 3638 FE92                  		move.w	($FFFFFE92).w,d3
000112C8 6000                       		bra.s	Obj56_Move_Sqr
000112CA                            ; ===========================================================================
000112CA                            
000112CA                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000112CA 323C 0070                  		move.w	#$70,d1
000112CE 7000                       		moveq	#0,d0
000112D0 1038 FE94                  		move.b	($FFFFFE94).w,d0
000112D4 3638 FE96                  		move.w	($FFFFFE96).w,d3
000112D8                            
000112D8                            Obj56_Move_Sqr:
000112D8 4A43                       		tst.w	d3
000112DA 6600                       		bne.s	loc_1068E
000112DC 5228 0022                  		addq.b	#1,$22(a0)
000112E0 0228 0003 0022             		andi.b	#3,$22(a0)
000112E6                            
000112E6                            loc_1068E:
000112E6 1428 0022                  		move.b	$22(a0),d2
000112EA 0202 0003                  		andi.b	#3,d2
000112EE 6600                       		bne.s	loc_106AE
000112F0 9041                       		sub.w	d1,d0
000112F2 D068 0034                  		add.w	$34(a0),d0
000112F6 3140 0008                  		move.w	d0,8(a0)
000112FA 4441                       		neg.w	d1
000112FC D268 0030                  		add.w	$30(a0),d1
00011300 3141 000C                  		move.w	d1,$C(a0)
00011304 4E75                       		rts	
00011306                            ; ===========================================================================
00011306                            
00011306                            loc_106AE:
00011306 5302                       		subq.b	#1,d2
00011308 6600                       		bne.s	loc_106CC
0001130A 5341                       		subq.w	#1,d1
0001130C 9041                       		sub.w	d1,d0
0001130E 4440                       		neg.w	d0
00011310 D068 0030                  		add.w	$30(a0),d0
00011314 3140 000C                  		move.w	d0,$C(a0)
00011318 5241                       		addq.w	#1,d1
0001131A D268 0034                  		add.w	$34(a0),d1
0001131E 3141 0008                  		move.w	d1,8(a0)
00011322 4E75                       		rts	
00011324                            ; ===========================================================================
00011324                            
00011324                            loc_106CC:
00011324 5302                       		subq.b	#1,d2
00011326 6600                       		bne.s	loc_106EA
00011328 5341                       		subq.w	#1,d1
0001132A 9041                       		sub.w	d1,d0
0001132C 4440                       		neg.w	d0
0001132E D068 0034                  		add.w	$34(a0),d0
00011332 3140 0008                  		move.w	d0,8(a0)
00011336 5241                       		addq.w	#1,d1
00011338 D268 0030                  		add.w	$30(a0),d1
0001133C 3141 000C                  		move.w	d1,$C(a0)
00011340 4E75                       		rts	
00011342                            ; ===========================================================================
00011342                            
00011342                            loc_106EA:
00011342 9041                       		sub.w	d1,d0
00011344 D068 0030                  		add.w	$30(a0),d0
00011348 3140 000C                  		move.w	d0,$C(a0)
0001134C 4441                       		neg.w	d1
0001134E D268 0034                  		add.w	$34(a0),d1
00011352 3141 0008                  		move.w	d1,8(a0)
00011356 4E75                       		rts	
00011358                            ; ===========================================================================
00011358                            ; ---------------------------------------------------------------------------
00011358                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011358                            ; ---------------------------------------------------------------------------
00011358                            Map_obj56:
00011358                            	include "_maps\obj56.asm"
00011358                            ; ---------------------------------------------------------------------------
00011358                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011358                            ; ---------------------------------------------------------------------------
00011358 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001135C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011360 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011364 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011368 01                         byte_10710:	dc.b 1
00011369 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001136E 04                         byte_10716:	dc.b 4
0001136F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011374 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011379 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001137E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011383 02                         byte_1072B:	dc.b 2
00011384 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011389 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001138E 04                         byte_10736:	dc.b 4
0001138F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011394 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011399 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001139E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000113A3 03                         byte_1074B:	dc.b 3
000113A4 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
000113A9 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000113AE 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000113B3 01                         byte_1075B:	dc.b 1
000113B4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000113B9 02                         byte_10761:	dc.b 2
000113BA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000113BF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000113C4 04                         byte_1076C:	dc.b 4
000113C5 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000113CA F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000113CF F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000113D4 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000113DA 00                         		even
000113DA 00                         		even
000113DA                            
000113DA                            ; ===========================================================================
000113DA                            ; ---------------------------------------------------------------------------
000113DA                            ; Object 57 - spiked balls (SYZ, LZ)
000113DA                            ; ---------------------------------------------------------------------------
000113DA                            
000113DA                            Obj57:					; XREF: Obj_Index
000113DA 7000                       		moveq	#0,d0
000113DC 1028 0024                  		move.b	$24(a0),d0
000113E0 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000113E4 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000113E8                            ; ===========================================================================
000113E8 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000113EA 0000                       		dc.w Obj57_Move-Obj57_Index
000113EC 0000                       		dc.w Obj57_Display-Obj57_Index
000113EE                            ; ===========================================================================
000113EE                            
000113EE                            Obj57_Main:				; XREF: Obj57_Index
000113EE 5428 0024                  		addq.b	#2,$24(a0)
000113F2 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000113FA 317C 03BA 0002             		move.w	#$3BA,2(a0)
00011400 117C 0004 0001             		move.b	#4,1(a0)
00011406 117C 0004 0018             		move.b	#4,$18(a0)
0001140C 117C 0008 0019             		move.b	#8,$19(a0)
00011412 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011418 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001141E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011424 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001142A 6600                       		bne.s	loc_107E8
0001142C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011432 317C 0310 0002             		move.w	#$310,2(a0)
00011438 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011440                            
00011440                            loc_107E8:
00011440 1228 0028                  		move.b	$28(a0),d1	; get object type
00011444 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011448 4881                       		ext.w	d1
0001144A E741                       		asl.w	#3,d1		; multiply by 8
0001144C 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011450 1028 0022                  		move.b	$22(a0),d0
00011454 E418                       		ror.b	#2,d0
00011456 0200 00C0                  		andi.b	#-$40,d0
0001145A 1140 0026                  		move.b	d0,$26(a0)
0001145E 45E8 0029                  		lea	$29(a0),a2
00011462 1228 0028                  		move.b	$28(a0),d1	; get object type
00011466 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001146A 14FC 0000                  		move.b	#0,(a2)+
0001146E 3601                       		move.w	d1,d3
00011470 E94B                       		lsl.w	#4,d3
00011472 1143 003C                  		move.b	d3,$3C(a0)
00011476 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011478 6500                       		bcs.s	loc_10894
0001147A 0828 0003 0028             		btst	#3,$28(a0)
00011480 6700                       		beq.s	Obj57_MakeChain
00011482 5341                       		subq.w	#1,d1
00011484 6500                       		bcs.s	loc_10894
00011486                            
00011486                            Obj57_MakeChain:
00011486 6100 D28A                  		bsr.w	SingleObjLoad
0001148A 6600                       		bne.s	loc_10894
0001148C 5228 0029                  		addq.b	#1,$29(a0)
00011490 3A09                       		move.w	a1,d5
00011492 0445 D000                  		subi.w	#-$3000,d5
00011496 EC4D                       		lsr.w	#6,d5
00011498 0245 007F                  		andi.w	#$7F,d5
0001149C 14C5                       		move.b	d5,(a2)+
0001149E 137C 0004 0024             		move.b	#4,$24(a1)
000114A4 1290                       		move.b	0(a0),0(a1)
000114A6 2368 0004 0004             		move.l	4(a0),4(a1)
000114AC 3368 0002 0002             		move.w	2(a0),2(a1)
000114B2 1368 0001 0001             		move.b	1(a0),1(a1)
000114B8 1368 0018 0018             		move.b	$18(a0),$18(a1)
000114BE 1368 0019 0019             		move.b	$19(a0),$19(a1)
000114C4 1368 0020 0020             		move.b	$20(a0),$20(a1)
000114CA 0403 0010                  		subi.b	#$10,d3
000114CE 1343 003C                  		move.b	d3,$3C(a1)
000114D2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000114D8 6600                       		bne.s	loc_10890
000114DA 4A03                       		tst.b	d3
000114DC 6600                       		bne.s	loc_10890
000114DE 137C 0002 001A             		move.b	#2,$1A(a1)
000114E4                            
000114E4                            loc_10890:
000114E4 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000114E8                            
000114E8                            loc_10894:
000114E8 3A08                       		move.w	a0,d5
000114EA 0445 D000                  		subi.w	#-$3000,d5
000114EE EC4D                       		lsr.w	#6,d5
000114F0 0245 007F                  		andi.w	#$7F,d5
000114F4 14C5                       		move.b	d5,(a2)+
000114F6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000114FC 6600                       		bne.s	Obj57_Move
000114FE 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00011504 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001150A                            
0001150A                            Obj57_Move:				; XREF: Obj57_Index
0001150A 6100 0000                  		bsr.w	Obj57_MoveSub
0001150E 6000 0000                  		bra.w	Obj57_ChkDel
00011512                            ; ===========================================================================
00011512                            
00011512                            Obj57_MoveSub:				; XREF: Obj57_Move
00011512 3028 003E                  		move.w	$3E(a0),d0
00011516 D168 0026                  		add.w	d0,$26(a0)
0001151A 1028 0026                  		move.b	$26(a0),d0
0001151E 4EB9 0000 2D6E             		jsr	(CalcSine).l
00011524 3428 0038                  		move.w	$38(a0),d2
00011528 3628 003A                  		move.w	$3A(a0),d3
0001152C 45E8 0029                  		lea	$29(a0),a2
00011530 7C00                       		moveq	#0,d6
00011532 1C1A                       		move.b	(a2)+,d6
00011534                            
00011534                            Obj57_MoveLoop:
00011534 7800                       		moveq	#0,d4
00011536 181A                       		move.b	(a2)+,d4
00011538 ED4C                       		lsl.w	#6,d4
0001153A 0684 00FF D000             		addi.l	#$FFD000,d4
00011540 2244                       		movea.l	d4,a1
00011542 7800                       		moveq	#0,d4
00011544 1829 003C                  		move.b	$3C(a1),d4
00011548 2A04                       		move.l	d4,d5
0001154A C9C0                       		muls.w	d0,d4
0001154C E084                       		asr.l	#8,d4
0001154E CBC1                       		muls.w	d1,d5
00011550 E085                       		asr.l	#8,d5
00011552 D842                       		add.w	d2,d4
00011554 DA43                       		add.w	d3,d5
00011556 3344 000C                  		move.w	d4,$C(a1)
0001155A 3345 0008                  		move.w	d5,8(a1)
0001155E 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011562 4E75                       		rts	
00011564                            ; ===========================================================================
00011564                            
00011564                            Obj57_ChkDel:				; XREF: Obj57_Move
00011564 3028 003A                  		move.w	$3A(a0),d0
00011568 0240 FF80                  		andi.w	#$FF80,d0
0001156C 3238 F700                  		move.w	($FFFFF700).w,d1
00011570 0441 0080                  		subi.w	#$80,d1
00011574 0241 FF80                  		andi.w	#$FF80,d1
00011578 9041                       		sub.w	d1,d0
0001157A 0C40 0280                  		cmpi.w	#$280,d0
0001157E 6200 0000                  		bhi.w	Obj57_Delete
00011582 6000 CD08                  		bra.w	DisplaySprite
00011586                            ; ===========================================================================
00011586                            
00011586                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011586 7400                       		moveq	#0,d2
00011588 45E8 0029                  		lea	$29(a0),a2
0001158C 141A                       		move.b	(a2)+,d2
0001158E                            
0001158E                            Obj57_DelLoop:
0001158E 7000                       		moveq	#0,d0
00011590 101A                       		move.b	(a2)+,d0
00011592 ED48                       		lsl.w	#6,d0
00011594 0680 00FF D000             		addi.l	#$FFD000,d0
0001159A 2240                       		movea.l	d0,a1
0001159C 6100 CD2C                  		bsr.w	DeleteObject2
000115A0 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000115A4                            
000115A4 4E75                       		rts	
000115A6                            ; ===========================================================================
000115A6                            
000115A6                            Obj57_Display:				; XREF: Obj57_Index
000115A6 6000 CCE4                  		bra.w	DisplaySprite
000115AA                            ; ===========================================================================
000115AA                            ; ---------------------------------------------------------------------------
000115AA                            ; Sprite mappings - chain of spiked balls (SYZ)
000115AA                            ; ---------------------------------------------------------------------------
000115AA                            Map_obj57:
000115AA                            	include "_maps\obj57syz.asm"
000115AA                            ; ---------------------------------------------------------------------------
000115AA                            ; Sprite mappings - chain of spiked balls (SYZ)
000115AA                            ; ---------------------------------------------------------------------------
000115AA 0000                       		dc.w byte_10958-Map_obj57
000115AC 01                         byte_10958:	dc.b 1
000115AD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000115B2                            		even
000115B2                            		even
000115B2                            
000115B2                            ; ---------------------------------------------------------------------------
000115B2                            ; Sprite mappings - spiked ball	on a chain (LZ)
000115B2                            ; ---------------------------------------------------------------------------
000115B2                            Map_obj57a:
000115B2                            	include "_maps\obj57lz.asm"
000115B2                            ; ---------------------------------------------------------------------------
000115B2                            ; Sprite mappings - spiked ball	on a chain (LZ)
000115B2                            ; ---------------------------------------------------------------------------
000115B2 0000                       		dc.w byte_10964-Map_obj57a
000115B4 0000                       		dc.w byte_1096A-Map_obj57a
000115B6 0000                       		dc.w byte_10970-Map_obj57a
000115B8 01                         byte_10964:	dc.b 1
000115B9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000115BE 01                         byte_1096A:	dc.b 1
000115BF F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000115C4 01                         byte_10970:	dc.b 1
000115C5 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000115CA                            		even
000115CA                            		even
000115CA                            
000115CA                            ; ===========================================================================
000115CA                            ; ---------------------------------------------------------------------------
000115CA                            ; Object 58 - giant spiked balls (SYZ)
000115CA                            ; ---------------------------------------------------------------------------
000115CA                            
000115CA                            Obj58:					; XREF: Obj_Index
000115CA 7000                       		moveq	#0,d0
000115CC 1028 0024                  		move.b	$24(a0),d0
000115D0 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000115D4 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000115D8                            ; ===========================================================================
000115D8 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000115DA 0000                       		dc.w Obj58_Move-Obj58_Index
000115DC                            ; ===========================================================================
000115DC                            
000115DC                            Obj58_Main:				; XREF: Obj58_Index
000115DC 5428 0024                  		addq.b	#2,$24(a0)
000115E0 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000115E8 317C 0396 0002             		move.w	#$396,2(a0)
000115EE 117C 0004 0001             		move.b	#4,1(a0)
000115F4 117C 0004 0018             		move.b	#4,$18(a0)
000115FA 117C 0018 0019             		move.b	#$18,$19(a0)
00011600 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011606 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001160C 117C 0086 0020             		move.b	#$86,$20(a0)
00011612 1228 0028                  		move.b	$28(a0),d1	; get object type
00011616 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001161A 4881                       		ext.w	d1
0001161C E741                       		asl.w	#3,d1		; multiply by 8
0001161E 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011622 1028 0022                  		move.b	$22(a0),d0
00011626 E418                       		ror.b	#2,d0
00011628 0200 00C0                  		andi.b	#$C0,d0
0001162C 1140 0026                  		move.b	d0,$26(a0)
00011630 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011636                            
00011636                            Obj58_Move:				; XREF: Obj58_Index
00011636 7000                       		moveq	#0,d0
00011638 1028 0028                  		move.b	$28(a0),d0	; get object type
0001163C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011640 D040                       		add.w	d0,d0
00011642 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011646 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001164A 3028 003A                  		move.w	$3A(a0),d0
0001164E 0240 FF80                  		andi.w	#$FF80,d0
00011652 3238 F700                  		move.w	($FFFFF700).w,d1
00011656 0441 0080                  		subi.w	#$80,d1
0001165A 0241 FF80                  		andi.w	#$FF80,d1
0001165E 9041                       		sub.w	d1,d0
00011660 0C40 0280                  		cmpi.w	#$280,d0
00011664 6200 CC62                  		bhi.w	DeleteObject
00011668 6000 CC22                  		bra.w	DisplaySprite
0001166C                            ; ===========================================================================
0001166C 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001166E 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011670 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011672 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011674                            ; ===========================================================================
00011674                            
00011674                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011674 4E75                       		rts	
00011676                            ; ===========================================================================
00011676                            
00011676                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011676 323C 0060                  		move.w	#$60,d1
0001167A 7000                       		moveq	#0,d0
0001167C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011680 0828 0000 0022             		btst	#0,$22(a0)
00011686 6700                       		beq.s	loc_10A38
00011688 4440                       		neg.w	d0
0001168A D041                       		add.w	d1,d0
0001168C                            
0001168C                            loc_10A38:
0001168C 3228 003A                  		move.w	$3A(a0),d1
00011690 9240                       		sub.w	d0,d1
00011692 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011696 4E75                       		rts	
00011698                            ; ===========================================================================
00011698                            
00011698                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011698 323C 0060                  		move.w	#$60,d1
0001169C 7000                       		moveq	#0,d0
0001169E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000116A2 0828 0000 0022             		btst	#0,$22(a0)
000116A8 6700                       		beq.s	loc_10A5C
000116AA 4440                       		neg.w	d0
000116AC 0640 0080                  		addi.w	#$80,d0
000116B0                            
000116B0                            loc_10A5C:
000116B0 3228 0038                  		move.w	$38(a0),d1
000116B4 9240                       		sub.w	d0,d1
000116B6 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000116BA 4E75                       		rts	
000116BC                            ; ===========================================================================
000116BC                            
000116BC                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000116BC 3028 003E                  		move.w	$3E(a0),d0
000116C0 D168 0026                  		add.w	d0,$26(a0)
000116C4 1028 0026                  		move.b	$26(a0),d0
000116C8 4EB9 0000 2D6E             		jsr	(CalcSine).l
000116CE 3428 0038                  		move.w	$38(a0),d2
000116D2 3628 003A                  		move.w	$3A(a0),d3
000116D6 7800                       		moveq	#0,d4
000116D8 1828 003C                  		move.b	$3C(a0),d4
000116DC 2A04                       		move.l	d4,d5
000116DE C9C0                       		muls.w	d0,d4
000116E0 E084                       		asr.l	#8,d4
000116E2 CBC1                       		muls.w	d1,d5
000116E4 E085                       		asr.l	#8,d5
000116E6 D842                       		add.w	d2,d4
000116E8 DA43                       		add.w	d3,d5
000116EA 3144 000C                  		move.w	d4,$C(a0)
000116EE 3145 0008                  		move.w	d5,8(a0)
000116F2 4E75                       		rts	
000116F4                            ; ===========================================================================
000116F4                            ; ---------------------------------------------------------------------------
000116F4                            ; Sprite mappings - SBZ	spiked ball on a chain
000116F4                            ; ---------------------------------------------------------------------------
000116F4                            Map_obj15b:
000116F4                            	include "_maps\obj15sbz.asm"
000116F4                            ; ---------------------------------------------------------------------------
000116F4                            ; Sprite mappings - spiked ball on a chain (SBZ)
000116F4                            ; ---------------------------------------------------------------------------
000116F4 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000116F8 0000                       		dc.w byte_10AC6-Map_obj15b
000116FA 05                         byte_10AA6:	dc.b 5
000116FB E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011700 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011705 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001170A F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001170F 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011714 01                         byte_10AC0:	dc.b 1
00011715 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001171A 02                         byte_10AC6:	dc.b 2
0001171B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011720 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011726 00                         		even
00011726 00                         		even
00011726                            
00011726                            ; ===========================================================================
00011726                            ; ---------------------------------------------------------------------------
00011726                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011726                            ; ---------------------------------------------------------------------------
00011726                            
00011726                            Obj59:					; XREF: Obj_Index
00011726 7000                       		moveq	#0,d0
00011728 1028 0024                  		move.b	$24(a0),d0
0001172C 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011730 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011734 3028 0032                  		move.w	$32(a0),d0
00011738 0240 FF80                  		andi.w	#$FF80,d0
0001173C 3238 F700                  		move.w	($FFFFF700).w,d1
00011740 0441 0080                  		subi.w	#$80,d1
00011744 0241 FF80                  		andi.w	#$FF80,d1
00011748 9041                       		sub.w	d1,d0
0001174A 0C40 0280                  		cmpi.w	#$280,d0
0001174E 6200 CB78                  		bhi.w	DeleteObject
00011752 6000 CB38                  		bra.w	DisplaySprite
00011756                            ; ===========================================================================
00011756 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011758 0000                       		dc.w Obj59_Platform-Obj59_Index
0001175A 0000                       		dc.w Obj59_Action-Obj59_Index
0001175C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001175E                            
0001175E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011760                            
00011760 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011762 2001                       		dc.b $20, 1
00011764 3401                       		dc.b $34, 1
00011766 1003                       		dc.b $10, 3
00011768 2003                       		dc.b $20, 3
0001176A 3403                       		dc.b $34, 3
0001176C 1401                       		dc.b $14, 1
0001176E 2401                       		dc.b $24, 1
00011770 2C01                       		dc.b $2C, 1
00011772 1403                       		dc.b $14, 3
00011774 2403                       		dc.b $24, 3
00011776 2C03                       		dc.b $2C, 3
00011778 2005                       		dc.b $20, 5
0001177A 2007                       		dc.b $20, 7
0001177C 3009                       		dc.b $30, 9
0001177E                            ; ===========================================================================
0001177E                            
0001177E                            Obj59_Main:				; XREF: Obj59_Index
0001177E 5428 0024                  		addq.b	#2,$24(a0)
00011782 7000                       		moveq	#0,d0
00011784 1028 0028                  		move.b	$28(a0),d0
00011788 6A00                       		bpl.s	Obj59_Main2
0001178A 5828 0024                  		addq.b	#4,$24(a0)
0001178E 0240 007F                  		andi.w	#$7F,d0
00011792 C0FC 0006                  		mulu.w	#6,d0
00011796 3140 003C                  		move.w	d0,$3C(a0)
0001179A 3140 003E                  		move.w	d0,$3E(a0)
0001179E 588F                       		addq.l	#4,sp
000117A0 4E75                       		rts	
000117A2                            ; ===========================================================================
000117A2                            
000117A2                            Obj59_Main2:
000117A2 E648                       		lsr.w	#3,d0
000117A4 0240 001E                  		andi.w	#$1E,d0
000117A8 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000117AC 115A 0019                  		move.b	(a2)+,$19(a0)
000117B0 115A 001A                  		move.b	(a2)+,$1A(a0)
000117B4 7000                       		moveq	#0,d0
000117B6 1028 0028                  		move.b	$28(a0),d0
000117BA D040                       		add.w	d0,d0
000117BC 0240 001E                  		andi.w	#$1E,d0
000117C0 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000117C4 101A                       		move.b	(a2)+,d0
000117C6 E548                       		lsl.w	#2,d0
000117C8 3140 003C                  		move.w	d0,$3C(a0)
000117CC 115A 0028                  		move.b	(a2)+,$28(a0)
000117D0 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000117D8 317C 4000 0002             		move.w	#$4000,2(a0)
000117DE 117C 0004 0001             		move.b	#4,1(a0)
000117E4 117C 0004 0018             		move.b	#4,$18(a0)
000117EA 3168 0008 0032             		move.w	8(a0),$32(a0)
000117F0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000117F6                            
000117F6                            Obj59_Platform:				; XREF: Obj59_Index
000117F6 7200                       		moveq	#0,d1
000117F8 1228 0019                  		move.b	$19(a0),d1
000117FC 4EB9 0000 7EB2             		jsr	(PlatformObject).l
00011802 6000 0000                  		bra.w	Obj59_Types
00011806                            ; ===========================================================================
00011806                            
00011806                            Obj59_Action:				; XREF: Obj59_Index
00011806 7200                       		moveq	#0,d1
00011808 1228 0019                  		move.b	$19(a0),d1
0001180C 4EB9 0000 8026             		jsr	(ExitPlatform).l
00011812 3F28 0008                  		move.w	8(a0),-(sp)
00011816 6100 0000                  		bsr.w	Obj59_Types
0001181A 341F                       		move.w	(sp)+,d2
0001181C 4A10                       		tst.b	0(a0)
0001181E 6700                       		beq.s	locret_10BD4
00011820 4EF9 0000 8590             		jmp	(MvSonicOnPtfm2).l
00011826                            ; ===========================================================================
00011826                            
00011826                            locret_10BD4:
00011826 4E75                       		rts	
00011828                            ; ===========================================================================
00011828                            
00011828                            Obj59_Types:
00011828 7000                       		moveq	#0,d0
0001182A 1028 0028                  		move.b	$28(a0),d0
0001182E 0240 000F                  		andi.w	#$F,d0
00011832 D040                       		add.w	d0,d0
00011834 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011838 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001183C                            ; ===========================================================================
0001183C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011840 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011844 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011848 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001184C 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011850                            ; ===========================================================================
00011850                            
00011850                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011850 4E75                       		rts	
00011852                            ; ===========================================================================
00011852                            
00011852                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011852 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011858 6600                       		bne.s	locret_10C0C
0001185A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001185E                            
0001185E                            locret_10C0C:
0001185E 4E75                       		rts	
00011860                            ; ===========================================================================
00011860                            
00011860                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011860 6100 0000                  		bsr.w	Obj59_Move
00011864 3028 0034                  		move.w	$34(a0),d0
00011868 4440                       		neg.w	d0
0001186A D068 0030                  		add.w	$30(a0),d0
0001186E 3140 000C                  		move.w	d0,$C(a0)
00011872 4E75                       		rts	
00011874                            ; ===========================================================================
00011874                            
00011874                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011874 6100 0000                  		bsr.w	Obj59_Move
00011878 3028 0034                  		move.w	$34(a0),d0
0001187C D068 0030                  		add.w	$30(a0),d0
00011880 3140 000C                  		move.w	d0,$C(a0)
00011884 4E75                       		rts	
00011886                            ; ===========================================================================
00011886                            
00011886                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011886 6100 0000                  		bsr.w	Obj59_Move
0001188A 3028 0034                  		move.w	$34(a0),d0
0001188E E240                       		asr.w	#1,d0
00011890 4440                       		neg.w	d0
00011892 D068 0030                  		add.w	$30(a0),d0
00011896 3140 000C                  		move.w	d0,$C(a0)
0001189A 3028 0034                  		move.w	$34(a0),d0
0001189E D068 0032                  		add.w	$32(a0),d0
000118A2 3140 0008                  		move.w	d0,8(a0)
000118A6 4E75                       		rts	
000118A8                            ; ===========================================================================
000118A8                            
000118A8                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000118A8 6100 0000                  		bsr.w	Obj59_Move
000118AC 3028 0034                  		move.w	$34(a0),d0
000118B0 E240                       		asr.w	#1,d0
000118B2 D068 0030                  		add.w	$30(a0),d0
000118B6 3140 000C                  		move.w	d0,$C(a0)
000118BA 3028 0034                  		move.w	$34(a0),d0
000118BE 4440                       		neg.w	d0
000118C0 D068 0032                  		add.w	$32(a0),d0
000118C4 3140 0008                  		move.w	d0,8(a0)
000118C8 4E75                       		rts	
000118CA                            ; ===========================================================================
000118CA                            
000118CA                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000118CA 6100 0000                  		bsr.w	Obj59_Move
000118CE 3028 0034                  		move.w	$34(a0),d0
000118D2 4440                       		neg.w	d0
000118D4 D068 0030                  		add.w	$30(a0),d0
000118D8 3140 000C                  		move.w	d0,$C(a0)
000118DC 4A28 0028                  		tst.b	$28(a0)
000118E0 6700 0000                  		beq.w	loc_10C94
000118E4 4E75                       		rts	
000118E6                            ; ===========================================================================
000118E6                            
000118E6                            loc_10C94:
000118E6 0828 0003 0022             		btst	#3,$22(a0)
000118EC 6700                       		beq.s	Obj59_Delete
000118EE 08E9 0001 0022             		bset	#1,$22(a1)
000118F4 08A9 0003 0022             		bclr	#3,$22(a1)
000118FA 137C 0002 0024             		move.b	#2,$24(a1)
00011900                            
00011900                            Obj59_Delete:
00011900 6000 C9C6                  		bra.w	DeleteObject
00011904                            
00011904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011904                            
00011904                            
00011904                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011904 3028 0038                  		move.w	$38(a0),d0
00011908 4A28 003A                  		tst.b	$3A(a0)
0001190C 6600                       		bne.s	loc_10CC8
0001190E 0C40 0800                  		cmpi.w	#$800,d0
00011912 6400                       		bcc.s	loc_10CD0
00011914 0640 0010                  		addi.w	#$10,d0
00011918 6000                       		bra.s	loc_10CD0
0001191A                            ; ===========================================================================
0001191A                            
0001191A                            loc_10CC8:
0001191A 4A40                       		tst.w	d0
0001191C 6700                       		beq.s	loc_10CD0
0001191E 0440 0010                  		subi.w	#$10,d0
00011922                            
00011922                            loc_10CD0:
00011922 3140 0038                  		move.w	d0,$38(a0)
00011926 48C0                       		ext.l	d0
00011928 E180                       		asl.l	#8,d0
0001192A D0A8 0034                  		add.l	$34(a0),d0
0001192E 2140 0034                  		move.l	d0,$34(a0)
00011932 4840                       		swap	d0
00011934 3428 003C                  		move.w	$3C(a0),d2
00011938 B042                       		cmp.w	d2,d0
0001193A 6300                       		bls.s	loc_10CF0
0001193C 117C 0001 003A             		move.b	#1,$3A(a0)
00011942                            
00011942                            loc_10CF0:
00011942 D442                       		add.w	d2,d2
00011944 B042                       		cmp.w	d2,d0
00011946 6600                       		bne.s	locret_10CFA
00011948 4228 0028                  		clr.b	$28(a0)
0001194C                            
0001194C                            locret_10CFA:
0001194C 4E75                       		rts	
0001194E                            ; End of function Obj59_Move
0001194E                            
0001194E                            ; ===========================================================================
0001194E                            
0001194E                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001194E 5368 003C                  		subq.w	#1,$3C(a0)
00011952 6600                       		bne.s	Obj59_ChkDel
00011954 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001195A 6100 CDB6                  		bsr.w	SingleObjLoad
0001195E 6600                       		bne.s	Obj59_ChkDel
00011960 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011964 3368 0008 0008             		move.w	8(a0),8(a1)
0001196A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011970 137C 000E 0028             		move.b	#$E,$28(a1)
00011976                            
00011976                            Obj59_ChkDel:
00011976 588F                       		addq.l	#4,sp
00011978 3028 0008                  		move.w	8(a0),d0
0001197C 0240 FF80                  		andi.w	#$FF80,d0
00011980 3238 F700                  		move.w	($FFFFF700).w,d1
00011984 0441 0080                  		subi.w	#$80,d1
00011988 0241 FF80                  		andi.w	#$FF80,d1
0001198C 9041                       		sub.w	d1,d0
0001198E 0C40 0280                  		cmpi.w	#$280,d0
00011992 6200 C934                  		bhi.w	DeleteObject
00011996 4E75                       		rts	
00011998                            ; ===========================================================================
00011998                            ; ---------------------------------------------------------------------------
00011998                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011998                            ; ---------------------------------------------------------------------------
00011998                            Map_obj59:
00011998                            	include "_maps\obj59.asm"
00011998                            ; ---------------------------------------------------------------------------
00011998                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011998                            ; ---------------------------------------------------------------------------
00011998 0000                       		dc.w byte_10D4A-Map_obj59
0001199A 03                         byte_10D4A:	dc.b 3
0001199B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000119A0 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000119A5 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000119AA                            		even
000119AA                            		even
000119AA                            
000119AA                            ; ===========================================================================
000119AA                            ; ---------------------------------------------------------------------------
000119AA                            ; Object 5A - platforms	moving in circles (SLZ)
000119AA                            ; ---------------------------------------------------------------------------
000119AA                            
000119AA                            Obj5A:					; XREF: Obj_Index
000119AA 7000                       		moveq	#0,d0
000119AC 1028 0024                  		move.b	$24(a0),d0
000119B0 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000119B4 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000119B8 3028 0032                  		move.w	$32(a0),d0
000119BC 0240 FF80                  		andi.w	#$FF80,d0
000119C0 3238 F700                  		move.w	($FFFFF700).w,d1
000119C4 0441 0080                  		subi.w	#$80,d1
000119C8 0241 FF80                  		andi.w	#$FF80,d1
000119CC 9041                       		sub.w	d1,d0
000119CE 0C40 0280                  		cmpi.w	#$280,d0
000119D2 6200 C8F4                  		bhi.w	DeleteObject
000119D6 6000 C8B4                  		bra.w	DisplaySprite
000119DA                            ; ===========================================================================
000119DA 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000119DC 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000119DE 0000                       		dc.w Obj5A_Action-Obj5A_Index
000119E0                            ; ===========================================================================
000119E0                            
000119E0                            Obj5A_Main:				; XREF: Obj5A_Index
000119E0 5428 0024                  		addq.b	#2,$24(a0)
000119E4 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000119EC 317C 4000 0002             		move.w	#$4000,2(a0)
000119F2 117C 0004 0001             		move.b	#4,1(a0)
000119F8 117C 0004 0018             		move.b	#4,$18(a0)
000119FE 117C 0018 0019             		move.b	#$18,$19(a0)
00011A04 3168 0008 0032             		move.w	8(a0),$32(a0)
00011A0A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011A10                            
00011A10                            Obj5A_Platform:				; XREF: Obj5A_Index
00011A10 7200                       		moveq	#0,d1
00011A12 1228 0019                  		move.b	$19(a0),d1
00011A16 4EB9 0000 7EB2             		jsr	(PlatformObject).l
00011A1C 6000 0000                  		bra.w	Obj5A_Types
00011A20                            ; ===========================================================================
00011A20                            
00011A20                            Obj5A_Action:				; XREF: Obj5A_Index
00011A20 7200                       		moveq	#0,d1
00011A22 1228 0019                  		move.b	$19(a0),d1
00011A26 4EB9 0000 8026             		jsr	(ExitPlatform).l
00011A2C 3F28 0008                  		move.w	8(a0),-(sp)
00011A30 6100 0000                  		bsr.w	Obj5A_Types
00011A34 341F                       		move.w	(sp)+,d2
00011A36 4EF9 0000 8590             		jmp	(MvSonicOnPtfm2).l
00011A3C                            ; ===========================================================================
00011A3C                            
00011A3C                            Obj5A_Types:
00011A3C 7000                       		moveq	#0,d0
00011A3E 1028 0028                  		move.b	$28(a0),d0
00011A42 0240 000C                  		andi.w	#$C,d0
00011A46 E248                       		lsr.w	#1,d0
00011A48 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011A4C 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011A50                            ; ===========================================================================
00011A50 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011A52 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011A54                            ; ===========================================================================
00011A54                            
00011A54                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011A54 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011A58 0401 0050                  		subi.b	#$50,d1
00011A5C 4881                       		ext.w	d1
00011A5E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011A62 0402 0050                  		subi.b	#$50,d2
00011A66 4882                       		ext.w	d2
00011A68 0828 0000 0028             		btst	#0,$28(a0)
00011A6E 6700                       		beq.s	loc_10E24
00011A70 4441                       		neg.w	d1
00011A72 4442                       		neg.w	d2
00011A74                            
00011A74                            loc_10E24:
00011A74 0828 0001 0028             		btst	#1,$28(a0)
00011A7A 6700                       		beq.s	loc_10E30
00011A7C 4441                       		neg.w	d1
00011A7E C342                       		exg	d1,d2
00011A80                            
00011A80                            loc_10E30:
00011A80 D268 0032                  		add.w	$32(a0),d1
00011A84 3141 0008                  		move.w	d1,8(a0)
00011A88 D468 0030                  		add.w	$30(a0),d2
00011A8C 3142 000C                  		move.w	d2,$C(a0)
00011A90 4E75                       		rts	
00011A92                            ; ===========================================================================
00011A92                            
00011A92                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011A92 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011A96 0401 0050                  		subi.b	#$50,d1
00011A9A 4881                       		ext.w	d1
00011A9C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011AA0 0402 0050                  		subi.b	#$50,d2
00011AA4 4882                       		ext.w	d2
00011AA6 0828 0000 0028             		btst	#0,$28(a0)
00011AAC 6700                       		beq.s	loc_10E62
00011AAE 4441                       		neg.w	d1
00011AB0 4442                       		neg.w	d2
00011AB2                            
00011AB2                            loc_10E62:
00011AB2 0828 0001 0028             		btst	#1,$28(a0)
00011AB8 6700                       		beq.s	loc_10E6E
00011ABA 4441                       		neg.w	d1
00011ABC C342                       		exg	d1,d2
00011ABE                            
00011ABE                            loc_10E6E:
00011ABE 4441                       		neg.w	d1
00011AC0 D268 0032                  		add.w	$32(a0),d1
00011AC4 3141 0008                  		move.w	d1,8(a0)
00011AC8 D468 0030                  		add.w	$30(a0),d2
00011ACC 3142 000C                  		move.w	d2,$C(a0)
00011AD0 4E75                       		rts	
00011AD2                            ; ===========================================================================
00011AD2                            ; ---------------------------------------------------------------------------
00011AD2                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011AD2                            ; ---------------------------------------------------------------------------
00011AD2                            Map_obj5A:
00011AD2                            	include "_maps\obj5A.asm"
00011AD2                            ; ---------------------------------------------------------------------------
00011AD2                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011AD2                            ; ---------------------------------------------------------------------------
00011AD2 0000                       		dc.w byte_10E84-Map_obj5A
00011AD4 02                         byte_10E84:	dc.b 2
00011AD5 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011ADA F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011AE0 00                         		even
00011AE0 00                         		even
00011AE0                            
00011AE0                            ; ===========================================================================
00011AE0                            ; ---------------------------------------------------------------------------
00011AE0                            ; Object 5B - blocks that form a staircase (SLZ)
00011AE0                            ; ---------------------------------------------------------------------------
00011AE0                            
00011AE0                            Obj5B:					; XREF: Obj_Index
00011AE0 7000                       		moveq	#0,d0
00011AE2 1028 0024                  		move.b	$24(a0),d0
00011AE6 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011AEA 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011AEE 3028 0030                  		move.w	$30(a0),d0
00011AF2 0240 FF80                  		andi.w	#$FF80,d0
00011AF6 3238 F700                  		move.w	($FFFFF700).w,d1
00011AFA 0441 0080                  		subi.w	#$80,d1
00011AFE 0241 FF80                  		andi.w	#$FF80,d1
00011B02 9041                       		sub.w	d1,d0
00011B04 0C40 0280                  		cmpi.w	#$280,d0
00011B08 6200 C7BE                  		bhi.w	DeleteObject
00011B0C 6000 C77E                  		bra.w	DisplaySprite
00011B10                            ; ===========================================================================
00011B10 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011B12 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011B14 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011B16                            ; ===========================================================================
00011B16                            
00011B16                            Obj5B_Main:				; XREF: Obj5B_Index
00011B16 5428 0024                  		addq.b	#2,$24(a0)
00011B1A 7638                       		moveq	#$38,d3
00011B1C 7801                       		moveq	#1,d4
00011B1E 0828 0000 0022             		btst	#0,$22(a0)
00011B24 6700                       		beq.s	loc_10EDA
00011B26 763B                       		moveq	#$3B,d3
00011B28 78FF                       		moveq	#-1,d4
00011B2A                            
00011B2A                            loc_10EDA:
00011B2A 3428 0008                  		move.w	8(a0),d2
00011B2E 2248                       		movea.l	a0,a1
00011B30 7203                       		moveq	#3,d1
00011B32 6000                       		bra.s	Obj5B_MakeBlocks
00011B34                            ; ===========================================================================
00011B34                            
00011B34                            Obj5B_Loop:
00011B34 6100 CBF2                  		bsr.w	SingleObjLoad2
00011B38 6600 0000                  		bne.w	Obj5B_Move
00011B3C 137C 0004 0024             		move.b	#4,$24(a1)
00011B42                            
00011B42                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011B42 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011B46 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011B4E 337C 4000 0002             		move.w	#$4000,2(a1)
00011B54 137C 0004 0001             		move.b	#4,1(a1)
00011B5A 137C 0003 0018             		move.b	#3,$18(a1)
00011B60 137C 0010 0019             		move.b	#$10,$19(a1)
00011B66 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011B6C 3342 0008                  		move.w	d2,8(a1)
00011B70 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011B76 3368 0008 0030             		move.w	8(a0),$30(a1)
00011B7C 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011B82 0642 0020                  		addi.w	#$20,d2
00011B86 1343 0037                  		move.b	d3,$37(a1)
00011B8A 2348 003C                  		move.l	a0,$3C(a1)
00011B8E D604                       		add.b	d4,d3
00011B90 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011B94                            
00011B94                            Obj5B_Move:				; XREF: Obj5B_Index
00011B94 7000                       		moveq	#0,d0
00011B96 1028 0028                  		move.b	$28(a0),d0
00011B9A 0240 0007                  		andi.w	#7,d0
00011B9E D040                       		add.w	d0,d0
00011BA0 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011BA4 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011BA8                            
00011BA8                            Obj5B_Solid:				; XREF: Obj5B_Index
00011BA8 2468 003C                  		movea.l	$3C(a0),a2
00011BAC 7000                       		moveq	#0,d0
00011BAE 1028 0037                  		move.b	$37(a0),d0
00011BB2 1032 0000                  		move.b	(a2,d0.w),d0
00011BB6 D068 0032                  		add.w	$32(a0),d0
00011BBA 3140 000C                  		move.w	d0,$C(a0)
00011BBE 7200                       		moveq	#0,d1
00011BC0 1228 0019                  		move.b	$19(a0),d1
00011BC4 0641 000B                  		addi.w	#$B,d1
00011BC8 343C 0010                  		move.w	#$10,d2
00011BCC 363C 0011                  		move.w	#$11,d3
00011BD0 3828 0008                  		move.w	8(a0),d4
00011BD4 6100 EA80                  		bsr.w	SolidObject
00011BD8 4A04                       		tst.b	d4
00011BDA 6A00                       		bpl.s	loc_10F92
00011BDC 1544 0036                  		move.b	d4,$36(a2)
00011BE0                            
00011BE0                            loc_10F92:
00011BE0 0828 0003 0022             		btst	#3,$22(a0)
00011BE6 6700                       		beq.s	locret_10FA0
00011BE8 157C 0001 0036             		move.b	#1,$36(a2)
00011BEE                            
00011BEE                            locret_10FA0:
00011BEE 4E75                       		rts	
00011BF0                            ; ===========================================================================
00011BF0 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011BF2 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011BF4 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011BF6 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011BF8                            ; ===========================================================================
00011BF8                            
00011BF8                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011BF8 4A68 0034                  		tst.w	$34(a0)
00011BFC 6600                       		bne.s	loc_10FC0
00011BFE 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011C04 6600                       		bne.s	locret_10FBE
00011C06 317C 001E 0034             		move.w	#$1E,$34(a0)
00011C0C                            
00011C0C                            locret_10FBE:
00011C0C 4E75                       		rts	
00011C0E                            ; ===========================================================================
00011C0E                            
00011C0E                            loc_10FC0:
00011C0E 5368 0034                  		subq.w	#1,$34(a0)
00011C12 66F8                       		bne.s	locret_10FBE
00011C14 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011C18 4E75                       		rts	
00011C1A                            ; ===========================================================================
00011C1A                            
00011C1A                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011C1A 4A68 0034                  		tst.w	$34(a0)
00011C1E 6600                       		bne.s	loc_10FE0
00011C20 4A28 0036                  		tst.b	$36(a0)
00011C24 6A00                       		bpl.s	locret_10FDE
00011C26 317C 003C 0034             		move.w	#$3C,$34(a0)
00011C2C                            
00011C2C                            locret_10FDE:
00011C2C 4E75                       		rts	
00011C2E                            ; ===========================================================================
00011C2E                            
00011C2E                            loc_10FE0:
00011C2E 5368 0034                  		subq.w	#1,$34(a0)
00011C32 6600                       		bne.s	loc_10FEC
00011C34 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011C38 4E75                       		rts	
00011C3A                            ; ===========================================================================
00011C3A                            
00011C3A                            loc_10FEC:
00011C3A 43E8 0038                  		lea	$38(a0),a1
00011C3E 3028 0034                  		move.w	$34(a0),d0
00011C42 E408                       		lsr.b	#2,d0
00011C44 0200 0001                  		andi.b	#1,d0
00011C48 12C0                       		move.b	d0,(a1)+
00011C4A 0A00 0001                  		eori.b	#1,d0
00011C4E 12C0                       		move.b	d0,(a1)+
00011C50 0A00 0001                  		eori.b	#1,d0
00011C54 12C0                       		move.b	d0,(a1)+
00011C56 0A00 0001                  		eori.b	#1,d0
00011C5A 12C0                       		move.b	d0,(a1)+
00011C5C 4E75                       		rts	
00011C5E                            ; ===========================================================================
00011C5E                            
00011C5E                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011C5E 43E8 0038                  		lea	$38(a0),a1
00011C62 0C11 0080                  		cmpi.b	#$80,(a1)
00011C66 6700                       		beq.s	locret_11038
00011C68 5211                       		addq.b	#1,(a1)
00011C6A 7200                       		moveq	#0,d1
00011C6C 1219                       		move.b	(a1)+,d1
00011C6E 4841                       		swap	d1
00011C70 E289                       		lsr.l	#1,d1
00011C72 2401                       		move.l	d1,d2
00011C74 E289                       		lsr.l	#1,d1
00011C76 2601                       		move.l	d1,d3
00011C78 D682                       		add.l	d2,d3
00011C7A 4841                       		swap	d1
00011C7C 4842                       		swap	d2
00011C7E 4843                       		swap	d3
00011C80 12C3                       		move.b	d3,(a1)+
00011C82 12C2                       		move.b	d2,(a1)+
00011C84 12C1                       		move.b	d1,(a1)+
00011C86                            
00011C86                            locret_11038:
00011C86 4E75                       		rts	
00011C88 4E75                       		rts	
00011C8A                            ; ===========================================================================
00011C8A                            ; ---------------------------------------------------------------------------
00011C8A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011C8A                            ; ---------------------------------------------------------------------------
00011C8A                            Map_obj5B:
00011C8A                            	include "_maps\obj5B.asm"
00011C8A                            ; ---------------------------------------------------------------------------
00011C8A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011C8A                            ; ---------------------------------------------------------------------------
00011C8A 0000                       		dc.w byte_1103E-Map_obj5B
00011C8C 01                         byte_1103E:	dc.b 1
00011C8D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011C92                            		even
00011C92                            		even
00011C92                            
00011C92                            ; ===========================================================================
00011C92                            ; ---------------------------------------------------------------------------
00011C92                            ; Object 5C - metal girders in foreground (SLZ)
00011C92                            ; ---------------------------------------------------------------------------
00011C92                            
00011C92                            Obj5C:					; XREF: Obj_Index
00011C92 7000                       		moveq	#0,d0
00011C94 1028 0024                  		move.b	$24(a0),d0
00011C98 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011C9C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011CA0                            ; ===========================================================================
00011CA0 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011CA2 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011CA4                            ; ===========================================================================
00011CA4                            
00011CA4                            Obj5C_Main:				; XREF: Obj5C_Index
00011CA4 5428 0024                  		addq.b	#2,$24(a0)
00011CA8 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011CB0 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011CB6 117C 0010 0019             		move.b	#$10,$19(a0)
00011CBC                            
00011CBC                            Obj5C_Display:				; XREF: Obj5C_Index
00011CBC 2238 F700                  		move.l	($FFFFF700).w,d1
00011CC0 D281                       		add.l	d1,d1
00011CC2 4841                       		swap	d1
00011CC4 4441                       		neg.w	d1
00011CC6 3141 0008                  		move.w	d1,8(a0)
00011CCA 2238 F704                  		move.l	($FFFFF704).w,d1
00011CCE D281                       		add.l	d1,d1
00011CD0 4841                       		swap	d1
00011CD2 0241 003F                  		andi.w	#$3F,d1
00011CD6 4441                       		neg.w	d1
00011CD8 0641 0100                  		addi.w	#$100,d1
00011CDC 3141 000A                  		move.w	d1,$A(a0)
00011CE0 6000 C5AA                  		bra.w	DisplaySprite
00011CE4                            ; ===========================================================================
00011CE4                            ; ---------------------------------------------------------------------------
00011CE4                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011CE4                            ; ---------------------------------------------------------------------------
00011CE4                            Map_obj5C:
00011CE4                            	include "_maps\obj5C.asm"
00011CE4                            ; ---------------------------------------------------------------------------
00011CE4                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011CE4                            ; ---------------------------------------------------------------------------
00011CE4 0000                       		dc.w byte_11098-Map_obj5C
00011CE6 09                         byte_11098:	dc.b 9
00011CE7 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011CEC A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011CF1 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011CF6 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011CFB 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011D00 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011D05 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011D0A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011D0F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011D14                            		even
00011D14                            		even
00011D14                            
00011D14                            ; ===========================================================================
00011D14                            ; ---------------------------------------------------------------------------
00011D14                            ; Object 1B - water surface (LZ)
00011D14                            ; ---------------------------------------------------------------------------
00011D14                            
00011D14                            Obj1B:					; XREF: Obj_Index
00011D14 7000                       		moveq	#0,d0
00011D16 1028 0024                  		move.b	$24(a0),d0
00011D1A 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011D1E 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011D22                            ; ===========================================================================
00011D22 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011D24 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011D26                            ; ===========================================================================
00011D26                            
00011D26                            Obj1B_Main:				; XREF: Obj1B_Index
00011D26 5428 0024                  		addq.b	#2,$24(a0)
00011D2A 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011D32 317C C300 0002             		move.w	#$C300,2(a0)
00011D38 117C 0004 0001             		move.b	#4,1(a0)
00011D3E 117C 0080 0019             		move.b	#$80,$19(a0)
00011D44 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D4A                            
00011D4A                            Obj1B_Action:				; XREF: Obj1B_Index
00011D4A 3238 F700                  		move.w	($FFFFF700).w,d1
00011D4E 0241 FFE0                  		andi.w	#$FFE0,d1
00011D52 D268 0030                  		add.w	$30(a0),d1
00011D56 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011D5C 6700                       		beq.s	loc_11114
00011D5E 0641 0020                  		addi.w	#$20,d1
00011D62                            
00011D62                            loc_11114:
00011D62 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011D66 3238 F646                  		move.w	($FFFFF646).w,d1
00011D6A 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011D6E 4A28 0032                  		tst.b	$32(a0)
00011D72 6600                       		bne.s	Obj1B_Animate
00011D74 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011D7A 6700                       		beq.s	loc_1114A	; if not, branch
00011D7C 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011D80 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011D86 6000                       		bra.s	Obj1B_Display
00011D88                            ; ===========================================================================
00011D88                            
00011D88                            Obj1B_Animate:				; XREF: loc_11114
00011D88 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011D8C 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011D8E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011D94 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011D98                            
00011D98                            loc_1114A:				; XREF: loc_11114
00011D98 5328 001E                  		subq.b	#1,$1E(a0)
00011D9C 6A00                       		bpl.s	Obj1B_Display
00011D9E 117C 0007 001E             		move.b	#7,$1E(a0)
00011DA4 5228 001A                  		addq.b	#1,$1A(a0)
00011DA8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011DAE 6500                       		bcs.s	Obj1B_Display
00011DB0 117C 0000 001A             		move.b	#0,$1A(a0)
00011DB6                            
00011DB6                            Obj1B_Display:
00011DB6 6000 C4D4                  		bra.w	DisplaySprite
00011DBA                            ; ===========================================================================
00011DBA                            ; ---------------------------------------------------------------------------
00011DBA                            ; Sprite mappings - water surface (LZ)
00011DBA                            ; ---------------------------------------------------------------------------
00011DBA                            Map_obj1B:
00011DBA                            	include "_maps\obj1B.asm"
00011DBA                            ; ---------------------------------------------------------------------------
00011DBA                            ; Sprite mappings - water surface (LZ)
00011DBA                            ; ---------------------------------------------------------------------------
00011DBA 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011DBE 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011DC2 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011DC6 03                         byte_11178:	dc.b 3
00011DC7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011DCC FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011DD1 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011DD6 03                         byte_11188:	dc.b 3
00011DD7 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011DDC FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011DE1 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011DE6 03                         byte_11198:	dc.b 3
00011DE7 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011DEC FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011DF1 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011DF6 06                         byte_111A8:	dc.b 6
00011DF7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011DFC FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011E01 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011E06 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011E0B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011E10 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011E15 06                         byte_111C7:	dc.b 6
00011E16 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011E1B FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011E20 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011E25 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011E2A FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011E2F FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011E34 06                         byte_111E6:	dc.b 6
00011E35 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011E3A FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011E3F FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011E44 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011E49 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011E4E FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011E54 00                         		even
00011E54 00                         		even
00011E54                            
00011E54                            ; ===========================================================================
00011E54                            ; ---------------------------------------------------------------------------
00011E54                            ; Object 0B - pole that	breaks (LZ)
00011E54                            ; ---------------------------------------------------------------------------
00011E54                            
00011E54                            Obj0B:					; XREF: Obj_Index
00011E54 7000                       		moveq	#0,d0
00011E56 1028 0024                  		move.b	$24(a0),d0
00011E5A 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011E5E 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011E62                            ; ===========================================================================
00011E62 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011E64 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011E66 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011E68                            ; ===========================================================================
00011E68                            
00011E68                            Obj0B_Main:				; XREF: Obj0B_Index
00011E68 5428 0024                  		addq.b	#2,$24(a0)
00011E6C 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011E74 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011E7A 117C 0004 0001             		move.b	#4,1(a0)
00011E80 117C 0008 0019             		move.b	#8,$19(a0)
00011E86 117C 0004 0018             		move.b	#4,$18(a0)
00011E8C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011E92 7000                       		moveq	#0,d0
00011E94 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E98 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011E9C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011EA0                            
00011EA0                            Obj0B_Action:				; XREF: Obj0B_Index
00011EA0 4A28 0032                  		tst.b	$32(a0)
00011EA4 6700                       		beq.s	Obj0B_Grab
00011EA6 4A68 0030                  		tst.w	$30(a0)
00011EAA 6700                       		beq.s	Obj0B_MoveUp
00011EAC 5368 0030                  		subq.w	#1,$30(a0)
00011EB0 6600                       		bne.s	Obj0B_MoveUp
00011EB2 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011EB8 6000                       		bra.s	Obj0B_Release
00011EBA                            ; ===========================================================================
00011EBA                            
00011EBA                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011EBA 43F8 D000                  		lea	($FFFFD000).w,a1
00011EBE 3028 000C                  		move.w	$C(a0),d0
00011EC2 0440 0018                  		subi.w	#$18,d0
00011EC6 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011ECC 6700                       		beq.s	Obj0B_MoveDown
00011ECE 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011ED2 B069 000C                  		cmp.w	$C(a1),d0
00011ED6 6500                       		bcs.s	Obj0B_MoveDown
00011ED8 3340 000C                  		move.w	d0,$C(a1)
00011EDC                            
00011EDC                            Obj0B_MoveDown:
00011EDC 0640 0024                  		addi.w	#$24,d0
00011EE0 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011EE6 6700                       		beq.s	Obj0B_LetGo
00011EE8 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011EEC B069 000C                  		cmp.w	$C(a1),d0
00011EF0 6400                       		bcc.s	Obj0B_LetGo
00011EF2 3340 000C                  		move.w	d0,$C(a1)
00011EF6                            
00011EF6                            Obj0B_LetGo:
00011EF6 1038 F603                  		move.b	($FFFFF603).w,d0
00011EFA 0240 0070                  		andi.w	#$70,d0
00011EFE 6700                       		beq.s	Obj0B_Display
00011F00                            
00011F00                            Obj0B_Release:				; XREF: Obj0B_Action
00011F00 4228 0020                  		clr.b	$20(a0)
00011F04 5428 0024                  		addq.b	#2,$24(a0)
00011F08 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011F0C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011F10 4228 0032                  		clr.b	$32(a0)
00011F14 6000                       		bra.s	Obj0B_Display
00011F16                            ; ===========================================================================
00011F16                            
00011F16                            Obj0B_Grab:				; XREF: Obj0B_Action
00011F16 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011F1A 6700                       		beq.s	Obj0B_Display	; if not, branch
00011F1C 43F8 D000                  		lea	($FFFFD000).w,a1
00011F20 3028 0008                  		move.w	8(a0),d0
00011F24 0640 0014                  		addi.w	#$14,d0
00011F28 B069 0008                  		cmp.w	8(a1),d0
00011F2C 6400                       		bcc.s	Obj0B_Display
00011F2E 4228 0021                  		clr.b	$21(a0)
00011F32 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011F38 6400                       		bcc.s	Obj0B_Display
00011F3A 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011F3E 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011F42 3028 0008                  		move.w	8(a0),d0
00011F46 0640 0014                  		addi.w	#$14,d0
00011F4A 3340 0008                  		move.w	d0,8(a1)
00011F4E 08A9 0000 0022             		bclr	#0,$22(a1)
00011F54 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011F5A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011F60 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011F66 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011F6C                            
00011F6C                            Obj0B_Display:				; XREF: Obj0B_Index
00011F6C 6000 E3C0                  		bra.w	MarkObjGone
00011F70                            ; ===========================================================================
00011F70                            ; ---------------------------------------------------------------------------
00011F70                            ; Sprite mappings - pole that breaks (LZ)
00011F70                            ; ---------------------------------------------------------------------------
00011F70                            Map_obj0B:
00011F70                            	include "_maps\obj0B.asm"
00011F70                            ; ---------------------------------------------------------------------------
00011F70                            ; Sprite mappings - pole that breaks (LZ)
00011F70                            ; ---------------------------------------------------------------------------
00011F70 0000                       		dc.w byte_11326-Map_obj0B
00011F72 0000                       		dc.w byte_11331-Map_obj0B
00011F74 02                         byte_11326:	dc.b 2			; normal pole
00011F75 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011F7A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011F7F 04                         byte_11331:	dc.b 4			; broken pole
00011F80 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011F85 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011F8A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011F8F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011F94                            		even
00011F94                            		even
00011F94                            
00011F94                            ; ===========================================================================
00011F94                            ; ---------------------------------------------------------------------------
00011F94                            ; Object 0C - flapping door (LZ)
00011F94                            ; ---------------------------------------------------------------------------
00011F94                            
00011F94                            Obj0C:					; XREF: Obj_Index
00011F94 7000                       		moveq	#0,d0
00011F96 1028 0024                  		move.b	$24(a0),d0
00011F9A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011F9E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011FA2                            ; ===========================================================================
00011FA2 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011FA4 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011FA6                            ; ===========================================================================
00011FA6                            
00011FA6                            Obj0C_Main:				; XREF: Obj0C_Index
00011FA6 5428 0024                  		addq.b	#2,$24(a0)
00011FAA 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011FB2 317C 4328 0002             		move.w	#$4328,2(a0)
00011FB8 0028 0004 0001             		ori.b	#4,1(a0)
00011FBE 117C 0028 0019             		move.b	#$28,$19(a0)
00011FC4 7000                       		moveq	#0,d0
00011FC6 1028 0028                  		move.b	$28(a0),d0	; get object type
00011FCA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011FCE 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011FD2                            
00011FD2                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011FD2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FD6 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011FD8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011FDE 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011FE4 4A28 0001                  		tst.b	1(a0)
00011FE8 6A00                       		bpl.s	Obj0C_Solid
00011FEA 303C 00BB                  		move.w	#$BB,d0
00011FEE 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play door sound
00011FF4                            
00011FF4                            Obj0C_Solid:
00011FF4 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011FFA 6100 92E8                  		bsr.w	AnimateSprite
00011FFE 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012002 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012006 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012008 3038 D008                  		move.w	($FFFFD008).w,d0
0001200C B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012010 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012012 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012018 323C 0013                  		move.w	#$13,d1
0001201C 343C 0020                  		move.w	#$20,d2
00012020 3602                       		move.w	d2,d3
00012022 5243                       		addq.w	#1,d3
00012024 3828 0008                  		move.w	8(a0),d4
00012028 6100 E62C                  		bsr.w	SolidObject	; make the door	solid
0001202C                            
0001202C                            Obj0C_Display:
0001202C 6000 E300                  		bra.w	MarkObjGone
00012030                            ; ===========================================================================
00012030                            Ani_obj0C:
00012030                            	include "_anim\obj0C.asm"
00012030                            ; ---------------------------------------------------------------------------
00012030                            ; Animation script - flapping door (LZ)
00012030                            ; ---------------------------------------------------------------------------
00012030 0000                       		dc.w byte_113E6-Ani_obj0C
00012032 0000                       		dc.w byte_113EC-Ani_obj0C
00012034 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001203A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012040                            		even
00012040                            		even
00012040                            
00012040                            ; ---------------------------------------------------------------------------
00012040                            ; Sprite mappings - flapping door (LZ)
00012040                            ; ---------------------------------------------------------------------------
00012040                            Map_obj0C:
00012040                            	include "_maps\obj0C.asm"
00012040                            ; ---------------------------------------------------------------------------
00012040                            ; Sprite mappings - flapping door (LZ)
00012040                            ; ---------------------------------------------------------------------------
00012040 0000                       		dc.w byte_113F8-Map_obj0C
00012042 0000                       		dc.w byte_11403-Map_obj0C
00012044 0000                       		dc.w byte_1140E-Map_obj0C
00012046 02                         byte_113F8:	dc.b 2
00012047 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001204C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012051 02                         byte_11403:	dc.b 2
00012052 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012057 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001205C 02                         byte_1140E:	dc.b 2
0001205D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012062 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012068 00                         		even
00012068 00                         		even
00012068                            
00012068                            ; ===========================================================================
00012068                            ; ---------------------------------------------------------------------------
00012068                            ; Object 71 - invisible	solid blocks
00012068                            ; ---------------------------------------------------------------------------
00012068                            
00012068                            Obj71:					; XREF: Obj_Index
00012068 7000                       		moveq	#0,d0
0001206A 1028 0024                  		move.b	$24(a0),d0
0001206E 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012072 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012076                            ; ===========================================================================
00012076 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012078 0000                       		dc.w Obj71_Solid-Obj71_Index
0001207A                            ; ===========================================================================
0001207A                            
0001207A                            Obj71_Main:				; XREF: Obj71_Index
0001207A 5428 0024                  		addq.b	#2,$24(a0)
0001207E 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012086 317C 8680 0002             		move.w	#$8680,2(a0)
0001208C 0028 0004 0001             		ori.b	#4,1(a0)
00012092 1028 0028                  		move.b	$28(a0),d0	; get object type
00012096 1200                       		move.b	d0,d1
00012098 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001209C 0640 0010                  		addi.w	#$10,d0
000120A0 E248                       		lsr.w	#1,d0
000120A2 1140 0019                  		move.b	d0,$19(a0)	; set object width
000120A6 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000120AA 5241                       		addq.w	#1,d1
000120AC E749                       		lsl.w	#3,d1
000120AE 1141 0016                  		move.b	d1,$16(a0)	; set object height
000120B2                            
000120B2                            Obj71_Solid:				; XREF: Obj71_Index
000120B2 6100 C452                  		bsr.w	ChkObjOnScreen
000120B6 6600                       		bne.s	Obj71_ChkDel
000120B8 7200                       		moveq	#0,d1
000120BA 1228 0019                  		move.b	$19(a0),d1
000120BE 0641 000B                  		addi.w	#$B,d1
000120C2 7400                       		moveq	#0,d2
000120C4 1428 0016                  		move.b	$16(a0),d2
000120C8 3602                       		move.w	d2,d3
000120CA 5243                       		addq.w	#1,d3
000120CC 3828 0008                  		move.w	8(a0),d4
000120D0 6100 E5CC                  		bsr.w	SolidObject71
000120D4                            
000120D4                            Obj71_ChkDel:
000120D4 3028 0008                  		move.w	8(a0),d0
000120D8 0240 FF80                  		andi.w	#$FF80,d0
000120DC 3238 F700                  		move.w	($FFFFF700).w,d1
000120E0 0441 0080                  		subi.w	#$80,d1
000120E4 0241 FF80                  		andi.w	#$FF80,d1
000120E8 9041                       		sub.w	d1,d0
000120EA 0C40 0280                  		cmpi.w	#$280,d0
000120EE 6200                       		bhi.s	Obj71_Delete
000120F0 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000120F4 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000120F6 4EFA C194                  		jmp	DisplaySprite	; if yes, display the object
000120FA                            ; ===========================================================================
000120FA                            
000120FA                            Obj71_NoDisplay:
000120FA 4E75                       		rts	
000120FC                            ; ===========================================================================
000120FC                            
000120FC                            Obj71_Delete:
000120FC 4EFA C1CA                  		jmp	DeleteObject
00012100                            ; ===========================================================================
00012100                            ; ---------------------------------------------------------------------------
00012100                            ; Sprite mappings - invisible solid blocks
00012100                            ; ---------------------------------------------------------------------------
00012100                            Map_obj71:
00012100                            	include "_maps\obj71.asm"
00012100                            ; ---------------------------------------------------------------------------
00012100                            ; Sprite mappings - invisible solid blocks
00012100                            ; ---------------------------------------------------------------------------
00012100 0000                       		dc.w byte_114BC-Map_obj71
00012102 0000                       		dc.w byte_114D1-Map_obj71
00012104 0000                       		dc.w byte_114E6-Map_obj71
00012106 04                         byte_114BC:	dc.b 4
00012107 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
0001210C F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012111 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012116 0005 0018 00               		dc.b 0,	5, 0, $18, 0
0001211B 04                         byte_114D1:	dc.b 4
0001211C E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012121 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012126 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0001212B 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012130 04                         byte_114E6:	dc.b 4
00012131 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012136 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0001213B 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012140 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012146 00                         		even
00012146 00                         		even
00012146                            
00012146                            ; ===========================================================================
00012146                            ; ---------------------------------------------------------------------------
00012146                            ; Object 5D - fans (SLZ)
00012146                            ; ---------------------------------------------------------------------------
00012146                            
00012146                            Obj5D:					; XREF: Obj_Index
00012146 7000                       		moveq	#0,d0
00012148 1028 0024                  		move.b	$24(a0),d0
0001214C 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012150 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012154                            ; ===========================================================================
00012154 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012156 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012158                            ; ===========================================================================
00012158                            
00012158                            Obj5D_Main:				; XREF: Obj5D_Index
00012158 5428 0024                  		addq.b	#2,$24(a0)
0001215C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012164 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001216A 0028 0004 0001             		ori.b	#4,1(a0)
00012170 117C 0010 0019             		move.b	#$10,$19(a0)
00012176 117C 0004 0018             		move.b	#4,$18(a0)
0001217C                            
0001217C                            Obj5D_Delay:				; XREF: Obj5D_Index
0001217C 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012182 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012184 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012188 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001218A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012190 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012196 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012198 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001219E                            
0001219E                            Obj5D_Blow:
0001219E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000121A2 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000121A6 43F8 D000                  		lea	($FFFFD000).w,a1
000121AA 3029 0008                  		move.w	8(a1),d0
000121AE 9068 0008                  		sub.w	8(a0),d0
000121B2 0828 0000 0022             		btst	#0,$22(a0)
000121B8 6600                       		bne.s	Obj5D_ChkSonic
000121BA 4440                       		neg.w	d0
000121BC                            
000121BC                            Obj5D_ChkSonic:
000121BC 0640 0050                  		addi.w	#$50,d0
000121C0 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000121C4 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000121C6 3229 000C                  		move.w	$C(a1),d1
000121CA 0641 0060                  		addi.w	#$60,d1
000121CE 9268 000C                  		sub.w	$C(a0),d1
000121D2 6500                       		bcs.s	Obj5D_Animate
000121D4 0C41 0070                  		cmpi.w	#$70,d1
000121D8 6400                       		bcc.s	Obj5D_Animate
000121DA 0440 0050                  		subi.w	#$50,d0
000121DE 6400                       		bcc.s	loc_1159A
000121E0 4640                       		not.w	d0
000121E2 D040                       		add.w	d0,d0
000121E4                            
000121E4                            loc_1159A:
000121E4 0640 0060                  		addi.w	#$60,d0
000121E8 0828 0000 0022             		btst	#0,$22(a0)
000121EE 6600                       		bne.s	loc_115A8
000121F0 4440                       		neg.w	d0
000121F2                            
000121F2                            loc_115A8:
000121F2 4400                       		neg.b	d0
000121F4 E840                       		asr.w	#4,d0
000121F6 0828 0000 0028             		btst	#0,$28(a0)
000121FC 6700                       		beq.s	Obj5D_MoveSonic
000121FE 4440                       		neg.w	d0
00012200                            
00012200                            Obj5D_MoveSonic:
00012200 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00012204                            
00012204                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00012204 5328 001E                  		subq.b	#1,$1E(a0)
00012208 6A00                       		bpl.s	Obj5D_ChkDel
0001220A 117C 0000 001E             		move.b	#0,$1E(a0)
00012210 5228 001B                  		addq.b	#1,$1B(a0)
00012214 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
0001221A 6500                       		bcs.s	loc_115D8
0001221C 117C 0000 001B             		move.b	#0,$1B(a0)
00012222                            
00012222                            loc_115D8:
00012222 7000                       		moveq	#0,d0
00012224 0828 0000 0028             		btst	#0,$28(a0)
0001222A 6700                       		beq.s	loc_115E4
0001222C 7002                       		moveq	#2,d0
0001222E                            
0001222E                            loc_115E4:
0001222E D028 001B                  		add.b	$1B(a0),d0
00012232 1140 001A                  		move.b	d0,$1A(a0)
00012236                            
00012236                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012236 6100 C054                  		bsr.w	DisplaySprite
0001223A 3028 0008                  		move.w	8(a0),d0
0001223E 0240 FF80                  		andi.w	#$FF80,d0
00012242 3238 F700                  		move.w	($FFFFF700).w,d1
00012246 0441 0080                  		subi.w	#$80,d1
0001224A 0241 FF80                  		andi.w	#$FF80,d1
0001224E 9041                       		sub.w	d1,d0
00012250 0C40 0280                  		cmpi.w	#$280,d0
00012254 6200 C072                  		bhi.w	DeleteObject
00012258 4E75                       		rts	
0001225A                            ; ===========================================================================
0001225A                            ; ---------------------------------------------------------------------------
0001225A                            ; Sprite mappings - fans (SLZ)
0001225A                            ; ---------------------------------------------------------------------------
0001225A                            Map_obj5D:
0001225A                            	include "_maps\obj5D.asm"
0001225A                            ; ---------------------------------------------------------------------------
0001225A                            ; Sprite mappings - fans (SLZ)
0001225A                            ; ---------------------------------------------------------------------------
0001225A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001225E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012262 0000                       		dc.w byte_1161A-Map_obj5D
00012264 02                         byte_1161A:	dc.b 2
00012265 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001226A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001226F 02                         byte_11625:	dc.b 2
00012270 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012275 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001227A 02                         byte_11630:	dc.b 2
0001227B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012280 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012286 00                         		even
00012286 00                         		even
00012286                            
00012286                            ; ===========================================================================
00012286                            ; ---------------------------------------------------------------------------
00012286                            ; Object 5E - seesaws (SLZ)
00012286                            ; ---------------------------------------------------------------------------
00012286                            
00012286                            Obj5E:					; XREF: Obj_Index
00012286 7000                       		moveq	#0,d0
00012288 1028 0024                  		move.b	$24(a0),d0
0001228C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012290 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012294 3028 0030                  		move.w	$30(a0),d0
00012298 0240 FF80                  		andi.w	#$FF80,d0
0001229C 3238 F700                  		move.w	($FFFFF700).w,d1
000122A0 0441 0080                  		subi.w	#$80,d1
000122A4 0241 FF80                  		andi.w	#$FF80,d1
000122A8 9041                       		sub.w	d1,d0
000122AA 6B00 C01C                  		bmi.w	DeleteObject
000122AE 0C40 0280                  		cmpi.w	#$280,d0
000122B2 6200 C014                  		bhi.w	DeleteObject
000122B6 6000 BFD4                  		bra.w	DisplaySprite
000122BA                            ; ===========================================================================
000122BA 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000122BC 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000122BE 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000122C0 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000122C2 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000122C4 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000122C6                            ; ===========================================================================
000122C6                            
000122C6                            Obj5E_Main:				; XREF: Obj5E_Index
000122C6 5428 0024                  		addq.b	#2,$24(a0)
000122CA 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000122D2 317C 0374 0002             		move.w	#$374,2(a0)
000122D8 0028 0004 0001             		ori.b	#4,1(a0)
000122DE 117C 0004 0018             		move.b	#4,$18(a0)
000122E4 117C 0030 0019             		move.b	#$30,$19(a0)
000122EA 3168 0008 0030             		move.w	8(a0),$30(a0)
000122F0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000122F4 6600                       		bne.s	loc_116D2	; if not, branch
000122F6 6100 C430                  		bsr.w	SingleObjLoad2
000122FA 6600                       		bne.s	loc_116D2
000122FC 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00012300 5C29 0024                  		addq.b	#6,$24(a1)
00012304 3368 0008 0008             		move.w	8(a0),8(a1)
0001230A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012310 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012316 2348 003C                  		move.l	a0,$3C(a1)
0001231A                            
0001231A                            loc_116D2:
0001231A 0828 0000 0022             		btst	#0,$22(a0)
00012320 6700                       		beq.s	loc_116E0
00012322 117C 0002 001A             		move.b	#2,$1A(a0)
00012328                            
00012328                            loc_116E0:
00012328 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001232E                            
0001232E                            Obj5E_Slope:				; XREF: Obj5E_Index
0001232E 1228 003A                  		move.b	$3A(a0),d1
00012332 6100 0000                  		bsr.w	loc_11766
00012336 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001233C 0828 0000 001A             		btst	#0,$1A(a0)
00012342 6700                       		beq.s	loc_11702
00012344 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001234A                            
0001234A                            loc_11702:
0001234A 43F8 D000                  		lea	($FFFFD000).w,a1
0001234E 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012354 323C 0030                  		move.w	#$30,d1
00012358 4EB9 0000 7F86             		jsr	(SlopeObject).l
0001235E 4E75                       		rts	
00012360                            ; ===========================================================================
00012360                            
00012360                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012360 6100 0000                  		bsr.w	loc_1174A
00012364 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001236A 0828 0000 001A             		btst	#0,$1A(a0)
00012370 6700                       		beq.s	loc_11730
00012372 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012378                            
00012378                            loc_11730:
00012378 323C 0030                  		move.w	#$30,d1
0001237C 4EB9 0000 8026             		jsr	(ExitPlatform).l
00012382 323C 0030                  		move.w	#$30,d1
00012386 3428 0008                  		move.w	8(a0),d2
0001238A 4EB9 0000 9016             		jsr	SlopeObject2
00012390 4E75                       		rts	
00012392                            ; ===========================================================================
00012392                            
00012392                            loc_1174A:				; XREF: Obj5E_Slope2
00012392 7202                       		moveq	#2,d1
00012394 43F8 D000                  		lea	($FFFFD000).w,a1
00012398 3028 0008                  		move.w	8(a0),d0
0001239C 9069 0008                  		sub.w	8(a1),d0
000123A0 6400                       		bcc.s	loc_1175E
000123A2 4440                       		neg.w	d0
000123A4 7200                       		moveq	#0,d1
000123A6                            
000123A6                            loc_1175E:
000123A6 0C40 0008                  		cmpi.w	#8,d0
000123AA 6400                       		bcc.s	loc_11766
000123AC 7201                       		moveq	#1,d1
000123AE                            
000123AE                            loc_11766:
000123AE 1028 001A                  		move.b	$1A(a0),d0
000123B2 B001                       		cmp.b	d1,d0
000123B4 6700                       		beq.s	locret_11790
000123B6 6400                       		bcc.s	loc_11772
000123B8 5400                       		addq.b	#2,d0
000123BA                            
000123BA                            loc_11772:
000123BA 5300                       		subq.b	#1,d0
000123BC 1140 001A                  		move.b	d0,$1A(a0)
000123C0 1141 003A                  		move.b	d1,$3A(a0)
000123C4 08A8 0000 0001             		bclr	#0,1(a0)
000123CA 0828 0001 001A             		btst	#1,$1A(a0)
000123D0 6700                       		beq.s	locret_11790
000123D2 08E8 0000 0001             		bset	#0,1(a0)
000123D8                            
000123D8                            locret_11790:
000123D8 4E75                       		rts	
000123DA                            ; ===========================================================================
000123DA                            
000123DA                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000123DA 5428 0024                  		addq.b	#2,$24(a0)
000123DE 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000123E6 317C 04F0 0002             		move.w	#$4F0,2(a0)
000123EC 0028 0004 0001             		ori.b	#4,1(a0)
000123F2 117C 0004 0018             		move.b	#4,$18(a0)
000123F8 117C 008B 0020             		move.b	#$8B,$20(a0)
000123FE 117C 000C 0019             		move.b	#$C,$19(a0)
00012404 3168 0008 0030             		move.w	8(a0),$30(a0)
0001240A 0668 0028 0008             		addi.w	#$28,8(a0)
00012410 3168 000C 0034             		move.w	$C(a0),$34(a0)
00012416 117C 0001 001A             		move.b	#1,$1A(a0)
0001241C 0828 0000 0022             		btst	#0,$22(a0)
00012422 6700                       		beq.s	Obj5E_MoveSpike
00012424 0468 0050 0008             		subi.w	#$50,8(a0)
0001242A 117C 0002 003A             		move.b	#2,$3A(a0)
00012430                            
00012430                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012430 2268 003C                  		movea.l	$3C(a0),a1
00012434 7000                       		moveq	#0,d0
00012436 1028 003A                  		move.b	$3A(a0),d0
0001243A 9029 003A                  		sub.b	$3A(a1),d0
0001243E 6700                       		beq.s	loc_1183E
00012440 6400                       		bcc.s	loc_117FC
00012442 4400                       		neg.b	d0
00012444                            
00012444                            loc_117FC:
00012444 323C F7E8                  		move.w	#-$818,d1
00012448 343C FEEC                  		move.w	#-$114,d2
0001244C 0C00 0001                  		cmpi.b	#1,d0
00012450 6700                       		beq.s	loc_11822
00012452 323C F510                  		move.w	#-$AF0,d1
00012456 343C FF34                  		move.w	#-$CC,d2
0001245A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012460 6D00                       		blt.s	loc_11822
00012462 323C F200                  		move.w	#-$E00,d1
00012466 343C FF60                  		move.w	#-$A0,d2
0001246A                            
0001246A                            loc_11822:
0001246A 3141 0012                  		move.w	d1,$12(a0)
0001246E 3142 0010                  		move.w	d2,$10(a0)
00012472 3028 0008                  		move.w	8(a0),d0
00012476 9068 0030                  		sub.w	$30(a0),d0
0001247A 6400                       		bcc.s	loc_11838
0001247C 4468 0010                  		neg.w	$10(a0)
00012480                            
00012480                            loc_11838:
00012480 5428 0024                  		addq.b	#2,$24(a0)
00012484 6000                       		bra.s	Obj5E_SpikeFall
00012486                            ; ===========================================================================
00012486                            
00012486                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012486 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001248C 7000                       		moveq	#0,d0
0001248E 1029 001A                  		move.b	$1A(a1),d0
00012492 343C 0028                  		move.w	#$28,d2
00012496 3228 0008                  		move.w	8(a0),d1
0001249A 9268 0030                  		sub.w	$30(a0),d1
0001249E 6400                       		bcc.s	loc_1185C
000124A0 4442                       		neg.w	d2
000124A2 5440                       		addq.w	#2,d0
000124A4                            
000124A4                            loc_1185C:
000124A4 D040                       		add.w	d0,d0
000124A6 3228 0034                  		move.w	$34(a0),d1
000124AA D272 0000                  		add.w	(a2,d0.w),d1
000124AE 3141 000C                  		move.w	d1,$C(a0)
000124B2 D468 0030                  		add.w	$30(a0),d2
000124B6 3142 0008                  		move.w	d2,8(a0)
000124BA 4268 000E                  		clr.w	$E(a0)
000124BE 4268 000A                  		clr.w	$A(a0)
000124C2 4E75                       		rts	
000124C4                            ; ===========================================================================
000124C4                            
000124C4                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000124C4 4A68 0012                  		tst.w	$12(a0)
000124C8 6A00                       		bpl.s	loc_1189A
000124CA 6100 BD24                  		bsr.w	ObjectFall
000124CE 3028 0034                  		move.w	$34(a0),d0
000124D2 0440 002F                  		subi.w	#$2F,d0
000124D6 B068 000C                  		cmp.w	$C(a0),d0
000124DA 6E00                       		bgt.s	locret_11898
000124DC 6100 BD12                  		bsr.w	ObjectFall
000124E0                            
000124E0                            locret_11898:
000124E0 4E75                       		rts	
000124E2                            ; ===========================================================================
000124E2                            
000124E2                            loc_1189A:				; XREF: Obj5E_SpikeFall
000124E2 6100 BD0C                  		bsr.w	ObjectFall
000124E6 2268 003C                  		movea.l	$3C(a0),a1
000124EA 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000124F0 7000                       		moveq	#0,d0
000124F2 1029 001A                  		move.b	$1A(a1),d0
000124F6 3228 0008                  		move.w	8(a0),d1
000124FA 9268 0030                  		sub.w	$30(a0),d1
000124FE 6400                       		bcc.s	loc_118BA
00012500 5440                       		addq.w	#2,d0
00012502                            
00012502                            loc_118BA:
00012502 D040                       		add.w	d0,d0
00012504 3228 0034                  		move.w	$34(a0),d1
00012508 D272 0000                  		add.w	(a2,d0.w),d1
0001250C B268 000C                  		cmp.w	$C(a0),d1
00012510 6E00                       		bgt.s	locret_11938
00012512 2268 003C                  		movea.l	$3C(a0),a1
00012516 7202                       		moveq	#2,d1
00012518 4A68 0010                  		tst.w	$10(a0)
0001251C 6B00                       		bmi.s	Obj5E_Spring
0001251E 7200                       		moveq	#0,d1
00012520                            
00012520                            Obj5E_Spring:
00012520 1341 003A                  		move.b	d1,$3A(a1)
00012524 1141 003A                  		move.b	d1,$3A(a0)
00012528 B229 001A                  		cmp.b	$1A(a1),d1
0001252C 6700                       		beq.s	loc_1192C
0001252E 08A9 0003 0022             		bclr	#3,$22(a1)
00012534 6700                       		beq.s	loc_1192C
00012536 4229 0025                  		clr.b	$25(a1)
0001253A 137C 0002 0024             		move.b	#2,$24(a1)
00012540 45F8 D000                  		lea	($FFFFD000).w,a2
00012544 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001254A 446A 0012                  		neg.w	$12(a2)
0001254E 08EA 0001 0022             		bset	#1,$22(a2)
00012554 08AA 0003 0022             		bclr	#3,$22(a2)
0001255A 422A 003C                  		clr.b	$3C(a2)
0001255E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012564 157C 0002 0024             		move.b	#2,$24(a2)
0001256A 303C 00CC                  		move.w	#$CC,d0
0001256E 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play spring sound
00012574                            
00012574                            loc_1192C:
00012574 4268 0010                  		clr.w	$10(a0)
00012578 4268 0012                  		clr.w	$12(a0)
0001257C 5528 0024                  		subq.b	#2,$24(a0)
00012580                            
00012580                            locret_11938:
00012580 4E75                       		rts	
00012582                            ; ===========================================================================
00012582 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001258C                            
0001258C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000125BC                            		even
000125BC                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000125EC                            		even
000125EC                            ; ---------------------------------------------------------------------------
000125EC                            ; Sprite mappings - seesaws (SLZ)
000125EC                            ; ---------------------------------------------------------------------------
000125EC                            Map_obj5E:
000125EC                            	include "_maps\obj5E.asm"
000125EC                            ; ---------------------------------------------------------------------------
000125EC                            ; Sprite mappings - seesaws (SLZ)
000125EC                            ; ---------------------------------------------------------------------------
000125EC 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000125F0 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000125F4 07                         byte_119AC:	dc.b 7
000125F5 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000125FA DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000125FF E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012604 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012609 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001260E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012613 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012618 04                         byte_119D0:	dc.b 4
00012619 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001261E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012623 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012628 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001262E 00                         		even
0001262E 00                         		even
0001262E                            
0001262E                            ; ---------------------------------------------------------------------------
0001262E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001262E                            ; ---------------------------------------------------------------------------
0001262E                            Map_obj5Ea:
0001262E                            	include "_maps\obj5Eballs.asm"
0001262E                            ; ---------------------------------------------------------------------------
0001262E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001262E                            ; ---------------------------------------------------------------------------
0001262E 0000                       		dc.w byte_119EA-Map_obj5Ea
00012630 0000                       		dc.w byte_119F0-Map_obj5Ea
00012632 01                         byte_119EA:	dc.b 1
00012633 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012638 01                         byte_119F0:	dc.b 1
00012639 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001263E                            		even
0001263E                            		even
0001263E                            
0001263E                            ; ===========================================================================
0001263E                            ; ---------------------------------------------------------------------------
0001263E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001263E                            ; ---------------------------------------------------------------------------
0001263E                            
0001263E                            Obj5F:					; XREF: Obj_Index
0001263E 7000                       		moveq	#0,d0
00012640 1028 0024                  		move.b	$24(a0),d0
00012644 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012648 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001264C                            ; ===========================================================================
0001264C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001264E 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012650 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012652 0000                       		dc.w Obj5F_End-Obj5F_Index
00012654                            ; ===========================================================================
00012654                            
00012654                            Obj5F_Main:				; XREF: Obj5F_Index
00012654 5428 0024                  		addq.b	#2,$24(a0)
00012658 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012660 317C 0400 0002             		move.w	#$400,2(a0)
00012666 0028 0004 0001             		ori.b	#4,1(a0)
0001266C 117C 0003 0018             		move.b	#3,$18(a0)
00012672 117C 000C 0019             		move.b	#$C,$19(a0)
00012678 1028 0028                  		move.b	$28(a0),d0
0001267C 6700                       		beq.s	loc_11A3C
0001267E 1140 0024                  		move.b	d0,$24(a0)
00012682 4E75                       		rts	
00012684                            ; ===========================================================================
00012684                            
00012684                            loc_11A3C:
00012684 117C 009A 0020             		move.b	#$9A,$20(a0)
0001268A 0868 0000 0022             		bchg	#0,$22(a0)
00012690                            
00012690                            Obj5F_Action:				; XREF: Obj5F_Index
00012690 7000                       		moveq	#0,d0
00012692 1028 0025                  		move.b	$25(a0),d0
00012696 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001269A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001269E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000126A4 6100 8C3E                  		bsr.w	AnimateSprite
000126A8 6000 DC84                  		bra.w	MarkObjGone
000126AC                            ; ===========================================================================
000126AC 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000126AE 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000126B0 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000126B2                            ; ===========================================================================
000126B2                            
000126B2                            Obj5F_Walk:				; XREF: Obj5F_Index2
000126B2 6100 0000                  		bsr.w	Obj5F_ChkSonic
000126B6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000126BA 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000126BC 5428 0025                  		addq.b	#2,$25(a0)
000126C0 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000126C6 317C 0010 0010             		move.w	#$10,$10(a0)
000126CC 117C 0001 001C             		move.b	#1,$1C(a0)
000126D2 0868 0000 0022             		bchg	#0,$22(a0)
000126D8 6700                       		beq.s	locret_11A96
000126DA 4468 0010                  		neg.w	$10(a0)		; change direction
000126DE                            
000126DE                            locret_11A96:
000126DE 4E75                       		rts	
000126E0                            ; ===========================================================================
000126E0                            
000126E0                            Obj5F_Wait:				; XREF: Obj5F_Index2
000126E0 6100 0000                  		bsr.w	Obj5F_ChkSonic
000126E4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000126E8 6B00                       		bmi.s	loc_11AA8
000126EA 6000 BB66                  		bra.w	SpeedToPos
000126EE                            ; ===========================================================================
000126EE                            
000126EE                            loc_11AA8:
000126EE 5528 0025                  		subq.b	#2,$25(a0)
000126F2 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000126F8 4268 0010                  		clr.w	$10(a0)		; stop walking
000126FC 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012702 4E75                       		rts	
00012704                            ; ===========================================================================
00012704                            
00012704                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012704 5368 0030                  		subq.w	#1,$30(a0)
00012708 6A00                       		bpl.s	locret_11AD0
0001270A 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001270E 117C 0000 0024             		move.b	#0,$24(a0)
00012714                            
00012714                            locret_11AD0:
00012714 4E75                       		rts	
00012716                            ; ===========================================================================
00012716                            
00012716                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012716 3038 D008                  		move.w	($FFFFD008).w,d0
0001271A 9068 0008                  		sub.w	8(a0),d0
0001271E 6400                       		bcc.s	loc_11ADE
00012720 4440                       		neg.w	d0
00012722                            
00012722                            loc_11ADE:
00012722 0C40 0060                  		cmpi.w	#$60,d0
00012726 6400                       		bcc.s	locret_11B5E
00012728 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001272C 9068 000C                  		sub.w	$C(a0),d0
00012730 6400                       		bcc.s	Obj5F_MakeFuse
00012732 4440                       		neg.w	d0
00012734                            
00012734                            Obj5F_MakeFuse:
00012734 0C40 0060                  		cmpi.w	#$60,d0
00012738 6400                       		bcc.s	locret_11B5E
0001273A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001273E 6600                       		bne.s	locret_11B5E
00012740 117C 0004 0025             		move.b	#4,$25(a0)
00012746 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001274C 4268 0010                  		clr.w	$10(a0)
00012750 117C 0002 001C             		move.b	#2,$1C(a0)
00012756 6100 BFD0                  		bsr.w	SingleObjLoad2
0001275A 6600                       		bne.s	locret_11B5E
0001275C 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012760 3368 0008 0008             		move.w	8(a0),8(a1)
00012766 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001276C 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012772 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012778 137C 0004 0028             		move.b	#4,$28(a1)
0001277E 137C 0003 001C             		move.b	#3,$1C(a1)
00012784 337C 0010 0012             		move.w	#$10,$12(a1)
0001278A 0828 0001 0022             		btst	#1,$22(a0)
00012790 6700                       		beq.s	loc_11B54
00012792 4469 0012                  		neg.w	$12(a1)
00012796                            
00012796                            loc_11B54:
00012796 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001279C 2348 003C                  		move.l	a0,$3C(a1)
000127A0                            
000127A0                            locret_11B5E:
000127A0 4E75                       		rts	
000127A2                            ; ===========================================================================
000127A2                            
000127A2                            Obj5F_Display:				; XREF: Obj5F_Index
000127A2 6100                       		bsr.s	loc_11B70
000127A4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000127AA 6100 8B38                  		bsr.w	AnimateSprite
000127AE 6000 DB7E                  		bra.w	MarkObjGone
000127B2                            ; ===========================================================================
000127B2                            
000127B2                            loc_11B70:
000127B2 5368 0030                  		subq.w	#1,$30(a0)
000127B6 6B00                       		bmi.s	loc_11B7C
000127B8 6000 BA98                  		bra.w	SpeedToPos
000127BC                            ; ===========================================================================
000127BC                            
000127BC                            loc_11B7C:
000127BC 4268 0030                  		clr.w	$30(a0)
000127C0 4228 0024                  		clr.b	$24(a0)
000127C4 3168 0034 000C             		move.w	$34(a0),$C(a0)
000127CA 7203                       		moveq	#3,d1
000127CC 2248                       		movea.l	a0,a1
000127CE 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000127D4 6000                       		bra.s	Obj5F_MakeShrap
000127D6                            ; ===========================================================================
000127D6                            
000127D6                            Obj5F_Loop:
000127D6 6100 BF50                  		bsr.w	SingleObjLoad2
000127DA 6600                       		bne.s	loc_11BCE
000127DC                            
000127DC                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000127DC 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000127E0 3368 0008 0008             		move.w	8(a0),8(a1)
000127E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000127EC 137C 0006 0028             		move.b	#6,$28(a1)
000127F2 137C 0004 001C             		move.b	#4,$1C(a1)
000127F8 335A 0010                  		move.w	(a2)+,$10(a1)
000127FC 335A 0012                  		move.w	(a2)+,$12(a1)
00012800 137C 0098 0020             		move.b	#$98,$20(a1)
00012806 08E9 0007 0001             		bset	#7,1(a1)
0001280C                            
0001280C                            loc_11BCE:
0001280C 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012810                            
00012810 117C 0006 0024             		move.b	#6,$24(a0)
00012816                            
00012816                            Obj5F_End:				; XREF: Obj5F_Index
00012816 7218                       		moveq	#$18,d1
00012818 6100 B9D8                  		bsr.w	ObjectFallCustom
0001281C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012822 6100 8AC0                  		bsr.w	AnimateSprite
00012826 4A28 0001                  		tst.b	1(a0)
0001282A 6A00 BA9C                  		bpl.w	DeleteObject
0001282E 6000 BA5C                  		bra.w	DisplaySprite
00012832                            ; ===========================================================================
00012832 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012842                            
00012842                            Ani_obj5F:
00012842                            	include "_anim\obj5F.asm"
00012842                            ; ---------------------------------------------------------------------------
00012842                            ; Animation script - Bomb enemy
00012842                            ; ---------------------------------------------------------------------------
00012842 0000                       		dc.w byte_11C12-Ani_obj5F
00012844 0000                       		dc.w byte_11C16-Ani_obj5F
00012846 0000                       		dc.w byte_11C1C-Ani_obj5F
00012848 0000                       		dc.w byte_11C20-Ani_obj5F
0001284A 0000                       		dc.w byte_11C24-Ani_obj5F
0001284C 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012850 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012856 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001285A 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001285E 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012862                            		even
00012862                            		even
00012862                            
00012862                            ; ---------------------------------------------------------------------------
00012862                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012862                            ; ---------------------------------------------------------------------------
00012862                            Map_obj5F:
00012862                            	include "_maps\obj5F.asm"
00012862                            ; ---------------------------------------------------------------------------
00012862                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012862                            ; ---------------------------------------------------------------------------
00012862 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012866 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001286A 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001286E 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012872 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012876 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001287A 03                         byte_11C40:	dc.b 3
0001287B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012880 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012885 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001288A 03                         byte_11C50:	dc.b 3
0001288B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012890 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012895 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001289A 03                         byte_11C60:	dc.b 3
0001289B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000128A0 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000128A5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000128AA 03                         byte_11C70:	dc.b 3
000128AB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000128B0 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000128B5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000128BA 03                         byte_11C80:	dc.b 3
000128BB F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000128C0 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000128C5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000128CA 03                         byte_11C90:	dc.b 3
000128CB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000128D0 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000128D5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000128DA 02                         byte_11CA0:	dc.b 2
000128DB F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000128E0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000128E5 02                         byte_11CAB:	dc.b 2
000128E6 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000128EB 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000128F0 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000128F1 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000128F6 01                         byte_11CBC:	dc.b 1			; fuse
000128F7 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000128FC 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000128FD FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012902 01                         byte_11CC8:	dc.b 1			; fireball
00012903 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012908                            		even
00012908                            		even
00012908                            
00012908                            ; ===========================================================================
00012908                            ; ---------------------------------------------------------------------------
00012908                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012908                            ; ---------------------------------------------------------------------------
00012908                            
00012908                            Obj60:					; XREF: Obj_Index
00012908 7000                       		moveq	#0,d0
0001290A 1028 0024                  		move.b	$24(a0),d0
0001290E 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012912 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012916                            ; ===========================================================================
00012916 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012918 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001291A 0000                       		dc.w Obj60_Display-Obj60_Index
0001291C 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001291E 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012920                            ; ===========================================================================
00012920                            
00012920                            Obj60_Main:				; XREF: Obj60_Index
00012920 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012928 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001292E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012934 6700                       		beq.s	loc_11D02
00012936 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001293C                            
0001293C                            loc_11D02:
0001293C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012942 6600                       		bne.s	loc_11D10
00012944 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001294A                            
0001294A                            loc_11D10:
0001294A 0028 0004 0001             		ori.b	#4,1(a0)
00012950 117C 0004 0018             		move.b	#4,$18(a0)
00012956 117C 000B 0020             		move.b	#$B,$20(a0)
0001295C 117C 000C 0019             		move.b	#$C,$19(a0)
00012962 7400                       		moveq	#0,d2
00012964 45E8 0037                  		lea	$37(a0),a2
00012968 264A                       		movea.l	a2,a3
0001296A 524A                       		addq.w	#1,a2
0001296C 7203                       		moveq	#3,d1
0001296E                            
0001296E                            Obj60_MakeOrbs:
0001296E 6100 BDB8                  		bsr.w	SingleObjLoad2
00012972 6600                       		bne.s	loc_11D90
00012974 5213                       		addq.b	#1,(a3)
00012976 3A09                       		move.w	a1,d5
00012978 0445 D000                  		subi.w	#-$3000,d5
0001297C EC4D                       		lsr.w	#6,d5
0001297E 0245 007F                  		andi.w	#$7F,d5
00012982 14C5                       		move.b	d5,(a2)+
00012984 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012986 137C 0006 0024             		move.b	#6,$24(a1)
0001298C 2368 0004 0004             		move.l	4(a0),4(a1)
00012992 3368 0002 0002             		move.w	2(a0),2(a1)
00012998 0029 0004 0001             		ori.b	#4,1(a1)
0001299E 137C 0004 0018             		move.b	#4,$18(a1)
000129A4 137C 0008 0019             		move.b	#8,$19(a1)
000129AA 137C 0003 001A             		move.b	#3,$1A(a1)
000129B0 137C 0098 0020             		move.b	#$98,$20(a1)
000129B6 1342 0026                  		move.b	d2,$26(a1)
000129BA 0602 0040                  		addi.b	#$40,d2
000129BE 2348 003C                  		move.l	a0,$3C(a1)
000129C2 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000129C6                            
000129C6                            loc_11D90:
000129C6 7001                       		moveq	#1,d0
000129C8 0828 0000 0022             		btst	#0,$22(a0)
000129CE 6700                       		beq.s	Obj60_Move
000129D0 4440                       		neg.w	d0
000129D2                            
000129D2                            Obj60_Move:
000129D2 1140 0036                  		move.b	d0,$36(a0)
000129D6 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000129DC 5428 0024                  		addq.b	#2,$24(a0)
000129E0 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000129E6 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000129EC 6700                       		beq.s	locret_11DBC	; if not, branch
000129EE 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000129F2                            
000129F2                            locret_11DBC:
000129F2 4E75                       		rts	
000129F4                            ; ===========================================================================
000129F4                            
000129F4                            Obj60_ChkSonic:				; XREF: Obj60_Index
000129F4 3038 D008                  		move.w	($FFFFD008).w,d0
000129F8 9068 0008                  		sub.w	8(a0),d0
000129FC 6400                       		bcc.s	loc_11DCA
000129FE 4440                       		neg.w	d0
00012A00                            
00012A00                            loc_11DCA:
00012A00 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012A04 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012A06 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012A0A 9068 000C                  		sub.w	$C(a0),d0
00012A0E 6400                       		bcc.s	loc_11DDC
00012A10 4440                       		neg.w	d0
00012A12                            
00012A12                            loc_11DDC:
00012A12 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012A16 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012A18 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012A1C 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012A1E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012A24                            
00012A24                            Obj60_Animate:
00012A24 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012A2A 6100 88B8                  		bsr.w	AnimateSprite
00012A2E 6000 0000                  		bra.w	Obj60_ChkDel
00012A32                            ; ===========================================================================
00012A32                            
00012A32                            Obj60_Display:				; XREF: Obj60_Index
00012A32 6100 B81E                  		bsr.w	SpeedToPos
00012A36                            
00012A36                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012A36 3028 0008                  		move.w	8(a0),d0
00012A3A 0240 FF80                  		andi.w	#$FF80,d0
00012A3E 3238 F700                  		move.w	($FFFFF700).w,d1
00012A42 0441 0080                  		subi.w	#$80,d1
00012A46 0241 FF80                  		andi.w	#$FF80,d1
00012A4A 9041                       		sub.w	d1,d0
00012A4C 0C40 0280                  		cmpi.w	#$280,d0
00012A50 6200 0000                  		bhi.w	Obj60_ChkGone
00012A54 6000 B836                  		bra.w	DisplaySprite
00012A58                            ; ===========================================================================
00012A58                            
00012A58                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012A58 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012A5C 7000                       		moveq	#0,d0
00012A5E 1028 0023                  		move.b	$23(a0),d0
00012A62 6700                       		beq.s	loc_11E34
00012A64 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012A6A                            
00012A6A                            loc_11E34:
00012A6A 45E8 0037                  		lea	$37(a0),a2
00012A6E 7400                       		moveq	#0,d2
00012A70 141A                       		move.b	(a2)+,d2
00012A72 5342                       		subq.w	#1,d2
00012A74 6500                       		bcs.s	Obj60_Delete
00012A76                            
00012A76                            loc_11E40:
00012A76 7000                       		moveq	#0,d0
00012A78 101A                       		move.b	(a2)+,d0
00012A7A ED48                       		lsl.w	#6,d0
00012A7C 0680 00FF D000             		addi.l	#$FFD000,d0
00012A82 2240                       		movea.l	d0,a1
00012A84 6100 B844                  		bsr.w	DeleteObject2
00012A88 51CA FFEC                  		dbf	d2,loc_11E40
00012A8C                            
00012A8C                            Obj60_Delete:
00012A8C 6000 B83A                  		bra.w	DeleteObject
00012A90                            ; ===========================================================================
00012A90                            
00012A90                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012A90 2268 003C                  		movea.l	$3C(a0),a1
00012A94 0C11 0060                  		cmpi.b	#$60,0(a1)
00012A98 6600 B82E                  		bne.w	DeleteObject
00012A9C 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012AA2 6600                       		bne.s	Obj60_Circle
00012AA4 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012AAA 6600                       		bne.s	Obj60_Circle
00012AAC 5428 0024                  		addq.b	#2,$24(a0)
00012AB0 5329 0037                  		subq.b	#1,$37(a1)
00012AB4 6600                       		bne.s	Obj60_FireOrb
00012AB6 5429 0024                  		addq.b	#2,$24(a1)
00012ABA                            
00012ABA                            Obj60_FireOrb:
00012ABA 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012AC0 0829 0000 0022             		btst	#0,$22(a1)
00012AC6 6700                       		beq.s	Obj60_Display2
00012AC8 4468 0010                  		neg.w	$10(a0)
00012ACC                            
00012ACC                            Obj60_Display2:
00012ACC 6000 B7BE                  		bra.w	DisplaySprite
00012AD0                            ; ===========================================================================
00012AD0                            
00012AD0                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012AD0 1028 0026                  		move.b	$26(a0),d0
00012AD4 4EB9 0000 2D6E             		jsr	(CalcSine).l
00012ADA E841                       		asr.w	#4,d1
00012ADC D269 0008                  		add.w	8(a1),d1
00012AE0 3141 0008                  		move.w	d1,8(a0)
00012AE4 E840                       		asr.w	#4,d0
00012AE6 D069 000C                  		add.w	$C(a1),d0
00012AEA 3140 000C                  		move.w	d0,$C(a0)
00012AEE 1029 0036                  		move.b	$36(a1),d0
00012AF2 D128 0026                  		add.b	d0,$26(a0)
00012AF6 6000 B794                  		bra.w	DisplaySprite
00012AFA                            ; ===========================================================================
00012AFA                            
00012AFA                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012AFA 4A28 0001                  		tst.b	1(a0)
00012AFE 6A00 B7C8                  		bpl.w	DeleteObject
00012B02 6100 B74E                  		bsr.w	SpeedToPos
00012B06 6000 B784                  		bra.w	DisplaySprite
00012B0A                            ; ===========================================================================
00012B0A                            Ani_obj60:
00012B0A                            	include "_anim\obj60.asm"
00012B0A                            ; ---------------------------------------------------------------------------
00012B0A                            ; Animation script - Orbinaut enemy
00012B0A                            ; ---------------------------------------------------------------------------
00012B0A 0000                       		dc.w byte_11EDA-Ani_obj60
00012B0C 0000                       		dc.w byte_11EDE-Ani_obj60
00012B0E 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012B12 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012B18                            		even
00012B18                            		even
00012B18                            
00012B18                            ; ---------------------------------------------------------------------------
00012B18                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012B18                            ; ---------------------------------------------------------------------------
00012B18                            Map_obj60:
00012B18                            	include "_maps\obj60.asm"
00012B18                            ; ---------------------------------------------------------------------------
00012B18                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012B18                            ; ---------------------------------------------------------------------------
00012B18 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012B1C 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012B20 01                         byte_11EEC:	dc.b 1
00012B21 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012B26 01                         byte_11EF2:	dc.b 1
00012B27 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012B2C 01                         byte_11EF8:	dc.b 1
00012B2D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012B32 01                         byte_11EFE:	dc.b 1
00012B33 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012B38                            		even
00012B38                            		even
00012B38                            
00012B38                            ; ===========================================================================
00012B38                            ; ---------------------------------------------------------------------------
00012B38                            ; Object 16 - harpoon (LZ)
00012B38                            ; ---------------------------------------------------------------------------
00012B38                            
00012B38                            Obj16:					; XREF: Obj_Index
00012B38 7000                       		moveq	#0,d0
00012B3A 1028 0024                  		move.b	$24(a0),d0
00012B3E 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012B42 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012B46                            ; ===========================================================================
00012B46 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012B48 0000                       		dc.w Obj16_Move-Obj16_Index
00012B4A 0000                       		dc.w Obj16_Wait-Obj16_Index
00012B4C                            ; ===========================================================================
00012B4C                            
00012B4C                            Obj16_Main:				; XREF: Obj16_Index
00012B4C 5428 0024                  		addq.b	#2,$24(a0)
00012B50 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012B58 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012B5E 0028 0004 0001             		ori.b	#4,1(a0)
00012B64 117C 0004 0018             		move.b	#4,$18(a0)
00012B6A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012B70 117C 0014 0019             		move.b	#$14,$19(a0)
00012B76 317C 003C 0030             		move.w	#60,$30(a0)
00012B7C                            
00012B7C                            Obj16_Move:				; XREF: Obj16_Index
00012B7C 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012B82 6100 8760                  		bsr.w	AnimateSprite
00012B86 7000                       		moveq	#0,d0
00012B88 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012B8C 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012B92 6000 D79A                  		bra.w	MarkObjGone
00012B96                            ; ===========================================================================
00012B96 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012B9C                            ; ===========================================================================
00012B9C                            
00012B9C                            Obj16_Wait:				; XREF: Obj16_Index
00012B9C 5368 0030                  		subq.w	#1,$30(a0)
00012BA0 6A00                       		bpl.s	Obj16_ChkDel
00012BA2 317C 003C 0030             		move.w	#60,$30(a0)
00012BA8 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012BAC 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012BB2                            
00012BB2                            Obj16_ChkDel:
00012BB2 6000 D77A                  		bra.w	MarkObjGone
00012BB6                            ; ===========================================================================
00012BB6                            Ani_obj16:
00012BB6                            	include "_anim\obj16.asm"
00012BB6                            ; ---------------------------------------------------------------------------
00012BB6                            ; Animation script - harpoon (LZ)
00012BB6                            ; ---------------------------------------------------------------------------
00012BB6 0000                       		dc.w byte_11F8A-Ani_obj16
00012BB8 0000                       		dc.w byte_11F8E-Ani_obj16
00012BBA 0000                       		dc.w byte_11F92-Ani_obj16
00012BBC 0000                       		dc.w byte_11F96-Ani_obj16
00012BBE 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012BC2 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012BC6 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012BCA 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012BCE                            		even
00012BCE                            		even
00012BCE                            
00012BCE                            ; ---------------------------------------------------------------------------
00012BCE                            ; Sprite mappings - harpoon (LZ)
00012BCE                            ; ---------------------------------------------------------------------------
00012BCE                            Map_obj16:
00012BCE                            	include "_maps\obj16.asm"
00012BCE                            ; ---------------------------------------------------------------------------
00012BCE                            ; Sprite mappings - harpoon (LZ)
00012BCE                            ; ---------------------------------------------------------------------------
00012BCE 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012BD2 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012BD6 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012BDA 01                         byte_11FA6:	dc.b 1
00012BDB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012BE0 01                         byte_11FAC:	dc.b 1
00012BE1 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012BE6 02                         byte_11FB2:	dc.b 2
00012BE7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012BEC FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012BF1 01                         byte_11FBD:	dc.b 1
00012BF2 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012BF7 01                         byte_11FC3:	dc.b 1
00012BF8 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012BFD 02                         byte_11FC9:	dc.b 2
00012BFE D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012C03 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012C08                            		even
00012C08                            		even
00012C08                            
00012C08                            ; ===========================================================================
00012C08                            ; ---------------------------------------------------------------------------
00012C08                            ; Object 61 - blocks (LZ)
00012C08                            ; ---------------------------------------------------------------------------
00012C08                            
00012C08                            Obj61:					; XREF: Obj_Index
00012C08 7000                       		moveq	#0,d0
00012C0A 1028 0024                  		move.b	$24(a0),d0
00012C0E 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012C12 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012C16                            ; ===========================================================================
00012C16 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012C18 0000                       		dc.w Obj61_Action-Obj61_Index
00012C1A                            
00012C1A 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012C1C 200C                       		dc.b $20, $C
00012C1E 1010                       		dc.b $10, $10
00012C20 1010                       		dc.b $10, $10
00012C22                            ; ===========================================================================
00012C22                            
00012C22                            Obj61_Main:				; XREF: Obj61_Index
00012C22 5428 0024                  		addq.b	#2,$24(a0)
00012C26 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012C2E 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012C34 117C 0004 0001             		move.b	#4,1(a0)
00012C3A 117C 0003 0018             		move.b	#3,$18(a0)
00012C40 7000                       		moveq	#0,d0
00012C42 1028 0028                  		move.b	$28(a0),d0
00012C46 E648                       		lsr.w	#3,d0
00012C48 0240 000E                  		andi.w	#$E,d0
00012C4C 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012C50 115A 0019                  		move.b	(a2)+,$19(a0)
00012C54 1152 0016                  		move.b	(a2),$16(a0)
00012C58 E248                       		lsr.w	#1,d0
00012C5A 1140 001A                  		move.b	d0,$1A(a0)
00012C5E 3168 0008 0034             		move.w	8(a0),$34(a0)
00012C64 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012C6A 1028 0028                  		move.b	$28(a0),d0
00012C6E 0200 000F                  		andi.b	#$F,d0
00012C72 6700                       		beq.s	Obj61_Action
00012C74 0C00 0007                  		cmpi.b	#7,d0
00012C78 6700                       		beq.s	Obj61_Action
00012C7A 117C 0001 0038             		move.b	#1,$38(a0)
00012C80                            
00012C80                            Obj61_Action:				; XREF: Obj61_Index
00012C80 3F28 0008                  		move.w	8(a0),-(sp)
00012C84 7000                       		moveq	#0,d0
00012C86 1028 0028                  		move.b	$28(a0),d0
00012C8A 0240 000F                  		andi.w	#$F,d0
00012C8E D040                       		add.w	d0,d0
00012C90 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012C94 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012C98 381F                       		move.w	(sp)+,d4
00012C9A 4A28 0001                  		tst.b	1(a0)
00012C9E 6A00                       		bpl.s	Obj61_ChkDel
00012CA0 7200                       		moveq	#0,d1
00012CA2 1228 0019                  		move.b	$19(a0),d1
00012CA6 0641 000B                  		addi.w	#$B,d1
00012CAA 7400                       		moveq	#0,d2
00012CAC 1428 0016                  		move.b	$16(a0),d2
00012CB0 3602                       		move.w	d2,d3
00012CB2 5243                       		addq.w	#1,d3
00012CB4 6100 D9A0                  		bsr.w	SolidObject
00012CB8 1144 003F                  		move.b	d4,$3F(a0)
00012CBC 6100 0000                  		bsr.w	loc_12180
00012CC0                            
00012CC0                            Obj61_ChkDel:
00012CC0 3028 0034                  		move.w	$34(a0),d0
00012CC4 0240 FF80                  		andi.w	#$FF80,d0
00012CC8 3238 F700                  		move.w	($FFFFF700).w,d1
00012CCC 0441 0080                  		subi.w	#$80,d1
00012CD0 0241 FF80                  		andi.w	#$FF80,d1
00012CD4 9041                       		sub.w	d1,d0
00012CD6 0C40 0280                  		cmpi.w	#$280,d0
00012CDA 6200 B5EC                  		bhi.w	DeleteObject
00012CDE 6000 B5AC                  		bra.w	DisplaySprite
00012CE2                            ; ===========================================================================
00012CE2 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012CE6 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012CEA 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012CEE 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012CF2                            ; ===========================================================================
00012CF2                            
00012CF2                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012CF2 4E75                       		rts	
00012CF4                            ; ===========================================================================
00012CF4                            
00012CF4                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012CF4 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012CF8 6600                       		bne.s	loc_120D6	; if yes, branch
00012CFA 0828 0003 0022             		btst	#3,$22(a0)
00012D00 6700                       		beq.s	locret_120D4
00012D02 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012D08                            
00012D08                            locret_120D4:
00012D08 4E75                       		rts	
00012D0A                            ; ===========================================================================
00012D0A                            
00012D0A                            loc_120D6:
00012D0A 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012D0E 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012D10 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012D14 4228 0038                  		clr.b	$38(a0)
00012D18 4E75                       		rts	
00012D1A                            ; ===========================================================================
00012D1A                            
00012D1A                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012D1A 7208                       		moveq	#8,d1
00012D1C 4EBA B4D4                  		jsr	ObjectFallCustom
00012D20 6100 0000                  		bsr.w	ObjHitFloor
00012D24 4A41                       		tst.w	d1
00012D26 6A00 0000                  		bpl.w	locret_12106
00012D2A 5241                       		addq.w	#1,d1
00012D2C D368 000C                  		add.w	d1,$C(a0)
00012D30 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012D34 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012D38                            
00012D38                            locret_12106:
00012D38 4E75                       		rts	
00012D3A                            ; ===========================================================================
00012D3A                            
00012D3A                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012D3A 72F8                       		moveq	#-8,d1
00012D3C 4EBA B4B4                  		jsr	ObjectFallCustom
00012D40 6100 0000                  		bsr.w	ObjHitCeiling
00012D44 4A41                       		tst.w	d1
00012D46 6A00 0000                  		bpl.w	locret_12126
00012D4A 9368 000C                  		sub.w	d1,$C(a0)
00012D4E 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012D52 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012D56                            
00012D56                            locret_12126:
00012D56 4E75                       		rts	
00012D58                            ; ===========================================================================
00012D58                            
00012D58                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012D58 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012D5E 6600                       		bne.s	locret_12138	; if not, branch
00012D60 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012D64 4228 0038                  		clr.b	$38(a0)
00012D68                            
00012D68                            locret_12138:
00012D68 4E75                       		rts	
00012D6A                            ; ===========================================================================
00012D6A                            
00012D6A                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012D6A 3038 F646                  		move.w	($FFFFF646).w,d0
00012D6E 9068 000C                  		sub.w	$C(a0),d0
00012D72 6700                       		beq.s	locret_1217E
00012D74 6400                       		bcc.s	loc_12162
00012D76 0C40 FFFE                  		cmpi.w	#-2,d0
00012D7A 6C00                       		bge.s	loc_1214E
00012D7C 70FE                       		moveq	#-2,d0
00012D7E                            
00012D7E                            loc_1214E:
00012D7E D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012D82 6100 0000                  		bsr.w	ObjHitCeiling
00012D86 4A41                       		tst.w	d1
00012D88 6A00 0000                  		bpl.w	locret_12160
00012D8C 9368 000C                  		sub.w	d1,$C(a0)
00012D90                            
00012D90                            locret_12160:
00012D90 4E75                       		rts	
00012D92                            ; ===========================================================================
00012D92                            
00012D92                            loc_12162:				; XREF: Obj61_Type07
00012D92 0C40 0002                  		cmpi.w	#2,d0
00012D96 6F00                       		ble.s	loc_1216A
00012D98 7002                       		moveq	#2,d0
00012D9A                            
00012D9A                            loc_1216A:
00012D9A D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012D9E 6100 0000                  		bsr.w	ObjHitFloor
00012DA2 4A41                       		tst.w	d1
00012DA4 6A00 0000                  		bpl.w	locret_1217E
00012DA8 5241                       		addq.w	#1,d1
00012DAA D368 000C                  		add.w	d1,$C(a0)
00012DAE                            
00012DAE                            locret_1217E:
00012DAE 4E75                       		rts	
00012DB0                            ; ===========================================================================
00012DB0                            
00012DB0                            loc_12180:				; XREF: Obj61_Action
00012DB0 4A28 0038                  		tst.b	$38(a0)
00012DB4 6700                       		beq.s	locret_121C0
00012DB6 0828 0003 0022             		btst	#3,$22(a0)
00012DBC 6600                       		bne.s	loc_1219A
00012DBE 4A28 003E                  		tst.b	$3E(a0)
00012DC2 6700                       		beq.s	locret_121C0
00012DC4 5928 003E                  		subq.b	#4,$3E(a0)
00012DC8 6000                       		bra.s	loc_121A6
00012DCA                            ; ===========================================================================
00012DCA                            
00012DCA                            loc_1219A:
00012DCA 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012DD0 6700                       		beq.s	locret_121C0
00012DD2 5828 003E                  		addq.b	#4,$3E(a0)
00012DD6                            
00012DD6                            loc_121A6:
00012DD6 1028 003E                  		move.b	$3E(a0),d0
00012DDA 4EB9 0000 2D6E             		jsr	(CalcSine).l
00012DE0 323C 0400                  		move.w	#$400,d1
00012DE4 C1C1                       		muls.w	d1,d0
00012DE6 4840                       		swap	d0
00012DE8 D068 0030                  		add.w	$30(a0),d0
00012DEC 3140 000C                  		move.w	d0,$C(a0)
00012DF0                            
00012DF0                            locret_121C0:
00012DF0 4E75                       		rts	
00012DF2                            ; ===========================================================================
00012DF2                            ; ---------------------------------------------------------------------------
00012DF2                            ; Sprite mappings - blocks (LZ)
00012DF2                            ; ---------------------------------------------------------------------------
00012DF2                            Map_obj61:
00012DF2                            	include "_maps\obj61.asm"
00012DF2                            ; ---------------------------------------------------------------------------
00012DF2                            ; Sprite mappings - blocks (LZ)
00012DF2                            ; ---------------------------------------------------------------------------
00012DF2 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012DF6 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012DFA 01                         byte_121CA:	dc.b 1
00012DFB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012E00 02                         byte_121D0:	dc.b 2
00012E01 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012E06 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012E0B 01                         byte_121DB:	dc.b 1
00012E0C F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012E11 01                         byte_121E1:	dc.b 1
00012E12 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012E18 00                         		even
00012E18 00                         		even
00012E18                            
00012E18                            ; ===========================================================================
00012E18                            ; ---------------------------------------------------------------------------
00012E18                            ; Object 62 - gargoyle head (LZ)
00012E18                            ; ---------------------------------------------------------------------------
00012E18                            
00012E18                            Obj62:					; XREF: Obj_Index
00012E18 7000                       		moveq	#0,d0
00012E1A 1028 0024                  		move.b	$24(a0),d0
00012E1E 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012E22 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012E26 6000 D506                  		bra.w	MarkObjGone
00012E2A                            ; ===========================================================================
00012E2A 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012E2C 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012E2E 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012E30 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012E32                            
00012E32 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012E3A                            ; ===========================================================================
00012E3A                            
00012E3A                            Obj62_Main:				; XREF: Obj62_Index
00012E3A 5428 0024                  		addq.b	#2,$24(a0)
00012E3E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012E46 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012E4C 0028 0004 0001             		ori.b	#4,1(a0)
00012E52 117C 0003 0018             		move.b	#3,$18(a0)
00012E58 117C 0010 0019             		move.b	#$10,$19(a0)
00012E5E 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E62 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012E66 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012E6C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012E72 0228 000F 0028             		andi.b	#$F,$28(a0)
00012E78                            
00012E78                            Obj62_MakeFire:				; XREF: Obj62_Index
00012E78 5328 001E                  		subq.b	#1,$1E(a0)
00012E7C 6600                       		bne.s	Obj62_NoFire
00012E7E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012E84 6100 B680                  		bsr.w	ChkObjOnScreen
00012E88 6600                       		bne.s	Obj62_NoFire
00012E8A 6100 B886                  		bsr.w	SingleObjLoad
00012E8E 6600                       		bne.s	Obj62_NoFire
00012E90 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012E94 5829 0024                  		addq.b	#4,$24(a1)
00012E98 3368 0008 0008             		move.w	8(a0),8(a1)
00012E9E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012EA4 1368 0001 0001             		move.b	1(a0),1(a1)
00012EAA 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012EB0                            
00012EB0                            Obj62_NoFire:
00012EB0 4E75                       		rts	
00012EB2                            ; ===========================================================================
00012EB2                            
00012EB2                            Obj62_FireBall:				; XREF: Obj62_Index
00012EB2 5428 0024                  		addq.b	#2,$24(a0)
00012EB6 117C 0008 0016             		move.b	#8,$16(a0)
00012EBC 117C 0008 0017             		move.b	#8,$17(a0)
00012EC2 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012ECA 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012ED0 0028 0004 0001             		ori.b	#4,1(a0)
00012ED6 117C 0004 0018             		move.b	#4,$18(a0)
00012EDC 117C 0098 0020             		move.b	#$98,$20(a0)
00012EE2 117C 0008 0019             		move.b	#8,$19(a0)
00012EE8 117C 0002 001A             		move.b	#2,$1A(a0)
00012EEE 5068 000C                  		addq.w	#8,$C(a0)
00012EF2 317C 0200 0010             		move.w	#$200,$10(a0)
00012EF8 0828 0000 0022             		btst	#0,$22(a0)
00012EFE 6600                       		bne.s	Obj62_Sound
00012F00 4468 0010                  		neg.w	$10(a0)
00012F04                            
00012F04                            Obj62_Sound:
00012F04 303C 00AE                  		move.w	#$AE,d0
00012F08 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012F0E                            
00012F0E                            Obj62_AniFire:				; XREF: Obj62_Index
00012F0E 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012F12 0200 0007                  		andi.b	#7,d0
00012F16 6600                       		bne.s	Obj62_StopFire
00012F18 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012F1E                            
00012F1E                            Obj62_StopFire:
00012F1E 6100 B332                  		bsr.w	SpeedToPos
00012F22 0828 0000 0022             		btst	#0,$22(a0)
00012F28 6600                       		bne.s	Obj62_StopFire2
00012F2A 76F8                       		moveq	#-8,d3
00012F2C 6100 0000                  		bsr.w	ObjHitWallLeft
00012F30 4A41                       		tst.w	d1
00012F32 6B00 B394                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012F36 4E75                       		rts	
00012F38                            ; ===========================================================================
00012F38                            
00012F38                            Obj62_StopFire2:
00012F38 7608                       		moveq	#8,d3
00012F3A 6100 0000                  		bsr.w	ObjHitWallRight
00012F3E 4A41                       		tst.w	d1
00012F40 6B00 B386                  		bmi.w	DeleteObject
00012F44 4E75                       		rts	
00012F46                            ; ===========================================================================
00012F46                            ; ---------------------------------------------------------------------------
00012F46                            ; Sprite mappings - gargoyle head (LZ)
00012F46                            ; ---------------------------------------------------------------------------
00012F46                            Map_obj62:
00012F46                            	include "_maps\obj62.asm"
00012F46                            ; ---------------------------------------------------------------------------
00012F46                            ; Sprite mappings - gargoyle head (LZ)
00012F46                            ; ---------------------------------------------------------------------------
00012F46 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012F4A 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012F4E 03                         byte_12320:	dc.b 3
00012F4F F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012F54 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012F59 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012F5E 01                         byte_12330:	dc.b 1
00012F5F FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012F64 01                         byte_12336:	dc.b 1
00012F65 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012F6A                            		even
00012F6A                            		even
00012F6A                            
00012F6A                            ; ===========================================================================
00012F6A                            ; ---------------------------------------------------------------------------
00012F6A                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012F6A                            ; ---------------------------------------------------------------------------
00012F6A                            
00012F6A                            Obj63:					; XREF: Obj_Index
00012F6A 7000                       		moveq	#0,d0
00012F6C 1028 0024                  		move.b	$24(a0),d0
00012F70 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012F74 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012F78 3028 0030                  		move.w	$30(a0),d0
00012F7C 0240 FF80                  		andi.w	#$FF80,d0
00012F80 3238 F700                  		move.w	($FFFFF700).w,d1
00012F84 0441 0080                  		subi.w	#$80,d1
00012F88 0241 FF80                  		andi.w	#$FF80,d1
00012F8C 9041                       		sub.w	d1,d0
00012F8E 0C40 0280                  		cmpi.w	#$280,d0
00012F92 6200                       		bhi.s	loc_1236A
00012F94                            
00012F94                            Obj63_Display:				; XREF: loc_1236A
00012F94 6000 B2F6                  		bra.w	DisplaySprite
00012F98                            ; ===========================================================================
00012F98                            
00012F98                            loc_1236A:				; XREF: Obj63
00012F98 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012F9E 6600                       		bne.s	loc_12378
00012FA0 0C40 FF80                  		cmpi.w	#-$80,d0
00012FA4 64EE                       		bcc.s	Obj63_Display
00012FA6                            
00012FA6                            loc_12378:
00012FA6 1028 002F                  		move.b	$2F(a0),d0
00012FAA 6A00 B31C                  		bpl.w	DeleteObject
00012FAE 0240 007F                  		andi.w	#$7F,d0
00012FB2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012FB6 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012FBC 6000 B30A                  		bra.w	DeleteObject
00012FC0                            ; ===========================================================================
00012FC0 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012FC2 0000                       		dc.w loc_124B2-Obj63_Index
00012FC4 0000                       		dc.w loc_124C2-Obj63_Index
00012FC6 0000                       		dc.w loc_124DE-Obj63_Index
00012FC8                            ; ===========================================================================
00012FC8                            
00012FC8                            Obj63_Main:				; XREF: Obj63_Index
00012FC8 1028 0028                  		move.b	$28(a0),d0
00012FCC 6B00 0000                  		bmi.w	loc_12460
00012FD0 5428 0024                  		addq.b	#2,$24(a0)
00012FD4 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012FDC 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012FE2 0028 0004 0001             		ori.b	#4,1(a0)
00012FE8 117C 0010 0019             		move.b	#$10,$19(a0)
00012FEE 117C 0004 0018             		move.b	#4,$18(a0)
00012FF4 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012FFA 6600                       		bne.s	loc_123E2
00012FFC 5828 0024                  		addq.b	#4,$24(a0)
00013000 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013006 117C 0001 0018             		move.b	#1,$18(a0)
0001300C 6000 0000                  		bra.w	loc_124DE
00013010                            ; ===========================================================================
00013010                            
00013010                            loc_123E2:
00013010 117C 0004 001A             		move.b	#4,$1A(a0)
00013016 7000                       		moveq	#0,d0
00013018 1028 0028                  		move.b	$28(a0),d0
0001301C 3200                       		move.w	d0,d1
0001301E E648                       		lsr.w	#3,d0
00013020 0240 001E                  		andi.w	#$1E,d0
00013024 45FA 0000                  		lea	Obj63_Data(pc),a2
00013028 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001302C 315A 0038                  		move.w	(a2)+,$38(a0)
00013030 315A 0030                  		move.w	(a2)+,$30(a0)
00013034 214A 003C                  		move.l	a2,$3C(a0)
00013038 0241 000F                  		andi.w	#$F,d1
0001303C E549                       		lsl.w	#2,d1
0001303E 1141 0038                  		move.b	d1,$38(a0)
00013042 117C 0004 003A             		move.b	#4,$3A(a0)
00013048 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001304C 6700                       		beq.s	loc_1244C
0001304E 117C 0001 003B             		move.b	#1,$3B(a0)
00013054 4428 003A                  		neg.b	$3A(a0)
00013058 7200                       		moveq	#0,d1
0001305A 1228 0038                  		move.b	$38(a0),d1
0001305E D228 003A                  		add.b	$3A(a0),d1
00013062 B228 0039                  		cmp.b	$39(a0),d1
00013066 6500                       		bcs.s	loc_12448
00013068 1001                       		move.b	d1,d0
0001306A 7200                       		moveq	#0,d1
0001306C 4A00                       		tst.b	d0
0001306E 6A00                       		bpl.s	loc_12448
00013070 1228 0039                  		move.b	$39(a0),d1
00013074 5901                       		subq.b	#4,d1
00013076                            
00013076                            loc_12448:
00013076 1141 0038                  		move.b	d1,$38(a0)
0001307A                            
0001307A                            loc_1244C:
0001307A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013080 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013086 6100 0000                  		bsr.w	Obj63_ChangeDir
0001308A 6000 0000                  		bra.w	loc_124B2
0001308E                            ; ===========================================================================
0001308E                            
0001308E                            loc_12460:				; XREF: Obj63_Main
0001308E 1140 002F                  		move.b	d0,$2F(a0)
00013092 0240 007F                  		andi.w	#$7F,d0
00013096 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001309A 08F2 0000 0000             		bset	#0,(a2,d0.w)
000130A0 6600 B226                  		bne.w	DeleteObject
000130A4 D040                       		add.w	d0,d0
000130A6 0240 001E                  		andi.w	#$1E,d0
000130AA 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
000130B0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000130B4 321A                       		move.w	(a2)+,d1
000130B6 2248                       		movea.l	a0,a1
000130B8 6000                       		bra.s	Obj63_MakePtfms
000130BA                            ; ===========================================================================
000130BA                            
000130BA                            Obj63_Loop:
000130BA 6100 B656                  		bsr.w	SingleObjLoad
000130BE 6600                       		bne.s	loc_124AA
000130C0                            
000130C0                            Obj63_MakePtfms:			; XREF: loc_12460
000130C0 12BC 0063                  		move.b	#$63,0(a1)
000130C4 335A 0008                  		move.w	(a2)+,8(a1)
000130C8 335A 000C                  		move.w	(a2)+,$C(a1)
000130CC 301A                       		move.w	(a2)+,d0
000130CE 1340 0028                  		move.b	d0,$28(a1)
000130D2                            
000130D2                            loc_124AA:
000130D2 51C9 FFE6                  		dbf	d1,Obj63_Loop
000130D6                            
000130D6 588F                       		addq.l	#4,sp
000130D8 4E75                       		rts	
000130DA                            ; ===========================================================================
000130DA                            
000130DA                            loc_124B2:				; XREF: Obj63_Index
000130DA 7200                       		moveq	#0,d1
000130DC 1228 0019                  		move.b	$19(a0),d1
000130E0 4EB9 0000 7EB2             		jsr	(PlatformObject).l
000130E6 6000 0000                  		bra.w	sub_12502
000130EA                            ; ===========================================================================
000130EA                            
000130EA                            loc_124C2:				; XREF: Obj63_Index
000130EA 7200                       		moveq	#0,d1
000130EC 1228 0019                  		move.b	$19(a0),d1
000130F0 4EB9 0000 8026             		jsr	(ExitPlatform).l
000130F6 3F28 0008                  		move.w	8(a0),-(sp)
000130FA 6100 0000                  		bsr.w	sub_12502
000130FE 341F                       		move.w	(sp)+,d2
00013100 4EF9 0000 8590             		jmp	(MvSonicOnPtfm2).l
00013106                            ; ===========================================================================
00013106                            
00013106                            loc_124DE:				; XREF: Obj63_Index
00013106 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001310A 0240 0003                  		andi.w	#3,d0
0001310E 6600                       		bne.s	loc_124FC
00013110 7201                       		moveq	#1,d1
00013112 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013116 6700                       		beq.s	loc_124F2
00013118 4401                       		neg.b	d1
0001311A                            
0001311A                            loc_124F2:
0001311A D328 001A                  		add.b	d1,$1A(a0)
0001311E 0228 0003 001A             		andi.b	#3,$1A(a0)
00013124                            
00013124                            loc_124FC:
00013124 588F                       		addq.l	#4,sp
00013126 6000 D206                  		bra.w	MarkObjGone
0001312A                            
0001312A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001312A                            
0001312A                            
0001312A                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001312A 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001312E 6700                       		beq.s	loc_12520
00013130 4A28 003B                  		tst.b	$3B(a0)
00013134 6600                       		bne.s	loc_12520
00013136 117C 0001 003B             		move.b	#1,$3B(a0)
0001313C 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013142 4428 003A                  		neg.b	$3A(a0)
00013146 6000                       		bra.s	loc_12534
00013148                            ; ===========================================================================
00013148                            
00013148                            loc_12520:
00013148 3028 0008                  		move.w	8(a0),d0
0001314C B068 0034                  		cmp.w	$34(a0),d0
00013150 6600                       		bne.s	loc_1256A
00013152 3028 000C                  		move.w	$C(a0),d0
00013156 B068 0036                  		cmp.w	$36(a0),d0
0001315A 6600                       		bne.s	loc_1256A
0001315C                            
0001315C                            loc_12534:
0001315C 7200                       		moveq	#0,d1
0001315E 1228 0038                  		move.b	$38(a0),d1
00013162 D228 003A                  		add.b	$3A(a0),d1
00013166 B228 0039                  		cmp.b	$39(a0),d1
0001316A 6500                       		bcs.s	loc_12552
0001316C 1001                       		move.b	d1,d0
0001316E 7200                       		moveq	#0,d1
00013170 4A00                       		tst.b	d0
00013172 6A00                       		bpl.s	loc_12552
00013174 1228 0039                  		move.b	$39(a0),d1
00013178 5901                       		subq.b	#4,d1
0001317A                            
0001317A                            loc_12552:
0001317A 1141 0038                  		move.b	d1,$38(a0)
0001317E 2268 003C                  		movea.l	$3C(a0),a1
00013182 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013188 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001318E 6100 0000                  		bsr.w	Obj63_ChangeDir
00013192                            
00013192                            loc_1256A:
00013192 6100 B0BE                  		bsr.w	SpeedToPos
00013196 4E75                       		rts	
00013198                            ; End of function sub_12502
00013198                            
00013198                            
00013198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013198                            
00013198                            
00013198                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013198 7000                       		moveq	#0,d0
0001319A 343C FF00                  		move.w	#-$100,d2
0001319E 3028 0008                  		move.w	8(a0),d0
000131A2 9068 0034                  		sub.w	$34(a0),d0
000131A6 6400                       		bcc.s	loc_12584
000131A8 4440                       		neg.w	d0
000131AA 4442                       		neg.w	d2
000131AC                            
000131AC                            loc_12584:
000131AC 7200                       		moveq	#0,d1
000131AE 363C FF00                  		move.w	#-$100,d3
000131B2 3228 000C                  		move.w	$C(a0),d1
000131B6 9268 0036                  		sub.w	$36(a0),d1
000131BA 6400                       		bcc.s	loc_12598
000131BC 4441                       		neg.w	d1
000131BE 4443                       		neg.w	d3
000131C0                            
000131C0                            loc_12598:
000131C0 B240                       		cmp.w	d0,d1
000131C2 6500                       		bcs.s	loc_125C2
000131C4 3028 0008                  		move.w	8(a0),d0
000131C8 9068 0034                  		sub.w	$34(a0),d0
000131CC 6700                       		beq.s	loc_125AE
000131CE 48C0                       		ext.l	d0
000131D0 E180                       		asl.l	#8,d0
000131D2 81C1                       		divs.w	d1,d0
000131D4 4440                       		neg.w	d0
000131D6                            
000131D6                            loc_125AE:
000131D6 3140 0010                  		move.w	d0,$10(a0)
000131DA 3143 0012                  		move.w	d3,$12(a0)
000131DE 4840                       		swap	d0
000131E0 3140 000A                  		move.w	d0,$A(a0)
000131E4 4268 000E                  		clr.w	$E(a0)
000131E8 4E75                       		rts	
000131EA                            ; ===========================================================================
000131EA                            
000131EA                            loc_125C2:				; XREF: Obj63_ChangeDir
000131EA 3228 000C                  		move.w	$C(a0),d1
000131EE 9268 0036                  		sub.w	$36(a0),d1
000131F2 6700                       		beq.s	loc_125D4
000131F4 48C1                       		ext.l	d1
000131F6 E181                       		asl.l	#8,d1
000131F8 83C0                       		divs.w	d0,d1
000131FA 4441                       		neg.w	d1
000131FC                            
000131FC                            loc_125D4:
000131FC 3141 0012                  		move.w	d1,$12(a0)
00013200 3142 0010                  		move.w	d2,$10(a0)
00013204 4841                       		swap	d1
00013206 3141 000E                  		move.w	d1,$E(a0)
0001320A 4268 000A                  		clr.w	$A(a0)
0001320E 4E75                       		rts	
00013210                            ; End of function Obj63_ChangeDir
00013210                            
00013210                            ; ===========================================================================
00013210 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013212 0000                       		dc.w word_12610-Obj63_Data
00013214 0000                       		dc.w word_12628-Obj63_Data
00013216 0000                       		dc.w word_1263C-Obj63_Data
00013218 0000                       		dc.w word_12650-Obj63_Data
0001321A 0000                       		dc.w word_12668-Obj63_Data
0001321C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001322C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013238 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013248 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013250 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013264 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013278 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013290 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000132A4                            
000132A4                            ; ---------------------------------------------------------------------------
000132A4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000132A4                            ; ---------------------------------------------------------------------------
000132A4                            Map_obj63:
000132A4                            	include "_maps\obj63.asm"
000132A4                            ; ---------------------------------------------------------------------------
000132A4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000132A4                            ; ---------------------------------------------------------------------------
000132A4 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000132A8 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000132AC 0000                       		dc.w byte_1269E-Map_obj63
000132AE 01                         byte_12686:	dc.b 1
000132AF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000132B4 01                         byte_1268C:	dc.b 1
000132B5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000132BA 01                         byte_12692:	dc.b 1
000132BB F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000132C0 01                         byte_12698:	dc.b 1
000132C1 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000132C6 01                         byte_1269E:	dc.b 1
000132C7 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000132CC                            		even
000132CC                            		even
000132CC                            
000132CC                            ; ===========================================================================
000132CC                            ; ---------------------------------------------------------------------------
000132CC                            ; Object 64 - bubbles (LZ)
000132CC                            ; ---------------------------------------------------------------------------
000132CC                            
000132CC                            Obj64:					; XREF: Obj_Index
000132CC 7000                       		moveq	#0,d0
000132CE 1028 0024                  		move.b	$24(a0),d0
000132D2 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000132D6 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000132DA                            ; ===========================================================================
000132DA 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000132DC 0000                       		dc.w Obj64_Animate-Obj64_Index
000132DE 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000132E0 0000                       		dc.w Obj64_Display2-Obj64_Index
000132E2 0000                       		dc.w Obj64_Delete3-Obj64_Index
000132E4 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000132E6                            ; ===========================================================================
000132E6                            
000132E6                            Obj64_Main:				; XREF: Obj64_Index
000132E6 5428 0024                  		addq.b	#2,$24(a0)
000132EA 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000132F2 317C 8348 0002             		move.w	#$8348,2(a0)
000132F8 117C 0084 0001             		move.b	#$84,1(a0)
000132FE 117C 0010 0019             		move.b	#$10,$19(a0)
00013304 117C 0001 0018             		move.b	#1,$18(a0)
0001330A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001330E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00013310 5028 0024                  		addq.b	#8,$24(a0)
00013314 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00013318 1140 0032                  		move.b	d0,$32(a0)
0001331C 1140 0033                  		move.b	d0,$33(a0)
00013320 117C 0006 001C             		move.b	#6,$1C(a0)
00013326 6000 0000                  		bra.w	Obj64_BblMaker
0001332A                            ; ===========================================================================
0001332A                            
0001332A                            Obj64_Bubble:				; XREF: Obj64_Main
0001332A 1140 001C                  		move.b	d0,$1C(a0)
0001332E 3168 0008 0030             		move.w	8(a0),$30(a0)
00013334 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
0001333A 4EB9 0000 2D48             		jsr	(RandomNumber).l
00013340 1140 0026                  		move.b	d0,$26(a0)
00013344                            
00013344                            Obj64_Animate:				; XREF: Obj64_Index
00013344 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001334A 4EB9 0000 B2E4             		jsr	AnimateSprite
00013350 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013356 6600                       		bne.s	Obj64_ChkWater
00013358 117C 0001 002E             		move.b	#1,$2E(a0)
0001335E                            
0001335E                            Obj64_ChkWater:				; XREF: Obj64_Index
0001335E 3038 F646                  		move.w	($FFFFF646).w,d0
00013362 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013366 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013368                            
00013368                            Obj64_Burst:				; XREF: Obj64_Wobble
00013368 117C 0006 0024             		move.b	#6,$24(a0)
0001336E 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013372 6000 0000                  		bra.w	Obj64_Display2
00013376                            ; ===========================================================================
00013376                            
00013376                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013376 1028 0026                  		move.b	$26(a0),d0
0001337A 5228 0026                  		addq.b	#1,$26(a0)
0001337E 0240 007F                  		andi.w	#$7F,d0
00013382 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013388 1031 0000                  		move.b	(a1,d0.w),d0
0001338C 4880                       		ext.w	d0
0001338E D068 0030                  		add.w	$30(a0),d0
00013392 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013396 4A28 002E                  		tst.b	$2E(a0)
0001339A 6700                       		beq.s	Obj64_Display
0001339C 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000133A0 6700                       		beq.s	Obj64_Display	; if not, branch
000133A2                            
000133A2 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000133A6 303C 00AD                  		move.w	#$AD,d0
000133AA 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000133B0 43F8 D000                  		lea	($FFFFD000).w,a1
000133B4 4269 0010                  		clr.w	$10(a1)
000133B8 4269 0012                  		clr.w	$12(a1)
000133BC 4269 0014                  		clr.w	$14(a1)
000133C0 137C 0015 001C             		move.b	#$15,$1C(a1)
000133C6 337C 0023 003E             		move.w	#$23,$3E(a1)
000133CC 137C 0000 003C             		move.b	#0,$3C(a1)
000133D2 08A9 0005 0022             		bclr	#5,$22(a1)
000133D8 08A9 0004 0022             		bclr	#4,$22(a1)
000133DE 0829 0002 0022             		btst	#2,$22(a1)
000133E4 6700 FF82                  		beq.w	Obj64_Burst
000133E8 08A9 0002 0022             		bclr	#2,$22(a1)
000133EE 137C 0013 0016             		move.b	#$13,$16(a1)
000133F4 137C 0009 0017             		move.b	#9,$17(a1)
000133FA 5B69 000C                  		subq.w	#5,$C(a1)
000133FE 6000 FF68                  		bra.w	Obj64_Burst
00013402                            ; ===========================================================================
00013402                            
00013402                            Obj64_Display:				; XREF: Obj64_Wobble
00013402 6100 AE4E                  		bsr.w	SpeedToPos
00013406 4A28 0001                  		tst.b	1(a0)
0001340A 6A00                       		bpl.s	Obj64_Delete
0001340C 4EFA AE7E                  		jmp	DisplaySprite
00013410                            ; ===========================================================================
00013410                            
00013410                            Obj64_Delete:
00013410 4EFA AEB6                  		jmp	DeleteObject
00013414                            ; ===========================================================================
00013414                            
00013414                            Obj64_Display2:				; XREF: Obj64_Index
00013414 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001341A 4EB9 0000 B2E4             		jsr	AnimateSprite
00013420 4A28 0001                  		tst.b	1(a0)
00013424 6A00                       		bpl.s	Obj64_Delete2
00013426 4EFA AE64                  		jmp	DisplaySprite
0001342A                            ; ===========================================================================
0001342A                            
0001342A                            Obj64_Delete2:
0001342A 4EFA AE9C                  		jmp	DeleteObject
0001342E                            ; ===========================================================================
0001342E                            
0001342E                            Obj64_Delete3:				; XREF: Obj64_Index
0001342E 6000 AE98                  		bra.w	DeleteObject
00013432                            ; ===========================================================================
00013432                            
00013432                            Obj64_BblMaker:				; XREF: Obj64_Index
00013432 4A68 0036                  		tst.w	$36(a0)
00013436 6600                       		bne.s	loc_12874
00013438 3038 F646                  		move.w	($FFFFF646).w,d0
0001343C B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013440 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013444 4A28 0001                  		tst.b	1(a0)
00013448 6A00 0000                  		bpl.w	Obj64_ChkDel
0001344C 5368 0038                  		subq.w	#1,$38(a0)
00013450 6A00 0000                  		bpl.w	loc_12914
00013454 317C 0001 0036             		move.w	#1,$36(a0)
0001345A                            
0001345A                            loc_1283A:
0001345A 4EB9 0000 2D48             		jsr	(RandomNumber).l
00013460 3200                       		move.w	d0,d1
00013462 0240 0007                  		andi.w	#7,d0
00013466 0C40 0006                  		cmpi.w	#6,d0
0001346A 64EE                       		bcc.s	loc_1283A
0001346C                            
0001346C 1140 0034                  		move.b	d0,$34(a0)
00013470 0241 000C                  		andi.w	#$C,d1
00013474 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001347A D2C1                       		adda.w	d1,a1
0001347C 2149 003C                  		move.l	a1,$3C(a0)
00013480 5328 0032                  		subq.b	#1,$32(a0)
00013484 6A00                       		bpl.s	loc_12872
00013486 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001348C 08E8 0007 0036             		bset	#7,$36(a0)
00013492                            
00013492                            loc_12872:
00013492 6000                       		bra.s	loc_1287C
00013494                            ; ===========================================================================
00013494                            
00013494                            loc_12874:				; XREF: Obj64_BblMaker
00013494 5368 0038                  		subq.w	#1,$38(a0)
00013498 6A00 0000                  		bpl.w	loc_12914
0001349C                            
0001349C                            loc_1287C:
0001349C 4EB9 0000 2D48             		jsr	(RandomNumber).l
000134A2 0240 001F                  		andi.w	#$1F,d0
000134A6 3140 0038                  		move.w	d0,$38(a0)
000134AA 6100 B266                  		bsr.w	SingleObjLoad
000134AE 6600                       		bne.s	loc_128F8
000134B0 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000134B4 3368 0008 0008             		move.w	8(a0),8(a1)
000134BA 4EB9 0000 2D48             		jsr	(RandomNumber).l
000134C0 0240 000F                  		andi.w	#$F,d0
000134C4 5140                       		subq.w	#8,d0
000134C6 D169 0008                  		add.w	d0,8(a1)
000134CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000134D0 7000                       		moveq	#0,d0
000134D2 1028 0034                  		move.b	$34(a0),d0
000134D6 2468 003C                  		movea.l	$3C(a0),a2
000134DA 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000134E0 0828 0007 0036             		btst	#7,$36(a0)
000134E6 6700                       		beq.s	loc_128F8
000134E8 4EB9 0000 2D48             		jsr	(RandomNumber).l
000134EE 0240 0003                  		andi.w	#3,d0
000134F2 6600                       		bne.s	loc_128E4
000134F4 08E8 0006 0036             		bset	#6,$36(a0)
000134FA 6600                       		bne.s	loc_128F8
000134FC 137C 0002 0028             		move.b	#2,$28(a1)
00013502                            
00013502                            loc_128E4:
00013502 4A28 0034                  		tst.b	$34(a0)
00013506 6600                       		bne.s	loc_128F8
00013508 08E8 0006 0036             		bset	#6,$36(a0)
0001350E 6600                       		bne.s	loc_128F8
00013510 137C 0002 0028             		move.b	#2,$28(a1)
00013516                            
00013516                            loc_128F8:
00013516 5328 0034                  		subq.b	#1,$34(a0)
0001351A 6A00                       		bpl.s	loc_12914
0001351C 4EB9 0000 2D48             		jsr	(RandomNumber).l
00013522 0240 007F                  		andi.w	#$7F,d0
00013526 0640 0080                  		addi.w	#$80,d0
0001352A D168 0038                  		add.w	d0,$38(a0)
0001352E 4268 0036                  		clr.w	$36(a0)
00013532                            
00013532                            loc_12914:
00013532 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013538 4EB9 0000 B2E4             		jsr	AnimateSprite
0001353E                            
0001353E                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001353E 3028 0008                  		move.w	8(a0),d0
00013542 0240 FF80                  		andi.w	#$FF80,d0
00013546 3238 F700                  		move.w	($FFFFF700).w,d1
0001354A 0441 0080                  		subi.w	#$80,d1
0001354E 0241 FF80                  		andi.w	#$FF80,d1
00013552 9041                       		sub.w	d1,d0
00013554 0C40 0280                  		cmpi.w	#$280,d0
00013558 6200 AD6E                  		bhi.w	DeleteObject
0001355C 3038 F646                  		move.w	($FFFFF646).w,d0
00013560 B068 000C                  		cmp.w	$C(a0),d0
00013564 6500 AD26                  		bcs.w	DisplaySprite
00013568 4E75                       		rts	
0001356A                            ; ===========================================================================
0001356A                            ; bubble production sequence
0001356A                            
0001356A                            ; 0 = small bubble, 1 =	large bubble
0001356A                            
0001356A 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001357C                            
0001357C                            ; ===========================================================================
0001357C                            
0001357C                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001357C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013580 6B00                       		bmi.s	loc_12998
00013582 43F8 D000                  		lea	($FFFFD000).w,a1
00013586 3029 0008                  		move.w	8(a1),d0
0001358A 3228 0008                  		move.w	8(a0),d1
0001358E 0441 0010                  		subi.w	#$10,d1
00013592 B240                       		cmp.w	d0,d1
00013594 6400                       		bcc.s	loc_12998
00013596 0641 0020                  		addi.w	#$20,d1
0001359A B240                       		cmp.w	d0,d1
0001359C 6500                       		bcs.s	loc_12998
0001359E 3029 000C                  		move.w	$C(a1),d0
000135A2 3228 000C                  		move.w	$C(a0),d1
000135A6 B240                       		cmp.w	d0,d1
000135A8 6400                       		bcc.s	loc_12998
000135AA 0641 0010                  		addi.w	#$10,d1
000135AE B240                       		cmp.w	d0,d1
000135B0 6500                       		bcs.s	loc_12998
000135B2 7001                       		moveq	#1,d0
000135B4 4E75                       		rts	
000135B6                            ; ===========================================================================
000135B6                            
000135B6                            loc_12998:
000135B6 7000                       		moveq	#0,d0
000135B8 4E75                       		rts	
000135BA                            ; ===========================================================================
000135BA                            Ani_obj64:
000135BA                            	include "_anim\obj64.asm"
000135BA                            ; ---------------------------------------------------------------------------
000135BA                            ; Animation script - bubbles (LZ)
000135BA                            ; ---------------------------------------------------------------------------
000135BA 0000                       		dc.w byte_129AA-Ani_obj64
000135BC 0000                       		dc.w byte_129B0-Ani_obj64
000135BE 0000                       		dc.w byte_129B6-Ani_obj64
000135C0 0000                       		dc.w byte_129BE-Ani_obj64
000135C2 0000                       		dc.w byte_129BE-Ani_obj64
000135C4 0000                       		dc.w byte_129C0-Ani_obj64
000135C6 0000                       		dc.w byte_129C6-Ani_obj64
000135C8 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000135CE 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000135D4 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000135DC 04FC                       byte_129BE:	dc.b 4,	$FC
000135DE 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000135E4 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000135EA 00                         		even
000135EA 00                         		even
000135EA                            
000135EA                            ; ---------------------------------------------------------------------------
000135EA                            ; Sprite mappings - bubbles (LZ)
000135EA                            ; ---------------------------------------------------------------------------
000135EA                            Map_obj64:
000135EA                            	include "_maps\obj64.asm"
000135EA                            ; ---------------------------------------------------------------------------
000135EA                            ; Sprite mappings - bubbles (LZ)
000135EA                            ; ---------------------------------------------------------------------------
000135EA 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000135EE 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000135F2 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000135F6 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000135FA 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000135FE 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013602 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013606 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
0001360A 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001360E 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013612 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013616 0000                       		dc.w byte_12A9C-Map_obj64
00013618 01                         byte_129FA:	dc.b 1
00013619 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001361E 01                         byte_12A00:	dc.b 1
0001361F FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013624 01                         byte_12A06:	dc.b 1
00013625 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
0001362A 01                         byte_12A0C:	dc.b 1
0001362B F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013630 01                         byte_12A12:	dc.b 1
00013631 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013636 01                         byte_12A18:	dc.b 1
00013637 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001363C 01                         byte_12A1E:	dc.b 1
0001363D F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013642 04                         byte_12A24:	dc.b 4
00013643 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013648 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001364D 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013652 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013657 04                         byte_12A39:	dc.b 4
00013658 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001365D F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013662 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013667 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001366C 01                         byte_12A4E:	dc.b 1
0001366D F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013672 01                         byte_12A54:	dc.b 1
00013673 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013678 01                         byte_12A5A:	dc.b 1
00013679 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001367E 01                         byte_12A60:	dc.b 1
0001367F F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013684 01                         byte_12A66:	dc.b 1
00013685 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001368A 01                         byte_12A6C:	dc.b 1
0001368B F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013690 01                         byte_12A72:	dc.b 1
00013691 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013696 01                         byte_12A78:	dc.b 1
00013697 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001369C 01                         byte_12A7E:	dc.b 1
0001369D F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000136A2 01                         byte_12A84:	dc.b 1
000136A3 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000136A8 01                         byte_12A8A:	dc.b 1
000136A9 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000136AE 01                         byte_12A90:	dc.b 1
000136AF F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000136B4 01                         byte_12A96:	dc.b 1
000136B5 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000136BA 00                         byte_12A9C:	dc.b 0
000136BC 00                         		even
000136BC 00                         		even
000136BC                            
000136BC                            ; ===========================================================================
000136BC                            ; ---------------------------------------------------------------------------
000136BC                            ; Object 65 - waterfalls (LZ)
000136BC                            ; ---------------------------------------------------------------------------
000136BC                            
000136BC                            Obj65:					; XREF: Obj_Index
000136BC 7000                       		moveq	#0,d0
000136BE 1028 0024                  		move.b	$24(a0),d0
000136C2 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000136C6 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000136CA                            ; ===========================================================================
000136CA 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000136CC 0000                       		dc.w Obj65_Animate-Obj65_Index
000136CE 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000136D0 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000136D2 0000                       		dc.w loc_12B36-Obj65_Index
000136D4                            ; ===========================================================================
000136D4                            
000136D4                            Obj65_Main:				; XREF: Obj65_Index
000136D4 5828 0024                  		addq.b	#4,$24(a0)
000136D8 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000136E0 317C 4259 0002             		move.w	#$4259,2(a0)
000136E6 0028 0004 0001             		ori.b	#4,1(a0)
000136EC 117C 0018 0019             		move.b	#$18,$19(a0)
000136F2 117C 0001 0018             		move.b	#1,$18(a0)
000136F8 1028 0028                  		move.b	$28(a0),d0	; get object type
000136FC 6A00                       		bpl.s	loc_12AE6
000136FE 08E8 0007 0002             		bset	#7,2(a0)
00013704                            
00013704                            loc_12AE6:
00013704 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013708 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
0001370C 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013710 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013712 4228 0018                  		clr.b	$18(a0)
00013716 5528 0024                  		subq.b	#2,$24(a0)
0001371A 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013720 6700                       		beq.s	loc_12B0A	; if not, branch
00013722 117C 0006 0024             		move.b	#6,$24(a0)
00013728                            
00013728                            loc_12B0A:
00013728 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001372E 6700                       		beq.s	Obj65_Animate	; if not, branch
00013730 117C 0008 0024             		move.b	#8,$24(a0)
00013736                            
00013736                            Obj65_Animate:				; XREF: Obj65_Index
00013736 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001373C 4EB9 0000 B2E4             		jsr	AnimateSprite
00013742                            
00013742                            Obj65_ChkDel:				; XREF: Obj65_Index
00013742 6000 CBEA                  		bra.w	MarkObjGone
00013746                            ; ===========================================================================
00013746                            
00013746                            Obj65_FixHeight:			; XREF: Obj65_Index
00013746 3038 F646                  		move.w	($FFFFF646).w,d0
0001374A 0440 0010                  		subi.w	#$10,d0
0001374E 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013752 60E2                       		bra.s	Obj65_Animate
00013754                            ; ===========================================================================
00013754                            
00013754                            loc_12B36:				; XREF: Obj65_Index
00013754 08A8 0007 0002             		bclr	#7,2(a0)
0001375A 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013760 6600                       		bne.s	Obj65_Animate2
00013762 08E8 0007 0002             		bset	#7,2(a0)
00013768                            
00013768                            Obj65_Animate2:
00013768 60CC                       		bra.s	Obj65_Animate
0001376A                            ; ===========================================================================
0001376A                            Ani_obj65:
0001376A                            	include "_anim\obj65.asm"
0001376A                            ; ---------------------------------------------------------------------------
0001376A                            ; Animation script - waterfall (LZ)
0001376A                            ; ---------------------------------------------------------------------------
0001376A 0000                       		dc.w byte_12B4E-Ani_obj65
0001376C 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013772 00                         		even
00013772 00                         		even
00013772                            
00013772                            ; ---------------------------------------------------------------------------
00013772                            ; Sprite mappings - waterfalls (LZ)
00013772                            ; ---------------------------------------------------------------------------
00013772                            Map_obj65:
00013772                            	include "_maps\obj65.asm"
00013772                            ; ---------------------------------------------------------------------------
00013772                            ; Sprite mappings - waterfalls (LZ)
00013772                            ; ---------------------------------------------------------------------------
00013772 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013776 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001377A 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001377E 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013782 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013786 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001378A 01                         byte_12B6C:	dc.b 1
0001378B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013790 02                         byte_12B72:	dc.b 2
00013791 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013796 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001379B 02                         byte_12B7D:	dc.b 2
0001379C F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000137A1 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000137A6 01                         byte_12B88:	dc.b 1
000137A7 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000137AC 02                         byte_12B8E:	dc.b 2
000137AD F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000137B2 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000137B7 01                         byte_12B99:	dc.b 1
000137B8 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000137BD 01                         byte_12B9F:	dc.b 1
000137BE F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000137C3 01                         byte_12BA5:	dc.b 1
000137C4 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000137C9 02                         byte_12BAB:	dc.b 2
000137CA F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000137CF 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000137D4 02                         byte_12BB6:	dc.b 2
000137D5 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000137DA F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000137DF 02                         byte_12BC1:	dc.b 2
000137E0 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000137E5 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000137EA 02                         byte_12BCC:	dc.b 2
000137EB F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000137F0 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000137F6 00                         		even
000137F6 00                         		even
000137F6                            
000137F6                            ; ===========================================================================
000137F6                            ; ---------------------------------------------------------------------------
000137F6                            ; Object 01 - Sonic
000137F6                            ; ---------------------------------------------------------------------------
000137F6                            
000137F6                            Obj01:					; XREF: Obj_Index
000137F6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000137FA 6700                       		beq.s	Obj01_Normal	; if not, branch
000137FC 4EF9 0000 0000             		jmp	DebugMode
00013802                            ; ===========================================================================
00013802                            
00013802                            Obj01_Normal:
00013802 7000                       		moveq	#0,d0
00013804 1028 0024                  		move.b	$24(a0),d0
00013808 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001380C 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013810                            ; ===========================================================================
00013810 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013812 0000                       		dc.w Obj01_Control-Obj01_Index
00013814 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013816 0000                       		dc.w Obj01_Death-Obj01_Index
00013818 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001381A                            ; ===========================================================================
0001381A                            
0001381A                            Player_Maps:
0001381A 0000 0000                  	dc.l	Map_Sonic
0001381E 0000 0000                  	dc.l	Map_Sonic ; gronic
00013822 0000 0000                  	dc.l	Map_Sonic ; anakama
00013826 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
0001382A                            	; insert player mapping here
0001382A                            	
0001382A                            Obj01_Main:				; XREF: Obj01_Index
0001382A 5428 0024                  		addq.b	#2,$24(a0)
0001382E 117C 0013 0016             		move.b	#$13,$16(a0)
00013834 117C 0009 0017             		move.b	#9,$17(a0)
0001383A                            		
0001383A 7000                       		moveq	#0,d0
0001383C 1038 FFE8                  		move.b	(v_character),d0
00013840 E548                       		lsl.w	#2,d0
00013842 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013846 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
0001384C                            		
0001384C 317C 0780 0002             		move.w	#$780,2(a0)
00013852 117C 0002 0018             		move.b	#2,$18(a0)
00013858 117C 0018 0019             		move.b	#$18,$19(a0)
0001385E 117C 0004 0001             		move.b	#4,1(a0)
00013864 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001386A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013870 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013876                            
00013876                            Obj01_Control:				; XREF: Obj01_Index
00013876 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001387A 6700                       		beq.s	loc_12C58	; if not, branch
0001387C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013882 6700                       		beq.s	loc_12C58	; if not, branch
00013884 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001388A 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001388E 4E75                       		rts	
00013890                            ; ===========================================================================
00013890                            
00013890                            loc_12C58:
00013890 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013894 6600                       		bne.s	loc_12C64	; if yes, branch
00013896 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
0001389C                            
0001389C                            loc_12C64:
0001389C 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000138A2 6600                       		bne.s	loc_12C7E	; if yes, branch
000138A4 7000                       		moveq	#0,d0
000138A6 1028 0022                  		move.b	$22(a0),d0
000138AA 0240 0006                  		andi.w	#6,d0
000138AE 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000138B2 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000138B6                            
000138B6                            loc_12C7E:
000138B6 6100                       		bsr.s	Sonic_Display
000138B8 6100 0000                  		bsr.w	Sonic_RecordPos
000138BC 6100 0000                  		bsr.w	Sonic_Water
000138C0 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000138C6 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000138CC 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000138D0 6700                       		beq.s	loc_12CA6
000138D2 4A28 001C                  		tst.b	$1C(a0)
000138D6 6600                       		bne.s	loc_12CA6
000138D8 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000138DE                            
000138DE                            loc_12CA6:
000138DE 6100 0000                  		bsr.w	Sonic_Animate
000138E2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000138E6 6B00                       		bmi.s	loc_12CB6
000138E8 4EB9 0000 0000             		jsr	TouchResponse
000138EE                            
000138EE                            loc_12CB6:
000138EE 6100 0000                  		bsr.w	Sonic_Loops
000138F2 6100 0000                  		bsr.w	LoadSonicDynPLC
000138F6 4E75                       		rts	
000138F8                            ; ===========================================================================
000138F8 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000138FA 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000138FC 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000138FE 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013900                            ; ---------------------------------------------------------------------------
00013900                            ; Music	to play	after invincibility wears off
00013900                            ; ---------------------------------------------------------------------------
00013900                            ; ===========================================================================
00013900                            
00013900                            Sonic_Display:				; XREF: loc_12C7E
00013900 3028 0030                  		move.w	$30(a0),d0
00013904 6700                       		beq.s	Obj01_Display
00013906 5368 0030                  		subq.w	#1,$30(a0)
0001390A E648                       		lsr.w	#3,d0
0001390C 6400                       		bcc.s	Obj01_ChkInvin
0001390E                            
0001390E                            Obj01_Display:
0001390E 4EBA A97C                  		jsr	DisplaySprite
00013912                            
00013912                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013912                             
00013912                            Obj01_ChkInvin:
00013912 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013916 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
0001391A 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001391E 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013922 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013926 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001392A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001392E 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013932 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013938 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001393C 7000                       		moveq	#0,d0
0001393E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013942                             
00013942 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013948 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001394A 43F9 0000 3DCC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013950 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013952                             
00013952                            Obj01_GetBgm2:
00013952 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013958 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001395A 43F9 0000 3DD4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013960 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013962                             
00013962                            Obj01_GetBgm3:
00013962 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013968 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001396A 43F9 0000 3DDC             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013970 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013972                             
00013972                            Obj01_GetBgm4:
00013972 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013978 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001397A 43F9 0000 3DE4             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013980                             
00013980                            Obj01_PlayMusic:
00013980 1031 0000                  		move.b	(a1,d0.w),d0
00013984 4EB9 0000 15CE             		jsr	(PlaySound).l	; play normal music
0001398A                             
0001398A                            ; NineKode ends here.
0001398A                            
0001398A                            Obj01_RmvInvin:
0001398A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013990                            
00013990                            Obj01_ChkShoes:
00013990 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013994 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013996 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
0001399A 6700                       		beq.s	Obj01_ExitChk
0001399C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000139A0 6600                       		bne.s	Obj01_ExitChk
000139A2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000139A8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000139AE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000139B4 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000139BA 303C 00E3                  		move.w	#$E3,d0
000139BE 4EF9 0000 15CE             		jmp	(PlaySound).l	; run music at normal speed
000139C4                            ; ===========================================================================
000139C4                            
000139C4                            Obj01_ExitChk:
000139C4 4E75                       		rts	
000139C6                            
000139C6                            ; ---------------------------------------------------------------------------
000139C6                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000139C6                            ; ---------------------------------------------------------------------------
000139C6                            
000139C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139C6                            
000139C6                            
000139C6                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000139C6 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000139CA 43F8 CB00                  		lea	($FFFFCB00).w,a1
000139CE 43F1 0000                  		lea	(a1,d0.w),a1
000139D2 32E8 0008                  		move.w	8(a0),(a1)+
000139D6 32E8 000C                  		move.w	$C(a0),(a1)+
000139DA 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000139DE 4E75                       		rts	
000139E0                            ; End of function Sonic_RecordPos
000139E0                            
000139E0                            ; ---------------------------------------------------------------------------
000139E0                            ; Subroutine for Sonic when he's underwater
000139E0                            ; ---------------------------------------------------------------------------
000139E0                            
000139E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139E0                            
000139E0                            
000139E0                            Sonic_Water:				; XREF: loc_12C7E
000139E0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000139E6 6700                       		beq.s	Obj01_InWater	; if yes, branch
000139E8                            
000139E8                            locret_12D80:
000139E8 4E75                       		rts	
000139EA                            ; ===========================================================================
000139EA                            
000139EA                            Obj01_InWater:
000139EA 3038 F646                  		move.w	($FFFFF646).w,d0
000139EE B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000139F2 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000139F4 08E8 0006 0022             		bset	#6,$22(a0)
000139FA 66EC                       		bne.s	locret_12D80
000139FC 6100 0000                  		bsr.w	ResumeMusic
00013A00 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013A06 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013A0C 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013A12 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013A18 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013A1E E0E8 0010                  		asr	$10(a0)
00013A22 E0E8 0012                  		asr	$12(a0)
00013A26 E0E8 0012                  		asr	$12(a0)
00013A2A 67BC                       		beq.s	locret_12D80
00013A2C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013A32 303C 00AA                  		move.w	#$AA,d0
00013A36 4EF9 0000 15D4             		jmp	(PlaySound_Special).l ;	play splash sound
00013A3C                            ; ===========================================================================
00013A3C                            
00013A3C                            Obj01_OutWater:
00013A3C 08A8 0006 0022             		bclr	#6,$22(a0)
00013A42 67A4                       		beq.s	locret_12D80
00013A44 6100 0000                  		bsr.w	ResumeMusic
00013A48 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013A4E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013A54 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013A5A E1E8 0012                  		asl	$12(a0)
00013A5E 6700 FF88                  		beq.w	locret_12D80
00013A62 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013A68 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013A6E 6E00                       		bgt.s	loc_12E0E
00013A70 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013A76                            
00013A76                            loc_12E0E:
00013A76 303C 00AA                  		move.w	#$AA,d0
00013A7A 4EF9 0000 15D4             		jmp	(PlaySound_Special).l ;	play splash sound
00013A80                            ; End of function Sonic_Water
00013A80                            
00013A80                            ; ===========================================================================
00013A80                            ; ---------------------------------------------------------------------------
00013A80                            ; Modes	for controlling	Sonic
00013A80                            ; ---------------------------------------------------------------------------
00013A80                            
00013A80                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013A80 6100 0000                  		bsr.w	Sonic_Jump
00013A84 6100 0000                  		bsr.w	Sonic_SlopeResist
00013A88 6100 0000                  		bsr.w	Sonic_Move
00013A8C 6100 0000                  		bsr.w	Sonic_Roll
00013A90 6100 0000                  		bsr.w	Sonic_LevelBound
00013A94 4EBA A7BC                  		jsr	SpeedToPos
00013A98 6100 0000                  		bsr.w	Sonic_AnglePos
00013A9C 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013AA0 4E75                       		rts	
00013AA2                            ; ===========================================================================
00013AA2                            
00013AA2                            Obj01_MdJump:				; XREF: Obj01_Modes
00013AA2 6100 0000                  		bsr.w	Sonic_JumpHeight
00013AA6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013AAA 6100 0000                  		bsr.w	Sonic_LevelBound
00013AAE 4EBA A740                  		jsr	ObjectFall
00013AB2 0828 0006 0022             		btst	#6,$22(a0)
00013AB8 6700                       		beq.s	loc_12E5C
00013ABA 0468 0028 0012             		subi.w	#$28,$12(a0)
00013AC0                            
00013AC0                            loc_12E5C:
00013AC0 6100 0000                  		bsr.w	Sonic_JumpAngle
00013AC4 6100 0000                  		bsr.w	Sonic_Floor
00013AC8 4E75                       		rts	
00013ACA                            ; ===========================================================================
00013ACA                            
00013ACA                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013ACA 6100 0000                  		bsr.w	Sonic_Jump
00013ACE 6100 0000                  		bsr.w	Sonic_RollRepel
00013AD2 6100 0000                  		bsr.w	Sonic_RollSpeed
00013AD6 6100 0000                  		bsr.w	Sonic_LevelBound
00013ADA 4EBA A776                  		jsr	SpeedToPos
00013ADE 6100 0000                  		bsr.w	Sonic_AnglePos
00013AE2 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013AE6 4E75                       		rts	
00013AE8                            ; ===========================================================================
00013AE8                            
00013AE8                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013AE8 6100 0000                  		bsr.w	Sonic_JumpHeight
00013AEC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013AF0 6100 0000                  		bsr.w	Sonic_LevelBound
00013AF4 6100 0000                  		bsr.w	Sonic_AirUnroll
00013AF8 4EBA A6F6                  		jsr	ObjectFall
00013AFC 0828 0006 0022             		btst	#6,$22(a0)
00013B02 6700                       		beq.s	loc_12EA6
00013B04 0468 0028 0012             		subi.w	#$28,$12(a0)
00013B0A                            
00013B0A                            loc_12EA6:
00013B0A 6100 0000                  		bsr.w	Sonic_JumpAngle
00013B0E 6100 0000                  		bsr.w	Sonic_Floor
00013B12 4E75                       		rts	
00013B14                            ; ---------------------------------------------------------------------------
00013B14                            ; Subroutine to	make Sonic walk/run
00013B14                            ; ---------------------------------------------------------------------------
00013B14                            
00013B14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B14                            
00013B14                            
00013B14                            Sonic_Move:				; XREF: Obj01_MdNormal
00013B14 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B18 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B1C 3838 F764                  		move.w	($FFFFF764).w,d4
00013B20 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013B24 6600 0000                  		bne.w	loc_12FEE
00013B28 4A68 003E                  		tst.w	$3E(a0)
00013B2C 6600 0000                  		bne.w	Obj01_ResetScr
00013B30 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B36 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013B38 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B3E 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013B40 6100 0000                  		bsr.w	Sonic_MoveLeft
00013B44                            
00013B44                            Obj01_NotLeft:
00013B44 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013B4A 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013B4C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B52 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013B54 6100 0000                  		bsr.w	Sonic_MoveLeft
00013B58 6000                       		bra.s	Obj01_NotRight
00013B5A                            
00013B5A                            Obj01_MoveRight:
00013B5A 6100 0000                  		bsr.w	Sonic_MoveRight
00013B5E                            
00013B5E                            Obj01_NotRight:
00013B5E 1028 0026                  		move.b	$26(a0),d0
00013B62 0600 0020                  		addi.b	#$20,d0
00013B66 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013B6A 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013B6E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013B72 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013B76 08A8 0005 0022             		bclr	#5,$22(a0)
00013B7C 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013B82 0828 0003 0022             		btst	#3,$22(a0)
00013B88 6700                       		beq.s	Sonic_Balance
00013B8A 7000                       		moveq	#0,d0
00013B8C 1028 003D                  		move.b	$3D(a0),d0
00013B90 ED48                       		lsl.w	#6,d0
00013B92 43F8 D000                  		lea	($FFFFD000).w,a1
00013B96 43F1 0000                  		lea	(a1,d0.w),a1
00013B9A 4A29 0022                  		tst.b	$22(a1)
00013B9E 6B00                       		bmi.s	Sonic_LookUp
00013BA0 7200                       		moveq	#0,d1
00013BA2 1229 0019                  		move.b	$19(a1),d1
00013BA6 3401                       		move.w	d1,d2
00013BA8 D442                       		add.w	d2,d2
00013BAA 5942                       		subq.w	#4,d2
00013BAC D268 0008                  		add.w	8(a0),d1
00013BB0 9269 0008                  		sub.w	8(a1),d1
00013BB4 0C41 0004                  		cmpi.w	#4,d1
00013BB8 6D00                       		blt.s	loc_12F6A
00013BBA B242                       		cmp.w	d2,d1
00013BBC 6C00                       		bge.s	loc_12F5A
00013BBE 6000                       		bra.s	Sonic_LookUp
00013BC0                            ; ===========================================================================
00013BC0                            
00013BC0                            Sonic_Balance:
00013BC0 4EB9 0000 0000             		jsr	ObjHitFloor
00013BC6 0C41 000C                  		cmpi.w	#$C,d1
00013BCA 6D00                       		blt.s	Sonic_LookUp
00013BCC 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013BD2 6600                       		bne.s	loc_12F62
00013BD4                            
00013BD4                            loc_12F5A:
00013BD4 08A8 0000 0022             		bclr	#0,$22(a0)
00013BDA 6000                       		bra.s	loc_12F70
00013BDC                            ; ===========================================================================
00013BDC                            
00013BDC                            loc_12F62:
00013BDC 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013BE2 6600                       		bne.s	Sonic_LookUp
00013BE4                            
00013BE4                            loc_12F6A:
00013BE4 08E8 0000 0022             		bset	#0,$22(a0)
00013BEA                            
00013BEA                            loc_12F70:
00013BEA 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013BF0 6000                       		bra.s	Obj01_ResetScr
00013BF2                            ; ===========================================================================
00013BF2                            
00013BF2                            Sonic_LookUp:
00013BF2 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013BF8 6700                       		beq.s	Sonic_Duck	; if not, branch
00013BFA 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013C00 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013C06 6700                       		beq.s	loc_12FC2
00013C08 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013C0C 6000                       		bra.s	loc_12FC2
00013C0E                            ; ===========================================================================
00013C0E                            
00013C0E                            Sonic_Duck:
00013C0E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013C14 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013C16 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013C1C 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013C22 6700                       		beq.s	loc_12FC2
00013C24 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013C28 6000                       		bra.s	loc_12FC2
00013C2A                            ; ===========================================================================
00013C2A                            
00013C2A                            Obj01_ResetScr:
00013C2A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013C30 6700                       		beq.s	loc_12FC2	; if yes, branch
00013C32 6400                       		bcc.s	loc_12FBE
00013C34 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013C38                            
00013C38                            loc_12FBE:
00013C38 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013C3C                            
00013C3C                            loc_12FC2:
00013C3C 1038 F602                  		move.b	($FFFFF602).w,d0
00013C40 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013C44 6600                       		bne.s	loc_12FEE	; if yes, branch
00013C46 3028 0014                  		move.w	$14(a0),d0
00013C4A 6700                       		beq.s	loc_12FEE
00013C4C 6B00                       		bmi.s	loc_12FE2
00013C4E 9045                       		sub.w	d5,d0
00013C50 6400                       		bcc.s	loc_12FDC
00013C52 303C 0000                  		move.w	#0,d0
00013C56                            
00013C56                            loc_12FDC:
00013C56 3140 0014                  		move.w	d0,$14(a0)
00013C5A 6000                       		bra.s	loc_12FEE
00013C5C                            ; ===========================================================================
00013C5C                            
00013C5C                            loc_12FE2:
00013C5C D045                       		add.w	d5,d0
00013C5E 6400                       		bcc.s	loc_12FEA
00013C60 303C 0000                  		move.w	#0,d0
00013C64                            
00013C64                            loc_12FEA:
00013C64 3140 0014                  		move.w	d0,$14(a0)
00013C68                            
00013C68                            loc_12FEE:
00013C68 1028 0026                  		move.b	$26(a0),d0
00013C6C 4EB9 0000 2D6E             		jsr	(CalcSine).l
00013C72 C3E8 0014                  		muls.w	$14(a0),d1
00013C76 E081                       		asr.l	#8,d1
00013C78 3141 0010                  		move.w	d1,$10(a0)
00013C7C C1E8 0014                  		muls.w	$14(a0),d0
00013C80 E080                       		asr.l	#8,d0
00013C82 3140 0012                  		move.w	d0,$12(a0)
00013C86                            
00013C86                            loc_1300C:
00013C86 1028 0026                  		move.b	$26(a0),d0
00013C8A 0600 0040                  		addi.b	#$40,d0
00013C8E 6B00                       		bmi.s	locret_1307C
00013C90 123C 0040                  		move.b	#$40,d1
00013C94 4A68 0014                  		tst.w	$14(a0)
00013C98 6700                       		beq.s	locret_1307C
00013C9A 6B00                       		bmi.s	loc_13024
00013C9C 4441                       		neg.w	d1
00013C9E                            
00013C9E                            loc_13024:
00013C9E 1028 0026                  		move.b	$26(a0),d0
00013CA2 D001                       		add.b	d1,d0
00013CA4 3F00                       		move.w	d0,-(sp)
00013CA6 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013CAA 301F                       		move.w	(sp)+,d0
00013CAC 4A41                       		tst.w	d1
00013CAE 6A00                       		bpl.s	locret_1307C
00013CB0 E141                       		asl.w	#8,d1
00013CB2 0600 0020                  		addi.b	#$20,d0
00013CB6 0200 00C0                  		andi.b	#$C0,d0
00013CBA 6700                       		beq.s	loc_13078
00013CBC 0C00 0040                  		cmpi.b	#$40,d0
00013CC0 6700                       		beq.s	loc_13066
00013CC2 0C00 0080                  		cmpi.b	#$80,d0
00013CC6 6700                       		beq.s	loc_13060
00013CC8 D368 0010                  		add.w	d1,$10(a0)
00013CCC 08E8 0005 0022             		bset	#5,$22(a0)
00013CD2 317C 0000 0014             		move.w	#0,$14(a0)
00013CD8 4E75                       		rts	
00013CDA                            ; ===========================================================================
00013CDA                            
00013CDA                            loc_13060:
00013CDA 9368 0012                  		sub.w	d1,$12(a0)
00013CDE 4E75                       		rts	
00013CE0                            ; ===========================================================================
00013CE0                            
00013CE0                            loc_13066:
00013CE0 9368 0010                  		sub.w	d1,$10(a0)
00013CE4 08E8 0005 0022             		bset	#5,$22(a0)
00013CEA 317C 0000 0014             		move.w	#0,$14(a0)
00013CF0 4E75                       		rts	
00013CF2                            ; ===========================================================================
00013CF2                            
00013CF2                            loc_13078:
00013CF2 D368 0012                  		add.w	d1,$12(a0)
00013CF6                            
00013CF6                            locret_1307C:
00013CF6 4E75                       		rts	
00013CF8                            ; End of function Sonic_Move
00013CF8                            
00013CF8                            
00013CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CF8                            
00013CF8                            
00013CF8                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013CF8 3028 0014                  		move.w	$14(a0),d0
00013CFC 6700                       		beq.s	loc_13086
00013CFE 6A00                       		bpl.s	loc_130B2
00013D00                            
00013D00                            loc_13086:
00013D00 08E8 0000 0022             		bset	#0,$22(a0)
00013D06 6600                       		bne.s	loc_1309A
00013D08 08A8 0005 0022             		bclr	#5,$22(a0)
00013D0E 117C 0001 001D             		move.b	#1,$1D(a0)
00013D14                            
00013D14                            loc_1309A:
00013D14 9045                       		sub.w	d5,d0
00013D16 3206                       		move.w	d6,d1
00013D18 4441                       		neg.w	d1
00013D1A B041                       		cmp.w	d1,d0
00013D1C 6E00                       		bgt.s	loc_130A6
00013D1E 3001                       		move.w	d1,d0
00013D20                            
00013D20                            loc_130A6:
00013D20 3140 0014                  		move.w	d0,$14(a0)
00013D24 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013D2A 4E75                       		rts	
00013D2C                            ; ===========================================================================
00013D2C                            
00013D2C                            loc_130B2:				; XREF: Sonic_MoveLeft
00013D2C 9044                       		sub.w	d4,d0
00013D2E 6400                       		bcc.s	loc_130BA
00013D30 303C FF80                  		move.w	#-$80,d0
00013D34                            
00013D34                            loc_130BA:
00013D34 3140 0014                  		move.w	d0,$14(a0)
00013D38 1028 0026                  		move.b	$26(a0),d0
00013D3C 0600 0020                  		addi.b	#$20,d0
00013D40 0200 00C0                  		andi.b	#$C0,d0
00013D44 6600                       		bne.s	locret_130E8
00013D46 0C40 0400                  		cmpi.w	#$400,d0
00013D4A 6D00                       		blt.s	locret_130E8
00013D4C 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013D52 08A8 0000 0022             		bclr	#0,$22(a0)
00013D58 303C 00A4                  		move.w	#$A4,d0
00013D5C 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play stopping sound
00013D62                            
00013D62                            locret_130E8:
00013D62 4E75                       		rts	
00013D64                            ; End of function Sonic_MoveLeft
00013D64                            
00013D64                            
00013D64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D64                            
00013D64                            
00013D64                            Sonic_MoveRight:			; XREF: Sonic_Move
00013D64 3028 0014                  		move.w	$14(a0),d0
00013D68 6B00                       		bmi.s	loc_13118
00013D6A 08A8 0000 0022             		bclr	#0,$22(a0)
00013D70 6700                       		beq.s	loc_13104
00013D72 08A8 0005 0022             		bclr	#5,$22(a0)
00013D78 117C 0001 001D             		move.b	#1,$1D(a0)
00013D7E                            
00013D7E                            loc_13104:
00013D7E D045                       		add.w	d5,d0
00013D80 B046                       		cmp.w	d6,d0
00013D82 6D00                       		blt.s	loc_1310C
00013D84 3006                       		move.w	d6,d0
00013D86                            
00013D86                            loc_1310C:
00013D86 3140 0014                  		move.w	d0,$14(a0)
00013D8A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013D90 4E75                       		rts	
00013D92                            ; ===========================================================================
00013D92                            
00013D92                            loc_13118:				; XREF: Sonic_MoveRight
00013D92 D044                       		add.w	d4,d0
00013D94 6400                       		bcc.s	loc_13120
00013D96 303C 0080                  		move.w	#$80,d0
00013D9A                            
00013D9A                            loc_13120:
00013D9A 3140 0014                  		move.w	d0,$14(a0)
00013D9E 1028 0026                  		move.b	$26(a0),d0
00013DA2 0600 0020                  		addi.b	#$20,d0
00013DA6 0200 00C0                  		andi.b	#$C0,d0
00013DAA 6600                       		bne.s	locret_1314E
00013DAC 0C40 FC00                  		cmpi.w	#-$400,d0
00013DB0 6E00                       		bgt.s	locret_1314E
00013DB2 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013DB8 08E8 0000 0022             		bset	#0,$22(a0)
00013DBE 303C 00A4                  		move.w	#$A4,d0
00013DC2 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play stopping sound
00013DC8                            
00013DC8                            locret_1314E:
00013DC8 4E75                       		rts	
00013DCA                            ; End of function Sonic_MoveRight
00013DCA                            
00013DCA                            ; ---------------------------------------------------------------------------
00013DCA                            ; Subroutine to	change Sonic's speed as he rolls
00013DCA                            ; ---------------------------------------------------------------------------
00013DCA                            
00013DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DCA                            
00013DCA                            
00013DCA                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013DCA 3C38 F760                  		move.w	($FFFFF760).w,d6
00013DCE E346                       		asl.w	#1,d6
00013DD0 3A38 F762                  		move.w	($FFFFF762).w,d5
00013DD4 E245                       		asr.w	#1,d5
00013DD6 3838 F764                  		move.w	($FFFFF764).w,d4
00013DDA E444                       		asr.w	#2,d4
00013DDC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013DE0 6600 0000                  		bne.w	loc_131CC
00013DE4 4A68 003E                  		tst.w	$3E(a0)
00013DE8 6600                       		bne.s	loc_13188
00013DEA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013DF0 6700                       		beq.s	loc_1317C	; if not, branch
00013DF2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013DF8 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013DFA 6100 0000                  		bsr.w	Sonic_RollLeft
00013DFE                            
00013DFE                            loc_1317C:
00013DFE 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013E04 6700                       		beq.s	loc_13188	; if not, branch
00013E06 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013E0C 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013E0E 6100 0000                  		bsr.w	Sonic_RollLeft
00013E12 6000                       		bra.s	loc_13188
00013E14                            
00013E14                            SonicRS_RollRight:
00013E14 6100 0000                  		bsr.w	Sonic_RollRight
00013E18                            
00013E18                            loc_13188:
00013E18 3028 0014                  		move.w	$14(a0),d0
00013E1C 6700                       		beq.s	loc_131AA
00013E1E 6B00                       		bmi.s	loc_1319E
00013E20 9045                       		sub.w	d5,d0
00013E22 6400                       		bcc.s	loc_13198
00013E24 303C 0000                  		move.w	#0,d0
00013E28                            
00013E28                            loc_13198:
00013E28 3140 0014                  		move.w	d0,$14(a0)
00013E2C 6000                       		bra.s	loc_131AA
00013E2E                            ; ===========================================================================
00013E2E                            
00013E2E                            loc_1319E:				; XREF: Sonic_RollSpeed
00013E2E D045                       		add.w	d5,d0
00013E30 6400                       		bcc.s	loc_131A6
00013E32 303C 0000                  		move.w	#0,d0
00013E36                            
00013E36                            loc_131A6:
00013E36 3140 0014                  		move.w	d0,$14(a0)
00013E3A                            
00013E3A                            loc_131AA:
00013E3A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013E3E 6600                       		bne.s	loc_131CC	; if yes, branch
00013E40 08A8 0002 0022             		bclr	#2,$22(a0)
00013E46 117C 0013 0016             		move.b	#$13,$16(a0)
00013E4C 117C 0009 0017             		move.b	#9,$17(a0)
00013E52 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013E58 5B68 000C                  		subq.w	#5,$C(a0)
00013E5C                            
00013E5C                            loc_131CC:
00013E5C 1028 0026                  		move.b	$26(a0),d0
00013E60 4EB9 0000 2D6E             		jsr	(CalcSine).l
00013E66 C1E8 0014                  		muls.w	$14(a0),d0
00013E6A E080                       		asr.l	#8,d0
00013E6C 3140 0012                  		move.w	d0,$12(a0)
00013E70 C3E8 0014                  		muls.w	$14(a0),d1
00013E74 E081                       		asr.l	#8,d1
00013E76 0C41 1000                  		cmpi.w	#$1000,d1
00013E7A 6F00                       		ble.s	loc_131F0
00013E7C 323C 1000                  		move.w	#$1000,d1
00013E80                            
00013E80                            loc_131F0:
00013E80 0C41 F000                  		cmpi.w	#-$1000,d1
00013E84 6C00                       		bge.s	loc_131FA
00013E86 323C F000                  		move.w	#-$1000,d1
00013E8A                            
00013E8A                            loc_131FA:
00013E8A 3141 0010                  		move.w	d1,$10(a0)
00013E8E 6000 FDF6                  		bra.w	loc_1300C
00013E92                            ; End of function Sonic_RollSpeed
00013E92                            
00013E92                            
00013E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E92                            
00013E92                            
00013E92                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013E92 3028 0014                  		move.w	$14(a0),d0
00013E96 6700                       		beq.s	loc_1320A
00013E98 6A00                       		bpl.s	loc_13218
00013E9A                            
00013E9A                            loc_1320A:
00013E9A 08E8 0000 0022             		bset	#0,$22(a0)
00013EA0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013EA6 4E75                       		rts	
00013EA8                            ; ===========================================================================
00013EA8                            
00013EA8                            loc_13218:
00013EA8 9044                       		sub.w	d4,d0
00013EAA 6400                       		bcc.s	loc_13220
00013EAC 303C FF80                  		move.w	#-$80,d0
00013EB0                            
00013EB0                            loc_13220:
00013EB0 3140 0014                  		move.w	d0,$14(a0)
00013EB4 4E75                       		rts	
00013EB6                            ; End of function Sonic_RollLeft
00013EB6                            
00013EB6                            
00013EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EB6                            
00013EB6                            
00013EB6                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013EB6 3028 0014                  		move.w	$14(a0),d0
00013EBA 6B00                       		bmi.s	loc_1323A
00013EBC 08A8 0000 0022             		bclr	#0,$22(a0)
00013EC2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013EC8 4E75                       		rts	
00013ECA                            ; ===========================================================================
00013ECA                            
00013ECA                            loc_1323A:
00013ECA D044                       		add.w	d4,d0
00013ECC 6400                       		bcc.s	loc_13242
00013ECE 303C 0080                  		move.w	#$80,d0
00013ED2                            
00013ED2                            loc_13242:
00013ED2 3140 0014                  		move.w	d0,$14(a0)
00013ED6 4E75                       		rts	
00013ED8                            ; End of function Sonic_RollRight
00013ED8                            
00013ED8                            Sonic_AirUnroll:
00013ED8                            		
00013ED8 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013EDC 6600                       		bne.s	@timer
00013EDE 1038 F605                  		move.b	($FFFFF605).w,d0
00013EE2 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013EE6 6700                       		beq.s	@end	; if not, branch
00013EE8 08A8 0002 0022             		bclr	#2,$22(a0)
00013EEE 117C 0013 0016             		move.b	#$13,$16(a0)
00013EF4 117C 0009 0017             		move.b	#9,$17(a0)
00013EFA 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013F00 303C 00A5                  		move.w	#$A5,d0
00013F04 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play fart sound
00013F0A 2028 0010                  		move.l	$10(a0),d0
00013F0E D080                       		add.l	d0,d0
00013F10 2140 0010                  		move.l	d0,$10(a0)
00013F14 5B68 000C                  		subq.w	#5,$C(a0)
00013F18                            	@end:
00013F18 4E75                       		rts
00013F1A                            	@timer:
00013F1A 5328 003A                  		subq.b	#1,$3A(a0)
00013F1E 4E75                       		rts
00013F20                            
00013F20                            ; ---------------------------------------------------------------------------
00013F20                            ; Subroutine to	change Sonic's direction while jumping
00013F20                            ; ---------------------------------------------------------------------------
00013F20                            
00013F20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F20                            
00013F20                            
00013F20                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013F20 3C38 F760                  		move.w	($FFFFF760).w,d6
00013F24 3A38 F762                  		move.w	($FFFFF762).w,d5
00013F28 E345                       		asl.w	#1,d5
00013F2A 0828 0004 0022             		btst	#4,$22(a0)
00013F30 6600                       		bne.s	Obj01_ResetScr2
00013F32 3028 0010                  		move.w	$10(a0),d0
00013F36 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013F3C 6700                       		beq.s	loc_13278	; if not, branch
00013F3E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013F44 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013F46 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013F4A 6E00                       		bgt.s	loc_13278
00013F4C 3001                       		move.w	d1,d0
00013F4E                            
00013F4E                            loc_13278:
00013F4E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013F54 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013F56 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013F5C 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013F5E 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013F62 6E00                       		bgt.s	Obj01_JumpMove
00013F64 3001                       		move.w	d1,d0
00013F66 6000                       		bra.s	Obj01_JumpMove
00013F68                            
00013F68                            SonicCJD_JumpLeft:
00013F68 08E8 0000 0022             		bset	#0,$22(a0)
00013F6E 9045                       		sub.w	d5,d0
00013F70 3206                       		move.w	d6,d1
00013F72 4441                       		neg.w	d1
00013F74 B041                       		cmp.w	d1,d0
00013F76                            		; bgt.s	loc_13278
00013F76                            		; move.w	d1,d0
00013F76 4E75                       		rts
00013F78                            
00013F78                            SonicCJD_JumpRight:
00013F78 08A8 0000 0022             		bclr	#0,$22(a0)
00013F7E D045                       		add.w	d5,d0
00013F80 B046                       		cmp.w	d6,d0
00013F82 6D00                       		blt.s	Obj01_JumpMove
00013F84 3006                       		move.w	d6,d0
00013F86                            
00013F86                            Obj01_JumpMove:
00013F86 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013F8A                            
00013F8A                            Obj01_ResetScr2:
00013F8A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013F90 6700                       		beq.s	loc_132A4	; if yes, branch
00013F92 6400                       		bcc.s	loc_132A0
00013F94 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013F98                            
00013F98                            loc_132A0:
00013F98 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013F9C                            
00013F9C                            loc_132A4:
00013F9C 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013FA2 6500                       		bcs.s	locret_132D2	; if yes, branch
00013FA4 3028 0010                  		move.w	$10(a0),d0
00013FA8 3200                       		move.w	d0,d1
00013FAA EA41                       		asr.w	#5,d1
00013FAC 6700                       		beq.s	locret_132D2
00013FAE 6B00                       		bmi.s	loc_132C6
00013FB0 9041                       		sub.w	d1,d0
00013FB2 6400                       		bcc.s	loc_132C0
00013FB4 303C 0000                  		move.w	#0,d0
00013FB8                            
00013FB8                            loc_132C0:
00013FB8 3140 0010                  		move.w	d0,$10(a0)
00013FBC 4E75                       		rts	
00013FBE                            ; ===========================================================================
00013FBE                            
00013FBE                            loc_132C6:
00013FBE 9041                       		sub.w	d1,d0
00013FC0 6500                       		bcs.s	loc_132CE
00013FC2 303C 0000                  		move.w	#0,d0
00013FC6                            
00013FC6                            loc_132CE:
00013FC6 3140 0010                  		move.w	d0,$10(a0)
00013FCA                            
00013FCA                            locret_132D2:
00013FCA 4E75                       		rts	
00013FCC                            ; End of function Sonic_ChgJumpDir
00013FCC                            
00013FCC                            ; ===========================================================================
00013FCC                            ; ---------------------------------------------------------------------------
00013FCC                            ; Unused subroutine to squash Sonic
00013FCC                            ; ---------------------------------------------------------------------------
00013FCC 1028 0026                  		move.b	$26(a0),d0
00013FD0 0600 0020                  		addi.b	#$20,d0
00013FD4 0200 00C0                  		andi.b	#$C0,d0
00013FD8 6600                       		bne.s	locret_13302
00013FDA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FDE 4A41                       		tst.w	d1
00013FE0 6A00                       		bpl.s	locret_13302
00013FE2 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013FE8 317C 0000 0010             		move.w	#0,$10(a0)
00013FEE 317C 0000 0012             		move.w	#0,$12(a0)
00013FF4 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013FFA                            
00013FFA                            locret_13302:
00013FFA 4E75                       		rts	
00013FFC                            ; ---------------------------------------------------------------------------
00013FFC                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013FFC                            ; ---------------------------------------------------------------------------
00013FFC                            
00013FFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FFC                            
00013FFC                            
00013FFC                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013FFC 2228 0008                  		move.l	8(a0),d1
00014000 3028 0010                  		move.w	$10(a0),d0
00014004 48C0                       		ext.l	d0
00014006 E180                       		asl.l	#8,d0
00014008 D280                       		add.l	d0,d1
0001400A 4841                       		swap	d1
0001400C 3038 F728                  		move.w	($FFFFF728).w,d0
00014010 0640 0010                  		addi.w	#$10,d0
00014014 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014016 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014018 3038 F72A                  		move.w	($FFFFF72A).w,d0
0001401C 0640 0128                  		addi.w	#$128,d0
00014020 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014024 6600                       		bne.s	loc_13332
00014026 0640 0040                  		addi.w	#$40,d0
0001402A                            
0001402A                            loc_13332:
0001402A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001402C 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001402E                            
0001402E                            loc_13336:
0001402E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014032 0640 00E0                  		addi.w	#$E0,d0
00014036 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
0001403A 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
0001403C 4E75                       		rts	
0001403E                            ; ===========================================================================
0001403E                            
0001403E                            Boundary_Bottom:
0001403E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00014044 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00014048 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
0001404E 6500 0000                  		bcs.w	KillSonic
00014052 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00014056 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001405C 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00014062 4E75                       		rts	
00014064                            ; ===========================================================================
00014064                            
00014064                            Boundary_Sides:
00014064 3140 0008                  		move.w	d0,8(a0)
00014068 317C 0000 000A             		move.w	#0,$A(a0)
0001406E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014074 317C 0000 0014             		move.w	#0,$14(a0)
0001407A 60B2                       		bra.s	loc_13336
0001407C                            ; End of function Sonic_LevelBound
0001407C                            
0001407C                            ; ---------------------------------------------------------------------------
0001407C                            ; Subroutine allowing Sonic to roll when he's moving
0001407C                            ; ---------------------------------------------------------------------------
0001407C                            
0001407C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001407C                            
0001407C                            
0001407C                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001407C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014080 6600                       		bne.s	Obj01_NoRoll
00014082 3028 0014                  		move.w	$14(a0),d0
00014086 6A00                       		bpl.s	loc_13392
00014088 4440                       		neg.w	d0
0001408A                            
0001408A                            loc_13392:
0001408A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
0001408E 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014090 1038 F602                  		move.b	($FFFFF602).w,d0
00014094 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00014098 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
0001409A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000140A0 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
000140A2                            
000140A2                            Obj01_NoRoll:
000140A2 4E75                       		rts	
000140A4                            ; ===========================================================================
000140A4                            
000140A4                            Obj01_ChkRoll:
000140A4 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000140AA 6700                       		beq.s	Obj01_DoRoll	; if not, branch
000140AC 4E75                       		rts	
000140AE                            ; ===========================================================================
000140AE                            
000140AE                            Obj01_DoRoll:
000140AE 08E8 0002 0022             		bset	#2,$22(a0)
000140B4 117C 000E 0016             		move.b	#$E,$16(a0)
000140BA 117C 0007 0017             		move.b	#7,$17(a0)
000140C0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000140C6 5A68 000C                  		addq.w	#5,$C(a0)
000140CA 303C 00BE                  		move.w	#$BE,d0
000140CE 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play rolling sound
000140D4 4A68 0014                  		tst.w	$14(a0)
000140D8 6600                       		bne.s	locret_133E8
000140DA 317C 0200 0014             		move.w	#$200,$14(a0)
000140E0                            
000140E0                            locret_133E8:
000140E0 4E75                       		rts	
000140E2                            ; End of function Sonic_Roll
000140E2                            
000140E2                            ; ---------------------------------------------------------------------------
000140E2                            ; Subroutine allowing Sonic to jump
000140E2                            ; ---------------------------------------------------------------------------
000140E2                            
000140E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140E2                            
000140E2                            
000140E2                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000140E2 1038 F603                  		move.b	($FFFFF603).w,d0
000140E6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000140EA 6700 0000                  		beq.w	locret_1348E	; if not, branch
000140EE 7000                       		moveq	#0,d0
000140F0 1028 0026                  		move.b	$26(a0),d0
000140F4 0600 0080                  		addi.b	#$80,d0
000140F8 6100 0000                  		bsr.w	sub_14D48
000140FC 0C41 0006                  		cmpi.w	#6,d1
00014100 6D00 0000                  		blt.w	locret_1348E
00014104 343C 0680                  		move.w	#$680,d2
00014108 0828 0006 0022             		btst	#6,$22(a0)
0001410E 6700                       		beq.s	loc_1341C
00014110 343C 0380                  		move.w	#$380,d2
00014114                            
00014114                            loc_1341C:
00014114 7000                       		moveq	#0,d0
00014116 1028 0026                  		move.b	$26(a0),d0
0001411A 0400 0040                  		subi.b	#$40,d0
0001411E 4EB9 0000 2D6E             		jsr	(CalcSine).l
00014124 C3C2                       		muls.w	d2,d1
00014126 E081                       		asr.l	#8,d1
00014128 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
0001412C C1C2                       		muls.w	d2,d0
0001412E E080                       		asr.l	#8,d0
00014130 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014134 08E8 0001 0022             		bset	#1,$22(a0)
0001413A 08A8 0005 0022             		bclr	#5,$22(a0)
00014140 588F                       		addq.l	#4,sp
00014142 117C 0001 003C             		move.b	#1,$3C(a0)
00014148 4228 0038                  		clr.b	$38(a0)
0001414C 303C 00A0                  		move.w	#$A0,d0
00014150 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play jumping sound
00014156 117C 0013 0016             		move.b	#$13,$16(a0)
0001415C 117C 0009 0017             		move.b	#9,$17(a0)
00014162 0828 0002 0022             		btst	#2,$22(a0)
00014168 6600                       		bne.s	loc_13490
0001416A 117C 000E 0016             		move.b	#$E,$16(a0)
00014170 117C 0007 0017             		move.b	#7,$17(a0)
00014176 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
0001417C 08E8 0002 0022             		bset	#2,$22(a0)
00014182 5A68 000C                  		addq.w	#5,$C(a0)
00014186 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
0001418C                            
0001418C                            locret_1348E:
0001418C 4E75                       		rts	
0001418E                            ; ===========================================================================
0001418E                            
0001418E                            loc_13490:
0001418E 08E8 0004 0022             		bset	#4,$22(a0)
00014194 4E75                       		rts	
00014196                            ; End of function Sonic_Jump
00014196                            
00014196                            
00014196                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014196                            
00014196                            
00014196                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014196 4A28 003C                  		tst.b	$3C(a0)
0001419A 6700                       		beq.s	loc_134C4
0001419C 323C FC00                  		move.w	#-$400,d1
000141A0 0828 0006 0022             		btst	#6,$22(a0)
000141A6 6700                       		beq.s	loc_134AE
000141A8 323C FE00                  		move.w	#-$200,d1
000141AC                            
000141AC                            loc_134AE:
000141AC B268 0012                  		cmp.w	$12(a0),d1
000141B0 6F00                       		ble.s	locret_134C2
000141B2 1038 F602                  		move.b	($FFFFF602).w,d0
000141B6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000141BA 6600                       		bne.s	locret_134C2	; if yes, branch
000141BC 3141 0012                  		move.w	d1,$12(a0)
000141C0                            
000141C0                            locret_134C2:
000141C0 4E75                       		rts	
000141C2                            ; ===========================================================================
000141C2                            
000141C2                            loc_134C4:
000141C2 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000141C8 6C00                       		bge.s	locret_134D2
000141CA 317C F040 0012             		move.w	#-$FC0,$12(a0)
000141D0                            
000141D0                            locret_134D2:
000141D0 4E75                       		rts	
000141D2                            ; End of function Sonic_JumpHeight
000141D2                            
000141D2                            ; ---------------------------------------------------------------------------
000141D2                            ; Subroutine to	slow Sonic walking up a	slope
000141D2                            ; ---------------------------------------------------------------------------
000141D2                            
000141D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141D2                            
000141D2                            
000141D2                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000141D2 1028 0026                  		move.b	$26(a0),d0
000141D6 0600 0060                  		addi.b	#$60,d0
000141DA 0C00 00C0                  		cmpi.b	#$C0,d0
000141DE 6400                       		bcc.s	locret_13508
000141E0 1028 0026                  		move.b	$26(a0),d0
000141E4 4EB9 0000 2D6E             		jsr	(CalcSine).l
000141EA C1FC 0020                  		muls.w	#$20,d0
000141EE E080                       		asr.l	#8,d0
000141F0 4A68 0014                  		tst.w	$14(a0)
000141F4 6700                       		beq.s	locret_13508
000141F6 6B00                       		bmi.s	loc_13504
000141F8 4A40                       		tst.w	d0
000141FA 6700                       		beq.s	locret_13502
000141FC D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00014200                            
00014200                            locret_13502:
00014200 4E75                       		rts	
00014202                            ; ===========================================================================
00014202                            
00014202                            loc_13504:
00014202 D168 0014                  		add.w	d0,$14(a0)
00014206                            
00014206                            locret_13508:
00014206 4E75                       		rts	
00014208                            ; End of function Sonic_SlopeResist
00014208                            
00014208                            ; ---------------------------------------------------------------------------
00014208                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014208                            ; ---------------------------------------------------------------------------
00014208                            
00014208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014208                            
00014208                            
00014208                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014208 1028 0026                  		move.b	$26(a0),d0
0001420C 0600 0060                  		addi.b	#$60,d0
00014210 0C00 00C0                  		cmpi.b	#-$40,d0
00014214 6400                       		bcc.s	locret_13544
00014216 1028 0026                  		move.b	$26(a0),d0
0001421A 4EB9 0000 2D6E             		jsr	(CalcSine).l
00014220 C1FC 0050                  		muls.w	#$50,d0
00014224 E080                       		asr.l	#8,d0
00014226 4A68 0014                  		tst.w	$14(a0)
0001422A 6B00                       		bmi.s	loc_1353A
0001422C 4A40                       		tst.w	d0
0001422E 6A00                       		bpl.s	loc_13534
00014230 E480                       		asr.l	#2,d0
00014232                            
00014232                            loc_13534:
00014232 D168 0014                  		add.w	d0,$14(a0)
00014236 4E75                       		rts	
00014238                            ; ===========================================================================
00014238                            
00014238                            loc_1353A:
00014238 4A40                       		tst.w	d0
0001423A 6B00                       		bmi.s	loc_13540
0001423C E480                       		asr.l	#2,d0
0001423E                            
0001423E                            loc_13540:
0001423E D168 0014                  		add.w	d0,$14(a0)
00014242                            
00014242                            locret_13544:
00014242 4E75                       		rts	
00014244                            ; End of function Sonic_RollRepel
00014244                            
00014244                            ; ---------------------------------------------------------------------------
00014244                            ; Subroutine to	push Sonic down	a slope
00014244                            ; ---------------------------------------------------------------------------
00014244                            
00014244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014244                            
00014244                            
00014244                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014244 4E71                       		nop	
00014246 4A28 0038                  		tst.b	$38(a0)
0001424A 6600                       		bne.s	locret_13580
0001424C 4A68 003E                  		tst.w	$3E(a0)
00014250 6600                       		bne.s	loc_13582
00014252 1028 0026                  		move.b	$26(a0),d0
00014256 0600 0020                  		addi.b	#$20,d0
0001425A 0200 00C0                  		andi.b	#$C0,d0
0001425E 6700                       		beq.s	locret_13580
00014260 3028 0014                  		move.w	$14(a0),d0
00014264 6A00                       		bpl.s	loc_1356A
00014266 4440                       		neg.w	d0
00014268                            
00014268                            loc_1356A:
00014268 0C40 0280                  		cmpi.w	#$280,d0
0001426C 6400                       		bcc.s	locret_13580
0001426E 4268 0014                  		clr.w	$14(a0)
00014272 08E8 0001 0022             		bset	#1,$22(a0)
00014278 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001427E                            
0001427E                            locret_13580:
0001427E 4E75                       		rts	
00014280                            ; ===========================================================================
00014280                            
00014280                            loc_13582:
00014280 5368 003E                  		subq.w	#1,$3E(a0)
00014284 4E75                       		rts	
00014286                            ; End of function Sonic_SlopeRepel
00014286                            
00014286                            ; ---------------------------------------------------------------------------
00014286                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014286                            ; ---------------------------------------------------------------------------
00014286                            
00014286                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014286                            
00014286                            
00014286                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014286 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001428A 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001428C 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001428E                            
0001428E 5400                       		addq.b	#2,d0		; increase angle
00014290 6400                       		bcc.s	loc_13596
00014292 7000                       		moveq	#0,d0
00014294                            
00014294                            loc_13596:
00014294 6000                       		bra.s	loc_1359E
00014296                            ; ===========================================================================
00014296                            
00014296                            loc_13598:
00014296 5500                       		subq.b	#2,d0		; decrease angle
00014298 6400                       		bcc.s	loc_1359E
0001429A 7000                       		moveq	#0,d0
0001429C                            
0001429C                            loc_1359E:
0001429C 1140 0026                  		move.b	d0,$26(a0)
000142A0                            
000142A0                            locret_135A2:
000142A0 4E75                       		rts	
000142A2                            ; End of function Sonic_JumpAngle
000142A2                            
000142A2                            ; ---------------------------------------------------------------------------
000142A2                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000142A2                            ; ---------------------------------------------------------------------------
000142A2                            
000142A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142A2                            
000142A2                            
000142A2                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
000142A2 3228 0010                  		move.w	$10(a0),d1
000142A6 3428 0012                  		move.w	$12(a0),d2
000142AA 4EB9 0000 303C             		jsr	(CalcAngle).l
000142B0 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000142B4 0400 0020                  		subi.b	#$20,d0
000142B8 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000142BC 0200 00C0                  		andi.b	#$C0,d0
000142C0 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000142C4 0C00 0040                  		cmpi.b	#$40,d0
000142C8 6700 0000                  		beq.w	loc_13680
000142CC 0C00 0080                  		cmpi.b	#$80,d0
000142D0 6700 0000                  		beq.w	loc_136E2
000142D4 0C00 00C0                  		cmpi.b	#-$40,d0
000142D8 6700 0000                  		beq.w	loc_1373E
000142DC 6100 0000                  		bsr.w	Sonic_HitWall
000142E0 4A41                       		tst.w	d1
000142E2 6A00                       		bpl.s	loc_135F0
000142E4 9368 0008                  		sub.w	d1,8(a0)
000142E8 317C 0000 0010             		move.w	#0,$10(a0)
000142EE                            
000142EE                            loc_135F0:
000142EE 6100 0000                  		bsr.w	sub_14EB4
000142F2 4A41                       		tst.w	d1
000142F4 6A00                       		bpl.s	loc_13602
000142F6 D368 0008                  		add.w	d1,8(a0)
000142FA 317C 0000 0010             		move.w	#0,$10(a0)
00014300                            
00014300                            loc_13602:
00014300 6100 0000                  		bsr.w	Sonic_HitFloor
00014304 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00014308 4A41                       		tst.w	d1
0001430A 6A00                       		bpl.s	locret_1367E
0001430C 1428 0012                  		move.b	$12(a0),d2
00014310 5002                       		addq.b	#8,d2
00014312 4402                       		neg.b	d2
00014314 B202                       		cmp.b	d2,d1
00014316 6C00                       		bge.s	loc_1361E
00014318 B002                       		cmp.b	d2,d0
0001431A 6D00                       		blt.s	locret_1367E
0001431C                            
0001431C                            loc_1361E:
0001431C D368 000C                  		add.w	d1,$C(a0)
00014320 1143 0026                  		move.b	d3,$26(a0)
00014324 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014328 117C 0000 001C             		move.b	#0,$1C(a0)
0001432E 1003                       		move.b	d3,d0
00014330 0600 0020                  		addi.b	#$20,d0
00014334 0200 0040                  		andi.b	#$40,d0
00014338 6600                       		bne.s	loc_1365C
0001433A 1003                       		move.b	d3,d0
0001433C 0600 0010                  		addi.b	#$10,d0
00014340 0200 0020                  		andi.b	#$20,d0
00014344 6700                       		beq.s	loc_1364E
00014346 E0E8 0012                  		asr	$12(a0)
0001434A 6000                       		bra.s	loc_13670
0001434C                            ; ===========================================================================
0001434C                            
0001434C                            loc_1364E:
0001434C 317C 0000 0012             		move.w	#0,$12(a0)
00014352 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014358 4E75                       		rts	
0001435A                            ; ===========================================================================
0001435A                            
0001435A                            loc_1365C:
0001435A 317C 0000 0010             		move.w	#0,$10(a0)
00014360 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014366 6F00                       		ble.s	loc_13670
00014368 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001436E                            
0001436E                            loc_13670:
0001436E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014374 4A03                       		tst.b	d3
00014376 6A00                       		bpl.s	locret_1367E
00014378 4468 0014                  		neg.w	$14(a0)
0001437C                            
0001437C                            locret_1367E:
0001437C 4E75                       		rts	
0001437E                            ; ===========================================================================
0001437E                            
0001437E                            loc_13680:
0001437E 6100 0000                  		bsr.w	Sonic_HitWall
00014382 4A41                       		tst.w	d1
00014384 6A00                       		bpl.s	loc_1369A
00014386 9368 0008                  		sub.w	d1,8(a0)
0001438A 317C 0000 0010             		move.w	#0,$10(a0)
00014390 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014396 4E75                       		rts	
00014398                            ; ===========================================================================
00014398                            
00014398                            loc_1369A:
00014398 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001439C 4A41                       		tst.w	d1
0001439E 6A00                       		bpl.s	loc_136B4
000143A0 9368 000C                  		sub.w	d1,$C(a0)
000143A4 4A68 0012                  		tst.w	$12(a0)
000143A8 6A00                       		bpl.s	locret_136B2
000143AA 317C 0000 0012             		move.w	#0,$12(a0)
000143B0                            
000143B0                            locret_136B2:
000143B0 4E75                       		rts	
000143B2                            ; ===========================================================================
000143B2                            
000143B2                            loc_136B4:
000143B2 4A68 0012                  		tst.w	$12(a0)
000143B6 6B00                       		bmi.s	locret_136E0
000143B8 6100 0000                  		bsr.w	Sonic_HitFloor
000143BC 4A41                       		tst.w	d1
000143BE 6A00                       		bpl.s	locret_136E0
000143C0 D368 000C                  		add.w	d1,$C(a0)
000143C4 1143 0026                  		move.b	d3,$26(a0)
000143C8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000143CC 117C 0000 001C             		move.b	#0,$1C(a0)
000143D2 317C 0000 0012             		move.w	#0,$12(a0)
000143D8 3168 0010 0014             		move.w	$10(a0),$14(a0)
000143DE                            
000143DE                            locret_136E0:
000143DE 4E75                       		rts	
000143E0                            ; ===========================================================================
000143E0                            
000143E0                            loc_136E2:
000143E0 6100 0000                  		bsr.w	Sonic_HitWall
000143E4 4A41                       		tst.w	d1
000143E6 6A00                       		bpl.s	loc_136F4
000143E8 9368 0008                  		sub.w	d1,8(a0)
000143EC 317C 0000 0010             		move.w	#0,$10(a0)
000143F2                            
000143F2                            loc_136F4:
000143F2 6100 0000                  		bsr.w	sub_14EB4
000143F6 4A41                       		tst.w	d1
000143F8 6A00                       		bpl.s	loc_13706
000143FA D368 0008                  		add.w	d1,8(a0)
000143FE 317C 0000 0010             		move.w	#0,$10(a0)
00014404                            
00014404                            loc_13706:
00014404 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014408 4A41                       		tst.w	d1
0001440A 6A00                       		bpl.s	locret_1373C
0001440C 9368 000C                  		sub.w	d1,$C(a0)
00014410 1003                       		move.b	d3,d0
00014412 0600 0020                  		addi.b	#$20,d0
00014416 0200 0040                  		andi.b	#$40,d0
0001441A 6600                       		bne.s	loc_13726
0001441C 317C 0000 0012             		move.w	#0,$12(a0)
00014422 4E75                       		rts	
00014424                            ; ===========================================================================
00014424                            
00014424                            loc_13726:
00014424 1143 0026                  		move.b	d3,$26(a0)
00014428 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001442C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014432 4A03                       		tst.b	d3
00014434 6A00                       		bpl.s	locret_1373C
00014436 4468 0014                  		neg.w	$14(a0)
0001443A                            
0001443A                            locret_1373C:
0001443A 4E75                       		rts	
0001443C                            ; ===========================================================================
0001443C                            
0001443C                            loc_1373E:
0001443C 6100 0000                  		bsr.w	sub_14EB4
00014440 4A41                       		tst.w	d1
00014442 6A00                       		bpl.s	loc_13758
00014444 D368 0008                  		add.w	d1,8(a0)
00014448 317C 0000 0010             		move.w	#0,$10(a0)
0001444E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014454 4E75                       		rts	
00014456                            ; ===========================================================================
00014456                            
00014456                            loc_13758:
00014456 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001445A 4A41                       		tst.w	d1
0001445C 6A00                       		bpl.s	loc_13772
0001445E 9368 000C                  		sub.w	d1,$C(a0)
00014462 4A68 0012                  		tst.w	$12(a0)
00014466 6A00                       		bpl.s	locret_13770
00014468 317C 0000 0012             		move.w	#0,$12(a0)
0001446E                            
0001446E                            locret_13770:
0001446E 4E75                       		rts	
00014470                            ; ===========================================================================
00014470                            
00014470                            loc_13772:
00014470 4A68 0012                  		tst.w	$12(a0)
00014474 6B00                       		bmi.s	locret_1379E
00014476 6100 0000                  		bsr.w	Sonic_HitFloor
0001447A 4A41                       		tst.w	d1
0001447C 6A00                       		bpl.s	locret_1379E
0001447E D368 000C                  		add.w	d1,$C(a0)
00014482 1143 0026                  		move.b	d3,$26(a0)
00014486 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001448A 117C 0000 001C             		move.b	#0,$1C(a0)
00014490 317C 0000 0012             		move.w	#0,$12(a0)
00014496 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001449C                            
0001449C                            locret_1379E:
0001449C 4E75                       		rts	
0001449E                            ; End of function Sonic_Floor
0001449E                            
0001449E                            ; ---------------------------------------------------------------------------
0001449E                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001449E                            ; ---------------------------------------------------------------------------
0001449E                            
0001449E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001449E                            
0001449E                            
0001449E                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001449E 0828 0004 0022             		btst	#4,$22(a0)
000144A4 6700                       		beq.s	loc_137AE
000144A6 4E71                       		nop	
000144A8 4E71                       		nop	
000144AA 4E71                       		nop	
000144AC                            
000144AC                            loc_137AE:
000144AC 08A8 0005 0022             		bclr	#5,$22(a0)
000144B2 08A8 0001 0022             		bclr	#1,$22(a0)
000144B8 08A8 0004 0022             		bclr	#4,$22(a0)
000144BE 0828 0002 0022             		btst	#2,$22(a0)
000144C4 6700                       		beq.s	loc_137E4
000144C6 08A8 0002 0022             		bclr	#2,$22(a0)
000144CC 117C 0013 0016             		move.b	#$13,$16(a0)
000144D2 117C 0009 0017             		move.b	#9,$17(a0)
000144D8 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000144DE 5B68 000C                  		subq.w	#5,$C(a0)
000144E2                            
000144E2                            loc_137E4:
000144E2 117C 0000 003C             		move.b	#0,$3C(a0)
000144E8 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000144EE 4E75                       		rts	
000144F0                            ; End of function Sonic_ResetOnFloor
000144F0                            
000144F0                            ; ===========================================================================
000144F0                            ; ---------------------------------------------------------------------------
000144F0                            ; Sonic	when he	gets hurt
000144F0                            ; ---------------------------------------------------------------------------
000144F0                            
000144F0                            Obj01_Hurt:				; XREF: Obj01_Index
000144F0 7230                       		moveq	#$30,d1
000144F2 0828 0006 0022             		btst	#6,$22(a0)
000144F8 6700                       		beq.s	loc_1380C
000144FA 7220                       		moveq	#$20,d1
000144FC                            loc_1380C:
000144FC 4EBA 9CF4                  		jsr	ObjectFallCustom
00014500                            
00014500 6100 0000                  		bsr.w	Sonic_HurtStop
00014504 6100 FAF6                  		bsr.w	Sonic_LevelBound
00014508 6100 F4BC                  		bsr.w	Sonic_RecordPos
0001450C 6100 0000                  		bsr.w	Sonic_Animate
00014510 6100 0000                  		bsr.w	LoadSonicDynPLC
00014514 4EFA 9D76                  		jmp	DisplaySprite
00014518                            
00014518                            ; ---------------------------------------------------------------------------
00014518                            ; Subroutine to	stop Sonic falling after he's been hurt
00014518                            ; ---------------------------------------------------------------------------
00014518                            
00014518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014518                            
00014518                            
00014518                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014518 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001451C 0640 00E0                  		addi.w	#$E0,d0
00014520 B068 000C                  		cmp.w	$C(a0),d0
00014524 6500 0000                  		bcs.w	KillSonic
00014528 6100 FD78                  		bsr.w	Sonic_Floor
0001452C 0828 0001 0022             		btst	#1,$22(a0)
00014532 6600                       		bne.s	locret_13860
00014534 7000                       		moveq	#0,d0
00014536 3140 0012                  		move.w	d0,$12(a0)
0001453A 3140 0010                  		move.w	d0,$10(a0)
0001453E 3140 0014                  		move.w	d0,$14(a0)
00014542 117C 0000 001C             		move.b	#0,$1C(a0)
00014548 5528 0024                  		subq.b	#2,$24(a0)
0001454C 317C 0078 0030             		move.w	#$78,$30(a0)
00014552                            
00014552                            locret_13860:
00014552 4E75                       		rts	
00014554                            ; End of function Sonic_HurtStop
00014554                            
00014554                            ; ===========================================================================
00014554                            ; ---------------------------------------------------------------------------
00014554                            ; Sonic	when he	dies
00014554                            ; ---------------------------------------------------------------------------
00014554                            
00014554                            Obj01_Death:				; XREF: Obj01_Index
00014554 6100 0000                  		bsr.w	GameOver
00014558 4EBA 9C96                  		jsr	ObjectFall
0001455C 6100 F468                  		bsr.w	Sonic_RecordPos
00014560 6100 0000                  		bsr.w	Sonic_Animate
00014564 6100 0000                  		bsr.w	LoadSonicDynPLC
00014568 4EFA 9D22                  		jmp	DisplaySprite
0001456C                            
0001456C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001456C                            
0001456C                            
0001456C                            GameOver:				; XREF: Obj01_Death
0001456C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014570 0640 0100                  		addi.w	#$100,d0
00014574 B068 000C                  		cmp.w	$C(a0),d0
00014578 6400 0000                  		bcc.w	locret_13900
0001457C 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014582 5428 0024                  		addq.b	#2,$24(a0)
00014586 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001458A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
0001458E 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014592 6600                       		bne.s	loc_138D4
00014594 317C 0000 003A             		move.w	#0,$3A(a0)
0001459A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000145A0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000145A6 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000145AC 4238 FE1A                  		clr.b	($FFFFFE1A).w
000145B0                            
000145B0                            loc_138C2:
000145B0 303C 008F                  		move.w	#$8F,d0
000145B4 4EB9 0000 15CE             		jsr	(PlaySound).l	; play game over music
000145BA 7003                       		moveq	#3,d0
000145BC 4EF9 0000 17B8             		jmp	(LoadPLC).l	; load game over patterns
000145C2                            ; ===========================================================================
000145C2                            
000145C2                            loc_138D4:
000145C2 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000145C8 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000145CC 6700                       		beq.s	locret_13900	; if not, branch
000145CE 317C 0000 003A             		move.w	#0,$3A(a0)
000145D4 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000145DA 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000145E0 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000145E6 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000145EC 60C2                       		bra.s	loc_138C2
000145EE                            ; ===========================================================================
000145EE                            
000145EE                            locret_13900:
000145EE 4E75                       		rts	
000145F0                            ; End of function GameOver
000145F0                            
000145F0                            ; ===========================================================================
000145F0                            ; ---------------------------------------------------------------------------
000145F0                            ; Sonic	when the level is restarted
000145F0                            ; ---------------------------------------------------------------------------
000145F0                            
000145F0                            Obj01_ResetLevel:			; XREF: Obj01_Index
000145F0 4A68 003A                  		tst.w	$3A(a0)
000145F4 6700                       		beq.s	locret_13914
000145F6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000145FA 6600                       		bne.s	locret_13914
000145FC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014602                            
00014602                            locret_13914:
00014602 4E75                       		rts	
00014604                            
00014604                            ; ---------------------------------------------------------------------------
00014604                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014604                            ; ---------------------------------------------------------------------------
00014604                            
00014604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014604                            
00014604                            
00014604                            Sonic_Loops:				; XREF: Obj01_Control
00014604                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014604                            ;		beq.s	loc_13926	; if yes, branch
00014604                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
00014604                            ;		bne.w	locret_139C2	; if not, branch
00014604                            ;		this is commented out, please do more plane messups id love that
00014604                            ;loc_13926:
00014604 3028 000C                  		move.w	$C(a0),d0
00014608 E248                       		lsr.w	#1,d0
0001460A 0240 0380                  		andi.w	#$380,d0
0001460E 1228 0008                  		move.b	8(a0),d1
00014612 0241 007F                  		andi.w	#$7F,d1
00014616 D041                       		add.w	d1,d0
00014618 43F8 A400                  		lea	($FFFFA400).w,a1
0001461C 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014620 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014624 6700 FA7E                  		beq.w	Obj01_ChkRoll
00014628 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
0001462C 6700 FA76                  		beq.w	Obj01_ChkRoll
00014630 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014634 6700                       		beq.s	loc_13976
00014636 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
0001463A 6700                       		beq.s	loc_13966
0001463C 08A8 0006 0001             		bclr	#6,1(a0)
00014642 4E75                       		rts	
00014644                            ; ===========================================================================
00014644                            
00014644                            loc_13966:
00014644 0828 0001 0022             		btst	#1,$22(a0)
0001464A 6700                       		beq.s	loc_13976
0001464C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014652 4E75                       		rts	
00014654                            ; ===========================================================================
00014654                            
00014654                            loc_13976:
00014654 3428 0008                  		move.w	8(a0),d2
00014658 0C02 002C                  		cmpi.b	#$2C,d2
0001465C 6400                       		bcc.s	loc_13988
0001465E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014664 4E75                       		rts	
00014666                            ; ===========================================================================
00014666                            
00014666                            loc_13988:
00014666 0C02 00E0                  		cmpi.b	#-$20,d2
0001466A 6500                       		bcs.s	loc_13996
0001466C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014672 4E75                       		rts	
00014674                            ; ===========================================================================
00014674                            
00014674                            loc_13996:
00014674 0828 0006 0001             		btst	#6,1(a0)
0001467A 6600                       		bne.s	loc_139B2
0001467C 1228 0026                  		move.b	$26(a0),d1
00014680 6700                       		beq.s	locret_139C2
00014682 0C01 0080                  		cmpi.b	#-$80,d1
00014686 6200                       		bhi.s	locret_139C2
00014688 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001468E 4E75                       		rts	
00014690                            ; ===========================================================================
00014690                            
00014690                            loc_139B2:
00014690 1228 0026                  		move.b	$26(a0),d1
00014694 0C01 0080                  		cmpi.b	#-$80,d1
00014698 6300                       		bls.s	locret_139C2
0001469A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000146A0                            
000146A0                            locret_139C2:
000146A0 4E75                       		rts	
000146A2                            ; End of function Sonic_Loops
000146A2                            
000146A2                            ; ---------------------------------------------------------------------------
000146A2                            ; Subroutine to	animate	Sonic's sprites
000146A2                            ; ---------------------------------------------------------------------------
000146A2                            
000146A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146A2                            
000146A2                            Player_Anim:
000146A2 0000 0000                  	dc.l	SonicAniData
000146A6 0000 0000                  	dc.l	SonicAniData ; gronic
000146AA 0000 0000                  	dc.l	SonicAniData ; anakama
000146AE 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
000146B2                            
000146B2                            	; Insert more animation data for other characters here
000146B2                            	
000146B2                            Sonic_Animate:				; XREF: Obj01_Control; et al
000146B2 7000                       			moveq	#0,d0
000146B4 1038 FFE8                  		move.b	(v_character),d0
000146B8 E548                       		lsl.w	#2,d0
000146BA 43FA FFE6                  		lea 	Player_Anim(pc),a1
000146BE                            		
000146BE 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000146C2                            	
000146C2 7000                       		moveq	#0,d0
000146C4 1028 001C                  		move.b	$1C(a0),d0
000146C8 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000146CC 6700                       		beq.s	SAnim_Do	; if not, branch
000146CE 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000146D2 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000146D8 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000146DE                            
000146DE                            SAnim_Do:
000146DE D040                       		add.w	d0,d0
000146E0 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000146E4 1011                       		move.b	(a1),d0
000146E6 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000146E8 1228 0022                  		move.b	$22(a0),d1
000146EC 0201 0001                  		andi.b	#1,d1
000146F0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000146F6 8328 0001                  		or.b	d1,1(a0)
000146FA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000146FE 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014700 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014704                            
00014704                            SAnim_Do2:
00014704 7200                       		moveq	#0,d1
00014706 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001470A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001470E 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014710                            
00014710                            SAnim_Next:
00014710 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014714 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014718                            
00014718                            SAnim_Delay:
00014718 4E75                       		rts	
0001471A                            ; ===========================================================================
0001471A                            
0001471A                            SAnim_End_FF:
0001471A 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001471C 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001471E 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014724 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014728 60E6                       		bra.s	SAnim_Next
0001472A                            ; ===========================================================================
0001472A                            
0001472A                            SAnim_End_FE:
0001472A 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001472C 6600                       		bne.s	SAnim_End_FD	; if not, branch
0001472E 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014732 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014736 9200                       		sub.b	d0,d1
00014738 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001473C 60D2                       		bra.s	SAnim_Next
0001473E                            ; ===========================================================================
0001473E                            
0001473E                            SAnim_End_FD:
0001473E 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014740 6600                       		bne.s	SAnim_End	; if not, branch
00014742 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014748                            
00014748                            SAnim_End:
00014748 4E75                       		rts	
0001474A                            ; ===========================================================================
0001474A                            
0001474A                            SAnim_WalkRun:				; XREF: SAnim_Do
0001474A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001474E 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014750 5200                       		addq.b	#1,d0		; is animation walking/running?
00014752 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014756 7200                       		moveq	#0,d1
00014758 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001475C 1428 0022                  		move.b	$22(a0),d2
00014760 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014764 6600                       		bne.s	loc_13A70	; if yes, branch
00014766 4600                       		not.b	d0		; reverse angle
00014768                            
00014768                            loc_13A70:
00014768 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001476C 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001476E 7203                       		moveq	#3,d1
00014770                            
00014770                            loc_13A78:
00014770 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014776 B302                       		eor.b	d1,d2
00014778 8528 0001                  		or.b	d2,1(a0)
0001477C 0828 0005 0022             		btst	#5,$22(a0)
00014782 6600 0000                  		bne.w	SAnim_Push
00014786 E808                       		lsr.b	#4,d0		; divide angle by $10
00014788 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001478C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014790 6A00                       		bpl.s	loc_13A9C
00014792 4442                       		neg.w	d2
00014794                            
00014794                            loc_13A9C:
00014794 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001479A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001479E 6400                       		bcc.s	loc_13AB4	; if yes, branch
000147A0 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000147A6 1200                       		move.b	d0,d1
000147A8 E209                       		lsr.b	#1,d1
000147AA D001                       		add.b	d1,d0
000147AC                            
000147AC                            loc_13AB4:
000147AC D000                       		add.b	d0,d0
000147AE 1600                       		move.b	d0,d3
000147B0 4442                       		neg.w	d2
000147B2 0642 0800                  		addi.w	#$800,d2
000147B6 6A00                       		bpl.s	loc_13AC2
000147B8 7400                       		moveq	#0,d2
000147BA                            
000147BA                            loc_13AC2:
000147BA E04A                       		lsr.w	#8,d2
000147BC 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000147C0 6100 FF42                  		bsr.w	SAnim_Do2
000147C4 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000147C8 4E75                       		rts	
000147CA                            ; ===========================================================================
000147CA                            
000147CA                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000147CA 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000147CC 6600                       		bne.s	SAnim_Push	; if not, branch
000147CE 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000147D2 6A00                       		bpl.s	loc_13ADE
000147D4 4442                       		neg.w	d2
000147D6                            
000147D6                            loc_13ADE:
000147D6 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000147DC 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000147E0 6400                       		bcc.s	loc_13AF0	; if yes, branch
000147E2 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000147E8                            
000147E8                            loc_13AF0:
000147E8 4442                       		neg.w	d2
000147EA 0642 0400                  		addi.w	#$400,d2
000147EE 6A00                       		bpl.s	loc_13AFA
000147F0 7400                       		moveq	#0,d2
000147F2                            
000147F2                            loc_13AFA:
000147F2 E04A                       		lsr.w	#8,d2
000147F4 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000147F8 1228 0022                  		move.b	$22(a0),d1
000147FC 0201 0001                  		andi.b	#1,d1
00014800 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014806 8328 0001                  		or.b	d1,1(a0)
0001480A 6000 FEF8                  		bra.w	SAnim_Do2
0001480E                            ; ===========================================================================
0001480E                            
0001480E                            SAnim_Push:				; XREF: SAnim_RollJump
0001480E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014812 6B00                       		bmi.s	loc_13B1E
00014814 4442                       		neg.w	d2
00014816                            
00014816                            loc_13B1E:
00014816 0642 0800                  		addi.w	#$800,d2
0001481A 6A00                       		bpl.s	loc_13B26
0001481C 7400                       		moveq	#0,d2
0001481E                            
0001481E                            loc_13B26:
0001481E EC4A                       		lsr.w	#6,d2
00014820 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014824 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001482A 1228 0022                  		move.b	$22(a0),d1
0001482E 0201 0001                  		andi.b	#1,d1
00014832 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014838 8328 0001                  		or.b	d1,1(a0)
0001483C 6000 FEC6                  		bra.w	SAnim_Do2
00014840                            ; End of function Sonic_Animate
00014840                            
00014840                            ; ===========================================================================
00014840                            SonicAniData:
00014840                            	include "_anim\Sonic.asm"
00014840                            ; ---------------------------------------------------------------------------
00014840                            ; Animation script - Sonic
00014840                            ; ---------------------------------------------------------------------------
00014840 0000                       		dc.w SonAni_Walk-SonicAniData
00014842 0000                       		dc.w SonAni_Run-SonicAniData
00014844 0000                       		dc.w SonAni_Roll-SonicAniData
00014846 0000                       		dc.w SonAni_Roll2-SonicAniData
00014848 0000                       		dc.w SonAni_Push-SonicAniData
0001484A 0000                       		dc.w SonAni_Wait-SonicAniData
0001484C 0000                       		dc.w SonAni_Balance-SonicAniData
0001484E 0000                       		dc.w SonAni_LookUp-SonicAniData
00014850 0000                       		dc.w SonAni_Duck-SonicAniData
00014852 0000                       		dc.w SonAni_Warp1-SonicAniData
00014854 0000                       		dc.w SonAni_Warp2-SonicAniData
00014856 0000                       		dc.w SonAni_Warp3-SonicAniData
00014858 0000                       		dc.w SonAni_Warp4-SonicAniData
0001485A 0000                       		dc.w SonAni_Stop-SonicAniData
0001485C 0000                       		dc.w SonAni_Float1-SonicAniData
0001485E 0000                       		dc.w SonAni_Float2-SonicAniData
00014860 0000                       		dc.w SonAni_Spring-SonicAniData
00014862 0000                       		dc.w SonAni_LZHang-SonicAniData
00014864 0000                       		dc.w SonAni_Leap1-SonicAniData
00014866 0000                       		dc.w SonAni_Leap2-SonicAniData
00014868 0000                       		dc.w SonAni_Surf-SonicAniData
0001486A 0000                       		dc.w SonAni_Bubble-SonicAniData
0001486C 0000                       		dc.w SonAni_Death1-SonicAniData
0001486E 0000                       		dc.w SonAni_Drown-SonicAniData
00014870 0000                       		dc.w SonAni_Death2-SonicAniData
00014872 0000                       		dc.w SonAni_Shrink-SonicAniData
00014874 0000                       		dc.w SonAni_Hurt-SonicAniData
00014876 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014878 0000                       		dc.w SonAni_Blank-SonicAniData
0001487A 0000                       		dc.w SonAni_Float3-SonicAniData
0001487C 0000                       		dc.w SonAni_Float4-SonicAniData
0001487E FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014888 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014890 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014898 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000148A0 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000148A8 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000148BE 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000148C2 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000148C6 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000148CA 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000148CE 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000148D2 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000148D6 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000148DA 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000148DE 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000148E2 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000148EA 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000148EE 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000148F2 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000148F8 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000148FE 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014902 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001490A 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001490E 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014912 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014916 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014920 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014924 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014928 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001492C 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014934 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014938                            		even
00014938                            		even
00014938                            
00014938                            ; ---------------------------------------------------------------------------
00014938                            ; Sonic	pattern	loading	subroutine
00014938                            ; ---------------------------------------------------------------------------
00014938                            
00014938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014938                            Player_DPLC:
00014938 0000 0000                  	dc.l	SonicDynPLC
0001493C 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014940 0000 0000                  	dc.l	SonicDynPLC ; anakama
00014944 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
00014948                            	; add pointers for player dplc here
00014948                            Player_Art:
00014948 0000 0000                  	dc.l	Art_Sonic
0001494C 0000 0000                  	dc.l	Art_Sonic ; gronic
00014950 0000 0000                  	dc.l	Art_Sonic ; anakama
00014954 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
00014958                            	; add pointers for player art here
00014958                            
00014958                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014958 7000                       		moveq	#0,d0
0001495A 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001495E B038 F766                  		cmp.b	($FFFFF766).w,d0
00014962 6700                       		beq.s	locret_13C96
00014964 11C0 F766                  		move.b	d0,($FFFFF766).w
00014968                            		
00014968 323C 0000                  		move.w	#0,d1
0001496C 1238 FFE8                  		move.b	(v_character),d1
00014970 E549                       		lsl.w	#2,d1
00014972 45FA FFC4                  		lea 	Player_DPLC(pc),a2
00014976                            
00014976 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
0001497A                            		
0001497A D040                       		add.w	d0,d0
0001497C D4F2 0000                  		adda.w	(a2,d0.w),a2
00014980 7200                       		moveq	#0,d1
00014982 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014984 5301                       		subq.b	#1,d1
00014986 6B00                       		bmi.s	locret_13C96
00014988 47F8 C800                  		lea	($FFFFC800).w,a3
0001498C 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014992                            
00014992                            SPLC_ReadEntry:
00014992 303C 0000                  		move.w	#0,d0
00014996 1038 FFE8                  		move.b	(v_character),d0
0001499A E548                       		lsl.w	#2,d0
0001499C 43FA FFAA                  		lea 	Player_Art(pc),a1
000149A0                            
000149A0 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000149A4                            
000149A4 7400                       		moveq	#0,d2
000149A6 141A                       		move.b	(a2)+,d2
000149A8 3002                       		move.w	d2,d0
000149AA E808                       		lsr.b	#4,d0
000149AC E14A                       		lsl.w	#8,d2
000149AE 141A                       		move.b	(a2)+,d2
000149B0 EB4A                       		lsl.w	#5,d2
000149B2 D3C2                       		adda.l	d2,a1
000149B4                            
000149B4                            SPLC_LoadTile:
000149B4 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000149B8 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000149BC 47EB 0020                  		lea	$20(a3),a3	; next tile
000149C0 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000149C4                            
000149C4 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000149C8                            
000149C8                            locret_13C96:
000149C8 4E75                       		rts	
000149CA                            ; End of function LoadSonicDynPLC
000149CA                            
000149CA                            ; ===========================================================================
000149CA                            ; ---------------------------------------------------------------------------
000149CA                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000149CA                            ; ---------------------------------------------------------------------------
000149CA                            
000149CA                            Obj0A:					; XREF: Obj_Index
000149CA 7000                       		moveq	#0,d0
000149CC 1028 0024                  		move.b	$24(a0),d0
000149D0 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000149D4 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000149D8                            ; ===========================================================================
000149D8 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000149DC 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000149E0 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000149E4 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000149E8 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000149EA                            ; ===========================================================================
000149EA                            
000149EA                            Obj0A_Main:				; XREF: Obj0A_Index
000149EA 5428 0024                  		addq.b	#2,$24(a0)
000149EE 217C 0001 35EA 0004        		move.l	#Map_obj64,4(a0)
000149F6 317C 8348 0002             		move.w	#$8348,2(a0)
000149FC 117C 0084 0001             		move.b	#$84,1(a0)
00014A02 117C 0010 0019             		move.b	#$10,$19(a0)
00014A08 117C 0001 0018             		move.b	#1,$18(a0)
00014A0E 1028 0028                  		move.b	$28(a0),d0
00014A12 6A00                       		bpl.s	loc_13D00
00014A14 5028 0024                  		addq.b	#8,$24(a0)
00014A18 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014A20 317C 0440 0002             		move.w	#$440,2(a0)
00014A26 0240 007F                  		andi.w	#$7F,d0
00014A2A 1140 0033                  		move.b	d0,$33(a0)
00014A2E 6000 0000                  		bra.w	Obj0A_Countdown
00014A32                            ; ===========================================================================
00014A32                            
00014A32                            loc_13D00:
00014A32 1140 001C                  		move.b	d0,$1C(a0)
00014A36 3168 0008 0030             		move.w	8(a0),$30(a0)
00014A3C 317C FF78 0012             		move.w	#-$88,$12(a0)
00014A42                            
00014A42                            Obj0A_Animate:				; XREF: Obj0A_Index
00014A42 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014A48 4EB9 0000 B2E4             		jsr	AnimateSprite
00014A4E                            
00014A4E                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014A4E 3038 F646                  		move.w	($FFFFF646).w,d0
00014A52 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014A56 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014A58 117C 0006 0024             		move.b	#6,$24(a0)
00014A5E 5E28 001C                  		addq.b	#7,$1C(a0)
00014A62 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014A68 6700                       		beq.s	Obj0A_Display
00014A6A 6000                       		bra.s	Obj0A_Display
00014A6C                            ; ===========================================================================
00014A6C                            
00014A6C                            Obj0A_Wobble:
00014A6C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014A70 6700                       		beq.s	loc_13D44
00014A72 5868 0030                  		addq.w	#4,$30(a0)
00014A76                            
00014A76                            loc_13D44:
00014A76 1028 0026                  		move.b	$26(a0),d0
00014A7A 5228 0026                  		addq.b	#1,$26(a0)
00014A7E 0240 007F                  		andi.w	#$7F,d0
00014A82 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014A88 1031 0000                  		move.b	(a1,d0.w),d0
00014A8C 4880                       		ext.w	d0
00014A8E D068 0030                  		add.w	$30(a0),d0
00014A92 3140 0008                  		move.w	d0,8(a0)
00014A96 6100                       		bsr.s	Obj0A_ShowNumber
00014A98 4EBA 97B8                  		jsr	SpeedToPos
00014A9C 4A28 0001                  		tst.b	1(a0)
00014AA0 6A00                       		bpl.s	Obj0A_Delete
00014AA2 4EFA 97E8                  		jmp	DisplaySprite
00014AA6                            ; ===========================================================================
00014AA6                            
00014AA6                            Obj0A_Delete:
00014AA6 4EFA 9820                  		jmp	DeleteObject
00014AAA                            ; ===========================================================================
00014AAA                            
00014AAA                            Obj0A_Display:				; XREF: Obj0A_Index
00014AAA 6100                       		bsr.s	Obj0A_ShowNumber
00014AAC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014AB2 4EB9 0000 B2E4             		jsr	AnimateSprite
00014AB8 4EFA 97D2                  		jmp	DisplaySprite
00014ABC                            ; ===========================================================================
00014ABC                            
00014ABC                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014ABC 4EFA 980A                  		jmp	DeleteObject
00014AC0                            ; ===========================================================================
00014AC0                            
00014AC0                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014AC0 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014AC6 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014AC8 5368 0038                  		subq.w	#1,$38(a0)
00014ACC 6600                       		bne.s	Obj0A_Display2
00014ACE 117C 000E 0024             		move.b	#$E,$24(a0)
00014AD4 5E28 001C                  		addq.b	#7,$1C(a0)
00014AD8 60D0                       		bra.s	Obj0A_Display
00014ADA                            ; ===========================================================================
00014ADA                            
00014ADA                            Obj0A_Display2:
00014ADA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014AE0 4EB9 0000 B2E4             		jsr	AnimateSprite
00014AE6 4A28 0001                  		tst.b	1(a0)
00014AEA 6A00                       		bpl.s	Obj0A_Delete3
00014AEC 4EFA 979E                  		jmp	DisplaySprite
00014AF0                            ; ===========================================================================
00014AF0                            
00014AF0                            Obj0A_Delete3:
00014AF0 4EFA 97D6                  		jmp	DeleteObject
00014AF4                            ; ===========================================================================
00014AF4                            
00014AF4                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014AF4 4A68 0038                  		tst.w	$38(a0)
00014AF8 6700                       		beq.s	locret_13E1A
00014AFA 5368 0038                  		subq.w	#1,$38(a0)
00014AFE 6600                       		bne.s	locret_13E1A
00014B00 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014B06 6400                       		bcc.s	locret_13E1A
00014B08 317C 000F 0038             		move.w	#$F,$38(a0)
00014B0E 4268 0012                  		clr.w	$12(a0)
00014B12 117C 0080 0001             		move.b	#$80,1(a0)
00014B18 3028 0008                  		move.w	8(a0),d0
00014B1C 9078 F700                  		sub.w	($FFFFF700).w,d0
00014B20 0640 0080                  		addi.w	#$80,d0
00014B24 3140 0008                  		move.w	d0,8(a0)
00014B28 3028 000C                  		move.w	$C(a0),d0
00014B2C 9078 F704                  		sub.w	($FFFFF704).w,d0
00014B30 0640 0080                  		addi.w	#$80,d0
00014B34 3140 000A                  		move.w	d0,$A(a0)
00014B38 117C 000C 0024             		move.b	#$C,$24(a0)
00014B3E                            
00014B3E                            locret_13E1A:
00014B3E 4E75                       		rts	
00014B40                            ; ===========================================================================
00014B40                            Obj0A_WobbleData:
00014B40 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014B51 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014B62 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014B73 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014B83 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014B90 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014B9D FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014BAA FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014BB7 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014BC0                            ; ===========================================================================
00014BC0                            
00014BC0                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014BC0 4A68 002C                  		tst.w	$2C(a0)
00014BC4 6600 0000                  		bne.w	loc_13F86
00014BC8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014BCE 6400 0000                  		bcc.w	locret_1408C
00014BD2 0838 0006 D022             		btst	#6,($FFFFD022).w
00014BD8 6700 0000                  		beq.w	locret_1408C
00014BDC 5368 0038                  		subq.w	#1,$38(a0)
00014BE0 6A00 0000                  		bpl.w	loc_13FAC
00014BE4 317C 003B 0038             		move.w	#59,$38(a0)
00014BEA 317C 0001 0036             		move.w	#1,$36(a0)
00014BF0 4EB9 0000 2D48             		jsr	(RandomNumber).l
00014BF6 0240 0001                  		andi.w	#1,d0
00014BFA 1140 0034                  		move.b	d0,$34(a0)
00014BFE 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014C02 0C40 0019                  		cmpi.w	#$19,d0
00014C06 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014C08 0C40 0014                  		cmpi.w	#$14,d0
00014C0C 6700                       		beq.s	Obj0A_WarnSound
00014C0E 0C40 000F                  		cmpi.w	#$F,d0
00014C12 6700                       		beq.s	Obj0A_WarnSound
00014C14 0C40 000C                  		cmpi.w	#$C,d0
00014C18 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014C1A 6600                       		bne.s	loc_13F02
00014C1C 303C 0092                  		move.w	#$92,d0
00014C20 4EB9 0000 15CE             		jsr	(PlaySound).l	; play countdown music
00014C26                            
00014C26                            loc_13F02:
00014C26 5328 0032                  		subq.b	#1,$32(a0)
00014C2A 6A00                       		bpl.s	Obj0A_ReduceAir
00014C2C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014C32 08E8 0007 0036             		bset	#7,$36(a0)
00014C38 6000                       		bra.s	Obj0A_ReduceAir
00014C3A                            ; ===========================================================================
00014C3A                            
00014C3A                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014C3A 303C 00C2                  		move.w	#$C2,d0
00014C3E 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014C44                            
00014C44                            Obj0A_ReduceAir:
00014C44 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014C48 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014C4C 6100 0000                  		bsr.w	ResumeMusic
00014C50 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014C56 303C 00B2                  		move.w	#$B2,d0
00014C5A 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play drowning sound
00014C60 117C 000A 0034             		move.b	#$A,$34(a0)
00014C66 317C 0001 0036             		move.w	#1,$36(a0)
00014C6C 317C 0078 002C             		move.w	#$78,$2C(a0)
00014C72 2F08                       		move.l	a0,-(sp)
00014C74 41F8 D000                  		lea	($FFFFD000).w,a0
00014C78 6100 F824                  		bsr.w	Sonic_ResetOnFloor
00014C7C 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014C82 08E8 0001 0022             		bset	#1,$22(a0)
00014C88 08E8 0007 0002             		bset	#7,2(a0)
00014C8E 317C 0000 0012             		move.w	#0,$12(a0)
00014C94 317C 0000 0010             		move.w	#0,$10(a0)
00014C9A 317C 0000 0014             		move.w	#0,$14(a0)
00014CA0 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014CA6 205F                       		movea.l	(sp)+,a0
00014CA8 4E75                       		rts	
00014CAA                            ; ===========================================================================
00014CAA                            
00014CAA                            loc_13F86:
00014CAA 5368 002C                  		subq.w	#1,$2C(a0)
00014CAE 6600                       		bne.s	loc_13F94
00014CB0 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014CB6 4E75                       		rts	
00014CB8                            ; ===========================================================================
00014CB8                            
00014CB8                            loc_13F94:
00014CB8 2F08                       		move.l	a0,-(sp)
00014CBA 41F8 D000                  		lea	($FFFFD000).w,a0
00014CBE 7210                       		moveq	#$10,d1
00014CC0 4EBA 9530                  		jsr	ObjectFallCustom
00014CC4 205F                       		movea.l	(sp)+,a0
00014CC6 6000                       		bra.s	loc_13FAC
00014CC8                            ; ===========================================================================
00014CC8                            
00014CC8                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014CC8 6000                       		bra.s	Obj0A_MakeItem
00014CCA                            ; ===========================================================================
00014CCA                            
00014CCA                            loc_13FAC:
00014CCA 4A68 0036                  		tst.w	$36(a0)
00014CCE 6700 0000                  		beq.w	locret_1408C
00014CD2 5368 003A                  		subq.w	#1,$3A(a0)
00014CD6 6A00 0000                  		bpl.w	locret_1408C
00014CDA                            
00014CDA                            Obj0A_MakeItem:
00014CDA 4EB9 0000 2D48             		jsr	(RandomNumber).l
00014CE0 0240 000F                  		andi.w	#$F,d0
00014CE4 3140 003A                  		move.w	d0,$3A(a0)
00014CE8 4EBA 9A28                  		jsr	SingleObjLoad
00014CEC 6600 0000                  		bne.w	locret_1408C
00014CF0 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014CF4 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014CFA 7006                       		moveq	#6,d0
00014CFC 0838 0000 D022             		btst	#0,($FFFFD022).w
00014D02 6700                       		beq.s	loc_13FF2
00014D04 4440                       		neg.w	d0
00014D06 137C 0040 0026             		move.b	#$40,$26(a1)
00014D0C                            
00014D0C                            loc_13FF2:
00014D0C D169 0008                  		add.w	d0,8(a1)
00014D10 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014D16 137C 0006 0028             		move.b	#6,$28(a1)
00014D1C 4A68 002C                  		tst.w	$2C(a0)
00014D20 6700 0000                  		beq.w	loc_1403E
00014D24 0268 0007 003A             		andi.w	#7,$3A(a0)
00014D2A 0668 0000 003A             		addi.w	#0,$3A(a0)
00014D30 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014D34 0440 000C                  		subi.w	#$C,d0
00014D38 3340 000C                  		move.w	d0,$C(a1)
00014D3C 4EB9 0000 2D48             		jsr	(RandomNumber).l
00014D42 1340 0026                  		move.b	d0,$26(a1)
00014D46 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014D4A 0200 0003                  		andi.b	#3,d0
00014D4E 6600                       		bne.s	loc_14082
00014D50 137C 000E 0028             		move.b	#$E,$28(a1)
00014D56 6000                       		bra.s	loc_14082
00014D58                            ; ===========================================================================
00014D58                            
00014D58                            loc_1403E:
00014D58 0828 0007 0036             		btst	#7,$36(a0)
00014D5E 6700                       		beq.s	loc_14082
00014D60 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014D64 E24A                       		lsr.w	#1,d2
00014D66 4EB9 0000 2D48             		jsr	(RandomNumber).l
00014D6C 0240 0003                  		andi.w	#3,d0
00014D70 6600                       		bne.s	loc_1406A
00014D72 08E8 0006 0036             		bset	#6,$36(a0)
00014D78 6600                       		bne.s	loc_14082
00014D7A 1342 0028                  		move.b	d2,$28(a1)
00014D7E 337C 001C 0038             		move.w	#$1C,$38(a1)
00014D84                            
00014D84                            loc_1406A:
00014D84 4A28 0034                  		tst.b	$34(a0)
00014D88 6600                       		bne.s	loc_14082
00014D8A 08E8 0006 0036             		bset	#6,$36(a0)
00014D90 6600                       		bne.s	loc_14082
00014D92 1342 0028                  		move.b	d2,$28(a1)
00014D96 337C 001C 0038             		move.w	#$1C,$38(a1)
00014D9C                            
00014D9C                            loc_14082:
00014D9C 5328 0034                  		subq.b	#1,$34(a0)
00014DA0 6A00                       		bpl.s	locret_1408C
00014DA2 4268 0036                  		clr.w	$36(a0)
00014DA6                            
00014DA6                            locret_1408C:
00014DA6 4E75                       		rts	
00014DA8                            
00014DA8                            ; ---------------------------------------------------------------------------
00014DA8                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014DA8                            ; ---------------------------------------------------------------------------
00014DA8                            
00014DA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DA8                            
00014DA8                            
00014DA8                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014DA8 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014DAE                             
00014DAE                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014DAE                             
00014DAE 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014DB2                             
00014DB2 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014DB8 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014DBA 43F9 0000 3DCC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014DC0 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014DC2                             
00014DC2                            Air_GetBgm2:
00014DC2 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014DC8 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014DCA 43F9 0000 3DD4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014DD0 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014DD2                             
00014DD2                            Air_GetBgm3:
00014DD2 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014DD8 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014DDA 43F9 0000 3DDC             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014DE0 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014DE2                             
00014DE2                            Air_GetBgm4:
00014DE2 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014DE8 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014DEA 43F9 0000 3DE4             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014DF0                             
00014DF0                            Air_PlayMusic:
00014DF0 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014DF4                             
00014DF4                            loc_140A6:
00014DF4 4EB9 0000 15CE             		jsr	(PlaySound).l
00014DFA                             
00014DFA                            ; NineKode ends here
00014DFA                            
00014DFA                            loc_140AC:
00014DFA 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014E00 4238 D372                  		clr.b	($FFFFD372).w
00014E04 4E75                       		rts	
00014E06                            ; End of function ResumeMusic
00014E06                            
00014E06                            ; ===========================================================================
00014E06                            Ani_obj0A:
00014E06                            	include "_anim\obj0A.asm"
00014E06                            ; ---------------------------------------------------------------------------
00014E06                            ; Animation script - countdown numbers and bubbles (LZ)
00014E06                            ; ---------------------------------------------------------------------------
00014E06 0000                       		dc.w byte_140D6-Ani_obj0A
00014E08 0000                       		dc.w byte_140E0-Ani_obj0A
00014E0A 0000                       		dc.w byte_140EA-Ani_obj0A
00014E0C 0000                       		dc.w byte_140F4-Ani_obj0A
00014E0E 0000                       		dc.w byte_140FE-Ani_obj0A
00014E10 0000                       		dc.w byte_14108-Ani_obj0A
00014E12 0000                       		dc.w byte_14112-Ani_obj0A
00014E14 0000                       		dc.w byte_14118-Ani_obj0A
00014E16 0000                       		dc.w byte_14120-Ani_obj0A
00014E18 0000                       		dc.w byte_14128-Ani_obj0A
00014E1A 0000                       		dc.w byte_14130-Ani_obj0A
00014E1C 0000                       		dc.w byte_14138-Ani_obj0A
00014E1E 0000                       		dc.w byte_14140-Ani_obj0A
00014E20 0000                       		dc.w byte_14148-Ani_obj0A
00014E22 0000                       		dc.w byte_1414A-Ani_obj0A
00014E24 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014E2E 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014E38 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014E42 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014E4C 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014E56 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014E60 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014E66 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014E6E 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014E76 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014E7E 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014E86 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014E8E 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014E96 0EFC                       byte_14148:	dc.b $E, $FC
00014E98 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014E9E                            		even
00014E9E                            		even
00014E9E                            
00014E9E                            ; ---------------------------------------------------------------------------
00014E9E                            ; Sprite mappings - drowning countdown numbers (LZ)
00014E9E                            ; ---------------------------------------------------------------------------
00014E9E                            Map_obj0A:
00014E9E                            	include "_maps\obj0A.asm"
00014E9E                            ; ---------------------------------------------------------------------------
00014E9E                            ; Sprite mappings - drowning countdown numbers (LZ)
00014E9E                            ; ---------------------------------------------------------------------------
00014E9E 0000                       		dc.w byte_14152-Map_obj0A
00014EA0 01                         byte_14152:	dc.b 1
00014EA1 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014EA6                            		even
00014EA6                            		even
00014EA6                            
00014EA6                            ; ===========================================================================
00014EA6                            ; ---------------------------------------------------------------------------
00014EA6                            ; Object 38 - shield and invincibility stars
00014EA6                            ; ---------------------------------------------------------------------------
00014EA6                            
00014EA6                            Obj38:					; XREF: Obj_Index
00014EA6 7000                       		moveq	#0,d0
00014EA8 1028 0024                  		move.b	$24(a0),d0
00014EAC 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014EB0 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014EB4                            ; ===========================================================================
00014EB4 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014EB6 0000                       		dc.w Obj38_Shield-Obj38_Index
00014EB8 0000                       		dc.w Obj38_Stars-Obj38_Index
00014EBA                            ; ===========================================================================
00014EBA                            
00014EBA                            Obj38_Main:				; XREF: Obj38_Index
00014EBA 5428 0024                  		addq.b	#2,$24(a0)
00014EBE 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014EC6 117C 0004 0001             		move.b	#4,1(a0)
00014ECC 117C 0001 0018             		move.b	#1,$18(a0)
00014ED2 117C 0010 0019             		move.b	#$10,$19(a0)
00014ED8 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014EDC 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014EDE 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014EE4 4E75                       		rts	
00014EE6                            ; ===========================================================================
00014EE6                            
00014EE6                            Obj38_DoStars:
00014EE6 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014EEA 317C 055C 0002             		move.w	#$55C,2(a0)
00014EF0 4E75                       		rts	
00014EF2                            ; ===========================================================================
00014EF2                            
00014EF2                            Obj38_Shield:				; XREF: Obj38_Index
00014EF2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014EF6 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014EF8 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014EFC 6700                       		beq.s	Obj38_Delete	; if not, branch
00014EFE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014F04 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014F0A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014F10 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014F16 4EB9 0000 B2E4             		jsr	AnimateSprite
00014F1C 4EFA 936E                  		jmp	DisplaySprite
00014F20                            ; ===========================================================================
00014F20                            
00014F20                            Obj38_RmvShield:
00014F20 4E75                       		rts	
00014F22                            ; ===========================================================================
00014F22                            
00014F22                            Obj38_Delete:
00014F22 4EFA 93A4                  		jmp	DeleteObject
00014F26                            ; ===========================================================================
00014F26                            
00014F26                            Obj38_Stars:				; XREF: Obj38_Index
00014F26 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014F2A 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014F2C 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014F30 1228 001C                  		move.b	$1C(a0),d1
00014F34 5301                       		subq.b	#1,d1
00014F36 6000                       		bra.s	Obj38_StarTrail
00014F38                            ; ===========================================================================
00014F38 E909                       		lsl.b	#4,d1
00014F3A 5801                       		addq.b	#4,d1
00014F3C 9001                       		sub.b	d1,d0
00014F3E 1228 0030                  		move.b	$30(a0),d1
00014F42 9001                       		sub.b	d1,d0
00014F44 5801                       		addq.b	#4,d1
00014F46 0201 000F                  		andi.b	#$F,d1
00014F4A 1141 0030                  		move.b	d1,$30(a0)
00014F4E 6000                       		bra.s	Obj38_StarTrail2a
00014F50                            ; ===========================================================================
00014F50                            
00014F50                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014F50 E709                       		lsl.b	#3,d1
00014F52 1401                       		move.b	d1,d2
00014F54 D201                       		add.b	d1,d1
00014F56 D202                       		add.b	d2,d1
00014F58 5801                       		addq.b	#4,d1
00014F5A 9001                       		sub.b	d1,d0
00014F5C 1228 0030                  		move.b	$30(a0),d1
00014F60 9001                       		sub.b	d1,d0
00014F62 5801                       		addq.b	#4,d1
00014F64 0C01 0018                  		cmpi.b	#$18,d1
00014F68 6500                       		bcs.s	Obj38_StarTrail2
00014F6A 7200                       		moveq	#0,d1
00014F6C                            
00014F6C                            Obj38_StarTrail2:
00014F6C 1141 0030                  		move.b	d1,$30(a0)
00014F70                            
00014F70                            Obj38_StarTrail2a:
00014F70 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014F74 43F1 0000                  		lea	(a1,d0.w),a1
00014F78 3159 0008                  		move.w	(a1)+,8(a0)
00014F7C 3159 000C                  		move.w	(a1)+,$C(a0)
00014F80 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014F86 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014F8C 4EB9 0000 B2E4             		jsr	AnimateSprite
00014F92 4EFA 92F8                  		jmp	DisplaySprite
00014F96                            ; ===========================================================================
00014F96                            
00014F96                            Obj38_Delete2:				; XREF: Obj38_Stars
00014F96 4EFA 9330                  		jmp	DeleteObject
00014F9A                            ; ===========================================================================
00014F9A                            ; ---------------------------------------------------------------------------
00014F9A                            ; Object 4A - special stage entry from beta
00014F9A                            ; ---------------------------------------------------------------------------
00014F9A                            
00014F9A                            Obj4A:					; XREF: Obj_Index
00014F9A 7000                       		moveq	#0,d0
00014F9C 1028 0024                  		move.b	$24(a0),d0
00014FA0 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014FA4 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014FA8                            ; ===========================================================================
00014FA8 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014FAA 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014FAC 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014FAE                            ; ===========================================================================
00014FAE                            
00014FAE                            Obj4A_Main:				; XREF: Obj4A_Index
00014FAE 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014FB2 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014FB4 4E75                       		rts	
00014FB6                            ; ===========================================================================
00014FB6                            
00014FB6                            Obj4A_Main2:
00014FB6 5428 0024                  		addq.b	#2,$24(a0)
00014FBA 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014FC2 117C 0004 0001             		move.b	#4,1(a0)
00014FC8 117C 0001 0018             		move.b	#1,$18(a0)
00014FCE 117C 0038 0019             		move.b	#$38,$19(a0)
00014FD4 317C 0541 0002             		move.w	#$541,2(a0)
00014FDA 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014FE0                            
00014FE0                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014FE0 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014FE6 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014FEC 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014FF2 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014FF8 4EB9 0000 B2E4             		jsr	AnimateSprite
00014FFE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00015004 6600                       		bne.s	Obj4A_Display
00015006 4A38 D000                  		tst.b	($FFFFD000).w
0001500A 6700                       		beq.s	Obj4A_Display
0001500C 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00015012 303C 00A8                  		move.w	#$A8,d0
00015016 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001501C                            
0001501C                            Obj4A_Display:
0001501C 4EFA 926E                  		jmp	DisplaySprite
00015020                            ; ===========================================================================
00015020                            
00015020                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00015020 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00015024 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00015026 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0001502C 4EFA 929A                  		jmp	DeleteObject
00015030                            ; ===========================================================================
00015030                            
00015030                            Obj4A_Wait:
00015030 4E75                       		rts	
00015032                            ; ===========================================================================
00015032                            ; ---------------------------------------------------------------------------
00015032                            ; Object 08 - water splash (LZ)
00015032                            ; ---------------------------------------------------------------------------
00015032                            
00015032                            Obj08:					; XREF: Obj_Index
00015032 7000                       		moveq	#0,d0
00015034 1028 0024                  		move.b	$24(a0),d0
00015038 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001503C 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00015040                            ; ===========================================================================
00015040 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00015042 0000                       		dc.w Obj08_Display-Obj08_Index
00015044 0000                       		dc.w Obj08_Delete-Obj08_Index
00015046                            ; ===========================================================================
00015046                            
00015046                            Obj08_Main:				; XREF: Obj08_Index
00015046 5428 0024                  		addq.b	#2,$24(a0)
0001504A 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00015052 0028 0004 0001             		ori.b	#4,1(a0)
00015058 117C 0001 0018             		move.b	#1,$18(a0)
0001505E 117C 0010 0019             		move.b	#$10,$19(a0)
00015064 317C 4259 0002             		move.w	#$4259,2(a0)
0001506A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00015070                            
00015070                            Obj08_Display:				; XREF: Obj08_Index
00015070 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00015076 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001507C 4EB9 0000 B2E4             		jsr	AnimateSprite
00015082 4EFA 9208                  		jmp	DisplaySprite
00015086                            ; ===========================================================================
00015086                            
00015086                            Obj08_Delete:				; XREF: Obj08_Index
00015086 4EFA 9240                  		jmp	DeleteObject	; delete when animation	is complete
0001508A                            ; ===========================================================================
0001508A                            Ani_obj38:
0001508A                            	include "_anim\obj38.asm"
0001508A                            ; ---------------------------------------------------------------------------
0001508A                            ; Animation script - shield and invincibility stars
0001508A                            ; ---------------------------------------------------------------------------
0001508A 0000                       		dc.w byte_14356-Ani_obj38
0001508C 0000                       		dc.w byte_1435E-Ani_obj38
0001508E 0000                       		dc.w byte_14364-Ani_obj38
00015090 0000                       		dc.w byte_1437E-Ani_obj38
00015092 0000                       		dc.w byte_14398-Ani_obj38
00015094 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001509C 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000150A2 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000150B3 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000150BC 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000150CD 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000150D6 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000150E7 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000150F0                            		even
000150F0                            		even
000150F0                            
000150F0                            ; ---------------------------------------------------------------------------
000150F0                            ; Sprite mappings - shield and invincibility stars
000150F0                            ; ---------------------------------------------------------------------------
000150F0                            Map_obj38:
000150F0                            	include "_maps\obj38.asm"
000150F0                            ; ---------------------------------------------------------------------------
000150F0                            ; Sprite mappings - shield and invincibility stars
000150F0                            ; ---------------------------------------------------------------------------
000150F0 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000150F4 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000150F8 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000150FC 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00015100 04                         byte_143C2:	dc.b 4
00015101 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015106 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
0001510B 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00015110 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015115 04                         byte_143D7:	dc.b 4
00015116 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
0001511B E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00015120 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015125 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
0001512A 04                         byte_143EC:	dc.b 4
0001512B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015130 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015135 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001513A 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001513F 04                         byte_14401:	dc.b 4
00015140 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015145 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
0001514A 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001514F 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015154 04                         byte_14416:	dc.b 4
00015155 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001515A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001515F 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015164 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015169 04                         byte_1442B:	dc.b 4
0001516A E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0001516F E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015174 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015179 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0001517E 04                         byte_14440:	dc.b 4
0001517F E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015184 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015189 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0001518E 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00015194 00                         		even
00015194 00                         		even
00015194                            
00015194                            Ani_obj4A:
00015194                            	include "_anim\obj4A.asm"
00015194                            ; ---------------------------------------------------------------------------
00015194                            ; Animation script - special stage entry effect from beta
00015194                            ; ---------------------------------------------------------------------------
00015194 0000                       		dc.w byte_14458-Ani_obj4A
00015196 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
000151AA                            		even
000151AA                            		even
000151AA                            
000151AA                            ; ---------------------------------------------------------------------------
000151AA                            ; Sprite mappings - special stage entry	from beta
000151AA                            ; ---------------------------------------------------------------------------
000151AA                            Map_obj4A:
000151AA                            	include "_maps\obj4A.asm"
000151AA                            ; ---------------------------------------------------------------------------
000151AA                            ; Sprite mappings - special stage entry	from beta
000151AA                            ; ---------------------------------------------------------------------------
000151AA 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
000151AE 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
000151B2 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
000151B6 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
000151BA 03                         byte_1447C:	dc.b 3
000151BB F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000151C0 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000151C5 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000151CA 03                         byte_1448C:	dc.b 3
000151CB F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000151D0 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000151D5 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000151DA 05                         byte_1449C:	dc.b 5
000151DB E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000151E0 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000151E5 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000151EA 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000151EF 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000151F4 09                         byte_144B6:	dc.b 9
000151F5 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000151FA F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000151FF 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00015204 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015209 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001520E F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00015213 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015218 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001521D F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015222 12                         byte_144E4:	dc.b $12
00015223 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015228 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001522D F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015232 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015237 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001523C 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00015241 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015246 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001524B 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015250 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015255 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001525A 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001525F F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015264 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015269 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001526E F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015273 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015278 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001527D 11                         byte_1453F:	dc.b $11
0001527E F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015283 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015288 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001528D 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015292 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015297 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001529C 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000152A1 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000152A6 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000152AB 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000152B0 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000152B5 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000152BA F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000152BF 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000152C4 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000152C9 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000152CE 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000152D3 09                         byte_14595:	dc.b 9
000152D4 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000152D9 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000152DE 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000152E3 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000152E8 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000152ED FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000152F2 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000152F7 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000152FC 04                         		dc.b 4
000152FD 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00015302                            		even
00015302                            		even
00015302                            
00015302                            Ani_obj08:
00015302                            	include "_anim\obj08.asm"
00015302                            ; ---------------------------------------------------------------------------
00015302                            ; Animation script - water splash (LZ)
00015302                            ; ---------------------------------------------------------------------------
00015302 0000                       		dc.w byte_145C6-Ani_obj08
00015304 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
0001530A                            		even
0001530A                            		even
0001530A                            
0001530A                            ; ---------------------------------------------------------------------------
0001530A                            ; Sprite mappings - water splash (LZ)
0001530A                            ; ---------------------------------------------------------------------------
0001530A                            Map_obj08:
0001530A                            	include "_maps\obj08.asm"
0001530A                            ; ---------------------------------------------------------------------------
0001530A                            ; Sprite mappings - water splash (LZ)
0001530A                            ; ---------------------------------------------------------------------------
0001530A 0000                       		dc.w byte_145D2-Map_obj08
0001530C 0000                       		dc.w byte_145DD-Map_obj08
0001530E 0000                       		dc.w byte_145E8-Map_obj08
00015310 02                         byte_145D2:	dc.b 2
00015311 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015316 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001531B 02                         byte_145DD:	dc.b 2
0001531C E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015321 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015326 01                         byte_145E8:	dc.b 1
00015327 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001532C                            		even
0001532C                            		even
0001532C                            
0001532C                            ; ---------------------------------------------------------------------------
0001532C                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001532C                            ; ---------------------------------------------------------------------------
0001532C                            
0001532C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001532C                            
0001532C                            
0001532C                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001532C 0828 0003 0022             		btst	#3,$22(a0)
00015332 6700                       		beq.s	loc_14602
00015334 7000                       		moveq	#0,d0
00015336 11C0 F768                  		move.b	d0,($FFFFF768).w
0001533A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001533E 4E75                       		rts	
00015340                            ; ===========================================================================
00015340                            
00015340                            loc_14602:
00015340 7003                       		moveq	#3,d0
00015342 11C0 F768                  		move.b	d0,($FFFFF768).w
00015346 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001534A 1028 0026                  		move.b	$26(a0),d0
0001534E 0600 0020                  		addi.b	#$20,d0
00015352 6A00                       		bpl.s	loc_14624
00015354 1028 0026                  		move.b	$26(a0),d0
00015358 6A00                       		bpl.s	loc_1461E
0001535A 5300                       		subq.b	#1,d0
0001535C                            
0001535C                            loc_1461E:
0001535C 0600 0020                  		addi.b	#$20,d0
00015360 6000                       		bra.s	loc_14630
00015362                            ; ===========================================================================
00015362                            
00015362                            loc_14624:
00015362 1028 0026                  		move.b	$26(a0),d0
00015366 6A00                       		bpl.s	loc_1462C
00015368 5200                       		addq.b	#1,d0
0001536A                            
0001536A                            loc_1462C:
0001536A 0600 001F                  		addi.b	#$1F,d0
0001536E                            
0001536E                            loc_14630:
0001536E 0200 00C0                  		andi.b	#$C0,d0
00015372 0C00 0040                  		cmpi.b	#$40,d0
00015376 6700 0000                  		beq.w	Sonic_WalkVertL
0001537A 0C00 0080                  		cmpi.b	#$80,d0
0001537E 6700 0000                  		beq.w	Sonic_WalkCeiling
00015382 0C00 00C0                  		cmpi.b	#$C0,d0
00015386 6700 0000                  		beq.w	Sonic_WalkVertR
0001538A 3428 000C                  		move.w	$C(a0),d2
0001538E 3628 0008                  		move.w	8(a0),d3
00015392 7000                       		moveq	#0,d0
00015394 1028 0016                  		move.b	$16(a0),d0
00015398 4880                       		ext.w	d0
0001539A D440                       		add.w	d0,d2
0001539C 1028 0017                  		move.b	$17(a0),d0
000153A0 4880                       		ext.w	d0
000153A2 D640                       		add.w	d0,d3
000153A4 49F8 F768                  		lea	($FFFFF768).w,a4
000153A8 367C 0010                  		movea.w	#$10,a3
000153AC 3C3C 0000                  		move.w	#0,d6
000153B0 7A0D                       		moveq	#$D,d5
000153B2 6100 0000                  		bsr.w	FindFloor
000153B6 3F01                       		move.w	d1,-(sp)
000153B8 3428 000C                  		move.w	$C(a0),d2
000153BC 3628 0008                  		move.w	8(a0),d3
000153C0 7000                       		moveq	#0,d0
000153C2 1028 0016                  		move.b	$16(a0),d0
000153C6 4880                       		ext.w	d0
000153C8 D440                       		add.w	d0,d2
000153CA 1028 0017                  		move.b	$17(a0),d0
000153CE 4880                       		ext.w	d0
000153D0 4440                       		neg.w	d0
000153D2 D640                       		add.w	d0,d3
000153D4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153D8 367C 0010                  		movea.w	#$10,a3
000153DC 3C3C 0000                  		move.w	#0,d6
000153E0 7A0D                       		moveq	#$D,d5
000153E2 6100 0000                  		bsr.w	FindFloor
000153E6 301F                       		move.w	(sp)+,d0
000153E8 6100 0000                  		bsr.w	Sonic_Angle
000153EC 4A41                       		tst.w	d1
000153EE 6700                       		beq.s	locret_146BE
000153F0 6A00                       		bpl.s	loc_146C0
000153F2 0C41 FFF2                  		cmpi.w	#-$E,d1
000153F6 6D00                       		blt.s	locret_146E6
000153F8 D368 000C                  		add.w	d1,$C(a0)
000153FC                            
000153FC                            locret_146BE:
000153FC 4E75                       		rts	
000153FE                            ; ===========================================================================
000153FE                            
000153FE                            loc_146C0:
000153FE 0C41 000E                  		cmpi.w	#$E,d1
00015402 6E00                       		bgt.s	loc_146CC
00015404                            
00015404                            loc_146C6:
00015404 D368 000C                  		add.w	d1,$C(a0)
00015408 4E75                       		rts	
0001540A                            ; ===========================================================================
0001540A                            
0001540A                            loc_146CC:
0001540A 4A28 0038                  		tst.b	$38(a0)
0001540E 66F4                       		bne.s	loc_146C6
00015410 08E8 0001 0022             		bset	#1,$22(a0)
00015416 08A8 0005 0022             		bclr	#5,$22(a0)
0001541C 117C 0001 001D             		move.b	#1,$1D(a0)
00015422 4E75                       		rts	
00015424                            ; ===========================================================================
00015424                            
00015424                            locret_146E6:
00015424 4E75                       		rts	
00015426                            ; End of function Sonic_AnglePos
00015426                            
00015426                            ; ===========================================================================
00015426 2428 0008                  		move.l	8(a0),d2
0001542A 3028 0010                  		move.w	$10(a0),d0
0001542E 48C0                       		ext.l	d0
00015430 E180                       		asl.l	#8,d0
00015432 9480                       		sub.l	d0,d2
00015434 2142 0008                  		move.l	d2,8(a0)
00015438 303C 0038                  		move.w	#$38,d0
0001543C 48C0                       		ext.l	d0
0001543E E180                       		asl.l	#8,d0
00015440 9680                       		sub.l	d0,d3
00015442 2143 000C                  		move.l	d3,$C(a0)
00015446 4E75                       		rts	
00015448                            ; ===========================================================================
00015448                            
00015448                            locret_1470A:
00015448 4E75                       		rts	
0001544A                            ; ===========================================================================
0001544A 2628 000C                  		move.l	$C(a0),d3
0001544E 3028 0012                  		move.w	$12(a0),d0
00015452 0440 0038                  		subi.w	#$38,d0
00015456 3140 0012                  		move.w	d0,$12(a0)
0001545A 48C0                       		ext.l	d0
0001545C E180                       		asl.l	#8,d0
0001545E 9680                       		sub.l	d0,d3
00015460 2143 000C                  		move.l	d3,$C(a0)
00015464 4E75                       		rts	
00015466 4E75                       		rts	
00015468                            ; ===========================================================================
00015468 2428 0008                  		move.l	8(a0),d2
0001546C 2628 000C                  		move.l	$C(a0),d3
00015470 3028 0010                  		move.w	$10(a0),d0
00015474 48C0                       		ext.l	d0
00015476 E180                       		asl.l	#8,d0
00015478 9480                       		sub.l	d0,d2
0001547A 3028 0012                  		move.w	$12(a0),d0
0001547E 48C0                       		ext.l	d0
00015480 E180                       		asl.l	#8,d0
00015482 9680                       		sub.l	d0,d3
00015484 2142 0008                  		move.l	d2,8(a0)
00015488 2143 000C                  		move.l	d3,$C(a0)
0001548C 4E75                       		rts	
0001548E                            
0001548E                            ; ---------------------------------------------------------------------------
0001548E                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001548E                            ; ---------------------------------------------------------------------------
0001548E                            
0001548E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001548E                            
0001548E                            
0001548E                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001548E 1438 F76A                  		move.b	($FFFFF76A).w,d2
00015492 B240                       		cmp.w	d0,d1
00015494 6F00                       		ble.s	loc_1475E
00015496 1438 F768                  		move.b	($FFFFF768).w,d2
0001549A 3200                       		move.w	d0,d1
0001549C                            
0001549C                            loc_1475E:
0001549C 0802 0000                  		btst	#0,d2
000154A0 6600                       		bne.s	loc_1476A
000154A2 1142 0026                  		move.b	d2,$26(a0)
000154A6 4E75                       		rts	
000154A8                            ; ===========================================================================
000154A8                            
000154A8                            loc_1476A:
000154A8 1428 0026                  		move.b	$26(a0),d2
000154AC 0602 0020                  		addi.b	#$20,d2
000154B0 0202 00C0                  		andi.b	#$C0,d2
000154B4 1142 0026                  		move.b	d2,$26(a0)
000154B8 4E75                       		rts	
000154BA                            ; End of function Sonic_Angle
000154BA                            
000154BA                            ; ---------------------------------------------------------------------------
000154BA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000154BA                            ; ---------------------------------------------------------------------------
000154BA                            
000154BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154BA                            
000154BA                            
000154BA                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000154BA 3428 000C                  		move.w	$C(a0),d2
000154BE 3628 0008                  		move.w	8(a0),d3
000154C2 7000                       		moveq	#0,d0
000154C4 1028 0017                  		move.b	$17(a0),d0
000154C8 4880                       		ext.w	d0
000154CA 4440                       		neg.w	d0
000154CC D440                       		add.w	d0,d2
000154CE 1028 0016                  		move.b	$16(a0),d0
000154D2 4880                       		ext.w	d0
000154D4 D640                       		add.w	d0,d3
000154D6 49F8 F768                  		lea	($FFFFF768).w,a4
000154DA 367C 0010                  		movea.w	#$10,a3
000154DE 3C3C 0000                  		move.w	#0,d6
000154E2 7A0D                       		moveq	#$D,d5
000154E4 6100 0000                  		bsr.w	FindWall
000154E8 3F01                       		move.w	d1,-(sp)
000154EA 3428 000C                  		move.w	$C(a0),d2
000154EE 3628 0008                  		move.w	8(a0),d3
000154F2 7000                       		moveq	#0,d0
000154F4 1028 0017                  		move.b	$17(a0),d0
000154F8 4880                       		ext.w	d0
000154FA D440                       		add.w	d0,d2
000154FC 1028 0016                  		move.b	$16(a0),d0
00015500 4880                       		ext.w	d0
00015502 D640                       		add.w	d0,d3
00015504 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015508 367C 0010                  		movea.w	#$10,a3
0001550C 3C3C 0000                  		move.w	#0,d6
00015510 7A0D                       		moveq	#$D,d5
00015512 6100 0000                  		bsr.w	FindWall
00015516 301F                       		move.w	(sp)+,d0
00015518 6100 FF74                  		bsr.w	Sonic_Angle
0001551C 4A41                       		tst.w	d1
0001551E 6700                       		beq.s	locret_147F0
00015520 6A00                       		bpl.s	loc_147F2
00015522 0C41 FFF2                  		cmpi.w	#-$E,d1
00015526 6D00 FF20                  		blt.w	locret_1470A
0001552A D368 0008                  		add.w	d1,8(a0)
0001552E                            
0001552E                            locret_147F0:
0001552E 4E75                       		rts	
00015530                            ; ===========================================================================
00015530                            
00015530                            loc_147F2:
00015530 0C41 000E                  		cmpi.w	#$E,d1
00015534 6E00                       		bgt.s	loc_147FE
00015536                            
00015536                            loc_147F8:
00015536 D368 0008                  		add.w	d1,8(a0)
0001553A 4E75                       		rts	
0001553C                            ; ===========================================================================
0001553C                            
0001553C                            loc_147FE:
0001553C 4A28 0038                  		tst.b	$38(a0)
00015540 66F4                       		bne.s	loc_147F8
00015542 08E8 0001 0022             		bset	#1,$22(a0)
00015548 08A8 0005 0022             		bclr	#5,$22(a0)
0001554E 117C 0001 001D             		move.b	#1,$1D(a0)
00015554 4E75                       		rts	
00015556                            ; End of function Sonic_WalkVertR
00015556                            
00015556                            ; ---------------------------------------------------------------------------
00015556                            ; Subroutine allowing Sonic to walk upside-down
00015556                            ; ---------------------------------------------------------------------------
00015556                            
00015556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015556                            
00015556                            
00015556                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015556 3428 000C                  		move.w	$C(a0),d2
0001555A 3628 0008                  		move.w	8(a0),d3
0001555E 7000                       		moveq	#0,d0
00015560 1028 0016                  		move.b	$16(a0),d0
00015564 4880                       		ext.w	d0
00015566 9440                       		sub.w	d0,d2
00015568 0A42 000F                  		eori.w	#$F,d2
0001556C 1028 0017                  		move.b	$17(a0),d0
00015570 4880                       		ext.w	d0
00015572 D640                       		add.w	d0,d3
00015574 49F8 F768                  		lea	($FFFFF768).w,a4
00015578 367C FFF0                  		movea.w	#-$10,a3
0001557C 3C3C 1000                  		move.w	#$1000,d6
00015580 7A0D                       		moveq	#$D,d5
00015582 6100 0000                  		bsr.w	FindFloor
00015586 3F01                       		move.w	d1,-(sp)
00015588 3428 000C                  		move.w	$C(a0),d2
0001558C 3628 0008                  		move.w	8(a0),d3
00015590 7000                       		moveq	#0,d0
00015592 1028 0016                  		move.b	$16(a0),d0
00015596 4880                       		ext.w	d0
00015598 9440                       		sub.w	d0,d2
0001559A 0A42 000F                  		eori.w	#$F,d2
0001559E 1028 0017                  		move.b	$17(a0),d0
000155A2 4880                       		ext.w	d0
000155A4 9640                       		sub.w	d0,d3
000155A6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000155AA 367C FFF0                  		movea.w	#-$10,a3
000155AE 3C3C 1000                  		move.w	#$1000,d6
000155B2 7A0D                       		moveq	#$D,d5
000155B4 6100 0000                  		bsr.w	FindFloor
000155B8 301F                       		move.w	(sp)+,d0
000155BA 6100 FED2                  		bsr.w	Sonic_Angle
000155BE 4A41                       		tst.w	d1
000155C0 6700                       		beq.s	locret_14892
000155C2 6A00                       		bpl.s	loc_14894
000155C4 0C41 FFF2                  		cmpi.w	#-$E,d1
000155C8 6D00 FE5A                  		blt.w	locret_146E6
000155CC 9368 000C                  		sub.w	d1,$C(a0)
000155D0                            
000155D0                            locret_14892:
000155D0 4E75                       		rts	
000155D2                            ; ===========================================================================
000155D2                            
000155D2                            loc_14894:
000155D2 0C41 000E                  		cmpi.w	#$E,d1
000155D6 6E00                       		bgt.s	loc_148A0
000155D8                            
000155D8                            loc_1489A:
000155D8 9368 000C                  		sub.w	d1,$C(a0)
000155DC 4E75                       		rts	
000155DE                            ; ===========================================================================
000155DE                            
000155DE                            loc_148A0:
000155DE 4A28 0038                  		tst.b	$38(a0)
000155E2 66F4                       		bne.s	loc_1489A
000155E4 08E8 0001 0022             		bset	#1,$22(a0)
000155EA 08A8 0005 0022             		bclr	#5,$22(a0)
000155F0 117C 0001 001D             		move.b	#1,$1D(a0)
000155F6 4E75                       		rts	
000155F8                            ; End of function Sonic_WalkCeiling
000155F8                            
000155F8                            ; ---------------------------------------------------------------------------
000155F8                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000155F8                            ; ---------------------------------------------------------------------------
000155F8                            
000155F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155F8                            
000155F8                            
000155F8                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000155F8 3428 000C                  		move.w	$C(a0),d2
000155FC 3628 0008                  		move.w	8(a0),d3
00015600 7000                       		moveq	#0,d0
00015602 1028 0017                  		move.b	$17(a0),d0
00015606 4880                       		ext.w	d0
00015608 9440                       		sub.w	d0,d2
0001560A 1028 0016                  		move.b	$16(a0),d0
0001560E 4880                       		ext.w	d0
00015610 9640                       		sub.w	d0,d3
00015612 0A43 000F                  		eori.w	#$F,d3
00015616 49F8 F768                  		lea	($FFFFF768).w,a4
0001561A 367C FFF0                  		movea.w	#-$10,a3
0001561E 3C3C 0800                  		move.w	#$800,d6
00015622 7A0D                       		moveq	#$D,d5
00015624 6100 0000                  		bsr.w	FindWall
00015628 3F01                       		move.w	d1,-(sp)
0001562A 3428 000C                  		move.w	$C(a0),d2
0001562E 3628 0008                  		move.w	8(a0),d3
00015632 7000                       		moveq	#0,d0
00015634 1028 0017                  		move.b	$17(a0),d0
00015638 4880                       		ext.w	d0
0001563A D440                       		add.w	d0,d2
0001563C 1028 0016                  		move.b	$16(a0),d0
00015640 4880                       		ext.w	d0
00015642 9640                       		sub.w	d0,d3
00015644 0A43 000F                  		eori.w	#$F,d3
00015648 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001564C 367C FFF0                  		movea.w	#-$10,a3
00015650 3C3C 0800                  		move.w	#$800,d6
00015654 7A0D                       		moveq	#$D,d5
00015656 6100 0000                  		bsr.w	FindWall
0001565A 301F                       		move.w	(sp)+,d0
0001565C 6100 FE30                  		bsr.w	Sonic_Angle
00015660 4A41                       		tst.w	d1
00015662 6700                       		beq.s	locret_14934
00015664 6A00                       		bpl.s	loc_14936
00015666 0C41 FFF2                  		cmpi.w	#-$E,d1
0001566A 6D00 FDDC                  		blt.w	locret_1470A
0001566E 9368 0008                  		sub.w	d1,8(a0)
00015672                            
00015672                            locret_14934:
00015672 4E75                       		rts	
00015674                            ; ===========================================================================
00015674                            
00015674                            loc_14936:
00015674 0C41 000E                  		cmpi.w	#$E,d1
00015678 6E00                       		bgt.s	loc_14942
0001567A                            
0001567A                            loc_1493C:
0001567A 9368 0008                  		sub.w	d1,8(a0)
0001567E 4E75                       		rts	
00015680                            ; ===========================================================================
00015680                            
00015680                            loc_14942:
00015680 4A28 0038                  		tst.b	$38(a0)
00015684 66F4                       		bne.s	loc_1493C
00015686 08E8 0001 0022             		bset	#1,$22(a0)
0001568C 08A8 0005 0022             		bclr	#5,$22(a0)
00015692 117C 0001 001D             		move.b	#1,$1D(a0)
00015698 4E75                       		rts	
0001569A                            ; End of function Sonic_WalkVertL
0001569A                            
0001569A                            ; ---------------------------------------------------------------------------
0001569A                            ; Subroutine to	find which tile	the object is standing on
0001569A                            ; ---------------------------------------------------------------------------
0001569A                            
0001569A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001569A                            
0001569A                            
0001569A                            Floor_ChkTile:				; XREF: FindFloor; et al
0001569A 3002                       		move.w	d2,d0
0001569C E248                       		lsr.w	#1,d0
0001569E 0240 0380                  		andi.w	#$380,d0
000156A2 3203                       		move.w	d3,d1
000156A4 E049                       		lsr.w	#8,d1
000156A6 0241 007F                  		andi.w	#$7F,d1
000156AA D041                       		add.w	d1,d0
000156AC 72FF                       		moveq	#-1,d1
000156AE 43F8 A400                  		lea	($FFFFA400).w,a1
000156B2 1231 0000                  		move.b	(a1,d0.w),d1
000156B6 6700                       		beq.s	loc_14996
000156B8 6B00                       		bmi.s	loc_1499A
000156BA 5301                       		subq.b	#1,d1
000156BC 4881                       		ext.w	d1
000156BE EE59                       		ror.w	#7,d1
000156C0 3002                       		move.w	d2,d0
000156C2 D040                       		add.w	d0,d0
000156C4 0240 01E0                  		andi.w	#$1E0,d0
000156C8 D240                       		add.w	d0,d1
000156CA 3003                       		move.w	d3,d0
000156CC E648                       		lsr.w	#3,d0
000156CE 0240 001E                  		andi.w	#$1E,d0
000156D2 D240                       		add.w	d0,d1
000156D4                            
000156D4                            loc_14996:
000156D4 2241                       		movea.l	d1,a1
000156D6 4E75                       		rts	
000156D8                            ; ===========================================================================
000156D8                            
000156D8                            loc_1499A:
000156D8 0241 007F                  		andi.w	#$7F,d1
000156DC 0828 0006 0001             		btst	#6,1(a0)
000156E2 6700                       		beq.s	loc_149B2
000156E4 5241                       		addq.w	#1,d1
000156E6 0C41 0029                  		cmpi.w	#$29,d1
000156EA 6600                       		bne.s	loc_149B2
000156EC 323C 0051                  		move.w	#$51,d1
000156F0                            
000156F0                            loc_149B2:
000156F0 5301                       		subq.b	#1,d1
000156F2 EE59                       		ror.w	#7,d1
000156F4 3002                       		move.w	d2,d0
000156F6 D040                       		add.w	d0,d0
000156F8 0240 01E0                  		andi.w	#$1E0,d0
000156FC D240                       		add.w	d0,d1
000156FE 3003                       		move.w	d3,d0
00015700 E648                       		lsr.w	#3,d0
00015702 0240 001E                  		andi.w	#$1E,d0
00015706 D240                       		add.w	d0,d1
00015708 2241                       		movea.l	d1,a1
0001570A 4E75                       		rts	
0001570C                            ; End of function Floor_ChkTile
0001570C                            
0001570C                            
0001570C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001570C                            
0001570C                            
0001570C                            FindFloor:				; XREF: Sonic_AnglePos; et al
0001570C 618C                       		bsr.s	Floor_ChkTile
0001570E 3011                       		move.w	(a1),d0
00015710 3800                       		move.w	d0,d4
00015712 0240 07FF                  		andi.w	#$7FF,d0
00015716 6700                       		beq.s	loc_149DE
00015718 0B04                       		btst	d5,d4
0001571A 6600                       		bne.s	loc_149EC
0001571C                            
0001571C                            loc_149DE:
0001571C D44B                       		add.w	a3,d2
0001571E 6100 0000                  		bsr.w	FindFloor2
00015722 944B                       		sub.w	a3,d2
00015724 0641 0010                  		addi.w	#$10,d1
00015728 4E75                       		rts	
0001572A                            ; ===========================================================================
0001572A                            
0001572A                            loc_149EC:
0001572A 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
0001572E 1032 0000                  		move.b	(a2,d0.w),d0
00015732 0240 00FF                  		andi.w	#$FF,d0
00015736 67E4                       		beq.s	loc_149DE
00015738 45F9 0000 0000             		lea	(AngleMap).l,a2
0001573E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015742 E948                       		lsl.w	#4,d0
00015744 3203                       		move.w	d3,d1
00015746 0804 000B                  		btst	#$B,d4
0001574A 6700                       		beq.s	loc_14A12
0001574C 4641                       		not.w	d1
0001574E 4414                       		neg.b	(a4)
00015750                            
00015750                            loc_14A12:
00015750 0804 000C                  		btst	#$C,d4
00015754 6700                       		beq.s	loc_14A22
00015756 0614 0040                  		addi.b	#$40,(a4)
0001575A 4414                       		neg.b	(a4)
0001575C 0414 0040                  		subi.b	#$40,(a4)
00015760                            
00015760                            loc_14A22:
00015760 0241 000F                  		andi.w	#$F,d1
00015764 D240                       		add.w	d0,d1
00015766 45F9 0000 0000             		lea	(CollArray1).l,a2
0001576C 1032 1000                  		move.b	(a2,d1.w),d0
00015770 4880                       		ext.w	d0
00015772 BD44                       		eor.w	d6,d4
00015774 0804 000C                  		btst	#$C,d4
00015778 6700                       		beq.s	loc_14A3E
0001577A 4440                       		neg.w	d0
0001577C                            
0001577C                            loc_14A3E:
0001577C 4A40                       		tst.w	d0
0001577E 679C                       		beq.s	loc_149DE
00015780 6B00                       		bmi.s	loc_14A5A
00015782 0C00 0010                  		cmpi.b	#$10,d0
00015786 6700                       		beq.s	loc_14A66
00015788 3202                       		move.w	d2,d1
0001578A 0241 000F                  		andi.w	#$F,d1
0001578E D041                       		add.w	d1,d0
00015790 323C 000F                  		move.w	#$F,d1
00015794 9240                       		sub.w	d0,d1
00015796 4E75                       		rts	
00015798                            ; ===========================================================================
00015798                            
00015798                            loc_14A5A:
00015798 3202                       		move.w	d2,d1
0001579A 0241 000F                  		andi.w	#$F,d1
0001579E D041                       		add.w	d1,d0
000157A0 6A00 FF7A                  		bpl.w	loc_149DE
000157A4                            
000157A4                            loc_14A66:
000157A4 944B                       		sub.w	a3,d2
000157A6 6100 0000                  		bsr.w	FindFloor2
000157AA D44B                       		add.w	a3,d2
000157AC 0441 0010                  		subi.w	#$10,d1
000157B0 4E75                       		rts	
000157B2                            ; End of function FindFloor
000157B2                            
000157B2                            
000157B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157B2                            
000157B2                            
000157B2                            FindFloor2:				; XREF: FindFloor
000157B2 6100 FEE6                  		bsr.w	Floor_ChkTile
000157B6 3011                       		move.w	(a1),d0
000157B8 3800                       		move.w	d0,d4
000157BA 0240 07FF                  		andi.w	#$7FF,d0
000157BE 6700                       		beq.s	loc_14A86
000157C0 0B04                       		btst	d5,d4
000157C2 6600                       		bne.s	loc_14A94
000157C4                            
000157C4                            loc_14A86:
000157C4 323C 000F                  		move.w	#$F,d1
000157C8 3002                       		move.w	d2,d0
000157CA 0240 000F                  		andi.w	#$F,d0
000157CE 9240                       		sub.w	d0,d1
000157D0 4E75                       		rts	
000157D2                            ; ===========================================================================
000157D2                            
000157D2                            loc_14A94:
000157D2 2478 F796                  		movea.l	($FFFFF796).w,a2
000157D6 1032 0000                  		move.b	(a2,d0.w),d0
000157DA 0240 00FF                  		andi.w	#$FF,d0
000157DE 67E4                       		beq.s	loc_14A86
000157E0 45F9 0000 0000             		lea	(AngleMap).l,a2
000157E6 18B2 0000                  		move.b	(a2,d0.w),(a4)
000157EA E948                       		lsl.w	#4,d0
000157EC 3203                       		move.w	d3,d1
000157EE 0804 000B                  		btst	#$B,d4
000157F2 6700                       		beq.s	loc_14ABA
000157F4 4641                       		not.w	d1
000157F6 4414                       		neg.b	(a4)
000157F8                            
000157F8                            loc_14ABA:
000157F8 0804 000C                  		btst	#$C,d4
000157FC 6700                       		beq.s	loc_14ACA
000157FE 0614 0040                  		addi.b	#$40,(a4)
00015802 4414                       		neg.b	(a4)
00015804 0414 0040                  		subi.b	#$40,(a4)
00015808                            
00015808                            loc_14ACA:
00015808 0241 000F                  		andi.w	#$F,d1
0001580C D240                       		add.w	d0,d1
0001580E 45F9 0000 0000             		lea	(CollArray1).l,a2
00015814 1032 1000                  		move.b	(a2,d1.w),d0
00015818 4880                       		ext.w	d0
0001581A BD44                       		eor.w	d6,d4
0001581C 0804 000C                  		btst	#$C,d4
00015820 6700                       		beq.s	loc_14AE6
00015822 4440                       		neg.w	d0
00015824                            
00015824                            loc_14AE6:
00015824 4A40                       		tst.w	d0
00015826 679C                       		beq.s	loc_14A86
00015828 6B00                       		bmi.s	loc_14AFC
0001582A 3202                       		move.w	d2,d1
0001582C 0241 000F                  		andi.w	#$F,d1
00015830 D041                       		add.w	d1,d0
00015832 323C 000F                  		move.w	#$F,d1
00015836 9240                       		sub.w	d0,d1
00015838 4E75                       		rts	
0001583A                            ; ===========================================================================
0001583A                            
0001583A                            loc_14AFC:
0001583A 3202                       		move.w	d2,d1
0001583C 0241 000F                  		andi.w	#$F,d1
00015840 D041                       		add.w	d1,d0
00015842 6A00 FF80                  		bpl.w	loc_14A86
00015846 4641                       		not.w	d1
00015848 4E75                       		rts	
0001584A                            ; End of function FindFloor2
0001584A                            
0001584A                            
0001584A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001584A                            
0001584A                            
0001584A                            FindWall:				; XREF: Sonic_WalkVertR; et al
0001584A 6100 FE4E                  		bsr.w	Floor_ChkTile
0001584E 3011                       		move.w	(a1),d0
00015850 3800                       		move.w	d0,d4
00015852 0240 07FF                  		andi.w	#$7FF,d0
00015856 6700                       		beq.s	loc_14B1E
00015858 0B04                       		btst	d5,d4
0001585A 6600                       		bne.s	loc_14B2C
0001585C                            
0001585C                            loc_14B1E:
0001585C D64B                       		add.w	a3,d3
0001585E 6100 0000                  		bsr.w	FindWall2
00015862 964B                       		sub.w	a3,d3
00015864 0641 0010                  		addi.w	#$10,d1
00015868 4E75                       		rts	
0001586A                            ; ===========================================================================
0001586A                            
0001586A                            loc_14B2C:
0001586A 2478 F796                  		movea.l	($FFFFF796).w,a2
0001586E 1032 0000                  		move.b	(a2,d0.w),d0
00015872 0240 00FF                  		andi.w	#$FF,d0
00015876 67E4                       		beq.s	loc_14B1E
00015878 45F9 0000 0000             		lea	(AngleMap).l,a2
0001587E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015882 E948                       		lsl.w	#4,d0
00015884 3202                       		move.w	d2,d1
00015886 0804 000C                  		btst	#$C,d4
0001588A 6700                       		beq.s	loc_14B5A
0001588C 4641                       		not.w	d1
0001588E 0614 0040                  		addi.b	#$40,(a4)
00015892 4414                       		neg.b	(a4)
00015894 0414 0040                  		subi.b	#$40,(a4)
00015898                            
00015898                            loc_14B5A:
00015898 0804 000B                  		btst	#$B,d4
0001589C 6700                       		beq.s	loc_14B62
0001589E 4414                       		neg.b	(a4)
000158A0                            
000158A0                            loc_14B62:
000158A0 0241 000F                  		andi.w	#$F,d1
000158A4 D240                       		add.w	d0,d1
000158A6 45F9 0000 0000             		lea	(CollArray2).l,a2
000158AC 1032 1000                  		move.b	(a2,d1.w),d0
000158B0 4880                       		ext.w	d0
000158B2 BD44                       		eor.w	d6,d4
000158B4 0804 000B                  		btst	#$B,d4
000158B8 6700                       		beq.s	loc_14B7E
000158BA 4440                       		neg.w	d0
000158BC                            
000158BC                            loc_14B7E:
000158BC 4A40                       		tst.w	d0
000158BE 679C                       		beq.s	loc_14B1E
000158C0 6B00                       		bmi.s	loc_14B9A
000158C2 0C00 0010                  		cmpi.b	#$10,d0
000158C6 6700                       		beq.s	loc_14BA6
000158C8 3203                       		move.w	d3,d1
000158CA 0241 000F                  		andi.w	#$F,d1
000158CE D041                       		add.w	d1,d0
000158D0 323C 000F                  		move.w	#$F,d1
000158D4 9240                       		sub.w	d0,d1
000158D6 4E75                       		rts	
000158D8                            ; ===========================================================================
000158D8                            
000158D8                            loc_14B9A:
000158D8 3203                       		move.w	d3,d1
000158DA 0241 000F                  		andi.w	#$F,d1
000158DE D041                       		add.w	d1,d0
000158E0 6A00 FF7A                  		bpl.w	loc_14B1E
000158E4                            
000158E4                            loc_14BA6:
000158E4 964B                       		sub.w	a3,d3
000158E6 6100 0000                  		bsr.w	FindWall2
000158EA D64B                       		add.w	a3,d3
000158EC 0441 0010                  		subi.w	#$10,d1
000158F0 4E75                       		rts	
000158F2                            ; End of function FindWall
000158F2                            
000158F2                            
000158F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158F2                            
000158F2                            
000158F2                            FindWall2:				; XREF: FindWall
000158F2 6100 FDA6                  		bsr.w	Floor_ChkTile
000158F6 3011                       		move.w	(a1),d0
000158F8 3800                       		move.w	d0,d4
000158FA 0240 07FF                  		andi.w	#$7FF,d0
000158FE 6700                       		beq.s	loc_14BC6
00015900 0B04                       		btst	d5,d4
00015902 6600                       		bne.s	loc_14BD4
00015904                            
00015904                            loc_14BC6:
00015904 323C 000F                  		move.w	#$F,d1
00015908 3003                       		move.w	d3,d0
0001590A 0240 000F                  		andi.w	#$F,d0
0001590E 9240                       		sub.w	d0,d1
00015910 4E75                       		rts	
00015912                            ; ===========================================================================
00015912                            
00015912                            loc_14BD4:
00015912 2478 F796                  		movea.l	($FFFFF796).w,a2
00015916 1032 0000                  		move.b	(a2,d0.w),d0
0001591A 0240 00FF                  		andi.w	#$FF,d0
0001591E 67E4                       		beq.s	loc_14BC6
00015920 45F9 0000 0000             		lea	(AngleMap).l,a2
00015926 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001592A E948                       		lsl.w	#4,d0
0001592C 3202                       		move.w	d2,d1
0001592E 0804 000C                  		btst	#$C,d4
00015932 6700                       		beq.s	loc_14C02
00015934 4641                       		not.w	d1
00015936 0614 0040                  		addi.b	#$40,(a4)
0001593A 4414                       		neg.b	(a4)
0001593C 0414 0040                  		subi.b	#$40,(a4)
00015940                            
00015940                            loc_14C02:
00015940 0804 000B                  		btst	#$B,d4
00015944 6700                       		beq.s	loc_14C0A
00015946 4414                       		neg.b	(a4)
00015948                            
00015948                            loc_14C0A:
00015948 0241 000F                  		andi.w	#$F,d1
0001594C D240                       		add.w	d0,d1
0001594E 45F9 0000 0000             		lea	(CollArray2).l,a2
00015954 1032 1000                  		move.b	(a2,d1.w),d0
00015958 4880                       		ext.w	d0
0001595A BD44                       		eor.w	d6,d4
0001595C 0804 000B                  		btst	#$B,d4
00015960 6700                       		beq.s	loc_14C26
00015962 4440                       		neg.w	d0
00015964                            
00015964                            loc_14C26:
00015964 4A40                       		tst.w	d0
00015966 679C                       		beq.s	loc_14BC6
00015968 6B00                       		bmi.s	loc_14C3C
0001596A 3203                       		move.w	d3,d1
0001596C 0241 000F                  		andi.w	#$F,d1
00015970 D041                       		add.w	d1,d0
00015972 323C 000F                  		move.w	#$F,d1
00015976 9240                       		sub.w	d0,d1
00015978 4E75                       		rts	
0001597A                            ; ===========================================================================
0001597A                            
0001597A                            loc_14C3C:
0001597A 3203                       		move.w	d3,d1
0001597C 0241 000F                  		andi.w	#$F,d1
00015980 D041                       		add.w	d1,d0
00015982 6A00 FF80                  		bpl.w	loc_14BC6
00015986 4641                       		not.w	d1
00015988 4E75                       		rts	
0001598A                            ; End of function FindWall2
0001598A                            
0001598A                            ; ---------------------------------------------------------------------------
0001598A                            ; Unused floor/wall subroutine - logs something	to do with collision
0001598A                            ; ---------------------------------------------------------------------------
0001598A                            
0001598A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001598A                            
0001598A                            
0001598A                            FloorLog_Unk:				; XREF: Level
0001598A 4E75                       		rts	
0001598C                            
0001598C 43F9 0000 0000             		lea	(CollArray1).l,a1
00015992 45F9 0000 0000             		lea	(CollArray1).l,a2
00015998 363C 00FF                  		move.w	#$FF,d3
0001599C                            
0001599C                            loc_14C5E:
0001599C 7A10                       		moveq	#$10,d5
0001599E 343C 000F                  		move.w	#$F,d2
000159A2                            
000159A2                            loc_14C64:
000159A2 7800                       		moveq	#0,d4
000159A4 323C 000F                  		move.w	#$F,d1
000159A8                            
000159A8                            loc_14C6A:
000159A8 3019                       		move.w	(a1)+,d0
000159AA EAA8                       		lsr.l	d5,d0
000159AC D944                       		addx.w	d4,d4
000159AE 51C9 FFF8                  		dbf	d1,loc_14C6A
000159B2                            
000159B2 34C4                       		move.w	d4,(a2)+
000159B4 92FC 0020                  		suba.w	#$20,a1
000159B8 5345                       		subq.w	#1,d5
000159BA 51CA FFE6                  		dbf	d2,loc_14C64
000159BE                            
000159BE D2FC 0020                  		adda.w	#$20,a1
000159C2 51CB FFD8                  		dbf	d3,loc_14C5E
000159C6                            
000159C6 43F9 0000 0000             		lea	(CollArray1).l,a1
000159CC 45F9 0000 0000             		lea	(CollArray2).l,a2
000159D2 6100                       		bsr.s	FloorLog_Unk2
000159D4 43F9 0000 0000             		lea	(CollArray1).l,a1
000159DA 45F9 0000 0000             		lea	(CollArray1).l,a2
000159E0                            
000159E0                            ; End of function FloorLog_Unk
000159E0                            
000159E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159E0                            
000159E0                            
000159E0                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000159E0 363C 0FFF                  		move.w	#$FFF,d3
000159E4                            
000159E4                            loc_14CA6:
000159E4 7400                       		moveq	#0,d2
000159E6 323C 000F                  		move.w	#$F,d1
000159EA 3019                       		move.w	(a1)+,d0
000159EC 6700                       		beq.s	loc_14CD4
000159EE 6B00                       		bmi.s	loc_14CBE
000159F0                            
000159F0                            loc_14CB2:
000159F0 E248                       		lsr.w	#1,d0
000159F2 6400                       		bcc.s	loc_14CB8
000159F4 5202                       		addq.b	#1,d2
000159F6                            
000159F6                            loc_14CB8:
000159F6 51C9 FFF8                  		dbf	d1,loc_14CB2
000159FA                            
000159FA 6000                       		bra.s	loc_14CD6
000159FC                            ; ===========================================================================
000159FC                            
000159FC                            loc_14CBE:
000159FC 0C40 FFFF                  		cmpi.w	#-1,d0
00015A00 6700                       		beq.s	loc_14CD0
00015A02                            
00015A02                            loc_14CC4:
00015A02 E348                       		lsl.w	#1,d0
00015A04 6400                       		bcc.s	loc_14CCA
00015A06 5302                       		subq.b	#1,d2
00015A08                            
00015A08                            loc_14CCA:
00015A08 51C9 FFF8                  		dbf	d1,loc_14CC4
00015A0C                            
00015A0C 6000                       		bra.s	loc_14CD6
00015A0E                            ; ===========================================================================
00015A0E                            
00015A0E                            loc_14CD0:
00015A0E 303C 0010                  		move.w	#$10,d0
00015A12                            
00015A12                            loc_14CD4:
00015A12 3400                       		move.w	d0,d2
00015A14                            
00015A14                            loc_14CD6:
00015A14 14C2                       		move.b	d2,(a2)+
00015A16 51CB FFCC                  		dbf	d3,loc_14CA6
00015A1A                            
00015A1A 4E75                       		rts	
00015A1C                            
00015A1C                            ; End of function FloorLog_Unk2
00015A1C                            
00015A1C                            
00015A1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A1C                            
00015A1C                            
00015A1C                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015A1C 2628 0008                  		move.l	8(a0),d3
00015A20 2428 000C                  		move.l	$C(a0),d2
00015A24 3228 0010                  		move.w	$10(a0),d1
00015A28 48C1                       		ext.l	d1
00015A2A E181                       		asl.l	#8,d1
00015A2C D681                       		add.l	d1,d3
00015A2E 3228 0012                  		move.w	$12(a0),d1
00015A32 48C1                       		ext.l	d1
00015A34 E181                       		asl.l	#8,d1
00015A36 D481                       		add.l	d1,d2
00015A38 4842                       		swap	d2
00015A3A 4843                       		swap	d3
00015A3C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015A40 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015A44 1200                       		move.b	d0,d1
00015A46 0600 0020                  		addi.b	#$20,d0
00015A4A 6A00                       		bpl.s	loc_14D1A
00015A4C 1001                       		move.b	d1,d0
00015A4E 6A00                       		bpl.s	loc_14D14
00015A50 5300                       		subq.b	#1,d0
00015A52                            
00015A52                            loc_14D14:
00015A52 0600 0020                  		addi.b	#$20,d0
00015A56 6000                       		bra.s	loc_14D24
00015A58                            ; ===========================================================================
00015A58                            
00015A58                            loc_14D1A:
00015A58 1001                       		move.b	d1,d0
00015A5A 6A00                       		bpl.s	loc_14D20
00015A5C 5200                       		addq.b	#1,d0
00015A5E                            
00015A5E                            loc_14D20:
00015A5E 0600 001F                  		addi.b	#$1F,d0
00015A62                            
00015A62                            loc_14D24:
00015A62 0200 00C0                  		andi.b	#$C0,d0
00015A66 6700 0000                  		beq.w	loc_14DF0
00015A6A 0C00 0080                  		cmpi.b	#$80,d0
00015A6E 6700 0000                  		beq.w	loc_14F7C
00015A72 0201 0038                  		andi.b	#$38,d1
00015A76 6600                       		bne.s	loc_14D3C
00015A78 5042                       		addq.w	#8,d2
00015A7A                            
00015A7A                            loc_14D3C:
00015A7A 0C00 0040                  		cmpi.b	#$40,d0
00015A7E 6700 0000                  		beq.w	loc_1504A
00015A82 6000 0000                  		bra.w	loc_14EBC
00015A86                            
00015A86                            ; End of function Sonic_WalkSpeed
00015A86                            
00015A86                            
00015A86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A86                            
00015A86                            
00015A86                            sub_14D48:				; XREF: Sonic_Jump
00015A86 11C0 F768                  		move.b	d0,($FFFFF768).w
00015A8A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015A8E 0600 0020                  		addi.b	#$20,d0
00015A92 0200 00C0                  		andi.b	#$C0,d0
00015A96 0C00 0040                  		cmpi.b	#$40,d0
00015A9A 6700 0000                  		beq.w	loc_14FD6
00015A9E 0C00 0080                  		cmpi.b	#$80,d0
00015AA2 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015AA6 0C00 00C0                  		cmpi.b	#$C0,d0
00015AAA 6700 0000                  		beq.w	sub_14E50
00015AAE                            
00015AAE                            ; End of function sub_14D48
00015AAE                            
00015AAE                            ; ---------------------------------------------------------------------------
00015AAE                            ; Subroutine to	make Sonic land	on the floor after jumping
00015AAE                            ; ---------------------------------------------------------------------------
00015AAE                            
00015AAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AAE                            
00015AAE                            
00015AAE                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015AAE 3428 000C                  		move.w	$C(a0),d2
00015AB2 3628 0008                  		move.w	8(a0),d3
00015AB6 7000                       		moveq	#0,d0
00015AB8 1028 0016                  		move.b	$16(a0),d0
00015ABC 4880                       		ext.w	d0
00015ABE D440                       		add.w	d0,d2
00015AC0 1028 0017                  		move.b	$17(a0),d0
00015AC4 4880                       		ext.w	d0
00015AC6 D640                       		add.w	d0,d3
00015AC8 49F8 F768                  		lea	($FFFFF768).w,a4
00015ACC 367C 0010                  		movea.w	#$10,a3
00015AD0 3C3C 0000                  		move.w	#0,d6
00015AD4 7A0D                       		moveq	#$D,d5
00015AD6 6100 FC34                  		bsr.w	FindFloor
00015ADA 3F01                       		move.w	d1,-(sp)
00015ADC 3428 000C                  		move.w	$C(a0),d2
00015AE0 3628 0008                  		move.w	8(a0),d3
00015AE4 7000                       		moveq	#0,d0
00015AE6 1028 0016                  		move.b	$16(a0),d0
00015AEA 4880                       		ext.w	d0
00015AEC D440                       		add.w	d0,d2
00015AEE 1028 0017                  		move.b	$17(a0),d0
00015AF2 4880                       		ext.w	d0
00015AF4 9640                       		sub.w	d0,d3
00015AF6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015AFA 367C 0010                  		movea.w	#$10,a3
00015AFE 3C3C 0000                  		move.w	#0,d6
00015B02 7A0D                       		moveq	#$D,d5
00015B04 6100 FC06                  		bsr.w	FindFloor
00015B08 301F                       		move.w	(sp)+,d0
00015B0A 143C 0000                  		move.b	#0,d2
00015B0E                            
00015B0E                            loc_14DD0:
00015B0E 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015B12 B240                       		cmp.w	d0,d1
00015B14 6F00                       		ble.s	loc_14DDE
00015B16 1638 F768                  		move.b	($FFFFF768).w,d3
00015B1A C141                       		exg	d0,d1
00015B1C                            
00015B1C                            loc_14DDE:
00015B1C 0803 0000                  		btst	#0,d3
00015B20 6700                       		beq.s	locret_14DE6
00015B22 1602                       		move.b	d2,d3
00015B24                            
00015B24                            locret_14DE6:
00015B24 4E75                       		rts	
00015B26                            
00015B26                            ; End of function Sonic_HitFloor
00015B26                            
00015B26                            ; ===========================================================================
00015B26 3428 000C                  		move.w	$C(a0),d2
00015B2A 3628 0008                  		move.w	8(a0),d3
00015B2E                            
00015B2E                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015B2E 0642 000A                  		addi.w	#$A,d2
00015B32 49F8 F768                  		lea	($FFFFF768).w,a4
00015B36 367C 0010                  		movea.w	#$10,a3
00015B3A 3C3C 0000                  		move.w	#0,d6
00015B3E 7A0E                       		moveq	#$E,d5
00015B40 6100 FBCA                  		bsr.w	FindFloor
00015B44 143C 0000                  		move.b	#0,d2
00015B48                            
00015B48                            loc_14E0A:				; XREF: sub_14EB4
00015B48 1638 F768                  		move.b	($FFFFF768).w,d3
00015B4C 0803 0000                  		btst	#0,d3
00015B50 6700                       		beq.s	locret_14E16
00015B52 1602                       		move.b	d2,d3
00015B54                            
00015B54                            locret_14E16:
00015B54 4E75                       		rts	
00015B56                            
00015B56                            ; ---------------------------------------------------------------------------
00015B56                            ; Subroutine allowing objects to interact with the floor
00015B56                            ; ---------------------------------------------------------------------------
00015B56                            
00015B56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B56                            
00015B56                            
00015B56                            ObjHitFloor:
00015B56 3628 0008                  		move.w	8(a0),d3
00015B5A                            
00015B5A                            ; End of function ObjHitFloor
00015B5A                            
00015B5A                            
00015B5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B5A                            
00015B5A                            
00015B5A                            ObjHitFloor2:
00015B5A 3428 000C                  		move.w	$C(a0),d2
00015B5E 7000                       		moveq	#0,d0
00015B60 1028 0016                  		move.b	$16(a0),d0
00015B64 4880                       		ext.w	d0
00015B66 D440                       		add.w	d0,d2
00015B68 49F8 F768                  		lea	($FFFFF768).w,a4
00015B6C 18BC 0000                  		move.b	#0,(a4)
00015B70 367C 0010                  		movea.w	#$10,a3
00015B74 3C3C 0000                  		move.w	#0,d6
00015B78 7A0D                       		moveq	#$D,d5
00015B7A 6100 FB90                  		bsr.w	FindFloor
00015B7E 1638 F768                  		move.b	($FFFFF768).w,d3
00015B82 0803 0000                  		btst	#0,d3
00015B86 6700                       		beq.s	locret_14E4E
00015B88 163C 0000                  		move.b	#0,d3
00015B8C                            
00015B8C                            locret_14E4E:
00015B8C 4E75                       		rts	
00015B8E                            ; End of function ObjHitFloor2
00015B8E                            
00015B8E                            
00015B8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B8E                            
00015B8E                            
00015B8E                            sub_14E50:				; XREF: sub_14D48
00015B8E 3428 000C                  		move.w	$C(a0),d2
00015B92 3628 0008                  		move.w	8(a0),d3
00015B96 7000                       		moveq	#0,d0
00015B98 1028 0017                  		move.b	$17(a0),d0
00015B9C 4880                       		ext.w	d0
00015B9E 9440                       		sub.w	d0,d2
00015BA0 1028 0016                  		move.b	$16(a0),d0
00015BA4 4880                       		ext.w	d0
00015BA6 D640                       		add.w	d0,d3
00015BA8 49F8 F768                  		lea	($FFFFF768).w,a4
00015BAC 367C 0010                  		movea.w	#$10,a3
00015BB0 3C3C 0000                  		move.w	#0,d6
00015BB4 7A0E                       		moveq	#$E,d5
00015BB6 6100 FC92                  		bsr.w	FindWall
00015BBA 3F01                       		move.w	d1,-(sp)
00015BBC 3428 000C                  		move.w	$C(a0),d2
00015BC0 3628 0008                  		move.w	8(a0),d3
00015BC4 7000                       		moveq	#0,d0
00015BC6 1028 0017                  		move.b	$17(a0),d0
00015BCA 4880                       		ext.w	d0
00015BCC D440                       		add.w	d0,d2
00015BCE 1028 0016                  		move.b	$16(a0),d0
00015BD2 4880                       		ext.w	d0
00015BD4 D640                       		add.w	d0,d3
00015BD6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015BDA 367C 0010                  		movea.w	#$10,a3
00015BDE 3C3C 0000                  		move.w	#0,d6
00015BE2 7A0E                       		moveq	#$E,d5
00015BE4 6100 FC64                  		bsr.w	FindWall
00015BE8 301F                       		move.w	(sp)+,d0
00015BEA 143C 00C0                  		move.b	#-$40,d2
00015BEE 6000 FF1E                  		bra.w	loc_14DD0
00015BF2                            
00015BF2                            ; End of function sub_14E50
00015BF2                            
00015BF2                            
00015BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BF2                            
00015BF2                            
00015BF2                            sub_14EB4:				; XREF: Sonic_Floor
00015BF2 3428 000C                  		move.w	$C(a0),d2
00015BF6 3628 0008                  		move.w	8(a0),d3
00015BFA                            
00015BFA                            loc_14EBC:
00015BFA 0643 000A                  		addi.w	#$A,d3
00015BFE 49F8 F768                  		lea	($FFFFF768).w,a4
00015C02 367C 0010                  		movea.w	#$10,a3
00015C06 3C3C 0000                  		move.w	#0,d6
00015C0A 7A0E                       		moveq	#$E,d5
00015C0C 6100 FC3C                  		bsr.w	FindWall
00015C10 143C 00C0                  		move.b	#-$40,d2
00015C14 6000 FF32                  		bra.w	loc_14E0A
00015C18                            
00015C18                            ; End of function sub_14EB4
00015C18                            
00015C18                            ; ---------------------------------------------------------------------------
00015C18                            ; Subroutine to	detect when an object hits a wall to its right
00015C18                            ; ---------------------------------------------------------------------------
00015C18                            
00015C18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C18                            
00015C18                            
00015C18                            ObjHitWallRight:
00015C18 D668 0008                  		add.w	8(a0),d3
00015C1C 3428 000C                  		move.w	$C(a0),d2
00015C20 49F8 F768                  		lea	($FFFFF768).w,a4
00015C24 18BC 0000                  		move.b	#0,(a4)
00015C28 367C 0010                  		movea.w	#$10,a3
00015C2C 3C3C 0000                  		move.w	#0,d6
00015C30 7A0E                       		moveq	#$E,d5
00015C32 6100 FC16                  		bsr.w	FindWall
00015C36 1638 F768                  		move.b	($FFFFF768).w,d3
00015C3A 0803 0000                  		btst	#0,d3
00015C3E 6700                       		beq.s	locret_14F06
00015C40 163C 00C0                  		move.b	#-$40,d3
00015C44                            
00015C44                            locret_14F06:
00015C44 4E75                       		rts	
00015C46                            
00015C46                            ; End of function ObjHitWallRight
00015C46                            
00015C46                            ; ---------------------------------------------------------------------------
00015C46                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015C46                            ; touches them
00015C46                            ; ---------------------------------------------------------------------------
00015C46                            
00015C46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C46                            
00015C46                            
00015C46                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015C46 3428 000C                  		move.w	$C(a0),d2
00015C4A 3628 0008                  		move.w	8(a0),d3
00015C4E 7000                       		moveq	#0,d0
00015C50 1028 0016                  		move.b	$16(a0),d0
00015C54 4880                       		ext.w	d0
00015C56 9440                       		sub.w	d0,d2
00015C58 0A42 000F                  		eori.w	#$F,d2
00015C5C 1028 0017                  		move.b	$17(a0),d0
00015C60 4880                       		ext.w	d0
00015C62 D640                       		add.w	d0,d3
00015C64 49F8 F768                  		lea	($FFFFF768).w,a4
00015C68 367C FFF0                  		movea.w	#-$10,a3
00015C6C 3C3C 1000                  		move.w	#$1000,d6
00015C70 7A0E                       		moveq	#$E,d5
00015C72 6100 FA98                  		bsr.w	FindFloor
00015C76 3F01                       		move.w	d1,-(sp)
00015C78 3428 000C                  		move.w	$C(a0),d2
00015C7C 3628 0008                  		move.w	8(a0),d3
00015C80 7000                       		moveq	#0,d0
00015C82 1028 0016                  		move.b	$16(a0),d0
00015C86 4880                       		ext.w	d0
00015C88 9440                       		sub.w	d0,d2
00015C8A 0A42 000F                  		eori.w	#$F,d2
00015C8E 1028 0017                  		move.b	$17(a0),d0
00015C92 4880                       		ext.w	d0
00015C94 9640                       		sub.w	d0,d3
00015C96 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015C9A 367C FFF0                  		movea.w	#-$10,a3
00015C9E 3C3C 1000                  		move.w	#$1000,d6
00015CA2 7A0E                       		moveq	#$E,d5
00015CA4 6100 FA66                  		bsr.w	FindFloor
00015CA8 301F                       		move.w	(sp)+,d0
00015CAA 143C 0080                  		move.b	#-$80,d2
00015CAE 6000 FE5E                  		bra.w	loc_14DD0
00015CB2                            ; End of function Sonic_DontRunOnWalls
00015CB2                            
00015CB2                            ; ===========================================================================
00015CB2 3428 000C                  		move.w	$C(a0),d2
00015CB6 3628 0008                  		move.w	8(a0),d3
00015CBA                            
00015CBA                            loc_14F7C:
00015CBA 0442 000A                  		subi.w	#$A,d2
00015CBE 0A42 000F                  		eori.w	#$F,d2
00015CC2 49F8 F768                  		lea	($FFFFF768).w,a4
00015CC6 367C FFF0                  		movea.w	#-$10,a3
00015CCA 3C3C 1000                  		move.w	#$1000,d6
00015CCE 7A0E                       		moveq	#$E,d5
00015CD0 6100 FA3A                  		bsr.w	FindFloor
00015CD4 143C 0080                  		move.b	#-$80,d2
00015CD8 6000 FE6E                  		bra.w	loc_14E0A
00015CDC                            
00015CDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CDC                            
00015CDC                            
00015CDC                            ObjHitCeiling:
00015CDC 3428 000C                  		move.w	$C(a0),d2
00015CE0 3628 0008                  		move.w	8(a0),d3
00015CE4 7000                       		moveq	#0,d0
00015CE6 1028 0016                  		move.b	$16(a0),d0
00015CEA 4880                       		ext.w	d0
00015CEC 9440                       		sub.w	d0,d2
00015CEE 0A42 000F                  		eori.w	#$F,d2
00015CF2 49F8 F768                  		lea	($FFFFF768).w,a4
00015CF6 367C FFF0                  		movea.w	#-$10,a3
00015CFA 3C3C 1000                  		move.w	#$1000,d6
00015CFE 7A0E                       		moveq	#$E,d5
00015D00 6100 FA0A                  		bsr.w	FindFloor
00015D04 1638 F768                  		move.b	($FFFFF768).w,d3
00015D08 0803 0000                  		btst	#0,d3
00015D0C 6700                       		beq.s	locret_14FD4
00015D0E 163C 0080                  		move.b	#-$80,d3
00015D12                            
00015D12                            locret_14FD4:
00015D12 4E75                       		rts	
00015D14                            ; End of function ObjHitCeiling
00015D14                            
00015D14                            ; ===========================================================================
00015D14                            
00015D14                            loc_14FD6:				; XREF: sub_14D48
00015D14 3428 000C                  		move.w	$C(a0),d2
00015D18 3628 0008                  		move.w	8(a0),d3
00015D1C 7000                       		moveq	#0,d0
00015D1E 1028 0017                  		move.b	$17(a0),d0
00015D22 4880                       		ext.w	d0
00015D24 9440                       		sub.w	d0,d2
00015D26 1028 0016                  		move.b	$16(a0),d0
00015D2A 4880                       		ext.w	d0
00015D2C 9640                       		sub.w	d0,d3
00015D2E 0A43 000F                  		eori.w	#$F,d3
00015D32 49F8 F768                  		lea	($FFFFF768).w,a4
00015D36 367C FFF0                  		movea.w	#-$10,a3
00015D3A 3C3C 0800                  		move.w	#$800,d6
00015D3E 7A0E                       		moveq	#$E,d5
00015D40 6100 FB08                  		bsr.w	FindWall
00015D44 3F01                       		move.w	d1,-(sp)
00015D46 3428 000C                  		move.w	$C(a0),d2
00015D4A 3628 0008                  		move.w	8(a0),d3
00015D4E 7000                       		moveq	#0,d0
00015D50 1028 0017                  		move.b	$17(a0),d0
00015D54 4880                       		ext.w	d0
00015D56 D440                       		add.w	d0,d2
00015D58 1028 0016                  		move.b	$16(a0),d0
00015D5C 4880                       		ext.w	d0
00015D5E 9640                       		sub.w	d0,d3
00015D60 0A43 000F                  		eori.w	#$F,d3
00015D64 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015D68 367C FFF0                  		movea.w	#-$10,a3
00015D6C 3C3C 0800                  		move.w	#$800,d6
00015D70 7A0E                       		moveq	#$E,d5
00015D72 6100 FAD6                  		bsr.w	FindWall
00015D76 301F                       		move.w	(sp)+,d0
00015D78 143C 0040                  		move.b	#$40,d2
00015D7C 6000 FD90                  		bra.w	loc_14DD0
00015D80                            
00015D80                            ; ---------------------------------------------------------------------------
00015D80                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015D80                            ; ---------------------------------------------------------------------------
00015D80                            
00015D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D80                            
00015D80                            
00015D80                            Sonic_HitWall:				; XREF: Sonic_Floor
00015D80 3428 000C                  		move.w	$C(a0),d2
00015D84 3628 0008                  		move.w	8(a0),d3
00015D88                            
00015D88                            loc_1504A:
00015D88 0443 000A                  		subi.w	#$A,d3
00015D8C 0A43 000F                  		eori.w	#$F,d3
00015D90 49F8 F768                  		lea	($FFFFF768).w,a4
00015D94 367C FFF0                  		movea.w	#-$10,a3
00015D98 3C3C 0800                  		move.w	#$800,d6
00015D9C 7A0E                       		moveq	#$E,d5
00015D9E 6100 FAAA                  		bsr.w	FindWall
00015DA2 143C 0040                  		move.b	#$40,d2
00015DA6 6000 FDA0                  		bra.w	loc_14E0A
00015DAA                            ; End of function Sonic_HitWall
00015DAA                            
00015DAA                            ; ---------------------------------------------------------------------------
00015DAA                            ; Subroutine to	detect when an object hits a wall to its left
00015DAA                            ; ---------------------------------------------------------------------------
00015DAA                            
00015DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DAA                            
00015DAA                            
00015DAA                            ObjHitWallLeft:
00015DAA D668 0008                  		add.w	8(a0),d3
00015DAE 3428 000C                  		move.w	$C(a0),d2
00015DB2 49F8 F768                  		lea	($FFFFF768).w,a4
00015DB6 18BC 0000                  		move.b	#0,(a4)
00015DBA 367C FFF0                  		movea.w	#-$10,a3
00015DBE 3C3C 0800                  		move.w	#$800,d6
00015DC2 7A0E                       		moveq	#$E,d5
00015DC4 6100 FA84                  		bsr.w	FindWall
00015DC8 1638 F768                  		move.b	($FFFFF768).w,d3
00015DCC 0803 0000                  		btst	#0,d3
00015DD0 6700                       		beq.s	locret_15098
00015DD2 163C 0040                  		move.b	#$40,d3
00015DD6                            
00015DD6                            locret_15098:
00015DD6 4E75                       		rts	
00015DD8                            ; End of function ObjHitWallLeft
00015DD8                            
00015DD8                            ; ===========================================================================
00015DD8                            ; ---------------------------------------------------------------------------
00015DD8                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015DD8                            ; ---------------------------------------------------------------------------
00015DD8                            
00015DD8                            Obj66:					; XREF: Obj_Index
00015DD8 7000                       		moveq	#0,d0
00015DDA 1028 0024                  		move.b	$24(a0),d0
00015DDE 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015DE2 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015DE6                            ; ===========================================================================
00015DE6 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015DE8 0000                       		dc.w Obj66_Action-Obj66_Index
00015DEA 0000                       		dc.w Obj66_Display-Obj66_Index
00015DEC 0000                       		dc.w Obj66_Release-Obj66_Index
00015DEE                            ; ===========================================================================
00015DEE                            
00015DEE                            Obj66_Main:				; XREF: Obj66_Index
00015DEE 5428 0024                  		addq.b	#2,$24(a0)
00015DF2 323C 0001                  		move.w	#1,d1
00015DF6 2248                       		movea.l	a0,a1
00015DF8 6000                       		bra.s	Obj66_MakeItem
00015DFA                            ; ===========================================================================
00015DFA                            
00015DFA                            Obj66_Loop:
00015DFA 6100 8916                  		bsr.w	SingleObjLoad
00015DFE 6600                       		bne.s	loc_150FE
00015E00 12BC 0066                  		move.b	#$66,0(a1)
00015E04 5829 0024                  		addq.b	#4,$24(a1)
00015E08 3368 0008 0008             		move.w	8(a0),8(a1)
00015E0E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015E14 137C 0003 0018             		move.b	#3,$18(a1)
00015E1A 137C 0010 001A             		move.b	#$10,$1A(a1)
00015E20                            
00015E20                            Obj66_MakeItem:				; XREF: Obj66_Main
00015E20 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015E28 337C 4348 0002             		move.w	#$4348,2(a1)
00015E2E 0029 0004 0001             		ori.b	#4,1(a1)
00015E34 137C 0038 0019             		move.b	#$38,$19(a1)
00015E3A                            
00015E3A                            loc_150FE:
00015E3A 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015E3E                            
00015E3E 117C 0030 0019             		move.b	#$30,$19(a0)
00015E44 117C 0004 0018             		move.b	#4,$18(a0)
00015E4A 317C 003C 0030             		move.w	#$3C,$30(a0)
00015E50 117C 0001 0034             		move.b	#1,$34(a0)
00015E56 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015E5C                            
00015E5C                            Obj66_Action:				; XREF: Obj66_Index
00015E5C 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015E60 4A28 0001                  		tst.b	1(a0)
00015E64 6A00 0000                  		bpl.w	Obj66_Display
00015E68 323C 0030                  		move.w	#$30,d1
00015E6C 3401                       		move.w	d1,d2
00015E6E 3602                       		move.w	d2,d3
00015E70 5243                       		addq.w	#1,d3
00015E72 3828 0008                  		move.w	8(a0),d4
00015E76 6100 A7DE                  		bsr.w	SolidObject
00015E7A 0828 0005 0022             		btst	#5,$22(a0)
00015E80 6700 0000                  		beq.w	Obj66_Display
00015E84 43F8 D000                  		lea	($FFFFD000).w,a1
00015E88 720E                       		moveq	#$E,d1
00015E8A 3029 0008                  		move.w	8(a1),d0
00015E8E B068 0008                  		cmp.w	8(a0),d0
00015E92 6500                       		bcs.s	Obj66_GrabSonic
00015E94 7207                       		moveq	#7,d1
00015E96                            
00015E96                            Obj66_GrabSonic:
00015E96 B228 001A                  		cmp.b	$1A(a0),d1
00015E9A 6600                       		bne.s	Obj66_Display
00015E9C 1141 0032                  		move.b	d1,$32(a0)
00015EA0 5828 0024                  		addq.b	#4,$24(a0)
00015EA4 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015EAA 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015EB0 337C 0800 0014             		move.w	#$800,$14(a1)
00015EB6 337C 0000 0010             		move.w	#0,$10(a1)
00015EBC 337C 0000 0012             		move.w	#0,$12(a1)
00015EC2 08A8 0005 0022             		bclr	#5,$22(a0)
00015EC8 08A9 0005 0022             		bclr	#5,$22(a1)
00015ECE 08E9 0001 0022             		bset	#1,$22(a1)
00015ED4 3429 0008                  		move.w	8(a1),d2
00015ED8 3629 000C                  		move.w	$C(a1),d3
00015EDC 6100 0000                  		bsr.w	Obj66_ChgPos
00015EE0 D569 0008                  		add.w	d2,8(a1)
00015EE4 D769 000C                  		add.w	d3,$C(a1)
00015EE8 E0E9 0008                  		asr	8(a1)
00015EEC E0E9 000C                  		asr	$C(a1)
00015EF0                            
00015EF0                            Obj66_Display:				; XREF: Obj66_Index
00015EF0 6000 A43C                  		bra.w	MarkObjGone
00015EF4                            ; ===========================================================================
00015EF4                            
00015EF4                            Obj66_Release:				; XREF: Obj66_Index
00015EF4 1028 001A                  		move.b	$1A(a0),d0
00015EF8 0C00 0004                  		cmpi.b	#4,d0
00015EFC 6700                       		beq.s	loc_151C8
00015EFE 0C00 0007                  		cmpi.b	#7,d0
00015F02 6600                       		bne.s	loc_151F8
00015F04                            
00015F04                            loc_151C8:
00015F04 B028 0032                  		cmp.b	$32(a0),d0
00015F08 6700                       		beq.s	loc_151F8
00015F0A 43F8 D000                  		lea	($FFFFD000).w,a1
00015F0E 337C 0000 0010             		move.w	#0,$10(a1)
00015F14 337C 0800 0012             		move.w	#$800,$12(a1)
00015F1A 0C00 0004                  		cmpi.b	#4,d0
00015F1E 6700                       		beq.s	loc_151F0
00015F20 337C 0800 0010             		move.w	#$800,$10(a1)
00015F26 337C 0800 0012             		move.w	#$800,$12(a1)
00015F2C                            
00015F2C                            loc_151F0:
00015F2C 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015F30 5928 0024                  		subq.b	#4,$24(a0)
00015F34                            
00015F34                            loc_151F8:
00015F34 6100                       		bsr.s	Obj66_ChkSwitch
00015F36 6100                       		bsr.s	Obj66_ChgPos
00015F38 6000 A3F4                  		bra.w	MarkObjGone
00015F3C                            
00015F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F3C                            
00015F3C                            
00015F3C                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015F3C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015F40 7000                       		moveq	#0,d0
00015F42 1028 0038                  		move.b	$38(a0),d0
00015F46 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015F4C 6700                       		beq.s	loc_15224	; if not, branch
00015F4E 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015F52 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015F54 4428 0034                  		neg.b	$34(a0)
00015F58 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015F5E 6000                       		bra.s	Obj66_Animate
00015F60                            ; ===========================================================================
00015F60                            
00015F60                            loc_15224:
00015F60 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015F64                            
00015F64                            Obj66_Animate:
00015F64 5328 001E                  		subq.b	#1,$1E(a0)
00015F68 6A00                       		bpl.s	locret_15246
00015F6A 117C 0007 001E             		move.b	#7,$1E(a0)
00015F70 1228 0034                  		move.b	$34(a0),d1
00015F74 1028 001A                  		move.b	$1A(a0),d0
00015F78 D001                       		add.b	d1,d0
00015F7A 0200 000F                  		andi.b	#$F,d0
00015F7E 1140 001A                  		move.b	d0,$1A(a0)
00015F82                            
00015F82                            locret_15246:
00015F82 4E75                       		rts	
00015F84                            ; End of function Obj66_ChkSwitch
00015F84                            
00015F84                            
00015F84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F84                            
00015F84                            
00015F84                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015F84 43F8 D000                  		lea	($FFFFD000).w,a1
00015F88 7000                       		moveq	#0,d0
00015F8A 1028 001A                  		move.b	$1A(a0),d0
00015F8E D040                       		add.w	d0,d0
00015F90 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015F94 101A                       		move.b	(a2)+,d0
00015F96 4880                       		ext.w	d0
00015F98 D068 0008                  		add.w	8(a0),d0
00015F9C 3340 0008                  		move.w	d0,8(a1)
00015FA0 101A                       		move.b	(a2)+,d0
00015FA2 4880                       		ext.w	d0
00015FA4 D068 000C                  		add.w	$C(a0),d0
00015FA8 3340 000C                  		move.w	d0,$C(a1)
00015FAC 4E75                       		rts	
00015FAE                            ; End of function Obj66_ChgPos
00015FAE                            
00015FAE                            ; ===========================================================================
00015FAE E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015FB2 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015FB6 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015FBA 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015FBE 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015FC2 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015FC6 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015FCA E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015FCE                            ; ---------------------------------------------------------------------------
00015FCE                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015FCE                            ; ---------------------------------------------------------------------------
00015FCE                            Map_obj66:
00015FCE                            	include "_maps\obj66.asm"
00015FCE                            ; ---------------------------------------------------------------------------
00015FCE                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015FCE                            ; ---------------------------------------------------------------------------
00015FCE 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015FD2 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015FD6 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015FDA 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015FDE 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015FE2 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015FE6 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015FEA 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015FEE 0000                       		dc.w byte_154A4-Map_obj66
00015FF0 06                         byte_152B4:	dc.b 6
00015FF1 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015FF6 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015FFB E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00016000 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00016005 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001600A 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001600F 06                         byte_152D3:	dc.b 6
00016010 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00016015 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001601A F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001601F F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00016024 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00016029 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001602E 06                         byte_152F2:	dc.b 6
0001602F 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00016034 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00016039 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001603E 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00016043 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00016048 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001604D 06                         byte_15311:	dc.b 6
0001604E 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00016053 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00016058 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001605D 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00016062 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00016067 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001606C 06                         byte_15330:	dc.b 6
0001606D 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00016072 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00016077 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001607C 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00016081 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00016086 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001608B 06                         byte_1534F:	dc.b 6
0001608C 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00016091 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00016096 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001609B 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000160A0 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000160A5 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000160AA 06                         byte_1536E:	dc.b 6
000160AB 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000160B0 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000160B5 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000160BA 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000160BF 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000160C4 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000160C9 06                         byte_1538D:	dc.b 6
000160CA 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000160CF F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000160D4 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000160D9 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000160DE 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000160E3 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000160E8 06                         byte_153AC:	dc.b 6
000160E9 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000160EE 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000160F3 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000160F8 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000160FD 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00016102 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016107 06                         byte_153CB:	dc.b 6
00016108 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001610D E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00016112 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016117 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001611C F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00016121 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016126 06                         byte_153EA:	dc.b 6
00016127 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001612C E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00016131 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00016136 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001613B E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00016140 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00016145 06                         byte_15409:	dc.b 6
00016146 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001614B D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00016150 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00016155 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001615A E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001615F E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00016164 06                         byte_15428:	dc.b 6
00016165 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001616A D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001616F C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00016174 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00016179 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001617E E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00016183 06                         byte_15447:	dc.b 6
00016184 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00016189 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001618E CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00016193 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00016198 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001619D E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000161A2 06                         byte_15466:	dc.b 6
000161A3 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000161A8 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000161AD D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000161B2 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000161B7 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000161BC E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000161C1 06                         byte_15485:	dc.b 6
000161C2 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000161C7 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000161CC DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000161D1 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000161D6 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000161DB F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000161E0 0C                         byte_154A4:	dc.b $C
000161E1 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000161E6 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000161EB E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000161F0 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000161F5 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000161FA E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000161FF 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016204 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016209 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001620E 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016213 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016218 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001621E 00                         		even
0001621E 00                         		even
0001621E                            
0001621E                            ; ===========================================================================
0001621E                            ; ---------------------------------------------------------------------------
0001621E                            ; Object 67 - disc that	you run	around (SBZ)
0001621E                            ; ---------------------------------------------------------------------------
0001621E                            
0001621E                            Obj67:					; XREF: Obj_Index
0001621E 7000                       		moveq	#0,d0
00016220 1028 0024                  		move.b	$24(a0),d0
00016224 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016228 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001622C                            ; ===========================================================================
0001622C 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
0001622E 0000                       		dc.w Obj67_Action-Obj67_Index
00016230                            ; ===========================================================================
00016230                            
00016230                            Obj67_Main:				; XREF: Obj67_Index
00016230 5428 0024                  		addq.b	#2,$24(a0)
00016234 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001623C 317C C344 0002             		move.w	#$C344,2(a0)
00016242 117C 0004 0001             		move.b	#4,1(a0)
00016248 117C 0004 0018             		move.b	#4,$18(a0)
0001624E 117C 0008 0019             		move.b	#8,$19(a0)
00016254 3168 0008 0032             		move.w	8(a0),$32(a0)
0001625A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016260 117C 0018 0034             		move.b	#$18,$34(a0)
00016266 117C 0048 0038             		move.b	#$48,$38(a0)
0001626C 1228 0028                  		move.b	$28(a0),d1	; get object type
00016270 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016274 6700                       		beq.s	loc_15546
00016276 117C 0010 0034             		move.b	#$10,$34(a0)
0001627C 117C 0038 0038             		move.b	#$38,$38(a0)
00016282                            
00016282                            loc_15546:
00016282 1228 0028                  		move.b	$28(a0),d1	; get object type
00016286 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001628A 4881                       		ext.w	d1
0001628C E741                       		asl.w	#3,d1
0001628E 3141 0036                  		move.w	d1,$36(a0)
00016292 1028 0022                  		move.b	$22(a0),d0
00016296 E418                       		ror.b	#2,d0
00016298 0200 00C0                  		andi.b	#-$40,d0
0001629C 1140 0026                  		move.b	d0,$26(a0)
000162A0                            
000162A0                            Obj67_Action:				; XREF: Obj67_Index
000162A0 6100 0000                  		bsr.w	Obj67_MoveSonic
000162A4 6100 0000                  		bsr.w	Obj67_MoveSpot
000162A8 6000 0000                  		bra.w	Obj67_ChkDel
000162AC                            ; ===========================================================================
000162AC                            
000162AC                            Obj67_MoveSonic:			; XREF: Obj67_Action
000162AC 7400                       		moveq	#0,d2
000162AE 1428 0038                  		move.b	$38(a0),d2
000162B2 3602                       		move.w	d2,d3
000162B4 D643                       		add.w	d3,d3
000162B6 43F8 D000                  		lea	($FFFFD000).w,a1
000162BA 3029 0008                  		move.w	8(a1),d0
000162BE 9068 0032                  		sub.w	$32(a0),d0
000162C2 D042                       		add.w	d2,d0
000162C4 B043                       		cmp.w	d3,d0
000162C6 6400                       		bcc.s	loc_155A8
000162C8 3229 000C                  		move.w	$C(a1),d1
000162CC 9268 0030                  		sub.w	$30(a0),d1
000162D0 D242                       		add.w	d2,d1
000162D2 B243                       		cmp.w	d3,d1
000162D4 6400                       		bcc.s	loc_155A8
000162D6 0829 0001 0022             		btst	#1,$22(a1)
000162DC 6700                       		beq.s	loc_155B8
000162DE 4228 003A                  		clr.b	$3A(a0)
000162E2 4E75                       		rts	
000162E4                            ; ===========================================================================
000162E4                            
000162E4                            loc_155A8:
000162E4 4A28 003A                  		tst.b	$3A(a0)
000162E8 6700                       		beq.s	locret_155B6
000162EA 4229 0038                  		clr.b	$38(a1)
000162EE 4228 003A                  		clr.b	$3A(a0)
000162F2                            
000162F2                            locret_155B6:
000162F2 4E75                       		rts	
000162F4                            ; ===========================================================================
000162F4                            
000162F4                            loc_155B8:
000162F4 4A28 003A                  		tst.b	$3A(a0)
000162F8 6600                       		bne.s	loc_155E2
000162FA 117C 0001 003A             		move.b	#1,$3A(a0)
00016300 0829 0002 0022             		btst	#2,$22(a1)
00016306 6600                       		bne.s	loc_155D0
00016308 4229 001C                  		clr.b	$1C(a1)
0001630C                            
0001630C                            loc_155D0:
0001630C 08A9 0005 0022             		bclr	#5,$22(a1)
00016312 137C 0001 001D             		move.b	#1,$1D(a1)
00016318 137C 0001 0038             		move.b	#1,$38(a1)
0001631E                            
0001631E                            loc_155E2:
0001631E 3029 0014                  		move.w	$14(a1),d0
00016322 4A68 0036                  		tst.w	$36(a0)
00016326 6A00                       		bpl.s	loc_15608
00016328 0C40 FC00                  		cmpi.w	#-$400,d0
0001632C 6F00                       		ble.s	loc_155FA
0001632E 337C FC00 0014             		move.w	#-$400,$14(a1)
00016334 4E75                       		rts	
00016336                            ; ===========================================================================
00016336                            
00016336                            loc_155FA:
00016336 0C40 F100                  		cmpi.w	#-$F00,d0
0001633A 6C00                       		bge.s	locret_15606
0001633C 337C F100 0014             		move.w	#-$F00,$14(a1)
00016342                            
00016342                            locret_15606:
00016342 4E75                       		rts	
00016344                            ; ===========================================================================
00016344                            
00016344                            loc_15608:
00016344 0C40 0400                  		cmpi.w	#$400,d0
00016348 6C00                       		bge.s	loc_15616
0001634A 337C 0400 0014             		move.w	#$400,$14(a1)
00016350 4E75                       		rts	
00016352                            ; ===========================================================================
00016352                            
00016352                            loc_15616:
00016352 0C40 0F00                  		cmpi.w	#$F00,d0
00016356 6F00                       		ble.s	locret_15622
00016358 337C 0F00 0014             		move.w	#$F00,$14(a1)
0001635E                            
0001635E                            locret_15622:
0001635E 4E75                       		rts	
00016360                            ; ===========================================================================
00016360                            
00016360                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016360 3028 0036                  		move.w	$36(a0),d0
00016364 D168 0026                  		add.w	d0,$26(a0)
00016368 1028 0026                  		move.b	$26(a0),d0
0001636C 4EB9 0000 2D6E             		jsr	(CalcSine).l
00016372 3428 0030                  		move.w	$30(a0),d2
00016376 3628 0032                  		move.w	$32(a0),d3
0001637A 7800                       		moveq	#0,d4
0001637C 1828 0034                  		move.b	$34(a0),d4
00016380 E14C                       		lsl.w	#8,d4
00016382 2A04                       		move.l	d4,d5
00016384 C9C0                       		muls.w	d0,d4
00016386 4844                       		swap	d4
00016388 CBC1                       		muls.w	d1,d5
0001638A 4845                       		swap	d5
0001638C D842                       		add.w	d2,d4
0001638E DA43                       		add.w	d3,d5
00016390 3144 000C                  		move.w	d4,$C(a0)
00016394 3145 0008                  		move.w	d5,8(a0)
00016398 4E75                       		rts	
0001639A                            ; ===========================================================================
0001639A                            
0001639A                            Obj67_ChkDel:				; XREF: Obj67_Action
0001639A 3028 0032                  		move.w	$32(a0),d0
0001639E 0240 FF80                  		andi.w	#-$80,d0
000163A2 3238 F700                  		move.w	($FFFFF700).w,d1
000163A6 0441 0080                  		subi.w	#$80,d1
000163AA 0241 FF80                  		andi.w	#-$80,d1
000163AE 9041                       		sub.w	d1,d0
000163B0 0C40 0280                  		cmpi.w	#$280,d0
000163B4 6200                       		bhi.s	Obj67_Delete
000163B6 4EF9 0000 E28C             		jmp	DisplaySprite
000163BC                            ; ===========================================================================
000163BC                            
000163BC                            Obj67_Delete:
000163BC 4EF9 0000 E2C8             		jmp	DeleteObject
000163C2                            ; ===========================================================================
000163C2                            ; ---------------------------------------------------------------------------
000163C2                            ; Sprite mappings - disc that you run around (SBZ)
000163C2                            ; (It's just a small blob that moves around in a circle. The disc itself is
000163C2                            ; part of the level tiles.)
000163C2                            ; ---------------------------------------------------------------------------
000163C2                            Map_obj67:
000163C2                            	include "_maps\obj67.asm"
000163C2                            ; ---------------------------------------------------------------------------
000163C2                            ; Sprite mappings - disc that you run around (SBZ)
000163C2                            ; (It's just a small blob that moves around in a circle. The disc itself is
000163C2                            ; part of the level tiles.)
000163C2                            ; ---------------------------------------------------------------------------
000163C2 0000                       		dc.w byte_15688-Map_obj67
000163C4 01                         byte_15688:	dc.b 1
000163C5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000163CA                            		even
000163CA                            		even
000163CA                            
000163CA                            ; ===========================================================================
000163CA                            ; ---------------------------------------------------------------------------
000163CA                            ; Object 68 - conveyor belts (SBZ)
000163CA                            ; ---------------------------------------------------------------------------
000163CA                            
000163CA                            Obj68:					; XREF: Obj_Index
000163CA 7000                       		moveq	#0,d0
000163CC 1028 0024                  		move.b	$24(a0),d0
000163D0 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000163D4 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000163D8                            ; ===========================================================================
000163D8 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000163DA 0000                       		dc.w Obj68_Action-Obj68_Index
000163DC                            ; ===========================================================================
000163DC                            
000163DC                            Obj68_Main:				; XREF: Obj68_Index
000163DC 5428 0024                  		addq.b	#2,$24(a0)
000163E0 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000163E6 1228 0028                  		move.b	$28(a0),d1	; get object type
000163EA 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000163EE 6700                       		beq.s	loc_156BA	; if zero, branch
000163F0 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000163F6                            
000163F6                            loc_156BA:
000163F6 1228 0028                  		move.b	$28(a0),d1	; get object type
000163FA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000163FE 4881                       		ext.w	d1
00016400 E841                       		asr.w	#4,d1
00016402 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00016406                            
00016406                            Obj68_Action:				; XREF: Obj68_Index
00016406 6100                       		bsr.s	Obj68_MoveSonic
00016408 3028 0008                  		move.w	8(a0),d0
0001640C 0240 FF80                  		andi.w	#$FF80,d0
00016410 3238 F700                  		move.w	($FFFFF700).w,d1
00016414 0441 0080                  		subi.w	#$80,d1
00016418 0241 FF80                  		andi.w	#$FF80,d1
0001641C 9041                       		sub.w	d1,d0
0001641E 0C40 0280                  		cmpi.w	#$280,d0
00016422 6200                       		bhi.s	Obj68_Delete
00016424 4E75                       		rts	
00016426                            ; ===========================================================================
00016426                            
00016426                            Obj68_Delete:
00016426 4EF9 0000 E2C8             		jmp	DeleteObject
0001642C                            ; ===========================================================================
0001642C                            
0001642C                            Obj68_MoveSonic:			; XREF: Obj68_Action
0001642C 7400                       		moveq	#0,d2
0001642E 1428 0038                  		move.b	$38(a0),d2
00016432 3602                       		move.w	d2,d3
00016434 D643                       		add.w	d3,d3
00016436 43F8 D000                  		lea	($FFFFD000).w,a1
0001643A 3029 0008                  		move.w	8(a1),d0
0001643E 9068 0008                  		sub.w	8(a0),d0
00016442 D042                       		add.w	d2,d0
00016444 B043                       		cmp.w	d3,d0
00016446 6400                       		bcc.s	locret_1572E
00016448 3229 000C                  		move.w	$C(a1),d1
0001644C 9268 000C                  		sub.w	$C(a0),d1
00016450 0641 0030                  		addi.w	#$30,d1
00016454 0C41 0030                  		cmpi.w	#$30,d1
00016458 6400                       		bcc.s	locret_1572E
0001645A 0829 0001 0022             		btst	#1,$22(a1)
00016460 6600                       		bne.s	locret_1572E
00016462 3028 0036                  		move.w	$36(a0),d0
00016466 D169 0008                  		add.w	d0,8(a1)
0001646A                            
0001646A                            locret_1572E:
0001646A 4E75                       		rts	
0001646C                            
0001646C                            ; ===========================================================================
0001646C                            ; ---------------------------------------------------------------------------
0001646C                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001646C                            ; ---------------------------------------------------------------------------
0001646C                            
0001646C                            Obj69:					; XREF: Obj_Index
0001646C 7000                       		moveq	#0,d0
0001646E 1028 0024                  		move.b	$24(a0),d0
00016472 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00016476 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001647A                            ; ===========================================================================
0001647A 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001647C 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001647E 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016480                            ; ===========================================================================
00016480                            
00016480                            Obj69_Main:				; XREF: Obj69_Index
00016480 5428 0024                  		addq.b	#2,$24(a0)
00016484 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001648C 317C 4492 0002             		move.w	#$4492,2(a0)
00016492 0028 0004 0001             		ori.b	#4,1(a0)
00016498 117C 0080 0019             		move.b	#$80,$19(a0)
0001649E 7000                       		moveq	#0,d0
000164A0 1028 0028                  		move.b	$28(a0),d0
000164A4 0240 000F                  		andi.w	#$F,d0
000164A8 C0FC 003C                  		mulu.w	#$3C,d0
000164AC 3140 0032                  		move.w	d0,$32(a0)
000164B0 4A28 0028                  		tst.b	$28(a0)
000164B4 6A00                       		bpl.s	Obj69_Trapdoor
000164B6 5428 0024                  		addq.b	#2,$24(a0)
000164BA 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000164C2 317C 04DF 0002             		move.w	#$4DF,2(a0)
000164C8 117C 0010 0019             		move.b	#$10,$19(a0)
000164CE 117C 0002 001C             		move.b	#2,$1C(a0)
000164D4 7000                       		moveq	#0,d0
000164D6 1028 0028                  		move.b	$28(a0),d0	; get object type
000164DA 3200                       		move.w	d0,d1
000164DC 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000164E0 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000164E4 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000164E8 3140 0032                  		move.w	d0,$32(a0)
000164EC 0241 0070                  		andi.w	#$70,d1
000164F0 0641 0010                  		addi.w	#$10,d1
000164F4 E549                       		lsl.w	#2,d1
000164F6 5341                       		subq.w	#1,d1
000164F8 3141 0036                  		move.w	d1,$36(a0)
000164FC 6000                       		bra.s	Obj69_Spinner
000164FE                            ; ===========================================================================
000164FE                            
000164FE                            Obj69_Trapdoor:				; XREF: Obj69_Index
000164FE 5368 0030                  		subq.w	#1,$30(a0)
00016502 6A00                       		bpl.s	Obj69_Animate
00016504 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001650A 0868 0000 001C             		bchg	#0,$1C(a0)
00016510 4A28 0001                  		tst.b	1(a0)
00016514 6A00                       		bpl.s	Obj69_Animate
00016516 303C 00BB                  		move.w	#$BB,d0
0001651A 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play door sound
00016520                            
00016520                            Obj69_Animate:
00016520 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016526 4EB9 0000 B2E4             		jsr	AnimateSprite
0001652C 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016530 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016532 323C 004B                  		move.w	#$4B,d1
00016536 343C 000C                  		move.w	#$C,d2
0001653A 3602                       		move.w	d2,d3
0001653C 5243                       		addq.w	#1,d3
0001653E 3828 0008                  		move.w	8(a0),d4
00016542 6100 A112                  		bsr.w	SolidObject
00016546 6000 9DE6                  		bra.w	MarkObjGone
0001654A                            ; ===========================================================================
0001654A                            
0001654A                            Obj69_NotSolid:
0001654A 0828 0003 0022             		btst	#3,$22(a0)
00016550 6700                       		beq.s	Obj69_Display
00016552 43F8 D000                  		lea	($FFFFD000).w,a1
00016556 08A9 0003 0022             		bclr	#3,$22(a1)
0001655C 08A8 0003 0022             		bclr	#3,$22(a0)
00016562 4228 0025                  		clr.b	$25(a0)
00016566                            
00016566                            Obj69_Display:
00016566 6000 9DC6                  		bra.w	MarkObjGone
0001656A                            ; ===========================================================================
0001656A                            
0001656A                            Obj69_Spinner:				; XREF: Obj69_Index
0001656A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001656E C068 0036                  		and.w	$36(a0),d0
00016572 6600                       		bne.s	Obj69_Delay
00016574 117C 0001 0034             		move.b	#1,$34(a0)
0001657A                            
0001657A                            Obj69_Delay:
0001657A 4A28 0034                  		tst.b	$34(a0)
0001657E 6700                       		beq.s	Obj69_Animate2
00016580 5368 0030                  		subq.w	#1,$30(a0)
00016584 6A00                       		bpl.s	Obj69_Animate2
00016586 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001658C 4228 0034                  		clr.b	$34(a0)
00016590 0868 0000 001C             		bchg	#0,$1C(a0)
00016596                            
00016596                            Obj69_Animate2:
00016596 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001659C 4EB9 0000 B2E4             		jsr	AnimateSprite
000165A2 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000165A6 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000165A8 323C 001B                  		move.w	#$1B,d1
000165AC 343C 0007                  		move.w	#7,d2
000165B0 3602                       		move.w	d2,d3
000165B2 5243                       		addq.w	#1,d3
000165B4 3828 0008                  		move.w	8(a0),d4
000165B8 6100 A09C                  		bsr.w	SolidObject
000165BC 6000 9D70                  		bra.w	MarkObjGone
000165C0                            ; ===========================================================================
000165C0                            
000165C0                            Obj69_NotSolid2:
000165C0 0828 0003 0022             		btst	#3,$22(a0)
000165C6 6700                       		beq.s	Obj69_Display2
000165C8 43F8 D000                  		lea	($FFFFD000).w,a1
000165CC 08A9 0003 0022             		bclr	#3,$22(a1)
000165D2 08A8 0003 0022             		bclr	#3,$22(a0)
000165D8 4228 0025                  		clr.b	$25(a0)
000165DC                            
000165DC                            Obj69_Display2:
000165DC 6000 9D50                  		bra.w	MarkObjGone
000165E0                            ; ===========================================================================
000165E0                            Ani_obj69:
000165E0                            	include "_anim\obj69.asm"
000165E0                            ; ---------------------------------------------------------------------------
000165E0                            ; Animation script - trapdoor (SBZ)
000165E0                            ; ---------------------------------------------------------------------------
000165E0 0000                       		dc.w byte_158AC-Ani_obj69
000165E2 0000                       		dc.w byte_158B2-Ani_obj69
000165E4 0000                       		dc.w byte_158B8-Ani_obj69
000165E6 0000                       		dc.w byte_158CC-Ani_obj69
000165E8 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000165EE 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000165F4 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016601 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016608 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016615 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001661C                            		even
0001661C                            		even
0001661C                            
0001661C                            ; ---------------------------------------------------------------------------
0001661C                            ; Sprite mappings - trapdoor (SBZ)
0001661C                            ; ---------------------------------------------------------------------------
0001661C                            Map_obj69:
0001661C                            	include "_maps\obj69.asm"
0001661C                            ; ---------------------------------------------------------------------------
0001661C                            ; Sprite mappings - trapdoor (SBZ)
0001661C                            ; ---------------------------------------------------------------------------
0001661C 0000                       		dc.w byte_158E6-Map_obj69
0001661E 0000                       		dc.w byte_158FB-Map_obj69
00016620 0000                       		dc.w byte_15924-Map_obj69
00016622 04                         byte_158E6:	dc.b 4
00016623 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016628 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001662D F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016632 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016637 08                         byte_158FB:	dc.b 8
00016638 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001663D 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016642 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016647 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001664C F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016651 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016656 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001665B 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016660 04                         byte_15924:	dc.b 4
00016661 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016666 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001666B 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016670 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016676 00                         		even
00016676 00                         		even
00016676                            
00016676                            ; ---------------------------------------------------------------------------
00016676                            ; Sprite mappings - spinning platforms (SBZ)
00016676                            ; ---------------------------------------------------------------------------
00016676                            Map_obj69a:
00016676                            	include "_maps\obj69a.asm"
00016676                            ; ---------------------------------------------------------------------------
00016676                            ; Sprite mappings - spinning platforms (SBZ)
00016676                            ; ---------------------------------------------------------------------------
00016676 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001667A 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0001667E 0000                       		dc.w byte_15970-Map_obj69a
00016680 02                         byte_15944:	dc.b 2
00016681 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016686 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001668B 02                         byte_1594F:	dc.b 2
0001668C F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016691 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016696 02                         byte_1595A:	dc.b 2
00016697 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001669C 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000166A1 02                         byte_15965:	dc.b 2
000166A2 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000166A7 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000166AC 02                         byte_15970:	dc.b 2
000166AD F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000166B2 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000166B8 00                         		even
000166B8 00                         		even
000166B8                            
000166B8                            ; ===========================================================================
000166B8                            ; ---------------------------------------------------------------------------
000166B8                            ; Object 6A - ground saws and pizza cutters (SBZ)
000166B8                            ; ---------------------------------------------------------------------------
000166B8                            
000166B8                            Obj6A:					; XREF: Obj_Index
000166B8 7000                       		moveq	#0,d0
000166BA 1028 0024                  		move.b	$24(a0),d0
000166BE 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000166C2 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000166C6                            ; ===========================================================================
000166C6 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000166C8 0000                       		dc.w Obj6A_Action-Obj6A_Index
000166CA                            ; ===========================================================================
000166CA                            
000166CA                            Obj6A_Main:				; XREF: Obj6A_Index
000166CA 5428 0024                  		addq.b	#2,$24(a0)
000166CE 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000166D6 317C 43B5 0002             		move.w	#$43B5,2(a0)
000166DC 117C 0004 0001             		move.b	#4,1(a0)
000166E2 117C 0004 0018             		move.b	#4,$18(a0)
000166E8 117C 0020 0019             		move.b	#$20,$19(a0)
000166EE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000166F4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000166FA 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016700 6400                       		bcc.s	Obj6A_Action
00016702 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016708                            
00016708                            Obj6A_Action:				; XREF: Obj6A_Index
00016708 7000                       		moveq	#0,d0
0001670A 1028 0028                  		move.b	$28(a0),d0
0001670E 0240 0007                  		andi.w	#7,d0
00016712 D040                       		add.w	d0,d0
00016714 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016718 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
0001671C 3028 003A                  		move.w	$3A(a0),d0
00016720 0240 FF80                  		andi.w	#$FF80,d0
00016724 3238 F700                  		move.w	($FFFFF700).w,d1
00016728 0441 0080                  		subi.w	#$80,d1
0001672C 0241 FF80                  		andi.w	#$FF80,d1
00016730 9041                       		sub.w	d1,d0
00016732 0C40 0280                  		cmpi.w	#$280,d0
00016736 6200                       		bhi.s	Obj6A_Delete
00016738 4EF9 0000 E28C             		jmp	DisplaySprite
0001673E                            ; ===========================================================================
0001673E                            
0001673E                            Obj6A_Delete:
0001673E 4EF9 0000 E2C8             		jmp	DeleteObject
00016744                            ; ===========================================================================
00016744 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016748 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
0001674C 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
0001674E                            ; ===========================================================================
0001674E                            
0001674E                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
0001674E 4E75                       		rts	
00016750                            ; ===========================================================================
00016750                            
00016750                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016750 323C 0060                  		move.w	#$60,d1
00016754 7000                       		moveq	#0,d0
00016756 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001675A 0828 0000 0022             		btst	#0,$22(a0)
00016760 6700                       		beq.s	Obj6A_Animate01
00016762 4440                       		neg.w	d0
00016764 D041                       		add.w	d1,d0
00016766                            
00016766                            Obj6A_Animate01:
00016766 3228 003A                  		move.w	$3A(a0),d1
0001676A 9240                       		sub.w	d0,d1
0001676C 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016770 5328 001E                  		subq.b	#1,$1E(a0)
00016774 6A00                       		bpl.s	loc_15A46
00016776 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001677C 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016782                            
00016782                            loc_15A46:
00016782 4A28 0001                  		tst.b	1(a0)
00016786 6A00                       		bpl.s	locret_15A60
00016788 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001678C 0240 000F                  		andi.w	#$F,d0
00016790 6600                       		bne.s	locret_15A60
00016792 303C 00B0                  		move.w	#$B0,d0
00016796 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play saw sound
0001679C                            
0001679C                            locret_15A60:
0001679C 4E75                       		rts	
0001679E                            ; ===========================================================================
0001679E                            
0001679E                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001679E 323C 0030                  		move.w	#$30,d1
000167A2 7000                       		moveq	#0,d0
000167A4 1038 FE64                  		move.b	($FFFFFE64).w,d0
000167A8 0828 0000 0022             		btst	#0,$22(a0)
000167AE 6700                       		beq.s	Obj6A_Animate02
000167B0 4440                       		neg.w	d0
000167B2 0640 0080                  		addi.w	#$80,d0
000167B6                            
000167B6                            Obj6A_Animate02:
000167B6 3228 0038                  		move.w	$38(a0),d1
000167BA 9240                       		sub.w	d0,d1
000167BC 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000167C0 5328 001E                  		subq.b	#1,$1E(a0)
000167C4 6A00                       		bpl.s	loc_15A96
000167C6 117C 0002 001E             		move.b	#2,$1E(a0)
000167CC 0868 0000 001A             		bchg	#0,$1A(a0)
000167D2                            
000167D2                            loc_15A96:
000167D2 4A28 0001                  		tst.b	1(a0)
000167D6 6A00                       		bpl.s	locret_15AB0
000167D8 1038 FE64                  		move.b	($FFFFFE64).w,d0
000167DC 0C00 0018                  		cmpi.b	#$18,d0
000167E0 6600                       		bne.s	locret_15AB0
000167E2 303C 00B0                  		move.w	#$B0,d0
000167E6 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play saw sound
000167EC                            
000167EC                            locret_15AB0:
000167EC 4E75                       		rts	
000167EE                            ; ===========================================================================
000167EE                            
000167EE                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000167EE 4A28 003D                  		tst.b	$3D(a0)
000167F2 6600                       		bne.s	Obj6A_Animate03
000167F4 3038 D008                  		move.w	($FFFFD008).w,d0
000167F8 0440 00C0                  		subi.w	#$C0,d0
000167FC 6500                       		bcs.s	loc_15B02
000167FE 9068 0008                  		sub.w	8(a0),d0
00016802 6500                       		bcs.s	loc_15B02
00016804 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016808 0440 0080                  		subi.w	#$80,d0
0001680C B068 000C                  		cmp.w	$C(a0),d0
00016810 6400                       		bcc.s	locret_15B04
00016812 0640 0100                  		addi.w	#$100,d0
00016816 B068 000C                  		cmp.w	$C(a0),d0
0001681A 6500                       		bcs.s	locret_15B04
0001681C 117C 0001 003D             		move.b	#1,$3D(a0)
00016822 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016828 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001682E 117C 0002 001A             		move.b	#2,$1A(a0)
00016834 303C 00B0                  		move.w	#$B0,d0
00016838 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play saw sound
0001683E                            
0001683E                            loc_15B02:
0001683E 588F                       		addq.l	#4,sp
00016840                            
00016840                            locret_15B04:
00016840 4E75                       		rts	
00016842                            ; ===========================================================================
00016842                            
00016842                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016842 4EB9 0000 E252             		jsr	SpeedToPos
00016848 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001684E 5328 001E                  		subq.b	#1,$1E(a0)
00016852 6A00                       		bpl.s	locret_15B24
00016854 117C 0002 001E             		move.b	#2,$1E(a0)
0001685A 0868 0000 001A             		bchg	#0,$1A(a0)
00016860                            
00016860                            locret_15B24:
00016860 4E75                       		rts	
00016862                            ; ===========================================================================
00016862                            
00016862                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016862 4A28 003D                  		tst.b	$3D(a0)
00016866 6600                       		bne.s	Obj6A_Animate04
00016868 3038 D008                  		move.w	($FFFFD008).w,d0
0001686C 0640 00E0                  		addi.w	#$E0,d0
00016870 9068 0008                  		sub.w	8(a0),d0
00016874 6400                       		bcc.s	loc_15B74
00016876 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001687A 0440 0080                  		subi.w	#$80,d0
0001687E B068 000C                  		cmp.w	$C(a0),d0
00016882 6400                       		bcc.s	locret_15B76
00016884 0640 0100                  		addi.w	#$100,d0
00016888 B068 000C                  		cmp.w	$C(a0),d0
0001688C 6500                       		bcs.s	locret_15B76
0001688E 117C 0001 003D             		move.b	#1,$3D(a0)
00016894 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001689A 117C 00A2 0020             		move.b	#$A2,$20(a0)
000168A0 117C 0002 001A             		move.b	#2,$1A(a0)
000168A6 303C 00B0                  		move.w	#$B0,d0
000168AA 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play saw sound
000168B0                            
000168B0                            loc_15B74:
000168B0 588F                       		addq.l	#4,sp
000168B2                            
000168B2                            locret_15B76:
000168B2 4E75                       		rts	
000168B4                            ; ===========================================================================
000168B4                            
000168B4                            Obj6A_Animate04:
000168B4 4EB9 0000 E252             		jsr	SpeedToPos
000168BA 3168 0008 003A             		move.w	8(a0),$3A(a0)
000168C0 5328 001E                  		subq.b	#1,$1E(a0)
000168C4 6A00                       		bpl.s	locret_15B96
000168C6 117C 0002 001E             		move.b	#2,$1E(a0)
000168CC 0868 0000 001A             		bchg	#0,$1A(a0)
000168D2                            
000168D2                            locret_15B96:
000168D2 4E75                       		rts	
000168D4                            ; ===========================================================================
000168D4                            ; ---------------------------------------------------------------------------
000168D4                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000168D4                            ; ---------------------------------------------------------------------------
000168D4                            Map_obj6A:
000168D4                            	include "_maps\obj6A.asm"
000168D4                            ; ---------------------------------------------------------------------------
000168D4                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000168D4                            ; ---------------------------------------------------------------------------
000168D4 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000168D8 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000168DC 07                         byte_15BA0:	dc.b 7
000168DD C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000168E2 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000168E7 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000168EC E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000168F1 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000168F6 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000168FB 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016900 07                         byte_15BC4:	dc.b 7
00016901 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016906 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001690B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016910 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016915 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001691A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001691F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016924 04                         byte_15BE8:	dc.b 4
00016925 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001692A E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001692F 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016934 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016939 04                         byte_15BFD:	dc.b 4
0001693A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001693F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016944 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016949 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001694E                            		even
0001694E                            		even
0001694E                            
0001694E                            ; ===========================================================================
0001694E                            ; ---------------------------------------------------------------------------
0001694E                            ; Object 6B - stomper (SBZ)
0001694E                            ; ---------------------------------------------------------------------------
0001694E                            
0001694E                            Obj6B:					; XREF: Obj_Index
0001694E 7000                       		moveq	#0,d0
00016950 1028 0024                  		move.b	$24(a0),d0
00016954 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016958 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001695C                            ; ===========================================================================
0001695C 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
0001695E 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016960                            
00016960 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016964 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016968 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001696C 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016970 8040 0005                  		dc.b  $80, $40,	  0,   5
00016974                            ; ===========================================================================
00016974                            
00016974                            Obj6B_Main:				; XREF: Obj6B_Index
00016974 5428 0024                  		addq.b	#2,$24(a0)
00016978 7000                       		moveq	#0,d0
0001697A 1028 0028                  		move.b	$28(a0),d0
0001697E E448                       		lsr.w	#2,d0
00016980 0240 001C                  		andi.w	#$1C,d0
00016984 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016988 115B 0019                  		move.b	(a3)+,$19(a0)
0001698C 115B 0016                  		move.b	(a3)+,$16(a0)
00016990 E448                       		lsr.w	#2,d0
00016992 1140 001A                  		move.b	d0,$1A(a0)
00016996 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001699E 317C 22C0 0002             		move.w	#$22C0,2(a0)
000169A4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000169AA 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000169AC 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000169B2 6700                       		beq.s	Obj6B_SBZ3
000169B4                            
000169B4                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000169B4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000169B8 7000                       		moveq	#0,d0
000169BA 1028 0023                  		move.b	$23(a0),d0
000169BE 6700                       		beq.s	Obj6B_Delete
000169C0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000169C6                            
000169C6                            Obj6B_Delete:
000169C6 4EF9 0000 E2C8             		jmp	DeleteObject
000169CC                            ; ===========================================================================
000169CC                            
000169CC                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000169CC 317C 41F0 0002             		move.w	#$41F0,2(a0)
000169D2 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000169D8 6600                       		bne.s	Obj6B_SBZ12
000169DA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000169DE 7000                       		moveq	#0,d0
000169E0 1028 0023                  		move.b	$23(a0),d0
000169E4 6700                       		beq.s	Obj6B_SBZ12
000169E6 0832 0000 0002             		btst	#0,2(a2,d0.w)
000169EC 6700                       		beq.s	Obj6B_SBZ12
000169EE 4238 F7CB                  		clr.b	($FFFFF7CB).w
000169F2 60C0                       		bra.s	Obj6B_ChkGone
000169F4                            ; ===========================================================================
000169F4                            
000169F4                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000169F4 0028 0004 0001             		ori.b	#4,1(a0)
000169FA 117C 0004 0018             		move.b	#4,$18(a0)
00016A00 3168 0008 0034             		move.w	8(a0),$34(a0)
00016A06 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016A0C 7000                       		moveq	#0,d0
00016A0E 101B                       		move.b	(a3)+,d0
00016A10 3140 003C                  		move.w	d0,$3C(a0)
00016A14 7000                       		moveq	#0,d0
00016A16 1028 0028                  		move.b	$28(a0),d0
00016A1A 6A00                       		bpl.s	Obj6B_Action
00016A1C 0200 000F                  		andi.b	#$F,d0
00016A20 1140 003E                  		move.b	d0,$3E(a0)
00016A24 1153 0028                  		move.b	(a3),$28(a0)
00016A28 0C13 0005                  		cmpi.b	#5,(a3)
00016A2C 6600                       		bne.s	Obj6B_ChkGone2
00016A2E 08E8 0004 0001             		bset	#4,1(a0)
00016A34                            
00016A34                            Obj6B_ChkGone2:
00016A34 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A38 7000                       		moveq	#0,d0
00016A3A 1028 0023                  		move.b	$23(a0),d0
00016A3E 6700                       		beq.s	Obj6B_Action
00016A40 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016A46                            
00016A46                            Obj6B_Action:				; XREF: Obj6B_Index
00016A46 3F28 0008                  		move.w	8(a0),-(sp)
00016A4A 7000                       		moveq	#0,d0
00016A4C 1028 0028                  		move.b	$28(a0),d0
00016A50 0240 000F                  		andi.w	#$F,d0
00016A54 D040                       		add.w	d0,d0
00016A56 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016A5A 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016A5E 381F                       		move.w	(sp)+,d4
00016A60 4A28 0001                  		tst.b	1(a0)
00016A64 6A00                       		bpl.s	Obj6B_ChkDel
00016A66 7200                       		moveq	#0,d1
00016A68 1228 0019                  		move.b	$19(a0),d1
00016A6C 0641 000B                  		addi.w	#$B,d1
00016A70 7400                       		moveq	#0,d2
00016A72 1428 0016                  		move.b	$16(a0),d2
00016A76 3602                       		move.w	d2,d3
00016A78 5243                       		addq.w	#1,d3
00016A7A 6100 9BDA                  		bsr.w	SolidObject
00016A7E                            
00016A7E                            Obj6B_ChkDel:
00016A7E 3028 0034                  		move.w	$34(a0),d0
00016A82 0240 FF80                  		andi.w	#$FF80,d0
00016A86 3238 F700                  		move.w	($FFFFF700).w,d1
00016A8A 0441 0080                  		subi.w	#$80,d1
00016A8E 0241 FF80                  		andi.w	#$FF80,d1
00016A92 9041                       		sub.w	d1,d0
00016A94 0C40 0280                  		cmpi.w	#$280,d0
00016A98 6200                       		bhi.s	loc_15D64
00016A9A 4EF9 0000 E28C             		jmp	DisplaySprite
00016AA0                            ; ===========================================================================
00016AA0                            
00016AA0                            loc_15D64:
00016AA0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016AA6 6600                       		bne.s	Obj6B_Delete2
00016AA8 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016AAC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016AB0 7000                       		moveq	#0,d0
00016AB2 1028 0023                  		move.b	$23(a0),d0
00016AB6 6700                       		beq.s	Obj6B_Delete2
00016AB8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016ABE                            
00016ABE                            Obj6B_Delete2:
00016ABE 4EF9 0000 E2C8             		jmp	DeleteObject
00016AC4                            ; ===========================================================================
00016AC4 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016AC8 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016ACC 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016AD0                            ; ===========================================================================
00016AD0                            
00016AD0                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016AD0 4E75                       		rts	
00016AD2                            ; ===========================================================================
00016AD2                            
00016AD2                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016AD2 4A28 0038                  		tst.b	$38(a0)
00016AD6 6600                       		bne.s	loc_15DB4
00016AD8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016ADC 7000                       		moveq	#0,d0
00016ADE 1028 003E                  		move.b	$3E(a0),d0
00016AE2 0832 0000 0000             		btst	#0,(a2,d0.w)
00016AE8 6700                       		beq.s	loc_15DC2
00016AEA 117C 0001 0038             		move.b	#1,$38(a0)
00016AF0                            
00016AF0                            loc_15DB4:
00016AF0 3028 003C                  		move.w	$3C(a0),d0
00016AF4 B068 003A                  		cmp.w	$3A(a0),d0
00016AF8 6700                       		beq.s	loc_15DE0
00016AFA 5468 003A                  		addq.w	#2,$3A(a0)
00016AFE                            
00016AFE                            loc_15DC2:
00016AFE 3028 003A                  		move.w	$3A(a0),d0
00016B02 0828 0000 0022             		btst	#0,$22(a0)
00016B08 6700                       		beq.s	loc_15DD4
00016B0A 4440                       		neg.w	d0
00016B0C 0640 0080                  		addi.w	#$80,d0
00016B10                            
00016B10                            loc_15DD4:
00016B10 3228 0034                  		move.w	$34(a0),d1
00016B14 9240                       		sub.w	d0,d1
00016B16 3141 0008                  		move.w	d1,8(a0)
00016B1A 4E75                       		rts	
00016B1C                            ; ===========================================================================
00016B1C                            
00016B1C                            loc_15DE0:
00016B1C 5228 0028                  		addq.b	#1,$28(a0)
00016B20 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016B26 4228 0038                  		clr.b	$38(a0)
00016B2A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016B2E 7000                       		moveq	#0,d0
00016B30 1028 0023                  		move.b	$23(a0),d0
00016B34 67C8                       		beq.s	loc_15DC2
00016B36 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016B3C 60C0                       		bra.s	loc_15DC2
00016B3E                            ; ===========================================================================
00016B3E                            
00016B3E                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016B3E 4A28 0038                  		tst.b	$38(a0)
00016B42 6600                       		bne.s	loc_15E14
00016B44 5368 0036                  		subq.w	#1,$36(a0)
00016B48 6600                       		bne.s	loc_15E1E
00016B4A 117C 0001 0038             		move.b	#1,$38(a0)
00016B50                            
00016B50                            loc_15E14:
00016B50 4A68 003A                  		tst.w	$3A(a0)
00016B54 6700                       		beq.s	loc_15E3C
00016B56 5568 003A                  		subq.w	#2,$3A(a0)
00016B5A                            
00016B5A                            loc_15E1E:
00016B5A 3028 003A                  		move.w	$3A(a0),d0
00016B5E 0828 0000 0022             		btst	#0,$22(a0)
00016B64 6700                       		beq.s	loc_15E30
00016B66 4440                       		neg.w	d0
00016B68 0640 0080                  		addi.w	#$80,d0
00016B6C                            
00016B6C                            loc_15E30:
00016B6C 3228 0034                  		move.w	$34(a0),d1
00016B70 9240                       		sub.w	d0,d1
00016B72 3141 0008                  		move.w	d1,8(a0)
00016B76 4E75                       		rts	
00016B78                            ; ===========================================================================
00016B78                            
00016B78                            loc_15E3C:
00016B78 5328 0028                  		subq.b	#1,$28(a0)
00016B7C 4228 0038                  		clr.b	$38(a0)
00016B80 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016B84 7000                       		moveq	#0,d0
00016B86 1028 0023                  		move.b	$23(a0),d0
00016B8A 67CE                       		beq.s	loc_15E1E
00016B8C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016B92 60C6                       		bra.s	loc_15E1E
00016B94                            ; ===========================================================================
00016B94                            
00016B94                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016B94 4A28 0038                  		tst.b	$38(a0)
00016B98 6600                       		bne.s	loc_15E7C
00016B9A 4A68 003A                  		tst.w	$3A(a0)
00016B9E 6700                       		beq.s	loc_15E6A
00016BA0 5368 003A                  		subq.w	#1,$3A(a0)
00016BA4 6000                       		bra.s	loc_15E8E
00016BA6                            ; ===========================================================================
00016BA6                            
00016BA6                            loc_15E6A:
00016BA6 5368 0036                  		subq.w	#1,$36(a0)
00016BAA 6A00                       		bpl.s	loc_15E8E
00016BAC 317C 003C 0036             		move.w	#$3C,$36(a0)
00016BB2 117C 0001 0038             		move.b	#1,$38(a0)
00016BB8                            
00016BB8                            loc_15E7C:
00016BB8 5068 003A                  		addq.w	#8,$3A(a0)
00016BBC 3028 003A                  		move.w	$3A(a0),d0
00016BC0 B068 003C                  		cmp.w	$3C(a0),d0
00016BC4 6600                       		bne.s	loc_15E8E
00016BC6 4228 0038                  		clr.b	$38(a0)
00016BCA                            
00016BCA                            loc_15E8E:
00016BCA 3028 003A                  		move.w	$3A(a0),d0
00016BCE 0828 0000 0022             		btst	#0,$22(a0)
00016BD4 6700                       		beq.s	loc_15EA0
00016BD6 4440                       		neg.w	d0
00016BD8 0640 0038                  		addi.w	#$38,d0
00016BDC                            
00016BDC                            loc_15EA0:
00016BDC 3228 0030                  		move.w	$30(a0),d1
00016BE0 D240                       		add.w	d0,d1
00016BE2 3141 000C                  		move.w	d1,$C(a0)
00016BE6 4E75                       		rts	
00016BE8                            ; ===========================================================================
00016BE8                            
00016BE8                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016BE8 4A28 0038                  		tst.b	$38(a0)
00016BEC 6600                       		bne.s	loc_15ED0
00016BEE 4A68 003A                  		tst.w	$3A(a0)
00016BF2 6700                       		beq.s	loc_15EBE
00016BF4 5168 003A                  		subq.w	#8,$3A(a0)
00016BF8 6000                       		bra.s	loc_15EF0
00016BFA                            ; ===========================================================================
00016BFA                            
00016BFA                            loc_15EBE:
00016BFA 5368 0036                  		subq.w	#1,$36(a0)
00016BFE 6A00                       		bpl.s	loc_15EF0
00016C00 317C 003C 0036             		move.w	#$3C,$36(a0)
00016C06 117C 0001 0038             		move.b	#1,$38(a0)
00016C0C                            
00016C0C                            loc_15ED0:
00016C0C 3028 003A                  		move.w	$3A(a0),d0
00016C10 B068 003C                  		cmp.w	$3C(a0),d0
00016C14 6700                       		beq.s	loc_15EE0
00016C16 5068 003A                  		addq.w	#8,$3A(a0)
00016C1A 6000                       		bra.s	loc_15EF0
00016C1C                            ; ===========================================================================
00016C1C                            
00016C1C                            loc_15EE0:
00016C1C 5368 0036                  		subq.w	#1,$36(a0)
00016C20 6A00                       		bpl.s	loc_15EF0
00016C22 317C 003C 0036             		move.w	#$3C,$36(a0)
00016C28 4228 0038                  		clr.b	$38(a0)
00016C2C                            
00016C2C                            loc_15EF0:
00016C2C 3028 003A                  		move.w	$3A(a0),d0
00016C30 0828 0000 0022             		btst	#0,$22(a0)
00016C36 6700                       		beq.s	loc_15F02
00016C38 4440                       		neg.w	d0
00016C3A 0640 0038                  		addi.w	#$38,d0
00016C3E                            
00016C3E                            loc_15F02:
00016C3E 3228 0030                  		move.w	$30(a0),d1
00016C42 D240                       		add.w	d0,d1
00016C44 3141 000C                  		move.w	d1,$C(a0)
00016C48 4E75                       		rts	
00016C4A                            ; ===========================================================================
00016C4A                            
00016C4A                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016C4A 4A28 0038                  		tst.b	$38(a0)
00016C4E 6600                       		bne.s	loc_15F3E
00016C50 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016C54 7000                       		moveq	#0,d0
00016C56 1028 003E                  		move.b	$3E(a0),d0
00016C5A 0832 0000 0000             		btst	#0,(a2,d0.w)
00016C60 6700                       		beq.s	locret_15F5C
00016C62 117C 0001 0038             		move.b	#1,$38(a0)
00016C68 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016C6C 7000                       		moveq	#0,d0
00016C6E 1028 0023                  		move.b	$23(a0),d0
00016C72 6700                       		beq.s	loc_15F3E
00016C74 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016C7A                            
00016C7A                            loc_15F3E:
00016C7A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016C82 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016C8A 3168 0008 0034             		move.w	8(a0),$34(a0)
00016C90 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016C96 6700                       		beq.s	loc_15F5E
00016C98                            
00016C98                            locret_15F5C:
00016C98 4E75                       		rts	
00016C9A                            ; ===========================================================================
00016C9A                            
00016C9A                            loc_15F5E:
00016C9A 4228 0028                  		clr.b	$28(a0)
00016C9E 4228 0038                  		clr.b	$38(a0)
00016CA2 4E75                       		rts	
00016CA4                            ; ===========================================================================
00016CA4                            ; ---------------------------------------------------------------------------
00016CA4                            ; Sprite mappings - stomper and	platforms (SBZ)
00016CA4                            ; ---------------------------------------------------------------------------
00016CA4                            Map_obj6B:
00016CA4                            	include "_maps\obj6B.asm"
00016CA4                            ; ---------------------------------------------------------------------------
00016CA4                            ; Sprite mappings - stomper and	platforms (SBZ)
00016CA4                            ; ---------------------------------------------------------------------------
00016CA4 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016CA8 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016CAC 0000                       		dc.w byte_15FB0-Map_obj6B
00016CAE 04                         byte_15F72:	dc.b 4
00016CAF F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016CB4 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016CB9 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016CBE F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016CC3 08                         byte_15F87:	dc.b 8
00016CC4 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016CC9 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016CCE E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016CD3 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016CD8 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016CDD 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016CE2 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016CE7 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016CEC 0E                         byte_15FB0:	dc.b $E
00016CED C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016CF2 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016CF7 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016CFC C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016D01 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016D06 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016D0B C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016D10 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016D15 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016D1A E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016D1F E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016D24 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016D29 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016D2E 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016D34 00                         		even
00016D34 00                         		even
00016D34                            
00016D34                            ; ===========================================================================
00016D34                            ; ---------------------------------------------------------------------------
00016D34                            ; Object 6C - vanishing	platforms (SBZ)
00016D34                            ; ---------------------------------------------------------------------------
00016D34                            
00016D34                            Obj6C:					; XREF: Obj_Index
00016D34 7000                       		moveq	#0,d0
00016D36 1028 0024                  		move.b	$24(a0),d0
00016D3A 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016D3E 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016D42                            ; ===========================================================================
00016D42 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016D44 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016D46 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016D48 0000                       		dc.w loc_16068-Obj6C_Index
00016D4A                            ; ===========================================================================
00016D4A                            
00016D4A                            Obj6C_Main:				; XREF: Obj6C_Index
00016D4A 5C28 0024                  		addq.b	#6,$24(a0)
00016D4E 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016D56 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016D5C 0028 0004 0001             		ori.b	#4,1(a0)
00016D62 117C 0010 0019             		move.b	#$10,$19(a0)
00016D68 117C 0004 0018             		move.b	#4,$18(a0)
00016D6E 7000                       		moveq	#0,d0
00016D70 1028 0028                  		move.b	$28(a0),d0	; get object type
00016D74 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016D78 5240                       		addq.w	#1,d0		; add 1
00016D7A EF48                       		lsl.w	#7,d0		; multiply by $80
00016D7C 3200                       		move.w	d0,d1
00016D7E 5340                       		subq.w	#1,d0
00016D80 3140 0030                  		move.w	d0,$30(a0)
00016D84 3140 0032                  		move.w	d0,$32(a0)
00016D88 7000                       		moveq	#0,d0
00016D8A 1028 0028                  		move.b	$28(a0),d0	; get object type
00016D8E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016D92 0641 0080                  		addi.w	#$80,d1
00016D96 C0C1                       		mulu.w	d1,d0
00016D98 E088                       		lsr.l	#8,d0
00016D9A 3140 0036                  		move.w	d0,$36(a0)
00016D9E 5341                       		subq.w	#1,d1
00016DA0 3141 0038                  		move.w	d1,$38(a0)
00016DA4                            
00016DA4                            loc_16068:				; XREF: Obj6C_Index
00016DA4 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016DA8 9068 0036                  		sub.w	$36(a0),d0
00016DAC C068 0038                  		and.w	$38(a0),d0
00016DB0 6600                       		bne.s	Obj6C_Animate
00016DB2 5928 0024                  		subq.b	#4,$24(a0)
00016DB6 6000                       		bra.s	Obj6C_Vanish
00016DB8                            ; ===========================================================================
00016DB8                            
00016DB8                            Obj6C_Animate:
00016DB8 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016DBE 4EB9 0000 B2E4             		jsr	AnimateSprite
00016DC4 6000 9568                  		bra.w	MarkObjGone
00016DC8                            ; ===========================================================================
00016DC8                            
00016DC8                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016DC8 5368 0030                  		subq.w	#1,$30(a0)
00016DCC 6A00                       		bpl.s	loc_160AA
00016DCE 317C 007F 0030             		move.w	#127,$30(a0)
00016DD4 4A28 001C                  		tst.b	$1C(a0)
00016DD8 6700                       		beq.s	loc_160A4
00016DDA 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016DE0                            
00016DE0                            loc_160A4:
00016DE0 0868 0000 001C             		bchg	#0,$1C(a0)
00016DE6                            
00016DE6                            loc_160AA:
00016DE6 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016DEC 4EB9 0000 B2E4             		jsr	AnimateSprite
00016DF2 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016DF8 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016DFA 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016E00 6600                       		bne.s	loc_160D6
00016E02 7200                       		moveq	#0,d1
00016E04 1228 0019                  		move.b	$19(a0),d1
00016E08 4EB9 0000 7EB2             		jsr	(PlatformObject).l
00016E0E 6000 951E                  		bra.w	MarkObjGone
00016E12                            ; ===========================================================================
00016E12                            
00016E12                            loc_160D6:
00016E12 7200                       		moveq	#0,d1
00016E14 1228 0019                  		move.b	$19(a0),d1
00016E18 4EB9 0000 8026             		jsr	(ExitPlatform).l
00016E1E 3428 0008                  		move.w	8(a0),d2
00016E22 4EB9 0000 8590             		jsr	(MvSonicOnPtfm2).l
00016E28 6000 9504                  		bra.w	MarkObjGone
00016E2C                            ; ===========================================================================
00016E2C                            
00016E2C                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016E2C 0828 0003 0022             		btst	#3,$22(a0)
00016E32 6700                       		beq.s	Obj6C_Display
00016E34 43F8 D000                  		lea	($FFFFD000).w,a1
00016E38 08A9 0003 0022             		bclr	#3,$22(a1)
00016E3E 08A8 0003 0022             		bclr	#3,$22(a0)
00016E44 117C 0002 0024             		move.b	#2,$24(a0)
00016E4A 4228 0025                  		clr.b	$25(a0)
00016E4E                            
00016E4E                            Obj6C_Display:
00016E4E 6000 94DE                  		bra.w	MarkObjGone
00016E52                            ; ===========================================================================
00016E52                            Ani_obj6C:
00016E52                            	include "_anim\obj6C.asm"
00016E52                            ; ---------------------------------------------------------------------------
00016E52                            ; Animation script - vanishing platforms (SBZ)
00016E52                            ; ---------------------------------------------------------------------------
00016E52 0000                       		dc.w byte_1611A-Ani_obj6C
00016E54 0000                       		dc.w byte_16122-Ani_obj6C
00016E56 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016E5E 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016E66                            		even
00016E66                            		even
00016E66                            
00016E66                            ; ---------------------------------------------------------------------------
00016E66                            ; Sprite mappings - vanishing platforms	(SBZ)
00016E66                            ; ---------------------------------------------------------------------------
00016E66                            Map_obj6C:
00016E66                            	include "_maps\obj6C.asm"
00016E66                            ; ---------------------------------------------------------------------------
00016E66                            ; Sprite mappings - vanishing platforms	(SBZ)
00016E66                            ; ---------------------------------------------------------------------------
00016E66 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016E6A 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016E6E 01                         byte_16132:	dc.b 1
00016E6F F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016E74 01                         byte_16138:	dc.b 1
00016E75 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016E7A 01                         byte_1613E:	dc.b 1
00016E7B F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016E80 00                         byte_16144:	dc.b 0
00016E82 00                         		even
00016E82 00                         		even
00016E82                            
00016E82                            ; ===========================================================================
00016E82                            ; ---------------------------------------------------------------------------
00016E82                            ; Object 6E - electrocution orbs (SBZ)
00016E82                            ; ---------------------------------------------------------------------------
00016E82                            
00016E82                            Obj6E:					; XREF: Obj_Index
00016E82 7000                       		moveq	#0,d0
00016E84 1028 0024                  		move.b	$24(a0),d0
00016E88 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016E8C 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016E90                            ; ===========================================================================
00016E90 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016E92 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016E94                            ; ===========================================================================
00016E94                            
00016E94                            Obj6E_Main:				; XREF: Obj6E_Index
00016E94 5428 0024                  		addq.b	#2,$24(a0)
00016E98 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016EA0 317C 047E 0002             		move.w	#$47E,2(a0)
00016EA6 0028 0004 0001             		ori.b	#4,1(a0)
00016EAC 117C 0028 0019             		move.b	#$28,$19(a0)
00016EB2 7000                       		moveq	#0,d0
00016EB4 1028 0028                  		move.b	$28(a0),d0	; read object type
00016EB8 E948                       		lsl.w	#4,d0		; multiply by $10
00016EBA 5340                       		subq.w	#1,d0
00016EBC 3140 0034                  		move.w	d0,$34(a0)
00016EC0                            
00016EC0                            Obj6E_Shock:				; XREF: Obj6E_Index
00016EC0 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016EC4 C068 0034                  		and.w	$34(a0),d0
00016EC8 6600                       		bne.s	Obj6E_Animate
00016ECA 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016ED0 4A28 0001                  		tst.b	1(a0)
00016ED4 6A00                       		bpl.s	Obj6E_Animate
00016ED6 303C 00B1                  		move.w	#$B1,d0
00016EDA 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play electricity sound
00016EE0                            
00016EE0                            Obj6E_Animate:
00016EE0 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016EE6 4EB9 0000 B2E4             		jsr	AnimateSprite
00016EEC 117C 0000 0020             		move.b	#0,$20(a0)
00016EF2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016EF8 6600                       		bne.s	Obj6E_Display	; if not, branch
00016EFA 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016F00                            
00016F00                            Obj6E_Display:
00016F00 6000 942C                  		bra.w	MarkObjGone
00016F04                            ; ===========================================================================
00016F04                            Ani_obj6E:
00016F04                            	include "_anim\obj6E.asm"
00016F04                            ; ---------------------------------------------------------------------------
00016F04                            ; Animation script - electrocution orbs (SBZ)
00016F04                            ; ---------------------------------------------------------------------------
00016F04 0000                       		dc.w byte_161CC-Ani_obj6E
00016F06 0000                       		dc.w byte_161D0-Ani_obj6E
00016F08 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016F0C 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016F1C                            		even
00016F1C                            		even
00016F1C                            
00016F1C                            ; ---------------------------------------------------------------------------
00016F1C                            ; Sprite mappings - electrocution orbs (SBZ)
00016F1C                            ; ---------------------------------------------------------------------------
00016F1C                            Map_obj6E:
00016F1C                            	include "_maps\obj6E.asm"
00016F1C                            Map_26ed:
00016F1C 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016F1E 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016F20 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016F22 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016F24 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016F26 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016F28 01                         Map_26ed_C: 	dc.b $1
00016F29 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016F2E 02                         Map_26ed_12: 	dc.b $2
00016F2F F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016F34 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016F39 06                         Map_26ed_1D: 	dc.b $6
00016F3A F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016F3F 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016F44 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016F49 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016F4E F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016F53 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016F58 08                         Map_26ed_3C: 	dc.b $8
00016F59 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016F5E 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016F63 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016F68 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016F6D F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016F72 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016F77 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016F7C F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016F81 06                         Map_26ed_65: 	dc.b $6
00016F82 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016F87 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016F8C F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016F91 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016F96 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016F9B F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016FA0 04                         Map_26ed_84: 	dc.b $4
00016FA1 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016FA6 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016FAB F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016FB0 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016FB6 00                         	even
00016FB6 00                         	even
00016FB6                            
00016FB6                            ; ===========================================================================
00016FB6                            ; ---------------------------------------------------------------------------
00016FB6                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016FB6                            ; ---------------------------------------------------------------------------
00016FB6                            
00016FB6                            Obj6F:					; XREF: Obj_Index
00016FB6 7000                       		moveq	#0,d0
00016FB8 1028 0024                  		move.b	$24(a0),d0
00016FBC 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016FC0 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016FC4 3028 0030                  		move.w	$30(a0),d0
00016FC8 0240 FF80                  		andi.w	#$FF80,d0
00016FCC 3238 F700                  		move.w	($FFFFF700).w,d1
00016FD0 0441 0080                  		subi.w	#$80,d1
00016FD4 0241 FF80                  		andi.w	#$FF80,d1
00016FD8 9041                       		sub.w	d1,d0
00016FDA 0C40 0280                  		cmpi.w	#$280,d0
00016FDE 6200                       		bhi.s	loc_1629A
00016FE0                            
00016FE0                            Obj6F_Display:
00016FE0 4EF9 0000 E28C             		jmp	DisplaySprite
00016FE6                            ; ===========================================================================
00016FE6                            
00016FE6                            loc_1629A:
00016FE6 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016FEC 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016FEE 0C40 FF80                  		cmpi.w	#-$80,d0
00016FF2 64EC                       		bcc.s	Obj6F_Display
00016FF4                            
00016FF4                            Obj6F_Act1or2:
00016FF4 1028 002F                  		move.b	$2F(a0),d0
00016FF8 6A00                       		bpl.s	Obj6F_Delete
00016FFA 0240 007F                  		andi.w	#$7F,d0
00016FFE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017002 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00017008                            
00017008                            Obj6F_Delete:
00017008 4EF9 0000 E2C8             		jmp	DeleteObject
0001700E                            ; ===========================================================================
0001700E 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00017010 0000                       		dc.w loc_163D8-Obj6F_Index
00017012                            ; ===========================================================================
00017012                            
00017012                            Obj6F_Main:				; XREF: Obj6F_Index
00017012 1028 0028                  		move.b	$28(a0),d0
00017016 6B00 0000                  		bmi.w	loc_16380
0001701A 5428 0024                  		addq.b	#2,$24(a0)
0001701E 217C 0001 6676 0004        		move.l	#Map_obj69a,4(a0)
00017026 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001702C 117C 0010 0019             		move.b	#$10,$19(a0)
00017032 0028 0004 0001             		ori.b	#4,1(a0)
00017038 117C 0004 0018             		move.b	#4,$18(a0)
0001703E 7000                       		moveq	#0,d0
00017040 1028 0028                  		move.b	$28(a0),d0
00017044 3200                       		move.w	d0,d1
00017046 E648                       		lsr.w	#3,d0
00017048 0240 001E                  		andi.w	#$1E,d0
0001704C 45FA 0000                  		lea	off_164A6(pc),a2
00017050 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017054 315A 0038                  		move.w	(a2)+,$38(a0)
00017058 315A 0030                  		move.w	(a2)+,$30(a0)
0001705C 214A 003C                  		move.l	a2,$3C(a0)
00017060 0241 000F                  		andi.w	#$F,d1
00017064 E549                       		lsl.w	#2,d1
00017066 1141 0038                  		move.b	d1,$38(a0)
0001706A 117C 0004 003A             		move.b	#4,$3A(a0)
00017070 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00017074 6700                       		beq.s	loc_16356
00017076 117C 0001 003B             		move.b	#1,$3B(a0)
0001707C 4428 003A                  		neg.b	$3A(a0)
00017080 7200                       		moveq	#0,d1
00017082 1228 0038                  		move.b	$38(a0),d1
00017086 D228 003A                  		add.b	$3A(a0),d1
0001708A B228 0039                  		cmp.b	$39(a0),d1
0001708E 6500                       		bcs.s	loc_16352
00017090 1001                       		move.b	d1,d0
00017092 7200                       		moveq	#0,d1
00017094 4A00                       		tst.b	d0
00017096 6A00                       		bpl.s	loc_16352
00017098 1228 0039                  		move.b	$39(a0),d1
0001709C 5901                       		subq.b	#4,d1
0001709E                            
0001709E                            loc_16352:
0001709E 1141 0038                  		move.b	d1,$38(a0)
000170A2                            
000170A2                            loc_16356:
000170A2 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000170A8 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000170AE 4A41                       		tst.w	d1
000170B0 6600                       		bne.s	loc_1636C
000170B2 117C 0001 001C             		move.b	#1,$1C(a0)
000170B8                            
000170B8                            loc_1636C:
000170B8 0C41 0008                  		cmpi.w	#8,d1
000170BC 6600                       		bne.s	loc_16378
000170BE 117C 0000 001C             		move.b	#0,$1C(a0)
000170C4                            
000170C4                            loc_16378:
000170C4 6100 C0D2                  		bsr.w	Obj63_ChangeDir
000170C8 6000 0000                  		bra.w	loc_163D8
000170CC                            ; ===========================================================================
000170CC                            
000170CC                            loc_16380:				; XREF: Obj6F_Main
000170CC 1140 002F                  		move.b	d0,$2F(a0)
000170D0 0240 007F                  		andi.w	#$7F,d0
000170D4 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000170D8 08F2 0000 0000             		bset	#0,(a2,d0.w)
000170DE 6700                       		beq.s	loc_1639A
000170E0 4EF9 0000 E2C8             		jmp	DeleteObject
000170E6                            ; ===========================================================================
000170E6                            
000170E6                            loc_1639A:
000170E6 D040                       		add.w	d0,d0
000170E8 0240 001E                  		andi.w	#$1E,d0
000170EC 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
000170F2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000170F6 321A                       		move.w	(a2)+,d1
000170F8 2248                       		movea.l	a0,a1
000170FA 6000                       		bra.s	Obj6F_LoadPform
000170FC                            ; ===========================================================================
000170FC                            
000170FC                            Obj6F_Loop:
000170FC 4EB9 0000 E712             		jsr	SingleObjLoad
00017102 6600                       		bne.s	loc_163D0
00017104                            
00017104                            Obj6F_LoadPform:			; XREF: loc_1639A
00017104 12BC 006F                  		move.b	#$6F,0(a1)
00017108 335A 0008                  		move.w	(a2)+,8(a1)
0001710C 335A 000C                  		move.w	(a2)+,$C(a1)
00017110 301A                       		move.w	(a2)+,d0
00017112 1340 0028                  		move.b	d0,$28(a1)
00017116                            
00017116                            loc_163D0:
00017116 51C9 FFE4                  		dbf	d1,Obj6F_Loop
0001711A                            
0001711A 588F                       		addq.l	#4,sp
0001711C 4E75                       		rts	
0001711E                            ; ===========================================================================
0001711E                            
0001711E                            loc_163D8:				; XREF: Obj6F_Index
0001711E 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00017124 4EB9 0000 B2E4             		jsr	AnimateSprite
0001712A 4A28 001A                  		tst.b	$1A(a0)
0001712E 6600                       		bne.s	loc_16404
00017130 3F28 0008                  		move.w	8(a0),-(sp)
00017134 6100 0000                  		bsr.w	loc_16424
00017138 323C 001B                  		move.w	#$1B,d1
0001713C 343C 0007                  		move.w	#7,d2
00017140 3602                       		move.w	d2,d3
00017142 5243                       		addq.w	#1,d3
00017144 381F                       		move.w	(sp)+,d4
00017146 6000 950E                  		bra.w	SolidObject
0001714A                            ; ===========================================================================
0001714A                            
0001714A                            loc_16404:
0001714A 0828 0003 0022             		btst	#3,$22(a0)
00017150 6700                       		beq.s	loc_16420
00017152 43F8 D000                  		lea	($FFFFD000).w,a1
00017156 08A9 0003 0022             		bclr	#3,$22(a1)
0001715C 08A8 0003 0022             		bclr	#3,$22(a0)
00017162 4228 0025                  		clr.b	$25(a0)
00017166                            
00017166                            loc_16420:
00017166 6000 0002                  		bra.w	*+4
0001716A                            
0001716A                            loc_16424:
0001716A 3028 0008                  		move.w	8(a0),d0
0001716E B068 0034                  		cmp.w	$34(a0),d0
00017172 6600                       		bne.s	loc_16484
00017174 3028 000C                  		move.w	$C(a0),d0
00017178 B068 0036                  		cmp.w	$36(a0),d0
0001717C 6600                       		bne.s	loc_16484
0001717E 7200                       		moveq	#0,d1
00017180 1228 0038                  		move.b	$38(a0),d1
00017184 D228 003A                  		add.b	$3A(a0),d1
00017188 B228 0039                  		cmp.b	$39(a0),d1
0001718C 6500                       		bcs.s	loc_16456
0001718E 1001                       		move.b	d1,d0
00017190 7200                       		moveq	#0,d1
00017192 4A00                       		tst.b	d0
00017194 6A00                       		bpl.s	loc_16456
00017196 1228 0039                  		move.b	$39(a0),d1
0001719A 5901                       		subq.b	#4,d1
0001719C                            
0001719C                            loc_16456:
0001719C 1141 0038                  		move.b	d1,$38(a0)
000171A0 2268 003C                  		movea.l	$3C(a0),a1
000171A4 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000171AA 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000171B0 4A41                       		tst.w	d1
000171B2 6600                       		bne.s	loc_16474
000171B4 117C 0001 001C             		move.b	#1,$1C(a0)
000171BA                            
000171BA                            loc_16474:
000171BA 0C41 0008                  		cmpi.w	#8,d1
000171BE 6600                       		bne.s	loc_16480
000171C0 117C 0000 001C             		move.b	#0,$1C(a0)
000171C6                            
000171C6                            loc_16480:
000171C6 6100 BFD0                  		bsr.w	Obj63_ChangeDir
000171CA                            
000171CA                            loc_16484:
000171CA 4EF9 0000 E252             		jmp	SpeedToPos
000171D0                            ; ===========================================================================
000171D0                            Ani_obj6F:
000171D0                            	include "_anim\obj6F.asm"
000171D0                            ; ---------------------------------------------------------------------------
000171D0                            ; Animation script - platform on conveyor belt (SBZ)
000171D0                            ; ---------------------------------------------------------------------------
000171D0 0000                       		dc.w byte_1648E-Ani_obj6F
000171D2 0000                       		dc.w byte_164A2-Ani_obj6F
000171D4 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000171E1 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000171E8 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000171EC 00                         		even
000171EC 00                         		even
000171EC                            
000171EC 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000171F2 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000171F8 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001720C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00017220 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00017234 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017248 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001725C 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017270                            ; ===========================================================================
00017270                            ; ---------------------------------------------------------------------------
00017270                            ; Object 70 - large girder block (SBZ)
00017270                            ; ---------------------------------------------------------------------------
00017270                            
00017270                            Obj70:					; XREF: Obj_Index
00017270 7000                       		moveq	#0,d0
00017272 1028 0024                  		move.b	$24(a0),d0
00017276 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001727A 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001727E                            ; ===========================================================================
0001727E 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017280 0000                       		dc.w Obj70_Action-Obj70_Index
00017282                            ; ===========================================================================
00017282                            
00017282                            Obj70_Main:				; XREF: Obj70_Index
00017282 5428 0024                  		addq.b	#2,$24(a0)
00017286 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
0001728E 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017294 0028 0004 0001             		ori.b	#4,1(a0)
0001729A 117C 0004 0018             		move.b	#4,$18(a0)
000172A0 117C 0060 0019             		move.b	#$60,$19(a0)
000172A6 117C 0018 0016             		move.b	#$18,$16(a0)
000172AC 3168 0008 0032             		move.w	8(a0),$32(a0)
000172B2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000172B8 6100 0000                  		bsr.w	Obj70_Move2
000172BC                            
000172BC                            Obj70_Action:				; XREF: Obj70_Index
000172BC 3F28 0008                  		move.w	8(a0),-(sp)
000172C0 4A68 003A                  		tst.w	$3A(a0)
000172C4 6700                       		beq.s	Obj70_Move
000172C6 5368 003A                  		subq.w	#1,$3A(a0)
000172CA 6600                       		bne.s	Obj70_Solid
000172CC                            
000172CC                            Obj70_Move:
000172CC 4EB9 0000 E252             		jsr	SpeedToPos
000172D2 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000172D6 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000172D8 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000172DC                            
000172DC                            Obj70_Solid:
000172DC 381F                       		move.w	(sp)+,d4
000172DE 4A28 0001                  		tst.b	1(a0)
000172E2 6A00                       		bpl.s	Obj70_ChkDel
000172E4 7200                       		moveq	#0,d1
000172E6 1228 0019                  		move.b	$19(a0),d1
000172EA 0641 000B                  		addi.w	#$B,d1
000172EE 7400                       		moveq	#0,d2
000172F0 1428 0016                  		move.b	$16(a0),d2
000172F4 3602                       		move.w	d2,d3
000172F6 5243                       		addq.w	#1,d3
000172F8 6100 935C                  		bsr.w	SolidObject
000172FC                            
000172FC                            Obj70_ChkDel:
000172FC 3028 0032                  		move.w	$32(a0),d0
00017300 0240 FF80                  		andi.w	#$FF80,d0
00017304 3238 F700                  		move.w	($FFFFF700).w,d1
00017308 0441 0080                  		subi.w	#$80,d1
0001730C 0241 FF80                  		andi.w	#$FF80,d1
00017310 9041                       		sub.w	d1,d0
00017312 0C40 0280                  		cmpi.w	#$280,d0
00017316 6200                       		bhi.s	Obj70_Delete
00017318 4EF9 0000 E28C             		jmp	DisplaySprite
0001731E                            ; ===========================================================================
0001731E                            
0001731E                            Obj70_Delete:
0001731E 4EF9 0000 E2C8             		jmp	DeleteObject
00017324                            ; ===========================================================================
00017324                            
00017324                            Obj70_Move2:				; XREF: Obj70_Main
00017324 1028 0038                  		move.b	$38(a0),d0
00017328 0240 0018                  		andi.w	#$18,d0
0001732C 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00017332 43F1 0000                  		lea	(a1,d0.w),a1
00017336 3159 0010                  		move.w	(a1)+,$10(a0)
0001733A 3159 0012                  		move.w	(a1)+,$12(a0)
0001733E 3159 0034                  		move.w	(a1)+,$34(a0)
00017342 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017346 317C 0007 003A             		move.w	#7,$3A(a0)
0001734C 4E75                       		rts	
0001734E                            ; ===========================================================================
0001734E 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017356 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001735E FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017366 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001736E                            ; ---------------------------------------------------------------------------
0001736E                            ; Sprite mappings - large girder block (SBZ)
0001736E                            ; ---------------------------------------------------------------------------
0001736E                            Map_obj70:
0001736E                            	include "_maps\obj70.asm"
0001736E                            ; ---------------------------------------------------------------------------
0001736E                            ; Sprite mappings - large girder block (SBZ)
0001736E                            ; ---------------------------------------------------------------------------
0001736E 0000                       		dc.w byte_1662A-Map_obj70
00017370 0C                         byte_1662A:	dc.b $C
00017371 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017376 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001737B E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00017380 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00017385 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001738A 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001738F E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00017394 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00017399 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001739E 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000173A3 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000173A8 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000173AE 00                         		even
000173AE 00                         		even
000173AE                            
000173AE                            ; ===========================================================================
000173AE                            ; ---------------------------------------------------------------------------
000173AE                            ; Object 72 - teleporter (SBZ)
000173AE                            ; ---------------------------------------------------------------------------
000173AE                            
000173AE                            Obj72:					; XREF: Obj_Index
000173AE 7000                       		moveq	#0,d0
000173B0 1028 0024                  		move.b	$24(a0),d0
000173B4 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000173B8 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000173BC 3028 0008                  		move.w	8(a0),d0
000173C0 0240 FF80                  		andi.w	#$FF80,d0
000173C4 3238 F700                  		move.w	($FFFFF700).w,d1
000173C8 0441 0080                  		subi.w	#$80,d1
000173CC 0241 FF80                  		andi.w	#$FF80,d1
000173D0 9041                       		sub.w	d1,d0
000173D2 0C40 0280                  		cmpi.w	#$280,d0
000173D6 6200                       		bhi.s	Obj72_Delete
000173D8 4E75                       		rts	
000173DA                            ; ===========================================================================
000173DA                            
000173DA                            Obj72_Delete:
000173DA 4EF9 0000 E2C8             		jmp	DeleteObject
000173E0                            ; ===========================================================================
000173E0 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000173E2 0000                       		dc.w loc_166C8-Obj72_Index
000173E4 0000                       		dc.w loc_1675E-Obj72_Index
000173E6 0000                       		dc.w loc_16798-Obj72_Index
000173E8                            ; ===========================================================================
000173E8                            
000173E8                            Obj72_Main:				; XREF: Obj72_Index
000173E8 5428 0024                  		addq.b	#2,$24(a0)
000173EC 1028 0028                  		move.b	$28(a0),d0
000173F0 D040                       		add.w	d0,d0
000173F2 0240 001E                  		andi.w	#$1E,d0
000173F6 45FA 0000                  		lea	Obj72_Data(pc),a2
000173FA D4F2 0000                  		adda.w	(a2,d0.w),a2
000173FE 315A 003A                  		move.w	(a2)+,$3A(a0)
00017402 214A 003C                  		move.l	a2,$3C(a0)
00017406 315A 0036                  		move.w	(a2)+,$36(a0)
0001740A 315A 0038                  		move.w	(a2)+,$38(a0)
0001740E                            
0001740E                            loc_166C8:				; XREF: Obj72_Index
0001740E 43F8 D000                  		lea	($FFFFD000).w,a1
00017412 3029 0008                  		move.w	8(a1),d0
00017416 9068 0008                  		sub.w	8(a0),d0
0001741A 0828 0000 0022             		btst	#0,$22(a0)
00017420 6700                       		beq.s	loc_166E0
00017422 0640 000F                  		addi.w	#$F,d0
00017426                            
00017426                            loc_166E0:
00017426 0C40 0010                  		cmpi.w	#$10,d0
0001742A 6400                       		bcc.s	locret_1675C
0001742C 3229 000C                  		move.w	$C(a1),d1
00017430 9268 000C                  		sub.w	$C(a0),d1
00017434 0641 0020                  		addi.w	#$20,d1
00017438 0C41 0040                  		cmpi.w	#$40,d1
0001743C 6400                       		bcc.s	locret_1675C
0001743E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017442 6600                       		bne.s	locret_1675C
00017444 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001744A 6600                       		bne.s	loc_1670E
0001744C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00017452 6500                       		bcs.s	locret_1675C
00017454                            
00017454                            loc_1670E:
00017454 5428 0024                  		addq.b	#2,$24(a0)
00017458 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001745E 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00017464 337C 0800 0014             		move.w	#$800,$14(a1)
0001746A 337C 0000 0010             		move.w	#0,$10(a1)
00017470 337C 0000 0012             		move.w	#0,$12(a1)
00017476 08A8 0005 0022             		bclr	#5,$22(a0)
0001747C 08A9 0005 0022             		bclr	#5,$22(a1)
00017482 08E9 0001 0022             		bset	#1,$22(a1)
00017488 3368 0008 0008             		move.w	8(a0),8(a1)
0001748E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017494 4228 0032                  		clr.b	$32(a0)
00017498 303C 00BE                  		move.w	#$BE,d0
0001749C 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000174A2                            
000174A2                            locret_1675C:
000174A2 4E75                       		rts	
000174A4                            ; ===========================================================================
000174A4                            
000174A4                            loc_1675E:				; XREF: Obj72_Index
000174A4 43F8 D000                  		lea	($FFFFD000).w,a1
000174A8 1028 0032                  		move.b	$32(a0),d0
000174AC 5428 0032                  		addq.b	#2,$32(a0)
000174B0 4EB9 0000 2D6E             		jsr	(CalcSine).l
000174B6 EA40                       		asr.w	#5,d0
000174B8 3428 000C                  		move.w	$C(a0),d2
000174BC 9440                       		sub.w	d0,d2
000174BE 3342 000C                  		move.w	d2,$C(a1)
000174C2 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000174C8 6600                       		bne.s	locret_16796
000174CA 6100 0000                  		bsr.w	sub_1681C
000174CE 5428 0024                  		addq.b	#2,$24(a0)
000174D2 303C 00BC                  		move.w	#$BC,d0
000174D6 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play teleport sound
000174DC                            
000174DC                            locret_16796:
000174DC 4E75                       		rts	
000174DE                            ; ===========================================================================
000174DE                            
000174DE                            loc_16798:				; XREF: Obj72_Index
000174DE 588F                       		addq.l	#4,sp
000174E0 43F8 D000                  		lea	($FFFFD000).w,a1
000174E4 5328 002E                  		subq.b	#1,$2E(a0)
000174E8 6A00                       		bpl.s	loc_167DA
000174EA 3368 0036 0008             		move.w	$36(a0),8(a1)
000174F0 3368 0038 000C             		move.w	$38(a0),$C(a1)
000174F6 7200                       		moveq	#0,d1
000174F8 1228 003A                  		move.b	$3A(a0),d1
000174FC 5801                       		addq.b	#4,d1
000174FE B228 003B                  		cmp.b	$3B(a0),d1
00017502 6500                       		bcs.s	loc_167C2
00017504 7200                       		moveq	#0,d1
00017506 6000                       		bra.s	loc_16800
00017508                            ; ===========================================================================
00017508                            
00017508                            loc_167C2:
00017508 1141 003A                  		move.b	d1,$3A(a0)
0001750C 2468 003C                  		movea.l	$3C(a0),a2
00017510 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017516 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001751C 6000 0000                  		bra.w	sub_1681C
00017520                            ; ===========================================================================
00017520                            
00017520                            loc_167DA:
00017520 2429 0008                  		move.l	8(a1),d2
00017524 2629 000C                  		move.l	$C(a1),d3
00017528 3029 0010                  		move.w	$10(a1),d0
0001752C 48C0                       		ext.l	d0
0001752E E180                       		asl.l	#8,d0
00017530 D480                       		add.l	d0,d2
00017532 3029 0012                  		move.w	$12(a1),d0
00017536 48C0                       		ext.l	d0
00017538 E180                       		asl.l	#8,d0
0001753A D680                       		add.l	d0,d3
0001753C 2342 0008                  		move.l	d2,8(a1)
00017540 2343 000C                  		move.l	d3,$C(a1)
00017544 4E75                       		rts	
00017546                            ; ===========================================================================
00017546                            
00017546                            loc_16800:
00017546 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
0001754C 4228 0024                  		clr.b	$24(a0)
00017550 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017554 337C 0000 0010             		move.w	#0,$10(a1)
0001755A 337C 0200 0012             		move.w	#$200,$12(a1)
00017560 4E75                       		rts	
00017562                            
00017562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017562                            
00017562                            
00017562                            sub_1681C:
00017562 7000                       		moveq	#0,d0
00017564 343C 1000                  		move.w	#$1000,d2
00017568 3028 0036                  		move.w	$36(a0),d0
0001756C 9069 0008                  		sub.w	8(a1),d0
00017570 6C00                       		bge.s	loc_16830
00017572 4440                       		neg.w	d0
00017574 4442                       		neg.w	d2
00017576                            
00017576                            loc_16830:
00017576 7200                       		moveq	#0,d1
00017578 363C 1000                  		move.w	#$1000,d3
0001757C 3228 0038                  		move.w	$38(a0),d1
00017580 9269 000C                  		sub.w	$C(a1),d1
00017584 6C00                       		bge.s	loc_16844
00017586 4441                       		neg.w	d1
00017588 4443                       		neg.w	d3
0001758A                            
0001758A                            loc_16844:
0001758A B240                       		cmp.w	d0,d1
0001758C 6500                       		bcs.s	loc_1687A
0001758E 7200                       		moveq	#0,d1
00017590 3228 0038                  		move.w	$38(a0),d1
00017594 9269 000C                  		sub.w	$C(a1),d1
00017598 4841                       		swap	d1
0001759A 83C3                       		divs.w	d3,d1
0001759C 7000                       		moveq	#0,d0
0001759E 3028 0036                  		move.w	$36(a0),d0
000175A2 9069 0008                  		sub.w	8(a1),d0
000175A6 6700                       		beq.s	loc_16866
000175A8 4840                       		swap	d0
000175AA 81C1                       		divs.w	d1,d0
000175AC                            
000175AC                            loc_16866:
000175AC 3340 0010                  		move.w	d0,$10(a1)
000175B0 3343 0012                  		move.w	d3,$12(a1)
000175B4 4A41                       		tst.w	d1
000175B6 6A00                       		bpl.s	loc_16874
000175B8 4441                       		neg.w	d1
000175BA                            
000175BA                            loc_16874:
000175BA 3141 002E                  		move.w	d1,$2E(a0)
000175BE 4E75                       		rts	
000175C0                            ; ===========================================================================
000175C0                            
000175C0                            loc_1687A:
000175C0 7000                       		moveq	#0,d0
000175C2 3028 0036                  		move.w	$36(a0),d0
000175C6 9069 0008                  		sub.w	8(a1),d0
000175CA 4840                       		swap	d0
000175CC 81C2                       		divs.w	d2,d0
000175CE 7200                       		moveq	#0,d1
000175D0 3228 0038                  		move.w	$38(a0),d1
000175D4 9269 000C                  		sub.w	$C(a1),d1
000175D8 6700                       		beq.s	loc_16898
000175DA 4841                       		swap	d1
000175DC 83C0                       		divs.w	d0,d1
000175DE                            
000175DE                            loc_16898:
000175DE 3341 0012                  		move.w	d1,$12(a1)
000175E2 3342 0010                  		move.w	d2,$10(a1)
000175E6 4A40                       		tst.w	d0
000175E8 6A00                       		bpl.s	loc_168A6
000175EA 4440                       		neg.w	d0
000175EC                            
000175EC                            loc_168A6:
000175EC 3140 002E                  		move.w	d0,$2E(a0)
000175F0 4E75                       		rts	
000175F2                            ; End of function sub_1681C
000175F2                            
000175F2                            ; ===========================================================================
000175F2 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000175F8 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000175FE 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017602 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017608 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001760E 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017614 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001761A 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017620 0884 0298 0894             		dc.w $884, $298, $894
00017626 0270 0894 0190             		dc.w $270, $894, $190
0001762C 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00017632 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017638 1184 0498 1158             		dc.w $1184, $498, $1158
0001763E 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017644 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001764A 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017650 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017656 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
0001765C 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017662 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017668 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001766E FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017674 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0001767A                            ; ===========================================================================
0001767A                            ; ---------------------------------------------------------------------------
0001767A                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001767A                            ; ---------------------------------------------------------------------------
0001767A                            
0001767A                            Obj78:					; XREF: Obj_Index
0001767A 7000                       		moveq	#0,d0
0001767C 1028 0024                  		move.b	$24(a0),d0
00017680 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00017684 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017688                            ; ===========================================================================
00017688 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001768A 0000                       		dc.w Obj78_Action-Obj78_Index
0001768C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001768E 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017690 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017692 0000                       		dc.w Obj78_Delete-Obj78_Index
00017694 0000                       		dc.w loc_16CC0-Obj78_Index
00017696                            ; ===========================================================================
00017696                            
00017696                            locret_16950:
00017696 4E75                       		rts	
00017698                            ; ===========================================================================
00017698                            
00017698                            Obj78_Main:				; XREF: Obj78_Index
00017698 117C 0007 0016             		move.b	#7,$16(a0)
0001769E 117C 0008 0017             		move.b	#8,$17(a0)
000176A4 4EB9 0000 E1F0             		jsr	ObjectFall
000176AA 4EBA E4AA                  		jsr	ObjHitFloor
000176AE 4A41                       		tst.w	d1
000176B0 6AE4                       		bpl.s	locret_16950
000176B2 D368 000C                  		add.w	d1,$C(a0)
000176B6 4268 0012                  		clr.w	$12(a0)
000176BA 5428 0024                  		addq.b	#2,$24(a0)
000176BE 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000176C6 317C 22B0 0002             		move.w	#$22B0,2(a0)
000176CC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000176D2 6700                       		beq.s	loc_16996
000176D4 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000176DA                            
000176DA                            loc_16996:
000176DA 0228 0003 0001             		andi.b	#3,1(a0)
000176E0 0028 0004 0001             		ori.b	#4,1(a0)
000176E6 1168 0001 0022             		move.b	1(a0),$22(a0)
000176EC 117C 0004 0018             		move.b	#4,$18(a0)
000176F2 117C 0008 0019             		move.b	#8,$19(a0)
000176F8 117C 000B 0020             		move.b	#$B,$20(a0)
000176FE 3428 0008                  		move.w	8(a0),d2
00017702 7A0C                       		moveq	#$C,d5
00017704 0828 0000 0022             		btst	#0,$22(a0)
0001770A 6700                       		beq.s	loc_169CA
0001770C 4445                       		neg.w	d5
0001770E                            
0001770E                            loc_169CA:
0001770E 1C3C 0004                  		move.b	#4,d6
00017712 7600                       		moveq	#0,d3
00017714 7804                       		moveq	#4,d4
00017716 2448                       		movea.l	a0,a2
00017718 7202                       		moveq	#2,d1
0001771A                            
0001771A                            Obj78_LoadBody:
0001771A 4EB9 0000 E728             		jsr	SingleObjLoad2
00017720 6600                       		bne.s	Obj78_QuitLoad
00017722 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017726 1346 0024                  		move.b	d6,$24(a1)
0001772A 5406                       		addq.b	#2,d6
0001772C 2368 0004 0004             		move.l	4(a0),4(a1)
00017732 3368 0002 0002             		move.w	2(a0),2(a1)
00017738 137C 0005 0018             		move.b	#5,$18(a1)
0001773E 137C 0008 0019             		move.b	#8,$19(a1)
00017744 137C 00CB 0020             		move.b	#$CB,$20(a1)
0001774A D445                       		add.w	d5,d2
0001774C 3342 0008                  		move.w	d2,8(a1)
00017750 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017756 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001775C 1368 0022 0001             		move.b	$22(a0),1(a1)
00017762 137C 0008 001A             		move.b	#8,$1A(a1)
00017768 234A 003C                  		move.l	a2,$3C(a1)
0001776C 1344 003C                  		move.b	d4,$3C(a1)
00017770 5804                       		addq.b	#4,d4
00017772 2449                       		movea.l	a1,a2
00017774                            
00017774                            Obj78_QuitLoad:
00017774 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017778                            
00017778 117C 0007 002A             		move.b	#7,$2A(a0)
0001777E 4228 003C                  		clr.b	$3C(a0)
00017782                            
00017782                            Obj78_Action:				; XREF: Obj78_Index
00017782 4A28 0022                  		tst.b	$22(a0)
00017786 6B00 0000                  		bmi.w	loc_16C96
0001778A 7000                       		moveq	#0,d0
0001778C 1028 0025                  		move.b	$25(a0),d0
00017790 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017794 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017798 1228 002B                  		move.b	$2B(a0),d1
0001779C 6A00                       		bpl.s	Obj78_Display
0001779E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000177A4 1028 0026                  		move.b	$26(a0),d0
000177A8 0240 007F                  		andi.w	#$7F,d0
000177AC 5828 0026                  		addq.b	#4,$26(a0)
000177B0 1031 0000                  		move.b	(a1,d0.w),d0
000177B4 6A00                       		bpl.s	Obj78_AniHead
000177B6 08A8 0007 002B             		bclr	#7,$2B(a0)
000177BC 6000                       		bra.s	Obj78_Display
000177BE                            ; ===========================================================================
000177BE                            
000177BE                            Obj78_AniHead:
000177BE 0201 0010                  		andi.b	#$10,d1
000177C2 D001                       		add.b	d1,d0
000177C4 1140 001A                  		move.b	d0,$1A(a0)
000177C8                            
000177C8                            Obj78_Display:
000177C8 3028 0008                  		move.w	8(a0),d0
000177CC 0240 FF80                  		andi.w	#$FF80,d0
000177D0 3238 F700                  		move.w	($FFFFF700).w,d1
000177D4 0441 0080                  		subi.w	#$80,d1
000177D8 0241 FF80                  		andi.w	#$FF80,d1
000177DC 9041                       		sub.w	d1,d0
000177DE 0C40 0280                  		cmpi.w	#$280,d0
000177E2 6200 0000                  		bhi.w	Obj78_ChkGone
000177E6 4EF9 0000 E28C             		jmp	DisplaySprite
000177EC                            ; ===========================================================================
000177EC                            
000177EC                            Obj78_ChkGone:
000177EC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177F0 7000                       		moveq	#0,d0
000177F2 1028 0023                  		move.b	$23(a0),d0
000177F6 6700                       		beq.s	loc_16ABC
000177F8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000177FE                            
000177FE                            loc_16ABC:
000177FE 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017804 4E75                       		rts	
00017806                            ; ===========================================================================
00017806                            
00017806                            Obj78_Delete:				; XREF: Obj78_Index
00017806 4EF9 0000 E2C8             		jmp	DeleteObject
0001780C                            ; ===========================================================================
0001780C 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001780E 0000                       		dc.w loc_16B02-Obj78_Index2
00017810                            ; ===========================================================================
00017810                            
00017810                            Obj78_Move:				; XREF: Obj78_Index2
00017810 5328 002A                  		subq.b	#1,$2A(a0)
00017814 6B00                       		bmi.s	Obj78_Move2
00017816 4E75                       		rts	
00017818                            ; ===========================================================================
00017818                            
00017818                            Obj78_Move2:
00017818 5428 0025                  		addq.b	#2,$25(a0)
0001781C 117C 0010 002A             		move.b	#$10,$2A(a0)
00017822 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017828 317C 0040 0014             		move.w	#$40,$14(a0)
0001782E 0868 0004 002B             		bchg	#4,$2B(a0)
00017834 6600                       		bne.s	loc_16AFC
00017836 4268 0010                  		clr.w	$10(a0)
0001783A 4468 0014                  		neg.w	$14(a0)
0001783E                            
0001783E                            loc_16AFC:
0001783E 08E8 0007 002B             		bset	#7,$2B(a0)
00017844                            
00017844                            loc_16B02:				; XREF: Obj78_Index2
00017844 5328 002A                  		subq.b	#1,$2A(a0)
00017848 6B00                       		bmi.s	loc_16B5E
0001784A 2F28 0008                  		move.l	8(a0),-(sp)
0001784E 2428 0008                  		move.l	8(a0),d2
00017852 3028 0010                  		move.w	$10(a0),d0
00017856 0828 0000 0022             		btst	#0,$22(a0)
0001785C 6700                       		beq.s	loc_16B1E
0001785E 4440                       		neg.w	d0
00017860                            
00017860                            loc_16B1E:
00017860 48C0                       		ext.l	d0
00017862 E180                       		asl.l	#8,d0
00017864 D480                       		add.l	d0,d2
00017866 2142 0008                  		move.l	d2,8(a0)
0001786A 4EBA E2EA                  		jsr	ObjHitFloor
0001786E 241F                       		move.l	(sp)+,d2
00017870 0C41 FFF8                  		cmpi.w	#-8,d1
00017874 6D00                       		blt.s	loc_16B70
00017876 0C41 000C                  		cmpi.w	#$C,d1
0001787A 6C00                       		bge.s	loc_16B70
0001787C D368 000C                  		add.w	d1,$C(a0)
00017880 4842                       		swap	d2
00017882 B468 0008                  		cmp.w	8(a0),d2
00017886 6700                       		beq.s	locret_16B5C
00017888 7000                       		moveq	#0,d0
0001788A 1028 003C                  		move.b	$3C(a0),d0
0001788E 5228 003C                  		addq.b	#1,$3C(a0)
00017892 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017898 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001789C                            
0001789C                            locret_16B5C:
0001789C 4E75                       		rts	
0001789E                            ; ===========================================================================
0001789E                            
0001789E                            loc_16B5E:
0001789E 5528 0025                  		subq.b	#2,$25(a0)
000178A2 117C 0007 002A             		move.b	#7,$2A(a0)
000178A8 317C 0000 0010             		move.w	#0,$10(a0)
000178AE 4E75                       		rts	
000178B0                            ; ===========================================================================
000178B0                            
000178B0                            loc_16B70:
000178B0 2142 0008                  		move.l	d2,8(a0)
000178B4 0868 0000 0022             		bchg	#0,$22(a0)
000178BA 1168 0022 0001             		move.b	$22(a0),1(a0)
000178C0 7000                       		moveq	#0,d0
000178C2 1028 003C                  		move.b	$3C(a0),d0
000178C6 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000178CC 5228 003C                  		addq.b	#1,$3C(a0)
000178D0 0228 000F 003C             		andi.b	#$F,$3C(a0)
000178D6 4E75                       		rts	
000178D8                            ; ===========================================================================
000178D8                            
000178D8                            Obj78_BodySeg2:				; XREF: Obj78_Index
000178D8 2268 003C                  		movea.l	$3C(a0),a1
000178DC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000178E2 6A00                       		bpl.s	Obj78_BodySeg1
000178E4 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000178EA 1028 0026                  		move.b	$26(a0),d0
000178EE 0240 007F                  		andi.w	#$7F,d0
000178F2 5828 0026                  		addq.b	#4,$26(a0)
000178F6 4A31 0004                  		tst.b	4(a1,d0.w)
000178FA 6A00                       		bpl.s	Obj78_AniBody
000178FC 5828 0026                  		addq.b	#4,$26(a0)
00017900                            
00017900                            Obj78_AniBody:
00017900 1031 0000                  		move.b	(a1,d0.w),d0
00017904 5000                       		addq.b	#8,d0
00017906 1140 001A                  		move.b	d0,$1A(a0)
0001790A                            
0001790A                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001790A 2268 003C                  		movea.l	$3C(a0),a1
0001790E 4A28 0022                  		tst.b	$22(a0)
00017912 6B00 0000                  		bmi.w	loc_16C90
00017916 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001791C 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017922 6700 0000                  		beq.w	loc_16C64
00017926 3169 0014 0014             		move.w	$14(a1),$14(a0)
0001792C 3029 0010                  		move.w	$10(a1),d0
00017930 D069 0014                  		add.w	$14(a1),d0
00017934 3140 0010                  		move.w	d0,$10(a0)
00017938 2428 0008                  		move.l	8(a0),d2
0001793C 2602                       		move.l	d2,d3
0001793E 3028 0010                  		move.w	$10(a0),d0
00017942 0828 0000 0022             		btst	#0,$22(a0)
00017948 6700                       		beq.s	loc_16C0C
0001794A 4440                       		neg.w	d0
0001794C                            
0001794C                            loc_16C0C:
0001794C 48C0                       		ext.l	d0
0001794E E180                       		asl.l	#8,d0
00017950 D480                       		add.l	d0,d2
00017952 2142 0008                  		move.l	d2,8(a0)
00017956 4843                       		swap	d3
00017958 B668 0008                  		cmp.w	8(a0),d3
0001795C 6700                       		beq.s	loc_16C64
0001795E 7000                       		moveq	#0,d0
00017960 1028 003C                  		move.b	$3C(a0),d0
00017964 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017968 0C01 0080                  		cmpi.b	#-$80,d1
0001796C 6600                       		bne.s	loc_16C50
0001796E 4843                       		swap	d3
00017970 2143 0008                  		move.l	d3,8(a0)
00017974 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017978 0868 0000 0022             		bchg	#0,$22(a0)
0001797E 1168 0022 0001             		move.b	$22(a0),1(a0)
00017984 5228 003C                  		addq.b	#1,$3C(a0)
00017988 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001798E 6000                       		bra.s	loc_16C64
00017990                            ; ===========================================================================
00017990                            
00017990                            loc_16C50:
00017990 4881                       		ext.w	d1
00017992 D368 000C                  		add.w	d1,$C(a0)
00017996 5228 003C                  		addq.b	#1,$3C(a0)
0001799A 0228 000F 003C             		andi.b	#$F,$3C(a0)
000179A0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000179A4                            
000179A4                            loc_16C64:
000179A4 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000179AA 6700                       		beq.s	loc_16C90
000179AC 0C11 0027                  		cmpi.b	#$27,0(a1)
000179B0 6700                       		beq.s	loc_16C7C
000179B2 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000179B8 6600                       		bne.s	loc_16C82
000179BA                            
000179BA                            loc_16C7C:
000179BA 117C 000A 0024             		move.b	#$A,$24(a0)
000179C0                            
000179C0                            loc_16C82:
000179C0 4EF9 0000 E28C             		jmp	DisplaySprite
000179C6                            
000179C6                            ; ===========================================================================
000179C6 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000179CE                            ; ===========================================================================
000179CE                            
000179CE                            loc_16C90:
000179CE 08E9 0007 0022             		bset	#7,$22(a1)
000179D4                            
000179D4                            loc_16C96:
000179D4 7000                       		moveq	#0,d0
000179D6 1028 0024                  		move.b	$24(a0),d0
000179DA 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000179DE 0828 0000 0022             		btst	#0,$22(a0)
000179E4 6700                       		beq.s	loc_16CAA
000179E6 4440                       		neg.w	d0
000179E8                            
000179E8                            loc_16CAA:
000179E8 3140 0010                  		move.w	d0,$10(a0)
000179EC 317C FC00 0012             		move.w	#-$400,$12(a0)
000179F2 117C 000C 0024             		move.b	#$C,$24(a0)
000179F8 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000179FE                            
000179FE                            loc_16CC0:				; XREF: Obj78_Index
000179FE 4EB9 0000 E1F0             		jsr	ObjectFall
00017A04 4A68 0012                  		tst.w	$12(a0)
00017A08 6B00                       		bmi.s	loc_16CE0
00017A0A 4EBA E14A                  		jsr	ObjHitFloor
00017A0E 4A41                       		tst.w	d1
00017A10 6A00                       		bpl.s	loc_16CE0
00017A12 D368 000C                  		add.w	d1,$C(a0)
00017A16 317C FC00 0012             		move.w	#-$400,$12(a0)
00017A1C                            
00017A1C                            loc_16CE0:
00017A1C 4A28 0001                  		tst.b	1(a0)
00017A20 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017A24 4EF9 0000 E28C             		jmp	DisplaySprite
00017A2A                            ; ===========================================================================
00017A2A                            Ani_obj78:
00017A2A                            	include "_anim\obj78.asm"
00017A2A                            ; ---------------------------------------------------------------------------
00017A2A                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017A2A                            ; ---------------------------------------------------------------------------
00017A2A 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017A3A 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017A4A 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017A5A 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017A6A 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017A7A 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017A8A 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017A9A 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017AAA                            	even
00017AAA                            	even
00017AAA                            
00017AAA                            ; ---------------------------------------------------------------------------
00017AAA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017AAA                            ; ---------------------------------------------------------------------------
00017AAA                            Map_obj78:
00017AAA                            	include "_maps\obj78.asm"
00017AAA                            ; ---------------------------------------------------------------------------
00017AAA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017AAA                            ; ---------------------------------------------------------------------------
00017AAA 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017AAE 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017AB2 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017AB6 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017ABA 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017ABE 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017AC2 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017AC6 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017ACA 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017ACE 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017AD2 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017AD6 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017ADA 01                         byte_16D9E:	dc.b 1
00017ADB F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017AE0 01                         byte_16DA4:	dc.b 1
00017AE1 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017AE6 01                         byte_16DAA:	dc.b 1
00017AE7 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017AEC 01                         byte_16DB0:	dc.b 1
00017AED EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017AF2 01                         byte_16DB6:	dc.b 1
00017AF3 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017AF8 01                         byte_16DBC:	dc.b 1
00017AF9 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017AFE 01                         byte_16DC2:	dc.b 1
00017AFF EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017B04 01                         byte_16DC8:	dc.b 1
00017B05 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017B0A 01                         byte_16DCE:	dc.b 1
00017B0B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017B10 01                         byte_16DD4:	dc.b 1
00017B11 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017B16 01                         byte_16DDA:	dc.b 1
00017B17 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017B1C 01                         byte_16DE0:	dc.b 1
00017B1D F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017B22 01                         byte_16DE6:	dc.b 1
00017B23 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017B28 01                         byte_16DEC:	dc.b 1
00017B29 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017B2E 01                         byte_16DF2:	dc.b 1
00017B2F F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017B34 01                         byte_16DF8:	dc.b 1
00017B35 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017B3A 01                         byte_16DFE:	dc.b 1
00017B3B F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017B40 01                         byte_16E04:	dc.b 1
00017B41 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017B46 01                         byte_16E0A:	dc.b 1
00017B47 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017B4C 01                         byte_16E10:	dc.b 1
00017B4D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017B52 01                         byte_16E16:	dc.b 1
00017B53 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017B58 01                         byte_16E1C:	dc.b 1
00017B59 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017B5E 01                         byte_16E22:	dc.b 1
00017B5F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017B64 01                         byte_16E28:	dc.b 1
00017B65 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017B6A                            		even
00017B6A                            		even
00017B6A                            
00017B6A                            ; ===========================================================================
00017B6A                            ; ---------------------------------------------------------------------------
00017B6A                            ; Object 79 - lamppost
00017B6A                            ; ---------------------------------------------------------------------------
00017B6A                            
00017B6A                            Obj79:					; XREF: Obj_Index
00017B6A 7000                       		moveq	#0,d0
00017B6C 1028 0024                  		move.b	$24(a0),d0
00017B70 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017B74 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017B78 4EFA 87B4                  		jmp	MarkObjGone
00017B7C                            ; ===========================================================================
00017B7C 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017B7E 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017B80 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017B82 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017B84                            ; ===========================================================================
00017B84                            
00017B84                            Obj79_Main:				; XREF: Obj79_Index
00017B84 5428 0024                  		addq.b	#2,$24(a0)
00017B88 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017B90 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017B96 117C 0004 0001             		move.b	#4,1(a0)
00017B9C 117C 0008 0019             		move.b	#8,$19(a0)
00017BA2 117C 0005 0018             		move.b	#5,$18(a0)
00017BA8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017BAC 7000                       		moveq	#0,d0
00017BAE 1028 0023                  		move.b	$23(a0),d0
00017BB2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017BB8 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017BBE 6600                       		bne.s	Obj79_RedLamp
00017BC0 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017BC4 0201 007F                  		andi.b	#$7F,d1
00017BC8 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017BCC 0202 007F                  		andi.b	#$7F,d2
00017BD0 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017BD2 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017BD4                            
00017BD4                            Obj79_RedLamp:
00017BD4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017BDA 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017BE0 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017BE6 4E75                       		rts	
00017BE8                            ; ===========================================================================
00017BE8                            
00017BE8                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017BE8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017BEC 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017BF0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017BF4 6B00 0000                  		bmi.w	locret_16F90
00017BF8 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017BFC 0201 007F                  		andi.b	#$7F,d1
00017C00 1428 0028                  		move.b	$28(a0),d2
00017C04 0202 007F                  		andi.b	#$7F,d2
00017C08 B202                       		cmp.b	d2,d1
00017C0A 6500                       		bcs.s	Obj79_HitLamp
00017C0C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017C10 7000                       		moveq	#0,d0
00017C12 1028 0023                  		move.b	$23(a0),d0
00017C16 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017C1C 117C 0004 0024             		move.b	#4,$24(a0)
00017C22 117C 0003 001A             		move.b	#3,$1A(a0)
00017C28 6000 0000                  		bra.w	locret_16F90
00017C2C                            ; ===========================================================================
00017C2C                            
00017C2C                            Obj79_HitLamp:
00017C2C 3038 D008                  		move.w	($FFFFD008).w,d0
00017C30 9068 0008                  		sub.w	8(a0),d0
00017C34 5040                       		addq.w	#8,d0
00017C36 0C40 0010                  		cmpi.w	#$10,d0
00017C3A 6400 0000                  		bcc.w	locret_16F90
00017C3E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017C42 9068 000C                  		sub.w	$C(a0),d0
00017C46 0640 0040                  		addi.w	#$40,d0
00017C4A 0C40 0068                  		cmpi.w	#$68,d0
00017C4E 6400                       		bcc.s	locret_16F90
00017C50 303C 00A1                  		move.w	#$A1,d0
00017C54 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017C5A 5428 0024                  		addq.b	#2,$24(a0)
00017C5E 4EB9 0000 E712             		jsr	SingleObjLoad
00017C64 6600                       		bne.s	loc_16F76
00017C66 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017C6A 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017C70 3368 0008 0030             		move.w	8(a0),$30(a1)
00017C76 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017C7C 0469 0018 0032             		subi.w	#$18,$32(a1)
00017C82 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017C8A 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017C90 137C 0004 0001             		move.b	#4,1(a1)
00017C96 137C 0008 0019             		move.b	#8,$19(a1)
00017C9C 137C 0004 0018             		move.b	#4,$18(a1)
00017CA2 137C 0002 001A             		move.b	#2,$1A(a1)
00017CA8 337C 0020 0036             		move.w	#$20,$36(a1)
00017CAE                            
00017CAE                            loc_16F76:
00017CAE 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017CB4 6100 0000                  		bsr.w	Obj79_StoreInfo
00017CB8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017CBC 7000                       		moveq	#0,d0
00017CBE 1028 0023                  		move.b	$23(a0),d0
00017CC2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017CC8                            
00017CC8                            locret_16F90:
00017CC8 4E75                       		rts	
00017CCA                            ; ===========================================================================
00017CCA                            
00017CCA                            Obj79_AfterHit:				; XREF: Obj79_Index
00017CCA 4E75                       		rts	
00017CCC                            ; ===========================================================================
00017CCC                            
00017CCC                            Obj79_Twirl:				; XREF: Obj79_Index
00017CCC 5368 0036                  		subq.w	#1,$36(a0)
00017CD0 6A00                       		bpl.s	loc_16FA0
00017CD2 117C 0004 0024             		move.b	#4,$24(a0)
00017CD8                            
00017CD8                            loc_16FA0:
00017CD8 1028 0026                  		move.b	$26(a0),d0
00017CDC 0428 0010 0026             		subi.b	#$10,$26(a0)
00017CE2 0400 0040                  		subi.b	#$40,d0
00017CE6 4EB9 0000 2D6E             		jsr	(CalcSine).l
00017CEC C3FC 0C00                  		muls.w	#$C00,d1
00017CF0 4841                       		swap	d1
00017CF2 D268 0030                  		add.w	$30(a0),d1
00017CF6 3141 0008                  		move.w	d1,8(a0)
00017CFA C1FC 0C00                  		muls.w	#$C00,d0
00017CFE 4840                       		swap	d0
00017D00 D068 0032                  		add.w	$32(a0),d0
00017D04 3140 000C                  		move.w	d0,$C(a0)
00017D08 4E75                       		rts	
00017D0A                            ; ===========================================================================
00017D0A                            ; ---------------------------------------------------------------------------
00017D0A                            ; Subroutine to	store information when you hit a lamppost
00017D0A                            ; ---------------------------------------------------------------------------
00017D0A                            
00017D0A                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017D0A 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017D10 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017D16 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017D1C 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017D22 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017D28 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017D2E 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017D34 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017D3A 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017D40 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017D46 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017D4C 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017D52 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017D58 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017D5E 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017D64 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017D6A 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017D70 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017D76 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017D7C 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017D82 4E75                       		rts	
00017D84                            
00017D84                            ; ---------------------------------------------------------------------------
00017D84                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017D84                            ; ---------------------------------------------------------------------------
00017D84                            
00017D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D84                            
00017D84                            
00017D84                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017D84 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017D8A 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017D90 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017D96 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017D9C 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017DA2 4278 FE20                  		clr.w	($FFFFFE20).w
00017DA6 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017DAA 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017DB0 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017DB6 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017DBA 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017DC0 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017DC6 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017DCC 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017DD2 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017DD8 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017DDE 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017DE4 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017DEA 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017DF0 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017DF6 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017DFC 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017E02 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017E08 6600                       		bne.s	loc_170E4
00017E0A 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017E10 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017E16 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017E1C                            
00017E1C                            loc_170E4:
00017E1C 4A38 FE30                  		tst.b	($FFFFFE30).w
00017E20 6A00                       		bpl.s	locret_170F6
00017E22 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017E26 0440 00A0                  		subi.w	#$A0,d0
00017E2A 31C0 F728                  		move.w	d0,($FFFFF728).w
00017E2E                            
00017E2E                            locret_170F6:
00017E2E 4E75                       		rts	
00017E30                            ; End of function Obj79_LoadInfo
00017E30                            
00017E30                            ; ===========================================================================
00017E30                            ; ---------------------------------------------------------------------------
00017E30                            ; Sprite mappings - lamppost
00017E30                            ; ---------------------------------------------------------------------------
00017E30                            Map_obj79:
00017E30                            	include "_maps\obj79.asm"
00017E30                            ; ---------------------------------------------------------------------------
00017E30                            ; Sprite mappings - lamppost
00017E30                            ; ---------------------------------------------------------------------------
00017E30 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017E34 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017E38 06                         byte_17100:	dc.b 6
00017E39 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017E3E E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017E43 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017E48 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017E4D D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017E52 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017E57 04                         byte_1711F:	dc.b 4
00017E58 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017E5D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017E62 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017E67 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017E6C 02                         byte_17134:	dc.b 2
00017E6D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017E72 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017E77 06                         byte_1713F:	dc.b 6
00017E78 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017E7D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017E82 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017E87 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017E8C D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017E91 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017E96                            		even
00017E96                            		even
00017E96                            
00017E96                            ; ===========================================================================
00017E96                            ; ---------------------------------------------------------------------------
00017E96                            ; Object 7D - hidden points at the end of a level
00017E96                            ; ---------------------------------------------------------------------------
00017E96                            
00017E96                            Obj7D:					; XREF: Obj_Index
00017E96 7000                       		moveq	#0,d0
00017E98 1028 0024                  		move.b	$24(a0),d0
00017E9C 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017EA0 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017EA4                            ; ===========================================================================
00017EA4 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017EA6 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017EA8                            ; ===========================================================================
00017EA8                            
00017EA8                            Obj7D_Main:				; XREF: Obj7D_Index
00017EA8 7410                       		moveq	#$10,d2
00017EAA 3602                       		move.w	d2,d3
00017EAC D643                       		add.w	d3,d3
00017EAE 43F8 D000                  		lea	($FFFFD000).w,a1
00017EB2 3029 0008                  		move.w	8(a1),d0
00017EB6 9068 0008                  		sub.w	8(a0),d0
00017EBA D042                       		add.w	d2,d0
00017EBC B043                       		cmp.w	d3,d0
00017EBE 6400                       		bcc.s	Obj7D_ChkDel
00017EC0 3229 000C                  		move.w	$C(a1),d1
00017EC4 9268 000C                  		sub.w	$C(a0),d1
00017EC8 D242                       		add.w	d2,d1
00017ECA B243                       		cmp.w	d3,d1
00017ECC 6400                       		bcc.s	Obj7D_ChkDel
00017ECE 4A78 FE08                  		tst.w	($FFFFFE08).w
00017ED2 6600                       		bne.s	Obj7D_ChkDel
00017ED4 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017ED8 6600                       		bne.s	Obj7D_ChkDel
00017EDA 5428 0024                  		addq.b	#2,$24(a0)
00017EDE 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017EE6 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017EEC 0028 0004 0001             		ori.b	#4,1(a0)
00017EF2 117C 0000 0018             		move.b	#0,$18(a0)
00017EF8 117C 0010 0019             		move.b	#$10,$19(a0)
00017EFE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017F04 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017F0A 303C 00C9                  		move.w	#$C9,d0
00017F0E 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play bonus sound
00017F14 7000                       		moveq	#0,d0
00017F16 1028 0028                  		move.b	$28(a0),d0
00017F1A D040                       		add.w	d0,d0
00017F1C 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017F20 4EB9 0000 0000             		jsr	AddPoints
00017F26                            
00017F26                            Obj7D_ChkDel:
00017F26 3028 0008                  		move.w	8(a0),d0
00017F2A 0240 FF80                  		andi.w	#$FF80,d0
00017F2E 3238 F700                  		move.w	($FFFFF700).w,d1
00017F32 0441 0080                  		subi.w	#$80,d1
00017F36 0241 FF80                  		andi.w	#$FF80,d1
00017F3A 9041                       		sub.w	d1,d0
00017F3C 0C40 0280                  		cmpi.w	#$280,d0
00017F40 6200                       		bhi.s	Obj7D_Delete
00017F42 4E75                       		rts	
00017F44                            ; ===========================================================================
00017F44                            
00017F44                            Obj7D_Delete:
00017F44 4EF9 0000 E2C8             		jmp	DeleteObject
00017F4A                            ; ===========================================================================
00017F4A 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017F4C 03E8                       		dc.w 1000
00017F4E 0064                       		dc.w 100
00017F50 0001                       		dc.w 1
00017F52                            ; ===========================================================================
00017F52                            
00017F52                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017F52 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017F56 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017F58 3028 0008                  		move.w	8(a0),d0
00017F5C 0240 FF80                  		andi.w	#-$80,d0
00017F60 3238 F700                  		move.w	($FFFFF700).w,d1
00017F64 0441 0080                  		subi.w	#$80,d1
00017F68 0241 FF80                  		andi.w	#-$80,d1
00017F6C 9041                       		sub.w	d1,d0
00017F6E 0C40 0280                  		cmpi.w	#$280,d0
00017F72 6200                       		bhi.s	Obj7D_Delete2
00017F74 4EF9 0000 E28C             		jmp	DisplaySprite
00017F7A                            ; ===========================================================================
00017F7A                            
00017F7A                            Obj7D_Delete2:
00017F7A 4EF9 0000 E2C8             		jmp	DeleteObject
00017F80                            ; ===========================================================================
00017F80                            ; ---------------------------------------------------------------------------
00017F80                            ; Sprite mappings - hidden points at the end of	a level
00017F80                            ; ---------------------------------------------------------------------------
00017F80                            Map_obj7D:
00017F80                            	include "_maps\obj7D.asm"
00017F80                            ; ---------------------------------------------------------------------------
00017F80                            ; Sprite mappings - hidden points at the end of	a level
00017F80                            ; ---------------------------------------------------------------------------
00017F80 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017F84 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017F88 00                         byte_17250:	dc.b 0
00017F89 01                         byte_17251:	dc.b 1
00017F8A F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017F8F 01                         byte_17257:	dc.b 1
00017F90 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017F95 01                         byte_1725D:	dc.b 1
00017F96 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017F9C 00                         		even
00017F9C 00                         		even
00017F9C                            
00017F9C                            ; ===========================================================================
00017F9C                            ; ---------------------------------------------------------------------------
00017F9C                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017F9C                            ; ---------------------------------------------------------------------------
00017F9C                            
00017F9C                            Obj8A:					; XREF: Obj_Index
00017F9C 7000                       		moveq	#0,d0
00017F9E 1028 0024                  		move.b	$24(a0),d0
00017FA2 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017FA6 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017FAA                            ; ===========================================================================
00017FAA 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017FAC 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017FAE                            ; ===========================================================================
00017FAE                            
00017FAE                            Obj8A_Main:				; XREF: Obj8A_Index
00017FAE 5428 0024                  		addq.b	#2,$24(a0)
00017FB2 317C 0120 0008             		move.w	#$120,8(a0)
00017FB8 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017FBE 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017FC6 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017FCC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017FD0 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017FD4 117C 0000 0001             		move.b	#0,1(a0)
00017FDA 117C 0000 0018             		move.b	#0,$18(a0)
00017FE0 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017FE6 6600                       		bne.s	Obj8A_Display	; if not, branch
00017FE8 317C 00A6 0002             		move.w	#$A6,2(a0)
00017FEE 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017FF4 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017FF8 6700                       		beq.s	Obj8A_Display	; if not, branch
00017FFA 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00018000 6600                       		bne.s	Obj8A_Display	; if not, branch
00018002 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00018008 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
0001800E 4EF9 0000 E2C8             		jmp	DeleteObject
00018014                            ; ===========================================================================
00018014                            
00018014                            Obj8A_Display:				; XREF: Obj8A_Index
00018014 4EF9 0000 E28C             		jmp	DisplaySprite
0001801A                            ; ===========================================================================
0001801A                            ; ---------------------------------------------------------------------------
0001801A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001801A                            ; ---------------------------------------------------------------------------
0001801A                            Map_obj8A:
0001801A                            	include "_maps\obj8A.asm"
0001801A                            Map_ca8f:
0001801A 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
0001801C 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
0001801E 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00018020 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00018022 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00018024 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00018026 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00018028 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
0001802A 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
0001802C 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
0001802E 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00018030 08                         Map_ca8f_16: 	dc.b $8
00018031 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00018036 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
0001803B F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00018040 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00018045 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
0001804A B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
0001804F B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00018054 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00018059 10                         Map_ca8f_3F: 	dc.b $10
0001805A D805 0000 80               	dc.b $D8, $5, $0, $0, $80
0001805F D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00018064 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00018069 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
0001806E D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00018073 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00018078 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
0001807D D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00018082 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00018087 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
0001808C 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00018091 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00018096 0805 0016 08               	dc.b $8, $5, $0, $16, $8
0001809B 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
000180A0 0805 0004 30               	dc.b $8, $5, $0, $4, $30
000180A5 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
000180AA 0A                         Map_ca8f_90: 	dc.b $A
000180AB D805 0012 80               	dc.b $D8, $5, $0, $12, $80
000180B0 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
000180B5 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
000180BA D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
000180BF D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
000180C4 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
000180C9 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
000180CE 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
000180D3 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
000180D8 0805 0036 08               	dc.b $8, $5, $0, $36, $8
000180DD 18                         Map_ca8f_C3: 	dc.b $18
000180DE D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
000180E3 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
000180E8 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
000180ED D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
000180F2 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
000180F7 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
000180FC D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00018101 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00018106 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
0001810B D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00018110 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00018115 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
0001811A D801 0046 50               	dc.b $D8, $1, $0, $46, $50
0001811F D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00018124 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00018129 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
0001812E 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00018133 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00018138 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
0001813D 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00018142 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00018147 0805 0004 10               	dc.b $8, $5, $0, $4, $10
0001814C 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00018151 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00018156 14                         Map_ca8f_13C: 	dc.b $14
00018157 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
0001815C D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00018161 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00018166 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
0001816B D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00018170 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00018175 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
0001817A 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
0001817F 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00018184 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00018189 0005 0004 24               	dc.b $0, $5, $0, $4, $24
0001818E 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00018193 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00018198 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
0001819D 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
000181A2 2001 0046 10               	dc.b $20, $1, $0, $46, $10
000181A7 2005 0050 18               	dc.b $20, $5, $0, $50, $18
000181AC 2005 0022 30               	dc.b $20, $5, $0, $22, $30
000181B1 2001 0046 40               	dc.b $20, $1, $0, $46, $40
000181B6 2005 000E 48               	dc.b $20, $5, $0, $E, $48
000181BB 1A                         Map_ca8f_1A1: 	dc.b $1A
000181BC D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
000181C1 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
000181C6 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
000181CB D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
000181D0 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
000181D5 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
000181DA D805 0022 08               	dc.b $D8, $5, $0, $22, $8
000181DF D805 0026 18               	dc.b $D8, $5, $0, $26, $18
000181E4 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
000181E9 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
000181EE D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
000181F3 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
000181F8 0809 0008 88               	dc.b $8, $9, $0, $8, $88
000181FD 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00018202 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00018207 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
0001820C 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00018211 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00018216 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
0001821B 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00018220 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00018225 0805 0004 28               	dc.b $8, $5, $0, $4, $28
0001822A 0809 0008 38               	dc.b $8, $9, $0, $8, $38
0001822F 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00018234 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00018239 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
0001823E 17                         Map_ca8f_224: 	dc.b $17
0001823F D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00018244 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00018249 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
0001824E D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00018253 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00018258 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
0001825D D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00018262 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00018267 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
0001826C D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00018271 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00018276 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
0001827B 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018280 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018285 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
0001828A 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
0001828F 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00018294 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00018299 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
0001829E 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
000182A3 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
000182A8 2005 0058 04               	dc.b $20, $5, $0, $58, $4
000182AD 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
000182B2 1F                         Map_ca8f_298: 	dc.b $1F
000182B3 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
000182B8 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
000182BD D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
000182C2 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
000182C7 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
000182CC D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
000182D1 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
000182D6 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
000182DB D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
000182E0 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
000182E5 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
000182EA D805 0058 38               	dc.b $D8, $5, $0, $58, $38
000182EF D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
000182F4 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
000182F9 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
000182FE 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018303 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018308 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
0001830D 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00018312 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00018317 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
0001831C 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00018321 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00018326 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
0001832B 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00018330 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00018335 0001 0046 74               	dc.b $0, $1, $0, $46, $74
0001833A 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
0001833F 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00018344 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00018349 2005 0004 28               	dc.b $20, $5, $0, $4, $28
0001834E 0F                         Map_ca8f_334: 	dc.b $F
0001834F F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00018354 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00018359 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
0001835E F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00018363 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00018368 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
0001836D F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00018372 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00018377 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
0001837C F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00018381 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00018386 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
0001838B F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00018390 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00018395 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
0001839A 08                         Map_ca8f_380: 	dc.b $8
0001839B 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
000183A0 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
000183A5 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
000183AA 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
000183AF 3005 0000 08               	dc.b $30, $5, $0, $0, $8
000183B4 3005 0004 18               	dc.b $30, $5, $0, $4, $18
000183B9 3001 0046 28               	dc.b $30, $1, $0, $46, $28
000183BE 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
000183C3 20                         Map_ca8f_3A9: 	dc.b $20
000183C4 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
000183C9 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
000183CE ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
000183D3 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
000183D8 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
000183DD ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
000183E2 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
000183E7 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
000183EC FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
000183F1 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
000183F6 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
000183FB FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00018400 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00018405 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
0001840A 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
0001840F 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00018414 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00018419 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
0001841E 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00018423 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00018428 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
0001842D 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00018432 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00018437 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
0001843C 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00018441 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00018446 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
0001844B 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018450 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00018455 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
0001845A 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
0001845F 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00018464                            	even
00018464                            	even
00018464                            
00018464                            ; ===========================================================================
00018464                            ; ---------------------------------------------------------------------------
00018464                            ; Object 3D - matthew boss - modified by GK89
00018464                            ; ---------------------------------------------------------------------------
00018464                            
00018464                            Obj3D:					; XREF: Obj_Index
00018464 7000                       		moveq	#0,d0
00018466 1028 0024                  		move.b	$24(a0),d0
0001846A 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001846E 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018472                            ; ===========================================================================
00018472 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018474 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018476 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018478 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001847A                            
0001847A 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0001847C 0401                       		dc.b 4,	1
0001847E 0607                       		dc.b 6,	7
00018480                            ; ===========================================================================
00018480                            
00018480                            Obj3D_Main:				; XREF: Obj3D_Index
00018480 45F9 0001 847A             		lea	(Obj3D_ObjData).l,a2
00018486 2248                       		movea.l	a0,a1
00018488 7202                       		moveq	#2,d1
0001848A 6000                       		bra.s	Obj3D_LoadBoss
0001848C                            ; ===========================================================================
0001848C                            
0001848C                            Obj3D_Loop:
0001848C 4EB9 0000 E728             		jsr	SingleObjLoad2
00018492 6600                       		bne.s	loc_17772
00018494                            
00018494                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018494 135A 0024                  		move.b	(a2)+,$24(a1)
00018498 12BC 003D                  		move.b	#$3D,0(a1)
0001849C 3368 0008 0008             		move.w	8(a0),8(a1)
000184A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000184A8 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000184B0 337C 0400 0002             		move.w	#$400,2(a1)
000184B6 137C 0004 0001             		move.b	#4,1(a1)
000184BC 137C 0020 0019             		move.b	#$20,$19(a1)
000184C2 137C 0003 0018             		move.b	#3,$18(a1)
000184C8 135A 001C                  		move.b	(a2)+,$1C(a1)
000184CC 2348 0034                  		move.l	a0,$34(a1)
000184D0 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000184D4                            
000184D4                            loc_17772:
000184D4 3168 0008 0030             		move.w	8(a0),$30(a0)
000184DA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000184E0 117C 000F 0020             		move.b	#$F,$20(a0)
000184E6 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
000184EC                            
000184EC                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000184EC 7000                       		moveq	#0,d0
000184EE 1028 0025                  		move.b	$25(a0),d0
000184F2 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000184F6 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000184FA 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018500 4EB9 0000 B2E4             		jsr	AnimateSprite
00018506 1028 0022                  		move.b	$22(a0),d0
0001850A 0200 0003                  		andi.b	#3,d0
0001850E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018514 8128 0001                  		or.b	d0,1(a0)
00018518 4EF9 0000 E28C             		jmp	DisplaySprite
0001851E                            ; ===========================================================================
0001851E 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00018520 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00018522 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00018524 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00018526 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018528 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
0001852A 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
0001852C                            ; ===========================================================================
0001852C                            
0001852C                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
0001852C 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00018532 6100 0000                  		bsr.w	BossMove
00018536 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001853C 6600                       		bne.s	loc_177E6
0001853E 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018544 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018548                            
00018548                            loc_177E6:
00018548 1028 003F                  		move.b	$3F(a0),d0
0001854C 4EB9 0000 2D6E             		jsr	(CalcSine).l
00018552 EC40                       		asr.w	#6,d0
00018554 D068 0038                  		add.w	$38(a0),d0
00018558 3140 000C                  		move.w	d0,$C(a0)
0001855C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018562 5428 003F                  		addq.b	#2,$3F(a0)
00018566 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0001856C 6400                       		bcc.s	locret_1784A
0001856E 4A28 0022                  		tst.b	$22(a0)
00018572 6B00                       		bmi.s	loc_1784C
00018574 4A28 0020                  		tst.b	$20(a0)
00018578 6600                       		bne.s	locret_1784A
0001857A 4A28 003E                  		tst.b	$3E(a0)
0001857E 6600                       		bne.s	Obj3D_ShipFlash
00018580 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018586 303C 00AC                  		move.w	#$AC,d0
0001858A 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018590                            
00018590                            Obj3D_ShipFlash:
00018590 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018594 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018596 4A51                       		tst.w	(a1)
00018598 6600                       		bne.s	loc_1783C
0001859A 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001859E                            
0001859E                            loc_1783C:
0001859E 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000185A0 5328 003E                  		subq.b	#1,$3E(a0)
000185A4 6600                       		bne.s	locret_1784A
000185A6 117C 000F 0020             		move.b	#$F,$20(a0)
000185AC                            
000185AC                            locret_1784A:
000185AC 4E75                       		rts	
000185AE                            ; ===========================================================================
000185AE                            
000185AE                            loc_1784C:				; XREF: loc_177E6
000185AE 7064                       		moveq	#100,d0
000185B0 6100 0000                  		bsr.w	AddPoints
000185B4 117C 0008 0025             		move.b	#8,$25(a0)
000185BA 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000185C0 4E75                       		rts	
000185C2                            
000185C2                            ; ---------------------------------------------------------------------------
000185C2                            ; Defeated boss	subroutine
000185C2                            ; ---------------------------------------------------------------------------
000185C2                            
000185C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000185C2                            
000185C2                            
000185C2                            BossDefeated:
000185C2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000185C6 0200 0007                  		andi.b	#7,d0
000185CA 6600                       		bne.s	locret_178A2
000185CC 4EB9 0000 E712             		jsr	SingleObjLoad
000185D2 6600                       		bne.s	locret_178A2
000185D4 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000185D8 3368 0008 0008             		move.w	8(a0),8(a1)
000185DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000185E4 4EB9 0000 2D48             		jsr	(RandomNumber).l
000185EA 3200                       		move.w	d0,d1
000185EC 7200                       		moveq	#0,d1
000185EE 1200                       		move.b	d0,d1
000185F0 E409                       		lsr.b	#2,d1
000185F2 0441 0020                  		subi.w	#$20,d1
000185F6 D369 0008                  		add.w	d1,8(a1)
000185FA E048                       		lsr.w	#8,d0
000185FC E608                       		lsr.b	#3,d0
000185FE D169 000C                  		add.w	d0,$C(a1)
00018602                            
00018602                            locret_178A2:
00018602 4E75                       		rts	
00018604                            ; End of function BossDefeated
00018604                            
00018604                            ; ---------------------------------------------------------------------------
00018604                            ; Subroutine to	move a boss
00018604                            ; ---------------------------------------------------------------------------
00018604                            
00018604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018604                            
00018604                            
00018604                            BossMove:
00018604 2428 0030                  		move.l	$30(a0),d2
00018608 2628 0038                  		move.l	$38(a0),d3
0001860C 3028 0010                  		move.w	$10(a0),d0
00018610 48C0                       		ext.l	d0
00018612 E180                       		asl.l	#8,d0
00018614 D480                       		add.l	d0,d2
00018616 3028 0012                  		move.w	$12(a0),d0
0001861A 48C0                       		ext.l	d0
0001861C E180                       		asl.l	#8,d0
0001861E D680                       		add.l	d0,d3
00018620 2142 0030                  		move.l	d2,$30(a0)
00018624 2143 0038                  		move.l	d3,$38(a0)
00018628 4E75                       		rts	
0001862A                            ; End of function BossMove
0001862A                            
0001862A                            ; ===========================================================================
0001862A                            
0001862A                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
0001862A 6100 FFD8                  		bsr.w	BossMove
0001862E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00018634 6600                       		bne.s	loc_17916
00018636 317C 0000 0010             		move.w	#0,$10(a0)
0001863C 317C 0000 0012             		move.w	#0,$12(a0)
00018642 5428 0025                  		addq.b	#2,$25(a0)
00018646 4EB9 0000 E728             		jsr	SingleObjLoad2
0001864C 6600                       		bne.s	loc_17910
0001864E 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018652 3368 0030 0008             		move.w	$30(a0),8(a1)
00018658 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001865E 2348 0034                  		move.l	a0,$34(a1)
00018662                            
00018662                            loc_17910:
00018662 317C 0077 003C             		move.w	#$77,$3C(a0)
00018668                            
00018668                            loc_17916:
00018668 6000 FEDE                  		bra.w	loc_177E6
0001866C                            ; ===========================================================================
0001866C                            
0001866C                            Obj3D_ShipMove:				; XREF:  sonic follow move
0001866C 5368 003C                  		subq.w	#1,$3C(a0)
00018670 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018676 5428 0025                  		addq.b	#2,$25(a0)
0001867A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018680 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018684 9068 0008                  		sub.w	8(a0),d0		 
00018688 6A00                       		bpl.s	Obj3D_left			 
0001868A 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018690 6000                       		bra.s	Obj3D_right		 
00018692 08A8 0005 0022             		bclr	#5,$22(a0)
00018698 4EB9 0000 0000              		jsr     loc_17950
0001869E 4E75                       		rts
000186A0                            ; ===========================================================================
000186A0                            
000186A0                            Obj3D_right:
000186A0 317C FF00 0010             		move.w	#-$100,$10(a0)	
000186A6 4E75                       		Rts
000186A8                            
000186A8                            Obj3D_left:
000186A8 317C 0100 0010             		move.w	#$100,$10(a0)	 
000186AE 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
000186B4 6600                       		bne.s	RTSboss  	; if not, branch
000186B6 0868 0000 0022              		bchg	#0,$22(a0)
000186BC                            
000186BC                            RTSboss:	    
000186BC 4E75                       		rts
000186BE                             ; ===========================================================================
000186BE                            
000186BE                            Obj3D_UpStuff:
000186BE 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
000186C2 9068 000C                  		sub.w	$C(a0),d0		 
000186C6 6A00                       		bpl.s	Obj3D_down			 
000186C8 6000                        		bra.s	Obj3D_up		 
000186CA 08A8 0005 0022             		bclr	#5,$22(a0)
000186D0                             
000186D0                            Obj3D_up:		
000186D0 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
000186D6 4E75                        	    rts
000186D8                            
000186D8                            Obj3D_down:
000186D8 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
000186DE                            
000186DE                            loc_17950:
000186DE 6000 FE68                  		bra.w	loc_177E6
000186E2                            ; ===========================================================================
000186E2                            
000186E2                            loc_17954:				; XREF: Obj3D_ShipIndex
000186E2 5368 003C                  		subq.w	#1,$3C(a0)
000186E6 6B00                       		bmi.s	loc_17960
000186E8 6100 FF1A                  		bsr.w	BossMove
000186EC 6000                       		bra.s	loc_17976
000186EE                            ; ===========================================================================
000186EE                            
000186EE                            loc_17960:
000186EE 0868 0000 0022             		bchg	#0,$22(a0)
000186F4 317C 003F 003C             		move.w	#$3F,$3C(a0)
000186FA 5528 0025                  		subq.b	#2,$25(a0)
000186FE 317C 0000 0010             		move.w	#0,$10(a0)
00018704                            
00018704                            loc_17976:
00018704 6000 FE42                  		bra.w	loc_177E6
00018708                            ; ===========================================================================
00018708                            
00018708                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018708 5368 003C                  		subq.w	#1,$3C(a0)
0001870C 6B00                       		bmi.s	loc_17984
0001870E 6000 FEB2                  		bra.w	BossDefeated
00018712                            ; ===========================================================================
00018712                            
00018712                            loc_17984:
00018712 08E8 0000 0022             		bset	#0,$22(a0)
00018718 08A8 0007 0022             		bclr	#7,$22(a0)
0001871E 4268 0010                  		clr.w	$10(a0)
00018722 5428 0025                  		addq.b	#2,$25(a0)
00018726 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001872C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018730 6600                       		bne.s	locret_179AA
00018732 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018738 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0001873E 6000 FE82                  		bra.w	BossDefeated
00018742                            
00018742                            locret_179AA:
00018742 4E75                       		rts	
00018744                            ; ===========================================================================
00018744                            
00018744                            loc_179AC:				; XREF: Obj3D_ShipIndex
00018744 4EB9 0000 E1F0             		jsr ObjectFall		
0001874A 5268 003C                  		addq.w	#1,$3C(a0)
0001874E 6700                       		beq.s	loc_179BC
00018750 6A00                       		bpl.s	loc_179C2
00018752 6000                       		bra.s	loc_179EE
00018754                            ; ===========================================================================
00018754                            
00018754                            loc_179BC:
00018754 4268 0012                  		clr.w	$12(a0)
00018758 6000                       		bra.s	loc_179EE
0001875A                            ; ===========================================================================
0001875A                            
0001875A                            loc_179C2:
0001875A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018760 6500                       		bcs.s	loc_179DA
00018762 6700                       		beq.s	loc_179E0
00018764 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001876A 6500                       		bcs.s	loc_179EE
0001876C 5428 0025                  		addq.b	#2,$25(a0)
00018770 6000                       		bra.s	loc_179EE
00018772                            ; ===========================================================================
00018772                            
00018772                            loc_179DA:
00018772 5168 0012                  		subq.w	#8,$12(a0)
00018776 6000                       		bra.s	loc_179EE
00018778 6000 FE48                  		bra.w	BossDefeated
0001877C                            ; ===========================================================================
0001877C                            
0001877C                            loc_179E0:
0001877C 4268 0012                  		clr.w	$12(a0)
00018780 303C 0081                  		move.w	#$81,d0
00018784 4EB9 0000 15CE             		jsr	(PlaySound).l	; play GHZ music
0001878A                            
0001878A                            loc_179EE:
0001878A 6100 FE78                  		bsr.w	BossMove
0001878E 6000 FDB8                  		bra.w	loc_177E6
00018792                            ; ===========================================================================
00018792                            
00018792                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018792 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018798 6700                       		beq.s	loc_17A10
0001879A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001879E 6000                       		bra.s	loc_17A16
000187A0                            ; ===========================================================================
000187A0                            
000187A0                            loc_17A10:
000187A0 4A28 0001                  		tst.b	1(a0)
000187A4 6A00                       		bpl.s	Obj3D_ShipDel
000187A6                            
000187A6                            loc_17A16:
000187A6 6100 FE5C                  		bsr.w	BossMove
000187AA 6000 FD9C                  		bra.w	loc_177E6
000187AE                            ; ===========================================================================
000187AE                            
000187AE                            Obj3D_ShipDel:
000187AE 4EF9 0000 E2C8             		jmp	DeleteObject
000187B4                            ; ===========================================================================
000187B4                            
000187B4                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000187B4 7000                       		moveq	#0,d0
000187B6 7201                       		moveq	#1,d1
000187B8 2268 0034                  		movea.l	$34(a0),a1
000187BC 1029 0025                  		move.b	$25(a1),d0
000187C0 5900                       		subq.b	#4,d0
000187C2 6600                       		bne.s	loc_17A3E
000187C4 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000187CA 6600                       		bne.s	loc_17A46
000187CC 7204                       		moveq	#4,d1
000187CE                            
000187CE                            loc_17A3E:
000187CE 5D00                       		subq.b	#6,d0
000187D0 6B00                       		bmi.s	loc_17A46
000187D2 720A                       		moveq	#$A,d1
000187D4 6000                       		bra.s	loc_17A5A
000187D6                            ; ===========================================================================
000187D6                            
000187D6                            loc_17A46:
000187D6 4A29 0020                  		tst.b	$20(a1)
000187DA 6600                       		bne.s	loc_17A50
000187DC 7205                       		moveq	#5,d1
000187DE 6000                       		bra.s	loc_17A5A
000187E0                            ; ===========================================================================
000187E0                            
000187E0                            loc_17A50:
000187E0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000187E6 6500                       		bcs.s	loc_17A5A
000187E8 7204                       		moveq	#4,d1
000187EA                            
000187EA                            loc_17A5A:
000187EA 1141 001C                  		move.b	d1,$1C(a0)
000187EE 5500                       		subq.b	#2,d0
000187F0 6600                       		bne.s	Obj3D_FaceDisp
000187F2 117C 0006 001C             		move.b	#6,$1C(a0)
000187F8 4A28 0001                  		tst.b	1(a0)
000187FC 6A00                       		bpl.s	Obj3D_FaceDel
000187FE                            
000187FE                            Obj3D_FaceDisp:
000187FE 6000                       		bra.s	Obj3D_Display
00018800                            ; ===========================================================================
00018800                            
00018800                            Obj3D_FaceDel:
00018800 4EF9 0000 E2C8             		jmp	DeleteObject
00018806                            ; ===========================================================================
00018806                            
00018806                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018806 117C 0007 001C             		move.b	#7,$1C(a0)
0001880C 2268 0034                  		movea.l	$34(a0),a1
00018810 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018816 6600                       		bne.s	loc_17A96
00018818 117C 000B 001C             		move.b	#$B,$1C(a0)
0001881E 4A28 0001                  		tst.b	1(a0)
00018822 6A00                       		bpl.s	Obj3D_FlameDel
00018824 6000                       		bra.s	Obj3D_FlameDisp
00018826                            ; ===========================================================================
00018826                            
00018826                            loc_17A96:
00018826 3029 0010                  		move.w	$10(a1),d0
0001882A 6700                       		beq.s	Obj3D_FlameDisp
0001882C 117C 0008 001C             		move.b	#8,$1C(a0)
00018832                            
00018832                            Obj3D_FlameDisp:
00018832 6000                       		bra.s	Obj3D_Display
00018834                            ; ===========================================================================
00018834                            
00018834                            Obj3D_FlameDel:
00018834 4EF9 0000 E2C8             		jmp	DeleteObject
0001883A                            ; ===========================================================================
0001883A                            
0001883A                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
0001883A 2268 0034                  		movea.l	$34(a0),a1
0001883E 3169 0008 0008             		move.w	8(a1),8(a0)
00018844 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001884A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018850 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018856 4EB9 0000 B2E4             		jsr	AnimateSprite
0001885C 1028 0022                  		move.b	$22(a0),d0
00018860 0200 0003                  		andi.b	#3,d0
00018864 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001886A 8128 0001                  		or.b	d0,1(a0)
0001886E 4EF9 0000 E28C             		jmp	DisplaySprite
00018874                            ; ===========================================================================
00018874                            ; ---------------------------------------------------------------------------
00018874                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018874                            ; ---------------------------------------------------------------------------
00018874                            
00018874                            Obj48:					; XREF: Obj_Index
00018874 7000                       		moveq	#0,d0
00018876 1028 0024                  		move.b	$24(a0),d0
0001887A 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001887E 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018882                            ; ===========================================================================
00018882 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018884 0000                       		dc.w Obj48_Base-Obj48_Index
00018886 0000                       		dc.w Obj48_Display2-Obj48_Index
00018888 0000                       		dc.w loc_17C68-Obj48_Index
0001888A 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
0001888C                            ; ===========================================================================
0001888C                            
0001888C                            Obj48_Main:				; XREF: Obj48_Index
0001888C 5428 0024                  		addq.b	#2,$24(a0)
00018890 317C 4080 0026             		move.w	#$4080,$26(a0)
00018896 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001889C 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000188A4 317C 046C 0002             		move.w	#$46C,2(a0)
000188AA 45E8 0028                  		lea	$28(a0),a2
000188AE 14FC 0000                  		move.b	#0,(a2)+
000188B2 7205                       		moveq	#5,d1
000188B4 2248                       		movea.l	a0,a1
000188B6 6000                       		bra.s	loc_17B60
000188B8                            ; ===========================================================================
000188B8                            
000188B8                            Obj48_MakeLinks:
000188B8 4EB9 0000 E728             		jsr	SingleObjLoad2
000188BE 6600                       		bne.s	Obj48_MakeBall
000188C0 3368 0008 0008             		move.w	8(a0),8(a1)
000188C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000188CC 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000188D0 137C 0006 0024             		move.b	#6,$24(a1)
000188D6 237C 0000 86AA 0004        		move.l	#Map_obj15,4(a1)
000188DE 337C 0380 0002             		move.w	#$380,2(a1)
000188E4 137C 0001 001A             		move.b	#1,$1A(a1)
000188EA 5228 0028                  		addq.b	#1,$28(a0)
000188EE                            
000188EE                            loc_17B60:				; XREF: Obj48_Main
000188EE 3A09                       		move.w	a1,d5
000188F0 0445 D000                  		subi.w	#$D000,d5
000188F4 EC4D                       		lsr.w	#6,d5
000188F6 0245 007F                  		andi.w	#$7F,d5
000188FA 14C5                       		move.b	d5,(a2)+
000188FC 137C 0004 0001             		move.b	#4,1(a1)
00018902 137C 0008 0019             		move.b	#8,$19(a1)
00018908 137C 0006 0018             		move.b	#6,$18(a1)
0001890E 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018914 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018918                            
00018918                            Obj48_MakeBall:
00018918 137C 0008 0024             		move.b	#8,$24(a1)
0001891E 237C 0000 8C9A 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018926 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
0001892C 137C 0001 001A             		move.b	#1,$1A(a1)
00018932 137C 0005 0018             		move.b	#5,$18(a1)
00018938 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
0001893E 4E75                       		rts	
00018940                            ; ===========================================================================
00018940                            
00018940 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018946                            
00018946                            ; ===========================================================================
00018946                            
00018946                            Obj48_Base:				; XREF: Obj48_Index
00018946 47F9 0001 8940             		lea	(Obj48_PosData).l,a3
0001894C 45E8 0028                  		lea	$28(a0),a2
00018950 7C00                       		moveq	#0,d6
00018952 1C1A                       		move.b	(a2)+,d6
00018954                            
00018954                            loc_17BC6:
00018954 7800                       		moveq	#0,d4
00018956 181A                       		move.b	(a2)+,d4
00018958 ED4C                       		lsl.w	#6,d4
0001895A 0684 00FF D000             		addi.l	#$FFD000,d4
00018960 2244                       		movea.l	d4,a1
00018962 101B                       		move.b	(a3)+,d0
00018964 B029 003C                  		cmp.b	$3C(a1),d0
00018968 6700                       		beq.s	loc_17BE0
0001896A 5229 003C                  		addq.b	#1,$3C(a1)
0001896E                            
0001896E                            loc_17BE0:
0001896E 51CE FFE4                  		dbf	d6,loc_17BC6
00018972                            
00018972 B029 003C                  		cmp.b	$3C(a1),d0
00018976 6600                       		bne.s	loc_17BFA
00018978 2268 0034                  		movea.l	$34(a0),a1
0001897C 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018982 6600                       		bne.s	loc_17BFA
00018984 5428 0024                  		addq.b	#2,$24(a0)
00018988                            
00018988                            loc_17BFA:
00018988 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001898E 6700                       		beq.s	Obj48_Display
00018990 5268 0032                  		addq.w	#1,$32(a0)
00018994                            
00018994                            Obj48_Display:
00018994 6100 0000                  		bsr.w	sub_17C2A
00018998 1028 0026                  		move.b	$26(a0),d0
0001899C 4EB9 0000 861C             		jsr	(Obj15_Move2).l
000189A2 4EF9 0000 E28C             		jmp	DisplaySprite
000189A8                            ; ===========================================================================
000189A8                            
000189A8                            Obj48_Display2:				; XREF: Obj48_Index
000189A8 6100 0000                  		bsr.w	sub_17C2A
000189AC 4EB9 0000 85DC             		jsr	(Obj48_Move).l
000189B2 4EF9 0000 E28C             		jmp	DisplaySprite
000189B8                            
000189B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000189B8                            
000189B8                            
000189B8                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000189B8 2268 0034                  		movea.l	$34(a0),a1
000189BC 0628 0020 001B             		addi.b	#$20,$1B(a0)
000189C2 6400                       		bcc.s	loc_17C3C
000189C4 0868 0000 001A             		bchg	#0,$1A(a0)
000189CA                            
000189CA                            loc_17C3C:
000189CA 3169 0008 003A             		move.w	8(a1),$3A(a0)
000189D0 3029 000C                  		move.w	$C(a1),d0
000189D4 D068 0032                  		add.w	$32(a0),d0
000189D8 3140 0038                  		move.w	d0,$38(a0)
000189DC 1169 0022 0022             		move.b	$22(a1),$22(a0)
000189E2 4A29 0022                  		tst.b	$22(a1)
000189E6 6A00                       		bpl.s	locret_17C66
000189E8 10BC 003F                  		move.b	#$3F,0(a0)
000189EC 117C 0000 0024             		move.b	#0,$24(a0)
000189F2                            
000189F2                            locret_17C66:
000189F2 4E75                       		rts	
000189F4                            ; End of function sub_17C2A
000189F4                            
000189F4                            ; ===========================================================================
000189F4                            
000189F4                            loc_17C68:				; XREF: Obj48_Index
000189F4 2268 0034                  		movea.l	$34(a0),a1
000189F8 4A29 0022                  		tst.b	$22(a1)
000189FC 6A00                       		bpl.s	Obj48_Display3
000189FE 10BC 003F                  		move.b	#$3F,0(a0)
00018A02 117C 0000 0024             		move.b	#0,$24(a0)
00018A08                            
00018A08                            Obj48_Display3:
00018A08 4EF9 0000 E28C             		jmp	DisplaySprite
00018A0E                            ; ===========================================================================
00018A0E                            
00018A0E                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018A0E 7000                       		moveq	#0,d0
00018A10 4A28 001A                  		tst.b	$1A(a0)
00018A14 6600                       		bne.s	Obj48_Vanish
00018A16 5200                       		addq.b	#1,d0
00018A18                            
00018A18                            Obj48_Vanish:
00018A18 1140 001A                  		move.b	d0,$1A(a0)
00018A1C 2268 0034                  		movea.l	$34(a0),a1
00018A20 4A29 0022                  		tst.b	$22(a1)
00018A24 6A00                       		bpl.s	Obj48_Display4
00018A26 117C 0000 0020             		move.b	#0,$20(a0)
00018A2C 6100 FB94                  		bsr.w	BossDefeated
00018A30 5328 003C                  		subq.b	#1,$3C(a0)
00018A34 6A00                       		bpl.s	Obj48_Display4
00018A36 10BC 003F                  		move.b	#$3F,(a0)
00018A3A 117C 0000 0024             		move.b	#0,$24(a0)
00018A40                            
00018A40                            Obj48_Display4:
00018A40 4EF9 0000 E28C             		jmp	DisplaySprite
00018A46                            ; ===========================================================================
00018A46                            Ani_Eggman:
00018A46                            	include "_anim\Eggman.asm"
00018A46                            ; ---------------------------------------------------------------------------
00018A46                            ; Animation script - Eggman (bosses)
00018A46                            ; ---------------------------------------------------------------------------
00018A46 0000                       		dc.w byte_17CD4-Ani_Eggman
00018A48 0000                       		dc.w byte_17CD8-Ani_Eggman
00018A4A 0000                       		dc.w byte_17CDC-Ani_Eggman
00018A4C 0000                       		dc.w byte_17CE0-Ani_Eggman
00018A4E 0000                       		dc.w byte_17CE4-Ani_Eggman
00018A50 0000                       		dc.w byte_17CE8-Ani_Eggman
00018A52 0000                       		dc.w byte_17CEC-Ani_Eggman
00018A54 0000                       		dc.w byte_17CF0-Ani_Eggman
00018A56 0000                       		dc.w byte_17CF4-Ani_Eggman
00018A58 0000                       		dc.w byte_17CF8-Ani_Eggman
00018A5A 0000                       		dc.w byte_17CFC-Ani_Eggman
00018A5C 0000                       		dc.w byte_17D00-Ani_Eggman
00018A5E 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018A62 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018A66 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018A6A 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018A6E 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018A72 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018A76 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018A7A 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018A7E 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018A82 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018A86 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018A8A 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018A96                            		even
00018A96                            		even
00018A96                            Ani_TetoB:
00018A96                            	include "_anim\TetoB.asm"
00018A96                            ; ---------------------------------------------------------------------------
00018A96                            ; Animation script - Eggman (bosses)
00018A96                            ; ---------------------------------------------------------------------------
00018A96 0000                       		dc.w spin-Ani_TetoB
00018A98 0000                       		dc.w static-Ani_TetoB
00018A9A 0000                       		dc.w static2-Ani_TetoB
00018A9C 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018AA3 0500 FF                    static:	dc.b 5,	0, $FF
00018AA6 0501 FF                    static2:	dc.b 5,	1, $FF
00018AAA 00                         		even
00018AAA 00                         		even
00018AAA                            ; ---------------------------------------------------------------------------
00018AAA                            ; Sprite mappings - Eggman (boss levels)
00018AAA                            ; ---------------------------------------------------------------------------
00018AAA                            Map_Eggman:
00018AAA                            	include "_maps\Eggman.asm"
00018AAA                            Map_dc7e:
00018AAA 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018AAC 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018AAE 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018AB0 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018AB2 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018AB4 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018AB6 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018AB8 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018ABA 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018ABC 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018ABE 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018AC0 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018AC2 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018AC4 06                         Map_dc7e_1A: 	dc.b $6
00018AC5 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018ACA EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018ACF FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018AD4 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018AD9 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018ADE 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018AE3 02                         Map_dc7e_39: 	dc.b $2
00018AE4 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018AE9 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018AEE 02                         Map_dc7e_44: 	dc.b $2
00018AEF E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018AF4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018AF9 03                         Map_dc7e_4F: 	dc.b $3
00018AFA E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018AFF EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018B04 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018B09 03                         Map_dc7e_5F: 	dc.b $3
00018B0A E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018B0F EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018B14 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018B19 03                         Map_dc7e_6F: 	dc.b $3
00018B1A E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018B1F EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018B24 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018B29 03                         Map_dc7e_7F: 	dc.b $3
00018B2A E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018B2F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018B34 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018B39 04                         Map_dc7e_8F: 	dc.b $4
00018B3A E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018B3F E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018B44 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018B49 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018B4E 01                         Map_dc7e_A4: 	dc.b $1
00018B4F 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018B54 01                         Map_dc7e_AA: 	dc.b $1
00018B55 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018B5A 00                         Map_dc7e_B0: 	dc.b $0
00018B5B 02                         Map_dc7e_B1: 	dc.b $2
00018B5C 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018B61 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018B66 02                         Map_dc7e_BC: 	dc.b $2
00018B67 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018B6C 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018B72 00                         	even
00018B72 00                         	even
00018B72                            
00018B72                            ; ---------------------------------------------------------------------------
00018B72                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018B72                            ; ---------------------------------------------------------------------------
00018B72                            Map_BossItems:
00018B72                            	include "_maps\Boss items.asm"
00018B72                            ; ---------------------------------------------------------------------------
00018B72                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018B72                            ; ---------------------------------------------------------------------------
00018B72 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018B76 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018B7A 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018B7E 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018B82 01                         byte_17DE4:	dc.b 1
00018B83 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018B88 02                         byte_17DEA:	dc.b 2
00018B89 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018B8E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018B93 00                         		dc.b 0
00018B94 01                         byte_17DF6:	dc.b 1
00018B95 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018B9A 01                         byte_17DFC:	dc.b 1
00018B9B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018BA0 01                         byte_17E02:	dc.b 1
00018BA1 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018BA6 04                         byte_17E08:	dc.b 4
00018BA7 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018BAC F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018BB1 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018BB6 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018BBB 00                         		dc.b 0
00018BBC 02                         byte_17E1E:	dc.b 2
00018BBD 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018BC2 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018BC7 00                         		dc.b 0
00018BC8 02                         byte_17E2A:	dc.b 2
00018BC9 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018BCE 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018BD4 00                         		even
00018BD4 00                         		even
00018BD4                            
00018BD4                            ; ===========================================================================
00018BD4                            ; ---------------------------------------------------------------------------
00018BD4                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00018BD4                            ; ---------------------------------------------------------------------------
00018BD4                            
00018BD4                            
00018BD4                            obj77:					; XREF: Obj_Index
00018BD4 7000                       		moveq	#0,d0
00018BD6 1028 0024                  		move.b	$24(a0),d0
00018BDA 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018BDE 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018BE2                            ; ===========================================================================
00018BE2 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00018BE4 0000                       		dc.w obj77_ShipMain-obj77_Index
00018BE6 0000                       		dc.w obj77_FaceMain-obj77_Index
00018BE8 0000                       		dc.w obj77_FlameMain-obj77_Index
00018BEA                            
00018BEA 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
00018BEC 0401                       		dc.b 4,	1
00018BEE 0607                       		dc.b 6,	7
00018BF0                            ; ===========================================================================
00018BF0                            
00018BF0                            obj77_Main:				; XREF: obj77_Index
00018BF0 45F9 0001 8BEA             		lea	(obj77_ObjData).l,a2
00018BF6 2248                       		movea.l	a0,a1
00018BF8 7202                       		moveq	#2,d1
00018BFA 6000                       		bra.s	obj77_LoadBoss
00018BFC                            ; ===========================================================================
00018BFC                            
00018BFC                            obj77_Loop:
00018BFC 4EB9 0000 E728             		jsr	SingleObjLoad2
00018C02 6600                       		bne.s	loc2_17772
00018C04                            
00018C04                            obj77_LoadBoss:				; XREF: obj77_Main
00018C04 135A 0024                  		move.b	(a2)+,$24(a1)
00018C08 12BC 0077                  		move.b	#$77,0(a1)
00018C0C 3368 0008 0008             		move.w	8(a0),8(a1)
00018C12 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018C18 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018C20 337C 0400 0002             		move.w	#$400,2(a1)
00018C26 137C 0004 0001             		move.b	#4,1(a1)
00018C2C 137C 0020 0019             		move.b	#$20,$19(a1)
00018C32 137C 0003 0018             		move.b	#3,$18(a1)
00018C38 135A 001C                  		move.b	(a2)+,$1C(a1)
00018C3C 2348 0034                  		move.l	a0,$34(a1)
00018C40 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00018C44                            
00018C44                            loc2_17772:
00018C44 3168 0008 0030             		move.w	8(a0),$30(a0)
00018C4A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018C50 117C 000F 0020             		move.b	#$F,$20(a0)
00018C56 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018C5C                            
00018C5C                            obj77_ShipMain:				; XREF: obj77_Index
00018C5C 7000                       		moveq	#0,d0
00018C5E 1028 0025                  		move.b	$25(a0),d0
00018C62 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018C66 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018C6A 43F9 0001 8A96             		lea	(Ani_TetoB).l,a1
00018C70 4EB9 0000 B2E4             		jsr	AnimateSprite
00018C76 1028 0022                  		move.b	$22(a0),d0
00018C7A 0200 0003                  		andi.b	#3,d0
00018C7E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018C84 8128 0001                  		or.b	d0,1(a0)
00018C88 4EF9 0000 E28C             		jmp	DisplaySprite
00018C8E                            ; ===========================================================================
00018C8E 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018C90 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018C92 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018C94 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018C96 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018C98 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018C9A 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018C9C 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018C9E                            ; ===========================================================================
00018C9E                            
00018C9E                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018C9E                            	;	move.w	#$100,$12(a0)	; move ship down
00018C9E 6100 F964                  		bsr.w	BossMove
00018CA2 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018CA8 6600                       		bne.s	loc2_177E6
00018CAA 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018CB0 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018CB4                            
00018CB4                            loc2_177E6:
00018CB4                            ;		move.b	$3F(a0),d0
00018CB4                            ;		jsr	(CalcSine).l
00018CB4 EC40                       		asr.w	#6,d0
00018CB6 D068 0038                  		add.w	$38(a0),d0
00018CBA 3140 000C                  		move.w	d0,$C(a0)
00018CBE 3168 0030 0008             		move.w	$30(a0),8(a0)
00018CC4 5428 003F                  		addq.b	#2,$3F(a0)
00018CC8 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018CCE 6400                       		bcc.s	locret_1784A2
00018CD0 4A28 0022                  		tst.b	$22(a0)
00018CD4 6B00                       		bmi.s	loc2_1784C
00018CD6 4A28 0020                  		tst.b	$20(a0)
00018CDA 6600                       		bne.s	locret_1784A2
00018CDC 4A28 003E                  		tst.b	$3E(a0)
00018CE0 6600                       		bne.s	obj77_ShipFlash
00018CE2 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018CE8 303C 00AC                  		move.w	#$AC,d0
00018CEC 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018CF2                            
00018CF2                            obj77_ShipFlash:
00018CF2 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018CF6 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018CF8 4A51                       		tst.w	(a1)
00018CFA 6600                       		bne.s	loc2_1783C
00018CFC 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018D00                            
00018D00                            loc2_1783C:
00018D00 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018D02 5328 003E                  		subq.b	#1,$3E(a0)
00018D06 6600                       		bne.s	locret_1784A2
00018D08 117C 000F 0020             		move.b	#$F,$20(a0)
00018D0E                            
00018D0E                            locret_1784A2:
00018D0E 4E75                       		rts	
00018D10                            ; ===========================================================================
00018D10                            
00018D10                            loc2_1784C:				; XREF: loc2_177E6
00018D10 7064                       		moveq	#100,d0
00018D12 6100 0000                  		bsr.w	AddPoints
00018D16 117C 000A 0025             		move.b	#$A,$25(a0)
00018D1C 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018D22 4E75                       		rts	
00018D24                            ; ===========================================================================
00018D24                            
00018D24                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018D24 317C FF00 0010             		move.w	#-$100,$10(a0)
00018D2A 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018D30 6100 F8D2                  		bsr.w	BossMove
00018D34 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018D3A 6600                       		bne.s	loc2_17916
00018D3C 317C 0000 0010             		move.w	#0,$10(a0)
00018D42 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018D48 317C 0000 0012             		move.w	#0,$12(a0)
00018D4E 5428 0025                  		addq.b	#2,$25(a0)
00018D52                            
00018D52                            loc2_17910:
00018D52 317C 0077 003C             		move.w	#$77,$3C(a0)
00018D58                            
00018D58                            loc2_17916:
00018D58 6000 FF5A                  		bra.w	loc2_177E6
00018D5C                            ; ===========================================================================
00018D5C                            
00018D5C                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018D5C 6100 F8A6                  		bsr.w	BossMove
00018D60 5368 003C                  		subq.w	#1,$3C(a0)
00018D64 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018D66 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018D6C 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018D72 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018D78 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018D7E 6600                       		bne.s	loc2_17950 ; if not branch
00018D80                            
00018D80                            fatass_attack:
00018D80 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018D86 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018D8C 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018D92 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018D94 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018D98 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018D9E                            
00018D9E                            loc2_17950:
00018D9E 6000 FF14                  		bra.w	loc2_177E6
00018DA2                            ; ===========================================================================
00018DA2                            
00018DA2                            loc2_17954:				; XREF: obj77_ShipIndex
00018DA2 6100 F860                  		bsr.w	BossMove
00018DA6 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018DAC                            		; i suck at programming
00018DAC 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018DB2 6600                       		bne.s	loc2_17976    ; if not blah blah
00018DB4 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018DBA 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018DBE 303C 00B9                  		move.w	#$B9,d0
00018DC2 4EB9 0000 15CE             		jsr	(PlaySound).l	; play the earthquake sound
00018DC8                            
00018DC8                            Peartobombs:	
00018DC8 4EB9 0000 E728                		jsr	SingleObjLoad2
00018DCE 6600                       		bne.s	secondone
00018DD0 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018DD4 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018DDA 337C 0670 000C             		move.w	#$670,$C(a1)
00018DE0                            secondone:		
00018DE0 4EB9 0000 E728                		jsr	SingleObjLoad2
00018DE6 6600                       		bne.s	loc2_17976		
00018DE8 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018DEC 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018DF2 337C 0670 000C             		move.w	#$670,$C(a1)
00018DF8                            lastone:
00018DF8 4EB9 0000 E728                		jsr	SingleObjLoad2
00018DFE 6600                       		bne.s	loc2_17976		
00018E00 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018E04 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018E0A 337C 0670 000C             		move.w	#$670,$C(a1)
00018E10                            		
00018E10                            loc2_17976:
00018E10 6000 FEA2                  		bra.w	loc2_177E6
00018E14                            		
00018E14                            ; ===========================================================================
00018E14                            Fatassruns:
00018E14 6100 F7EE                   		bsr.w	BossMove
00018E18 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018E1E 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018E24 6600                       		bne.s	processstuff ; is not go here
00018E26 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018E2C 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018E32 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018E36 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018E3C 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018E42                            		
00018E42                            		
00018E42                            processstuff:
00018E42 6000 FE70                  		bra.w	loc2_177E6
00018E46                            ; ===========================================================================
00018E46                            
00018E46                            loc2_1797A:				; XREF: obj77_ShipIndex
00018E46 5368 003C                  		subq.w	#1,$3C(a0)
00018E4A 6B00                       		bmi.s	loc2_17984
00018E4C 6000 F774                  		bra.w	BossDefeated
00018E50                            ; ===========================================================================
00018E50                            
00018E50                            loc2_17984:
00018E50 08E8 0000 0022             		bset	#0,$22(a0)
00018E56 08A8 0007 0022             		bclr	#7,$22(a0)
00018E5C 4268 0010                  		clr.w	$10(a0)
00018E60 5428 0025                  		addq.b	#2,$25(a0)
00018E64 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018E6A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018E6E 6600                       		bne.s	locret_179AA2
00018E70 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018E76                            
00018E76                            locret_179AA2:
00018E76 4E75                       		rts	
00018E78                            ; ===========================================================================
00018E78                            
00018E78                            loc2_179AC:				; XREF: obj77_ShipIndex
00018E78 5268 003C                  		addq.w	#1,$3C(a0)
00018E7C 6700                       		beq.s	loc2_179BC
00018E7E 6A00                       		bpl.s	loc2_179C2
00018E80 0668 0018 0012             		addi.w	#$18,$12(a0)
00018E86 6000                       		bra.s	loc2_179EE
00018E88                            ; ===========================================================================
00018E88                            
00018E88                            loc2_179BC:
00018E88 4268 0012                  		clr.w	$12(a0)
00018E8C 6000                       		bra.s	loc2_179EE
00018E8E                            ; ===========================================================================
00018E8E                            
00018E8E                            loc2_179C2:
00018E8E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018E94 6500                       		bcs.s	loc2_179DA
00018E96 6700                       		beq.s	loc2_179E0
00018E98 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018E9E 6500                       		bcs.s	loc2_179EE
00018EA0 5428 0025                  		addq.b	#2,$25(a0)
00018EA4 6000                       		bra.s	loc2_179EE
00018EA6                            ; ===========================================================================
00018EA6                            
00018EA6                            loc2_179DA:
00018EA6 5168 0012                  		subq.w	#8,$12(a0)
00018EAA 6000                       		bra.s	loc2_179EE
00018EAC                            ; ===========================================================================
00018EAC                            
00018EAC                            loc2_179E0:
00018EAC 4268 0012                  		clr.w	$12(a0)
00018EB0 303C 0097                  		move.w	#$97,d0
00018EB4 4EB9 0000 15CE             		jsr	(PlaySound).l	; play lz3 music
00018EBA                            
00018EBA                            loc2_179EE:
00018EBA 6100 F748                  		bsr.w	BossMove
00018EBE 6000 FDF4                  		bra.w	loc2_177E6
00018EC2                            ; ===========================================================================
00018EC2                            
00018EC2                            loc2_179F6:				; XREF: obj77_ShipIndex
00018EC2 317C 0400 0010             		move.w	#$400,$10(a0)
00018EC8 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018ECE 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018ED4 6700                       		beq.s	loc2_17A10
00018ED6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018EDA 6000                       		bra.s	loc2_17A16
00018EDC                            ; ===========================================================================
00018EDC                            
00018EDC                            loc2_17A10:
00018EDC 4A28 0001                  		tst.b	1(a0)
00018EE0 6A00                       		bpl.s	obj77_ShipDel
00018EE2                            
00018EE2                            loc2_17A16:
00018EE2 6100 F720                  		bsr.w	BossMove
00018EE6 6000 FDCC                  		bra.w	loc2_177E6
00018EEA                            ; ===========================================================================
00018EEA                            
00018EEA                            obj77_ShipDel:
00018EEA 4EF9 0000 E2C8             		jmp	DeleteObject
00018EF0                            ; ===========================================================================
00018EF0                            
00018EF0                            obj77_FaceMain:				; XREF: obj77_Index
00018EF0 4E75                       		rts
00018EF2                            ; ===========================================================================
00018EF2                            
00018EF2                            obj77_FlameMain:			; XREF: obj77_Index
00018EF2 4E75                       		rts
00018EF4                            ; ===========================================================================
00018EF4                            
00018EF4                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018EF4 43F9 0001 8A96             		lea	(Ani_TetoB).l,a1
00018EFA 4EB9 0000 B2E4             		jsr	AnimateSprite
00018F00 4EF9 0000 E28C             		jmp	DisplaySprite
00018F06                            ; ---------------------------------------------------------------------------
00018F06                            ; Sprite mappings - Fatass teto boss
00018F06                            ; ---------------------------------------------------------------------------
00018F06                            Map_TetoBoss:
00018F06                            	include "_maps\tetoboss.asm"
00018F06                            Map_f09a:
00018F06 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018F08 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018F0A 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018F0C 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018F0E 03                         Map_f09a_8: 	dc.b $3
00018F0F E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018F14 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018F19 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018F1E 06                         Map_f09a_18: 	dc.b $6
00018F1F EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018F24 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018F29 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018F2E 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018F33 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018F38 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018F3D 03                         Map_f09a_37: 	dc.b $3
00018F3E E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018F43 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018F48 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018F4D 06                         Map_f09a_47: 	dc.b $6
00018F4E ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018F53 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018F58 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018F5D DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018F62 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018F67 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018F6C                            	even
00018F6C                            	even
00018F6C                            ; ===========================================================================
00018F6C                            ; ---------------------------------------------------------------------------
00018F6C                            ; Object 73 - Eggman (MZ)
00018F6C                            ; ---------------------------------------------------------------------------
00018F6C                            
00018F6C                            Obj73:					; XREF: Obj_Index
00018F6C 7000                       		moveq	#0,d0
00018F6E 1028 0024                  		move.b	$24(a0),d0
00018F72 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018F76 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018F7A                            ; ===========================================================================
00018F7A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018F7C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018F7E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018F80 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018F82 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018F84                            
00018F84 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018F87 0401 04                    		dc.b 4,	1, 4
00018F8A 0607 04                    		dc.b 6,	7, 4
00018F8D 0800 03                    		dc.b 8,	0, 3
00018F90                            ; ===========================================================================
00018F90                            
00018F90                            Obj73_Main:				; XREF: Obj73_Index
00018F90 3168 0008 0030             		move.w	8(a0),$30(a0)
00018F96 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018F9C 117C 000F 0020             		move.b	#$F,$20(a0)
00018FA2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018FA8 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018FAC 2248                       		movea.l	a0,a1
00018FAE 7203                       		moveq	#3,d1
00018FB0 6000                       		bra.s	Obj73_LoadBoss
00018FB2                            ; ===========================================================================
00018FB2                            
00018FB2                            Obj73_Loop:
00018FB2 4EB9 0000 E728             		jsr	SingleObjLoad2
00018FB8 6600                       		bne.s	Obj73_ShipMain
00018FBA 12BC 0073                  		move.b	#$73,0(a1)
00018FBE 3368 0008 0008             		move.w	8(a0),8(a1)
00018FC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018FCA                            
00018FCA                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018FCA 08A8 0000 0022             		bclr	#0,$22(a0)
00018FD0 4229 0025                  		clr.b	$25(a1)
00018FD4 135A 0024                  		move.b	(a2)+,$24(a1)
00018FD8 135A 001C                  		move.b	(a2)+,$1C(a1)
00018FDC 135A 0018                  		move.b	(a2)+,$18(a1)
00018FE0 237C 0001 8AAA 0004        		move.l	#Map_Eggman,4(a1)
00018FE8 337C 0400 0002             		move.w	#$400,2(a1)
00018FEE 137C 0004 0001             		move.b	#4,1(a1)
00018FF4 137C 0020 0019             		move.b	#$20,$19(a1)
00018FFA 2348 0034                  		move.l	a0,$34(a1)
00018FFE 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00019002                            
00019002                            Obj73_ShipMain:
00019002 7000                       		moveq	#0,d0
00019004 1028 0025                  		move.b	$25(a0),d0
00019008 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001900C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00019010 43F9 0001 8A46             		lea	(Ani_Eggman).l,a1
00019016 4EB9 0000 B2E4             		jsr	AnimateSprite
0001901C 7003                       		moveq	#3,d0
0001901E C028 0022                  		and.b	$22(a0),d0
00019022 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019028 8128 0001                  		or.b	d0,1(a0)
0001902C 4EF9 0000 E28C             		jmp	DisplaySprite
00019032                            ; ===========================================================================
00019032 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00019034 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00019036 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00019038 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001903A 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001903C                            ; ===========================================================================
0001903C                            
0001903C                            loc_18302:				; XREF: Obj73_ShipIndex
0001903C 1028 003F                  		move.b	$3F(a0),d0
00019040 5428 003F                  		addq.b	#2,$3F(a0)
00019044 4EB9 0000 2D6E             		jsr	(CalcSine).l
0001904A E440                       		asr.w	#2,d0
0001904C 3140 0012                  		move.w	d0,$12(a0)
00019050 317C FF00 0010             		move.w	#-$100,$10(a0)
00019056 6100 F5AC                  		bsr.w	BossMove
0001905A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019060 6600                       		bne.s	loc_18334
00019062 5428 0025                  		addq.b	#2,$25(a0)
00019066 4228 0028                  		clr.b	$28(a0)
0001906A 42A8 0010                  		clr.l	$10(a0)
0001906E                            
0001906E                            loc_18334:
0001906E 4EB9 0000 2D48             		jsr	(RandomNumber).l
00019074 1140 0034                  		move.b	d0,$34(a0)
00019078                            
00019078                            loc_1833E:
00019078 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001907E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019084 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001908A 6400                       		bcc.s	locret_18390
0001908C 4A28 0022                  		tst.b	$22(a0)
00019090 6B00                       		bmi.s	loc_18392
00019092 4A28 0020                  		tst.b	$20(a0)
00019096 6600                       		bne.s	locret_18390
00019098 4A28 003E                  		tst.b	$3E(a0)
0001909C 6600                       		bne.s	loc_18374
0001909E 117C 0028 003E             		move.b	#$28,$3E(a0)
000190A4 303C 00AC                  		move.w	#$AC,d0
000190A8 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play boss damage sound
000190AE                            
000190AE                            loc_18374:
000190AE 43F8 FB22                  		lea	($FFFFFB22).w,a1
000190B2 7000                       		moveq	#0,d0
000190B4 4A51                       		tst.w	(a1)
000190B6 6600                       		bne.s	loc_18382
000190B8 303C 0EEE                  		move.w	#$EEE,d0
000190BC                            
000190BC                            loc_18382:
000190BC 3280                       		move.w	d0,(a1)
000190BE 5328 003E                  		subq.b	#1,$3E(a0)
000190C2 6600                       		bne.s	locret_18390
000190C4 117C 000F 0020             		move.b	#$F,$20(a0)
000190CA                            
000190CA                            locret_18390:
000190CA 4E75                       		rts	
000190CC                            ; ===========================================================================
000190CC                            
000190CC                            loc_18392:				; XREF: loc_1833E
000190CC 7064                       		moveq	#100,d0
000190CE 6100 0000                  		bsr.w	AddPoints
000190D2 117C 0004 0025             		move.b	#4,$25(a0)
000190D8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000190DE 4268 0010                  		clr.w	$10(a0)
000190E2 4E75                       		rts	
000190E4                            ; ===========================================================================
000190E4                            
000190E4                            loc_183AA:				; XREF: Obj73_ShipIndex
000190E4 7000                       		moveq	#0,d0
000190E6 1028 0028                  		move.b	$28(a0),d0
000190EA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000190EE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000190F2 0228 0006 0028             		andi.b	#6,$28(a0)
000190F8 6000 FF7E                  		bra.w	loc_1833E
000190FC                            ; ===========================================================================
000190FC 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000190FE 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019100 0000                       		dc.w loc_183CA-off_183C2
00019102 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019104                            ; ===========================================================================
00019104                            
00019104                            loc_183CA:				; XREF: off_183C2
00019104 4A68 0010                  		tst.w	$10(a0)
00019108 6600                       		bne.s	loc_183FE
0001910A 7040                       		moveq	#$40,d0
0001910C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019112 6700                       		beq.s	loc_183E6
00019114 6500                       		bcs.s	loc_183DE
00019116 4440                       		neg.w	d0
00019118                            
00019118                            loc_183DE:
00019118 3140 0012                  		move.w	d0,$12(a0)
0001911C 6000 F4E6                  		bra.w	BossMove
00019120                            ; ===========================================================================
00019120                            
00019120                            loc_183E6:
00019120 317C 0200 0010             		move.w	#$200,$10(a0)
00019126 317C 0100 0012             		move.w	#$100,$12(a0)
0001912C 0828 0000 0022             		btst	#0,$22(a0)
00019132 6600                       		bne.s	loc_183FE
00019134 4468 0010                  		neg.w	$10(a0)
00019138                            
00019138                            loc_183FE:
00019138 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001913E 6400                       		bcc.s	Obj73_MakeLava
00019140 6100 F4C2                  		bsr.w	BossMove
00019144 5968 0012                  		subq.w	#4,$12(a0)
00019148                            
00019148                            Obj73_MakeLava:
00019148 5328 0034                  		subq.b	#1,$34(a0)
0001914C 6400                       		bcc.s	loc_1845C
0001914E 4EB9 0000 E712             		jsr	SingleObjLoad
00019154 6600                       		bne.s	loc_1844A
00019156 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001915A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00019160 4EB9 0000 2D48             		jsr	(RandomNumber).l
00019166 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001916C 80FC 0050                  		divu.w	#$50,d0
00019170 4840                       		swap	d0
00019172 0640 1878                  		addi.w	#$1878,d0
00019176 3340 0008                  		move.w	d0,8(a1)
0001917A EE09                       		lsr.b	#7,d1
0001917C 337C 00FF 0028             		move.w	#$FF,$28(a1)
00019182                            
00019182                            loc_1844A:
00019182 4EB9 0000 2D48             		jsr	(RandomNumber).l
00019188 0200 001F                  		andi.b	#$1F,d0
0001918C 0600 0040                  		addi.b	#$40,d0
00019190 1140 0034                  		move.b	d0,$34(a0)
00019194                            
00019194                            loc_1845C:
00019194 0828 0000 0022             		btst	#0,$22(a0)
0001919A 6700                       		beq.s	loc_18474
0001919C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000191A2 6D00                       		blt.s	locret_1849C
000191A4 317C 1910 0030             		move.w	#$1910,$30(a0)
000191AA 6000                       		bra.s	loc_18482
000191AC                            ; ===========================================================================
000191AC                            
000191AC                            loc_18474:
000191AC 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
000191B2 6E00                       		bgt.s	locret_1849C
000191B4 317C 1830 0030             		move.w	#$1830,$30(a0)
000191BA                            
000191BA                            loc_18482:
000191BA 4268 0010                  		clr.w	$10(a0)
000191BE 317C FE80 0012             		move.w	#-$180,$12(a0)
000191C4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000191CA 6400                       		bcc.s	loc_18498
000191CC 4468 0012                  		neg.w	$12(a0)
000191D0                            
000191D0                            loc_18498:
000191D0 5428 0028                  		addq.b	#2,$28(a0)
000191D4                            
000191D4                            locret_1849C:
000191D4 4E75                       		rts	
000191D6                            ; ===========================================================================
000191D6                            
000191D6                            Obj73_MakeLava2:			; XREF: off_183C2
000191D6 6100 F42C                  		bsr.w	BossMove
000191DA 3028 0038                  		move.w	$38(a0),d0
000191DE 0440 022C                  		subi.w	#$22C,d0
000191E2 6E00                       		bgt.s	locret_184F4
000191E4 303C 022C                  		move.w	#$22C,d0
000191E8 4A68 0012                  		tst.w	$12(a0)
000191EC 6700                       		beq.s	loc_184EA
000191EE 4268 0012                  		clr.w	$12(a0)
000191F2 317C 0050 003C             		move.w	#$50,$3C(a0)
000191F8 0868 0000 0022             		bchg	#0,$22(a0)
000191FE 4EB9 0000 E712             		jsr	SingleObjLoad
00019204 6600                       		bne.s	loc_184EA
00019206 3368 0030 0008             		move.w	$30(a0),8(a1)
0001920C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019212 0669 0018 000C             		addi.w	#$18,$C(a1)
00019218 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001921C 137C 0001 0028             		move.b	#1,$28(a1)
00019222                            
00019222                            loc_184EA:
00019222 5368 003C                  		subq.w	#1,$3C(a0)
00019226 6600                       		bne.s	locret_184F4
00019228 5428 0028                  		addq.b	#2,$28(a0)
0001922C                            
0001922C                            locret_184F4:
0001922C 4E75                       		rts	
0001922E                            ; ===========================================================================
0001922E                            
0001922E                            loc_184F6:				; XREF: Obj73_ShipIndex
0001922E 5368 003C                  		subq.w	#1,$3C(a0)
00019232 6B00                       		bmi.s	loc_18500
00019234 6000 F38C                  		bra.w	BossDefeated
00019238                            ; ===========================================================================
00019238                            
00019238                            loc_18500:
00019238 08E8 0000 0022             		bset	#0,$22(a0)
0001923E 08A8 0007 0022             		bclr	#7,$22(a0)
00019244 4268 0010                  		clr.w	$10(a0)
00019248 5428 0025                  		addq.b	#2,$25(a0)
0001924C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019252 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019256 6600                       		bne.s	locret_1852A
00019258 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001925E 4268 0012                  		clr.w	$12(a0)
00019262                            
00019262                            locret_1852A:
00019262 4E75                       		rts	
00019264                            ; ===========================================================================
00019264                            
00019264                            loc_1852C:				; XREF: Obj73_ShipIndex
00019264 5268 003C                  		addq.w	#1,$3C(a0)
00019268 6700                       		beq.s	loc_18544
0001926A 6A00                       		bpl.s	loc_1854E
0001926C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019272 6400                       		bcc.s	loc_18544
00019274 0668 0018 0012             		addi.w	#$18,$12(a0)
0001927A 6000                       		bra.s	loc_1857A
0001927C                            ; ===========================================================================
0001927C                            
0001927C                            loc_18544:
0001927C 4268 0012                  		clr.w	$12(a0)
00019280 4268 003C                  		clr.w	$3C(a0)
00019284 6000                       		bra.s	loc_1857A
00019286                            ; ===========================================================================
00019286                            
00019286                            loc_1854E:
00019286 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001928C 6500                       		bcs.s	loc_18566
0001928E 6700                       		beq.s	loc_1856C
00019290 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019296 6500                       		bcs.s	loc_1857A
00019298 5428 0025                  		addq.b	#2,$25(a0)
0001929C 6000                       		bra.s	loc_1857A
0001929E                            ; ===========================================================================
0001929E                            
0001929E                            loc_18566:
0001929E 5168 0012                  		subq.w	#8,$12(a0)
000192A2 6000                       		bra.s	loc_1857A
000192A4                            ; ===========================================================================
000192A4                            
000192A4                            loc_1856C:
000192A4 4268 0012                  		clr.w	$12(a0)
000192A8 303C 0083                  		move.w	#$83,d0
000192AC 4EB9 0000 15CE             		jsr	(PlaySound).l	; play MZ music
000192B2                            
000192B2                            loc_1857A:
000192B2 6100 F350                  		bsr.w	BossMove
000192B6 6000 FDC0                  		bra.w	loc_1833E
000192BA                            ; ===========================================================================
000192BA                            
000192BA                            loc_18582:				; XREF: Obj73_ShipIndex
000192BA 317C 0500 0010             		move.w	#$500,$10(a0)
000192C0 317C FFC0 0012             		move.w	#-$40,$12(a0)
000192C6 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
000192CC 6400                       		bcc.s	loc_1859C
000192CE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000192D2 6000                       		bra.s	loc_185A2
000192D4                            ; ===========================================================================
000192D4                            
000192D4                            loc_1859C:
000192D4 4A28 0001                  		tst.b	1(a0)
000192D8 6A00                       		bpl.s	Obj73_ShipDel
000192DA                            
000192DA                            loc_185A2:
000192DA 6100 F328                  		bsr.w	BossMove
000192DE 6000 FD98                  		bra.w	loc_1833E
000192E2                            ; ===========================================================================
000192E2                            
000192E2                            Obj73_ShipDel:
000192E2 4EF9 0000 E2C8             		jmp	DeleteObject
000192E8                            ; ===========================================================================
000192E8                            
000192E8                            Obj73_FaceMain:				; XREF: Obj73_Index
000192E8 7000                       		moveq	#0,d0
000192EA 7201                       		moveq	#1,d1
000192EC 2268 0034                  		movea.l	$34(a0),a1
000192F0 1029 0025                  		move.b	$25(a1),d0
000192F4 5540                       		subq.w	#2,d0
000192F6 6600                       		bne.s	loc_185D2
000192F8 0829 0001 0028             		btst	#1,$28(a1)
000192FE 6700                       		beq.s	loc_185DA
00019300 4A69 0012                  		tst.w	$12(a1)
00019304 6600                       		bne.s	loc_185DA
00019306 7204                       		moveq	#4,d1
00019308 6000                       		bra.s	loc_185EE
0001930A                            ; ===========================================================================
0001930A                            
0001930A                            loc_185D2:
0001930A 5500                       		subq.b	#2,d0
0001930C 6B00                       		bmi.s	loc_185DA
0001930E 720A                       		moveq	#$A,d1
00019310 6000                       		bra.s	loc_185EE
00019312                            ; ===========================================================================
00019312                            
00019312                            loc_185DA:
00019312 4A29 0020                  		tst.b	$20(a1)
00019316 6600                       		bne.s	loc_185E4
00019318 7205                       		moveq	#5,d1
0001931A 6000                       		bra.s	loc_185EE
0001931C                            ; ===========================================================================
0001931C                            
0001931C                            loc_185E4:
0001931C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019322 6500                       		bcs.s	loc_185EE
00019324 7204                       		moveq	#4,d1
00019326                            
00019326                            loc_185EE:
00019326 1141 001C                  		move.b	d1,$1C(a0)
0001932A 5900                       		subq.b	#4,d0
0001932C 6600                       		bne.s	loc_18602
0001932E 117C 0006 001C             		move.b	#6,$1C(a0)
00019334 4A28 0001                  		tst.b	1(a0)
00019338 6A00                       		bpl.s	Obj73_FaceDel
0001933A                            
0001933A                            loc_18602:
0001933A 6000                       		bra.s	Obj73_Display
0001933C                            ; ===========================================================================
0001933C                            
0001933C                            Obj73_FaceDel:
0001933C 4EF9 0000 E2C8             		jmp	DeleteObject
00019342                            ; ===========================================================================
00019342                            
00019342                            Obj73_FlameMain:			; XREF: Obj73_Index
00019342 117C 0007 001C             		move.b	#7,$1C(a0)
00019348 2268 0034                  		movea.l	$34(a0),a1
0001934C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019352 6D00                       		blt.s	loc_1862A
00019354 117C 000B 001C             		move.b	#$B,$1C(a0)
0001935A 4A28 0001                  		tst.b	1(a0)
0001935E 6A00                       		bpl.s	Obj73_FlameDel
00019360 6000                       		bra.s	loc_18636
00019362                            ; ===========================================================================
00019362                            
00019362                            loc_1862A:
00019362 4A69 0010                  		tst.w	$10(a1)
00019366 6700                       		beq.s	loc_18636
00019368 117C 0008 001C             		move.b	#8,$1C(a0)
0001936E                            
0001936E                            loc_18636:
0001936E 6000                       		bra.s	Obj73_Display
00019370                            ; ===========================================================================
00019370                            
00019370                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019370 4EF9 0000 E2C8             		jmp	DeleteObject
00019376                            ; ===========================================================================
00019376                            
00019376                            Obj73_Display:
00019376 43F9 0001 8A46             		lea	(Ani_Eggman).l,a1
0001937C 4EB9 0000 B2E4             		jsr	AnimateSprite
00019382                            
00019382                            loc_1864A:
00019382 2268 0034                  		movea.l	$34(a0),a1
00019386 3169 0008 0008             		move.w	8(a1),8(a0)
0001938C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019392 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019398 7003                       		moveq	#3,d0
0001939A C028 0022                  		and.b	$22(a0),d0
0001939E 0228 00FC 0001             		andi.b	#-4,1(a0)
000193A4 8128 0001                  		or.b	d0,1(a0)
000193A8 4EF9 0000 E28C             		jmp	DisplaySprite
000193AE                            ; ===========================================================================
000193AE                            
000193AE                            Obj73_TubeMain:				; XREF: Obj73_Index
000193AE 2268 0034                  		movea.l	$34(a0),a1
000193B2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000193B8 6600                       		bne.s	loc_18688
000193BA 4A28 0001                  		tst.b	1(a0)
000193BE 6A00                       		bpl.s	Obj73_TubeDel
000193C0                            
000193C0                            loc_18688:
000193C0 217C 0001 8B72 0004        		move.l	#Map_BossItems,4(a0)
000193C8 317C 246C 0002             		move.w	#$246C,2(a0)
000193CE 117C 0004 001A             		move.b	#4,$1A(a0)
000193D4 60AC                       		bra.s	loc_1864A
000193D6                            ; ===========================================================================
000193D6                            
000193D6                            Obj73_TubeDel:
000193D6 4EF9 0000 E2C8             		jmp	DeleteObject
000193DC                            ; ===========================================================================
000193DC                            ; ---------------------------------------------------------------------------
000193DC                            ; Object 74 - lava that	Eggman drops (MZ)
000193DC                            ; ---------------------------------------------------------------------------
000193DC                            
000193DC                            Obj74:					; XREF: Obj_Index
000193DC 7000                       		moveq	#0,d0
000193DE 1028 0024                  		move.b	$24(a0),d0
000193E2 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
000193E6 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
000193EA 4EF9 0000 E28C             		jmp	DisplaySprite
000193F0                            ; ===========================================================================
000193F0 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000193F2 0000                       		dc.w Obj74_Action-Obj74_Index
000193F4 0000                       		dc.w loc_18886-Obj74_Index
000193F6 0000                       		dc.w Obj74_Delete3-Obj74_Index
000193F8                            ; ===========================================================================
000193F8                            
000193F8                            Obj74_Main:				; XREF: Obj74_Index
000193F8 117C 0008 0016             		move.b	#8,$16(a0)
000193FE 117C 0008 0017             		move.b	#8,$17(a0)
00019404 217C 0000 BEE2 0004        		move.l	#Map_obj14,4(a0)
0001940C 317C 0345 0002             		move.w	#$345,2(a0)
00019412 117C 0004 0001             		move.b	#4,1(a0)
00019418 117C 0005 0018             		move.b	#5,$18(a0)
0001941E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019424 117C 0008 0019             		move.b	#8,$19(a0)
0001942A 5428 0024                  		addq.b	#2,$24(a0)
0001942E 4A28 0028                  		tst.b	$28(a0)
00019432 6600                       		bne.s	loc_1870A
00019434 117C 008B 0020             		move.b	#$8B,$20(a0)
0001943A 5428 0024                  		addq.b	#2,$24(a0)
0001943E 6000 0000                  		bra.w	loc_18886
00019442                            ; ===========================================================================
00019442                            
00019442                            loc_1870A:
00019442 117C 001E 0029             		move.b	#$1E,$29(a0)
00019448 303C 00AE                  		move.w	#$AE,d0
0001944C 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play lava sound
00019452                            
00019452                            Obj74_Action:				; XREF: Obj74_Index
00019452 7000                       		moveq	#0,d0
00019454 1028 0025                  		move.b	$25(a0),d0
00019458 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001945C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019460 4EB9 0000 E252             		jsr	SpeedToPos
00019466 43F9 0000 F144             		lea	(Ani_obj14).l,a1
0001946C 4EB9 0000 B2E4             		jsr	AnimateSprite
00019472 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019478 6200                       		bhi.s	Obj74_Delete
0001947A 4E75                       		rts	
0001947C                            ; ===========================================================================
0001947C                            
0001947C                            Obj74_Delete:
0001947C 4EF9 0000 E2C8             		jmp	DeleteObject
00019482                            ; ===========================================================================
00019482 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019484 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019486 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019488 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001948A                            ; ===========================================================================
0001948A                            
0001948A                            Obj74_Drop:				; XREF: Obj74_Index2
0001948A 08E8 0001 0022             		bset	#1,$22(a0)
00019490 5328 0029                  		subq.b	#1,$29(a0)
00019494 6A00                       		bpl.s	locret_18780
00019496 117C 008B 0020             		move.b	#$8B,$20(a0)
0001949C 4228 0028                  		clr.b	$28(a0)
000194A0 0668 0018 0012             		addi.w	#$18,$12(a0)
000194A6 08A8 0001 0022             		bclr	#1,$22(a0)
000194AC 6100 C6A8                  		bsr.w	ObjHitFloor
000194B0 4A41                       		tst.w	d1
000194B2 6A00                       		bpl.s	locret_18780
000194B4 5428 0025                  		addq.b	#2,$25(a0)
000194B8                            
000194B8                            locret_18780:
000194B8 4E75                       		rts	
000194BA                            ; ===========================================================================
000194BA                            
000194BA                            Obj74_MakeFlame:			; XREF: Obj74_Index2
000194BA 5568 000C                  		subq.w	#2,$C(a0)
000194BE 08E8 0007 0002             		bset	#7,2(a0)
000194C4 317C 00A0 0010             		move.w	#$A0,$10(a0)
000194CA 4268 0012                  		clr.w	$12(a0)
000194CE 3168 0008 0030             		move.w	8(a0),$30(a0)
000194D4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000194DA 117C 0003 0029             		move.b	#3,$29(a0)
000194E0 4EB9 0000 E728             		jsr	SingleObjLoad2
000194E6 6600                       		bne.s	loc_187CA
000194E8 47D1                       		lea	(a1),a3
000194EA 45D0                       		lea	(a0),a2
000194EC 7003                       		moveq	#3,d0
000194EE                            
000194EE                            Obj74_Loop:
000194EE 26DA                       		move.l	(a2)+,(a3)+
000194F0 26DA                       		move.l	(a2)+,(a3)+
000194F2 26DA                       		move.l	(a2)+,(a3)+
000194F4 26DA                       		move.l	(a2)+,(a3)+
000194F6 51C8 FFF6                  		dbf	d0,Obj74_Loop
000194FA                            
000194FA 4469 0010                  		neg.w	$10(a1)
000194FE 5429 0025                  		addq.b	#2,$25(a1)
00019502                            
00019502                            loc_187CA:
00019502 5428 0025                  		addq.b	#2,$25(a0)
00019506 4E75                       		rts	
00019508                            
00019508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019508                            
00019508                            
00019508                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019508 4EB9 0000 E728             		jsr	SingleObjLoad2
0001950E 6600                       		bne.s	locret_187EE
00019510 3368 0008 0008             		move.w	8(a0),8(a1)
00019516 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001951C 12BC 0074                  		move.b	#$74,(a1)
00019520 337C 0067 0028             		move.w	#$67,$28(a1)
00019526                            
00019526                            locret_187EE:
00019526 4E75                       		rts	
00019528                            ; End of function Obj74_Duplicate2
00019528                            
00019528                            ; ===========================================================================
00019528                            
00019528                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019528 6100 C62C                  		bsr.w	ObjHitFloor
0001952C 4A41                       		tst.w	d1
0001952E 6A00                       		bpl.s	loc_18826
00019530 3028 0008                  		move.w	8(a0),d0
00019534 0C40 1940                  		cmpi.w	#$1940,d0
00019538 6E00                       		bgt.s	loc_1882C
0001953A 3228 0030                  		move.w	$30(a0),d1
0001953E B240                       		cmp.w	d0,d1
00019540 6700                       		beq.s	loc_1881E
00019542 0240 0010                  		andi.w	#$10,d0
00019546 0241 0010                  		andi.w	#$10,d1
0001954A B240                       		cmp.w	d0,d1
0001954C 6700                       		beq.s	loc_1881E
0001954E 61B8                       		bsr.s	Obj74_Duplicate2
00019550 3168 0008 0032             		move.w	8(a0),$32(a0)
00019556                            
00019556                            loc_1881E:
00019556 3168 0008 0030             		move.w	8(a0),$30(a0)
0001955C 4E75                       		rts	
0001955E                            ; ===========================================================================
0001955E                            
0001955E                            loc_18826:
0001955E 5428 0025                  		addq.b	#2,$25(a0)
00019562 4E75                       		rts	
00019564                            ; ===========================================================================
00019564                            
00019564                            loc_1882C:
00019564 5428 0024                  		addq.b	#2,$24(a0)
00019568 4E75                       		rts	
0001956A                            ; ===========================================================================
0001956A                            
0001956A                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001956A 08A8 0001 0022             		bclr	#1,$22(a0)
00019570 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019576 3028 0008                  		move.w	8(a0),d0
0001957A 9068 0032                  		sub.w	$32(a0),d0
0001957E 6A00                       		bpl.s	loc_1884A
00019580 4440                       		neg.w	d0
00019582                            
00019582                            loc_1884A:
00019582 0C40 0012                  		cmpi.w	#$12,d0
00019586 6600                       		bne.s	loc_18856
00019588 08A8 0007 0002             		bclr	#7,2(a0)
0001958E                            
0001958E                            loc_18856:
0001958E 6100 C5C6                  		bsr.w	ObjHitFloor
00019592 4A41                       		tst.w	d1
00019594 6A00                       		bpl.s	locret_1887E
00019596 5328 0029                  		subq.b	#1,$29(a0)
0001959A 6700                       		beq.s	Obj74_Delete2
0001959C 4268 0012                  		clr.w	$12(a0)
000195A0 3168 0032 0008             		move.w	$32(a0),8(a0)
000195A6 3168 0038 000C             		move.w	$38(a0),$C(a0)
000195AC 08E8 0007 0002             		bset	#7,2(a0)
000195B2 5528 0025                  		subq.b	#2,$25(a0)
000195B6                            
000195B6                            locret_1887E:
000195B6 4E75                       		rts	
000195B8                            ; ===========================================================================
000195B8                            
000195B8                            Obj74_Delete2:
000195B8 4EF9 0000 E2C8             		jmp	DeleteObject
000195BE                            ; ===========================================================================
000195BE                            
000195BE                            loc_18886:				; XREF: Obj74_Index
000195BE 08E8 0007 0002             		bset	#7,2(a0)
000195C4 5328 0029                  		subq.b	#1,$29(a0)
000195C8 6600                       		bne.s	Obj74_Animate
000195CA 117C 0001 001C             		move.b	#1,$1C(a0)
000195D0 5968 000C                  		subq.w	#4,$C(a0)
000195D4 4228 0020                  		clr.b	$20(a0)
000195D8                            
000195D8                            Obj74_Animate:
000195D8 43F9 0000 F144             		lea	(Ani_obj14).l,a1
000195DE 4EF9 0000 B2E4             		jmp	AnimateSprite
000195E4                            ; ===========================================================================
000195E4                            
000195E4                            Obj74_Delete3:				; XREF: Obj74_Index
000195E4 4EF9 0000 E2C8             		jmp	DeleteObject
000195EA                            ; ===========================================================================
000195EA                            
000195EA                            Obj7A_Delete:
000195EA 4EF9 0000 E2C8             		jmp	DeleteObject
000195F0                            ; ===========================================================================
000195F0                            ; ---------------------------------------------------------------------------
000195F0                            ; Object 7A - Eggman (SLZ)
000195F0                            ; ---------------------------------------------------------------------------
000195F0                            
000195F0                            Obj7A:					; XREF: Obj_Index
000195F0 7000                       		moveq	#0,d0
000195F2 1028 0024                  		move.b	$24(a0),d0
000195F6 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000195FA 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000195FE                            ; ===========================================================================
000195FE 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019600 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00019602 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00019604 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00019606 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019608                            
00019608 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001960B 0401 04                    		dc.b 4,	1, 4
0001960E 0607 04                    		dc.b 6,	7, 4
00019611 0800 03                    		dc.b 8,	0, 3
00019614                            ; ===========================================================================
00019614                            
00019614                            Obj7A_Main:				; XREF: Obj7A_Index
00019614 317C 2188 0008             		move.w	#$2188,8(a0)
0001961A 317C 0228 000C             		move.w	#$228,$C(a0)
00019620 3168 0008 0030             		move.w	8(a0),$30(a0)
00019626 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001962C 117C 000F 0020             		move.b	#$F,$20(a0)
00019632 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019638 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001963C 2248                       		movea.l	a0,a1
0001963E 7203                       		moveq	#3,d1
00019640 6000                       		bra.s	Obj7A_LoadBoss
00019642                            ; ===========================================================================
00019642                            
00019642                            Obj7A_Loop:
00019642 4EB9 0000 E728             		jsr	SingleObjLoad2
00019648 6600                       		bne.s	loc_1895C
0001964A 12BC 007A                  		move.b	#$7A,0(a1)
0001964E 3368 0008 0008             		move.w	8(a0),8(a1)
00019654 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001965A                            
0001965A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001965A 08A8 0000 0022             		bclr	#0,$22(a0)
00019660 4229 0025                  		clr.b	$25(a1)
00019664 135A 0024                  		move.b	(a2)+,$24(a1)
00019668 135A 001C                  		move.b	(a2)+,$1C(a1)
0001966C 135A 0018                  		move.b	(a2)+,$18(a1)
00019670 237C 0001 8AAA 0004        		move.l	#Map_Eggman,4(a1)
00019678 337C 0400 0002             		move.w	#$400,2(a1)
0001967E 137C 0004 0001             		move.b	#4,1(a1)
00019684 137C 0020 0019             		move.b	#$20,$19(a1)
0001968A 2348 0034                  		move.l	a0,$34(a1)
0001968E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019692                            
00019692                            loc_1895C:
00019692 43F8 D040                  		lea	($FFFFD040).w,a1
00019696 45E8 002A                  		lea	$2A(a0),a2
0001969A 705E                       		moveq	#$5E,d0
0001969C 723E                       		moveq	#$3E,d1
0001969E                            
0001969E                            loc_18968:
0001969E B011                       		cmp.b	(a1),d0
000196A0 6600                       		bne.s	loc_18974
000196A2 4A29 0028                  		tst.b	$28(a1)
000196A6 6700                       		beq.s	loc_18974
000196A8 34C9                       		move.w	a1,(a2)+
000196AA                            
000196AA                            loc_18974:
000196AA D2FC 0040                  		adda.w	#$40,a1
000196AE 51C9 FFEE                  		dbf	d1,loc_18968
000196B2                            
000196B2                            Obj7A_ShipMain:				; XREF: Obj7A_Index
000196B2 7000                       		moveq	#0,d0
000196B4 1028 0025                  		move.b	$25(a0),d0
000196B8 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000196BC 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000196C0 43F9 0001 8A46             		lea	(Ani_Eggman).l,a1
000196C6 4EB9 0000 B2E4             		jsr	AnimateSprite
000196CC 7003                       		moveq	#3,d0
000196CE C028 0022                  		and.b	$22(a0),d0
000196D2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000196D8 8128 0001                  		or.b	d0,1(a0)
000196DC 4EF9 0000 E28C             		jmp	DisplaySprite
000196E2                            ; ===========================================================================
000196E2 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000196E4 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000196E6 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000196E8 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000196EA 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000196EC 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000196EE                            ; ===========================================================================
000196EE                            
000196EE                            loc_189B8:				; XREF: Obj7A_ShipIndex
000196EE 317C FF00 0010             		move.w	#-$100,$10(a0)
000196F4 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000196FA 6400                       		bcc.s	loc_189CA
000196FC 5428 0025                  		addq.b	#2,$25(a0)
00019700                            
00019700                            loc_189CA:
00019700 6100 EF02                  		bsr.w	BossMove
00019704 1028 003F                  		move.b	$3F(a0),d0
00019708 5428 003F                  		addq.b	#2,$3F(a0)
0001970C 4EB9 0000 2D6E             		jsr	(CalcSine).l
00019712 EC40                       		asr.w	#6,d0
00019714 D068 0038                  		add.w	$38(a0),d0
00019718 3140 000C                  		move.w	d0,$C(a0)
0001971C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019722 6000                       		bra.s	loc_189FE
00019724                            ; ===========================================================================
00019724                            
00019724                            loc_189EE:
00019724 6100 EEDE                  		bsr.w	BossMove
00019728 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001972E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019734                            
00019734                            loc_189FE:
00019734 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001973A 6400                       		bcc.s	locret_18A44
0001973C 4A28 0022                  		tst.b	$22(a0)
00019740 6B00                       		bmi.s	loc_18A46
00019742 4A28 0020                  		tst.b	$20(a0)
00019746 6600                       		bne.s	locret_18A44
00019748 4A28 003E                  		tst.b	$3E(a0)
0001974C 6600                       		bne.s	loc_18A28
0001974E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019754 303C 00AC                  		move.w	#$AC,d0
00019758 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001975E                            
0001975E                            loc_18A28:
0001975E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019762 7000                       		moveq	#0,d0
00019764 4A51                       		tst.w	(a1)
00019766 6600                       		bne.s	loc_18A36
00019768 303C 0EEE                  		move.w	#$EEE,d0
0001976C                            
0001976C                            loc_18A36:
0001976C 3280                       		move.w	d0,(a1)
0001976E 5328 003E                  		subq.b	#1,$3E(a0)
00019772 6600                       		bne.s	locret_18A44
00019774 117C 000F 0020             		move.b	#$F,$20(a0)
0001977A                            
0001977A                            locret_18A44:
0001977A 4E75                       		rts	
0001977C                            ; ===========================================================================
0001977C                            
0001977C                            loc_18A46:
0001977C 7064                       		moveq	#100,d0
0001977E 6100 0000                  		bsr.w	AddPoints
00019782 117C 0006 0025             		move.b	#6,$25(a0)
00019788 117C 0078 003C             		move.b	#$78,$3C(a0)
0001978E 4268 0010                  		clr.w	$10(a0)
00019792 4E75                       		rts	
00019794                            ; ===========================================================================
00019794                            
00019794                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019794 3028 0030                  		move.w	$30(a0),d0
00019798 317C 0200 0010             		move.w	#$200,$10(a0)
0001979E 0828 0000 0022             		btst	#0,$22(a0)
000197A4 6600                       		bne.s	loc_18A7C
000197A6 4468 0010                  		neg.w	$10(a0)
000197AA 0C40 2008                  		cmpi.w	#$2008,d0
000197AE 6E00                       		bgt.s	loc_18A88
000197B0 6000                       		bra.s	loc_18A82
000197B2                            ; ===========================================================================
000197B2                            
000197B2                            loc_18A7C:
000197B2 0C40 2138                  		cmpi.w	#$2138,d0
000197B6 6D00                       		blt.s	loc_18A88
000197B8                            
000197B8                            loc_18A82:
000197B8 0868 0000 0022             		bchg	#0,$22(a0)
000197BE                            
000197BE                            loc_18A88:
000197BE 3028 0008                  		move.w	8(a0),d0
000197C2 72FF                       		moveq	#-1,d1
000197C4 7402                       		moveq	#2,d2
000197C6 45E8 002A                  		lea	$2A(a0),a2
000197CA 7828                       		moveq	#$28,d4
000197CC 4A68 0010                  		tst.w	$10(a0)
000197D0 6A00                       		bpl.s	loc_18A9E
000197D2 4444                       		neg.w	d4
000197D4                            
000197D4                            loc_18A9E:
000197D4 321A                       		move.w	(a2)+,d1
000197D6 2641                       		movea.l	d1,a3
000197D8 082B 0003 0022             		btst	#3,$22(a3)
000197DE 6600                       		bne.s	loc_18AB4
000197E0 362B 0008                  		move.w	8(a3),d3
000197E4 D644                       		add.w	d4,d3
000197E6 9640                       		sub.w	d0,d3
000197E8 6700                       		beq.s	loc_18AC0
000197EA                            
000197EA                            loc_18AB4:
000197EA 51CA FFE8                  		dbf	d2,loc_18A9E
000197EE                            
000197EE 1142 0028                  		move.b	d2,$28(a0)
000197F2 6000 FF0C                  		bra.w	loc_189CA
000197F6                            ; ===========================================================================
000197F6                            
000197F6                            loc_18AC0:
000197F6 1142 0028                  		move.b	d2,$28(a0)
000197FA 5428 0025                  		addq.b	#2,$25(a0)
000197FE 117C 0028 003C             		move.b	#$28,$3C(a0)
00019804 6000 FEFA                  		bra.w	loc_189CA
00019808                            ; ===========================================================================
00019808                            
00019808                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019808 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001980E 6600                       		bne.s	loc_18B36
00019810 70FF                       		moveq	#-1,d0
00019812 1028 0028                  		move.b	$28(a0),d0
00019816 4880                       		ext.w	d0
00019818 6B00                       		bmi.s	loc_18B40
0001981A 5540                       		subq.w	#2,d0
0001981C 4440                       		neg.w	d0
0001981E D040                       		add.w	d0,d0
00019820 43E8 002A                  		lea	$2A(a0),a1
00019824 3031 0000                  		move.w	(a1,d0.w),d0
00019828 2440                       		movea.l	d0,a2
0001982A 43F8 D040                  		lea	($FFFFD040).w,a1
0001982E 723E                       		moveq	#$3E,d1
00019830                            
00019830                            loc_18AFA:
00019830 B0A9 003C                  		cmp.l	$3C(a1),d0
00019834 6700                       		beq.s	loc_18B40
00019836 D2FC 0040                  		adda.w	#$40,a1
0001983A 51C9 FFF4                  		dbf	d1,loc_18AFA
0001983E                            
0001983E 2F08                       		move.l	a0,-(sp)
00019840 41D2                       		lea	(a2),a0
00019842 4EB9 0000 E728             		jsr	SingleObjLoad2
00019848 205F                       		movea.l	(sp)+,a0
0001984A 6600                       		bne.s	loc_18B40
0001984C 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019850 3368 0008 0008             		move.w	8(a0),8(a1)
00019856 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001985C 0669 0020 000C             		addi.w	#$20,$C(a1)
00019862 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019868 234A 003C                  		move.l	a2,$3C(a1)
0001986C                            
0001986C                            loc_18B36:
0001986C 5328 003C                  		subq.b	#1,$3C(a0)
00019870 6700                       		beq.s	loc_18B40
00019872 6000 FEC0                  		bra.w	loc_189FE
00019876                            ; ===========================================================================
00019876                            
00019876                            loc_18B40:
00019876 5528 0025                  		subq.b	#2,$25(a0)
0001987A 6000 FE84                  		bra.w	loc_189CA
0001987E                            ; ===========================================================================
0001987E                            
0001987E                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001987E 5328 003C                  		subq.b	#1,$3C(a0)
00019882 6B00                       		bmi.s	loc_18B52
00019884 6000 ED3C                  		bra.w	BossDefeated
00019888                            ; ===========================================================================
00019888                            
00019888                            loc_18B52:
00019888 5428 0025                  		addq.b	#2,$25(a0)
0001988C 4268 0012                  		clr.w	$12(a0)
00019890 08E8 0000 0022             		bset	#0,$22(a0)
00019896 08A8 0007 0022             		bclr	#7,$22(a0)
0001989C 4268 0010                  		clr.w	$10(a0)
000198A0 117C 00E8 003C             		move.b	#-$18,$3C(a0)
000198A6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000198AA 6600                       		bne.s	loc_18B7C
000198AC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000198B2                            
000198B2                            loc_18B7C:
000198B2 6000 FE80                  		bra.w	loc_189FE
000198B6                            ; ===========================================================================
000198B6                            
000198B6                            loc_18B80:				; XREF: Obj7A_ShipIndex
000198B6 5228 003C                  		addq.b	#1,$3C(a0)
000198BA 6700                       		beq.s	loc_18B90
000198BC 6A00                       		bpl.s	loc_18B96
000198BE 0668 0018 0012             		addi.w	#$18,$12(a0)
000198C4 6000                       		bra.s	loc_18BC2
000198C6                            ; ===========================================================================
000198C6                            
000198C6                            loc_18B90:
000198C6 4268 0012                  		clr.w	$12(a0)
000198CA 6000                       		bra.s	loc_18BC2
000198CC                            ; ===========================================================================
000198CC                            
000198CC                            loc_18B96:
000198CC 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000198D2 6500                       		bcs.s	loc_18BAE
000198D4 6700                       		beq.s	loc_18BB4
000198D6 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000198DC 6500                       		bcs.s	loc_18BC2
000198DE 5428 0025                  		addq.b	#2,$25(a0)
000198E2 6000                       		bra.s	loc_18BC2
000198E4                            ; ===========================================================================
000198E4                            
000198E4                            loc_18BAE:
000198E4 5168 0012                  		subq.w	#8,$12(a0)
000198E8 6000                       		bra.s	loc_18BC2
000198EA                            ; ===========================================================================
000198EA                            
000198EA                            loc_18BB4:
000198EA 4268 0012                  		clr.w	$12(a0)
000198EE 303C 0084                  		move.w	#$84,d0
000198F2 4EB9 0000 15CE             		jsr	(PlaySound).l	; play SLZ music
000198F8                            
000198F8                            loc_18BC2:
000198F8 6000 FE2A                  		bra.w	loc_189EE
000198FC                            ; ===========================================================================
000198FC                            
000198FC                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000198FC 317C 0400 0010             		move.w	#$400,$10(a0)
00019902 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019908 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001990E 6400                       		bcc.s	loc_18BE0
00019910 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019914 6000                       		bra.s	loc_18BE8
00019916                            ; ===========================================================================
00019916                            
00019916                            loc_18BE0:
00019916 4A28 0001                  		tst.b	1(a0)
0001991A 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001991E                            
0001991E                            loc_18BE8:
0001991E 6100 ECE4                  		bsr.w	BossMove
00019922 6000 FDDC                  		bra.w	loc_189CA
00019926                            ; ===========================================================================
00019926                            
00019926                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019926 7000                       		moveq	#0,d0
00019928 7201                       		moveq	#1,d1
0001992A 2268 0034                  		movea.l	$34(a0),a1
0001992E 1029 0025                  		move.b	$25(a1),d0
00019932 0C00 0006                  		cmpi.b	#6,d0
00019936 6B00                       		bmi.s	loc_18C06
00019938 720A                       		moveq	#$A,d1
0001993A 6000                       		bra.s	loc_18C1A
0001993C                            ; ===========================================================================
0001993C                            
0001993C                            loc_18C06:
0001993C 4A29 0020                  		tst.b	$20(a1)
00019940 6600                       		bne.s	loc_18C10
00019942 7205                       		moveq	#5,d1
00019944 6000                       		bra.s	loc_18C1A
00019946                            ; ===========================================================================
00019946                            
00019946                            loc_18C10:
00019946 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001994C 6500                       		bcs.s	loc_18C1A
0001994E 7204                       		moveq	#4,d1
00019950                            
00019950                            loc_18C1A:
00019950 1141 001C                  		move.b	d1,$1C(a0)
00019954 0C00 000A                  		cmpi.b	#$A,d0
00019958 6600                       		bne.s	loc_18C32
0001995A 117C 0006 001C             		move.b	#6,$1C(a0)
00019960 4A28 0001                  		tst.b	1(a0)
00019964 6A00 FC84                  		bpl.w	Obj7A_Delete
00019968                            
00019968                            loc_18C32:
00019968 6000                       		bra.s	loc_18C6C
0001996A                            ; ===========================================================================
0001996A                            
0001996A                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001996A 117C 0008 001C             		move.b	#8,$1C(a0)
00019970 2268 0034                  		movea.l	$34(a0),a1
00019974 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001997A 6600                       		bne.s	loc_18C56
0001997C 4A28 0001                  		tst.b	1(a0)
00019980 6A00 FC68                  		bpl.w	Obj7A_Delete
00019984 117C 000B 001C             		move.b	#$B,$1C(a0)
0001998A 6000                       		bra.s	loc_18C6C
0001998C                            ; ===========================================================================
0001998C                            
0001998C                            loc_18C56:
0001998C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019992 6E00                       		bgt.s	loc_18C6C
00019994 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001999A 6D00                       		blt.s	loc_18C6C
0001999C 117C 0007 001C             		move.b	#7,$1C(a0)
000199A2                            
000199A2                            loc_18C6C:
000199A2 43F9 0001 8A46             		lea	(Ani_Eggman).l,a1
000199A8 4EB9 0000 B2E4             		jsr	AnimateSprite
000199AE                            
000199AE                            loc_18C78:
000199AE 2268 0034                  		movea.l	$34(a0),a1
000199B2 3169 0008 0008             		move.w	8(a1),8(a0)
000199B8 3169 000C 000C             		move.w	$C(a1),$C(a0)
000199BE 1169 0022 0022             		move.b	$22(a1),$22(a0)
000199C4 7003                       		moveq	#3,d0
000199C6 C028 0022                  		and.b	$22(a0),d0
000199CA 0228 00FC 0001             		andi.b	#-4,1(a0)
000199D0 8128 0001                  		or.b	d0,1(a0)
000199D4 4EF9 0000 E28C             		jmp	DisplaySprite
000199DA                            ; ===========================================================================
000199DA                            
000199DA                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000199DA 2268 0034                  		movea.l	$34(a0),a1
000199DE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000199E4 6600                       		bne.s	loc_18CB8
000199E6 4A28 0001                  		tst.b	1(a0)
000199EA 6A00 FBFE                  		bpl.w	Obj7A_Delete
000199EE                            
000199EE                            loc_18CB8:
000199EE 217C 0001 8B72 0004        		move.l	#Map_BossItems,4(a0)
000199F6 317C 246C 0002             		move.w	#$246C,2(a0)
000199FC 117C 0003 001A             		move.b	#3,$1A(a0)
00019A02 60AA                       		bra.s	loc_18C78
00019A04                            ; ===========================================================================
00019A04                            ; ---------------------------------------------------------------------------
00019A04                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019A04                            ; ---------------------------------------------------------------------------
00019A04                            
00019A04                            Obj7B:					; XREF: Obj_Index
00019A04 7000                       		moveq	#0,d0
00019A06 1028 0024                  		move.b	$24(a0),d0
00019A0A 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019A0E 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019A12 3028 0030                  		move.w	$30(a0),d0
00019A16 0240 FF80                  		andi.w	#$FF80,d0
00019A1A 3238 F700                  		move.w	($FFFFF700).w,d1
00019A1E 0441 0080                  		subi.w	#$80,d1
00019A22 0241 FF80                  		andi.w	#$FF80,d1
00019A26 9041                       		sub.w	d1,d0
00019A28 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019A2C 0C40 0280                  		cmpi.w	#$280,d0
00019A30 6200 FBB8                  		bhi.w	Obj7A_Delete
00019A34 4EF9 0000 E28C             		jmp	DisplaySprite
00019A3A                            ; ===========================================================================
00019A3A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019A3C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019A3E 0000                       		dc.w loc_18DC6-Obj7B_Index
00019A40 0000                       		dc.w loc_18EAA-Obj7B_Index
00019A42 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019A44 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019A46                            ; ===========================================================================
00019A46                            
00019A46                            Obj7B_Main:				; XREF: Obj7B_Index
00019A46 217C 0001 262E 0004        		move.l	#Map_obj5Ea,4(a0)
00019A4E 317C 0518 0002             		move.w	#$518,2(a0)
00019A54 117C 0001 001A             		move.b	#1,$1A(a0)
00019A5A 0028 0004 0001             		ori.b	#4,1(a0)
00019A60 117C 0004 0018             		move.b	#4,$18(a0)
00019A66 117C 008B 0020             		move.b	#$8B,$20(a0)
00019A6C 117C 000C 0019             		move.b	#$C,$19(a0)
00019A72 2268 003C                  		movea.l	$3C(a0),a1
00019A76 3169 0008 0030             		move.w	8(a1),$30(a0)
00019A7C 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019A82 08E8 0000 0022             		bset	#0,$22(a0)
00019A88 3028 0008                  		move.w	8(a0),d0
00019A8C B069 0008                  		cmp.w	8(a1),d0
00019A90 6E00                       		bgt.s	loc_18D68
00019A92 08A8 0000 0022             		bclr	#0,$22(a0)
00019A98 117C 0002 003A             		move.b	#2,$3A(a0)
00019A9E                            
00019A9E                            loc_18D68:
00019A9E 5428 0024                  		addq.b	#2,$24(a0)
00019AA2                            
00019AA2                            Obj7B_Fall:				; XREF: Obj7B_Index
00019AA2 4EB9 0000 E1F0             		jsr	ObjectFall
00019AA8 2268 003C                  		movea.l	$3C(a0),a1
00019AAC 45F9 0000 0000             		lea	(word_19018).l,a2
00019AB2 7000                       		moveq	#0,d0
00019AB4 1029 001A                  		move.b	$1A(a1),d0
00019AB8 3228 0008                  		move.w	8(a0),d1
00019ABC 9268 0030                  		sub.w	$30(a0),d1
00019AC0 6400                       		bcc.s	loc_18D8E
00019AC2 5440                       		addq.w	#2,d0
00019AC4                            
00019AC4                            loc_18D8E:
00019AC4 D040                       		add.w	d0,d0
00019AC6 3228 0034                  		move.w	$34(a0),d1
00019ACA D272 0000                  		add.w	(a2,d0.w),d1
00019ACE B268 000C                  		cmp.w	$C(a0),d1
00019AD2 6E00                       		bgt.s	locret_18DC4
00019AD4 2268 003C                  		movea.l	$3C(a0),a1
00019AD8 7202                       		moveq	#2,d1
00019ADA 0828 0000 0022             		btst	#0,$22(a0)
00019AE0 6700                       		beq.s	loc_18DAE
00019AE2 7200                       		moveq	#0,d1
00019AE4                            
00019AE4                            loc_18DAE:
00019AE4 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019AEA 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019AF0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019AF6 6000 0000                  		bra.w	loc_18FA2
00019AFA                            ; ===========================================================================
00019AFA                            
00019AFA                            locret_18DC4:
00019AFA 4E75                       		rts	
00019AFC                            ; ===========================================================================
00019AFC                            
00019AFC                            loc_18DC6:				; XREF: Obj7B_Index
00019AFC 2268 003C                  		movea.l	$3C(a0),a1
00019B00 7000                       		moveq	#0,d0
00019B02 1028 003A                  		move.b	$3A(a0),d0
00019B06 9029 003A                  		sub.b	$3A(a1),d0
00019B0A 6700                       		beq.s	loc_18E2A
00019B0C 6400                       		bcc.s	loc_18DDA
00019B0E 4400                       		neg.b	d0
00019B10                            
00019B10                            loc_18DDA:
00019B10 323C F7E8                  		move.w	#-$818,d1
00019B14 343C FEEC                  		move.w	#-$114,d2
00019B18 0C00 0001                  		cmpi.b	#1,d0
00019B1C 6700                       		beq.s	loc_18E00
00019B1E 323C F6A0                  		move.w	#-$960,d1
00019B22 343C FF0C                  		move.w	#-$F4,d2
00019B26 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019B2C 6D00                       		blt.s	loc_18E00
00019B2E 323C F5E0                  		move.w	#-$A20,d1
00019B32 343C FF80                  		move.w	#-$80,d2
00019B36                            
00019B36                            loc_18E00:
00019B36 3141 0012                  		move.w	d1,$12(a0)
00019B3A 3142 0010                  		move.w	d2,$10(a0)
00019B3E 3028 0008                  		move.w	8(a0),d0
00019B42 9068 0030                  		sub.w	$30(a0),d0
00019B46 6400                       		bcc.s	loc_18E16
00019B48 4468 0010                  		neg.w	$10(a0)
00019B4C                            
00019B4C                            loc_18E16:
00019B4C 117C 0001 001A             		move.b	#1,$1A(a0)
00019B52 317C 0020 0028             		move.w	#$20,$28(a0)
00019B58 5428 0024                  		addq.b	#2,$24(a0)
00019B5C 6000 0000                  		bra.w	loc_18EAA
00019B60                            ; ===========================================================================
00019B60                            
00019B60                            loc_18E2A:				; XREF: loc_18DC6
00019B60 45F9 0000 0000             		lea	(word_19018).l,a2
00019B66 7000                       		moveq	#0,d0
00019B68 1029 001A                  		move.b	$1A(a1),d0
00019B6C 343C 0028                  		move.w	#$28,d2
00019B70 3228 0008                  		move.w	8(a0),d1
00019B74 9268 0030                  		sub.w	$30(a0),d1
00019B78 6400                       		bcc.s	loc_18E48
00019B7A 4442                       		neg.w	d2
00019B7C 5440                       		addq.w	#2,d0
00019B7E                            
00019B7E                            loc_18E48:
00019B7E D040                       		add.w	d0,d0
00019B80 3228 0034                  		move.w	$34(a0),d1
00019B84 D272 0000                  		add.w	(a2,d0.w),d1
00019B88 3141 000C                  		move.w	d1,$C(a0)
00019B8C D468 0030                  		add.w	$30(a0),d2
00019B90 3142 0008                  		move.w	d2,8(a0)
00019B94 4268 000E                  		clr.w	$E(a0)
00019B98 4268 000A                  		clr.w	$A(a0)
00019B9C 5368 0028                  		subq.w	#1,$28(a0)
00019BA0 6600                       		bne.s	loc_18E7A
00019BA2 317C 0020 0028             		move.w	#$20,$28(a0)
00019BA8 117C 0008 0024             		move.b	#8,$24(a0)
00019BAE 4E75                       		rts	
00019BB0                            ; ===========================================================================
00019BB0                            
00019BB0                            loc_18E7A:
00019BB0 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019BB6 6600                       		bne.s	loc_18E88
00019BB8 117C 0005 001F             		move.b	#5,$1F(a0)
00019BBE                            
00019BBE                            loc_18E88:
00019BBE 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019BC4 6600                       		bne.s	loc_18E96
00019BC6 117C 0002 001F             		move.b	#2,$1F(a0)
00019BCC                            
00019BCC                            loc_18E96:
00019BCC 5328 001E                  		subq.b	#1,$1E(a0)
00019BD0 6E00                       		bgt.s	locret_18EA8
00019BD2 0868 0000 001A             		bchg	#0,$1A(a0)
00019BD8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019BDE                            
00019BDE                            locret_18EA8:
00019BDE 4E75                       		rts	
00019BE0                            ; ===========================================================================
00019BE0                            
00019BE0                            loc_18EAA:				; XREF: Obj7B_Index
00019BE0 43F8 D040                  		lea	($FFFFD040).w,a1
00019BE4 707A                       		moveq	#$7A,d0
00019BE6 7240                       		moveq	#$40,d1
00019BE8 743E                       		moveq	#$3E,d2
00019BEA                            
00019BEA                            loc_18EB4:
00019BEA B011                       		cmp.b	(a1),d0
00019BEC 6700                       		beq.s	loc_18EC0
00019BEE D2C1                       		adda.w	d1,a1
00019BF0 51CA FFF8                  		dbf	d2,loc_18EB4
00019BF4                            
00019BF4 6000                       		bra.s	loc_18F38
00019BF6                            ; ===========================================================================
00019BF6                            
00019BF6                            loc_18EC0:
00019BF6 3029 0008                  		move.w	8(a1),d0
00019BFA 3229 000C                  		move.w	$C(a1),d1
00019BFE 3428 0008                  		move.w	8(a0),d2
00019C02 3628 000C                  		move.w	$C(a0),d3
00019C06 45FA 0000                  		lea	byte_19022(pc),a2
00019C0A 47FA 0000                  		lea	byte_19026(pc),a3
00019C0E 181A                       		move.b	(a2)+,d4
00019C10 4884                       		ext.w	d4
00019C12 D044                       		add.w	d4,d0
00019C14 181B                       		move.b	(a3)+,d4
00019C16 4884                       		ext.w	d4
00019C18 D444                       		add.w	d4,d2
00019C1A B440                       		cmp.w	d0,d2
00019C1C 6500                       		bcs.s	loc_18F38
00019C1E 181A                       		move.b	(a2)+,d4
00019C20 4884                       		ext.w	d4
00019C22 D044                       		add.w	d4,d0
00019C24 181B                       		move.b	(a3)+,d4
00019C26 4884                       		ext.w	d4
00019C28 D444                       		add.w	d4,d2
00019C2A B042                       		cmp.w	d2,d0
00019C2C 6500                       		bcs.s	loc_18F38
00019C2E 181A                       		move.b	(a2)+,d4
00019C30 4884                       		ext.w	d4
00019C32 D244                       		add.w	d4,d1
00019C34 181B                       		move.b	(a3)+,d4
00019C36 4884                       		ext.w	d4
00019C38 D644                       		add.w	d4,d3
00019C3A B641                       		cmp.w	d1,d3
00019C3C 6500                       		bcs.s	loc_18F38
00019C3E 181A                       		move.b	(a2)+,d4
00019C40 4884                       		ext.w	d4
00019C42 D244                       		add.w	d4,d1
00019C44 181B                       		move.b	(a3)+,d4
00019C46 4884                       		ext.w	d4
00019C48 D644                       		add.w	d4,d3
00019C4A B243                       		cmp.w	d3,d1
00019C4C 6500                       		bcs.s	loc_18F38
00019C4E 5428 0024                  		addq.b	#2,$24(a0)
00019C52 4268 0028                  		clr.w	$28(a0)
00019C56 4229 0020                  		clr.b	$20(a1)
00019C5A 5329 0021                  		subq.b	#1,$21(a1)
00019C5E 6600                       		bne.s	loc_18F38
00019C60 08E9 0007 0022             		bset	#7,$22(a1)
00019C66 4268 0010                  		clr.w	$10(a0)
00019C6A 4268 0012                  		clr.w	$12(a0)
00019C6E                            
00019C6E                            loc_18F38:
00019C6E 4A68 0012                  		tst.w	$12(a0)
00019C72 6A00                       		bpl.s	loc_18F5C
00019C74 4EB9 0000 E1F0             		jsr	ObjectFall
00019C7A 3028 0034                  		move.w	$34(a0),d0
00019C7E 0440 002F                  		subi.w	#$2F,d0
00019C82 B068 000C                  		cmp.w	$C(a0),d0
00019C86 6E00                       		bgt.s	loc_18F58
00019C88 4EB9 0000 E1F0             		jsr	ObjectFall
00019C8E                            
00019C8E                            loc_18F58:
00019C8E 6000 FF20                  		bra.w	loc_18E7A
00019C92                            ; ===========================================================================
00019C92                            
00019C92                            loc_18F5C:
00019C92 4EB9 0000 E1F0             		jsr	ObjectFall
00019C98 2268 003C                  		movea.l	$3C(a0),a1
00019C9C 45F9 0000 0000             		lea	(word_19018).l,a2
00019CA2 7000                       		moveq	#0,d0
00019CA4 1029 001A                  		move.b	$1A(a1),d0
00019CA8 3228 0008                  		move.w	8(a0),d1
00019CAC 9268 0030                  		sub.w	$30(a0),d1
00019CB0 6400                       		bcc.s	loc_18F7E
00019CB2 5440                       		addq.w	#2,d0
00019CB4                            
00019CB4                            loc_18F7E:
00019CB4 D040                       		add.w	d0,d0
00019CB6 3228 0034                  		move.w	$34(a0),d1
00019CBA D272 0000                  		add.w	(a2,d0.w),d1
00019CBE B268 000C                  		cmp.w	$C(a0),d1
00019CC2 6ECA                       		bgt.s	loc_18F58
00019CC4 2268 003C                  		movea.l	$3C(a0),a1
00019CC8 7202                       		moveq	#2,d1
00019CCA 4A68 0010                  		tst.w	$10(a0)
00019CCE 6B00                       		bmi.s	loc_18F9C
00019CD0 7200                       		moveq	#0,d1
00019CD2                            
00019CD2                            loc_18F9C:
00019CD2 317C 0000 0028             		move.w	#0,$28(a0)
00019CD8                            
00019CD8                            loc_18FA2:
00019CD8 1341 003A                  		move.b	d1,$3A(a1)
00019CDC 1141 003A                  		move.b	d1,$3A(a0)
00019CE0 B229 001A                  		cmp.b	$1A(a1),d1
00019CE4 6700                       		beq.s	loc_19008
00019CE6 08A9 0003 0022             		bclr	#3,$22(a1)
00019CEC 6700                       		beq.s	loc_19008
00019CEE 4229 0025                  		clr.b	$25(a1)
00019CF2 137C 0002 0024             		move.b	#2,$24(a1)
00019CF8 45F8 D000                  		lea	($FFFFD000).w,a2
00019CFC 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019D02 446A 0012                  		neg.w	$12(a2)
00019D06 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019D0C 6600                       		bne.s	loc_18FDC
00019D0E E0EA 0012                  		asr	$12(a2)
00019D12                            
00019D12                            loc_18FDC:
00019D12 08EA 0001 0022             		bset	#1,$22(a2)
00019D18 08AA 0003 0022             		bclr	#3,$22(a2)
00019D1E 422A 003C                  		clr.b	$3C(a2)
00019D22 2F08                       		move.l	a0,-(sp)
00019D24 41D2                       		lea	(a2),a0
00019D26 4EBA A37C                  		jsr	Obj01_ChkRoll
00019D2A 205F                       		movea.l	(sp)+,a0
00019D2C 157C 0002 0024             		move.b	#2,$24(a2)
00019D32 303C 00CC                  		move.w	#$CC,d0
00019D36 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019D3C                            
00019D3C                            loc_19008:
00019D3C 4268 0010                  		clr.w	$10(a0)
00019D40 4268 0012                  		clr.w	$12(a0)
00019D44 5428 0024                  		addq.b	#2,$24(a0)
00019D48 6000 FE66                  		bra.w	loc_18E7A
00019D4C                            ; ===========================================================================
00019D4C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019D56                            		even
00019D56 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019D5A                            		even
00019D5A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019D5E                            		even
00019D5E                            ; ===========================================================================
00019D5E                            
00019D5E                            Obj7B_Explode:				; XREF: Obj7B_Index
00019D5E 10BC 003F                  		move.b	#$3F,(a0)
00019D62 4228 0024                  		clr.b	$24(a0)
00019D66 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019D6C 6700                       		beq.s	Obj7B_MakeFrag
00019D6E 4E75                       		rts	
00019D70                            ; ===========================================================================
00019D70                            
00019D70                            Obj7B_MakeFrag:
00019D70 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019D76 7203                       		moveq	#3,d1
00019D78 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019D7C                            
00019D7C                            Obj7B_Loop:
00019D7C 4EB9 0000 E712             		jsr	SingleObjLoad
00019D82 6600                       		bne.s	loc_1909A
00019D84 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019D88 137C 000A 0024             		move.b	#$A,$24(a1)
00019D8E 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019D96 137C 0003 0018             		move.b	#3,$18(a1)
00019D9C 337C 0518 0002             		move.w	#$518,2(a1)
00019DA2 3368 0008 0008             		move.w	8(a0),8(a1)
00019DA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019DAE 335A 0010                  		move.w	(a2)+,$10(a1)
00019DB2 335A 0012                  		move.w	(a2)+,$12(a1)
00019DB6 137C 0098 0020             		move.b	#$98,$20(a1)
00019DBC 0029 0004 0001             		ori.b	#4,1(a1)
00019DC2 08E9 0007 0001             		bset	#7,1(a1)
00019DC8 137C 000C 0019             		move.b	#$C,$19(a1)
00019DCE                            
00019DCE                            loc_1909A:
00019DCE 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019DD2                            
00019DD2 4E75                       		rts	
00019DD4                            ; ===========================================================================
00019DD4 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019DD8 FF60 FDC0                  		dc.w $FF60, $FDC0
00019DDC 0100 FCC0                  		dc.w $100, $FCC0
00019DE0 00A0 FDC0                  		dc.w $A0, $FDC0
00019DE4                            ; ===========================================================================
00019DE4                            
00019DE4                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019DE4 4EB9 0000 E252             		jsr	SpeedToPos
00019DEA 3168 0008 0030             		move.w	8(a0),$30(a0)
00019DF0 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019DF6 0668 0018 0012             		addi.w	#$18,$12(a0)
00019DFC 7004                       		moveq	#4,d0
00019DFE C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019E02 E448                       		lsr.w	#2,d0
00019E04 1140 001A                  		move.b	d0,$1A(a0)
00019E08 4A28 0001                  		tst.b	1(a0)
00019E0C 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019E10 4E75                       		rts	
00019E12                            ; ===========================================================================
00019E12                            ; ---------------------------------------------------------------------------
00019E12                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019E12                            ; ---------------------------------------------------------------------------
00019E12                            Map_obj7B:
00019E12                            	include "_maps\obj7B.asm"
00019E12                            ; ---------------------------------------------------------------------------
00019E12                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019E12                            ; ---------------------------------------------------------------------------
00019E12 0000                       		dc.w byte_190E2-Map_obj7B
00019E14 0000                       		dc.w byte_190E8-Map_obj7B
00019E16 01                         byte_190E2:	dc.b 1
00019E17 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019E1C 01                         byte_190E8:	dc.b 1
00019E1D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019E22                            		even
00019E22                            		even
00019E22                            
00019E22                            ; ===========================================================================
00019E22                            ; ---------------------------------------------------------------------------
00019E22                            ; Object 75 - Eggman (SYZ)
00019E22                            ; ---------------------------------------------------------------------------
00019E22                            
00019E22                            Obj75:					; XREF: Obj_Index
00019E22 7000                       		moveq	#0,d0
00019E24 1028 0024                  		move.b	$24(a0),d0
00019E28 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019E2C 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019E30                            ; ===========================================================================
00019E30 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019E32 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019E34 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019E36 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019E38 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019E3A                            
00019E3A 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019E3D 0401 05                    		dc.b 4,	1, 5
00019E40 0607 05                    		dc.b 6,	7, 5
00019E43 0800 05                    		dc.b 8,	0, 5
00019E46                            ; ===========================================================================
00019E46                            
00019E46                            Obj75_Main:				; XREF: Obj75_Index
00019E46 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019E4C 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019E52 3168 0008 0030             		move.w	8(a0),$30(a0)
00019E58 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019E5E 117C 000F 0020             		move.b	#$F,$20(a0)
00019E64 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019E6A 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019E6E 2248                       		movea.l	a0,a1
00019E70 7203                       		moveq	#3,d1
00019E72 6000                       		bra.s	Obj75_LoadBoss
00019E74                            ; ===========================================================================
00019E74                            
00019E74                            Obj75_Loop:
00019E74 4EB9 0000 E728             		jsr	SingleObjLoad2
00019E7A 6600                       		bne.s	Obj75_ShipMain
00019E7C 12BC 0075                  		move.b	#$75,(a1)
00019E80 3368 0008 0008             		move.w	8(a0),8(a1)
00019E86 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019E8C                            
00019E8C                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019E8C 08A8 0000 0022             		bclr	#0,$22(a0)
00019E92 4229 0025                  		clr.b	$25(a1)
00019E96 135A 0024                  		move.b	(a2)+,$24(a1)
00019E9A 135A 001C                  		move.b	(a2)+,$1C(a1)
00019E9E 135A 0018                  		move.b	(a2)+,$18(a1)
00019EA2 237C 0001 8AAA 0004        		move.l	#Map_Eggman,4(a1)
00019EAA 337C 0400 0002             		move.w	#$400,2(a1)
00019EB0 137C 0004 0001             		move.b	#4,1(a1)
00019EB6 137C 0020 0019             		move.b	#$20,$19(a1)
00019EBC 2348 0034                  		move.l	a0,$34(a1)
00019EC0 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019EC4                            
00019EC4                            Obj75_ShipMain:				; XREF: Obj75_Index
00019EC4 7000                       		moveq	#0,d0
00019EC6 1028 0025                  		move.b	$25(a0),d0
00019ECA 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019ECE 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019ED2 43F9 0001 8A46             		lea	(Ani_Eggman).l,a1
00019ED8 4EB9 0000 B2E4             		jsr	AnimateSprite
00019EDE 7003                       		moveq	#3,d0
00019EE0 C028 0022                  		and.b	$22(a0),d0
00019EE4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019EEA 8128 0001                  		or.b	d0,1(a0)
00019EEE 4EF9 0000 E28C             		jmp	DisplaySprite
00019EF4                            ; ===========================================================================
00019EF4 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019EF8 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019EFC 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019F00                            ; ===========================================================================
00019F00                            
00019F00                            loc_191CC:				; XREF: Obj75_ShipIndex
00019F00 317C FF00 0010             		move.w	#-$100,$10(a0)
00019F06 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019F0C 6400                       		bcc.s	loc_191DE
00019F0E 5428 0025                  		addq.b	#2,$25(a0)
00019F12                            
00019F12                            loc_191DE:
00019F12 1028 003F                  		move.b	$3F(a0),d0
00019F16 5428 003F                  		addq.b	#2,$3F(a0)
00019F1A 4EB9 0000 2D6E             		jsr	(CalcSine).l
00019F20 E440                       		asr.w	#2,d0
00019F22 3140 0012                  		move.w	d0,$12(a0)
00019F26                            
00019F26                            loc_191F2:
00019F26 6100 E6DC                  		bsr.w	BossMove
00019F2A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019F30 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F36                            
00019F36                            loc_19202:
00019F36 3028 0008                  		move.w	8(a0),d0
00019F3A 0440 2C00                  		subi.w	#$2C00,d0
00019F3E EA48                       		lsr.w	#5,d0
00019F40 1140 0034                  		move.b	d0,$34(a0)
00019F44 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019F4A 6400                       		bcc.s	locret_19256
00019F4C 4A28 0022                  		tst.b	$22(a0)
00019F50 6B00                       		bmi.s	loc_19258
00019F52 4A28 0020                  		tst.b	$20(a0)
00019F56 6600                       		bne.s	locret_19256
00019F58 4A28 003E                  		tst.b	$3E(a0)
00019F5C 6600                       		bne.s	loc_1923A
00019F5E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019F64 303C 00AC                  		move.w	#$AC,d0
00019F68 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019F6E                            
00019F6E                            loc_1923A:
00019F6E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019F72 7000                       		moveq	#0,d0
00019F74 4A51                       		tst.w	(a1)
00019F76 6600                       		bne.s	loc_19248
00019F78 303C 0EEE                  		move.w	#$EEE,d0
00019F7C                            
00019F7C                            loc_19248:
00019F7C 3280                       		move.w	d0,(a1)
00019F7E 5328 003E                  		subq.b	#1,$3E(a0)
00019F82 6600                       		bne.s	locret_19256
00019F84 117C 000F 0020             		move.b	#$F,$20(a0)
00019F8A                            
00019F8A                            locret_19256:
00019F8A 4E75                       		rts	
00019F8C                            ; ===========================================================================
00019F8C                            
00019F8C                            loc_19258:				; XREF: loc_19202
00019F8C 7064                       		moveq	#100,d0
00019F8E 6100 0000                  		bsr.w	AddPoints
00019F92 117C 0006 0025             		move.b	#6,$25(a0)
00019F98 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019F9E 4268 0010                  		clr.w	$10(a0)
00019FA2 4E75                       		rts	
00019FA4                            ; ===========================================================================
00019FA4                            
00019FA4                            loc_19270:				; XREF: Obj75_ShipIndex
00019FA4 3028 0030                  		move.w	$30(a0),d0
00019FA8 317C 0140 0010             		move.w	#$140,$10(a0)
00019FAE 0828 0000 0022             		btst	#0,$22(a0)
00019FB4 6600                       		bne.s	loc_1928E
00019FB6 4468 0010                  		neg.w	$10(a0)
00019FBA 0C40 2C08                  		cmpi.w	#$2C08,d0
00019FBE 6E00                       		bgt.s	loc_1929E
00019FC0 6000                       		bra.s	loc_19294
00019FC2                            ; ===========================================================================
00019FC2                            
00019FC2                            loc_1928E:
00019FC2 0C40 2D38                  		cmpi.w	#$2D38,d0
00019FC6 6D00                       		blt.s	loc_1929E
00019FC8                            
00019FC8                            loc_19294:
00019FC8 0868 0000 0022             		bchg	#0,$22(a0)
00019FCE 4228 003D                  		clr.b	$3D(a0)
00019FD2                            
00019FD2                            loc_1929E:
00019FD2 0440 2C10                  		subi.w	#$2C10,d0
00019FD6 0240 001F                  		andi.w	#$1F,d0
00019FDA 0440 001F                  		subi.w	#$1F,d0
00019FDE 6A00                       		bpl.s	loc_192AE
00019FE0 4440                       		neg.w	d0
00019FE2                            
00019FE2                            loc_192AE:
00019FE2 5340                       		subq.w	#1,d0
00019FE4 6E00                       		bgt.s	loc_192E8
00019FE6 4A28 003D                  		tst.b	$3D(a0)
00019FEA 6600                       		bne.s	loc_192E8
00019FEC 3238 D008                  		move.w	($FFFFD008).w,d1
00019FF0 0441 2C00                  		subi.w	#$2C00,d1
00019FF4 EA41                       		asr.w	#5,d1
00019FF6 B228 0034                  		cmp.b	$34(a0),d1
00019FFA 6600                       		bne.s	loc_192E8
00019FFC 7000                       		moveq	#0,d0
00019FFE 1028 0034                  		move.b	$34(a0),d0
0001A002 EB40                       		asl.w	#5,d0
0001A004 0640 2C10                  		addi.w	#$2C10,d0
0001A008 3140 0030                  		move.w	d0,$30(a0)
0001A00C 6100 0000                  		bsr.w	Obj75_FindBlocks
0001A010 5428 0025                  		addq.b	#2,$25(a0)
0001A014 4268 0028                  		clr.w	$28(a0)
0001A018 4268 0010                  		clr.w	$10(a0)
0001A01C                            
0001A01C                            loc_192E8:
0001A01C 6000 FEF4                  		bra.w	loc_191DE
0001A020                            ; ===========================================================================
0001A020                            
0001A020                            loc_192EC:				; XREF: Obj75_ShipIndex
0001A020 7000                       		moveq	#0,d0
0001A022 1028 0028                  		move.b	$28(a0),d0
0001A026 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001A02A 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001A02E                            ; ===========================================================================
0001A02E 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001A030 0000                       		dc.w loc_19348-off_192FA
0001A032 0000                       		dc.w loc_1938E-off_192FA
0001A034 0000                       		dc.w loc_193D0-off_192FA
0001A036                            ; ===========================================================================
0001A036                            
0001A036                            loc_19302:				; XREF: off_192FA
0001A036 317C 0180 0012             		move.w	#$180,$12(a0)
0001A03C 3028 0038                  		move.w	$38(a0),d0
0001A040 0C40 0556                  		cmpi.w	#$556,d0
0001A044 6500                       		bcs.s	loc_19344
0001A046 317C 0556 0038             		move.w	#$556,$38(a0)
0001A04C 4268 003C                  		clr.w	$3C(a0)
0001A050 70FF                       		moveq	#-1,d0
0001A052 3028 0036                  		move.w	$36(a0),d0
0001A056 6700                       		beq.s	loc_1933C
0001A058 2240                       		movea.l	d0,a1
0001A05A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A060 117C 00FF 0029             		move.b	#-1,$29(a0)
0001A066 2348 0034                  		move.l	a0,$34(a1)
0001A06A 317C 0032 003C             		move.w	#$32,$3C(a0)
0001A070                            
0001A070                            loc_1933C:
0001A070 4268 0012                  		clr.w	$12(a0)
0001A074 5428 0028                  		addq.b	#2,$28(a0)
0001A078                            
0001A078                            loc_19344:
0001A078 6000 FEAC                  		bra.w	loc_191F2
0001A07C                            ; ===========================================================================
0001A07C                            
0001A07C                            loc_19348:				; XREF: off_192FA
0001A07C 5368 003C                  		subq.w	#1,$3C(a0)
0001A080 6A00                       		bpl.s	loc_19366
0001A082 5428 0028                  		addq.b	#2,$28(a0)
0001A086 317C F800 0012             		move.w	#-$800,$12(a0)
0001A08C 4A68 0036                  		tst.w	$36(a0)
0001A090 6600                       		bne.s	loc_19362
0001A092 E0E8 0012                  		asr	$12(a0)
0001A096                            
0001A096                            loc_19362:
0001A096 7000                       		moveq	#0,d0
0001A098 6000                       		bra.s	loc_1937C
0001A09A                            ; ===========================================================================
0001A09A                            
0001A09A                            loc_19366:
0001A09A 7000                       		moveq	#0,d0
0001A09C 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001A0A2 6E00                       		bgt.s	loc_1937C
0001A0A4 7002                       		moveq	#2,d0
0001A0A6 0828 0001 003D             		btst	#1,$3D(a0)
0001A0AC 6700                       		beq.s	loc_1937C
0001A0AE 4440                       		neg.w	d0
0001A0B0                            
0001A0B0                            loc_1937C:
0001A0B0 D068 0038                  		add.w	$38(a0),d0
0001A0B4 3140 000C                  		move.w	d0,$C(a0)
0001A0B8 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A0BE 6000 FE76                  		bra.w	loc_19202
0001A0C2                            ; ===========================================================================
0001A0C2                            
0001A0C2                            loc_1938E:				; XREF: off_192FA
0001A0C2 303C 04DA                  		move.w	#$4DA,d0
0001A0C6 4A68 0036                  		tst.w	$36(a0)
0001A0CA 6700                       		beq.s	loc_1939C
0001A0CC 0440 0018                  		subi.w	#$18,d0
0001A0D0                            
0001A0D0                            loc_1939C:
0001A0D0 B068 0038                  		cmp.w	$38(a0),d0
0001A0D4 6D00                       		blt.s	loc_193BE
0001A0D6 317C 0008 003C             		move.w	#8,$3C(a0)
0001A0DC 4A68 0036                  		tst.w	$36(a0)
0001A0E0 6700                       		beq.s	loc_193B4
0001A0E2 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001A0E8                            
0001A0E8                            loc_193B4:
0001A0E8 5428 0028                  		addq.b	#2,$28(a0)
0001A0EC 4268 0012                  		clr.w	$12(a0)
0001A0F0 6000                       		bra.s	loc_193CC
0001A0F2                            ; ===========================================================================
0001A0F2                            
0001A0F2                            loc_193BE:
0001A0F2 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001A0F8 6C00                       		bge.s	loc_193CC
0001A0FA 0668 000C 0012             		addi.w	#$C,$12(a0)
0001A100                            
0001A100                            loc_193CC:
0001A100 6000 FE24                  		bra.w	loc_191F2
0001A104                            ; ===========================================================================
0001A104                            
0001A104                            loc_193D0:				; XREF: off_192FA
0001A104 5368 003C                  		subq.w	#1,$3C(a0)
0001A108 6E00                       		bgt.s	loc_19406
0001A10A 6B00                       		bmi.s	loc_193EE
0001A10C 70FF                       		moveq	#-1,d0
0001A10E 3028 0036                  		move.w	$36(a0),d0
0001A112 6700                       		beq.s	loc_193E8
0001A114 2240                       		movea.l	d0,a1
0001A116 137C 000A 0029             		move.b	#$A,$29(a1)
0001A11C                            
0001A11C                            loc_193E8:
0001A11C 4268 0036                  		clr.w	$36(a0)
0001A120 6000                       		bra.s	loc_19406
0001A122                            ; ===========================================================================
0001A122                            
0001A122                            loc_193EE:
0001A122 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001A128 6600                       		bne.s	loc_19406
0001A12A 4228 0029                  		clr.b	$29(a0)
0001A12E 5528 0025                  		subq.b	#2,$25(a0)
0001A132 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A138 6000                       		bra.s	loc_19446
0001A13A                            ; ===========================================================================
0001A13A                            
0001A13A                            loc_19406:
0001A13A 7001                       		moveq	#1,d0
0001A13C 4A68 0036                  		tst.w	$36(a0)
0001A140 6700                       		beq.s	loc_19410
0001A142 7002                       		moveq	#2,d0
0001A144                            
0001A144                            loc_19410:
0001A144 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001A14A 6700                       		beq.s	loc_19424
0001A14C 6D00                       		blt.s	loc_1941C
0001A14E 4440                       		neg.w	d0
0001A150                            
0001A150                            loc_1941C:
0001A150 4A68 0036                  		tst.w	$36(a0)
0001A154 D168 0038                  		add.w	d0,$38(a0)
0001A158                            
0001A158                            loc_19424:
0001A158 7000                       		moveq	#0,d0
0001A15A 4A68 0036                  		tst.w	$36(a0)
0001A15E 6700                       		beq.s	loc_19438
0001A160 7002                       		moveq	#2,d0
0001A162 0828 0000 003D             		btst	#0,$3D(a0)
0001A168 6700                       		beq.s	loc_19438
0001A16A 4440                       		neg.w	d0
0001A16C                            
0001A16C                            loc_19438:
0001A16C D068 0038                  		add.w	$38(a0),d0
0001A170 3140 000C                  		move.w	d0,$C(a0)
0001A174 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A17A                            
0001A17A                            loc_19446:
0001A17A 6000 FDBA                  		bra.w	loc_19202
0001A17E                            
0001A17E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A17E                            
0001A17E                            
0001A17E                            Obj75_FindBlocks:			; XREF: loc_192AE
0001A17E 4268 0036                  		clr.w	$36(a0)
0001A182 43F8 D040                  		lea	($FFFFD040).w,a1
0001A186 703E                       		moveq	#$3E,d0
0001A188 7276                       		moveq	#$76,d1
0001A18A 1428 0034                  		move.b	$34(a0),d2
0001A18E                            
0001A18E                            Obj75_FindLoop:
0001A18E B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001A190 6600                       		bne.s	loc_1946A	; if not, branch
0001A192 B429 0028                  		cmp.b	$28(a1),d2
0001A196 6600                       		bne.s	loc_1946A
0001A198 3149 0036                  		move.w	a1,$36(a0)
0001A19C 6000                       		bra.s	locret_19472
0001A19E                            ; ===========================================================================
0001A19E                            
0001A19E                            loc_1946A:
0001A19E 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001A1A2 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001A1A6                            
0001A1A6                            locret_19472:
0001A1A6 4E75                       		rts	
0001A1A8                            ; End of function Obj75_FindBlocks
0001A1A8                            
0001A1A8                            ; ===========================================================================
0001A1A8                            
0001A1A8                            loc_19474:				; XREF: Obj75_ShipIndex
0001A1A8 5368 003C                  		subq.w	#1,$3C(a0)
0001A1AC 6B00                       		bmi.s	loc_1947E
0001A1AE 6000 E412                  		bra.w	BossDefeated
0001A1B2                            ; ===========================================================================
0001A1B2                            
0001A1B2                            loc_1947E:
0001A1B2 5428 0025                  		addq.b	#2,$25(a0)
0001A1B6 4268 0012                  		clr.w	$12(a0)
0001A1BA 08E8 0000 0022             		bset	#0,$22(a0)
0001A1C0 08A8 0007 0022             		bclr	#7,$22(a0)
0001A1C6 4268 0010                  		clr.w	$10(a0)
0001A1CA 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001A1D0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A1D4 6600                       		bne.s	loc_194A8
0001A1D6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A1DC                            
0001A1DC                            loc_194A8:
0001A1DC 6000 FD58                  		bra.w	loc_19202
0001A1E0                            ; ===========================================================================
0001A1E0                            
0001A1E0                            loc_194AC:				; XREF: Obj75_ShipIndex
0001A1E0 5268 003C                  		addq.w	#1,$3C(a0)
0001A1E4 6700                       		beq.s	loc_194BC
0001A1E6 6A00                       		bpl.s	loc_194C2
0001A1E8 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A1EE 6000                       		bra.s	loc_194EE
0001A1F0                            ; ===========================================================================
0001A1F0                            
0001A1F0                            loc_194BC:
0001A1F0 4268 0012                  		clr.w	$12(a0)
0001A1F4 6000                       		bra.s	loc_194EE
0001A1F6                            ; ===========================================================================
0001A1F6                            
0001A1F6                            loc_194C2:
0001A1F6 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001A1FC 6500                       		bcs.s	loc_194DA
0001A1FE 6700                       		beq.s	loc_194E0
0001A200 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001A206 6500                       		bcs.s	loc_194EE
0001A208 5428 0025                  		addq.b	#2,$25(a0)
0001A20C 6000                       		bra.s	loc_194EE
0001A20E                            ; ===========================================================================
0001A20E                            
0001A20E                            loc_194DA:
0001A20E 5168 0012                  		subq.w	#8,$12(a0)
0001A212 6000                       		bra.s	loc_194EE
0001A214                            ; ===========================================================================
0001A214                            
0001A214                            loc_194E0:
0001A214 4268 0012                  		clr.w	$12(a0)
0001A218 303C 0085                  		move.w	#$85,d0
0001A21C 4EB9 0000 15CE             		jsr	(PlaySound).l	; play SYZ music
0001A222                            
0001A222                            loc_194EE:
0001A222 6000 FD02                  		bra.w	loc_191F2
0001A226                            ; ===========================================================================
0001A226                            
0001A226                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A226 317C 0400 0010             		move.w	#$400,$10(a0)
0001A22C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A232 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A238 6400                       		bcc.s	loc_1950C
0001A23A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A23E 6000                       		bra.s	loc_19512
0001A240                            ; ===========================================================================
0001A240                            
0001A240                            loc_1950C:
0001A240 4A28 0001                  		tst.b	1(a0)
0001A244 6A00                       		bpl.s	Obj75_ShipDelete
0001A246                            
0001A246                            loc_19512:
0001A246 6100 E3BC                  		bsr.w	BossMove
0001A24A 6000 FCC6                  		bra.w	loc_191DE
0001A24E                            ; ===========================================================================
0001A24E                            
0001A24E                            Obj75_ShipDelete:
0001A24E 4EF9 0000 E2C8             		jmp	DeleteObject
0001A254                            ; ===========================================================================
0001A254                            
0001A254                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A254 7201                       		moveq	#1,d1
0001A256 2268 0034                  		movea.l	$34(a0),a1
0001A25A 7000                       		moveq	#0,d0
0001A25C 1029 0025                  		move.b	$25(a1),d0
0001A260 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A264 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A268 1141 001C                  		move.b	d1,$1C(a0)
0001A26C 1010                       		move.b	(a0),d0
0001A26E B011                       		cmp.b	(a1),d0
0001A270 6600                       		bne.s	Obj75_FaceDelete
0001A272 6000                       		bra.s	loc_195BE
0001A274                            ; ===========================================================================
0001A274                            
0001A274                            Obj75_FaceDelete:
0001A274 4EF9 0000 E2C8             		jmp	DeleteObject
0001A27A                            ; ===========================================================================
0001A27A 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A27E 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A282 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A286                            ; ===========================================================================
0001A286                            
0001A286                            loc_19552:				; XREF: off_19546
0001A286 720A                       		moveq	#$A,d1
0001A288 4E75                       		rts	
0001A28A                            ; ===========================================================================
0001A28A                            
0001A28A                            loc_19556:				; XREF: off_19546
0001A28A 7206                       		moveq	#6,d1
0001A28C 4E75                       		rts	
0001A28E                            ; ===========================================================================
0001A28E                            
0001A28E                            loc_1955A:				; XREF: off_19546
0001A28E 7000                       		moveq	#0,d0
0001A290 1029 0028                  		move.b	$28(a1),d0
0001A294 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A298 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A29C                            ; ===========================================================================
0001A29C 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A2A0 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A2A4                            ; ===========================================================================
0001A2A4                            
0001A2A4                            loc_19570:				; XREF: off_19568
0001A2A4 6000                       		bra.s	loc_19574
0001A2A6                            ; ===========================================================================
0001A2A6                            
0001A2A6                            loc_19572:				; XREF: off_19568
0001A2A6 7206                       		moveq	#6,d1
0001A2A8                            
0001A2A8                            loc_19574:				; XREF: off_19546
0001A2A8 4A29 0020                  		tst.b	$20(a1)
0001A2AC 6600                       		bne.s	loc_1957E
0001A2AE 7205                       		moveq	#5,d1
0001A2B0 4E75                       		rts	
0001A2B2                            ; ===========================================================================
0001A2B2                            
0001A2B2                            loc_1957E:
0001A2B2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A2B8 6500                       		bcs.s	locret_19588
0001A2BA 7204                       		moveq	#4,d1
0001A2BC                            
0001A2BC                            locret_19588:
0001A2BC 4E75                       		rts	
0001A2BE                            ; ===========================================================================
0001A2BE                            
0001A2BE                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A2BE 117C 0007 001C             		move.b	#7,$1C(a0)
0001A2C4 2268 0034                  		movea.l	$34(a0),a1
0001A2C8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A2CE 6600                       		bne.s	loc_195AA
0001A2D0 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A2D6 4A28 0001                  		tst.b	1(a0)
0001A2DA 6A00                       		bpl.s	Obj75_FlameDelete
0001A2DC 6000                       		bra.s	loc_195B6
0001A2DE                            ; ===========================================================================
0001A2DE                            
0001A2DE                            loc_195AA:
0001A2DE 4A69 0010                  		tst.w	$10(a1)
0001A2E2 6700                       		beq.s	loc_195B6
0001A2E4 117C 0008 001C             		move.b	#8,$1C(a0)
0001A2EA                            
0001A2EA                            loc_195B6:
0001A2EA 6000                       		bra.s	loc_195BE
0001A2EC                            ; ===========================================================================
0001A2EC                            
0001A2EC                            Obj75_FlameDelete:
0001A2EC 4EF9 0000 E2C8             		jmp	DeleteObject
0001A2F2                            ; ===========================================================================
0001A2F2                            
0001A2F2                            loc_195BE:
0001A2F2 43F9 0001 8A46             		lea	(Ani_Eggman).l,a1
0001A2F8 4EB9 0000 B2E4             		jsr	AnimateSprite
0001A2FE 2268 0034                  		movea.l	$34(a0),a1
0001A302 3169 0008 0008             		move.w	8(a1),8(a0)
0001A308 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A30E                            
0001A30E                            loc_195DA:
0001A30E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A314 7003                       		moveq	#3,d0
0001A316 C028 0022                  		and.b	$22(a0),d0
0001A31A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A320 8128 0001                  		or.b	d0,1(a0)
0001A324 4EF9 0000 E28C             		jmp	DisplaySprite
0001A32A                            ; ===========================================================================
0001A32A                            
0001A32A                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A32A 217C 0001 8B72 0004        		move.l	#Map_BossItems,4(a0)
0001A332 317C 246C 0002             		move.w	#$246C,2(a0)
0001A338 117C 0005 001A             		move.b	#5,$1A(a0)
0001A33E 2268 0034                  		movea.l	$34(a0),a1
0001A342 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A348 6600                       		bne.s	loc_1961C
0001A34A 4A28 0001                  		tst.b	1(a0)
0001A34E 6A00                       		bpl.s	Obj75_SpikeDelete
0001A350                            
0001A350                            loc_1961C:
0001A350 3169 0008 0008             		move.w	8(a1),8(a0)
0001A356 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A35C 3028 003C                  		move.w	$3C(a0),d0
0001A360 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A366 6600                       		bne.s	loc_19652
0001A368 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A36E 6700                       		beq.s	loc_1964C
0001A370 4A29 0028                  		tst.b	$28(a1)
0001A374 6600                       		bne.s	loc_19658
0001A376 0C40 0094                  		cmpi.w	#$94,d0
0001A37A 6C00                       		bge.s	loc_19658
0001A37C 5E40                       		addq.w	#7,d0
0001A37E 6000                       		bra.s	loc_19658
0001A380                            ; ===========================================================================
0001A380                            
0001A380                            loc_1964C:
0001A380 4A69 003C                  		tst.w	$3C(a1)
0001A384 6A00                       		bpl.s	loc_19658
0001A386                            
0001A386                            loc_19652:
0001A386 4A40                       		tst.w	d0
0001A388 6F00                       		ble.s	loc_19658
0001A38A 5B40                       		subq.w	#5,d0
0001A38C                            
0001A38C                            loc_19658:
0001A38C 3140 003C                  		move.w	d0,$3C(a0)
0001A390 E440                       		asr.w	#2,d0
0001A392 D168 000C                  		add.w	d0,$C(a0)
0001A396 117C 0008 0019             		move.b	#8,$19(a0)
0001A39C 117C 000C 0016             		move.b	#$C,$16(a0)
0001A3A2 4228 0020                  		clr.b	$20(a0)
0001A3A6 2268 0034                  		movea.l	$34(a0),a1
0001A3AA 4A29 0020                  		tst.b	$20(a1)
0001A3AE 6700                       		beq.s	loc_19688
0001A3B0 4A29 0029                  		tst.b	$29(a1)
0001A3B4 6600                       		bne.s	loc_19688
0001A3B6 117C 0084 0020             		move.b	#$84,$20(a0)
0001A3BC                            
0001A3BC                            loc_19688:
0001A3BC 6000 FF50                  		bra.w	loc_195DA
0001A3C0                            ; ===========================================================================
0001A3C0                            
0001A3C0                            Obj75_SpikeDelete:
0001A3C0 4EF9 0000 E2C8             		jmp	DeleteObject
0001A3C6                            ; ===========================================================================
0001A3C6                            ; ---------------------------------------------------------------------------
0001A3C6                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A3C6                            ; ---------------------------------------------------------------------------
0001A3C6                            
0001A3C6                            Obj76:					; XREF: Obj_Index
0001A3C6 7000                       		moveq	#0,d0
0001A3C8 1028 0024                  		move.b	$24(a0),d0
0001A3CC 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A3D0 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A3D4                            ; ===========================================================================
0001A3D4 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A3D6 0000                       		dc.w Obj76_Action-Obj76_Index
0001A3D8 0000                       		dc.w loc_19762-Obj76_Index
0001A3DA                            ; ===========================================================================
0001A3DA                            
0001A3DA                            Obj76_Main:				; XREF: Obj76_Index
0001A3DA 7800                       		moveq	#0,d4
0001A3DC 3A3C 2C10                  		move.w	#$2C10,d5
0001A3E0 7C09                       		moveq	#9,d6
0001A3E2 43D0                       		lea	(a0),a1
0001A3E4 6000                       		bra.s	Obj76_MakeBlock
0001A3E6                            ; ===========================================================================
0001A3E6                            
0001A3E6                            Obj76_Loop:
0001A3E6 4EB9 0000 E712             		jsr	SingleObjLoad
0001A3EC 6600                       		bne.s	Obj76_ExitLoop
0001A3EE                            
0001A3EE                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A3EE 12BC 0076                  		move.b	#$76,(a1)
0001A3F2 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A3FA 337C 4000 0002             		move.w	#$4000,2(a1)
0001A400 137C 0004 0001             		move.b	#4,1(a1)
0001A406 137C 0010 0019             		move.b	#$10,$19(a1)
0001A40C 137C 0010 0016             		move.b	#$10,$16(a1)
0001A412 137C 0003 0018             		move.b	#3,$18(a1)
0001A418 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A41C 337C 0582 000C             		move.w	#$582,$C(a1)
0001A422 3344 0028                  		move.w	d4,$28(a1)
0001A426 0644 0101                  		addi.w	#$101,d4
0001A42A 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A42E 5429 0024                  		addq.b	#2,$24(a1)
0001A432 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A436                            
0001A436                            Obj76_ExitLoop:
0001A436 4E75                       		rts	
0001A438                            ; ===========================================================================
0001A438                            
0001A438                            Obj76_Action:				; XREF: Obj76_Index
0001A438 1028 0029                  		move.b	$29(a0),d0
0001A43C B028 0028                  		cmp.b	$28(a0),d0
0001A440 6700                       		beq.s	Obj76_Solid
0001A442 4A00                       		tst.b	d0
0001A444 6B00                       		bmi.s	loc_19718
0001A446                            
0001A446                            loc_19712:
0001A446 6100 0000                  		bsr.w	Obj76_Break
0001A44A 6000                       		bra.s	Obj76_Display
0001A44C                            ; ===========================================================================
0001A44C                            
0001A44C                            loc_19718:
0001A44C 2268 0034                  		movea.l	$34(a0),a1
0001A450 4A29 0021                  		tst.b	$21(a1)
0001A454 67F0                       		beq.s	loc_19712
0001A456 3169 0008 0008             		move.w	8(a1),8(a0)
0001A45C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A462 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A468 B2C8                       		cmpa.w	a0,a1
0001A46A 6500                       		bcs.s	Obj76_Display
0001A46C 3029 0012                  		move.w	$12(a1),d0
0001A470 48C0                       		ext.l	d0
0001A472 E080                       		asr.l	#8,d0
0001A474 D168 000C                  		add.w	d0,$C(a0)
0001A478 6000                       		bra.s	Obj76_Display
0001A47A                            ; ===========================================================================
0001A47A                            
0001A47A                            Obj76_Solid:				; XREF: Obj76_Action
0001A47A 323C 001B                  		move.w	#$1B,d1
0001A47E 343C 0010                  		move.w	#$10,d2
0001A482 363C 0011                  		move.w	#$11,d3
0001A486 3828 0008                  		move.w	8(a0),d4
0001A48A 4EB9 0001 0656             		jsr	SolidObject
0001A490                            
0001A490                            Obj76_Display:				; XREF: Obj76_Action
0001A490 4EF9 0000 E28C             		jmp	DisplaySprite
0001A496                            ; ===========================================================================
0001A496                            
0001A496                            loc_19762:				; XREF: Obj76_Index
0001A496 4A28 0001                  		tst.b	1(a0)
0001A49A 6A00                       		bpl.s	Obj76_Delete
0001A49C 4EB9 0000 E1F0             		jsr	ObjectFall
0001A4A2 4EF9 0000 E28C             		jmp	DisplaySprite
0001A4A8                            ; ===========================================================================
0001A4A8                            
0001A4A8                            Obj76_Delete:
0001A4A8 4EF9 0000 E2C8             		jmp	DeleteObject
0001A4AE                            
0001A4AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A4AE                            
0001A4AE                            
0001A4AE                            Obj76_Break:				; XREF: Obj76_Action
0001A4AE 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A4B2 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A4B6 7801                       		moveq	#1,d4
0001A4B8 7203                       		moveq	#3,d1
0001A4BA 7438                       		moveq	#$38,d2
0001A4BC 5428 0024                  		addq.b	#2,$24(a0)
0001A4C0 117C 0008 0019             		move.b	#8,$19(a0)
0001A4C6 117C 0008 0016             		move.b	#8,$16(a0)
0001A4CC 43D0                       		lea	(a0),a1
0001A4CE 6000                       		bra.s	Obj76_MakeFrag
0001A4D0                            ; ===========================================================================
0001A4D0                            
0001A4D0                            Obj76_LoopFrag:
0001A4D0 4EB9 0000 E728             		jsr	SingleObjLoad2
0001A4D6 6600                       		bne.s	loc_197D4
0001A4D8                            
0001A4D8                            Obj76_MakeFrag:
0001A4D8 45D0                       		lea	(a0),a2
0001A4DA 47D1                       		lea	(a1),a3
0001A4DC 7603                       		moveq	#3,d3
0001A4DE                            
0001A4DE                            loc_197AA:
0001A4DE 26DA                       		move.l	(a2)+,(a3)+
0001A4E0 26DA                       		move.l	(a2)+,(a3)+
0001A4E2 26DA                       		move.l	(a2)+,(a3)+
0001A4E4 26DA                       		move.l	(a2)+,(a3)+
0001A4E6 51CB FFF6                  		dbf	d3,loc_197AA
0001A4EA                            
0001A4EA 335C 0010                  		move.w	(a4)+,$10(a1)
0001A4EE 335C 0012                  		move.w	(a4)+,$12(a1)
0001A4F2 361D                       		move.w	(a5)+,d3
0001A4F4 D769 0008                  		add.w	d3,8(a1)
0001A4F8 361D                       		move.w	(a5)+,d3
0001A4FA D769 000C                  		add.w	d3,$C(a1)
0001A4FE 1344 001A                  		move.b	d4,$1A(a1)
0001A502 5244                       		addq.w	#1,d4
0001A504 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A508                            
0001A508                            loc_197D4:
0001A508 303C 00CB                  		move.w	#$CB,d0
0001A50C 4EF9 0000 15D4             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A512                            ; End of function Obj76_Break
0001A512                            
0001A512                            ; ===========================================================================
0001A512 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A516 0180 FE00                  		dc.w $180, $FE00
0001A51A FF00 FF00                  		dc.w $FF00, $FF00
0001A51E 0100 FF00                  		dc.w $100, $FF00
0001A522 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A526 0010 0000                  		dc.w $10, 0
0001A52A 0000 0010                  		dc.w 0,	$10
0001A52E 0010 0010                  		dc.w $10, $10
0001A532                            ; ---------------------------------------------------------------------------
0001A532                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A532                            ; ---------------------------------------------------------------------------
0001A532                            Map_obj76:
0001A532                            	include "_maps\obj76.asm"
0001A532                            ; ---------------------------------------------------------------------------
0001A532                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A532                            ; ---------------------------------------------------------------------------
0001A532 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A536 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A53A 0000                       		dc.w byte_19826-Map_obj76
0001A53C 02                         byte_19808:	dc.b 2
0001A53D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A542 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A547 00                         		dc.b 0
0001A548 01                         byte_19814:	dc.b 1
0001A549 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A54E 01                         byte_1981A:	dc.b 1
0001A54F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A554 01                         byte_19820:	dc.b 1
0001A555 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A55A 01                         byte_19826:	dc.b 1
0001A55B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A560                            		even
0001A560                            		even
0001A560                            
0001A560                            ; ===========================================================================
0001A560                            
0001A560                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A560 4EF9 0000 E2C8             		jmp	DeleteObject
0001A566                            ; ===========================================================================
0001A566                            ; ---------------------------------------------------------------------------
0001A566                            ; Object 82 - Eggman (SBZ2)
0001A566                            ; ---------------------------------------------------------------------------
0001A566                            
0001A566                            Obj82:					; XREF: Obj_Index
0001A566 7000                       		moveq	#0,d0
0001A568 1028 0024                  		move.b	$24(a0),d0
0001A56C 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A570 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A574                            ; ===========================================================================
0001A574 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A576 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A578 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A57A                            
0001A57A 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A57D 0400 03                    		dc.b 4,	0, 3
0001A580                            ; ===========================================================================
0001A580                            
0001A580                            Obj82_Main:				; XREF: Obj82_Index
0001A580 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A584 317C 2160 0008             		move.w	#$2160,8(a0)
0001A58A 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A590 117C 000F 0020             		move.b	#$F,$20(a0)
0001A596 117C 0010 0021             		move.b	#$10,$21(a0)
0001A59C 08A8 0000 0022             		bclr	#0,$22(a0)
0001A5A2 4228 0025                  		clr.b	$25(a0)
0001A5A6 115A 0024                  		move.b	(a2)+,$24(a0)
0001A5AA 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A5AE 115A 0018                  		move.b	(a2)+,$18(a0)
0001A5B2 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A5BA 317C 0400 0002             		move.w	#$400,2(a0)
0001A5C0 117C 0004 0001             		move.b	#4,1(a0)
0001A5C6 08E8 0007 0001             		bset	#7,1(a0)
0001A5CC 117C 0020 0019             		move.b	#$20,$19(a0)
0001A5D2 4EB9 0000 E728             		jsr	SingleObjLoad2
0001A5D8 6600                       		bne.s	Obj82_Eggman
0001A5DA 2348 0034                  		move.l	a0,$34(a1)
0001A5DE 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A5E2 337C 2130 0008             		move.w	#$2130,8(a1)
0001A5E8 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A5EE 4228 0025                  		clr.b	$25(a0)
0001A5F2 135A 0024                  		move.b	(a2)+,$24(a1)
0001A5F6 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A5FA 135A 0018                  		move.b	(a2)+,$18(a1)
0001A5FE 237C 0000 CA18 0004        		move.l	#Map_obj32,4(a1)
0001A606 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A60C 137C 0004 0001             		move.b	#4,1(a1)
0001A612 08E9 0007 0001             		bset	#7,1(a1)
0001A618 137C 0010 0019             		move.b	#$10,$19(a1)
0001A61E 137C 0000 001A             		move.b	#0,$1A(a1)
0001A624                            
0001A624                            Obj82_Eggman:				; XREF: Obj82_Index
0001A624 7000                       		moveq	#0,d0
0001A626 1028 0025                  		move.b	$25(a0),d0
0001A62A 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A62E 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A632 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A636 4EB9 0000 B2E4             		jsr	AnimateSprite
0001A63C 4EF9 0000 E28C             		jmp	DisplaySprite
0001A642                            ; ===========================================================================
0001A642 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A644 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A646 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A648 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A64A                            ; ===========================================================================
0001A64A                            
0001A64A                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A64A 3028 0008                  		move.w	8(a0),d0
0001A64E 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A652 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A656 6400                       		bcc.s	loc_19934	; if not, branch
0001A658 5428 0025                  		addq.b	#2,$25(a0)
0001A65C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A662 117C 0001 001C             		move.b	#1,$1C(a0)
0001A668                            
0001A668                            loc_19934:				; XREF: Obj82_EggIndex
0001A668 4EF9 0000 E252             		jmp	SpeedToPos
0001A66E                            ; ===========================================================================
0001A66E                            
0001A66E                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A66E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A672 6600                       		bne.s	loc_19954	; if time remains, branch
0001A674 5428 0025                  		addq.b	#2,$25(a0)
0001A678 117C 0002 001C             		move.b	#2,$1C(a0)
0001A67E 5868 000C                  		addq.w	#4,$C(a0)
0001A682 317C 000F 003C             		move.w	#15,$3C(a0)
0001A688                            
0001A688                            loc_19954:
0001A688 60DE                       		bra.s	loc_19934
0001A68A                            ; ===========================================================================
0001A68A                            
0001A68A                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A68A 5368 003C                  		subq.w	#1,$3C(a0)
0001A68E 6E00                       		bgt.s	loc_199D0
0001A690 6600                       		bne.s	loc_1996A
0001A692 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A698 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A69E                            
0001A69E                            loc_1996A:
0001A69E 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A6A4 6E00                       		bgt.s	loc_19976
0001A6A6 4268 0010                  		clr.w	$10(a0)
0001A6AA                            
0001A6AA                            loc_19976:
0001A6AA 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A6B0 4A68 0012                  		tst.w	$12(a0)
0001A6B4 6B00                       		bmi.s	Obj82_FindBlocks
0001A6B6 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A6BC 6500                       		bcs.s	Obj82_FindBlocks
0001A6BE 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A6C4 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A6CA 6500                       		bcs.s	Obj82_FindBlocks
0001A6CC 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A6D2 4268 0012                  		clr.w	$12(a0)
0001A6D6                            
0001A6D6                            Obj82_FindBlocks:
0001A6D6 3028 0010                  		move.w	$10(a0),d0
0001A6DA 8068 0012                  		or.w	$12(a0),d0
0001A6DE 6600                       		bne.s	loc_199D0
0001A6E0 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A6E4 703E                       		moveq	#$3E,d0
0001A6E6 7240                       		moveq	#$40,d1
0001A6E8                            
0001A6E8                            Obj82_FindLoop:	
0001A6E8 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A6EA 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A6EE 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A6F2                            
0001A6F2 6600                       		bne.s	loc_199D0
0001A6F4 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A6FA 5428 0025                  		addq.b	#2,$25(a0)
0001A6FE 117C 0001 001C             		move.b	#1,$1C(a0)
0001A704                            
0001A704                            loc_199D0:
0001A704 6000 FF62                  		bra.w	loc_19934
0001A708                            ; ===========================================================================
0001A708                            
0001A708                            Obj82_Switch:				; XREF: Obj82_Index
0001A708 7000                       		moveq	#0,d0
0001A70A 1028 0025                  		move.b	$25(a0),d0
0001A70E 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A712 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A716                            ; ===========================================================================
0001A716 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A718 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A71A                            ; ===========================================================================
0001A71A                            
0001A71A                            loc_199E6:				; XREF: Obj82_SwIndex
0001A71A 2268 0034                  		movea.l	$34(a0),a1
0001A71E 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A724 6600                       		bne.s	Obj82_SwDisplay
0001A726 117C 0001 001A             		move.b	#1,$1A(a0)
0001A72C 5428 0025                  		addq.b	#2,$25(a0)
0001A730                            
0001A730                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A730 4EF9 0000 E28C             		jmp	DisplaySprite
0001A736                            ; ===========================================================================
0001A736                            Ani_obj82:
0001A736                            	include "_anim\obj82.asm"
0001A736                            ; ---------------------------------------------------------------------------
0001A736                            ; Animation script - Eggman (SBZ2)
0001A736                            ; ---------------------------------------------------------------------------
0001A736 0000                       		dc.w byte_19A10-Ani_obj82
0001A738 0000                       		dc.w byte_19A14-Ani_obj82
0001A73A 0000                       		dc.w byte_19A18-Ani_obj82
0001A73C 0000                       		dc.w byte_19A20-Ani_obj82
0001A73E 0000                       		dc.w byte_19A24-Ani_obj82
0001A740 0000                       		dc.w byte_19A2A-Ani_obj82
0001A742 0000                       		dc.w byte_19A30-Ani_obj82
0001A744 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A748 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A74C 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A754 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A758 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A75E 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A764 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A768                            		even
0001A768                            		even
0001A768                            
0001A768                            ; ---------------------------------------------------------------------------
0001A768                            ; Sprite mappings - Eggman (SBZ2)
0001A768                            ; ---------------------------------------------------------------------------
0001A768                            Map_obj82:
0001A768                            	include "_maps\obj82.asm"
0001A768                            ; ================================================================================
0001A768                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A768                            ; ================================================================================
0001A768                            
0001A768                            DATAA16Z12RYSAF:
0001A768 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A76C 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A770 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A774 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A778 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A77C 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A77E 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A77F FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A784 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A789 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A78E 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A78F E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A794 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A799 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A79E FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A7A3 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A7A4 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A7A9 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A7AE 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A7B3 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A7B8 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A7B9 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A7BE 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A7C3 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A7C8 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A7C9 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A7CE 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A7D3 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A7D8 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A7DD 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A7DE E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A7E3 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A7E8 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A7ED 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A7F2 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A7F3 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A7F8 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A7FD 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A802 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A807 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A80C F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A811 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A816 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A817 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A81C E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A821 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A826 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A82B 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A82C 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A831 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A836 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A83B 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A840 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A845 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A846 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A84B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A850 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A855 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A85A E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A85F F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A864 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A869 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A86E 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A86F EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A874 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A879 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A87E                            	even
0001A87E                            	even
0001A87E                            
0001A87E                            ; ===========================================================================
0001A87E                            ; ---------------------------------------------------------------------------
0001A87E                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A87E                            ; ---------------------------------------------------------------------------
0001A87E                            
0001A87E                            Obj83:					; XREF: Obj_Index
0001A87E 7000                       		moveq	#0,d0
0001A880 1028 0024                  		move.b	$24(a0),d0
0001A884 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A888 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A88C                            ; ===========================================================================
0001A88C 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A88E 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A890 0000                       		dc.w loc_19C36-Obj83_Index
0001A892 0000                       		dc.w loc_19C62-Obj83_Index
0001A894 0000                       		dc.w loc_19C72-Obj83_Index
0001A896 0000                       		dc.w loc_19C80-Obj83_Index
0001A898                            ; ===========================================================================
0001A898                            
0001A898                            Obj83_Main:				; XREF: Obj83_Index
0001A898 317C 2080 0008             		move.w	#$2080,8(a0)
0001A89E 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A8A4 117C 0080 0019             		move.b	#$80,$19(a0)
0001A8AA 117C 0010 0016             		move.b	#$10,$16(a0)
0001A8B0 117C 0004 0001             		move.b	#4,1(a0)
0001A8B6 08E8 0007 0001             		bset	#7,1(a0)
0001A8BC 7800                       		moveq	#0,d4
0001A8BE 3A3C 2010                  		move.w	#$2010,d5
0001A8C2 7C07                       		moveq	#7,d6
0001A8C4 45E8 0030                  		lea	$30(a0),a2
0001A8C8                            
0001A8C8                            Obj83_MakeBlock:
0001A8C8 4EB9 0000 E712             		jsr	SingleObjLoad
0001A8CE 6600                       		bne.s	Obj83_ExitMake
0001A8D0 34C9                       		move.w	a1,(a2)+
0001A8D2 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A8D6 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A8DE 337C 4518 0002             		move.w	#$4518,2(a1)
0001A8E4 137C 0004 0001             		move.b	#4,1(a1)
0001A8EA 137C 0010 0019             		move.b	#$10,$19(a1)
0001A8F0 137C 0010 0016             		move.b	#$10,$16(a1)
0001A8F6 137C 0003 0018             		move.b	#3,$18(a1)
0001A8FC 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A900 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A906 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A90A 137C 0008 0024             		move.b	#8,$24(a1)
0001A910 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A914                            
0001A914                            Obj83_ExitMake:
0001A914 5428 0024                  		addq.b	#2,$24(a0)
0001A918 4E75                       		rts	
0001A91A                            ; ===========================================================================
0001A91A                            
0001A91A                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A91A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A920 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A922 4228 001A                  		clr.b	$1A(a0)
0001A926 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A92A                            
0001A92A                            Obj83_Solid:
0001A92A 7000                       		moveq	#0,d0
0001A92C 1028 001A                  		move.b	$1A(a0),d0
0001A930 4400                       		neg.b	d0
0001A932 4880                       		ext.w	d0
0001A934 5040                       		addq.w	#8,d0
0001A936 E940                       		asl.w	#4,d0
0001A938 383C 2100                  		move.w	#$2100,d4
0001A93C 9840                       		sub.w	d0,d4
0001A93E 1140 0019                  		move.b	d0,$19(a0)
0001A942 3144 0008                  		move.w	d4,8(a0)
0001A946 720B                       		moveq	#$B,d1
0001A948 D240                       		add.w	d0,d1
0001A94A 7410                       		moveq	#$10,d2
0001A94C 7611                       		moveq	#$11,d3
0001A94E 4EF9 0001 0656             		jmp	SolidObject
0001A954                            ; ===========================================================================
0001A954                            
0001A954                            loc_19C36:				; XREF: Obj83_Index
0001A954 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A95A 6400                       		bcc.s	Obj83_Solid2
0001A95C 70FF                       		moveq	#-1,d0
0001A95E 1028 001A                  		move.b	$1A(a0),d0
0001A962 4880                       		ext.w	d0
0001A964 D040                       		add.w	d0,d0
0001A966 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A96A 2240                       		movea.l	d0,a1
0001A96C 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A972 5228 001A                  		addq.b	#1,$1A(a0)
0001A976 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A97C 6700                       		beq.s	loc_19C62
0001A97E                            
0001A97E                            Obj83_Solid2:
0001A97E 60AA                       		bra.s	Obj83_Solid
0001A980                            ; ===========================================================================
0001A980                            
0001A980                            loc_19C62:				; XREF: Obj83_Index
0001A980 08A8 0003 0022             		bclr	#3,$22(a0)
0001A986 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A98C 6000 FBD2                  		bra.w	loc_1982C
0001A990                            ; ===========================================================================
0001A990                            
0001A990                            loc_19C72:				; XREF: Obj83_Index
0001A990 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A996 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A998 4EF9 0000 E28C             		jmp	DisplaySprite
0001A99E                            ; ===========================================================================
0001A99E                            
0001A99E                            loc_19C80:				; XREF: Obj83_Index
0001A99E 4A28 0001                  		tst.b	1(a0)
0001A9A2 6A00 FBBC                  		bpl.w	loc_1982C
0001A9A6 4EB9 0000 E1F0             		jsr	ObjectFall
0001A9AC 4EF9 0000 E28C             		jmp	DisplaySprite
0001A9B2                            ; ===========================================================================
0001A9B2                            
0001A9B2                            Obj83_Break:				; XREF: loc_19C72
0001A9B2 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A9B6 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A9BA 7801                       		moveq	#1,d4
0001A9BC 7203                       		moveq	#3,d1
0001A9BE 7438                       		moveq	#$38,d2
0001A9C0 5428 0024                  		addq.b	#2,$24(a0)
0001A9C4 117C 0008 0019             		move.b	#8,$19(a0)
0001A9CA 117C 0008 0016             		move.b	#8,$16(a0)
0001A9D0 43D0                       		lea	(a0),a1
0001A9D2 6000                       		bra.s	Obj83_MakeFrag
0001A9D4                            ; ===========================================================================
0001A9D4                            
0001A9D4                            Obj83_LoopFrag:
0001A9D4 4EB9 0000 E728             		jsr	SingleObjLoad2
0001A9DA 6600                       		bne.s	Obj83_BreakSnd
0001A9DC                            
0001A9DC                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A9DC 45D0                       		lea	(a0),a2
0001A9DE 47D1                       		lea	(a1),a3
0001A9E0 7603                       		moveq	#3,d3
0001A9E2                            
0001A9E2                            loc_19CC4:
0001A9E2 26DA                       		move.l	(a2)+,(a3)+
0001A9E4 26DA                       		move.l	(a2)+,(a3)+
0001A9E6 26DA                       		move.l	(a2)+,(a3)+
0001A9E8 26DA                       		move.l	(a2)+,(a3)+
0001A9EA 51CB FFF6                  		dbf	d3,loc_19CC4
0001A9EE                            
0001A9EE 335C 0012                  		move.w	(a4)+,$12(a1)
0001A9F2 361D                       		move.w	(a5)+,d3
0001A9F4 D769 0008                  		add.w	d3,8(a1)
0001A9F8 361D                       		move.w	(a5)+,d3
0001A9FA D769 000C                  		add.w	d3,$C(a1)
0001A9FE 1344 001A                  		move.b	d4,$1A(a1)
0001AA02 5244                       		addq.w	#1,d4
0001AA04 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001AA08                            
0001AA08                            Obj83_BreakSnd:
0001AA08 303C 00CB                  		move.w	#$CB,d0
0001AA0C 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play smashing sound
0001AA12 4EF9 0000 E28C             		jmp	DisplaySprite
0001AA18                            ; ===========================================================================
0001AA18 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001AA1C 0120 00C0                  		dc.w $120, $C0
0001AA20 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001AA24 0010 0000                  		dc.w $10, 0
0001AA28 0000 0010                  		dc.w 0,	$10
0001AA2C 0010 0010                  		dc.w $10, $10
0001AA30                            ; ---------------------------------------------------------------------------
0001AA30                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001AA30                            ; ---------------------------------------------------------------------------
0001AA30                            Map_obj83:
0001AA30                            	include "_maps\obj83.asm"
0001AA30                            ; ---------------------------------------------------------------------------
0001AA30                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001AA30                            ; ---------------------------------------------------------------------------
0001AA30 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001AA34 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001AA38 0000                       		dc.w byte_19D46-Map_obj83
0001AA3A 01                         byte_19D1C:	dc.b 1
0001AA3B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001AA40 02                         byte_19D22:	dc.b 2
0001AA41 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001AA46 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001AA4B 00                         		dc.b 0
0001AA4C 02                         byte_19D2E:	dc.b 2
0001AA4D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001AA52 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001AA57 00                         		dc.b 0
0001AA58 02                         byte_19D3A:	dc.b 2
0001AA59 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001AA5E F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001AA63 00                         		dc.b 0
0001AA64 02                         byte_19D46:	dc.b 2
0001AA65 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001AA6A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001AA70 00                         		even
0001AA70 00                         		even
0001AA70                            
0001AA70                            ; ===========================================================================
0001AA70                            ; ---------------------------------------------------------------------------
0001AA70                            ; Object 85 - Eggman (FZ)
0001AA70                            ; ---------------------------------------------------------------------------
0001AA70                            
0001AA70                            Obj85_Delete:
0001AA70 4EF9 0000 E2C8             		jmp	DeleteObject
0001AA76                            ; ===========================================================================
0001AA76                            
0001AA76                            Obj85:					; XREF: Obj_Index
0001AA76 7000                       		moveq	#0,d0
0001AA78 1028 0024                  		move.b	$24(a0),d0
0001AA7C 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001AA80 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001AA84                            ; ===========================================================================
0001AA84 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001AA86 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001AA88 0000                       		dc.w loc_1A38E-Obj85_Index
0001AA8A 0000                       		dc.w loc_1A346-Obj85_Index
0001AA8C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001AA8E 0000                       		dc.w loc_1A3AC-Obj85_Index
0001AA90 0000                       		dc.w loc_1A264-Obj85_Index
0001AA92                            
0001AA92 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001AA98 0001 A768                  		dc.l Map_obj82		; mappings pointer
0001AA9C 25B0 0590 0300             		dc.w $25B0, $590, $300
0001AAA2 0000 0000                  		dc.l Map_obj84
0001AAA6 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001AAAC 0000 0000                  		dc.l Map_FZBoss
0001AAB0 26E0 0596 0470             		dc.w $26E0, $596, $470
0001AAB6 0001 A768                  		dc.l Map_obj82
0001AABA 26E0 0596 0400             		dc.w $26E0, $596, $400
0001AAC0 0001 8AAA                  		dc.l Map_Eggman
0001AAC4 26E0 0596 0400             		dc.w $26E0, $596, $400
0001AACA 0001 8AAA                  		dc.l Map_Eggman
0001AACE                            
0001AACE 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001AAD3 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001AAD8 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001AADD 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001AAE2 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001AAE7 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001AAEC                            ; ===========================================================================
0001AAEC                            
0001AAEC                            Obj85_Main:				; XREF: Obj85_Index
0001AAEC 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001AAF0 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001AAF4 2248                       		movea.l	a0,a1
0001AAF6 7205                       		moveq	#5,d1
0001AAF8 6000                       		bra.s	Obj85_LoadBoss
0001AAFA                            ; ===========================================================================
0001AAFA                            
0001AAFA                            Obj85_Loop:
0001AAFA 4EB9 0000 E728             		jsr	SingleObjLoad2
0001AB00 6600                       		bne.s	loc_19E20
0001AB02                            
0001AB02                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001AB02 12BC 0085                  		move.b	#$85,(a1)
0001AB06 335A 0008                  		move.w	(a2)+,8(a1)
0001AB0A 335A 000C                  		move.w	(a2)+,$C(a1)
0001AB0E 335A 0002                  		move.w	(a2)+,2(a1)
0001AB12 235A 0004                  		move.l	(a2)+,4(a1)
0001AB16 135B 0024                  		move.b	(a3)+,$24(a1)
0001AB1A 135B 001C                  		move.b	(a3)+,$1C(a1)
0001AB1E 135B 0018                  		move.b	(a3)+,$18(a1)
0001AB22 135B 0017                  		move.b	(a3)+,$17(a1)
0001AB26 135B 0016                  		move.b	(a3)+,$16(a1)
0001AB2A 137C 0004 0001             		move.b	#4,1(a1)
0001AB30 08E8 0007 0001             		bset	#7,1(a0)
0001AB36 2348 0034                  		move.l	a0,$34(a1)
0001AB3A 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001AB3E                            
0001AB3E                            loc_19E20:
0001AB3E 45E8 0036                  		lea	$36(a0),a2
0001AB42 4EB9 0000 E712             		jsr	SingleObjLoad
0001AB48 6600                       		bne.s	loc_19E5A
0001AB4A 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001AB4E 3489                       		move.w	a1,(a2)
0001AB50 2348 0034                  		move.l	a0,$34(a1)
0001AB54 45E8 0038                  		lea	$38(a0),a2
0001AB58 7400                       		moveq	#0,d2
0001AB5A 7203                       		moveq	#3,d1
0001AB5C                            
0001AB5C                            loc_19E3E:
0001AB5C 4EB9 0000 E728             		jsr	SingleObjLoad2
0001AB62 6600                       		bne.s	loc_19E5A
0001AB64 34C9                       		move.w	a1,(a2)+
0001AB66 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001AB6A 2348 0034                  		move.l	a0,$34(a1)
0001AB6E 1342 0028                  		move.b	d2,$28(a1)
0001AB72 5442                       		addq.w	#2,d2
0001AB74 51C9 FFE6                  		dbf	d1,loc_19E3E
0001AB78                            
0001AB78                            loc_19E5A:
0001AB78 317C 0000 0034             		move.w	#0,$34(a0)
0001AB7E 4EB8 2D48                  		jsr	RandomNumber	; get a number between 0 and 250
0001AB82 4240                       		clr.w	d0
0001AB84 4840                       		swap	d0
0001AB86 80FC 00FB                  		divu.w	#251,d0
0001AB8A 4840                       		swap	d0
0001AB8C 0640 0118                  		add.w	#280,d0		; add 280
0001AB90 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001AB96 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AB9C                            
0001AB9C                            Obj85_Eggman:				; XREF: Obj85_Index
0001AB9C 7000                       		moveq	#0,d0
0001AB9E 1028 0034                  		move.b	$34(a0),d0
0001ABA2 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001ABA6 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001ABAA 4EF9 0000 E28C             		jmp	DisplaySprite
0001ABB0                            ; ===========================================================================
0001ABB0 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001ABB4 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001ABB8 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001ABBC 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001ABC0                            ; ===========================================================================
0001ABC0                            
0001ABC0                            loc_19E90:				; XREF: off_19E80
0001ABC0 4AB8 F680                  		tst.l	($FFFFF680).w
0001ABC4 6600                       		bne.s	loc_19EA2
0001ABC6 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001ABCC 6500                       		blo.s	loc_19EA2
0001ABCE 5428 0034                  		addq.b	#2,$34(a0)
0001ABD2 103C 0081                  		move.b	#$81,d0
0001ABD6 4EB8 15D4                  		jsr	PlaySound_Special
0001ABDA                            loc_19EA2:
0001ABDA 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001ABDE 4E75                       		rts	
0001ABE0                            ; ===========================================================================
0001ABE0                            
0001ABE0                            loc_19EA8:				; XREF: off_19E80
0001ABE0 4A68 0030                  		tst.w	$30(a0)
0001ABE4 6A00                       		bpl.s	loc_19F10
0001ABE6 4268 0030                  		clr.w	$30(a0)
0001ABEA 4EB9 0000 2D48             		jsr	(RandomNumber).l
0001ABF0 0240 000C                  		andi.w	#$C,d0
0001ABF4 3200                       		move.w	d0,d1
0001ABF6 5441                       		addq.w	#2,d1
0001ABF8 4A80                       		tst.l	d0
0001ABFA 6A00                       		bpl.s	loc_19EC6
0001ABFC C141                       		exg	d1,d0
0001ABFE                            
0001ABFE                            loc_19EC6:
0001ABFE 43FA 0000                  		lea	word_19FD6(pc),a1
0001AC02 3031 0000                  		move.w	(a1,d0.w),d0
0001AC06 3231 1000                  		move.w	(a1,d1.w),d1
0001AC0A 3140 0030                  		move.w	d0,$30(a0)
0001AC0E 74FF                       		moveq	#-1,d2
0001AC10 3430 0038                  		move.w	$38(a0,d0.w),d2
0001AC14 2242                       		movea.l	d2,a1
0001AC16 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AC1C 337C FFFF 0030             		move.w	#-1,$30(a1)
0001AC22 3430 1038                  		move.w	$38(a0,d1.w),d2
0001AC26 2242                       		movea.l	d2,a1
0001AC28 137C 0001 0029             		move.b	#1,$29(a1)
0001AC2E 337C 0000 0030             		move.w	#0,$30(a1)
0001AC34 317C 0001 0032             		move.w	#1,$32(a0)
0001AC3A 4228 0035                  		clr.b	$35(a0)
0001AC3E 303C 00B7                  		move.w	#$B7,d0
0001AC42 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001AC48                            
0001AC48                            loc_19F10:
0001AC48 4A68 0032                  		tst.w	$32(a0)
0001AC4C 6B00 0000                  		bmi.w	loc_19FA6
0001AC50 08A8 0000 0022             		bclr	#0,$22(a0)
0001AC56 3038 D008                  		move.w	($FFFFD008).w,d0
0001AC5A 9068 0008                  		sub.w	8(a0),d0
0001AC5E 6500                       		bcs.s	loc_19F2E
0001AC60 08E8 0000 0022             		bset	#0,$22(a0)
0001AC66                            
0001AC66                            loc_19F2E:
0001AC66 323C 002B                  		move.w	#$2B,d1
0001AC6A 343C 0014                  		move.w	#$14,d2
0001AC6E 363C 0014                  		move.w	#$14,d3
0001AC72 3828 0008                  		move.w	8(a0),d4
0001AC76 4EB9 0001 0656             		jsr	SolidObject
0001AC7C 4A44                       		tst.w	d4
0001AC7E 6E00                       		bgt.s	loc_19F50
0001AC80                            
0001AC80                            loc_19F48:
0001AC80 4A28 0035                  		tst.b	$35(a0)
0001AC84 6600                       		bne.s	loc_19F88
0001AC86 6000                       		bra.s	loc_19F96
0001AC88                            ; ===========================================================================
0001AC88                            
0001AC88                            loc_19F50:
0001AC88 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001AC8C                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001AC8C                            ;		bne.s	loc_19F48
0001AC8C                            ;		move.w	#$300,d0		; knock player back (nah)
0001AC8C                            ;		btst	#0,$22(a0)
0001AC8C                            ;		bne.s	loc_19F6A
0001AC8C                            ;		neg.w	d0
0001AC8C                            ;
0001AC8C                            ;loc_19F6A:
0001AC8C                            ;		move.w	d0,($FFFFD010).w
0001AC8C 4A28 0035                  		tst.b	$35(a0)
0001AC90 6600                       		bne.s	loc_19F88
0001AC92 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001AC98 6400                       		bcc.s	@notoverflown
0001AC9A 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001ACA0                            @notoverflown:
0001ACA0 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001ACA6 303C 00AC                  		move.w	#$AC,d0
0001ACAA 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ACB0                            
0001ACB0                            loc_19F88:
0001ACB0 5328 0035                  		subq.b	#1,$35(a0)
0001ACB4 6700                       		beq.s	loc_19F96
0001ACB6 117C 0003 001C             		move.b	#3,$1C(a0)
0001ACBC 6000                       		bra.s	loc_19F9C
0001ACBE                            ; ===========================================================================
0001ACBE                            
0001ACBE                            loc_19F96:
0001ACBE 117C 0001 001C             		move.b	#1,$1C(a0)
0001ACC4                            
0001ACC4                            loc_19F9C:
0001ACC4 43FA FA70                  		lea	Ani_obj82(pc),a1
0001ACC8 4EF9 0000 B2E4             		jmp	AnimateSprite
0001ACCE                            ; ===========================================================================
0001ACCE                            
0001ACCE                            loc_19FA6:
0001ACCE 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001ACD4 6700                       		beq.s	loc_19FBC
0001ACD6 5428 0034                  		addq.b	#2,$34(a0)
0001ACDA 317C FFFF 0030             		move.w	#-1,$30(a0)
0001ACE0 4268 0032                  		clr.w	$32(a0)
0001ACE4 4E75                       		rts	
0001ACE6                            ; ===========================================================================
0001ACE6                            
0001ACE6                            loc_19FBC:
0001ACE6 117C 0006 0034             		move.b	#6,$34(a0)
0001ACEC 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001ACF2 317C 053C 000C             		move.w	#$53C,$C(a0)
0001ACF8 117C 0014 0016             		move.b	#$14,$16(a0)
0001ACFE 4E75                       		rts	
0001AD00                            ; ===========================================================================
0001AD00 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001AD10                            ; ===========================================================================
0001AD10                            
0001AD10                            loc_19FE6:				; XREF: off_19E80
0001AD10 70FF                       		moveq	#-1,d0
0001AD12 3028 0036                  		move.w	$36(a0),d0
0001AD16 2240                       		movea.l	d0,a1
0001AD18 4A68 0030                  		tst.w	$30(a0)
0001AD1C 6A00                       		bpl.s	loc_1A000
0001AD1E 4268 0030                  		clr.w	$30(a0)
0001AD22 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AD28 6100                       		bsr.s	loc_1A020
0001AD2A                            
0001AD2A                            loc_1A000:
0001AD2A 700F                       		moveq	#$F,d0
0001AD2C C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AD30 6600                       		bne.s	loc_1A00A
0001AD32 6100                       		bsr.s	loc_1A020
0001AD34                            
0001AD34                            loc_1A00A:
0001AD34 4A68 0032                  		tst.w	$32(a0)
0001AD38 6700                       		beq.s	locret_1A01E
0001AD3A 5528 0034                  		subq.b	#2,$34(a0)
0001AD3E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AD44 4268 0032                  		clr.w	$32(a0)
0001AD48                            
0001AD48                            locret_1A01E:
0001AD48 4E75                       		rts	
0001AD4A                            ; ===========================================================================
0001AD4A                            
0001AD4A                            loc_1A020:
0001AD4A 303C 00B1                  		move.w	#$B1,d0
0001AD4E 4EF9 0000 15D4             		jmp	(PlaySound_Special).l ;	play electricity sound
0001AD54                            ; ===========================================================================
0001AD54                            
0001AD54                            loc_1A02A:				; XREF: off_19E80
0001AD54 117C 0030 0017             		move.b	#$30,$17(a0)
0001AD5A 08E8 0000 0022             		bset	#0,$22(a0)
0001AD60 7210                       		moveq	#$10,d1
0001AD62 4EB9 0000 E1F2             		jsr	ObjectFallCustom
0001AD68 117C 0006 001A             		move.b	#6,$1A(a0)
0001AD6E 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AD74 6500                       		bcs.s	loc_1A070
0001AD76 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AD7C 5428 0034                  		addq.b	#2,$34(a0)
0001AD80 117C 0020 0017             		move.b	#$20,$17(a0)
0001AD86 317C 0100 0010             		move.w	#$100,$10(a0)
0001AD8C 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AD92 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AD96                            
0001AD96                            loc_1A070:
0001AD96 6000 0000                  		bra.w	loc_1A166
0001AD9A                            ; ===========================================================================
0001AD9A                            
0001AD9A                            loc_1A074:				; XREF: off_19E80
0001AD9A 08E8 0000 0022             		bset	#0,$22(a0)
0001ADA0 117C 0004 001C             		move.b	#4,$1C(a0)
0001ADA6 7210                       		moveq	#$10,d1
0001ADA8 4EB9 0000 E1F2             		jsr	ObjectFallCustom
0001ADAE 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001ADB4 6500                       		bcs.s	loc_1A09A
0001ADB6 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001ADBC                            
0001ADBC                            loc_1A09A:
0001ADBC 317C 0400 0010             		move.w	#$400,$10(a0)
0001ADC2 3028 0008                  		move.w	8(a0),d0
0001ADC6 9078 D008                  		sub.w	($FFFFD008).w,d0
0001ADCA 6A00                       		bpl.s	loc_1A0B4
0001ADCC 317C 0500 0010             		move.w	#$500,$10(a0)
0001ADD2 6000 0000                  		bra.w	loc_1A0F2
0001ADD6                            ; ===========================================================================
0001ADD6                            
0001ADD6                            loc_1A0B4:
0001ADD6 0440 0070                  		subi.w	#$70,d0
0001ADDA 6500                       		bcs.s	loc_1A0F2
0001ADDC 0468 0100 0010             		subi.w	#$100,$10(a0)
0001ADE2 5140                       		subq.w	#8,d0
0001ADE4 6500                       		bcs.s	loc_1A0F2
0001ADE6 0468 0100 0010             		subi.w	#$100,$10(a0)
0001ADEC 5140                       		subq.w	#8,d0
0001ADEE 6500                       		bcs.s	loc_1A0F2
0001ADF0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ADF6 5140                       		subq.w	#8,d0
0001ADF8 6500                       		bcs.s	loc_1A0F2
0001ADFA 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AE00 5140                       		subq.w	#8,d0
0001AE02 6500                       		bcs.s	loc_1A0F2
0001AE04 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AE0A 0440 0038                  		subi.w	#$38,d0
0001AE0E 6500                       		bcs.s	loc_1A0F2
0001AE10 4268 0010                  		clr.w	$10(a0)
0001AE14                            
0001AE14                            loc_1A0F2:
0001AE14 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001AE1A 6500                       		bcs.s	loc_1A110
0001AE1C 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001AE22 317C 0240 0010             		move.w	#$240,$10(a0)
0001AE28 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001AE2E 5428 0034                  		addq.b	#2,$34(a0)
0001AE32                            
0001AE32                            loc_1A110:
0001AE32 6000                       		bra.s	loc_1A15C
0001AE34                            ; ===========================================================================
0001AE34                            
0001AE34                            loc_1A112:				; XREF: off_19E80
0001AE34 4EB9 0000 E252             		jsr	SpeedToPos
0001AE3A 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001AE40 6500                       		bcs.s	loc_1A124
0001AE42 4268 0010                  		clr.w	$10(a0)
0001AE46                            
0001AE46                            loc_1A124:
0001AE46 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AE4C 4A68 0012                  		tst.w	$12(a0)
0001AE50 6B00                       		bmi.s	loc_1A142
0001AE52 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AE58 6500                       		bcs.s	loc_1A142
0001AE5A 317C 0592 000C             		move.w	#$592,$C(a0)
0001AE60 4268 0012                  		clr.w	$12(a0)
0001AE64                            
0001AE64                            loc_1A142:
0001AE64 3028 0010                  		move.w	$10(a0),d0
0001AE68 8068 0012                  		or.w	$12(a0),d0
0001AE6C 6600                       		bne.s	loc_1A15C
0001AE6E 5428 0034                  		addq.b	#2,$34(a0)
0001AE72 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AE78 117C 0001 0021             		move.b	#1,$21(a0)
0001AE7E                            
0001AE7E                            loc_1A15C:
0001AE7E 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001AE82 4EB9 0000 B2E4             		jsr	AnimateSprite
0001AE88                            
0001AE88                            loc_1A166:
0001AE88 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AE8E 6C00                       		bge.s	loc_1A172
0001AE90 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AE94                            
0001AE94                            loc_1A172:
0001AE94 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AE9A 6C00                       		bge.s	locret_1A190
0001AE9C 323C 001B                  		move.w	#$1B,d1
0001AEA0 343C 0070                  		move.w	#$70,d2
0001AEA4 363C 0071                  		move.w	#$71,d3
0001AEA8 3828 0008                  		move.w	8(a0),d4
0001AEAC 4EF9 0001 0656             		jmp	SolidObject
0001AEB2                            ; ===========================================================================
0001AEB2                            
0001AEB2                            locret_1A190:
0001AEB2 4E75                       		rts	
0001AEB4                            ; ===========================================================================
0001AEB4                            
0001AEB4                            loc_1A192:				; XREF: off_19E80
0001AEB4 217C 0001 8AAA 0004        		move.l	#Map_Eggman,4(a0)
0001AEBC 317C 0400 0002             		move.w	#$400,2(a0)
0001AEC2 117C 0000 001C             		move.b	#0,$1C(a0)
0001AEC8 08E8 0000 0022             		bset	#0,$22(a0)
0001AECE 4EB9 0000 E252             		jsr	SpeedToPos
0001AED4 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AEDA 6400                       		bcc.s	loc_1A1D0
0001AEDC 317C 0180 0010             		move.w	#$180,$10(a0)
0001AEE2 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AEE8 117C 000F 0020             		move.b	#$F,$20(a0)
0001AEEE 5428 0034                  		addq.b	#2,$34(a0)
0001AEF2                            
0001AEF2                            loc_1A1D0:
0001AEF2 6000 FF8A                  		bra.w	loc_1A15C
0001AEF6                            ; ===========================================================================
0001AEF6                            
0001AEF6                            loc_1A1D4:				; XREF: off_19E80
0001AEF6 08E8 0000 0022             		bset	#0,$22(a0)
0001AEFC 4EB9 0000 E252             		jsr	SpeedToPos
0001AF02 4A68 0030                  		tst.w	$30(a0)
0001AF06 6600                       		bne.s	loc_1A1FC
0001AF08 4A28 0020                  		tst.b	$20(a0)
0001AF0C 6600                       		bne.s	loc_1A216
0001AF0E 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AF14 303C 00AC                  		move.w	#$AC,d0
0001AF18 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AF1E                            
0001AF1E                            loc_1A1FC:
0001AF1E 5368 0030                  		subq.w	#1,$30(a0)
0001AF22 6600                       		bne.s	loc_1A216
0001AF24 4A28 0022                  		tst.b	$22(a0)
0001AF28 6A00                       		bpl.s	loc_1A210
0001AF2A 317C 0060 0012             		move.w	#$60,$12(a0)
0001AF30 6000                       		bra.s	loc_1A216
0001AF32                            ; ===========================================================================
0001AF32                            
0001AF32                            loc_1A210:
0001AF32 117C 000F 0020             		move.b	#$F,$20(a0)
0001AF38                            
0001AF38                            loc_1A216:
0001AF38 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AF3E 6D00                       		blt.s	loc_1A23A
0001AF40 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AF46 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AF4C 4278 D014                  		clr.w	($FFFFD014).w
0001AF50 4A68 0012                  		tst.w	$12(a0)
0001AF54 6A00                       		bpl.s	loc_1A248
0001AF56 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AF5C                            
0001AF5C                            loc_1A23A:
0001AF5C 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AF62 6D00                       		blt.s	loc_1A248
0001AF64 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AF6A                            
0001AF6A                            loc_1A248:
0001AF6A 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AF70 6500                       		bcs.s	loc_1A260
0001AF72 4A28 0001                  		tst.b	1(a0)
0001AF76 6B00                       		bmi.s	loc_1A260
0001AF78 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AF7E 6000 FAF0                  		bra.w	Obj85_Delete
0001AF82                            ; ===========================================================================
0001AF82                            
0001AF82                            loc_1A260:
0001AF82 6000 FEFA                  		bra.w	loc_1A15C
0001AF86                            ; ===========================================================================
0001AF86                            
0001AF86                            loc_1A264:				; XREF: Obj85_Index
0001AF86 2268 0034                  		movea.l	$34(a0),a1
0001AF8A 1011                       		move.b	(a1),d0
0001AF8C B010                       		cmp.b	(a0),d0
0001AF8E 6600 FAE0                  		bne.w	Obj85_Delete
0001AF92 117C 0007 001C             		move.b	#7,$1C(a0)
0001AF98 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AF9E 6C00                       		bge.s	loc_1A280
0001AFA0 6000                       		bra.s	loc_1A2A6
0001AFA2                            ; ===========================================================================
0001AFA2                            
0001AFA2                            loc_1A280:
0001AFA2 4A69 0010                  		tst.w	$10(a1)
0001AFA6 6700                       		beq.s	loc_1A28C
0001AFA8 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AFAE                            
0001AFAE                            loc_1A28C:
0001AFAE 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001AFB2 4EB9 0000 B2E4             		jsr	AnimateSprite
0001AFB8                            
0001AFB8                            loc_1A296:
0001AFB8 2268 0034                  		movea.l	$34(a0),a1
0001AFBC 3169 0008 0008             		move.w	8(a1),8(a0)
0001AFC2 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AFC8                            
0001AFC8                            loc_1A2A6:
0001AFC8 2268 0034                  		movea.l	$34(a0),a1
0001AFCC 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AFD2 7003                       		moveq	#3,d0
0001AFD4 C028 0022                  		and.b	$22(a0),d0
0001AFD8 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AFDE 8128 0001                  		or.b	d0,1(a0)
0001AFE2 4EF9 0000 E28C             		jmp	DisplaySprite
0001AFE8                            ; ===========================================================================
0001AFE8                            
0001AFE8                            loc_1A2C6:				; XREF: Obj85_Index
0001AFE8 2268 0034                  		movea.l	$34(a0),a1
0001AFEC 1011                       		move.b	(a1),d0
0001AFEE B010                       		cmp.b	(a0),d0
0001AFF0 6600 FA7E                  		bne.w	Obj85_Delete
0001AFF4 0CA9 0001 8AAA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AFFC 6700                       		beq.s	loc_1A2E4
0001AFFE 117C 000A 001A             		move.b	#$A,$1A(a0)
0001B004 60C2                       		bra.s	loc_1A2A6
0001B006                            ; ===========================================================================
0001B006                            
0001B006                            loc_1A2E4:
0001B006 117C 0001 001C             		move.b	#1,$1C(a0)
0001B00C 4A29 0021                  		tst.b	$21(a1)
0001B010 6F00                       		ble.s	loc_1A312
0001B012 117C 0006 001C             		move.b	#6,$1C(a0)
0001B018 217C 0001 8AAA 0004        		move.l	#Map_Eggman,4(a0)
0001B020 317C 0400 0002             		move.w	#$400,2(a0)
0001B026 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001B02A 4EB9 0000 B2E4             		jsr	AnimateSprite
0001B030 6000 FF86                  		bra.w	loc_1A296
0001B034                            ; ===========================================================================
0001B034                            
0001B034                            loc_1A312:
0001B034 4A28 0001                  		tst.b	1(a0)
0001B038 6A00 FA36                  		bpl.w	Obj85_Delete
0001B03C 6100 D584                  		bsr.w	BossDefeated
0001B040 117C 0002 0018             		move.b	#2,$18(a0)
0001B046 117C 0000 001C             		move.b	#0,$1C(a0)
0001B04C 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001B054 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001B05A 43FA 0000                  		lea	Ani_obj85(pc),a1
0001B05E 4EB9 0000 B2E4             		jsr	AnimateSprite
0001B064 6000 FF52                  		bra.w	loc_1A296
0001B068                            ; ===========================================================================
0001B068                            
0001B068                            loc_1A346:				; XREF: Obj85_Index
0001B068 08E8 0000 0022             		bset	#0,$22(a0)
0001B06E 2268 0034                  		movea.l	$34(a0),a1
0001B072 0CA9 0001 8AAA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B07A 6700                       		beq.s	loc_1A35E
0001B07C 6000 FF4A                  		bra.w	loc_1A2A6
0001B080                            ; ===========================================================================
0001B080                            
0001B080                            loc_1A35E:
0001B080 3169 0008 0008             		move.w	8(a1),8(a0)
0001B086 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B08C 4A28 001E                  		tst.b	$1E(a0)
0001B090 6600                       		bne.s	loc_1A376
0001B092 117C 0014 001E             		move.b	#$14,$1E(a0)
0001B098                            
0001B098                            loc_1A376:
0001B098 5328 001E                  		subq.b	#1,$1E(a0)
0001B09C 6E00                       		bgt.s	loc_1A38A
0001B09E 5228 001A                  		addq.b	#1,$1A(a0)
0001B0A2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001B0A8 6E00 F9C6                  		bgt.w	Obj85_Delete
0001B0AC                            
0001B0AC                            loc_1A38A:
0001B0AC 6000 FF0A                  		bra.w	loc_1A296
0001B0B0                            ; ===========================================================================
0001B0B0                            
0001B0B0                            loc_1A38E:				; XREF: Obj85_Index
0001B0B0 117C 000B 001A             		move.b	#$B,$1A(a0)
0001B0B6 3038 D008                  		move.w	($FFFFD008).w,d0
0001B0BA 9068 0008                  		sub.w	8(a0),d0
0001B0BE 6500                       		bcs.s	loc_1A3A6
0001B0C0 4A28 0001                  		tst.b	1(a0)
0001B0C4 6A00 F9AA                  		bpl.w	Obj85_Delete
0001B0C8                            
0001B0C8                            loc_1A3A6:
0001B0C8 4EF9 0000 E28C             		jmp	DisplaySprite
0001B0CE                            ; ===========================================================================
0001B0CE                            
0001B0CE                            loc_1A3AC:				; XREF: Obj85_Index
0001B0CE 117C 0000 001A             		move.b	#0,$1A(a0)
0001B0D4 08E8 0000 0022             		bset	#0,$22(a0)
0001B0DA 2268 0034                  		movea.l	$34(a0),a1
0001B0DE 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B0E4 6600                       		bne.s	loc_1A3D0
0001B0E6 0CA9 0001 8AAA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B0EE 6700 F980                  		beq.w	Obj85_Delete
0001B0F2                            
0001B0F2                            loc_1A3D0:
0001B0F2 6000 FED4                  		bra.w	loc_1A2A6
0001B0F6                            ; ===========================================================================
0001B0F6                            Ani_obj85:
0001B0F6                            	include "_anim\obj85.asm"
0001B0F6                            ; ---------------------------------------------------------------------------
0001B0F6                            ; Animation script - Eggman (FZ)
0001B0F6                            ; ---------------------------------------------------------------------------
0001B0F6 0000                       		dc.w byte_1A3D6-Ani_obj85
0001B0F8 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001B0FC                            		even
0001B0FC                            		even
0001B0FC                            
0001B0FC                            Map_Eggman2:
0001B0FC                            	include "_maps\Eggman2.asm"
0001B0FC                            ; ---------------------------------------------------------------------------
0001B0FC                            ; Sprite mappings - Eggman (FZ)
0001B0FC                            ; ---------------------------------------------------------------------------
0001B0FC 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001B0FE 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001B100 06                         byte_1A3DE:	dc.b 6
0001B101 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001B106 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001B10B EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B110 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B115 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B11A 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B11F 06                         byte_1A3FD:	dc.b 6
0001B120 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001B125 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001B12A EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B12F FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B134 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B139 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B13E                            		even
0001B13E                            		even
0001B13E                            
0001B13E                            Map_FZBoss:
0001B13E                            	include "_maps\FZ boss.asm"
0001B13E                            ; ---------------------------------------------------------------------------
0001B13E                            ; Sprite mappings - boss (FZ)
0001B13E                            ; ---------------------------------------------------------------------------
0001B13E 0000                       		dc.w byte_1A422-Map_FZBoss
0001B140 0000                       		dc.w byte_1A42D-Map_FZBoss
0001B142 0000                       		dc.w byte_1A43D-Map_FZBoss
0001B144 02                         byte_1A422:	dc.b 2
0001B145 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001B14A 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001B14F 03                         byte_1A42D:	dc.b 3
0001B150 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001B155 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001B15A 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001B15F 02                         byte_1A43D:	dc.b 2
0001B160 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001B165 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001B16A                            		even
0001B16A                            		even
0001B16A                            
0001B16A                            ; ===========================================================================
0001B16A                            
0001B16A                            Obj84_Delete:
0001B16A 4EF9 0000 E2C8             		jmp	DeleteObject
0001B170                            ; ===========================================================================
0001B170                            ; ---------------------------------------------------------------------------
0001B170                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001B170                            ; ---------------------------------------------------------------------------
0001B170                            
0001B170                            Obj84:					; XREF: Obj_Index
0001B170 7000                       		moveq	#0,d0
0001B172 1028 0024                  		move.b	$24(a0),d0
0001B176 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001B17A 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001B17E                            ; ===========================================================================
0001B17E 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001B180 0000                       		dc.w loc_1A4CE-Obj84_Index
0001B182 0000                       		dc.w loc_1A57E-Obj84_Index
0001B184                            
0001B184 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001B188 2550 0620                  		dc.w $2550, $620
0001B18C 2490 04C0                  		dc.w $2490, $4C0
0001B190 2510 04C0                  		dc.w $2510, $4C0
0001B194                            ; ===========================================================================
0001B194                            
0001B194                            Obj84_Main:				; XREF: Obj84_Index
0001B194 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001B198 7000                       		moveq	#0,d0
0001B19A 1028 0028                  		move.b	$28(a0),d0
0001B19E D040                       		add.w	d0,d0
0001B1A0 D2C0                       		adda.w	d0,a1
0001B1A2 117C 0004 0001             		move.b	#4,1(a0)
0001B1A8 08E8 0007 0001             		bset	#7,1(a0)
0001B1AE 08E8 0004 0001             		bset	#4,1(a0)
0001B1B4 317C 0300 0002             		move.w	#$300,2(a0)
0001B1BA 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001B1C2 3159 0008                  		move.w	(a1)+,8(a0)
0001B1C6 3151 000C                  		move.w	(a1),$C(a0)
0001B1CA 3159 0038                  		move.w	(a1)+,$38(a0)
0001B1CE 117C 0020 0016             		move.b	#$20,$16(a0)
0001B1D4 117C 0060 0017             		move.b	#$60,$17(a0)
0001B1DA 117C 0020 0019             		move.b	#$20,$19(a0)
0001B1E0 117C 0060 0016             		move.b	#$60,$16(a0)
0001B1E6 117C 0003 0018             		move.b	#3,$18(a0)
0001B1EC 5428 0024                  		addq.b	#2,$24(a0)
0001B1F0                            
0001B1F0                            loc_1A4CE:				; XREF: Obj84_Index
0001B1F0 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B1F6 6F00                       		ble.s	loc_1A4DC
0001B1F8 08E8 0001 0001             		bset	#1,1(a0)
0001B1FE                            
0001B1FE                            loc_1A4DC:
0001B1FE 42A8 003C                  		clr.l	$3C(a0)
0001B202 4A28 0029                  		tst.b	$29(a0)
0001B206 6700                       		beq.s	loc_1A4EA
0001B208 5428 0024                  		addq.b	#2,$24(a0)
0001B20C                            
0001B20C                            loc_1A4EA:
0001B20C 2028 003C                  		move.l	$3C(a0),d0
0001B210 2228 0038                  		move.l	$38(a0),d1
0001B214 D280                       		add.l	d0,d1
0001B216 4841                       		swap	d1
0001B218 3141 000C                  		move.w	d1,$C(a0)
0001B21C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B222 6600                       		bne.s	loc_1A524
0001B224 4A68 0030                  		tst.w	$30(a0)
0001B228 6A00                       		bpl.s	loc_1A524
0001B22A 70F6                       		moveq	#-$A,d0
0001B22C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B232 6F00                       		ble.s	loc_1A514
0001B234 700E                       		moveq	#$E,d0
0001B236                            
0001B236                            loc_1A514:
0001B236 D240                       		add.w	d0,d1
0001B238 2268 0034                  		movea.l	$34(a0),a1
0001B23C 3341 000C                  		move.w	d1,$C(a1)
0001B240 3368 0008 0008             		move.w	8(a0),8(a1)
0001B246                            
0001B246                            loc_1A524:
0001B246 323C 002B                  		move.w	#$2B,d1
0001B24A 343C 0060                  		move.w	#$60,d2
0001B24E 363C 0061                  		move.w	#$61,d3
0001B252 3828 0008                  		move.w	8(a0),d4
0001B256 4EB9 0001 0656             		jsr	SolidObject
0001B25C 7000                       		moveq	#0,d0
0001B25E 3228 003C                  		move.w	$3C(a0),d1
0001B262 6A00                       		bpl.s	loc_1A550
0001B264 4441                       		neg.w	d1
0001B266 5141                       		subq.w	#8,d1
0001B268 6500                       		bcs.s	loc_1A55C
0001B26A 5200                       		addq.b	#1,d0
0001B26C E841                       		asr.w	#4,d1
0001B26E D041                       		add.w	d1,d0
0001B270 6000                       		bra.s	loc_1A55C
0001B272                            ; ===========================================================================
0001B272                            
0001B272                            loc_1A550:
0001B272 0441 0027                  		subi.w	#$27,d1
0001B276 6500                       		bcs.s	loc_1A55C
0001B278 5200                       		addq.b	#1,d0
0001B27A E841                       		asr.w	#4,d1
0001B27C D041                       		add.w	d1,d0
0001B27E                            
0001B27E                            loc_1A55C:
0001B27E 1140 001A                  		move.b	d0,$1A(a0)
0001B282 3038 D008                  		move.w	($FFFFD008).w,d0
0001B286 9068 0008                  		sub.w	8(a0),d0
0001B28A 6B00                       		bmi.s	loc_1A578
0001B28C 0440 0140                  		subi.w	#$140,d0
0001B290 6B00                       		bmi.s	loc_1A578
0001B292 4A28 0001                  		tst.b	1(a0)
0001B296 6A00 FED2                  		bpl.w	Obj84_Delete
0001B29A                            
0001B29A                            loc_1A578:
0001B29A 4EF9 0000 E28C             		jmp	DisplaySprite
0001B2A0                            ; ===========================================================================
0001B2A0                            
0001B2A0                            loc_1A57E:				; XREF: Obj84_Index
0001B2A0 7000                       		moveq	#0,d0
0001B2A2 1028 0028                  		move.b	$28(a0),d0
0001B2A6 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B2AA 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B2AE 6000 FF5C                  		bra.w	loc_1A4EA
0001B2B2                            ; ===========================================================================
0001B2B2 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B2B4 0000                       		dc.w loc_1A598-off_1A590
0001B2B6 0000                       		dc.w loc_1A604-off_1A590
0001B2B8 0000                       		dc.w loc_1A604-off_1A590
0001B2BA                            ; ===========================================================================
0001B2BA                            
0001B2BA                            loc_1A598:				; XREF: off_1A590
0001B2BA 4A28 0029                  		tst.b	$29(a0)
0001B2BE 6600                       		bne.s	loc_1A5D4
0001B2C0 2268 0034                  		movea.l	$34(a0),a1
0001B2C4 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B2CA 6600                       		bne.s	loc_1A5B4
0001B2CC 6100 D2F4                  		bsr.w	BossDefeated
0001B2D0 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B2D8                            
0001B2D8                            loc_1A5B4:
0001B2D8 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B2E0 6400                       		bcc.s	locret_1A602
0001B2E2 42A8 003C                  		clr.l	$3C(a0)
0001B2E6 2268 0034                  		movea.l	$34(a0),a1
0001B2EA 5369 0032                  		subq.w	#1,$32(a1)
0001B2EE 4269 0030                  		clr.w	$30(a1)
0001B2F2 5528 0024                  		subq.b	#2,$24(a0)
0001B2F6 4E75                       		rts	
0001B2F8                            ; ===========================================================================
0001B2F8                            
0001B2F8                            loc_1A5D4:
0001B2F8 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B2FE 6C00                       		bge.s	loc_1A5E4
0001B300 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B308                            
0001B308                            loc_1A5E4:
0001B308 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B310 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B316 6E00                       		bgt.s	locret_1A602
0001B318 4268 003E                  		clr.w	$3E(a0)
0001B31C 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B322 4228 0029                  		clr.b	$29(a0)
0001B326                            
0001B326                            locret_1A602:
0001B326 4E75                       		rts	
0001B328                            ; ===========================================================================
0001B328                            
0001B328                            loc_1A604:				; XREF: off_1A590
0001B328 08E8 0001 0001             		bset	#1,1(a0)
0001B32E 4A28 0029                  		tst.b	$29(a0)
0001B332 6600                       		bne.s	loc_1A646
0001B334 2268 0034                  		movea.l	$34(a0),a1
0001B338 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B33E 6600                       		bne.s	loc_1A626
0001B340 6100 D280                  		bsr.w	BossDefeated
0001B344 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B34C                            
0001B34C                            loc_1A626:
0001B34C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B354 6400                       		bcc.s	locret_1A674
0001B356 42A8 003C                  		clr.l	$3C(a0)
0001B35A 2268 0034                  		movea.l	$34(a0),a1
0001B35E 5369 0032                  		subq.w	#1,$32(a1)
0001B362 4269 0030                  		clr.w	$30(a1)
0001B366 5528 0024                  		subq.b	#2,$24(a0)
0001B36A 4E75                       		rts	
0001B36C                            ; ===========================================================================
0001B36C                            
0001B36C                            loc_1A646:
0001B36C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B372 6D00                       		blt.s	loc_1A656
0001B374 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B37C                            
0001B37C                            loc_1A656:
0001B37C 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B384 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B38A 6D00                       		blt.s	locret_1A674
0001B38C 4268 003E                  		clr.w	$3E(a0)
0001B390 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B396 4228 0029                  		clr.b	$29(a0)
0001B39A                            
0001B39A                            locret_1A674:
0001B39A 4E75                       		rts	
0001B39C                            ; ===========================================================================
0001B39C                            ; ---------------------------------------------------------------------------
0001B39C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B39C                            ; ---------------------------------------------------------------------------
0001B39C                            Map_obj84:
0001B39C                            	include "_maps\obj84.asm"
0001B39C                            ; ---------------------------------------------------------------------------
0001B39C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B39C                            ; ---------------------------------------------------------------------------
0001B39C 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B3A0 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B3A4 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B3A8 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B3AC 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B3B0 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B3B4 06                         byte_1A68E:	dc.b 6
0001B3B5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B3BA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B3BF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B3C4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B3C9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B3CE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B3D3 08                         byte_1A6AD:	dc.b 8
0001B3D4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B3D9 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B3DE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B3E3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B3E8 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B3ED B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B3F2 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B3F7 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B3FC 0A                         byte_1A6D6:	dc.b $A
0001B3FD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B402 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B407 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B40C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B411 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B416 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B41B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B420 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B425 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B42A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B42F 0C                         byte_1A709:	dc.b $C
0001B430 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B435 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B43A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B43F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B444 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B449 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B44E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B453 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B458 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B45D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B462 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B467 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B46C 0D                         byte_1A746:	dc.b $D
0001B46D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B472 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B477 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B47C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B481 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B486 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B48B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B490 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B495 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B49A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B49F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B4A4 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B4A9 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B4AE 0E                         byte_1A788:	dc.b $E
0001B4AF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B4B4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B4B9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B4BE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B4C3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B4C8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B4CD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B4D2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B4D7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B4DC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B4E1 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B4E6 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B4EB 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B4F0 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B4F5 02                         byte_1A7CF:	dc.b 2
0001B4F6 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B4FB 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B500                            		even
0001B500                            		even
0001B500                            
0001B500                            ; ===========================================================================
0001B500                            ; ---------------------------------------------------------------------------
0001B500                            ; Object 86 - energy balls (FZ)
0001B500                            ; ---------------------------------------------------------------------------
0001B500                            
0001B500                            Obj86:					; XREF: Obj_Index
0001B500 7000                       		moveq	#0,d0
0001B502 1028 0024                  		move.b	$24(a0),d0
0001B506 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B50A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B50E                            ; ===========================================================================
0001B50E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B510 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B512 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B514 0000                       		dc.w loc_1A962-Obj86_Index
0001B516 0000                       		dc.w loc_1A982-Obj86_Index
0001B518                            ; ===========================================================================
0001B518                            
0001B518                            Obj86_Main:				; XREF: Obj86_Index
0001B518 317C 2588 0008             		move.w	#$2588,8(a0)
0001B51E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B524 317C 0300 0002             		move.w	#$300,2(a0)
0001B52A 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B532 117C 0000 001C             		move.b	#0,$1C(a0)
0001B538 117C 0003 0018             		move.b	#3,$18(a0)
0001B53E 117C 0008 0017             		move.b	#8,$17(a0)
0001B544 117C 0008 0016             		move.b	#8,$16(a0)
0001B54A 117C 0004 0001             		move.b	#4,1(a0)
0001B550 08E8 0007 0001             		bset	#7,1(a0)
0001B556 5428 0024                  		addq.b	#2,$24(a0)
0001B55A                            
0001B55A                            Obj86_Generator:			; XREF: Obj86_Index
0001B55A 2268 0034                  		movea.l	$34(a0),a1
0001B55E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B564 6600                       		bne.s	loc_1A850
0001B566 10BC 003F                  		move.b	#$3F,(a0)
0001B56A 117C 0000 0024             		move.b	#0,$24(a0)
0001B570 4EF9 0000 E28C             		jmp	DisplaySprite
0001B576                            ; ===========================================================================
0001B576                            
0001B576                            loc_1A850:
0001B576 117C 0000 001C             		move.b	#0,$1C(a0)
0001B57C 4A28 0029                  		tst.b	$29(a0)
0001B580 6700                       		beq.s	loc_1A86C
0001B582 5428 0024                  		addq.b	#2,$24(a0)
0001B586 117C 0001 001C             		move.b	#1,$1C(a0)
0001B58C 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B592                            
0001B592                            loc_1A86C:
0001B592 323C 0013                  		move.w	#$13,d1
0001B596 343C 0008                  		move.w	#8,d2
0001B59A 363C 0011                  		move.w	#$11,d3
0001B59E 3828 0008                  		move.w	8(a0),d4
0001B5A2 4EB9 0001 0656             		jsr	SolidObject
0001B5A8 3038 D008                  		move.w	($FFFFD008).w,d0
0001B5AC 9068 0008                  		sub.w	8(a0),d0
0001B5B0 6B00                       		bmi.s	loc_1A89A
0001B5B2 0440 0140                  		subi.w	#$140,d0
0001B5B6 6B00                       		bmi.s	loc_1A89A
0001B5B8 4A28 0001                  		tst.b	1(a0)
0001B5BC 6A00 FBAC                  		bpl.w	Obj84_Delete
0001B5C0                            
0001B5C0                            loc_1A89A:
0001B5C0 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B5C4 4EB9 0000 B2E4             		jsr	AnimateSprite
0001B5CA 4EF9 0000 E28C             		jmp	DisplaySprite
0001B5D0                            ; ===========================================================================
0001B5D0                            
0001B5D0                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B5D0 4A28 0029                  		tst.b	$29(a0)
0001B5D4 6700 0000                  		beq.w	loc_1A954
0001B5D8 4228 0029                  		clr.b	$29(a0)
0001B5DC D068 0030                  		add.w	$30(a0),d0
0001B5E0 0240 001E                  		andi.w	#$1E,d0
0001B5E4 D4C0                       		adda.w	d0,a2
0001B5E6 5868 0030                  		addq.w	#4,$30(a0)
0001B5EA 4268 0032                  		clr.w	$32(a0)
0001B5EE 7403                       		moveq	#3,d2
0001B5F0                            
0001B5F0                            Obj86_Loop:
0001B5F0 4EB9 0000 E728             		jsr	SingleObjLoad2
0001B5F6 6600 0000                  		bne.w	loc_1A954
0001B5FA 12BC 0086                  		move.b	#$86,(a1)
0001B5FE 3368 0008 0008             		move.w	8(a0),8(a1)
0001B604 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B60A 137C 0008 0024             		move.b	#8,$24(a1)
0001B610 337C 2300 0002             		move.w	#$2300,2(a1)
0001B616 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B61E 137C 000C 0016             		move.b	#$C,$16(a1)
0001B624 137C 000C 0017             		move.b	#$C,$17(a1)
0001B62A 137C 0000 0020             		move.b	#0,$20(a1)
0001B630 137C 0003 0018             		move.b	#3,$18(a1)
0001B636 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B63C 137C 0004 0001             		move.b	#4,1(a1)
0001B642 08E9 0007 0001             		bset	#7,1(a1)
0001B648 2348 0034                  		move.l	a0,$34(a1)
0001B64C 4EB9 0000 2D48             		jsr	(RandomNumber).l
0001B652 3228 0032                  		move.w	$32(a0),d1
0001B656 C3FC FFB1                  		muls.w	#-$4F,d1
0001B65A 0641 2578                  		addi.w	#$2578,d1
0001B65E 0240 001F                  		andi.w	#$1F,d0
0001B662 0440 0010                  		subi.w	#$10,d0
0001B666 D041                       		add.w	d1,d0
0001B668 3340 0030                  		move.w	d0,$30(a1)
0001B66C 5268 0032                  		addq.w	#1,$32(a0)
0001B670 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B676 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B67A                            
0001B67A                            loc_1A954:
0001B67A 4A68 0032                  		tst.w	$32(a0)
0001B67E 6600                       		bne.s	loc_1A95E
0001B680 5428 0024                  		addq.b	#2,$24(a0)
0001B684                            
0001B684                            loc_1A95E:
0001B684 6000 FF0C                  		bra.w	loc_1A86C
0001B688                            ; ===========================================================================
0001B688                            
0001B688                            loc_1A962:				; XREF: Obj86_Index
0001B688 117C 0002 001C             		move.b	#2,$1C(a0)
0001B68E 4A68 0038                  		tst.w	$38(a0)
0001B692 6600                       		bne.s	loc_1A97E
0001B694 117C 0002 0024             		move.b	#2,$24(a0)
0001B69A 2268 0034                  		movea.l	$34(a0),a1
0001B69E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B6A4                            
0001B6A4                            loc_1A97E:
0001B6A4 6000 FEEC                  		bra.w	loc_1A86C
0001B6A8                            ; ===========================================================================
0001B6A8                            
0001B6A8                            loc_1A982:				; XREF: Obj86_Index
0001B6A8 7000                       		moveq	#0,d0
0001B6AA 1028 0025                  		move.b	$25(a0),d0
0001B6AE 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B6B2 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001B6B6                            ; ===========================================================================
0001B6B6 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B6B8 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B6BA 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001B6BC 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001B6BE 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001B6C0 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001B6C2 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B6C4 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001B6C6 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B6C8 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001B6CA                            ; ===========================================================================
0001B6CA                            
0001B6CA                            loc_1A9A6:				; XREF: Obj86_Index2
0001B6CA 3028 0030                  		move.w	$30(a0),d0
0001B6CE 9068 0008                  		sub.w	8(a0),d0
0001B6D2 E940                       		asl.w	#4,d0
0001B6D4 3140 0010                  		move.w	d0,$10(a0)
0001B6D8 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B6DE 5428 0025                  		addq.b	#2,$25(a0)
0001B6E2                            
0001B6E2                            Obj86_Ball_Animate:
0001B6E2 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B6E6 4EB9 0000 B2E4             		jsr	AnimateSprite
0001B6EC 4EF9 0000 E28C             		jmp	DisplaySprite
0001B6F2                            ; ===========================================================================
0001B6F2                            
0001B6F2                            loc_1A9C0:				; XREF: Obj86_Index2
0001B6F2 4A68 0010                  		tst.w	$10(a0)
0001B6F6 6700                       		beq.s	loc_1A9E6
0001B6F8 4EB9 0000 E252             		jsr	SpeedToPos
0001B6FE 3028 0008                  		move.w	8(a0),d0
0001B702 9068 0030                  		sub.w	$30(a0),d0
0001B706 6400                       		bcc.s	loc_1A9E6
0001B708 4268 0010                  		clr.w	$10(a0)
0001B70C D168 0008                  		add.w	d0,8(a0)
0001B710 2268 0034                  		movea.l	$34(a0),a1
0001B714 5369 0032                  		subq.w	#1,$32(a1)
0001B718                            
0001B718                            loc_1A9E6:
0001B718 117C 0000 001C             		move.b	#0,$1C(a0)
0001B71E 5368 0028                  		subq.w	#1,$28(a0)
0001B722 6600                       		bne.s	locret_1AA1C
0001B724 4EB8 2D48                  		jsr	RandomNumber
0001B728 0240 000E                  		and.w	#7*2,d0
0001B72C 5840                       		addq.w	#2*2,d0
0001B72E 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001B732 4840                       		swap	d0
0001B734 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001B738 117C 0001 001C             		move.b	#1,$1C(a0)
0001B73E 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B744 3038 D008                  		move.w	($FFFFD008).w,d0
0001B748 9068 0008                  		sub.w	8(a0),d0
0001B74C 3140 0010                  		move.w	d0,$10(a0)
0001B750 317C 0140 0012             		move.w	#$140,$12(a0)
0001B756                            
0001B756                            locret_1AA1C:
0001B756 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001B75A                            ; ===========================================================================
0001B75A                            
0001B75A                            Obj86_Ball_Explode:
0001B75A 5328 0028                  		subq.b	#1,$28(a0)
0001B75E 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001B762 2268 0034                  		movea.l	$34(a0),a1
0001B766 5369 0038                  		subq.w	#1,$38(a1)
0001B76A 2248                       		move.l	a0,a1
0001B76C 7400                       		moveq	#0,d2	; GMZ
0001B76E 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001B770 6000                       		bra.s	@start
0001B772                            @loop:
0001B772 4EB9 0000 E712             		jsr	SingleObjLoad
0001B778 6600                       		bne.s	@exit
0001B77A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B780 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B786                            @start:
0001B786 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B78A 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001B790 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001B794 5802                       		addq.b	#4,d2
0001B796 51C9 FFDA                  		dbf	d1,@loop
0001B79A                            @exit:
0001B79A 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001B79E                            ; ===========================================================================
0001B79E                            
0001B79E                            Obj86_Ball_Sine:
0001B79E 1028 0028                  		move.b	$28(a0),d0
0001B7A2 5828 0028                  		addq.b	#4,$28(a0)
0001B7A6 4EB8 2D6E                  		jsr	CalcSine
0001B7AA C1FC 0002                  		muls.w	#2,d0
0001B7AE 3140 0010                  		move.w	d0,$10(a0)
0001B7B2                            
0001B7B2 1028 0029                  		move.b	$29(a0),d0
0001B7B6 5828 0029                  		addq.b	#4,$29(a0)
0001B7BA 4EB8 2D6E                  		jsr	CalcSine
0001B7BE 4A40                       		tst.w	d0
0001B7C0 6B00                       		bmi.s	@upwards
0001B7C2 E548                       		lsl.w	#2,d0		; x4 go down faster
0001B7C4                            @upwards:
0001B7C4 3140 0012                  		move.w	d0,$12(a0)
0001B7C8 6000 0000                  		bra.w	loc_1AA1E
0001B7CC                            ; ===========================================================================
0001B7CC                            
0001B7CC                            Obj86_Ball_Homing:
0001B7CC 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001B7D2 6400                       		bhs.s	@homer
0001B7D4 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001B7DA 6400                       		bhs.s	Obj86_Ball_Vanish
0001B7DC 5328 0028                  		subq.b	#1,$28(a0)
0001B7E0 6400                       		bcc.s	@nomorehoming
0001B7E2 3038 D008                  		move.w	($FFFFD008).w,d0
0001B7E6 9068 0008                  		sub.w	8(a0),d0
0001B7EA D168 0010                  		add.w	d0,$10(a0)
0001B7EE D168 0010                  		add.w	d0,$10(a0)
0001B7F2                            @nomorehoming:
0001B7F2 6000 0000                  		bra.w	loc_1AA1E
0001B7F6                            @homer:
0001B7F6 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001B7FC 60F4                       		bra.s	@nomorehoming	; next frame ig
0001B7FE                            ; ===========================================================================
0001B7FE                            
0001B7FE                            Obj86_Ball_Speed:
0001B7FE 4268 0010                  		clr.w	$10(a0)
0001B802 7000                       		moveq	#0,d0
0001B804 1028 0028                  		move.b	$28(a0),d0
0001B808 E448                       		lsr.w	#2,d0
0001B80A D168 0012                  		add.w	d0,$12(a0)
0001B80E 1028 0029                  		move.b	$29(a0),d0
0001B812 D128 0028                  		add.b	d0,$28(a0)
0001B816 6000 0000                  		bra.w	loc_1AA1E
0001B81A                            ; ===========================================================================
0001B81A                            
0001B81A                            Obj86_Ball_Vanish:
0001B81A 303C 00E1                  		move.w	#$E1,d0
0001B81E 4EB9 0000 15D4             		jsr	(PlaySound_Special).l
0001B824 6000 0000                  		bra.w	loc_1AA34
0001B828                            ; ===========================================================================
0001B828                            
0001B828                            Obj86_Ball_Static:
0001B828 4268 0010                  		clr.w	$10(a0)
0001B82C 7000                       		moveq	#0,d0
0001B82E 7200                       		moveq	#0,d1
0001B830 1028 0028                  		move.b	$28(a0),d0
0001B834 1228 0029                  		move.b	$29(a0),d1
0001B838 D041                       		add.w	d1,d0
0001B83A 3140 0012                  		move.w	d0,$12(a0)
0001B83E 6000 0000                  		bra.w	loc_1AA1E
0001B842                            ; ===========================================================================
0001B842                            
0001B842                            Obj86_Ball_Standard:
0001B842                            loc_1AA1E:
0001B842 4EB9 0000 E252             		jsr	SpeedToPos
0001B848 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B84E 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001B852                            loc_1AA34:
0001B852 2268 0034                  		movea.l	$34(a0),a1
0001B856 5369 0038                  		subq.w	#1,$38(a1)
0001B85A 6000 F90E                  		bra.w	Obj84_Delete
0001B85E                            ; ===========================================================================
0001B85E                            Ani_obj86:
0001B85E                            	include "_anim\obj86.asm"
0001B85E                            ; ---------------------------------------------------------------------------
0001B85E                            ; Animation script - energy ball launcher (FZ)
0001B85E                            ; ---------------------------------------------------------------------------
0001B85E 0000                       		dc.w byte_1AA46-Ani_obj86
0001B860 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B862 0000                       		dc.w byte_1AA50-Ani_obj86
0001B864 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B868 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B86E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B874                            		even
0001B874                            		even
0001B874                            
0001B874                            ; ---------------------------------------------------------------------------
0001B874                            ; Sprite mappings - energy ball	launcher (FZ)
0001B874                            ; ---------------------------------------------------------------------------
0001B874                            Map_obj86:
0001B874                            	include "_maps\obj86.asm"
0001B874                            ; ---------------------------------------------------------------------------
0001B874                            ; Sprite mappings - energy ball	launcher (FZ)
0001B874                            ; ---------------------------------------------------------------------------
0001B874 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B878 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B87C 01                         byte_1AA5E:	dc.b 1
0001B87D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B882 01                         byte_1AA64:	dc.b 1
0001B883 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B888 01                         byte_1AA6A:	dc.b 1
0001B889 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B88E 01                         byte_1AA70:	dc.b 1
0001B88F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B894                            		even
0001B894                            		even
0001B894                            
0001B894                            Ani_obj86a:
0001B894                            	include "_anim\obj86a.asm"
0001B894                            ; ---------------------------------------------------------------------------
0001B894                            ; Animation script - energy balls (FZ)
0001B894                            ; ---------------------------------------------------------------------------
0001B894 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B896 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B898 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B8A7 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B8B6 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B8BA 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B8C4                            		even
0001B8C4                            		even
0001B8C4                            
0001B8C4                            ; ---------------------------------------------------------------------------
0001B8C4                            ; Sprite mappings - energy balls (FZ)
0001B8C4                            ; ---------------------------------------------------------------------------
0001B8C4                            Map_obj86a:
0001B8C4                            	include "_maps\obj86a.asm"
0001B8C4                            ; ---------------------------------------------------------------------------
0001B8C4                            ; Sprite mappings - energy balls (FZ)
0001B8C4                            ; ---------------------------------------------------------------------------
0001B8C4 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B8C8 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B8CC 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B8D0 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B8D4 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B8D8 0000                       		dc.w byte_1AB20-Map_obj86a
0001B8DA 02                         byte_1AABC:	dc.b 2
0001B8DB F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B8E0 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B8E5 02                         byte_1AAC7:	dc.b 2
0001B8E6 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B8EB F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B8F0 02                         byte_1AAD2:	dc.b 2
0001B8F1 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B8F6 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B8FB 02                         byte_1AADD:	dc.b 2
0001B8FC F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B901 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B906 02                         byte_1AAE8:	dc.b 2
0001B907 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B90C 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B911 02                         byte_1AAF3:	dc.b 2
0001B912 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B917 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B91C 01                         byte_1AAFE:	dc.b 1
0001B91D F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B922 01                         byte_1AB04:	dc.b 1
0001B923 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B928 02                         byte_1AB0A:	dc.b 2
0001B929 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B92E 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B933 02                         byte_1AB15:	dc.b 2
0001B934 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B939 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B93E 00                         byte_1AB20:	dc.b 0
0001B940 00                         		even
0001B940 00                         		even
0001B940                            
0001B940                            ; ===========================================================================
0001B940                            ; ---------------------------------------------------------------------------
0001B940                            ; Object 3E - prison capsule
0001B940                            ; ---------------------------------------------------------------------------
0001B940                            
0001B940                            Obj3E:					; XREF: Obj_Index
0001B940 7000                       		moveq	#0,d0
0001B942 1028 0024                  		move.b	$24(a0),d0
0001B946 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B94A 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B94E 3028 0008                  		move.w	8(a0),d0
0001B952 0240 FF80                  		andi.w	#$FF80,d0
0001B956 3238 F700                  		move.w	($FFFFF700).w,d1
0001B95A 0441 0080                  		subi.w	#$80,d1
0001B95E 0241 FF80                  		andi.w	#$FF80,d1
0001B962 9041                       		sub.w	d1,d0
0001B964 0C40 0280                  		cmpi.w	#$280,d0
0001B968 6200                       		bhi.s	Obj3E_Delete
0001B96A 4EF9 0000 E28C             		jmp	DisplaySprite
0001B970                            ; ===========================================================================
0001B970                            
0001B970                            Obj3E_Delete:
0001B970 4EF9 0000 E2C8             		jmp	DeleteObject
0001B976                            ; ===========================================================================
0001B976 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B978 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B97A 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B97C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B97E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B980 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B982 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B984 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B986                            
0001B986 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B98A 040C 0501                  		dc.b 4,	$C, 5, 1
0001B98E 0610 0403                  		dc.b 6,	$10, 4,	3
0001B992 0810 0305                  		dc.b 8,	$10, 3,	5
0001B996                            ; ===========================================================================
0001B996                            
0001B996                            Obj3E_Main:				; XREF: Obj3E_Index
0001B996 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B99E 317C 049D 0002             		move.w	#$49D,2(a0)
0001B9A4 117C 0004 0001             		move.b	#4,1(a0)
0001B9AA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B9B0 7000                       		moveq	#0,d0
0001B9B2 1028 0028                  		move.b	$28(a0),d0
0001B9B6 E548                       		lsl.w	#2,d0
0001B9B8 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B9BC 1159 0024                  		move.b	(a1)+,$24(a0)
0001B9C0 1159 0019                  		move.b	(a1)+,$19(a0)
0001B9C4 1159 0018                  		move.b	(a1)+,$18(a0)
0001B9C8 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B9CC 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B9D0 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B9D2 117C 0006 0020             		move.b	#6,$20(a0)
0001B9D8 117C 0008 0021             		move.b	#8,$21(a0)
0001B9DE                            
0001B9DE                            Obj3E_Not02:
0001B9DE 4E75                       		rts	
0001B9E0                            ; ===========================================================================
0001B9E0                            
0001B9E0                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B9E0 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B9E6 6700                       		beq.s	Obj3E_ChkOpened
0001B9E8 323C 002B                  		move.w	#$2B,d1
0001B9EC 343C 0018                  		move.w	#$18,d2
0001B9F0 363C 0018                  		move.w	#$18,d3
0001B9F4 3828 0008                  		move.w	8(a0),d4
0001B9F8 4EF9 0001 0656             		jmp	SolidObject
0001B9FE                            ; ===========================================================================
0001B9FE                            
0001B9FE                            Obj3E_ChkOpened:
0001B9FE 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001BA02 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001BA04 4228 0025                  		clr.b	$25(a0)
0001BA08 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BA0E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001BA14                            
0001BA14                            Obj3E_DoOpen:
0001BA14 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001BA1A 4E75                       		rts	
0001BA1C                            ; ===========================================================================
0001BA1C                            
0001BA1C                            Obj3E_Switched:				; XREF: Obj3E_Index
0001BA1C 323C 0017                  		move.w	#$17,d1
0001BA20 343C 0008                  		move.w	#8,d2
0001BA24 363C 0008                  		move.w	#8,d3
0001BA28 3828 0008                  		move.w	8(a0),d4
0001BA2C 4EB9 0001 0656             		jsr	SolidObject
0001BA32 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001BA38 4EB9 0000 B2E4             		jsr	AnimateSprite
0001BA3E 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001BA44 4A28 0025                  		tst.b	$25(a0)
0001BA48 6700                       		beq.s	locret_1AC60
0001BA4A 5068 000C                  		addq.w	#8,$C(a0)
0001BA4E 117C 000A 0024             		move.b	#$A,$24(a0)
0001BA54 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001BA5A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001BA5E 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001BA62 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001BA68 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001BA6E 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001BA70 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001BA76 6000                       		bra.s	Obj3E_ContinueCode
0001BA78                            
0001BA78                            Obj3E_MoveLeft:
0001BA78 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001BA7E                            
0001BA7E                            Obj3E_ContinueCode:
0001BA7E 4228 0025                  		clr.b	$25(a0)
0001BA82 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BA88 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001BA8E                            
0001BA8E                            locret_1AC60:
0001BA8E 4E75                       		rts	
0001BA90                            ; ===========================================================================
0001BA90                            
0001BA90                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001BA90 7007                       		moveq	#7,d0
0001BA92 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001BA96 6600                       		bne.s	loc_1ACA0
0001BA98 4EB9 0000 E712             		jsr	SingleObjLoad
0001BA9E 6600                       		bne.s	loc_1ACA0
0001BAA0 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001BAA4 3368 0008 0008             		move.w	8(a0),8(a1)
0001BAAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BAB0 4EB9 0000 2D48             		jsr	(RandomNumber).l
0001BAB6 7200                       		moveq	#0,d1
0001BAB8 1200                       		move.b	d0,d1
0001BABA E409                       		lsr.b	#2,d1
0001BABC 0441 0020                  		subi.w	#$20,d1
0001BAC0 D369 0008                  		add.w	d1,8(a1)
0001BAC4 E048                       		lsr.w	#8,d0
0001BAC6 E608                       		lsr.b	#3,d0
0001BAC8 D169 000C                  		add.w	d0,$C(a1)
0001BACC                            
0001BACC                            loc_1ACA0:
0001BACC 5368 001E                  		subq.w	#1,$1E(a0)
0001BAD0 6700                       		beq.s	Obj3E_MakeAnimal
0001BAD2 4E75                       		rts	
0001BAD4                            ; ===========================================================================
0001BAD4                            
0001BAD4                            Obj3E_MakeAnimal:
0001BAD4 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001BADA 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001BAE0 117C 0006 001A             		move.b	#6,$1A(a0)
0001BAE6 317C 0096 001E             		move.w	#$96,$1E(a0)
0001BAEC 0668 0020 000C             		addi.w	#$20,$C(a0)
0001BAF2 7C07                       		moveq	#7,d6
0001BAF4 3A3C 009A                  		move.w	#$9A,d5
0001BAF8 78E4                       		moveq	#-$1C,d4
0001BAFA                            
0001BAFA                            Obj3E_Loop:
0001BAFA 4EB9 0000 E712             		jsr	SingleObjLoad
0001BB00 6600                       		bne.s	locret_1ACF8
0001BB02 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001BB06 3368 0008 0008             		move.w	8(a0),8(a1)
0001BB0C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BB12 D969 0008                  		add.w	d4,8(a1)
0001BB16 5E44                       		addq.w	#7,d4
0001BB18 3345 0036                  		move.w	d5,$36(a1)
0001BB1C 5145                       		subq.w	#8,d5
0001BB1E 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001BB22                            
0001BB22                            locret_1ACF8:
0001BB22 4E75                       		rts	
0001BB24                            ; ===========================================================================
0001BB24                            
0001BB24                            Obj3E_Animals:				; XREF: Obj3E_Index
0001BB24 7007                       		moveq	#7,d0
0001BB26 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001BB2A 6600                       		bne.s	loc_1AD38
0001BB2C 4EB9 0000 E712             		jsr	SingleObjLoad
0001BB32 6600                       		bne.s	loc_1AD38
0001BB34 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001BB38 3368 0008 0008             		move.w	8(a0),8(a1)
0001BB3E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BB44 4EB9 0000 2D48             		jsr	(RandomNumber).l
0001BB4A 0240 001F                  		andi.w	#$1F,d0
0001BB4E 5D40                       		subq.w	#6,d0
0001BB50 4A41                       		tst.w	d1
0001BB52 6A00                       		bpl.s	loc_1AD2E
0001BB54 4440                       		neg.w	d0
0001BB56                            
0001BB56                            loc_1AD2E:
0001BB56 D169 0008                  		add.w	d0,8(a1)
0001BB5A 337C 000C 0036             		move.w	#$C,$36(a1)
0001BB60                            
0001BB60                            loc_1AD38:
0001BB60 5368 001E                  		subq.w	#1,$1E(a0)
0001BB64 6600                       		bne.s	locret_1AD48
0001BB66 5428 0024                  		addq.b	#2,$24(a0)
0001BB6A 317C 00B4 001E             		move.w	#180,$1E(a0)
0001BB70                            
0001BB70                            locret_1AD48:
0001BB70 4E75                       		rts	
0001BB72                            ; ===========================================================================
0001BB72                            
0001BB72                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001BB72 703E                       		moveq	#$3E,d0
0001BB74 7228                       		moveq	#$28,d1
0001BB76 7440                       		moveq	#$40,d2
0001BB78 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001BB7C                            
0001BB7C                            Obj3E_FindObj28:
0001BB7C B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001BB7E 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001BB80 D2C2                       		adda.w	d2,a1		; next object RAM
0001BB82 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001BB86                            
0001BB86 4EB9 0000 F912             		jsr	GotThroughAct
0001BB8C 4EF9 0000 E2C8             		jmp	DeleteObject
0001BB92                            ; ===========================================================================
0001BB92                            
0001BB92                            Obj3E_Obj28Found:
0001BB92 4E75                       		rts	
0001BB94                            ; ===========================================================================
0001BB94                            Ani_obj3E:
0001BB94                            	include "_anim\obj3E.asm"
0001BB94                            ; ---------------------------------------------------------------------------
0001BB94                            ; Animation script - prison capsule
0001BB94                            ; ---------------------------------------------------------------------------
0001BB94 0000                       		dc.w byte_1AD70-Ani_obj3E
0001BB96 0000                       		dc.w byte_1AD70-Ani_obj3E
0001BB98 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001BB9C                            		even
0001BB9C                            		even
0001BB9C                            
0001BB9C                            ; ---------------------------------------------------------------------------
0001BB9C                            ; Sprite mappings - prison capsule
0001BB9C                            ; ---------------------------------------------------------------------------
0001BB9C                            Map_obj3E:
0001BB9C                            	include "_maps\obj3E.asm"
0001BB9C                            ; ---------------------------------------------------------------------------
0001BB9C                            ; Sprite mappings - prison capsule
0001BB9C                            ; ---------------------------------------------------------------------------
0001BB9C 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001BBA0 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001BBA4 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001BBA8 0000                       		dc.w byte_1ADE2-Map_obj3E
0001BBAA 07                         byte_1AD82:	dc.b 7
0001BBAB E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001BBB0 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001BBB5 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001BBBA F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001BBBF F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001BBC4 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001BBC9 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001BBCE 01                         byte_1ADA6:	dc.b 1
0001BBCF F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001BBD4 06                         byte_1ADAC:	dc.b 6
0001BBD5 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001BBDA 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001BBDF 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001BBE4 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001BBE9 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001BBEE 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001BBF3 01                         byte_1ADCB:	dc.b 1
0001BBF4 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001BBF9 02                         byte_1ADD1:	dc.b 2
0001BBFA E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001BBFF 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001BC04 01                         byte_1ADDC:	dc.b 1
0001BC05 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001BC0A 00                         byte_1ADE2:	dc.b 0
0001BC0C 00                         		even
0001BC0C 00                         		even
0001BC0C                            
0001BC0C                            ; ---------------------------------------------------------------------------
0001BC0C                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001BC0C                            ; ---------------------------------------------------------------------------
0001BC0C                            
0001BC0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC0C                            
0001BC0C                            
0001BC0C                            TouchResponse:				; XREF: Obj01
0001BC0C 4E71                       		nop	
0001BC0E 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001BC12 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001BC16 5142                       		subq.w	#8,d2
0001BC18 7A00                       		moveq	#0,d5
0001BC1A 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001BC1E 5705                       		subq.b	#3,d5
0001BC20 9645                       		sub.w	d5,d3
0001BC22 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001BC28 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001BC2A 0643 000C                  		addi.w	#$C,d3
0001BC2E 7A0A                       		moveq	#$A,d5
0001BC30                            
0001BC30                            Touch_NoDuck:
0001BC30 383C 0010                  		move.w	#$10,d4
0001BC34 DA45                       		add.w	d5,d5
0001BC36 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001BC3A 3C3C 005F                  		move.w	#$5F,d6
0001BC3E                            
0001BC3E                            Touch_Loop:
0001BC3E 4A29 0001                  		tst.b	1(a1)
0001BC42 6A00                       		bpl.s	Touch_NextObj
0001BC44 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001BC48 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001BC4A                            
0001BC4A                            Touch_NextObj:
0001BC4A 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001BC4E 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001BC52                            
0001BC52 7000                       		moveq	#0,d0
0001BC54 4E75                       		rts	
0001BC56                            ; ===========================================================================
0001BC56 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001BC58 0C14                       		dc.b   $C, $14
0001BC5A 140C                       		dc.b  $14,  $C
0001BC5C 0410                       		dc.b	4, $10
0001BC5E 0C12                       		dc.b   $C, $12
0001BC60 1010                       		dc.b  $10, $10
0001BC62 0606                       		dc.b	6,   6
0001BC64 180C                       		dc.b  $18,  $C
0001BC66 0C10                       		dc.b   $C, $10
0001BC68 100C                       		dc.b  $10,  $C
0001BC6A 0808                       		dc.b	8,   8
0001BC6C 1410                       		dc.b  $14, $10
0001BC6E 1408                       		dc.b  $14,   8
0001BC70 0E0E                       		dc.b   $E,  $E
0001BC72 1818                       		dc.b  $18, $18
0001BC74 2810                       		dc.b  $28, $10
0001BC76 1018                       		dc.b  $10, $18
0001BC78 0810                       		dc.b	8, $10
0001BC7A 2070                       		dc.b  $20, $70
0001BC7C 4020                       		dc.b  $40, $20
0001BC7E 8020                       		dc.b  $80, $20
0001BC80 2020                       		dc.b  $20, $20
0001BC82 0808                       		dc.b	8,   8
0001BC84 0404                       		dc.b	4,   4
0001BC86 2008                       		dc.b  $20,   8
0001BC88 0C0C                       		dc.b   $C,  $C
0001BC8A 0804                       		dc.b	8,   4
0001BC8C 1804                       		dc.b  $18,   4
0001BC8E 2804                       		dc.b  $28,   4
0001BC90 0408                       		dc.b	4,   8
0001BC92 0418                       		dc.b	4, $18
0001BC94 0428                       		dc.b	4, $28
0001BC96 0420                       		dc.b	4, $20
0001BC98 1818                       		dc.b  $18, $18
0001BC9A 0C18                       		dc.b   $C, $18
0001BC9C 4808                       		dc.b  $48,   8
0001BC9E                            ; ===========================================================================
0001BC9E                            
0001BC9E                            Touch_Height:				; XREF: TouchResponse
0001BC9E 0240 003F                  		andi.w	#$3F,d0
0001BCA2 D040                       		add.w	d0,d0
0001BCA4 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001BCA8 7200                       		moveq	#0,d1
0001BCAA 121A                       		move.b	(a2)+,d1
0001BCAC 3029 0008                  		move.w	8(a1),d0
0001BCB0 9041                       		sub.w	d1,d0
0001BCB2 9042                       		sub.w	d2,d0
0001BCB4 6400                       		bcc.s	loc_1AE98
0001BCB6 D241                       		add.w	d1,d1
0001BCB8 D041                       		add.w	d1,d0
0001BCBA 6500                       		bcs.s	Touch_Width
0001BCBC 6000 FF8C                  		bra.w	Touch_NextObj
0001BCC0                            ; ===========================================================================
0001BCC0                            
0001BCC0                            loc_1AE98:
0001BCC0 B044                       		cmp.w	d4,d0
0001BCC2 6200 FF86                  		bhi.w	Touch_NextObj
0001BCC6                            
0001BCC6                            Touch_Width:
0001BCC6 7200                       		moveq	#0,d1
0001BCC8 121A                       		move.b	(a2)+,d1
0001BCCA 3029 000C                  		move.w	$C(a1),d0
0001BCCE 9041                       		sub.w	d1,d0
0001BCD0 9043                       		sub.w	d3,d0
0001BCD2 6400                       		bcc.s	loc_1AEB6
0001BCD4 D241                       		add.w	d1,d1
0001BCD6 D240                       		add.w	d0,d1
0001BCD8 6500                       		bcs.s	Touch_ChkValue
0001BCDA 6000 FF6E                  		bra.w	Touch_NextObj
0001BCDE                            ; ===========================================================================
0001BCDE                            
0001BCDE                            loc_1AEB6:
0001BCDE B045                       		cmp.w	d5,d0
0001BCE0 6200 FF68                  		bhi.w	Touch_NextObj
0001BCE4                            
0001BCE4                            Touch_ChkValue:
0001BCE4 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001BCE8 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001BCEC 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001BCF0 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001BCF4 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001BCF8 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001BCFA 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001BCFE                            
0001BCFE                            ; touch	response is $40-$7F
0001BCFE                            
0001BCFE 1029 0020                  		move.b	$20(a1),d0
0001BD02 0200 003F                  		andi.b	#$3F,d0
0001BD06 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001BD0A 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001BD0C 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001BD12 6400 0000                  		bcc.w	locret_1AEF2
0001BD16 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BD1A                            
0001BD1A                            locret_1AEF2:
0001BD1A 4E75                       		rts	
0001BD1C                            ; ===========================================================================
0001BD1C                            
0001BD1C                            Touch_Monitor:
0001BD1C 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BD20 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BD22 3028 000C                  		move.w	$C(a0),d0
0001BD26 0440 0010                  		subi.w	#$10,d0
0001BD2A B069 000C                  		cmp.w	$C(a1),d0
0001BD2E 6500                       		bcs.s	locret_1AF2E
0001BD30 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BD34 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BD3A 4A29 0025                  		tst.b	$25(a1)
0001BD3E 6600                       		bne.s	locret_1AF2E
0001BD40 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BD44 4E75                       		rts	
0001BD46                            ; ===========================================================================
0001BD46                            
0001BD46                            loc_1AF1E:
0001BD46 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BD4C 6600                       		bne.s	locret_1AF2E
0001BD4E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BD52 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BD56                            
0001BD56                            locret_1AF2E:
0001BD56 4E75                       		rts	
0001BD58                            ; ===========================================================================
0001BD58                            
0001BD58                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BD58 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BD5C 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BD5E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BD64 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BD68                            
0001BD68                            loc_1AF40:
0001BD68 4A29 0021                  		tst.b	$21(a1)
0001BD6C 6700                       		beq.s	Touch_KillEnemy
0001BD6E 4468 0010                  		neg.w	$10(a0)
0001BD72 4468 0012                  		neg.w	$12(a0)
0001BD76 E0E8 0010                  		asr	$10(a0)
0001BD7A E0E8 0012                  		asr	$12(a0)
0001BD7E 137C 0000 0020             		move.b	#0,$20(a1)
0001BD84 5329 0021                  		subq.b	#1,$21(a1)
0001BD88 6600                       		bne.s	locret_1AF68
0001BD8A 08E9 0007 0022             		bset	#7,$22(a1)
0001BD90                            
0001BD90                            locret_1AF68:
0001BD90 4E75                       		rts	
0001BD92                            ; ===========================================================================
0001BD92                            
0001BD92                            Touch_KillEnemy:
0001BD92 08E9 0007 0022             		bset	#7,$22(a1)
0001BD98 7000                       		moveq	#0,d0
0001BD9A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BD9E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BDA2 0C40 0006                  		cmpi.w	#6,d0
0001BDA6 6500                       		bcs.s	loc_1AF82
0001BDA8 7006                       		moveq	#6,d0
0001BDAA                            
0001BDAA                            loc_1AF82:
0001BDAA 3340 003E                  		move.w	d0,$3E(a1)
0001BDAE 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BDB2 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BDB8 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BDBA 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BDBE 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BDC4                            
0001BDC4                            loc_1AF9C:
0001BDC4 6100 0000                  		bsr.w	AddPoints
0001BDC8 7400                       		moveq	#0,d2	; GMZ
0001BDCA 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BDCC 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BDCE                            
0001BDCE                            TouchKE_Explode:
0001BDCE 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BDD2 137C 0000 0024             		move.b	#0,$24(a1)
0001BDD8 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BDDC                            
0001BDDC                            TouchKE_NextExplosion:
0001BDDC 5802                       		addq.b	#4,d2
0001BDDE 4EB9 0000 E712             		jsr	SingleObjLoad
0001BDE4 6600                       		bne.s	TouchKE_NoExplosion
0001BDE6 336A 0008 0008             		move.w	8(a2),8(a1)
0001BDEC 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BDF2 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BDF6                            
0001BDF6                            TouchKE_NoExplosion:
0001BDF6 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BDF8 4A68 0012                  		tst.w	$12(a0)
0001BDFC 6B00                       		bmi.s	loc_1AFC2
0001BDFE 3028 000C                  		move.w	$C(a0),d0
0001BE02 B069 000C                  		cmp.w	$C(a1),d0
0001BE06 6400                       		bcc.s	loc_1AFCA
0001BE08 4468 0012                  		neg.w	$12(a0)
0001BE0C 4E75                       		rts	
0001BE0E                            ; ===========================================================================
0001BE0E                            
0001BE0E                            loc_1AFC2:
0001BE0E 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BE14 4E75                       		rts	
0001BE16                            ; ===========================================================================
0001BE16                            
0001BE16                            loc_1AFCA:
0001BE16 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BE1C 4E75                       		rts	
0001BE1E                            ; ===========================================================================
0001BE1E 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BE26                            ; ===========================================================================
0001BE26                            
0001BE26                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BE26 08E9 0007 0022             		bset	#7,$22(a1)
0001BE2C                            
0001BE2C                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BE2C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BE30 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BE32                            
0001BE32                            loc_1AFE6:				; XREF: Touch_Hurt
0001BE32 70FF                       		moveq	#-1,d0
0001BE34 4E75                       		rts	
0001BE36                            ; ===========================================================================
0001BE36                            
0001BE36                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BE36 4E71                       		nop	
0001BE38 4A68 0030                  		tst.w	$30(a0)
0001BE3C 66F4                       		bne.s	loc_1AFE6
0001BE3E 2449                       		movea.l	a1,a2
0001BE40                            
0001BE40                            ; End of function TouchResponse
0001BE40                            ; continue straight to HurtSonic
0001BE40                            
0001BE40                            ; ---------------------------------------------------------------------------
0001BE40                            ; Hurting Sonic	subroutine
0001BE40                            ; ---------------------------------------------------------------------------
0001BE40                            
0001BE40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE40                            
0001BE40                            
0001BE40                            HurtSonic:
0001BE40 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BE44 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BE46 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BE4A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BE4E 4EB9 0000 E712             		jsr	SingleObjLoad
0001BE54 6600                       		bne.s	Hurt_Shield
0001BE56 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BE5A 3368 0008 0008             		move.w	8(a0),8(a1)
0001BE60 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BE66                            
0001BE66                            Hurt_Shield:
0001BE66 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BE6C 117C 0004 0024             		move.b	#4,$24(a0)
0001BE72 6100 862A                  		bsr.w	Sonic_ResetOnFloor
0001BE76 08E8 0001 0022             		bset	#1,$22(a0)
0001BE7C 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BE82 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BE88 0828 0006 0022             		btst	#6,$22(a0)
0001BE8E 6700                       		beq.s	Hurt_Reverse
0001BE90 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BE96 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BE9C                            
0001BE9C                            Hurt_Reverse:
0001BE9C 3028 0008                  		move.w	8(a0),d0
0001BEA0 B06A 0008                  		cmp.w	8(a2),d0
0001BEA4 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BEA6 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BEAA                            
0001BEAA                            Hurt_ChkSpikes:
0001BEAA 317C 0000 0014             		move.w	#0,$14(a0)
0001BEB0 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BEB6 317C 0078 0030             		move.w	#$78,$30(a0)
0001BEBC 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BEC0 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BEC4 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BEC6 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BECA 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BECC 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BED0                            
0001BED0                            Hurt_Sound:
0001BED0 4EB9 0000 15D4             		jsr	(PlaySound_Special).l
0001BED6 70FF                       		moveq	#-1,d0
0001BED8 4E75                       		rts	
0001BEDA                            ; ===========================================================================
0001BEDA                            
0001BEDA                            Hurt_NoRings:
0001BEDA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BEDE 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BEE2                            ; End of function HurtSonic
0001BEE2                            
0001BEE2                            ; ---------------------------------------------------------------------------
0001BEE2                            ; Subroutine to	kill Sonic
0001BEE2                            ; ---------------------------------------------------------------------------
0001BEE2                            
0001BEE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEE2                            
0001BEE2                            
0001BEE2                            KillSonic:
0001BEE2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BEE6 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BEE8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BEEE 117C 0006 0024             		move.b	#6,$24(a0)
0001BEF4 6100 85A8                  		bsr.w	Sonic_ResetOnFloor
0001BEF8 08E8 0001 0022             		bset	#1,$22(a0)
0001BEFE 317C F900 0012             		move.w	#-$700,$12(a0)
0001BF04 317C 0000 0010             		move.w	#0,$10(a0)
0001BF0A 317C 0000 0014             		move.w	#0,$14(a0)
0001BF10 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BF16 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BF1C 08E8 0007 0002             		bset	#7,2(a0)
0001BF22 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BF26 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BF2A 6600                       		bne.s	Kill_Sound
0001BF2C 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BF30                            
0001BF30                            Kill_Sound:
0001BF30 4EB9 0000 15D4             		jsr	(PlaySound_Special).l
0001BF36                            
0001BF36                            Kill_NoDeath:
0001BF36 70FF                       		moveq	#-1,d0
0001BF38 4E75                       		rts	
0001BF3A                            ; End of function KillSonic
0001BF3A                            
0001BF3A                            
0001BF3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF3A                            
0001BF3A                            
0001BF3A                            Touch_Special:				; XREF: Touch_ChkValue
0001BF3A 1229 0020                  		move.b	$20(a1),d1
0001BF3E 0201 003F                  		andi.b	#$3F,d1
0001BF42 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BF46 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BF48 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BF4C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BF4E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BF52 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BF54 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BF58 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BF5A 4E75                       		rts	
0001BF5C                            ; ===========================================================================
0001BF5C                            
0001BF5C                            Touch_CatKiller:			; XREF: Touch_Special
0001BF5C 6000 FEC8                  		bra.w	loc_1AFDA
0001BF60                            ; ===========================================================================
0001BF60                            
0001BF60                            Touch_Yadrin:				; XREF: Touch_Special
0001BF60 9A40                       		sub.w	d0,d5
0001BF62 0C45 0008                  		cmpi.w	#8,d5
0001BF66 6400                       		bcc.s	loc_1B144
0001BF68 3029 0008                  		move.w	8(a1),d0
0001BF6C 5940                       		subq.w	#4,d0
0001BF6E 0829 0000 0022             		btst	#0,$22(a1)
0001BF74 6700                       		beq.s	loc_1B130
0001BF76 0440 0010                  		subi.w	#$10,d0
0001BF7A                            
0001BF7A                            loc_1B130:
0001BF7A 9042                       		sub.w	d2,d0
0001BF7C 6400                       		bcc.s	loc_1B13C
0001BF7E 0640 0018                  		addi.w	#$18,d0
0001BF82 6500                       		bcs.s	loc_1B140
0001BF84 6000                       		bra.s	loc_1B144
0001BF86                            ; ===========================================================================
0001BF86                            
0001BF86                            loc_1B13C:
0001BF86 B044                       		cmp.w	d4,d0
0001BF88 6200                       		bhi.s	loc_1B144
0001BF8A                            
0001BF8A                            loc_1B140:
0001BF8A 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BF8E                            ; ===========================================================================
0001BF8E                            
0001BF8E                            loc_1B144:
0001BF8E 6000 FDC8                  		bra.w	Touch_Enemy
0001BF92                            ; ===========================================================================
0001BF92                            
0001BF92                            Touch_D7orE1:				; XREF: Touch_Special
0001BF92 5229 0021                  		addq.b	#1,$21(a1)
0001BF96 4E75                       		rts	
0001BF98                            ; End of function Touch_Special
0001BF98                            
0001BF98                            ; ---------------------------------------------------------------------------
0001BF98                            ; Subroutine to	show the special stage layout
0001BF98                            ; ---------------------------------------------------------------------------
0001BF98                            
0001BF98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF98                            
0001BF98                            
0001BF98                            SS_ShowLayout:				; XREF: SpecialStage
0001BF98 6100 0000                  		bsr.w	SS_AniWallsRings
0001BF9C 6100 0000                  		bsr.w	SS_AniItems
0001BFA0 3F05                       		move.w	d5,-(sp)
0001BFA2 43F8 8000                  		lea	($FFFF8000).w,a1
0001BFA6 1038 F780                  		move.b	($FFFFF780).w,d0
0001BFAA 0200 00FC                  		andi.b	#$FC,d0
0001BFAE 4EB9 0000 2D6E             		jsr	(CalcSine).l
0001BFB4 3800                       		move.w	d0,d4
0001BFB6 3A01                       		move.w	d1,d5
0001BFB8 C9FC 0018                  		muls.w	#$18,d4
0001BFBC CBFC 0018                  		muls.w	#$18,d5
0001BFC0 7400                       		moveq	#0,d2
0001BFC2 3438 F700                  		move.w	($FFFFF700).w,d2
0001BFC6 84FC 0018                  		divu.w	#$18,d2
0001BFCA 4842                       		swap	d2
0001BFCC 4442                       		neg.w	d2
0001BFCE 0642 FF4C                  		addi.w	#-$B4,d2
0001BFD2 7600                       		moveq	#0,d3
0001BFD4 3638 F704                  		move.w	($FFFFF704).w,d3
0001BFD8 86FC 0018                  		divu.w	#$18,d3
0001BFDC 4843                       		swap	d3
0001BFDE 4443                       		neg.w	d3
0001BFE0 0643 FF4C                  		addi.w	#-$B4,d3
0001BFE4 3E3C 000F                  		move.w	#$F,d7
0001BFE8                            
0001BFE8                            loc_1B19E:
0001BFE8 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BFEC 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BFF0 4440                       		neg.w	d0
0001BFF2 C3C2                       		muls.w	d2,d1
0001BFF4 C1C3                       		muls.w	d3,d0
0001BFF6 2C00                       		move.l	d0,d6
0001BFF8 DC81                       		add.l	d1,d6
0001BFFA 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BFFE C1C2                       		muls.w	d2,d0
0001C000 C3C3                       		muls.w	d3,d1
0001C002 D280                       		add.l	d0,d1
0001C004 2406                       		move.l	d6,d2
0001C006 3C3C 000F                  		move.w	#$F,d6
0001C00A                            
0001C00A                            loc_1B1C0:
0001C00A 2002                       		move.l	d2,d0
0001C00C E080                       		asr.l	#8,d0
0001C00E 32C0                       		move.w	d0,(a1)+
0001C010 2001                       		move.l	d1,d0
0001C012 E080                       		asr.l	#8,d0
0001C014 32C0                       		move.w	d0,(a1)+
0001C016 D485                       		add.l	d5,d2
0001C018 D284                       		add.l	d4,d1
0001C01A 51CE FFEE                  		dbf	d6,loc_1B1C0
0001C01E                            
0001C01E 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001C022 0643 0018                  		addi.w	#$18,d3
0001C026 51CF FFC0                  		dbf	d7,loc_1B19E
0001C02A                            
0001C02A 3A1F                       		move.w	(sp)+,d5
0001C02C 41F9 00FF 0000             		lea	($FF0000).l,a0
0001C032 7000                       		moveq	#0,d0
0001C034 3038 F704                  		move.w	($FFFFF704).w,d0
0001C038 80FC 0018                  		divu.w	#$18,d0
0001C03C C0FC 0080                  		mulu.w	#$80,d0
0001C040 D1C0                       		adda.l	d0,a0
0001C042 7000                       		moveq	#0,d0
0001C044 3038 F700                  		move.w	($FFFFF700).w,d0
0001C048 80FC 0018                  		divu.w	#$18,d0
0001C04C D0C0                       		adda.w	d0,a0
0001C04E 49F8 8000                  		lea	($FFFF8000).w,a4
0001C052 3E3C 000F                  		move.w	#$F,d7
0001C056                            
0001C056                            loc_1B20C:
0001C056 3C3C 000F                  		move.w	#$F,d6
0001C05A                            
0001C05A                            loc_1B210:
0001C05A 7000                       		moveq	#0,d0
0001C05C 1018                       		move.b	(a0)+,d0
0001C05E 6700                       		beq.s	loc_1B268
0001C060 0C00 004E                  		cmpi.b	#$4E,d0
0001C064 6200                       		bhi.s	loc_1B268
0001C066 3614                       		move.w	(a4),d3
0001C068 0643 0120                  		addi.w	#$120,d3
0001C06C 0C43 0070                  		cmpi.w	#$70,d3
0001C070 6500                       		bcs.s	loc_1B268
0001C072 0C43 01D0                  		cmpi.w	#$1D0,d3
0001C076 6400                       		bcc.s	loc_1B268
0001C078 342C 0002                  		move.w	2(a4),d2
0001C07C 0642 00F0                  		addi.w	#$F0,d2
0001C080 0C42 0070                  		cmpi.w	#$70,d2
0001C084 6500                       		bcs.s	loc_1B268
0001C086 0C42 0170                  		cmpi.w	#$170,d2
0001C08A 6400                       		bcc.s	loc_1B268
0001C08C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001C092 E748                       		lsl.w	#3,d0
0001C094 4BF5 0000                  		lea	(a5,d0.w),a5
0001C098 225D                       		movea.l	(a5)+,a1
0001C09A 321D                       		move.w	(a5)+,d1
0001C09C D241                       		add.w	d1,d1
0001C09E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001C0A2 365D                       		movea.w	(a5)+,a3
0001C0A4 7200                       		moveq	#0,d1
0001C0A6 1219                       		move.b	(a1)+,d1
0001C0A8 5301                       		subq.b	#1,d1
0001C0AA 6B00                       		bmi.s	loc_1B268
0001C0AC 4EB9 0000 E3EA             		jsr	sub_D762
0001C0B2                            
0001C0B2                            loc_1B268:
0001C0B2 584C                       		addq.w	#4,a4
0001C0B4 51CE FFA4                  		dbf	d6,loc_1B210
0001C0B8                            
0001C0B8 41E8 0070                  		lea	$70(a0),a0
0001C0BC 51CF FF98                  		dbf	d7,loc_1B20C
0001C0C0                            
0001C0C0 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001C0C4 0C05 0050                  		cmpi.b	#$50,d5
0001C0C8 6700                       		beq.s	loc_1B288
0001C0CA 24BC 0000 0000             		move.l	#0,(a2)
0001C0D0 4E75                       		rts	
0001C0D2                            ; ===========================================================================
0001C0D2                            
0001C0D2                            loc_1B288:
0001C0D2 157C 0000 FFFB             		move.b	#0,-5(a2)
0001C0D8 4E75                       		rts	
0001C0DA                            ; End of function SS_ShowLayout
0001C0DA                            
0001C0DA                            ; ---------------------------------------------------------------------------
0001C0DA                            ; Subroutine to	animate	walls and rings	in the special stage
0001C0DA                            ; ---------------------------------------------------------------------------
0001C0DA                            
0001C0DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0DA                            
0001C0DA                            
0001C0DA                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001C0DA 43F9 00FF 400C             		lea	($FF400C).l,a1
0001C0E0 7000                       		moveq	#0,d0
0001C0E2 1038 F780                  		move.b	($FFFFF780).w,d0
0001C0E6 E408                       		lsr.b	#2,d0
0001C0E8 0240 000F                  		andi.w	#$F,d0
0001C0EC 7223                       		moveq	#$23,d1
0001C0EE                            
0001C0EE                            loc_1B2A4:
0001C0EE 3280                       		move.w	d0,(a1)
0001C0F0 5049                       		addq.w	#8,a1
0001C0F2 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001C0F6                            
0001C0F6 43F9 00FF 4005             		lea	($FF4005).l,a1
0001C0FC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001C100 6A00                       		bpl.s	loc_1B2C8
0001C102 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001C108 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001C10C 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001C112                            
0001C112                            loc_1B2C8:
0001C112 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001C118 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001C11C 6A00                       		bpl.s	loc_1B2E4
0001C11E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001C124 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001C128 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001C12E                            
0001C12E                            loc_1B2E4:
0001C12E 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001C132 1340 0138                  		move.b	d0,$138(a1)
0001C136 1340 0160                  		move.b	d0,$160(a1)
0001C13A 1340 0148                  		move.b	d0,$148(a1)
0001C13E 1340 0150                  		move.b	d0,$150(a1)
0001C142 1340 01D8                  		move.b	d0,$1D8(a1)
0001C146 1340 01E0                  		move.b	d0,$1E0(a1)
0001C14A 1340 01E8                  		move.b	d0,$1E8(a1)
0001C14E 1340 01F0                  		move.b	d0,$1F0(a1)
0001C152 1340 01F8                  		move.b	d0,$1F8(a1)
0001C156 1340 0200                  		move.b	d0,$200(a1)
0001C15A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001C15E 6A00                       		bpl.s	loc_1B326
0001C160 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001C166 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001C16A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001C170                            
0001C170                            loc_1B326:
0001C170 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001C174 1340 0168                  		move.b	d0,$168(a1)
0001C178 1340 0170                  		move.b	d0,$170(a1)
0001C17C 1340 0178                  		move.b	d0,$178(a1)
0001C180 1340 0180                  		move.b	d0,$180(a1)
0001C184 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001C188 6A00                       		bpl.s	loc_1B350
0001C18A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001C190 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001C194 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001C19A                            
0001C19A                            loc_1B350:
0001C19A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001C1A0 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001C1A6 7000                       		moveq	#0,d0
0001C1A8 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001C1AC D040                       		add.w	d0,d0
0001C1AE 41F0 0000                  		lea	(a0,d0.w),a0
0001C1B2 3290                       		move.w	(a0),(a1)
0001C1B4 3368 0002 0008             		move.w	2(a0),8(a1)
0001C1BA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C1C0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C1C6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C1CC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C1D2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C1D8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C1DE D0FC 0020                  		adda.w	#$20,a0
0001C1E2 D2FC 0048                  		adda.w	#$48,a1
0001C1E6 3290                       		move.w	(a0),(a1)
0001C1E8 3368 0002 0008             		move.w	2(a0),8(a1)
0001C1EE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C1F4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C1FA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C200 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C206 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C20C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C212 D0FC 0020                  		adda.w	#$20,a0
0001C216 D2FC 0048                  		adda.w	#$48,a1
0001C21A 3290                       		move.w	(a0),(a1)
0001C21C 3368 0002 0008             		move.w	2(a0),8(a1)
0001C222 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C228 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C22E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C234 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C23A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C240 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C246 D0FC 0020                  		adda.w	#$20,a0
0001C24A D2FC 0048                  		adda.w	#$48,a1
0001C24E 3290                       		move.w	(a0),(a1)
0001C250 3368 0002 0008             		move.w	2(a0),8(a1)
0001C256 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C25C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C262 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C268 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C26E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C274 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C27A D0FC 0020                  		adda.w	#$20,a0
0001C27E D2FC 0048                  		adda.w	#$48,a1
0001C282 4E75                       		rts	
0001C284                            ; End of function SS_AniWallsRings
0001C284                            
0001C284                            ; ===========================================================================
0001C284 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C294 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C2A4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C2B4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C2C4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C2D4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C2E4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C2F4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C304                            ; ---------------------------------------------------------------------------
0001C304                            ; Subroutine to	remove items when you collect them in the special stage
0001C304                            ; ---------------------------------------------------------------------------
0001C304                            
0001C304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C304                            
0001C304                            
0001C304                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C304 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C30A 303C 001F                  		move.w	#$1F,d0
0001C30E                            
0001C30E                            loc_1B4C4:
0001C30E 4A12                       		tst.b	(a2)
0001C310 6700                       		beq.s	locret_1B4CE
0001C312 504A                       		addq.w	#8,a2
0001C314 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C318                            
0001C318                            locret_1B4CE:
0001C318 4E75                       		rts	
0001C31A                            ; End of function SS_RemoveCollectedItem
0001C31A                            
0001C31A                            ; ---------------------------------------------------------------------------
0001C31A                            ; Subroutine to	animate	special	stage items when you touch them
0001C31A                            ; ---------------------------------------------------------------------------
0001C31A                            
0001C31A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C31A                            
0001C31A                            
0001C31A                            SS_AniItems:				; XREF: SS_ShowLayout
0001C31A 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C320 3E3C 001F                  		move.w	#$1F,d7
0001C324                            
0001C324                            loc_1B4DA:
0001C324 7000                       		moveq	#0,d0
0001C326 1010                       		move.b	(a0),d0
0001C328 6700                       		beq.s	loc_1B4E8
0001C32A E548                       		lsl.w	#2,d0
0001C32C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C330 4E91                       		jsr	(a1)
0001C332                            
0001C332                            loc_1B4E8:
0001C332 5048                       		addq.w	#8,a0
0001C334                            
0001C334                            loc_1B4EA:
0001C334 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C338                            
0001C338 4E75                       		rts	
0001C33A                            ; End of function SS_AniItems
0001C33A                            
0001C33A                            ; ===========================================================================
0001C33A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C33E 0000 0000                  		dc.l SS_AniBumper
0001C342 0000 0000                  		dc.l SS_Ani1Up
0001C346 0000 0000                  		dc.l SS_AniReverse
0001C34A 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C34E 0000 0000                  		dc.l SS_AniGlassBlock
0001C352                            ; ===========================================================================
0001C352                            
0001C352                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C352 5328 0002                  		subq.b	#1,2(a0)
0001C356 6A00                       		bpl.s	locret_1B530
0001C358 117C 0005 0002             		move.b	#5,2(a0)
0001C35E 7000                       		moveq	#0,d0
0001C360 1028 0003                  		move.b	3(a0),d0
0001C364 5228 0003                  		addq.b	#1,3(a0)
0001C368 2268 0004                  		movea.l	4(a0),a1
0001C36C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C370 1280                       		move.b	d0,(a1)
0001C372 6600                       		bne.s	locret_1B530
0001C374 4290                       		clr.l	(a0)
0001C376 42A8 0004                  		clr.l	4(a0)
0001C37A                            
0001C37A                            locret_1B530:
0001C37A 4E75                       		rts	
0001C37C                            ; ===========================================================================
0001C37C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C382                            ; ===========================================================================
0001C382                            
0001C382                            SS_AniBumper:				; XREF: SS_AniIndex
0001C382 5328 0002                  		subq.b	#1,2(a0)
0001C386 6A00                       		bpl.s	locret_1B566
0001C388 117C 0007 0002             		move.b	#7,2(a0)
0001C38E 7000                       		moveq	#0,d0
0001C390 1028 0003                  		move.b	3(a0),d0
0001C394 5228 0003                  		addq.b	#1,3(a0)
0001C398 2268 0004                  		movea.l	4(a0),a1
0001C39C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C3A0 6600                       		bne.s	loc_1B564
0001C3A2 4290                       		clr.l	(a0)
0001C3A4 42A8 0004                  		clr.l	4(a0)
0001C3A8 12BC 0025                  		move.b	#$25,(a1)
0001C3AC 4E75                       		rts	
0001C3AE                            ; ===========================================================================
0001C3AE                            
0001C3AE                            loc_1B564:
0001C3AE 1280                       		move.b	d0,(a1)
0001C3B0                            
0001C3B0                            locret_1B566:
0001C3B0 4E75                       		rts	
0001C3B2                            ; ===========================================================================
0001C3B2 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C3B8                            ; ===========================================================================
0001C3B8                            
0001C3B8                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C3B8 5328 0002                  		subq.b	#1,2(a0)
0001C3BC 6A00                       		bpl.s	locret_1B596
0001C3BE 117C 0005 0002             		move.b	#5,2(a0)
0001C3C4 7000                       		moveq	#0,d0
0001C3C6 1028 0003                  		move.b	3(a0),d0
0001C3CA 5228 0003                  		addq.b	#1,3(a0)
0001C3CE 2268 0004                  		movea.l	4(a0),a1
0001C3D2 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C3D6 1280                       		move.b	d0,(a1)
0001C3D8 6600                       		bne.s	locret_1B596
0001C3DA 4290                       		clr.l	(a0)
0001C3DC 42A8 0004                  		clr.l	4(a0)
0001C3E0                            
0001C3E0                            locret_1B596:
0001C3E0 4E75                       		rts	
0001C3E2                            ; ===========================================================================
0001C3E2 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C3E8                            ; ===========================================================================
0001C3E8                            
0001C3E8                            SS_AniReverse:				; XREF: SS_AniIndex
0001C3E8 5328 0002                  		subq.b	#1,2(a0)
0001C3EC 6A00                       		bpl.s	locret_1B5CC
0001C3EE 117C 0007 0002             		move.b	#7,2(a0)
0001C3F4 7000                       		moveq	#0,d0
0001C3F6 1028 0003                  		move.b	3(a0),d0
0001C3FA 5228 0003                  		addq.b	#1,3(a0)
0001C3FE 2268 0004                  		movea.l	4(a0),a1
0001C402 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C406 6600                       		bne.s	loc_1B5CA
0001C408 4290                       		clr.l	(a0)
0001C40A 42A8 0004                  		clr.l	4(a0)
0001C40E 12BC 002B                  		move.b	#$2B,(a1)
0001C412 4E75                       		rts	
0001C414                            ; ===========================================================================
0001C414                            
0001C414                            loc_1B5CA:
0001C414 1280                       		move.b	d0,(a1)
0001C416                            
0001C416                            locret_1B5CC:
0001C416 4E75                       		rts	
0001C418                            ; ===========================================================================
0001C418 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C41E                            ; ===========================================================================
0001C41E                            
0001C41E                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C41E 5328 0002                  		subq.b	#1,2(a0)
0001C422 6A00                       		bpl.s	locret_1B60C
0001C424 117C 0005 0002             		move.b	#5,2(a0)
0001C42A 7000                       		moveq	#0,d0
0001C42C 1028 0003                  		move.b	3(a0),d0
0001C430 5228 0003                  		addq.b	#1,3(a0)
0001C434 2268 0004                  		movea.l	4(a0),a1
0001C438 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C43C 1280                       		move.b	d0,(a1)
0001C43E 6600                       		bne.s	locret_1B60C
0001C440 4290                       		clr.l	(a0)
0001C442 42A8 0004                  		clr.l	4(a0)
0001C446 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C44C 303C 00A8                  		move.w	#$A8,d0
0001C450 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C456                            
0001C456                            locret_1B60C:
0001C456 4E75                       		rts	
0001C458                            ; ===========================================================================
0001C458 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C45E                            ; ===========================================================================
0001C45E                            
0001C45E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C45E 5328 0002                  		subq.b	#1,2(a0)
0001C462 6A00                       		bpl.s	locret_1B640
0001C464 117C 0001 0002             		move.b	#1,2(a0)
0001C46A 7000                       		moveq	#0,d0
0001C46C 1028 0003                  		move.b	3(a0),d0
0001C470 5228 0003                  		addq.b	#1,3(a0)
0001C474 2268 0004                  		movea.l	4(a0),a1
0001C478 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C47C 1280                       		move.b	d0,(a1)
0001C47E 6600                       		bne.s	locret_1B640
0001C480 12A8 0004                  		move.b	4(a0),(a1)
0001C484 4290                       		clr.l	(a0)
0001C486 42A8 0004                  		clr.l	4(a0)
0001C48A                            
0001C48A                            locret_1B640:
0001C48A 4E75                       		rts	
0001C48C                            ; ===========================================================================
0001C48C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C496                            ; ---------------------------------------------------------------------------
0001C496                            ; Special stage	layout pointers
0001C496                            ; ---------------------------------------------------------------------------
0001C496                            SS_LayoutIndex:
0001C496                            	include "_inc\Special stage layout pointers.asm"
0001C496                            ; ---------------------------------------------------------------------------
0001C496                            ; Special stage	layout pointers
0001C496                            ; ---------------------------------------------------------------------------
0001C496 0000 0000                  	dc.l SS_1
0001C49A 0000 0000                  	dc.l SS_2
0001C49E 0000 0000                  	dc.l SS_3
0001C4A2 0000 0000                  	dc.l SS_4
0001C4A6 0000 0000                  	dc.l SS_5
0001C4AA 0000 0000                  	dc.l SS_6
0001C4AE                            	even
0001C4AE                            	even
0001C4AE                            
0001C4AE                            ; ---------------------------------------------------------------------------
0001C4AE                            ; Special stage	start locations
0001C4AE                            ; ---------------------------------------------------------------------------
0001C4AE                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C4C6                            		even
0001C4C6                            
0001C4C6                            ; ---------------------------------------------------------------------------
0001C4C6                            ; Subroutine to	load special stage layout
0001C4C6                            ; ---------------------------------------------------------------------------
0001C4C6                            
0001C4C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4C6                            
0001C4C6                            
0001C4C6                            SS_Load:				; XREF: SpecialStage
0001C4C6 7000                       		moveq	#0,d0
0001C4C8 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C4CC 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C4D0 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C4D6 6500                       		bcs.s	SS_ChkEmldNum
0001C4D8 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C4DE                            
0001C4DE                            SS_ChkEmldNum:
0001C4DE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C4E4 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C4E6 7200                       		moveq	#0,d1
0001C4E8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C4EC 5301                       		subq.b	#1,d1
0001C4EE 6500                       		bcs.s	SS_LoadData
0001C4F0 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C4F4                            
0001C4F4                            SS_ChkEmldLoop:	
0001C4F4 B033 1000                  		cmp.b	(a3,d1.w),d0
0001C4F8 6600                       		bne.s	SS_ChkEmldRepeat
0001C4FA 60CA                       		bra.s	SS_Load
0001C4FC                            ; ===========================================================================
0001C4FC                            
0001C4FC                            SS_ChkEmldRepeat:
0001C4FC 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C500                            
0001C500                            SS_LoadData:
0001C500 E548                       		lsl.w	#2,d0
0001C502 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C506 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C50A 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C50E 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C512 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C518 303C 0000                  		move.w	#0,d0
0001C51C 4EB9 0000 1956             		jsr	(EniDec).l
0001C522 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C528 303C 0FFF                  		move.w	#$FFF,d0
0001C52C                            
0001C52C                            SS_ClrRAM3:
0001C52C 4299                       		clr.l	(a1)+
0001C52E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C532                            
0001C532 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C538 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C53E 723F                       		moveq	#$3F,d1
0001C540                            
0001C540                            loc_1B6F6:
0001C540 743F                       		moveq	#$3F,d2
0001C542                            
0001C542                            loc_1B6F8:
0001C542 12D8                       		move.b	(a0)+,(a1)+
0001C544 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C548                            
0001C548 43E9 0040                  		lea	$40(a1),a1
0001C54C 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C550                            
0001C550 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C556 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C55C 724D                       		moveq	#$4D,d1
0001C55E                            
0001C55E                            loc_1B714:
0001C55E 22D8                       		move.l	(a0)+,(a1)+
0001C560 32FC 0000                  		move.w	#0,(a1)+
0001C564 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C56A 32D8                       		move.w	(a0)+,(a1)+
0001C56C 51C9 FFF0                  		dbf	d1,loc_1B714
0001C570                            
0001C570 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C576 323C 003F                  		move.w	#$3F,d1
0001C57A                            
0001C57A                            loc_1B730:
0001C57A                            
0001C57A 4299                       		clr.l	(a1)+
0001C57C 51C9 FFFC                  		dbf	d1,loc_1B730
0001C580                            
0001C580 4E75                       		rts	
0001C582                            ; End of function SS_Load
0001C582                            
0001C582                            ; ===========================================================================
0001C582                            ; ---------------------------------------------------------------------------
0001C582                            ; Special stage	mappings and VRAM pointers
0001C582                            ; ---------------------------------------------------------------------------
0001C582                            SS_MapIndex:
0001C582                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C582                            ; ---------------------------------------------------------------------------
0001C582                            ; Special stage	mappings and VRAM pointers
0001C582                            ; ---------------------------------------------------------------------------
0001C582 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C586 0142                       	dc.w $142		; VRAM setting
0001C588 0000 0000                  	dc.l Map_SSWalls
0001C58C 0142                       	dc.w $142
0001C58E 0000 0000                  	dc.l Map_SSWalls
0001C592 0142                       	dc.w $142
0001C594 0000 0000                  	dc.l Map_SSWalls
0001C598 0142                       	dc.w $142
0001C59A 0000 0000                  	dc.l Map_SSWalls
0001C59E 0142                       	dc.w $142
0001C5A0 0000 0000                  	dc.l Map_SSWalls
0001C5A4 0142                       	dc.w $142
0001C5A6 0000 0000                  	dc.l Map_SSWalls
0001C5AA 0142                       	dc.w $142
0001C5AC 0000 0000                  	dc.l Map_SSWalls
0001C5B0 0142                       	dc.w $142
0001C5B2 0000 0000                  	dc.l Map_SSWalls
0001C5B6 0142                       	dc.w $142
0001C5B8 0000 0000                  	dc.l Map_SSWalls
0001C5BC 2142                       	dc.w $2142
0001C5BE 0000 0000                  	dc.l Map_SSWalls
0001C5C2 2142                       	dc.w $2142
0001C5C4 0000 0000                  	dc.l Map_SSWalls
0001C5C8 2142                       	dc.w $2142
0001C5CA 0000 0000                  	dc.l Map_SSWalls
0001C5CE 2142                       	dc.w $2142
0001C5D0 0000 0000                  	dc.l Map_SSWalls
0001C5D4 2142                       	dc.w $2142
0001C5D6 0000 0000                  	dc.l Map_SSWalls
0001C5DA 2142                       	dc.w $2142
0001C5DC 0000 0000                  	dc.l Map_SSWalls
0001C5E0 2142                       	dc.w $2142
0001C5E2 0000 0000                  	dc.l Map_SSWalls
0001C5E6 2142                       	dc.w $2142
0001C5E8 0000 0000                  	dc.l Map_SSWalls
0001C5EC 2142                       	dc.w $2142
0001C5EE 0000 0000                  	dc.l Map_SSWalls
0001C5F2 4142                       	dc.w $4142
0001C5F4 0000 0000                  	dc.l Map_SSWalls
0001C5F8 4142                       	dc.w $4142
0001C5FA 0000 0000                  	dc.l Map_SSWalls
0001C5FE 4142                       	dc.w $4142
0001C600 0000 0000                  	dc.l Map_SSWalls
0001C604 4142                       	dc.w $4142
0001C606 0000 0000                  	dc.l Map_SSWalls
0001C60A 4142                       	dc.w $4142
0001C60C 0000 0000                  	dc.l Map_SSWalls
0001C610 4142                       	dc.w $4142
0001C612 0000 0000                  	dc.l Map_SSWalls
0001C616 4142                       	dc.w $4142
0001C618 0000 0000                  	dc.l Map_SSWalls
0001C61C 4142                       	dc.w $4142
0001C61E 0000 0000                  	dc.l Map_SSWalls
0001C622 4142                       	dc.w $4142
0001C624 0000 0000                  	dc.l Map_SSWalls
0001C628 6142                       	dc.w $6142
0001C62A 0000 0000                  	dc.l Map_SSWalls
0001C62E 6142                       	dc.w $6142
0001C630 0000 0000                  	dc.l Map_SSWalls
0001C634 6142                       	dc.w $6142
0001C636 0000 0000                  	dc.l Map_SSWalls
0001C63A 6142                       	dc.w $6142
0001C63C 0000 0000                  	dc.l Map_SSWalls
0001C640 6142                       	dc.w $6142
0001C642 0000 0000                  	dc.l Map_SSWalls
0001C646 6142                       	dc.w $6142
0001C648 0000 0000                  	dc.l Map_SSWalls
0001C64C 6142                       	dc.w $6142
0001C64E 0000 0000                  	dc.l Map_SSWalls
0001C652 6142                       	dc.w $6142
0001C654 0000 0000                  	dc.l Map_SSWalls
0001C658 6142                       	dc.w $6142
0001C65A 0000 F77A                  	dc.l Map_obj47
0001C65E 023B                       	dc.w $23B
0001C660 0000 0000                  	dc.l Map_SS_R
0001C664 0570                       	dc.w $570
0001C666 0000 0000                  	dc.l Map_SS_R
0001C66A 0251                       	dc.w $251
0001C66C 0000 0000                  	dc.l Map_SS_R
0001C670 0370                       	dc.w $370
0001C672 0000 0000                  	dc.l Map_SS_Up
0001C676 0263                       	dc.w $263
0001C678 0000 0000                  	dc.l Map_SS_Down
0001C67C 0263                       	dc.w $263
0001C67E 0000 0000                  	dc.l Map_SS_R
0001C682 22F0                       	dc.w $22F0
0001C684 0000 0000                  	dc.l Map_SS_Glass
0001C688 0470                       	dc.w $470
0001C68A 0000 0000                  	dc.l Map_SS_Glass
0001C68E 05F0                       	dc.w $5F0
0001C690 0000 0000                  	dc.l Map_SS_Glass
0001C694 65F0                       	dc.w $65F0
0001C696 0000 0000                  	dc.l Map_SS_Glass
0001C69A 25F0                       	dc.w $25F0
0001C69C 0000 0000                  	dc.l Map_SS_Glass
0001C6A0 45F0                       	dc.w $45F0
0001C6A2 0000 0000                  	dc.l Map_SS_R
0001C6A6 02F0                       	dc.w $2F0
0001C6A8 0100 F77A                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C6AC 023B                       	dc.w $23B
0001C6AE 0200 F77A                  	dc.l Map_obj47+$2000000
0001C6B2 023B                       	dc.w $23B
0001C6B4 0000 0000                  	dc.l Map_SS_R
0001C6B8 0797                       	dc.w $797
0001C6BA 0000 0000                  	dc.l Map_SS_R
0001C6BE 07A0                       	dc.w $7A0
0001C6C0 0000 0000                  	dc.l Map_SS_R
0001C6C4 07A9                       	dc.w $7A9
0001C6C6 0000 0000                  	dc.l Map_SS_R
0001C6CA 0797                       	dc.w $797
0001C6CC 0000 0000                  	dc.l Map_SS_R
0001C6D0 07A0                       	dc.w $7A0
0001C6D2 0000 0000                  	dc.l Map_SS_R
0001C6D6 07A9                       	dc.w $7A9
0001C6D8 0000 AA86                  	dc.l Map_obj25
0001C6DC 27B2                       	dc.w $27B2
0001C6DE 0000 0000                  	dc.l Map_SS_Chaos3
0001C6E2 0770                       	dc.w $770
0001C6E4 0000 0000                  	dc.l Map_SS_Chaos3
0001C6E8 2770                       	dc.w $2770
0001C6EA 0000 0000                  	dc.l Map_SS_Chaos3
0001C6EE 4770                       	dc.w $4770
0001C6F0 0000 0000                  	dc.l Map_SS_Chaos3
0001C6F4 6770                       	dc.w $6770
0001C6F6 0000 0000                  	dc.l Map_SS_Chaos1
0001C6FA 0770                       	dc.w $770
0001C6FC 0000 0000                  	dc.l Map_SS_Chaos2
0001C700 0770                       	dc.w $770
0001C702 0000 0000                  	dc.l Map_SS_R
0001C706 04F0                       	dc.w $4F0
0001C708 0400 AA86                  	dc.l Map_obj25+$4000000
0001C70C 27B2                       	dc.w $27B2
0001C70E 0500 AA86                  	dc.l Map_obj25+$5000000
0001C712 27B2                       	dc.w $27B2
0001C714 0600 AA86                  	dc.l Map_obj25+$6000000
0001C718 27B2                       	dc.w $27B2
0001C71A 0700 AA86                  	dc.l Map_obj25+$7000000
0001C71E 27B2                       	dc.w $27B2
0001C720 0000 0000                  	dc.l Map_SS_Glass
0001C724 23F0                       	dc.w $23F0
0001C726 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C72A 23F0                       	dc.w $23F0
0001C72C 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C730 23F0                       	dc.w $23F0
0001C732 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C736 23F0                       	dc.w $23F0
0001C738 0000 0000                  	dc.l Map_SS_R+$2000000
0001C73C 04F0                       	dc.w $4F0
0001C73E 0000 0000                  	dc.l Map_SS_Glass
0001C742 05F0                       	dc.w $5F0
0001C744 0000 0000                  	dc.l Map_SS_Glass
0001C748 65F0                       	dc.w $65F0
0001C74A 0000 0000                  	dc.l Map_SS_Glass
0001C74E 25F0                       	dc.w $25F0
0001C750 0000 0000                  	dc.l Map_SS_Glass
0001C754 45F0                       	dc.w $45F0
0001C754 45F0                       	dc.w $45F0
0001C756                            
0001C756                            ; ---------------------------------------------------------------------------
0001C756                            ; Sprite mappings - special stage "R" block
0001C756                            ; ---------------------------------------------------------------------------
0001C756                            Map_SS_R:
0001C756                            	include "_maps\SSRblock.asm"
0001C756                            ; ---------------------------------------------------------------------------
0001C756                            ; Sprite mappings - special stage "R" block
0001C756                            ; ---------------------------------------------------------------------------
0001C756 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C75A 0000                       		dc.w byte_1B91E-Map_SS_R
0001C75C 01                         byte_1B912:	dc.b 1
0001C75D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C762 01                         byte_1B918:	dc.b 1
0001C763 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C768 00                         byte_1B91E:	dc.b 0
0001C76A 00                         		even
0001C76A 00                         		even
0001C76A                            
0001C76A                            ; ---------------------------------------------------------------------------
0001C76A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C76A                            ; ---------------------------------------------------------------------------
0001C76A                            Map_SS_Glass:
0001C76A                            	include "_maps\SSglassblock.asm"
0001C76A                            ; ---------------------------------------------------------------------------
0001C76A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C76A                            ; ---------------------------------------------------------------------------
0001C76A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C76E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C772 01                         byte_1B928:	dc.b 1
0001C773 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C778 01                         byte_1B92E:	dc.b 1
0001C779 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C77E 01                         byte_1B934:	dc.b 1
0001C77F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C784 01                         byte_1B93A:	dc.b 1
0001C785 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C78A                            		even
0001C78A                            		even
0001C78A                            
0001C78A                            ; ---------------------------------------------------------------------------
0001C78A                            ; Sprite mappings - special stage "UP" block
0001C78A                            ; ---------------------------------------------------------------------------
0001C78A                            Map_SS_Up:
0001C78A                            	include "_maps\SSUPblock.asm"
0001C78A                            ; ---------------------------------------------------------------------------
0001C78A                            ; Sprite mappings - special stage "UP" block
0001C78A                            ; ---------------------------------------------------------------------------
0001C78A 0000                       		dc.w byte_1B944-Map_SS_Up
0001C78C 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C78E 01                         byte_1B944:	dc.b 1
0001C78F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C794 01                         byte_1B94A:	dc.b 1
0001C795 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C79A                            		even
0001C79A                            		even
0001C79A                            
0001C79A                            ; ---------------------------------------------------------------------------
0001C79A                            ; Sprite mappings - special stage "DOWN" block
0001C79A                            ; ---------------------------------------------------------------------------
0001C79A                            Map_SS_Down:
0001C79A                            	include "_maps\SSDOWNblock.asm"
0001C79A                            ; ---------------------------------------------------------------------------
0001C79A                            ; Sprite mappings - special stage "DOWN" block
0001C79A                            ; ---------------------------------------------------------------------------
0001C79A 0000                       		dc.w byte_1B954-Map_SS_Down
0001C79C 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C79E 01                         byte_1B954:	dc.b 1
0001C79F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C7A4 01                         byte_1B95A:	dc.b 1
0001C7A5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C7AA                            		even
0001C7AA                            		even
0001C7AA                            
0001C7AA                            ; ---------------------------------------------------------------------------
0001C7AA                            ; Sprite mappings - special stage chaos	emeralds
0001C7AA                            ; ---------------------------------------------------------------------------
0001C7AA 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C7AC 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C7AE 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C7B0 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C7B2 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C7B4 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C7B6 01                         byte_1B96C:	dc.b 1
0001C7B7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C7BC 01                         byte_1B972:	dc.b 1
0001C7BD F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C7C2 01                         byte_1B978:	dc.b 1
0001C7C3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C7C8 01                         byte_1B97E:	dc.b 1
0001C7C9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C7CE                            		even
0001C7CE                            ; ===========================================================================
0001C7CE                            ; ---------------------------------------------------------------------------
0001C7CE                            ; Object 09 - Sonic (special stage)
0001C7CE                            ; ---------------------------------------------------------------------------
0001C7CE                            
0001C7CE                            Obj09:					; XREF: Obj_Index
0001C7CE                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C7CE                            ;		beq.s	Obj09_Normal	; if not, branch
0001C7CE 6100 0000                  		bsr.w	SS_FixCamera
0001C7D2                            ;		bra.w	DebugMode
0001C7D2                            ; ===========================================================================
0001C7D2                            
0001C7D2                            Obj09_Normal:
0001C7D2 7000                       		moveq	#0,d0
0001C7D4 1028 0024                  		move.b	$24(a0),d0
0001C7D8 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C7DC 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C7E0                            ; ===========================================================================
0001C7E0 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C7E2 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C7E4 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C7E6 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C7E8                            ; ===========================================================================
0001C7E8                            
0001C7E8                            Obj09_Main:				; XREF: Obj09_Index
0001C7E8 5428 0024                  		addq.b	#2,$24(a0)
0001C7EC 117C 000E 0016             		move.b	#$E,$16(a0)
0001C7F2 117C 0007 0017             		move.b	#7,$17(a0)
0001C7F8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C800 317C 0780 0002             		move.w	#$780,2(a0)
0001C806 117C 0004 0001             		move.b	#4,1(a0)
0001C80C 117C 0000 0018             		move.b	#0,$18(a0)
0001C812 117C 0002 001C             		move.b	#2,$1C(a0)
0001C818 08E8 0002 0022             		bset	#2,$22(a0)
0001C81E 08E8 0001 0022             		bset	#1,$22(a0)
0001C824                            
0001C824                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C824                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C824                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C824                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C824                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C824                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C824                            
0001C824                            Obj09_NoDebug:
0001C824 117C 0000 0030             		move.b	#0,$30(a0)
0001C82A 7000                       		moveq	#0,d0
0001C82C 1028 0022                  		move.b	$22(a0),d0
0001C830 0240 0002                  		andi.w	#2,d0
0001C834 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C838 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C83C 4EBA 811A                  		jsr	LoadSonicDynPLC
0001C840 4EF9 0000 E28C             		jmp	DisplaySprite
0001C846                            ; ===========================================================================
0001C846 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C848 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C84A                            ; ===========================================================================
0001C84A                            
0001C84A                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C84A 6100 0000                  		bsr.w	Obj09_Rise
0001C84E 6100 0000                  		bsr.w	Obj09_Move
0001C852 6100 0000                  		bsr.w	Obj09_Fall
0001C856 6000                       		bra.s	Obj09_Display
0001C858                            ; ===========================================================================
0001C858                            
0001C858                            Obj09_InAir:				; XREF: Obj09_Modes
0001C858 6100 0000                  		bsr.w	Obj09_Rise
0001C85C 6100 0000                  		bsr.w	Obj09_Move
0001C860 6100 0000                  		bsr.w	Obj09_Fall
0001C864                            
0001C864                            Obj09_Display:				; XREF: Obj09_OnWall
0001C864 6100 0000                  		bsr.w	Obj09_ChkItems
0001C868 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C86C 4EB9 0000 E252             		jsr	SpeedToPos
0001C872 6100 0000                  		bsr.w	SS_FixCamera
0001C876 3038 F780                  		move.w	($FFFFF780).w,d0
0001C87A D078 F782                  		add.w	($FFFFF782).w,d0
0001C87E 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C882 4EB9 0001 46B2             		jsr	Sonic_Animate
0001C888 4E75                       		rts	
0001C88A                            
0001C88A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C88A                            
0001C88A                            
0001C88A                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C88A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C890 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C892 4A78 F784                          tst.w   ($FFFFF784).w
0001C896 6600                               bne.s   @corereverse1
0001C898 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C89C 6000                               bra.s   Obj09_ChkRight          
0001C89E                            
0001C89E                            @corereverse1:
0001C89E 6100 0000                          bsr.w	Obj09_MoveRight
0001C8A2                            
0001C8A2                            Obj09_ChkRight:
0001C8A2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C8A8 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C8AA 4A78 F784                          tst.w   ($FFFFF784).w
0001C8AE 6600                               bne.s   @corereverse2
0001C8B0 6100 0000                  		bsr.w	Obj09_MoveRight
0001C8B4 6000                               bra.s   Obj09_MoveSpeed 
0001C8B6                            
0001C8B6                            @corereverse2:
0001C8B6 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C8BA                            
0001C8BA                            Obj09_MoveSpeed:
0001C8BA 1038 F602                  		move.b	($FFFFF602).w,d0
0001C8BE 0200 000C                  		andi.b	#$C,d0
0001C8C2 6600                       		bne.s	Obj09_MoveCollision
0001C8C4 3028 0010                  		move.w	$10(a0),d0
0001C8C8 6700                       		beq.s	Obj09_MoveCollision
0001C8CA 317C 0000 0010             		move.w	#0,$10(a0)
0001C8D0                            
0001C8D0                            Obj09_MoveCollision:
0001C8D0 1038 F780                  		move.b	($FFFFF780).w,d0
0001C8D4 0600 0020                  		addi.b	#$20,d0
0001C8D8 0200 00C0                  		andi.b	#$C0,d0
0001C8DC 4400                       		neg.b	d0
0001C8DE 4EB9 0000 2D6E             		jsr	(CalcSine).l
0001C8E4 C3E8 0010                  		muls.w	$10(a0),d1
0001C8E8 D3A8 0008                  		add.l	d1,8(a0)
0001C8EC C1E8 0012                  		muls.w	$12(a0),d0
0001C8F0 D1A8 000C                  		add.l	d0,$C(a0)
0001C8F4 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C8F8 2428 000C                  		move.l	$C(a0),d2
0001C8FC 2628 0008                  		move.l	8(a0),d3
0001C900 6100 0000                  		bsr.w	sub_1BCE8
0001C904 6700                       		beq.s	loc_1BAF2
0001C906 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C90A 93A8 0008                  		sub.l	d1,8(a0)
0001C90E 91A8 000C                  		sub.l	d0,$C(a0)
0001C912 317C 0000 0010             		move.w	#0,$10(a0)
0001C918 4E75                       		rts	
0001C91A                            ; ===========================================================================
0001C91A                            
0001C91A                            loc_1BAF2:
0001C91A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C91E 4E75                       		rts	
0001C920                            ; End of function Obj09_Move
0001C920                            
0001C920                            
0001C920                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C920                            
0001C920                            
0001C920                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C920 08E8 0000 0022             		bset	#0,$22(a0)
0001C926 4240                               clr.w   d0
0001C928 3038 F786                          move.w  ($FFFFF786).w,d0
0001C92C D040                               add.w   d0,d0
0001C92E 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C934 4468 0010                          neg.w   $10(a0)
0001C938 4E75                               rts
0001C93A                            
0001C93A                            ; End of function Obj09_MoveLeft
0001C93A                            
0001C93A                            
0001C93A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C93A                            
0001C93A                            
0001C93A                            Obj09_MoveRight:
0001C93A 08A8 0000 0022             		bclr	#0,$22(a0)
0001C940 4240                               clr.w   d0
0001C942 3038 F786                          move.w  ($FFFFF786).w,d0
0001C946 D040                               add.w   d0,d0
0001C948 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C94E 4E75                       		rts
0001C950                            
0001C950                            ; End of function Obj09_MoveRight
0001C950                            
0001C950                            ; ---------------------------------------------------------------------------
0001C950                            
0001C950                            SS_XSpdIndex:
0001C950 0032                       		dc.w 50
0001C952 0064                       		dc.w 100
0001C954 0096                       		dc.w 150
0001C956 00C8                       		dc.w 200
0001C958 00FA                       		dc.w 250
0001C95A                            
0001C95A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C95A                            
0001C95A                            
0001C95A                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C95A 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C960 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C962 4A78 F784                          tst.w   ($FFFFF784).w
0001C966 6600 0000                          bne.w   @corereverse1
0001C96A 6100 0000                  		bsr.w	Obj09_MoveUp
0001C96E 6000                               bra.s   Obj09_NoRise
0001C970                            
0001C970                            @corereverse1:
0001C970 6100 0000                  		bsr.w	Obj09_Falling 
0001C974                                    
0001C974                            Obj09_NoRise:
0001C974 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C97A 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C97C 4A78 F784                          tst.w   ($FFFFF784).w
0001C980 6600 0000                          bne.w   @corereverse2
0001C984 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C988 6000                               bra.s   Obj09_MoveYSpeed
0001C98A                            
0001C98A                            @corereverse2:
0001C98A 6100 0000                  		bsr.w	Obj09_MoveUp
0001C98E                            		
0001C98E                            Obj09_MoveYSpeed:
0001C98E 1038 F602                  		move.b	($FFFFF602).w,d0
0001C992 0200 0003                  		andi.b	#3,d0
0001C996 6600                       		bne.s	Obj09_MoveYCollision
0001C998 3028 0012                  		move.w	$12(a0),d0
0001C99C 6700                       		beq.s	Obj09_MoveYCollision
0001C99E 317C 0000 0012             		move.w	#0,$12(a0)
0001C9A4                            
0001C9A4                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C9A4 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C9A8 0600 0020                  		addi.b	#$20,d0					;	?
0001C9AC 0200 00C0                  		andi.b	#$C0,d0					;	
0001C9B0 4400                       		neg.b	d0						;	?
0001C9B2 4EB9 0000 2D6E             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C9B8 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C9BC D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C9C0 C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C9C4 D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C9C8 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C9CC 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C9D0 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C9D4 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C9D8 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C9DC 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C9E0 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C9E4 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C9E8 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C9EE 4E75                       		rts								;	end routine
0001C9F0                            
0001C9F0                            Obj09_MoveUp:
0001C9F0 4240                               clr.w   d0
0001C9F2 3038 F786                          move.w  ($FFFFF786).w,d0
0001C9F6 D040                               add.w   d0,d0
0001C9F8 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C9FE 4468 0012                          neg.w   $12(a0)
0001CA02 4E75                               rts
0001CA04                            
0001CA04                            Obj09_Falling:
0001CA04 4240                               clr.w   d0
0001CA06 3038 F786                          move.w  ($FFFFF786).w,d0
0001CA0A D040                               add.w   d0,d0
0001CA0C 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001CA12 4E75                       		rts
0001CA14                            ; End of function Obj09_Jump
0001CA14                            
0001CA14                            ; ---------------------------------------------------------------------------
0001CA14                            SS_YSpdIndex:
0001CA14 0080                       		dc.w $80
0001CA16 0100                       		dc.w $100
0001CA18 0180                       		dc.w $180
0001CA1A 0200                       		dc.w $200
0001CA1C 0280                       		dc.w $280
0001CA1E                            
0001CA1E                            
0001CA1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA1E                            
0001CA1E                            
0001CA1E                            nullsub_2:				; XREF: Obj09_InAir
0001CA1E 4E75                       		rts	
0001CA20                            ; End of function nullsub_2
0001CA20                            
0001CA20                            ; ===========================================================================
0001CA20                            ; ---------------------------------------------------------------------------
0001CA20                            ; unused subroutine to limit Sonic's upward vertical speed
0001CA20                            ; ---------------------------------------------------------------------------
0001CA20 323C FC00                  		move.w	#-$400,d1
0001CA24 B268 0012                  		cmp.w	$12(a0),d1
0001CA28 6F00                       		ble.s	locret_1BBB4
0001CA2A 1038 F602                  		move.b	($FFFFF602).w,d0
0001CA2E 0200 0070                  		andi.b	#$70,d0
0001CA32 6600                       		bne.s	locret_1BBB4
0001CA34 3141 0012                  		move.w	d1,$12(a0)
0001CA38                            
0001CA38                            locret_1BBB4:
0001CA38 4E75                       		rts	
0001CA3A                            ; ---------------------------------------------------------------------------
0001CA3A                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001CA3A                            ; ---------------------------------------------------------------------------
0001CA3A                            
0001CA3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA3A                            
0001CA3A                            
0001CA3A                            SS_FixCamera:				; XREF: Obj09
0001CA3A 3428 000C                  		move.w	$C(a0),d2
0001CA3E 3628 0008                  		move.w	8(a0),d3
0001CA42 3038 F700                  		move.w	($FFFFF700).w,d0
0001CA46 0443 00A0                  		subi.w	#$A0,d3
0001CA4A 6500                       		bcs.s	loc_1BBCE
0001CA4C 9043                       		sub.w	d3,d0
0001CA4E 9178 F700                  		sub.w	d0,($FFFFF700).w
0001CA52                            
0001CA52                            loc_1BBCE:
0001CA52 3038 F704                  		move.w	($FFFFF704).w,d0
0001CA56 0442 0070                  		subi.w	#$70,d2
0001CA5A 6500                       		bcs.s	locret_1BBDE
0001CA5C 9042                       		sub.w	d2,d0
0001CA5E 9178 F704                  		sub.w	d0,($FFFFF704).w
0001CA62                            
0001CA62                            locret_1BBDE:
0001CA62 4E75                       		rts	
0001CA64                            ; End of function SS_FixCamera
0001CA64                            
0001CA64                            ; ===========================================================================
0001CA64                            
0001CA64                            Obj09_ExitStage:			; XREF: Obj09_Index
0001CA64 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001CA6A 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001CA70 6600                       		bne.s	loc_1BBF4
0001CA72 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001CA78                            
0001CA78                            loc_1BBF4:
0001CA78 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001CA7E 6D00                       		blt.s	loc_1BC12
0001CA80 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001CA86                            ;		move.w	#$4000,($FFFFF780).w
0001CA86 5428 0024                  		addq.b	#2,$24(a0)
0001CA8A 317C 003C 0038             		move.w	#$3C,$38(a0)
0001CA90                            
0001CA90                            loc_1BC12:
0001CA90                            ;		move.w	($FFFFF780).w,d0
0001CA90                            ;		add.w	($FFFFF782).w,d0
0001CA90                            ;		move.w	d0,($FFFFF780).w
0001CA90 4EB9 0001 46B2             		jsr	Sonic_Animate
0001CA96 4EB9 0001 4958             		jsr	LoadSonicDynPLC
0001CA9C 6100 FF9C                  		bsr.w	SS_FixCamera
0001CAA0 4EF9 0000 E28C             		jmp	DisplaySprite
0001CAA6                            ; ===========================================================================
0001CAA6                            
0001CAA6                            Obj09_Exit2:				; XREF: Obj09_Index
0001CAA6 5368 0038                  		subq.w	#1,$38(a0)
0001CAAA 6600                       		bne.s	loc_1BC40
0001CAAC 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001CAB2                            
0001CAB2                            loc_1BC40:
0001CAB2 4EB9 0001 46B2             		jsr	Sonic_Animate
0001CAB8 4EB9 0001 4958             		jsr	LoadSonicDynPLC
0001CABE 6100 FF7A                  		bsr.w	SS_FixCamera
0001CAC2 4EF9 0000 E28C             		jmp	DisplaySprite
0001CAC8                            
0001CAC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAC8                            
0001CAC8                            
0001CAC8                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001CAC8 2428 000C                  		move.l	$C(a0),d2
0001CACC 2628 0008                  		move.l	8(a0),d3
0001CAD0 1038 F780                  		move.b	($FFFFF780).w,d0
0001CAD4 0200 00FC                  		andi.b	#$FC,d0
0001CAD8 4EB9 0000 2D6E             		jsr	(CalcSine).l
0001CADE 3828 0010                  		move.w	$10(a0),d4
0001CAE2 48C4                       		ext.l	d4
0001CAE4 E184                       		asl.l	#8,d4
0001CAE6 C1FC 002A                  		muls.w	#$2A,d0
0001CAEA D084                       		add.l	d4,d0
0001CAEC 3828 0012                  		move.w	$12(a0),d4
0001CAF0 48C4                       		ext.l	d4
0001CAF2 E184                       		asl.l	#8,d4
0001CAF4 C3FC 002A                  		muls.w	#$2A,d1
0001CAF8 D284                       		add.l	d4,d1
0001CAFA 7A00                       		moveq	#0,d5
0001CAFC 3A28 0010                  		move.w	$10(a0),d5
0001CB00 6700                       		beq.s	Obj09_NoXFall
0001CB02 D680                       		add.l	d0,d3
0001CB04 6100 0000                  		bsr.w	sub_1BCE8
0001CB08 6700                       		beq.s	loc_1BCB0
0001CB0A 9680                       		sub.l	d0,d3
0001CB0C 7000                       		moveq	#0,d0
0001CB0E 3140 0010                  		move.w	d0,$10(a0)
0001CB12 08A8 0001 0022             		bclr	#1,$22(a0)
0001CB18                            
0001CB18                            Obj09_NoXFall
0001CB18 7C00                       		moveq	#0,d6
0001CB1A 3C28 0012                  		move.w	$12(a0),d6
0001CB1E 6700                       		beq.s	Obj09_NoYFall
0001CB20 D481                       		add.l	d1,d2
0001CB22 6100 0000                  		bsr.w	sub_1BCE8
0001CB26 6700                       		beq.s	loc_1BCC6
0001CB28 9481                       		sub.l	d1,d2
0001CB2A 7200                       		moveq	#0,d1
0001CB2C 3141 0012                  		move.w	d1,$12(a0)
0001CB30 4E75                       		rts	
0001CB32                            ; ===========================================================================
0001CB32                            
0001CB32                            loc_1BCB0:
0001CB32 7C00                       		moveq	#0,d6
0001CB34 3C28 0012                  		move.w	$12(a0),d6
0001CB38 6700                       		beq.s	Obj09_NoYFall
0001CB3A D481                       		add.l	d1,d2
0001CB3C 6100 0000                  		bsr.w	sub_1BCE8
0001CB40 6700                       		beq.s	loc_1BCD4
0001CB42 9481                       		sub.l	d1,d2
0001CB44 7200                       		moveq	#0,d1
0001CB46 3141 0012                  		move.w	d1,$12(a0)
0001CB4A 08A8 0001 0022             		bclr	#1,$22(a0)
0001CB50                            
0001CB50                            loc_1BCC6:
0001CB50 E080                       		asr.l	#8,d0
0001CB52 E081                       		asr.l	#8,d1
0001CB54 3140 0010                  		move.w	d0,$10(a0)
0001CB58 3141 0012                  		move.w	d1,$12(a0)
0001CB5C 4E75                       		rts	
0001CB5E                            ; ===========================================================================
0001CB5E                            
0001CB5E                            loc_1BCD4:
0001CB5E E080                       		asr.l	#8,d0
0001CB60 E081                       		asr.l	#8,d1
0001CB62 3140 0010                  		move.w	d0,$10(a0)
0001CB66 3141 0012                  		move.w	d1,$12(a0)
0001CB6A 08E8 0001 0022             		bset	#1,$22(a0)
0001CB70 4E75                       		rts	
0001CB72                            
0001CB72                            Obj09_NoYFall:
0001CB72 4E75                       		rts
0001CB74                            ; End of function Obj09_Fall
0001CB74                            
0001CB74                            
0001CB74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB74                            
0001CB74                            
0001CB74                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001CB74 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CB7A 7800                       		moveq	#0,d4
0001CB7C 4842                       		swap	d2
0001CB7E 3802                       		move.w	d2,d4
0001CB80 4842                       		swap	d2
0001CB82 0644 0044                  		addi.w	#$44,d4
0001CB86 88FC 0018                  		divu.w	#$18,d4
0001CB8A C8FC 0080                  		mulu.w	#$80,d4
0001CB8E D3C4                       		adda.l	d4,a1
0001CB90 7800                       		moveq	#0,d4
0001CB92 4843                       		swap	d3
0001CB94 3803                       		move.w	d3,d4
0001CB96 4843                       		swap	d3
0001CB98 0644 0014                  		addi.w	#$14,d4
0001CB9C 88FC 0018                  		divu.w	#$18,d4
0001CBA0 D2C4                       		adda.w	d4,a1
0001CBA2 7A00                       		moveq	#0,d5
0001CBA4 1819                       		move.b	(a1)+,d4
0001CBA6 6100                       		bsr.s	sub_1BD30
0001CBA8 1819                       		move.b	(a1)+,d4
0001CBAA 6100                       		bsr.s	sub_1BD30
0001CBAC D2FC 007E                  		adda.w	#$7E,a1
0001CBB0 1819                       		move.b	(a1)+,d4
0001CBB2 6100                       		bsr.s	sub_1BD30
0001CBB4 1819                       		move.b	(a1)+,d4
0001CBB6 6100                       		bsr.s	sub_1BD30
0001CBB8 4A05                       		tst.b	d5
0001CBBA 4E75                       		rts	
0001CBBC                            ; End of function sub_1BCE8
0001CBBC                            
0001CBBC                            
0001CBBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBBC                            
0001CBBC                            
0001CBBC                            sub_1BD30:				; XREF: sub_1BCE8
0001CBBC 6700                       		beq.s	locret_1BD44
0001CBBE 0C04 0028                  		cmpi.b	#$28,d4
0001CBC2 6500                       		blo.s	loc_1BD46
0001CBC4 0C04 004B                  		cmpi.b	#$4B,d4
0001CBC8 6400                       		bhs.s	loc_1BD46
0001CBCA 0C04 003A                  		cmpi.b	#$3A,d4
0001CBCE 6400                       		bhs.s	locret_1BD44
0001CBD0 0C04 002C                  		cmpi.b	#$2C,d4
0001CBD4 6400                       		bhs.s	loc_1BD46
0001CBD6                            
0001CBD6                            locret_1BD44:
0001CBD6 4E75                       		rts	
0001CBD8                            ; ===========================================================================
0001CBD8                            
0001CBD8                            loc_1BD46:
0001CBD8 1144 0030                  		move.b	d4,$30(a0)
0001CBDC 2149 0032                  		move.l	a1,$32(a0)
0001CBE0 7AFF                       		moveq	#-1,d5
0001CBE2 4E75                       		rts	
0001CBE4                            ; End of function sub_1BD30
0001CBE4                            
0001CBE4                            
0001CBE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBE4                            
0001CBE4                            
0001CBE4                            Obj09_ChkItems:				; XREF: Obj09_Display
0001CBE4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CBEA 7800                       		moveq	#0,d4
0001CBEC 3828 000C                  		move.w	$C(a0),d4
0001CBF0 0644 0050                  		addi.w	#$50,d4
0001CBF4 88FC 0018                  		divu.w	#$18,d4
0001CBF8 C8FC 0080                  		mulu.w	#$80,d4
0001CBFC D3C4                       		adda.l	d4,a1
0001CBFE 7800                       		moveq	#0,d4
0001CC00 3828 0008                  		move.w	8(a0),d4
0001CC04 0644 0020                  		addi.w	#$20,d4
0001CC08 88FC 0018                  		divu.w	#$18,d4
0001CC0C D2C4                       		adda.w	d4,a1
0001CC0E 1811                       		move.b	(a1),d4
0001CC10 6600                       		bne.s	Obj09_ChkCont
0001CC12 4A28 003A                  		tst.b	$3A(a0)
0001CC16 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001CC1A 7800                       		moveq	#0,d4
0001CC1C 4E75                       		rts	
0001CC1E                            ; ===========================================================================
0001CC1E                            
0001CC1E                            Obj09_ChkCont:
0001CC1E 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001CC22 6600                       		bne.s	Obj09_Chk1Up
0001CC24 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001CC28 6600                       		bne.s	Obj09_GetCont
0001CC2A 14BC 0001                  		move.b	#1,(a2)
0001CC2E 2549 0004                  		move.l	a1,4(a2)
0001CC32                            
0001CC32                            Obj09_GetCont:
0001CC32 4EB9 0000 A76C             		jsr	CollectRing
0001CC38 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001CC3E 6500                       		bcs.s	Obj09_NoCont
0001CC40 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001CC46 6600                       		bne.s	Obj09_NoCont
0001CC48 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001CC4C 303C 00BF                  		move.w	#$BF,d0
0001CC50 4EB9 0000 15CE             		jsr	(PlaySound).l	; play extra continue sound
0001CC56                            
0001CC56                            Obj09_NoCont:
0001CC56 7800                       		moveq	#0,d4
0001CC58 4E75                       		rts	
0001CC5A                            ; ===========================================================================
0001CC5A                            
0001CC5A                            Obj09_Chk1Up:
0001CC5A 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001CC5E 6600                       		bne.s	Obj09_ChkEmer
0001CC60 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001CC64 6600                       		bne.s	Obj09_Get1Up
0001CC66 14BC 0003                  		move.b	#3,(a2)
0001CC6A 2549 0004                  		move.l	a1,4(a2)
0001CC6E                            
0001CC6E                            Obj09_Get1Up:
0001CC6E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001CC72 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001CC76 303C 0088                  		move.w	#$88,d0
0001CC7A 4EB9 0000 15CE             		jsr	(PlaySound).l	; play extra life music
0001CC80 7800                       		moveq	#0,d4
0001CC82 4E75                       		rts	
0001CC84                            ; ===========================================================================
0001CC84                            
0001CC84                            Obj09_ChkEmer:
0001CC84 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001CC88 6500                       		bcs.s	Obj09_UPblock
0001CC8A 0C04 0040                  		cmpi.b	#$40,d4
0001CC8E 6200                       		bhi.s	Obj09_UPblock
0001CC90 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001CC94 6600                       		bne.s	Obj09_GetEmer
0001CC96 14BC 0005                  		move.b	#5,(a2)
0001CC9A 2549 0004                  		move.l	a1,4(a2)
0001CC9E                            
0001CC9E                            Obj09_GetEmer:
0001CC9E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001CCA4 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001CCA6 0404 003B                  		subi.b	#$3B,d4
0001CCAA 7000                       		moveq	#0,d0
0001CCAC 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001CCB0 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001CCB4 1584 0000                  		move.b	d4,(a2,d0.w)
0001CCB8 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001CCBC                            
0001CCBC                            Obj09_NoEmer:
0001CCBC 303C 0093                  		move.w	#$93,d0
0001CCC0 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play emerald music
0001CCC6 7800                       		moveq	#0,d4
0001CCC8 4E75                       		rts	
0001CCCA                            
0001CCCA                            ; ===========================================================================
0001CCCA                            
0001CCCA                            Obj09_UPblock:
0001CCCA 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001CCCE 6600                       		bne.s	Obj09_DOWNblock
0001CCD0 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001CCD4 6600                       		bne.s	Obj09_SpeedUp
0001CCD6 14BC 0001                  		move.b	#1,(a2)
0001CCDA 2549 0004                  		move.l	a1,4(a2)
0001CCDE                            
0001CCDE                            Obj09_SpeedUp:
0001CCDE 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001CCE4 6400                       		bhs.s	Obj09_UPsnd
0001CCE6 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001CCEA                            
0001CCEA                            Obj09_UPsnd:
0001CCEA 303C 00A9                  		move.w	#$A9,d0
0001CCEE 4EB9 0000 15D4             		jsr	(PlaySound_Special).l	; play up/down sound
0001CCF4 7800                       		moveq	#0,d4
0001CCF6 4E75                       		rts	
0001CCF8                            ; ===========================================================================
0001CCF8                            
0001CCF8                            Obj09_DOWNblock:
0001CCF8 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001CCFC 6600                       		bne.s	Obj09_Rblock
0001CCFE 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001CD02 6600                       		bne.s	Obj09_SpeedDown
0001CD04 14BC 0001                  		move.b	#1,(a2)
0001CD08 2549 0004                  		move.l	a1,4(a2)
0001CD0C                            
0001CD0C                            Obj09_SpeedDown:
0001CD0C 4A78 F786                  		tst.w 	($FFFFF786).w
0001CD10 6700                       		beq.s	Obj09_DOWNsnd
0001CD12 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001CD16                            
0001CD16                            Obj09_DOWNsnd:
0001CD16 303C 00A9                  		move.w	#$A9,d0
0001CD1A 4EB9 0000 15D4             		jsr	(PlaySound_Special).l	; play up/down sound
0001CD20 7800                       		moveq	#0,d4
0001CD22 4E75                       		rts	
0001CD24                            ; ===========================================================================
0001CD24                            
0001CD24                            Obj09_Rblock:
0001CD24 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001CD28 6600                       		bne.s	Obj09_ChkGhost
0001CD2A 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001CD2E 6600                       		bne.s	Obj09_RevStage
0001CD30 14BC 0001                  		move.b	#1,(a2)
0001CD34 2549 0004                  		move.l	a1,4(a2)
0001CD38                            
0001CD38                            Obj09_RevStage:
0001CD38 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001CD3E 103C 00A9                  		move.b	#$A9,d0
0001CD42 4EB9 0000 15D4             		jsr	(PlaySound_Special).l	; play sound
0001CD48 7800                       		moveq	#0,d4
0001CD4A 4E75                       		rts	
0001CD4C                            
0001CD4C                            ; ===========================================================================
0001CD4C                            
0001CD4C                            Obj09_ChkGhost:
0001CD4C 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CD50 6600                       		bne.s	Obj09_ChkGhostTag
0001CD52 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CD58                            
0001CD58                            Obj09_ChkGhostTag:
0001CD58 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CD5C 6600                       		bne.s	Obj09_NoGhost
0001CD5E 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CD64 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CD66 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CD6C                            
0001CD6C                            Obj09_NoGhost:
0001CD6C 78FF                       		moveq	#-1,d4
0001CD6E 4E75                       		rts	
0001CD70                            ; ===========================================================================
0001CD70                            
0001CD70                            Obj09_MakeGhostSolid:
0001CD70 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CD76 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CD78 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CD7E 723F                       		moveq	#$3F,d1
0001CD80                            
0001CD80                            Obj09_GhostLoop2:
0001CD80 743F                       		moveq	#$3F,d2
0001CD82                            
0001CD82                            Obj09_GhostLoop:
0001CD82 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CD86 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CD88 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CD8C                            
0001CD8C                            Obj09_NoReplace:
0001CD8C 5249                       		addq.w	#1,a1
0001CD8E 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CD92 43E9 0040                  		lea	$40(a1),a1
0001CD96 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CD9A                            
0001CD9A                            Obj09_GhostNotSolid:
0001CD9A 4228 003A                  		clr.b	$3A(a0)
0001CD9E 7800                       		moveq	#0,d4
0001CDA0 4E75                       		rts	
0001CDA2                            ; End of function Obj09_ChkItems
0001CDA2                            
0001CDA2                            
0001CDA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDA2                            
0001CDA2                            
0001CDA2                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CDA2 1028 0030                  		move.b	$30(a0),d0
0001CDA6 6600                       		bne.s	Obj09_GOAL
0001CDA8 5328 0036                  		subq.b	#1,$36(a0)
0001CDAC 6A00                       		bpl.s	loc_1BEA0
0001CDAE 117C 0000 0036             		move.b	#0,$36(a0)
0001CDB4                            
0001CDB4                            loc_1BEA0:
0001CDB4 5328 0037                  		subq.b	#1,$37(a0)
0001CDB8 6A00                       		bpl.s	locret_1BEAC
0001CDBA 117C 0000 0037             		move.b	#0,$37(a0)
0001CDC0                            
0001CDC0                            locret_1BEAC:
0001CDC0 4E75                       		rts	
0001CDC2                            ; ===========================================================================
0001CDC2                            
0001CDC2                            ; ===========================================================================
0001CDC2                            
0001CDC2                            Obj09_GOAL:
0001CDC2 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CDC6 6600                       		bne.s	Obj09_ChkGlass
0001CDC8 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CDCC 303C 00A8                  		move.w	#$A8,d0		; change item
0001CDD0 4EB9 0000 15D4             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CDD6 4E75                       		rts	
0001CDD8                            ; ===========================================================================
0001CDD8                            
0001CDD8                            ; ===========================================================================
0001CDD8                            
0001CDD8                            Obj09_ChkGlass:
0001CDD8 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CDDC 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CDDE 0C00 002E                  		cmpi.b	#$2E,d0
0001CDE2 6700                       		beq.s	Obj09_Glass
0001CDE4 0C00 002F                  		cmpi.b	#$2F,d0
0001CDE8 6700                       		beq.s	Obj09_Glass
0001CDEA 0C00 0030                  		cmpi.b	#$30,d0
0001CDEE 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CDF0                            
0001CDF0                            Obj09_Glass:
0001CDF0 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001CDF4 6600                       		bne.s	Obj09_GlassSnd
0001CDF6 14BC 0006                  		move.b	#6,(a2)
0001CDFA 2268 0032                  		movea.l	$32(a0),a1
0001CDFE 5389                       		subq.l	#1,a1
0001CE00 2549 0004                  		move.l	a1,4(a2)
0001CE04 1011                       		move.b	(a1),d0
0001CE06 5200                       		addq.b	#1,d0		; change glass type when touched
0001CE08 0C00 0030                  		cmpi.b	#$30,d0
0001CE0C 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CE0E 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CE10                            
0001CE10                            Obj09_GlassUpdate:
0001CE10 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CE14                            
0001CE14                            Obj09_GlassSnd:
0001CE14 303C 00BA                  		move.w	#$BA,d0
0001CE18 4EF9 0000 15D4             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CE1E                            ; ===========================================================================
0001CE1E                            
0001CE1E                            Obj09_NoGlass:
0001CE1E 4E75                       		rts	
0001CE20                            ; End of function Obj09_ChkItems2
0001CE20                            
0001CE20                            ; ===========================================================================
0001CE20                            ; ---------------------------------------------------------------------------
0001CE20                            ; Object 10 - blank
0001CE20                            ; ---------------------------------------------------------------------------
0001CE20                            
0001CE20                            Obj10:					; XREF: Obj_Index
0001CE20 4E75                       		rts	
0001CE22                            ; ---------------------------------------------------------------------------
0001CE22                            ; Subroutine to	animate	level graphics
0001CE22                            ; ---------------------------------------------------------------------------
0001CE22                            
0001CE22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE22                            
0001CE22                            
0001CE22                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CE22 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CE26 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CE28 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CE2E 6100 0000                  		bsr.w	AniArt_GiantRing
0001CE32 7000                       		moveq	#0,d0
0001CE34 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CE38 D040                       		add.w	d0,d0
0001CE3A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CE3E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CE42                            ; ===========================================================================
0001CE42                            
0001CE42                            AniArt_Pause:
0001CE42 4E75                       		rts	
0001CE44                            ; End of function AniArt_Load
0001CE44                            
0001CE44                            ; ===========================================================================
0001CE44 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CE48 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CE4C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CE50 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CE54                            ; ===========================================================================
0001CE54                            ; ---------------------------------------------------------------------------
0001CE54                            ; Animated pattern routine - Green Hill
0001CE54                            ; ---------------------------------------------------------------------------
0001CE54                            
0001CE54                            AniArt_GHZ:				; XREF: AniArt_Index
0001CE54 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CE58 6A00                       		bpl.s	loc_1C08A
0001CE5A 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CE60 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CE66 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CE6A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CE6E 0240 0001                  		andi.w	#1,d0
0001CE72 6700                       		beq.s	loc_1C078
0001CE74 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CE78                            
0001CE78                            loc_1C078:
0001CE78 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CE82 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CE86 6000 0000                  		bra.w	LoadTiles
0001CE8A                            ; ===========================================================================
0001CE8A                            
0001CE8A                            loc_1C08A:
0001CE8A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CE8E 6A00                       		bpl.s	loc_1C0C0
0001CE90 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CE96 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CE9C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CEA0 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CEA4 0240 0001                  		andi.w	#1,d0
0001CEA8 6700                       		beq.s	loc_1C0AE
0001CEAA 43E9 0200                  		lea	$200(a1),a1
0001CEAE                            
0001CEAE                            loc_1C0AE:
0001CEAE 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CEB8 323C 000F                  		move.w	#$F,d1
0001CEBC 6000 0000                  		bra.w	LoadTiles
0001CEC0                            ; ===========================================================================
0001CEC0                            
0001CEC0                            loc_1C0C0:
0001CEC0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CEC4 6A00                       		bpl.s	locret_1C10C
0001CEC6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CECC 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CED0 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CED4 0240 0003                  		andi.w	#3,d0
0001CED8 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CEDC 0800 0000                  		btst	#0,d0
0001CEE0 6600                       		bne.s	loc_1C0E8
0001CEE2 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CEE8                            
0001CEE8                            loc_1C0E8:
0001CEE8 EF48                       		lsl.w	#7,d0
0001CEEA 3200                       		move.w	d0,d1
0001CEEC D040                       		add.w	d0,d0
0001CEEE D041                       		add.w	d1,d0
0001CEF0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CEFA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CF00 43F1 0000                  		lea	(a1,d0.w),a1
0001CF04 323C 000B                  		move.w	#$B,d1
0001CF08 6100 0000                  		bsr.w	LoadTiles
0001CF0C                            
0001CF0C                            locret_1C10C:
0001CF0C 4E75                       		rts	
0001CF0E                            ; ===========================================================================
0001CF0E 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CF12                            ; ===========================================================================
0001CF12                            ; ---------------------------------------------------------------------------
0001CF12                            ; Animated pattern routine - Marble
0001CF12                            ; ---------------------------------------------------------------------------
0001CF12                            
0001CF12                            AniArt_MZ:				; XREF: AniArt_Index
0001CF12 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CF16 6A00                       		bpl.s	loc_1C150
0001CF18 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CF1E 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CF24 7000                       		moveq	#0,d0
0001CF26 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CF2A 5200                       		addq.b	#1,d0
0001CF2C 0C00 0003                  		cmpi.b	#3,d0
0001CF30 6600                       		bne.s	loc_1C134
0001CF32 7000                       		moveq	#0,d0
0001CF34                            
0001CF34                            loc_1C134:
0001CF34 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CF38 C0FC 0100                  		mulu.w	#$100,d0
0001CF3C D2C0                       		adda.w	d0,a1
0001CF3E 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CF48 323C 0007                  		move.w	#7,d1
0001CF4C 6100 0000                  		bsr.w	LoadTiles
0001CF50                            
0001CF50                            loc_1C150:
0001CF50 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CF54 6A00                       		bpl.s	loc_1C1AE
0001CF56 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CF5C 7000                       		moveq	#0,d0
0001CF5E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CF62 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CF68 EE58                       		ror.w	#7,d0
0001CF6A D8C0                       		adda.w	d0,a4
0001CF6C 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CF76 7600                       		moveq	#0,d3
0001CF78 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CF7C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CF80 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CF84 343C 0003                  		move.w	#3,d2
0001CF88                            
0001CF88                            loc_1C188:
0001CF88 3003                       		move.w	d3,d0
0001CF8A D040                       		add.w	d0,d0
0001CF8C 0240 001E                  		andi.w	#$1E,d0
0001CF90 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CF96 3033 0000                  		move.w	(a3,d0.w),d0
0001CF9A 47F3 0000                  		lea	(a3,d0.w),a3
0001CF9E 224C                       		movea.l	a4,a1
0001CFA0 323C 001F                  		move.w	#$1F,d1
0001CFA4 4E93                       		jsr	(a3)
0001CFA6 5843                       		addq.w	#4,d3
0001CFA8 51CA FFDE                  		dbf	d2,loc_1C188
0001CFAC 4E75                       		rts	
0001CFAE                            ; ===========================================================================
0001CFAE                            
0001CFAE                            loc_1C1AE:
0001CFAE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CFB2 6A00 0000                  		bpl.w	locret_1C1EA
0001CFB6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CFBC 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CFC2 7000                       		moveq	#0,d0
0001CFC4 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CFC8 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CFCC 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CFD2 C0FC 00C0                  		mulu.w	#$C0,d0
0001CFD6 D2C0                       		adda.w	d0,a1
0001CFD8 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CFE2 323C 0005                  		move.w	#5,d1
0001CFE6 6000 0000                  		bra.w	LoadTiles
0001CFEA                            ; ===========================================================================
0001CFEA                            
0001CFEA                            locret_1C1EA:
0001CFEA 4E75                       		rts	
0001CFEC                            ; ===========================================================================
0001CFEC                            ; ---------------------------------------------------------------------------
0001CFEC                            ; Animated pattern routine - Scrap Brain
0001CFEC                            ; ---------------------------------------------------------------------------
0001CFEC                            
0001CFEC                            AniArt_SBZ:				; XREF: AniArt_Index
0001CFEC 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CFF0 6700                       		beq.s	loc_1C1F8
0001CFF2 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CFF6 6000                       		bra.s	loc_1C250
0001CFF8                            ; ===========================================================================
0001CFF8                            
0001CFF8                            loc_1C1F8:
0001CFF8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CFFC 6A00                       		bpl.s	loc_1C250
0001CFFE 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001D004 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001D00A 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001D014 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D018 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D01C 0240 0007                  		andi.w	#7,d0
0001D020 6700                       		beq.s	loc_1C234
0001D022 5340                       		subq.w	#1,d0
0001D024 C0FC 0180                  		mulu.w	#$180,d0
0001D028 43F1 0000                  		lea	(a1,d0.w),a1
0001D02C 323C 000B                  		move.w	#$B,d1
0001D030 6000 0000                  		bra.w	LoadTiles
0001D034                            ; ===========================================================================
0001D034                            
0001D034                            loc_1C234:
0001D034 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001D03A                            
0001D03A                            loc_1C23A:
0001D03A 323C 0005                  		move.w	#5,d1
0001D03E 6100 0000                  		bsr.w	LoadTiles
0001D042 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D048 323C 0005                  		move.w	#5,d1
0001D04C 6000 0000                  		bra.w	LoadTiles
0001D050                            ; ===========================================================================
0001D050                            
0001D050                            loc_1C250:
0001D050 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001D054 6700                       		beq.s	loc_1C25C
0001D056 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D05A 6000                       		bra.s	locret_1C2A0
0001D05C                            ; ===========================================================================
0001D05C                            
0001D05C                            loc_1C25C:
0001D05C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D060 6A00                       		bpl.s	locret_1C2A0
0001D062 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D068 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D06E 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001D078 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D07C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D080 0240 0007                  		andi.w	#7,d0
0001D084 6700                       		beq.s	loc_1C298
0001D086 5340                       		subq.w	#1,d0
0001D088 C0FC 0180                  		mulu.w	#$180,d0
0001D08C 43F1 0000                  		lea	(a1,d0.w),a1
0001D090 323C 000B                  		move.w	#$B,d1
0001D094 6000 0000                  		bra.w	LoadTiles
0001D098                            ; ===========================================================================
0001D098                            
0001D098                            loc_1C298:
0001D098 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001D09E 609A                       		bra.s	loc_1C23A
0001D0A0                            ; ===========================================================================
0001D0A0                            
0001D0A0                            locret_1C2A0:
0001D0A0 4E75                       		rts	
0001D0A2                            ; ===========================================================================
0001D0A2                            ; ---------------------------------------------------------------------------
0001D0A2                            ; Animated pattern routine - ending sequence
0001D0A2                            ; ---------------------------------------------------------------------------
0001D0A2                            
0001D0A2                            AniArt_Ending:				; XREF: AniArt_Index
0001D0A2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D0A6 6A00                       		bpl.s	loc_1C2F4
0001D0A8 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D0AE 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D0B4 45F8 9400                  		lea	($FFFF9400).w,a2
0001D0B8 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D0BC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D0C0 0240 0001                  		andi.w	#1,d0
0001D0C4 6700                       		beq.s	loc_1C2CE
0001D0C6 43E9 0200                  		lea	$200(a1),a1
0001D0CA 45EA 0200                  		lea	$200(a2),a2
0001D0CE                            
0001D0CE                            loc_1C2CE:
0001D0CE 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D0D8 323C 000F                  		move.w	#$F,d1
0001D0DC 6100 0000                  		bsr.w	LoadTiles
0001D0E0 224A                       		movea.l	a2,a1
0001D0E2 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001D0EC 323C 000F                  		move.w	#$F,d1
0001D0F0 6000 0000                  		bra.w	LoadTiles
0001D0F4                            ; ===========================================================================
0001D0F4                            
0001D0F4                            loc_1C2F4:
0001D0F4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D0F8 6A00                       		bpl.s	loc_1C33C
0001D0FA 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D100 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D104 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D108 0240 0007                  		andi.w	#7,d0
0001D10C 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001D110 EF48                       		lsl.w	#7,d0
0001D112 3200                       		move.w	d0,d1
0001D114 D040                       		add.w	d0,d0
0001D116 D041                       		add.w	d1,d0
0001D118 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D122 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D128 43F1 0000                  		lea	(a1,d0.w),a1
0001D12C 323C 000B                  		move.w	#$B,d1
0001D130 6000 0000                  		bra.w	LoadTiles
0001D134                            ; ===========================================================================
0001D134 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001D13C                            ; ===========================================================================
0001D13C                            
0001D13C                            loc_1C33C:
0001D13C 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001D140 6A00                       		bpl.s	loc_1C37A
0001D142 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001D148 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001D14C 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001D150 0240 0003                  		andi.w	#3,d0
0001D154 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001D158 E148                       		lsl.w	#8,d0
0001D15A D040                       		add.w	d0,d0
0001D15C 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001D166 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001D16A 43F1 0000                  		lea	(a1,d0.w),a1
0001D16E 323C 000F                  		move.w	#$F,d1
0001D172 6000 0000                  		bra.w	LoadTiles
0001D176                            ; ===========================================================================
0001D176 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001D17A                            ; ===========================================================================
0001D17A                            
0001D17A                            loc_1C37A:
0001D17A 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001D17E 6A00                       		bpl.s	locret_1C3B4
0001D180 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001D186 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001D18A 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001D18E 0240 0003                  		andi.w	#3,d0
0001D192 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001D196 E148                       		lsl.w	#8,d0
0001D198 D040                       		add.w	d0,d0
0001D19A 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001D1A4 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001D1A8 43F1 0000                  		lea	(a1,d0.w),a1
0001D1AC 323C 000F                  		move.w	#$F,d1
0001D1B0 6000 0000                  		bra.w	LoadTiles
0001D1B4                            ; ===========================================================================
0001D1B4                            
0001D1B4                            locret_1C3B4:
0001D1B4 4E75                       		rts	
0001D1B6                            ; ===========================================================================
0001D1B6                            
0001D1B6                            AniArt_none:				; XREF: AniArt_Index
0001D1B6 4E75                       		rts	
0001D1B8                            
0001D1B8                            ; ---------------------------------------------------------------------------
0001D1B8                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001D1B8                            ; ---------------------------------------------------------------------------
0001D1B8                            
0001D1B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1B8                            
0001D1B8                            
0001D1B8                            LoadTiles:
0001D1B8 2C99                       		move.l	(a1)+,(a6)
0001D1BA 2C99                       		move.l	(a1)+,(a6)
0001D1BC 2C99                       		move.l	(a1)+,(a6)
0001D1BE 2C99                       		move.l	(a1)+,(a6)
0001D1C0 2C99                       		move.l	(a1)+,(a6)
0001D1C2 2C99                       		move.l	(a1)+,(a6)
0001D1C4 2C99                       		move.l	(a1)+,(a6)
0001D1C6 2C99                       		move.l	(a1)+,(a6)
0001D1C8 51C9 FFEE                  		dbf	d1,LoadTiles
0001D1CC 4E75                       		rts	
0001D1CE                            ; End of function LoadTiles
0001D1CE                            
0001D1CE                            ; ===========================================================================
0001D1CE                            ; ---------------------------------------------------------------------------
0001D1CE                            ; Animated pattern routine - more Marble Zone
0001D1CE                            ; ---------------------------------------------------------------------------
0001D1CE 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001D1D2 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001D1D6 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001D1DA 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001D1DE 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001D1E2 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001D1E6 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001D1EA 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001D1EE                            ; ===========================================================================
0001D1EE                            
0001D1EE                            loc_1C3EE:				; XREF: AniArt_MZextra
0001D1EE 2C91                       		move.l	(a1),(a6)
0001D1F0 43E9 0010                  		lea	$10(a1),a1
0001D1F4 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001D1F8 4E75                       		rts	
0001D1FA                            ; ===========================================================================
0001D1FA                            
0001D1FA                            loc_1C3FA:				; XREF: AniArt_MZextra
0001D1FA 2029 0002                  		move.l	2(a1),d0
0001D1FE 1029 0001                  		move.b	1(a1),d0
0001D202 E098                       		ror.l	#8,d0
0001D204 2C80                       		move.l	d0,(a6)
0001D206 43E9 0010                  		lea	$10(a1),a1
0001D20A 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D20E 4E75                       		rts	
0001D210                            ; ===========================================================================
0001D210                            
0001D210                            loc_1C410:				; XREF: AniArt_MZextra
0001D210 2CA9 0002                  		move.l	2(a1),(a6)
0001D214 43E9 0010                  		lea	$10(a1),a1
0001D218 51C9 FFF6                  		dbf	d1,loc_1C410
0001D21C 4E75                       		rts	
0001D21E                            ; ===========================================================================
0001D21E                            
0001D21E                            loc_1C41E:				; XREF: AniArt_MZextra
0001D21E 2029 0004                  		move.l	4(a1),d0
0001D222 1029 0003                  		move.b	3(a1),d0
0001D226 E098                       		ror.l	#8,d0
0001D228 2C80                       		move.l	d0,(a6)
0001D22A 43E9 0010                  		lea	$10(a1),a1
0001D22E 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D232 4E75                       		rts	
0001D234                            ; ===========================================================================
0001D234                            
0001D234                            loc_1C434:				; XREF: AniArt_MZextra
0001D234 2CA9 0004                  		move.l	4(a1),(a6)
0001D238 43E9 0010                  		lea	$10(a1),a1
0001D23C 51C9 FFF6                  		dbf	d1,loc_1C434
0001D240 4E75                       		rts	
0001D242                            ; ===========================================================================
0001D242                            
0001D242                            loc_1C442:				; XREF: AniArt_MZextra
0001D242 2029 0006                  		move.l	6(a1),d0
0001D246 1029 0005                  		move.b	5(a1),d0
0001D24A E098                       		ror.l	#8,d0
0001D24C 2C80                       		move.l	d0,(a6)
0001D24E 43E9 0010                  		lea	$10(a1),a1
0001D252 51C9 FFEE                  		dbf	d1,loc_1C442
0001D256 4E75                       		rts	
0001D258                            ; ===========================================================================
0001D258                            
0001D258                            loc_1C458:				; XREF: AniArt_MZextra
0001D258 2CA9 0006                  		move.l	6(a1),(a6)
0001D25C 43E9 0010                  		lea	$10(a1),a1
0001D260 51C9 FFF6                  		dbf	d1,loc_1C458
0001D264 4E75                       		rts	
0001D266                            ; ===========================================================================
0001D266                            
0001D266                            loc_1C466:				; XREF: AniArt_MZextra
0001D266 2029 0008                  		move.l	8(a1),d0
0001D26A 1029 0007                  		move.b	7(a1),d0
0001D26E E098                       		ror.l	#8,d0
0001D270 2C80                       		move.l	d0,(a6)
0001D272 43E9 0010                  		lea	$10(a1),a1
0001D276 51C9 FFEE                  		dbf	d1,loc_1C466
0001D27A 4E75                       		rts	
0001D27C                            ; ===========================================================================
0001D27C                            
0001D27C                            loc_1C47C:				; XREF: AniArt_MZextra
0001D27C 2CA9 0008                  		move.l	8(a1),(a6)
0001D280 43E9 0010                  		lea	$10(a1),a1
0001D284 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D288 4E75                       		rts	
0001D28A                            ; ===========================================================================
0001D28A                            
0001D28A                            loc_1C48A:				; XREF: AniArt_MZextra
0001D28A 2029 000A                  		move.l	$A(a1),d0
0001D28E 1029 0009                  		move.b	9(a1),d0
0001D292 E098                       		ror.l	#8,d0
0001D294 2C80                       		move.l	d0,(a6)
0001D296 43E9 0010                  		lea	$10(a1),a1
0001D29A 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D29E 4E75                       		rts	
0001D2A0                            ; ===========================================================================
0001D2A0                            
0001D2A0                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D2A0 2CA9 000A                  		move.l	$A(a1),(a6)
0001D2A4 43E9 0010                  		lea	$10(a1),a1
0001D2A8 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D2AC 4E75                       		rts	
0001D2AE                            ; ===========================================================================
0001D2AE                            
0001D2AE                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D2AE 2029 000C                  		move.l	$C(a1),d0
0001D2B2 1029 000B                  		move.b	$B(a1),d0
0001D2B6 E098                       		ror.l	#8,d0
0001D2B8 2C80                       		move.l	d0,(a6)
0001D2BA 43E9 0010                  		lea	$10(a1),a1
0001D2BE 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D2C2 4E75                       		rts	
0001D2C4                            ; ===========================================================================
0001D2C4                            
0001D2C4                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D2C4 2CA9 000C                  		move.l	$C(a1),(a6)
0001D2C8 43E9 0010                  		lea	$10(a1),a1
0001D2CC 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D2D0 4E75                       		rts	
0001D2D2                            ; ===========================================================================
0001D2D2                            
0001D2D2                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D2D2 2029 000C                  		move.l	$C(a1),d0
0001D2D6 E198                       		rol.l	#8,d0
0001D2D8 1011                       		move.b	0(a1),d0
0001D2DA 2C80                       		move.l	d0,(a6)
0001D2DC 43E9 0010                  		lea	$10(a1),a1
0001D2E0 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D2E4 4E75                       		rts	
0001D2E6                            ; ===========================================================================
0001D2E6                            
0001D2E6                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D2E6 3CA9 000E                  		move.w	$E(a1),(a6)
0001D2EA 3C91                       		move.w	0(a1),(a6)
0001D2EC 43E9 0010                  		lea	$10(a1),a1
0001D2F0 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D2F4 4E75                       		rts	
0001D2F6                            ; ===========================================================================
0001D2F6                            
0001D2F6                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D2F6 2011                       		move.l	0(a1),d0
0001D2F8 1029 000F                  		move.b	$F(a1),d0
0001D2FC E098                       		ror.l	#8,d0
0001D2FE 2C80                       		move.l	d0,(a6)
0001D300 43E9 0010                  		lea	$10(a1),a1
0001D304 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D308 4E75                       		rts	
0001D30A                            
0001D30A                            ; ---------------------------------------------------------------------------
0001D30A                            ; Animated pattern routine - giant ring
0001D30A                            ; ---------------------------------------------------------------------------
0001D30A                            
0001D30A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D30A                            
0001D30A                            
0001D30A                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D30A 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D30E 6600                       		bne.s	loc_1C518
0001D310 4E75                       		rts	
0001D312                            ; ===========================================================================
0001D312                            
0001D312                            loc_1C518:
0001D312 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D318 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D31E 7000                       		moveq	#0,d0
0001D320 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D324 43F1 0000                  		lea	(a1,d0.w),a1
0001D328 0640 8000                  		addi.w	#$8000,d0
0001D32C E588                       		lsl.l	#2,d0
0001D32E E448                       		lsr.w	#2,d0
0001D330 0040 4000                  		ori.w	#$4000,d0
0001D334 4840                       		swap	d0
0001D336 2D40 0004                  		move.l	d0,4(a6)
0001D33A 323C 000D                  		move.w	#$D,d1
0001D33E 6000 FE78                  		bra.w	LoadTiles
0001D342                            ; End of function AniArt_GiantRing
0001D342                            
0001D342                            ; ===========================================================================
0001D342                            ; ---------------------------------------------------------------------------
0001D342                            ; Object 21 - SCORE, TIME, RINGS
0001D342                            ; ---------------------------------------------------------------------------
0001D342                            
0001D342                            Obj21:					; XREF: Obj_Index
0001D342 7000                       		moveq	#0,d0
0001D344 1028 0024                  		move.b	$24(a0),d0
0001D348 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D34C 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D350                            ; ===========================================================================
0001D350 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D352 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D354                            ; ===========================================================================
0001D354                            
0001D354                            Obj21_Main:				; XREF: Obj21_Main
0001D354 5428 0024                  		addq.b	#2,$24(a0)
0001D358 317C 0090 0008             		move.w	#$90,8(a0)
0001D35E 317C 0108 000A             		move.w	#$108,$A(a0)
0001D364 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D36C 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D372 117C 0000 0001             		move.b	#0,1(a0)
0001D378 117C 0000 0018             		move.b	#0,$18(a0)
0001D37E                            
0001D37E                            Obj21_Flash:				; XREF: Obj21_Main
0001D37E 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D382 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D384 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D388 4EF9 0000 E28C             		jmp	DisplaySprite
0001D38E                            ; ===========================================================================
0001D38E                            
0001D38E                            Obj21_Flash2:
0001D38E 7000                       		moveq	#0,d0
0001D390 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D396 6600                       		bne.s	Obj21_Display
0001D398 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D39A 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D3A0 6600                       		bne.s	Obj21_Display	; if not, branch
0001D3A2 5440                       		addq.w	#2,d0		; make time counter flash red
0001D3A4                            
0001D3A4                            Obj21_Display:
0001D3A4 1140 001A                  		move.b	d0,$1A(a0)
0001D3A8 4EF9 0000 E28C             		jmp	DisplaySprite
0001D3AE                            ; ===========================================================================
0001D3AE                            ; ---------------------------------------------------------------------------
0001D3AE                            ; Sprite mappings - SCORE, TIME, RINGS
0001D3AE                            ; ---------------------------------------------------------------------------
0001D3AE                            Map_obj21:
0001D3AE                            	include "_maps\obj21.asm"
0001D3AE                            Map_549d:
0001D3AE 0000                       Map_549d_0: 	dc.w Map_549d_8-Map_549d
0001D3B0 0000                       Map_549d_2: 	dc.w Map_549d_36-Map_549d
0001D3B2 0000                       Map_549d_4: 	dc.w Map_549d_64-Map_549d
0001D3B4 0000                       Map_549d_6: 	dc.w Map_549d_92-Map_549d
0001D3B6 09                         Map_549d_8: 	dc.b $9
0001D3B7 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D3BC 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D3C1 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D3C6 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D3CB A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D3D0 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D3D5 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D3DA 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D3DF 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D3E4 09                         Map_549d_36: 	dc.b $9
0001D3E5 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D3EA 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D3EF 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D3F4 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D3F9 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D3FE A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D403 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D408 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D40D 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D412 09                         Map_549d_64: 	dc.b $9
0001D413 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D418 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D41D 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D422 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D427 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D42C A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D431 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D436 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D43B 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D440 09                         Map_549d_92: 	dc.b $9
0001D441 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D446 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D44B 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D450 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D455 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D45A A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D45F 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D464 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D469 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D46E                            	even
0001D46E                            	even
0001D46E                            
0001D46E                            ; ---------------------------------------------------------------------------
0001D46E                            ; Add points subroutine
0001D46E                            ; ---------------------------------------------------------------------------
0001D46E                            
0001D46E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D46E                            
0001D46E                            
0001D46E                            AddPoints:
0001D46E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D474 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D478 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D47C D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D47E 223C 000F 423F             		move.l	#999999,d1
0001D484 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D486 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D48A 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D48C 2481                       		move.l	d1,(a2)
0001D48E                            
0001D48E                            loc_1C6AC:
0001D48E 2013                       		move.l	(a3),d0
0001D490 B092                       		cmp.l	(a2),d0
0001D492 6500 0000                  		bcs.w	locret_1C6B6
0001D496 2480                       		move.l	d0,(a2)
0001D498                            
0001D498                            locret_1C6B6:
0001D498 4E75                       		rts	
0001D49A                            ; End of function AddPoints
0001D49A                            
0001D49A                            ; ---------------------------------------------------------------------------
0001D49A                            ; Subroutine to	update the HUD
0001D49A                            ; ---------------------------------------------------------------------------
0001D49A                            
0001D49A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D49A                            
0001D49A                            
0001D49A                            HudUpdate:
0001D49A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D49E 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D4A2 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D4A6 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D4A8 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D4AC 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D4B2 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D4B6 6100 0000                  		bsr.w	Hud_Score
0001D4BA                            
0001D4BA                            Hud_ChkRings:
0001D4BA 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D4BE 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D4C0 6A00                       		bpl.s	loc_1C6E4
0001D4C2 6100 0000                  		bsr.w	Hud_LoadZero
0001D4C6                            
0001D4C6                            loc_1C6E4:
0001D4C6 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D4CA 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D4D0 7200                       		moveq	#0,d1
0001D4D2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D4D6 6100 0000                  		bsr.w	Hud_Rings
0001D4DA                            
0001D4DA                            Hud_ChkTime:
0001D4DA 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D4DE 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D4E0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D4E4 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D4E6 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D4EA 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D4F0 6700                       		beq.s	TimeOver	; if yes, branch
0001D4F2 5221                       		addq.b	#1,-(a1)
0001D4F4 0C11 003C                  		cmpi.b	#60,(a1)
0001D4F8 6500                       		bcs.s	Hud_ChkLives
0001D4FA 12BC 0000                  		move.b	#0,(a1)
0001D4FE 5221                       		addq.b	#1,-(a1)
0001D500 0C11 003C                  		cmpi.b	#60,(a1)
0001D504 6500                       		bcs.s	loc_1C734
0001D506 12BC 0000                  		move.b	#0,(a1)
0001D50A 5221                       		addq.b	#1,-(a1)
0001D50C 0C11 0009                  		cmpi.b	#9,(a1)
0001D510 6500                       		bcs.s	loc_1C734
0001D512 12BC 0009                  		move.b	#9,(a1)
0001D516                            
0001D516                            loc_1C734:
0001D516 203C 5E40 0003             		move.l	#$5E400003,d0
0001D51C 7200                       		moveq	#0,d1
0001D51E 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D522 6100 0000                  		bsr.w	Hud_Mins
0001D526 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D52C 7200                       		moveq	#0,d1
0001D52E 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D532 6100 0000                  		bsr.w	Hud_Secs
0001D536                            
0001D536                            Hud_ChkLives:
0001D536 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D53A 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D53C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D540 6100 0000                  		bsr.w	Hud_Lives
0001D544                            
0001D544                            Hud_ChkBonus:
0001D544 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D548 6700                       		beq.s	Hud_End		; if not, branch
0001D54A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D54E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D558 7200                       		moveq	#0,d1
0001D55A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D55E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D562 7200                       		moveq	#0,d1
0001D564 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D568 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D56C                            
0001D56C                            Hud_End:
0001D56C 4E75                       		rts	
0001D56E                            ; ===========================================================================
0001D56E                            
0001D56E                            TimeOver:				; XREF: Hud_ChkTime
0001D56E 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D572 41F8 D000                  		lea	($FFFFD000).w,a0
0001D576 2448                       		movea.l	a0,a2
0001D578 6100 E968                  		bsr.w	KillSonic
0001D57C 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D582 4E75                       		rts	
0001D584                            ; ===========================================================================
0001D584                            
0001D584                            HudDebug:				; XREF: HudUpdate
0001D584 6100 0000                  		bsr.w	HudDb_XY
0001D588 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D58C 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D58E 6A00                       		bpl.s	HudDb_Rings
0001D590 6100 0000                  		bsr.w	Hud_LoadZero
0001D594                            
0001D594                            HudDb_Rings:
0001D594 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D598 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D59E 7200                       		moveq	#0,d1
0001D5A0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D5A4 6100 0000                  		bsr.w	Hud_Rings
0001D5A8                            
0001D5A8                            HudDb_ObjCount:
0001D5A8 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D5AE 7200                       		moveq	#0,d1
0001D5B0 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D5B4 6100 0000                  		bsr.w	Hud_Secs
0001D5B8 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D5BC 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D5BE 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D5C2 6100 0000                  		bsr.w	Hud_Lives
0001D5C6                            
0001D5C6                            HudDb_ChkBonus:
0001D5C6 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D5CA 6700                       		beq.s	HudDb_End	; if not, branch
0001D5CC 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D5D0 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D5DA 7200                       		moveq	#0,d1
0001D5DC 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D5E0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D5E4 7200                       		moveq	#0,d1
0001D5E6 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D5EA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D5EE                            
0001D5EE                            HudDb_End:
0001D5EE 4E75                       		rts	
0001D5F0                            ; End of function HudUpdate
0001D5F0                            
0001D5F0                            ; ---------------------------------------------------------------------------
0001D5F0                            ; Subroutine to	load "0" on the	HUD
0001D5F0                            ; ---------------------------------------------------------------------------
0001D5F0                            
0001D5F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5F0                            
0001D5F0                            
0001D5F0                            Hud_LoadZero:				; XREF: HudUpdate
0001D5F0 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D5FA 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D5FE 343C 0002                  		move.w	#2,d2
0001D602 6000                       		bra.s	loc_1C83E
0001D604                            ; End of function Hud_LoadZero
0001D604                            
0001D604                            ; ---------------------------------------------------------------------------
0001D604                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D604                            ; ---------------------------------------------------------------------------
0001D604                            
0001D604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D604                            
0001D604                            
0001D604                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D604 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D60A 6100 0000                  		bsr.w	Hud_Lives
0001D60E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D618 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D61C 343C 000E                  		move.w	#$E,d2
0001D620                            
0001D620                            loc_1C83E:				; XREF: Hud_LoadZero
0001D620 43FA 0000                  		lea	Art_Hud(pc),a1
0001D624                            
0001D624                            loc_1C842:
0001D624 323C 000F                  		move.w	#$F,d1
0001D628 101A                       		move.b	(a2)+,d0
0001D62A 6B00                       		bmi.s	loc_1C85E
0001D62C 4880                       		ext.w	d0
0001D62E EB48                       		lsl.w	#5,d0
0001D630 47F1 0000                  		lea	(a1,d0.w),a3
0001D634                            
0001D634                            loc_1C852:
0001D634 2C9B                       		move.l	(a3)+,(a6)
0001D636 51C9 FFFC                  		dbf	d1,loc_1C852
0001D63A                            
0001D63A                            loc_1C858:
0001D63A 51CA FFE8                  		dbf	d2,loc_1C842
0001D63E                            
0001D63E 4E75                       		rts	
0001D640                            ; ===========================================================================
0001D640                            
0001D640                            loc_1C85E:
0001D640 2CBC 0000 0000             		move.l	#0,(a6)
0001D646 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D64A                            
0001D64A 60EE                       		bra.s	loc_1C858
0001D64C                            ; End of function Hud_Base
0001D64C                            
0001D64C                            ; ===========================================================================
0001D64C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D658 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D65C                            ; ---------------------------------------------------------------------------
0001D65C                            ; Subroutine to	load debug mode	numbers	patterns
0001D65C                            ; ---------------------------------------------------------------------------
0001D65C                            
0001D65C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D65C                            
0001D65C                            
0001D65C                            HudDb_XY:				; XREF: HudDebug
0001D65C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D666 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D66A 4841                       		swap	d1
0001D66C 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D670 6100                       		bsr.s	HudDb_XY2
0001D672 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D676 4841                       		swap	d1
0001D678 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D67C                            ; End of function HudDb_XY
0001D67C                            
0001D67C                            
0001D67C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D67C                            
0001D67C                            
0001D67C                            HudDb_XY2:
0001D67C 7C07                       		moveq	#7,d6
0001D67E 43F9 0000 05F6             		lea	(Art_Text).l,a1
0001D684                            
0001D684                            HudDb_XYLoop:
0001D684 E959                       		rol.w	#4,d1
0001D686 3401                       		move.w	d1,d2
0001D688 0242 000F                  		andi.w	#$F,d2
0001D68C 0C42 000A                  		cmpi.w	#$A,d2
0001D690 6500                       		bcs.s	loc_1C8B2
0001D692 5E42                       		addq.w	#7,d2
0001D694                            
0001D694                            loc_1C8B2:
0001D694 EB4A                       		lsl.w	#5,d2
0001D696 47F1 2000                  		lea	(a1,d2.w),a3
0001D69A 2C9B                       		move.l	(a3)+,(a6)
0001D69C 2C9B                       		move.l	(a3)+,(a6)
0001D69E 2C9B                       		move.l	(a3)+,(a6)
0001D6A0 2C9B                       		move.l	(a3)+,(a6)
0001D6A2 2C9B                       		move.l	(a3)+,(a6)
0001D6A4 2C9B                       		move.l	(a3)+,(a6)
0001D6A6 2C9B                       		move.l	(a3)+,(a6)
0001D6A8 2C9B                       		move.l	(a3)+,(a6)
0001D6AA 4841                       		swap	d1
0001D6AC 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D6B0                            
0001D6B0 4E75                       		rts	
0001D6B2                            ; End of function HudDb_XY2
0001D6B2                            
0001D6B2                            ; ---------------------------------------------------------------------------
0001D6B2                            ; Subroutine to	load rings numbers patterns
0001D6B2                            ; ---------------------------------------------------------------------------
0001D6B2                            
0001D6B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6B2                            
0001D6B2                            
0001D6B2                            Hud_Rings:				; XREF: HudUpdate
0001D6B2 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D6B8 7C02                       		moveq	#2,d6
0001D6BA 6000                       		bra.s	Hud_LoadArt
0001D6BC                            ; End of function Hud_Rings
0001D6BC                            
0001D6BC                            ; ---------------------------------------------------------------------------
0001D6BC                            ; Subroutine to	load score numbers patterns
0001D6BC                            ; ---------------------------------------------------------------------------
0001D6BC                            
0001D6BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6BC                            
0001D6BC                            
0001D6BC                            Hud_Score:				; XREF: HudUpdate
0001D6BC 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D6C2 7C05                       		moveq	#5,d6
0001D6C4                            
0001D6C4                            Hud_LoadArt:
0001D6C4 7800                       		moveq	#0,d4
0001D6C6 43FA 0000                  		lea	Art_Hud(pc),a1
0001D6CA                            
0001D6CA                            Hud_ScoreLoop:
0001D6CA 7400                       		moveq	#0,d2
0001D6CC 261A                       		move.l	(a2)+,d3
0001D6CE                            
0001D6CE                            loc_1C8EC:
0001D6CE 9283                       		sub.l	d3,d1
0001D6D0 6500                       		bcs.s	loc_1C8F4
0001D6D2 5242                       		addq.w	#1,d2
0001D6D4 60F8                       		bra.s	loc_1C8EC
0001D6D6                            ; ===========================================================================
0001D6D6                            
0001D6D6                            loc_1C8F4:
0001D6D6 D283                       		add.l	d3,d1
0001D6D8 4A42                       		tst.w	d2
0001D6DA 6700                       		beq.s	loc_1C8FE
0001D6DC 383C 0001                  		move.w	#1,d4
0001D6E0                            
0001D6E0                            loc_1C8FE:
0001D6E0 4A44                       		tst.w	d4
0001D6E2 6700                       		beq.s	loc_1C92C
0001D6E4 ED4A                       		lsl.w	#6,d2
0001D6E6 2D40 0004                  		move.l	d0,4(a6)
0001D6EA 47F1 2000                  		lea	(a1,d2.w),a3
0001D6EE 2C9B                       		move.l	(a3)+,(a6)
0001D6F0 2C9B                       		move.l	(a3)+,(a6)
0001D6F2 2C9B                       		move.l	(a3)+,(a6)
0001D6F4 2C9B                       		move.l	(a3)+,(a6)
0001D6F6 2C9B                       		move.l	(a3)+,(a6)
0001D6F8 2C9B                       		move.l	(a3)+,(a6)
0001D6FA 2C9B                       		move.l	(a3)+,(a6)
0001D6FC 2C9B                       		move.l	(a3)+,(a6)
0001D6FE 2C9B                       		move.l	(a3)+,(a6)
0001D700 2C9B                       		move.l	(a3)+,(a6)
0001D702 2C9B                       		move.l	(a3)+,(a6)
0001D704 2C9B                       		move.l	(a3)+,(a6)
0001D706 2C9B                       		move.l	(a3)+,(a6)
0001D708 2C9B                       		move.l	(a3)+,(a6)
0001D70A 2C9B                       		move.l	(a3)+,(a6)
0001D70C 2C9B                       		move.l	(a3)+,(a6)
0001D70E                            
0001D70E                            loc_1C92C:
0001D70E 0680 0040 0000             		addi.l	#$400000,d0
0001D714 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D718                            
0001D718 4E75                       		rts	
0001D71A                            ; End of function Hud_Score
0001D71A                            
0001D71A                            ; ---------------------------------------------------------------------------
0001D71A                            ; Subroutine to	load countdown numbers on the continue screen
0001D71A                            ; ---------------------------------------------------------------------------
0001D71A                            
0001D71A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D71A                            
0001D71A                            
0001D71A                            ContScrCounter:				; XREF: ContinueScreen
0001D71A 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D724 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D72A 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D730 7C01                       		moveq	#1,d6
0001D732 7800                       		moveq	#0,d4
0001D734 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D738                            
0001D738                            ContScr_Loop:
0001D738 7400                       		moveq	#0,d2
0001D73A 261A                       		move.l	(a2)+,d3
0001D73C                            
0001D73C                            loc_1C95A:
0001D73C 9283                       		sub.l	d3,d1
0001D73E 6500                       		bcs.s	loc_1C962
0001D740 5242                       		addq.w	#1,d2
0001D742 60F8                       		bra.s	loc_1C95A
0001D744                            ; ===========================================================================
0001D744                            
0001D744                            loc_1C962:
0001D744 D283                       		add.l	d3,d1
0001D746 ED4A                       		lsl.w	#6,d2
0001D748 47F1 2000                  		lea	(a1,d2.w),a3
0001D74C 2C9B                       		move.l	(a3)+,(a6)
0001D74E 2C9B                       		move.l	(a3)+,(a6)
0001D750 2C9B                       		move.l	(a3)+,(a6)
0001D752 2C9B                       		move.l	(a3)+,(a6)
0001D754 2C9B                       		move.l	(a3)+,(a6)
0001D756 2C9B                       		move.l	(a3)+,(a6)
0001D758 2C9B                       		move.l	(a3)+,(a6)
0001D75A 2C9B                       		move.l	(a3)+,(a6)
0001D75C 2C9B                       		move.l	(a3)+,(a6)
0001D75E 2C9B                       		move.l	(a3)+,(a6)
0001D760 2C9B                       		move.l	(a3)+,(a6)
0001D762 2C9B                       		move.l	(a3)+,(a6)
0001D764 2C9B                       		move.l	(a3)+,(a6)
0001D766 2C9B                       		move.l	(a3)+,(a6)
0001D768 2C9B                       		move.l	(a3)+,(a6)
0001D76A 2C9B                       		move.l	(a3)+,(a6)
0001D76C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D770                            
0001D770 4E75                       		rts	
0001D772                            ; End of function ContScrCounter
0001D772                            
0001D772                            ; ===========================================================================
0001D772                            ; ---------------------------------------------------------------------------
0001D772                            ; HUD counter sizes
0001D772                            ; ---------------------------------------------------------------------------
0001D772 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D776 0000 2710                  Hud_10000:	dc.l 10000
0001D77A 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D77E 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D782 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D786 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D78A                            
0001D78A                            ; ---------------------------------------------------------------------------
0001D78A                            ; Subroutine to	load time numbers patterns
0001D78A                            ; ---------------------------------------------------------------------------
0001D78A                            
0001D78A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D78A                            
0001D78A                            
0001D78A                            Hud_Mins:				; XREF: Hud_ChkTime
0001D78A 45F9 0001 D786             		lea	(Hud_1).l,a2
0001D790 7C00                       		moveq	#0,d6
0001D792 6000                       		bra.s	loc_1C9BA
0001D794                            ; End of function Hud_Mins
0001D794                            
0001D794                            
0001D794                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D794                            
0001D794                            
0001D794                            Hud_Secs:				; XREF: Hud_ChkTime
0001D794 45F9 0001 D782             		lea	(Hud_10).l,a2
0001D79A 7C01                       		moveq	#1,d6
0001D79C                            
0001D79C                            loc_1C9BA:
0001D79C 7800                       		moveq	#0,d4
0001D79E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D7A2                            
0001D7A2                            Hud_TimeLoop:
0001D7A2 7400                       		moveq	#0,d2
0001D7A4 261A                       		move.l	(a2)+,d3
0001D7A6                            
0001D7A6                            loc_1C9C4:
0001D7A6 9283                       		sub.l	d3,d1
0001D7A8 6500                       		bcs.s	loc_1C9CC
0001D7AA 5242                       		addq.w	#1,d2
0001D7AC 60F8                       		bra.s	loc_1C9C4
0001D7AE                            ; ===========================================================================
0001D7AE                            
0001D7AE                            loc_1C9CC:
0001D7AE D283                       		add.l	d3,d1
0001D7B0 4A42                       		tst.w	d2
0001D7B2 6700                       		beq.s	loc_1C9D6
0001D7B4 383C 0001                  		move.w	#1,d4
0001D7B8                            
0001D7B8                            loc_1C9D6:
0001D7B8 ED4A                       		lsl.w	#6,d2
0001D7BA 2D40 0004                  		move.l	d0,4(a6)
0001D7BE 47F1 2000                  		lea	(a1,d2.w),a3
0001D7C2 2C9B                       		move.l	(a3)+,(a6)
0001D7C4 2C9B                       		move.l	(a3)+,(a6)
0001D7C6 2C9B                       		move.l	(a3)+,(a6)
0001D7C8 2C9B                       		move.l	(a3)+,(a6)
0001D7CA 2C9B                       		move.l	(a3)+,(a6)
0001D7CC 2C9B                       		move.l	(a3)+,(a6)
0001D7CE 2C9B                       		move.l	(a3)+,(a6)
0001D7D0 2C9B                       		move.l	(a3)+,(a6)
0001D7D2 2C9B                       		move.l	(a3)+,(a6)
0001D7D4 2C9B                       		move.l	(a3)+,(a6)
0001D7D6 2C9B                       		move.l	(a3)+,(a6)
0001D7D8 2C9B                       		move.l	(a3)+,(a6)
0001D7DA 2C9B                       		move.l	(a3)+,(a6)
0001D7DC 2C9B                       		move.l	(a3)+,(a6)
0001D7DE 2C9B                       		move.l	(a3)+,(a6)
0001D7E0 2C9B                       		move.l	(a3)+,(a6)
0001D7E2 0680 0040 0000             		addi.l	#$400000,d0
0001D7E8 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D7EC                            
0001D7EC 4E75                       		rts	
0001D7EE                            ; End of function Hud_Secs
0001D7EE                            
0001D7EE                            ; ---------------------------------------------------------------------------
0001D7EE                            ; Subroutine to	load time/ring bonus numbers patterns
0001D7EE                            ; ---------------------------------------------------------------------------
0001D7EE                            
0001D7EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D7EE                            
0001D7EE                            
0001D7EE                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D7EE 45F9 0001 D77A             		lea	(Hud_1000).l,a2
0001D7F4 7C03                       		moveq	#3,d6
0001D7F6 7800                       		moveq	#0,d4
0001D7F8 43FA 0000                  		lea	Art_Hud(pc),a1
0001D7FC                            
0001D7FC                            Hud_BonusLoop:
0001D7FC 7400                       		moveq	#0,d2
0001D7FE 261A                       		move.l	(a2)+,d3
0001D800                            
0001D800                            loc_1CA1E:
0001D800 9283                       		sub.l	d3,d1
0001D802 6500                       		bcs.s	loc_1CA26
0001D804 5242                       		addq.w	#1,d2
0001D806 60F8                       		bra.s	loc_1CA1E
0001D808                            ; ===========================================================================
0001D808                            
0001D808                            loc_1CA26:
0001D808 D283                       		add.l	d3,d1
0001D80A 4A42                       		tst.w	d2
0001D80C 6700                       		beq.s	loc_1CA30
0001D80E 383C 0001                  		move.w	#1,d4
0001D812                            
0001D812                            loc_1CA30:
0001D812 4A44                       		tst.w	d4
0001D814 6700                       		beq.s	Hud_ClrBonus
0001D816 ED4A                       		lsl.w	#6,d2
0001D818 47F1 2000                  		lea	(a1,d2.w),a3
0001D81C 2C9B                       		move.l	(a3)+,(a6)
0001D81E 2C9B                       		move.l	(a3)+,(a6)
0001D820 2C9B                       		move.l	(a3)+,(a6)
0001D822 2C9B                       		move.l	(a3)+,(a6)
0001D824 2C9B                       		move.l	(a3)+,(a6)
0001D826 2C9B                       		move.l	(a3)+,(a6)
0001D828 2C9B                       		move.l	(a3)+,(a6)
0001D82A 2C9B                       		move.l	(a3)+,(a6)
0001D82C 2C9B                       		move.l	(a3)+,(a6)
0001D82E 2C9B                       		move.l	(a3)+,(a6)
0001D830 2C9B                       		move.l	(a3)+,(a6)
0001D832 2C9B                       		move.l	(a3)+,(a6)
0001D834 2C9B                       		move.l	(a3)+,(a6)
0001D836 2C9B                       		move.l	(a3)+,(a6)
0001D838 2C9B                       		move.l	(a3)+,(a6)
0001D83A 2C9B                       		move.l	(a3)+,(a6)
0001D83C                            
0001D83C                            loc_1CA5A:
0001D83C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D840                            
0001D840 4E75                       		rts	
0001D842                            ; ===========================================================================
0001D842                            
0001D842                            Hud_ClrBonus:
0001D842 7A0F                       		moveq	#$F,d5
0001D844                            
0001D844                            Hud_ClrBonusLoop:
0001D844 2CBC 0000 0000             		move.l	#0,(a6)
0001D84A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D84E                            
0001D84E 60EC                       		bra.s	loc_1CA5A
0001D850                            ; End of function Hud_TimeRingBonus
0001D850                            
0001D850                            ; ---------------------------------------------------------------------------
0001D850                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D850                            ; ---------------------------------------------------------------------------
0001D850                            
0001D850                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D850                            
0001D850                            
0001D850                            Hud_Lives:				; XREF: Hud_ChkLives
0001D850 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D856 7200                       		moveq	#0,d1
0001D858 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D85C 45F9 0001 D782             		lea	(Hud_10).l,a2
0001D862 7C01                       		moveq	#1,d6
0001D864 7800                       		moveq	#0,d4
0001D866 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D86A                            
0001D86A                            Hud_LivesLoop:
0001D86A 2D40 0004                  		move.l	d0,4(a6)
0001D86E 7400                       		moveq	#0,d2
0001D870 261A                       		move.l	(a2)+,d3
0001D872                            
0001D872                            loc_1CA90:
0001D872 9283                       		sub.l	d3,d1
0001D874 6500                       		bcs.s	loc_1CA98
0001D876 5242                       		addq.w	#1,d2
0001D878 60F8                       		bra.s	loc_1CA90
0001D87A                            ; ===========================================================================
0001D87A                            
0001D87A                            loc_1CA98:
0001D87A D283                       		add.l	d3,d1
0001D87C 4A42                       		tst.w	d2
0001D87E 6700                       		beq.s	loc_1CAA2
0001D880 383C 0001                  		move.w	#1,d4
0001D884                            
0001D884                            loc_1CAA2:
0001D884 4A44                       		tst.w	d4
0001D886 6700                       		beq.s	Hud_ClrLives
0001D888                            
0001D888                            loc_1CAA6:
0001D888 EB4A                       		lsl.w	#5,d2
0001D88A 47F1 2000                  		lea	(a1,d2.w),a3
0001D88E 2C9B                       		move.l	(a3)+,(a6)
0001D890 2C9B                       		move.l	(a3)+,(a6)
0001D892 2C9B                       		move.l	(a3)+,(a6)
0001D894 2C9B                       		move.l	(a3)+,(a6)
0001D896 2C9B                       		move.l	(a3)+,(a6)
0001D898 2C9B                       		move.l	(a3)+,(a6)
0001D89A 2C9B                       		move.l	(a3)+,(a6)
0001D89C 2C9B                       		move.l	(a3)+,(a6)
0001D89E                            
0001D89E                            loc_1CABC:
0001D89E 0680 0040 0000             		addi.l	#$400000,d0
0001D8A4 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D8A8                            
0001D8A8 4E75                       		rts	
0001D8AA                            ; ===========================================================================
0001D8AA                            
0001D8AA                            Hud_ClrLives:
0001D8AA 4A46                       		tst.w	d6
0001D8AC 67DA                       		beq.s	loc_1CAA6
0001D8AE 7A07                       		moveq	#7,d5
0001D8B0                            
0001D8B0                            Hud_ClrLivesLoop:
0001D8B0 2CBC 0000 0000             		move.l	#0,(a6)
0001D8B6 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D8BA 60E2                       		bra.s	loc_1CABC
0001D8BC                            ; End of function Hud_Lives
0001D8BC                            
0001D8BC                            ; ===========================================================================
0001D8BC                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001DBBC                            		even
0001DBBC                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001DCFC                            		even
0001DCFC                            ; ===========================================================================
0001DCFC                            ; ---------------------------------------------------------------------------
0001DCFC                            ; When debug mode is currently in use
0001DCFC                            ; ---------------------------------------------------------------------------
0001DCFC                            
0001DCFC                            DebugMode:				; XREF: Obj01; Obj09
0001DCFC 7000                       		moveq	#0,d0
0001DCFE 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DD02 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DD06 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DD0A                            ; ===========================================================================
0001DD0A 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DD0C 0000                       		dc.w Debug_Skip-Debug_Index
0001DD0E                            ; ===========================================================================
0001DD0E                            
0001DD0E                            Debug_Main:				; XREF: Debug_Index
0001DD0E 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DD12 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DD18 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DD1E 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DD24 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DD2A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DD30 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DD36 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DD3C 117C 0000 001A             		move.b	#0,$1A(a0)
0001DD42 117C 0000 001C             		move.b	#0,$1C(a0)
0001DD48 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DD4E 6600                       		bne.s	Debug_Zone	; if not, branch
0001DD50 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DD56 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DD5C 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DD5E 6000                       		bra.s	Debug_UseList
0001DD60                            ; ===========================================================================
0001DD60                            
0001DD60                            Debug_Zone:
0001DD60 7000                       		moveq	#0,d0
0001DD62 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DD66                            
0001DD66                            Debug_UseList:
0001DD66 45F9 0000 0000             		lea	(DebugList).l,a2
0001DD6C D040                       		add.w	d0,d0
0001DD6E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DD72 3C1A                       		move.w	(a2)+,d6
0001DD74 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DD78 6200                       		bhi.s	loc_1CF9E
0001DD7A 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DD80                            
0001DD80                            loc_1CF9E:
0001DD80 6100 0000                  		bsr.w	Debug_ShowItem
0001DD84 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DD8A 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DD90                            
0001DD90                            Debug_Skip:				; XREF: Debug_Index
0001DD90 7006                       		moveq	#6,d0
0001DD92 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DD98 6700                       		beq.s	loc_1CFBE
0001DD9A 7000                       		moveq	#0,d0
0001DD9C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DDA0                            
0001DDA0                            loc_1CFBE:
0001DDA0 45F9 0000 0000             		lea	(DebugList).l,a2
0001DDA6 D040                       		add.w	d0,d0
0001DDA8 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DDAC 3C1A                       		move.w	(a2)+,d6
0001DDAE 6100 0000                  		bsr.w	Debug_Control
0001DDB2 4EF9 0000 E28C             		jmp	DisplaySprite
0001DDB8                            
0001DDB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDB8                            
0001DDB8                            
0001DDB8                            Debug_Control:
0001DDB8 7800                       		moveq	#0,d4
0001DDBA 323C 0001                  		move.w	#1,d1
0001DDBE 1838 F605                  		move.b	($FFFFF605).w,d4
0001DDC2 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DDC6 6600                       		bne.s	loc_1D018	; if yes, branch
0001DDC8 1038 F604                  		move.b	($FFFFF604).w,d0
0001DDCC 0240 000F                  		andi.w	#$F,d0
0001DDD0 6600                       		bne.s	loc_1D000
0001DDD2 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DDD8 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DDDE 6000 0000                  		bra.w	Debug_BackItem
0001DDE2                            ; ===========================================================================
0001DDE2                            
0001DDE2                            loc_1D000:
0001DDE2 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DDE6 6600                       		bne.s	loc_1D01C
0001DDE8 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DDEE 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DDF2 6600                       		bne.s	loc_1D018
0001DDF4 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DDFA                            
0001DDFA                            loc_1D018:
0001DDFA 1838 F604                  		move.b	($FFFFF604).w,d4
0001DDFE                            
0001DDFE                            loc_1D01C:
0001DDFE 7200                       		moveq	#0,d1
0001DE00 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DE04 5241                       		addq.w	#1,d1
0001DE06 4841                       		swap	d1
0001DE08 E881                       		asr.l	#4,d1
0001DE0A 2428 000C                  		move.l	$C(a0),d2
0001DE0E 2628 0008                  		move.l	8(a0),d3
0001DE12 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DE16 6700                       		beq.s	loc_1D03C	; if not, branch
0001DE18 9481                       		sub.l	d1,d2
0001DE1A 6400                       		bcc.s	loc_1D03C
0001DE1C 7400                       		moveq	#0,d2
0001DE1E                            
0001DE1E                            loc_1D03C:
0001DE1E 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DE22 6700                       		beq.s	loc_1D052	; if not, branch
0001DE24 D481                       		add.l	d1,d2
0001DE26 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DE2C 6500                       		bcs.s	loc_1D052
0001DE2E 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DE34                            
0001DE34                            loc_1D052:
0001DE34 0804 0002                  		btst	#2,d4
0001DE38 6700                       		beq.s	loc_1D05E
0001DE3A 9681                       		sub.l	d1,d3
0001DE3C 6400                       		bcc.s	loc_1D05E
0001DE3E 7600                       		moveq	#0,d3
0001DE40                            
0001DE40                            loc_1D05E:
0001DE40 0804 0003                  		btst	#3,d4
0001DE44 6700                       		beq.s	loc_1D066
0001DE46 D681                       		add.l	d1,d3
0001DE48                            
0001DE48                            loc_1D066:
0001DE48 2142 000C                  		move.l	d2,$C(a0)
0001DE4C 2143 0008                  		move.l	d3,8(a0)
0001DE50                            
0001DE50                            Debug_BackItem:
0001DE50 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DE56 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DE58 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DE5E 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DE60 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DE64 6400                       		bcc.s	Debug_NoLoop
0001DE66 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DE6A 6000                       		bra.s	Debug_NoLoop
0001DE6C                            ; ===========================================================================
0001DE6C                            
0001DE6C                            Debug_NextItem:
0001DE6C 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DE72 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DE74 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DE78 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DE7C 6200                       		bhi.s	Debug_NoLoop
0001DE7E 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DE84                            
0001DE84                            Debug_NoLoop:
0001DE84 6000 0000                  		bra.w	Debug_ShowItem
0001DE88                            ; ===========================================================================
0001DE88                            
0001DE88                            Debug_MakeItem:
0001DE88 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DE8E 6700                       		beq.s	Debug_Exit	; if not, branch
0001DE90 4EB9 0000 E712             		jsr	SingleObjLoad
0001DE96 6600                       		bne.s	Debug_Exit
0001DE98 3368 0008 0008             		move.w	8(a0),8(a1)
0001DE9E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DEA4 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DEA8 1368 0001 0001             		move.b	1(a0),1(a1)
0001DEAE 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DEB4 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DEBA 7000                       		moveq	#0,d0
0001DEBC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DEC0 E748                       		lsl.w	#3,d0
0001DEC2 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DEC8 4E75                       		rts	
0001DECA                            ; ===========================================================================
0001DECA                            
0001DECA                            Debug_Exit:
0001DECA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DED0 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DED2 7000                       		moveq	#0,d0
0001DED4 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DED8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DEE0 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DEE6 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DEEA 3140 000A                  		move.w	d0,$A(a0)
0001DEEE 3140 000E                  		move.w	d0,$E(a0)
0001DEF2 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DEF8 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DEFE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DF04 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DF06 4278 F780                  		clr.w	($FFFFF780).w
0001DF0A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DF10 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DF18 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DF1E 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DF24 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DF2A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DF30                            
0001DF30                            Debug_DoNothing:
0001DF30 4E75                       		rts	
0001DF32                            ; End of function Debug_Control
0001DF32                            
0001DF32                            
0001DF32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF32                            
0001DF32                            
0001DF32                            Debug_ShowItem:				; XREF: Debug_Main
0001DF32 7000                       		moveq	#0,d0
0001DF34 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DF38 E748                       		lsl.w	#3,d0
0001DF3A 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DF40 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DF46 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DF4C 4E75                       		rts	
0001DF4E                            ; End of function Debug_ShowItem
0001DF4E                            
0001DF4E                            ; ===========================================================================
0001DF4E                            ; ---------------------------------------------------------------------------
0001DF4E                            ; Debug	list pointers
0001DF4E                            ; ---------------------------------------------------------------------------
0001DF4E                            DebugList:
0001DF4E                            	include "_inc\Debug list pointers.asm"
0001DF4E                            ; ---------------------------------------------------------------------------
0001DF4E                            ; Debug	list pointers
0001DF4E                            ; ---------------------------------------------------------------------------
0001DF4E 0000                       	dc.w Debug_GHZ-DebugList
0001DF50 0000                       	dc.w Debug_LZ-DebugList
0001DF52 0000                       	dc.w Debug_MZ-DebugList
0001DF54 0000                       	dc.w Debug_SLZ-DebugList
0001DF56 0000                       	dc.w Debug_SYZ-DebugList
0001DF58 0000                       	dc.w Debug_SBZ-DebugList
0001DF5A 0000                       	dc.w Debug_Ending-DebugList
0001DF5C 0000                       	dc.w Debug_GHZ-DebugList
0001DF5C 0000                       	dc.w Debug_GHZ-DebugList
0001DF5E                            
0001DF5E                            ; ---------------------------------------------------------------------------
0001DF5E                            ; Debug	list - Green Hill
0001DF5E                            ; ---------------------------------------------------------------------------
0001DF5E                            Debug_GHZ:
0001DF5E                            	include "_inc\Debug list - GHZ.asm"
0001DF5E                            ; ---------------------------------------------------------------------------
0001DF5E                            ; Debug	list - Green Hill
0001DF5E                            ; ---------------------------------------------------------------------------
0001DF5E 0010                       	dc.w $10			; number of items in list
0001DF60 2500 AA86                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DF64 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DF68 2600 B088                  	dc.l Map_obj26+$26000000
0001DF6C 0000 0680                  	dc.b 0,	0, 6, $80
0001DF70 1F00 A27C                  	dc.l Map_obj1F+$1F000000
0001DF74 0000 0400                  	dc.b 0,	0, 4, 0
0001DF78 2200 A538                  	dc.l Map_obj22+$22000000
0001DF7C 0000 0444                  	dc.b 0,	0, 4, $44
0001DF80 2B00 B6FA                  	dc.l Map_obj2B+$2B000000
0001DF84 0000 047B                  	dc.b 0,	0, 4, $7B
0001DF88 3600 DC2E                  	dc.l Map_obj36+$36000000
0001DF8C 0000 051B                  	dc.b 0,	0, 5, $1B
0001DF90 1800 8B9A                  	dc.l Map_obj18+$18000000
0001DF94 0000 4000                  	dc.b 0,	0, $40,	0
0001DF98 3B00 DD54                  	dc.l Map_obj3B+$3B000000
0001DF9C 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DFA0 4001 0420                  	dc.l Map_obj40+$40000000
0001DFA4 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DFA8 4100 E9A0                  	dc.l Map_obj41+$41000000
0001DFAC 0000 0523                  	dc.b 0,	0, 5, $23
0001DFB0 4200 EBC4                  	dc.l Map_obj42+$42000000
0001DFB4 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DFB8 4400 EED2                  	dc.l Map_obj44+$44000000
0001DFBC 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DFC0 1900 8C9A                  	dc.l Map_obj48+$19000000
0001DFC4 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DFC8 7901 7E30                  	dc.l Map_obj79+$79000000
0001DFCC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DFD0 4B00 AAC6                  	dc.l Map_obj4B+$4B000000
0001DFD4 0000 2400                  	dc.b 0,	0, $24,	0
0001DFD8 7D01 7F80                  	dc.l Map_obj7D+$7D000000
0001DFDC 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DFE0                            	even
0001DFE0                            	even
0001DFE0                            
0001DFE0                            ; ---------------------------------------------------------------------------
0001DFE0                            ; Debug	list - Labyrinth
0001DFE0                            ; ---------------------------------------------------------------------------
0001DFE0                            Debug_LZ:
0001DFE0                            	include "_inc\Debug list - LZ.asm"
0001DFE0                            ; ---------------------------------------------------------------------------
0001DFE0                            ; Debug	list - Labyrinth
0001DFE0                            ; ---------------------------------------------------------------------------
0001DFE0 0019                       	dc.w $19
0001DFE2 2500 AA86                  	dc.l Map_obj25+$25000000
0001DFE6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DFEA 2600 B088                  	dc.l Map_obj26+$26000000
0001DFEE 0000 0680                  	dc.b 0,	0, 6, $80
0001DFF2 4100 E9A0                  	dc.l Map_obj41+$41000000
0001DFF6 0000 0523                  	dc.b 0,	0, 5, $23
0001DFFA 2C00 B7AA                  	dc.l Map_obj2C+$2C000000
0001DFFE 0800 2486                  	dc.b 8,	0, $24,	$86
0001E002 2D00 B9A0                  	dc.l Map_obj2D+$2D000000
0001E006 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001E00A 1601 2BCE                  	dc.l Map_obj16+$16000000
0001E00E 0000 03CC                  	dc.b 0,	0, 3, $CC
0001E012 1601 2BCE                  	dc.l Map_obj16+$16000000
0001E016 0203 03CC                  	dc.b 2,	3, 3, $CC
0001E01A 3300 CE56                  	dc.l Map_obj33+$33000000
0001E01E 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E022 3200 CA18                  	dc.l Map_obj32+$32000000
0001E026 0000 0513                  	dc.b 0,	0, 5, $13
0001E02A 3600 DC2E                  	dc.l Map_obj36+$36000000
0001E02E 0000 051B                  	dc.b 0,	0, 5, $1B
0001E032 5201 0D12                  	dc.l Map_obj52a+$52000000
0001E036 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001E03A 6101 2DF2                  	dc.l Map_obj61+$61000000
0001E03E 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001E042 6101 2DF2                  	dc.l Map_obj61+$61000000
0001E046 1301 43E6                  	dc.b $13, 1, $43, $E6
0001E04A 6101 2DF2                  	dc.l Map_obj61+$61000000
0001E04E 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001E052 6201 2F46                  	dc.l Map_obj62+$62000000
0001E056 0000 443E                  	dc.b 0,	0, $44,	$3E
0001E05A 6101 2DF2                  	dc.l Map_obj61+$61000000
0001E05E 2702 43E6                  	dc.b $27, 2, $43, $E6
0001E062 6101 2DF2                  	dc.l Map_obj61+$61000000
0001E066 3003 43E6                  	dc.b $30, 3, $43, $E6
0001E06A 6301 32A4                  	dc.l Map_obj63+$63000000
0001E06E 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001E072 6001 2B18                  	dc.l Map_obj60+$60000000
0001E076 0000 0467                  	dc.b 0,	0, 4, $67
0001E07A 6401 35EA                  	dc.l Map_obj64+$64000000
0001E07E 8413 8348                  	dc.b $84, $13, $83, $48
0001E082 6501 3772                  	dc.l Map_obj65+$65000000
0001E086 0202 C259                  	dc.b 2,	2, $C2,	$59
0001E08A 6501 3772                  	dc.l Map_obj65+$65000000
0001E08E 0909 C259                  	dc.b 9,	9, $C2,	$59
0001E092 0B01 1F70                  	dc.l Map_obj0B+$B000000
0001E096 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E09A 0C01 2040                  	dc.l Map_obj0C+$C000000
0001E09E 0200 4328                  	dc.b 2,	0, $43,	$28
0001E0A2 7901 7E30                  	dc.l Map_obj79+$79000000
0001E0A6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E0AA                            	even
0001E0AA                            	even
0001E0AA                            
0001E0AA                            ; ---------------------------------------------------------------------------
0001E0AA                            ; Debug	list - Marble
0001E0AA                            ; ---------------------------------------------------------------------------
0001E0AA                            Debug_MZ:
0001E0AA                            	include "_inc\Debug list - MZ.asm"
0001E0AA                            ; ---------------------------------------------------------------------------
0001E0AA                            ; Debug	list - Marble
0001E0AA                            ; ---------------------------------------------------------------------------
0001E0AA 0012                       	dc.w $12
0001E0AC 2500 AA86                  	dc.l Map_obj25+$25000000
0001E0B0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E0B4 2600 B088                  	dc.l Map_obj26+$26000000
0001E0B8 0000 0680                  	dc.b 0,	0, 6, $80
0001E0BC 2200 A538                  	dc.l Map_obj22+$22000000
0001E0C0 0000 0444                  	dc.b 0,	0, 4, $44
0001E0C4 3600 DC2E                  	dc.l Map_obj36+$36000000
0001E0C8 0000 051B                  	dc.b 0,	0, 5, $1B
0001E0CC 4100 E9A0                  	dc.l Map_obj41+$41000000
0001E0D0 0000 0523                  	dc.b 0,	0, 5, $23
0001E0D4 1300 BEE2                  	dc.l Map_obj14+$13000000
0001E0D8 0000 0345                  	dc.b 0,	0, 3, $45
0001E0DC 4600 F580                  	dc.l Map_obj46+$46000000
0001E0E0 0000 4000                  	dc.b 0,	0, $40,	0
0001E0E4 4C00 FECC                  	dc.l Map_obj4C+$4C000000
0001E0E8 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E0EC 4E01 01B0                  	dc.l Map_obj4E+$4E000000
0001E0F0 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E0F4 3300 CE56                  	dc.l Map_obj33+$33000000
0001E0F8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E0FC 5001 05AE                  	dc.l Map_obj50+$50000000
0001E100 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E104 5101 0A4A                  	dc.l Map_obj51+$51000000
0001E108 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E10C 5201 0CBC                  	dc.l Map_obj52+$52000000
0001E110 0000 02B8                  	dc.b 0,	0, 2, $B8
0001E114 5300 9232                  	dc.l Map_obj53+$53000000
0001E118 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001E11C 5400 FE92                  	dc.l Map_obj54+$54000000
0001E120 0000 8680                  	dc.b 0,	0, $86,	$80
0001E124 5501 0E96                  	dc.l Map_obj55+$55000000
0001E128 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E12C 7801 7AAA                  	dc.l Map_obj78+$78000000
0001E130 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E134 7901 7E30                  	dc.l Map_obj79+$79000000
0001E138 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E13C                            	even
0001E13C                            	even
0001E13C                            
0001E13C                            ; ---------------------------------------------------------------------------
0001E13C                            ; Debug	list - Star Light
0001E13C                            ; ---------------------------------------------------------------------------
0001E13C                            Debug_SLZ:
0001E13C                            	include "_inc\Debug list - SLZ.asm"
0001E13C                            ; ---------------------------------------------------------------------------
0001E13C                            ; Debug	list - Star Light
0001E13C                            ; ---------------------------------------------------------------------------
0001E13C 000F                       	dc.w $F
0001E13E 2500 AA86                  	dc.l Map_obj25+$25000000
0001E142 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E146 2600 B088                  	dc.l Map_obj26+$26000000
0001E14A 0000 0680                  	dc.b 0,	0, 6, $80
0001E14E 5901 1998                  	dc.l Map_obj59+$59000000
0001E152 0000 4000                  	dc.b 0,	0, $40,	0
0001E156 5300 9232                  	dc.l Map_obj53+$53000000
0001E15A 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001E15E 1800 8BF8                  	dc.l Map_obj18b+$18000000
0001E162 0000 4000                  	dc.b 0,	0, $40,	0
0001E166 5A01 1AD2                  	dc.l Map_obj5A+$5A000000
0001E16A 0000 4000                  	dc.b 0,	0, $40,	0
0001E16E 5B01 1C8A                  	dc.l Map_obj5B+$5B000000
0001E172 0000 4000                  	dc.b 0,	0, $40,	0
0001E176 5D01 225A                  	dc.l Map_obj5D+$5D000000
0001E17A 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001E17E 5E01 25EC                  	dc.l Map_obj5E+$5E000000
0001E182 0000 0374                  	dc.b 0,	0, 3, $74
0001E186 4100 E9A0                  	dc.l Map_obj41+$41000000
0001E18A 0000 0523                  	dc.b 0,	0, 5, $23
0001E18E 1300 BEE2                  	dc.l Map_obj14+$13000000
0001E192 0000 0480                  	dc.b 0,	0, 4, $80
0001E196 1C00 9342                  	dc.l Map_obj1C+$1C000000
0001E19A 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001E19E 5F01 2862                  	dc.l Map_obj5F+$5F000000
0001E1A2 0000 0400                  	dc.b 0,	0, 4, 0
0001E1A6 6001 2B18                  	dc.l Map_obj60+$60000000
0001E1AA 0000 2429                  	dc.b 0,	0, $24,	$29
0001E1AE 7901 7E30                  	dc.l Map_obj79+$79000000
0001E1B2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E1B6                            	even
0001E1B6                            	even
0001E1B6                            
0001E1B6                            ; ---------------------------------------------------------------------------
0001E1B6                            ; Debug	list - Spring Yard
0001E1B6                            ; ---------------------------------------------------------------------------
0001E1B6                            Debug_SYZ:
0001E1B6                            	include "_inc\Debug list - SYZ.asm"
0001E1B6                            ; ---------------------------------------------------------------------------
0001E1B6                            ; Debug	list - Spring Yard
0001E1B6                            ; ---------------------------------------------------------------------------
0001E1B6 000F                       	dc.w $F
0001E1B8 2500 AA86                  	dc.l Map_obj25+$25000000
0001E1BC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E1C0 2600 B088                  	dc.l Map_obj26+$26000000
0001E1C4 0000 0680                  	dc.b 0,	0, 6, $80
0001E1C8 3600 DC2E                  	dc.l Map_obj36+$36000000
0001E1CC 0000 051B                  	dc.b 0,	0, 5, $1B
0001E1D0 4100 E9A0                  	dc.l Map_obj41+$41000000
0001E1D4 0000 0523                  	dc.b 0,	0, 5, $23
0001E1D8 4300 EE24                  	dc.l Map_obj43+$43000000
0001E1DC 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E1E0 1200 F5FE                  	dc.l Map_obj12+$12000000
0001E1E4 0000 0000                  	dc.b 0,	0, 0, 0
0001E1E8 4700 F77A                  	dc.l Map_obj47+$47000000
0001E1EC 0000 0380                  	dc.b 0,	0, 3, $80
0001E1F0 1F00 A27C                  	dc.l Map_obj1F+$1F000000
0001E1F4 0000 0400                  	dc.b 0,	0, 4, 0
0001E1F8 2200 A538                  	dc.l Map_obj22+$22000000
0001E1FC 0000 0444                  	dc.b 0,	0, 4, $44
0001E200 5001 05AE                  	dc.l Map_obj50+$50000000
0001E204 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E208 1800 8BE6                  	dc.l Map_obj18a+$18000000
0001E20C 0000 4000                  	dc.b 0,	0, $40,	0
0001E210 5601 1358                  	dc.l Map_obj56+$56000000
0001E214 0000 4000                  	dc.b 0,	0, $40,	0
0001E218 3200 CA18                  	dc.l Map_obj32+$32000000
0001E21C 0000 0513                  	dc.b 0,	0, 5, $13
0001E220 7801 7AAA                  	dc.l Map_obj78+$78000000
0001E224 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E228 7901 7E30                  	dc.l Map_obj79+$79000000
0001E22C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E230                            	even
0001E230                            	even
0001E230                            
0001E230                            ; ---------------------------------------------------------------------------
0001E230                            ; Debug	list - Scrap Brain
0001E230                            ; ---------------------------------------------------------------------------
0001E230                            Debug_SBZ:
0001E230                            	include "_inc\Debug list - SBZ.asm"
0001E230                            ; ---------------------------------------------------------------------------
0001E230                            ; Debug	list - Scrap Brain
0001E230                            ; ---------------------------------------------------------------------------
0001E230 001D                       	dc.w $1D
0001E232 2500 AA86                  	dc.l Map_obj25+$25000000
0001E236 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E23A 2600 B088                  	dc.l Map_obj26+$26000000
0001E23E 0000 0680                  	dc.b 0,	0, 6, $80
0001E242 5F01 2862                  	dc.l Map_obj5F+$5F000000
0001E246 0000 0400                  	dc.b 0,	0, 4, 0
0001E24A 6001 2B18                  	dc.l Map_obj60+$60000000
0001E24E 0000 0429                  	dc.b 0,	0, 4, $29
0001E252 7801 7AAA                  	dc.l Map_obj78+$78000000
0001E256 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E25A 1501 16F4                  	dc.l Map_obj15b+$15000000
0001E25E 0702 4391                  	dc.b 7,	2, $43,	$91
0001E262 6701 63C2                  	dc.l Map_obj67+$67000000
0001E266 E000 C344                  	dc.b $E0, 0, $C3, $44
0001E26A 5201 0CBC                  	dc.l Map_obj52+$52000000
0001E26E 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E272 3200 CA18                  	dc.l Map_obj32+$32000000
0001E276 0000 0513                  	dc.b 0,	0, 5, $13
0001E27A 6901 661C                  	dc.l Map_obj69+$69000000
0001E27E 0300 4492                  	dc.b 3,	0, $44,	$92
0001E282 6901 6676                  	dc.l Map_obj69a+$69000000
0001E286 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E28A 6A01 68D4                  	dc.l Map_obj6A+$6A000000
0001E28E 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E292 5300 9232                  	dc.l Map_obj53+$53000000
0001E296 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E29A 5201 0CBC                  	dc.l Map_obj52+$52000000
0001E29E 3903 4460                  	dc.b $39, 3, $44, $60
0001E2A2 6B01 6CA4                  	dc.l Map_obj6B+$6B000000
0001E2A6 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E2AA 2A00 94D8                  	dc.l Map_obj2A+$2A000000
0001E2AE 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E2B2 6B01 6CA4                  	dc.l Map_obj6B+$6B000000
0001E2B6 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E2BA 6A01 68D4                  	dc.l Map_obj6A+$6A000000
0001E2BE 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E2C2 6B01 6CA4                  	dc.l Map_obj6B+$6B000000
0001E2C6 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E2CA 6A01 68D4                  	dc.l Map_obj6A+$6A000000
0001E2CE 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E2D2 6B01 6CA4                  	dc.l Map_obj6B+$6B000000
0001E2D6 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E2DA 6C01 6E66                  	dc.l Map_obj6C+$6C000000
0001E2DE 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E2E2 6D00 F274                  	dc.l Map_obj6D+$6D000000
0001E2E6 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E2EA 6D00 F274                  	dc.l Map_obj6D+$6D000000
0001E2EE 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E2F2 6E01 6F1C                  	dc.l Map_obj6E+$6E000000
0001E2F6 0400 047E                  	dc.b 4,	0, 4, $7E
0001E2FA 7001 736E                  	dc.l Map_obj70+$70000000
0001E2FE 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E302 7101 2100                  	dc.l Map_obj71+$71000000
0001E306 1100 8680                  	dc.b $11, 0, $86, $80
0001E30A 1E00 9990                  	dc.l Map_obj1E+$1E000000
0001E30E 0400 2302                  	dc.b 4,	0, $23,	2
0001E312 7901 7E30                  	dc.l Map_obj79+$79000000
0001E316 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E31A                            	even
0001E31A                            	even
0001E31A                            
0001E31A                            ; ---------------------------------------------------------------------------
0001E31A                            ; Debug	list - ending sequence / special stage
0001E31A                            ; ---------------------------------------------------------------------------
0001E31A                            Debug_Ending:
0001E31A                            	include "_inc\Debug list - Ending and SS.asm"
0001E31A                            ; ---------------------------------------------------------------------------
0001E31A                            ; Debug	list - ending sequence / special stage
0001E31A                            ; ---------------------------------------------------------------------------
0001E31A 000D                       	dc.w $D
0001E31C 2500 AA86                  	dc.l Map_obj25+$25000000
0001E320 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E324 4700 F77A                  	dc.l Map_obj47+$47000000
0001E328 0000 0380                  	dc.b 0,	0, 3, $80
0001E32C 2800 9FAE                  	dc.l Map_obj28a+$28000000
0001E330 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E334 2800 9FAE                  	dc.l Map_obj28a+$28000000
0001E338 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E33C 2800 9FAE                  	dc.l Map_obj28a+$28000000
0001E340 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E344 2800 9F96                  	dc.l Map_obj28+$28000000
0001E348 0D00 0553                  	dc.b $D, 0, 5, $53
0001E34C 2800 9F96                  	dc.l Map_obj28+$28000000
0001E350 0E00 0553                  	dc.b $E, 0, 5, $53
0001E354 2800 9F96                  	dc.l Map_obj28+$28000000
0001E358 0F00 0573                  	dc.b $F, 0, 5, $73
0001E35C 2800 9F96                  	dc.l Map_obj28+$28000000
0001E360 1000 0573                  	dc.b $10, 0, 5,	$73
0001E364 2800 9FAE                  	dc.l Map_obj28a+$28000000
0001E368 1100 0585                  	dc.b $11, 0, 5,	$85
0001E36C 2800 9FC6                  	dc.l Map_obj28b+$28000000
0001E370 1200 0593                  	dc.b $12, 0, 5,	$93
0001E374 2800 9FAE                  	dc.l Map_obj28a+$28000000
0001E378 1300 0565                  	dc.b $13, 0, 5,	$65
0001E37C 2800 9FC6                  	dc.l Map_obj28b+$28000000
0001E380 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E384                            	even
0001E384                            	even
0001E384                            
0001E384                            ; ---------------------------------------------------------------------------
0001E384                            ; Main level load blocks
0001E384                            ; ---------------------------------------------------------------------------
0001E384                            MainLoadBlocks:
0001E384                            	include "_inc\Main level load blocks.asm"
0001E384                            ; ---------------------------------------------------------------------------
0001E384                            ; Main level load blocks
0001E384                            ;
0001E384                            ; ===FORMAT===
0001E384                            ; level	patterns + (1st	PLC num	* 10^6)
0001E384                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E384                            ; 256x256 mappings
0001E384                            ; blank, music (unused), pal index (unused), pal index
0001E384                            ; ---------------------------------------------------------------------------
0001E384 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001E388 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001E38C 0000 0000                  	dc.l Blk256_GHZ
0001E390 0081 0404                  	dc.b 0,	$81, 4,	4
0001E394 0000 0000                  	dc.l Nem_LZ|6<<24
0001E398 0000 0000                  	dc.l Blk16_LZ|7<<24
0001E39C 0000 0000                  	dc.l Blk256_LZ
0001E3A0 0082 0505                  	dc.b 0,	$82, 5,	5
0001E3A4 0000 0000                  	dc.l Nem_MZ|8<<24
0001E3A8 0000 0000                  	dc.l Blk16_MZ|9<<24
0001E3AC 0000 0000                  	dc.l Blk256_MZ
0001E3B0 0083 0606                  	dc.b 0,	$83, 6,	6
0001E3B4 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001E3B8 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001E3BC 0000 0000                  	dc.l Blk256_SLZ
0001E3C0 0084 0707                  	dc.b 0,	$84, 7,	7
0001E3C4 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001E3C8 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001E3CC 0000 0000                  	dc.l Blk256_SYZ
0001E3D0 0085 0808                  	dc.b 0,	$85, 8,	8
0001E3D4 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001E3D8 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001E3DC 0000 0000                  	dc.l Blk256_SBZ
0001E3E0 0086 0909                  	dc.b 0,	$86, 9,	9
0001E3E4 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E3E8 0000 0000                  	dc.l Blk16_GHZ
0001E3EC 0000 0000                  	dc.l Blk256_GHZ
0001E3F0 0086 1313                  	dc.b 0,	$86, $13, $13
0001E3F4                            ; there you go lol
0001E3F4 0000 0000                  	dc.l Nem_BHZ_2nd|$20<<24 ; MAKOTO ZONE
0001E3F8 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001E3FC 0000 0000                  	dc.l Blk256_BHZ
0001E400 009E 1515                  	dc.b 0,	$9E, $15, $15
0001E404                            	even
0001E404                            	even
0001E404                            
0001E404                            ; ---------------------------------------------------------------------------
0001E404                            ; Pattern load cues
0001E404                            ; ---------------------------------------------------------------------------
0001E404                            ArtLoadCues:
0001E404                            	include "_inc\Pattern load cues.asm"
0001E404                            ; ---------------------------------------------------------------------------
0001E404                            ; Pattern load cues - index
0001E404                            ; ---------------------------------------------------------------------------
0001E404 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001E408 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001E40C 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001E410 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E414 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E418 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E41C 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E420 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E424 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001E428 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E42C 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E430 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E434 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E438 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E43C 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E440 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E444                            
0001E444 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001E448 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E44A                            ; ---------------------------------------------------------------------------
0001E44A                            ; Pattern load cues - standard block 1
0001E44A                            ; ---------------------------------------------------------------------------
0001E44A 0004                       PLC_Main:	dc.w 4
0001E44C 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E450 F400                       		dc.w $F400
0001E452 0000 0000                  		dc.l Nem_Hud		; HUD
0001E456 D940                       		dc.w $D940
0001E458 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E45C FA80                       		dc.w $FA80
0001E45E 0000 0000                  		dc.l Nem_Ring		; rings
0001E462 F640                       		dc.w $F640
0001E464 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E468 F2E0                       		dc.w $F2E0
0001E46A                            ; ---------------------------------------------------------------------------
0001E46A                            ; Pattern load cues - standard block 2
0001E46A                            ; ---------------------------------------------------------------------------
0001E46A 0002                       PLC_Main2:	dc.w 2
0001E46C 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E470 D000                       		dc.w $D000
0001E472 0000 0000                  		dc.l Nem_Shield		; shield
0001E476 A820                       		dc.w $A820
0001E478 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E47C AB80                       		dc.w $AB80
0001E47E                            ; ---------------------------------------------------------------------------
0001E47E                            ; Pattern load cues - explosion
0001E47E                            ; ---------------------------------------------------------------------------
0001E47E 0000                       PLC_Explode:	dc.w 0
0001E480 0000 0000                  		dc.l Nem_Explode	; explosion
0001E484 B400                       		dc.w $B400
0001E486                            ; ---------------------------------------------------------------------------
0001E486                            ; Pattern load cues - game/time	over
0001E486                            ; ---------------------------------------------------------------------------
0001E486 0000                       PLC_GameOver:	dc.w 0
0001E488 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E48C ABC0                       		dc.w $ABC0
0001E48E                            ; ---------------------------------------------------------------------------
0001E48E                            ; Pattern load cues - Green Hill
0001E48E                            ; ---------------------------------------------------------------------------
0001E48E 000B                       PLC_GHZ:	dc.w $B
0001E490 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E494 0000                       		dc.w 0
0001E496 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E49A 39A0                       		dc.w $39A0
0001E49C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E4A0 6B00                       		dc.w $6B00
0001E4A2 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E4A6 7A00                       		dc.w $7A00
0001E4A8 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E4AC 8000                       		dc.w $8000
0001E4AE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E4B2 8880                       		dc.w $8880
0001E4B4 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E4B8 8F60                       		dc.w $8F60
0001E4BA 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E4BE 9360                       		dc.w $9360
0001E4C0 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E4C4 9E00                       		dc.w $9E00
0001E4C6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E4CA A360                       		dc.w $A360
0001E4CC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E4D0 A460                       		dc.w $A460
0001E4D2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E4D6 A660                       		dc.w $A660
0001E4D8 0005                       PLC_GHZ2:	dc.w 5
0001E4DA 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E4DE 7000                       		dc.w $7000
0001E4E0 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E4E4 71C0                       		dc.w $71C0
0001E4E6 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E4EA 7300                       		dc.w $7300
0001E4EC 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E4F0 7540                       		dc.w $7540
0001E4F2 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E4F6 A1E0                       		dc.w $A1E0
0001E4F8 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E4FC 6980                       		dc.w $6980
0001E4FE                            ; ---------------------------------------------------------------------------
0001E4FE                            ; Pattern load cues - Labyrinth
0001E4FE                            ; ---------------------------------------------------------------------------
0001E4FE 000B                       PLC_LZ:		dc.w $B
0001E500 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E504 0000                       		dc.w 0
0001E506 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E50A 3C00                       		dc.w $3C00
0001E50C 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E510 3E00                       		dc.w $3E00
0001E512 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E516 4B20                       		dc.w $4B20
0001E518 0000 0000                  		dc.l Nem_Water		; water	surface
0001E51C 6000                       		dc.w $6000
0001E51E 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E522 6200                       		dc.w $6200
0001E524 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E528 6500                       		dc.w $6500
0001E52A 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E52E 6900                       		dc.w $6900
0001E530 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E534 7780                       		dc.w $7780
0001E536 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E53A 7880                       		dc.w $7880
0001E53C 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E540 7980                       		dc.w $7980
0001E542 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E546 94C0                       		dc.w $94C0
0001E548 000C                       PLC_LZ2:	dc.w $C
0001E54A 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E54E 7BC0                       		dc.w $7BC0
0001E550 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E554 7CC0                       		dc.w $7CC0
0001E556 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E55A 7EC0                       		dc.w $7EC0
0001E55C 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E560 5D20                       		dc.w $5D20
0001E562 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E566 8800                       		dc.w $8800
0001E568 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E56C 89E0                       		dc.w $89E0
0001E56E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E572 8CE0                       		dc.w $8CE0
0001E574 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E578 90C0                       		dc.w $90C0
0001E57A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E57E A1E0                       		dc.w $A1E0
0001E580 0000 0000                  		dc.l Nem_Cork		; cork block
0001E584 A000                       		dc.w $A000
0001E586 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E58A A360                       		dc.w $A360
0001E58C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E590 A460                       		dc.w $A460
0001E592 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E596 A660                       		dc.w $A660
0001E598                            ; ---------------------------------------------------------------------------
0001E598                            ; Pattern load cues - Marble
0001E598                            ; ---------------------------------------------------------------------------
0001E598 0009                       PLC_MZ:		dc.w 9
0001E59A 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E59E 0000                       		dc.w 0
0001E5A0 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E5A4 6000                       		dc.w $6000
0001E5A6 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E5AA 68A0                       		dc.w $68A0
0001E5AC 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E5B0 7000                       		dc.w $7000
0001E5B2 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E5B6 71C0                       		dc.w $71C0
0001E5B8 0000 0000                  		dc.l Nem_Lava		; lava
0001E5BC 7500                       		dc.w $7500
0001E5BE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E5C2 8880                       		dc.w $8880
0001E5C4 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E5C8 8F60                       		dc.w $8F60
0001E5CA 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E5CE 9700                       		dc.w $9700
0001E5D0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E5D4 9FE0                       		dc.w $9FE0
0001E5D6 0004                       PLC_MZ2:	dc.w 4
0001E5D8 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E5DC A260                       		dc.w $A260
0001E5DE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E5E2 A360                       		dc.w $A360
0001E5E4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E5E8 A460                       		dc.w $A460
0001E5EA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E5EE A660                       		dc.w $A660
0001E5F0 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E5F4 5700                       		dc.w $5700
0001E5F6                            ; ---------------------------------------------------------------------------
0001E5F6                            ; Pattern load cues - Star Light
0001E5F6                            ; ---------------------------------------------------------------------------
0001E5F6 0008                       PLC_SLZ:	dc.w 8
0001E5F8 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E5FC 0000                       		dc.w 0
0001E5FE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E602 8000                       		dc.w $8000
0001E604 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E608 8520                       		dc.w $8520
0001E60A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E60E 9000                       		dc.w $9000
0001E610 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E614 9C00                       		dc.w $9C00
0001E616 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E61A A260                       		dc.w $A260
0001E61C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E620 A360                       		dc.w $A360
0001E622 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E626 A460                       		dc.w $A460
0001E628 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E62C A660                       		dc.w $A660
0001E62E 0005                       PLC_SLZ2:	dc.w 5
0001E630 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E634 6E80                       		dc.w $6E80
0001E636 0000 0000                  		dc.l Nem_Fan		; fan
0001E63A 7400                       		dc.w $7400
0001E63C 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E640 7980                       		dc.w $7980
0001E642 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E646 7B80                       		dc.w $7B80
0001E648 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E64C 9B00                       		dc.w $9B00
0001E64E 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E652 9E00                       		dc.w $9E00
0001E654                            ; ---------------------------------------------------------------------------
0001E654                            ; Pattern load cues - Spring Yard
0001E654                            ; ---------------------------------------------------------------------------
0001E654 0004                       PLC_SYZ:	dc.w 4
0001E656 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E65A 0000                       		dc.w 0
0001E65C 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E660 8000                       		dc.w $8000
0001E662 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E666 8880                       		dc.w $8880
0001E668 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E66C 8F60                       		dc.w $8F60
0001E66E 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E672 9700                       		dc.w $9700
0001E674 0007                       PLC_SYZ2:	dc.w 7
0001E676 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E67A 7000                       		dc.w $7000
0001E67C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E680 72C0                       		dc.w $72C0
0001E682 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E686 7740                       		dc.w $7740
0001E688 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E68C 9FE0                       		dc.w $9FE0
0001E68E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E692 A1E0                       		dc.w $A1E0
0001E694 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E698 A360                       		dc.w $A360
0001E69A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E69E A460                       		dc.w $A460
0001E6A0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E6A4 A660                       		dc.w $A660
0001E6A6                            ; ---------------------------------------------------------------------------
0001E6A6                            ; Pattern load cues - Scrap Brain
0001E6A6                            ; ---------------------------------------------------------------------------
0001E6A6 000B                       PLC_SBZ:	dc.w $B
0001E6A8 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E6AC 0000                       		dc.w 0
0001E6AE 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E6B2 5800                       		dc.w $5800
0001E6B4 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E6B8 5D00                       		dc.w $5D00
0001E6BA 0000 0000                  		dc.l Nem_Girder		; girder
0001E6BE 5E00                       		dc.w $5E00
0001E6C0 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E6C4 6040                       		dc.w $6040
0001E6C6 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E6CA 6880                       		dc.w $6880
0001E6CC 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E6D0 6900                       		dc.w $6900
0001E6D2 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E6D6 7220                       		dc.w $7220
0001E6D8 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E6DC 76A0                       		dc.w $76A0
0001E6DE 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E6E2 7B20                       		dc.w $7B20
0001E6E4 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E6E8 7EA0                       		dc.w $7EA0
0001E6EA 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E6EE 9860                       		dc.w $9860
0001E6F0 000C                       PLC_SBZ2:	dc.w $C
0001E6F2 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E6F6 5600                       		dc.w $5600
0001E6F8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E6FC 8000                       		dc.w $8000
0001E6FE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E702 8520                       		dc.w $8520
0001E704 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E708 8C00                       		dc.w $8C00
0001E70A 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E70E 8DE0                       		dc.w $8DE0
0001E710 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E714 8FC0                       		dc.w $8FC0
0001E716 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E71A 9240                       		dc.w $9240
0001E71C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E720 7F20                       		dc.w $7F20
0001E722 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E726 9BE0                       		dc.w $9BE0
0001E728 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E72C A1E0                       		dc.w $A1E0
0001E72E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E732 A360                       		dc.w $A360
0001E734 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E738 A460                       		dc.w $A460
0001E73A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E73E A660                       		dc.w $A660
0001E740                            ; ---------------------------------------------------------------------------
0001E740                            ; Pattern load cues - DR. Breen Hill
0001E740                            ; ---------------------------------------------------------------------------
0001E740 000B                       PLC_BHZ:	dc.w $B
0001E742 0000 0000                  		dc.l Nem_BHZ_1st	; GHZ main patterns
0001E746 0000                       		dc.w 0
0001E748 0000 0000                  		dc.l Nem_BHZ_2nd	; GHZ secondary	patterns
0001E74C 39A0                       		dc.w $39A0
0001E74E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E752 6B00                       		dc.w $6B00
0001E754 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E758 7A00                       		dc.w $7A00
0001E75A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E75E 8000                       		dc.w $8000
0001E760 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E764 8880                       		dc.w $8880
0001E766 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E76A 8F60                       		dc.w $8F60
0001E76C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E770 9360                       		dc.w $9360
0001E772 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E776 9E00                       		dc.w $9E00
0001E778 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E77C A360                       		dc.w $A360
0001E77E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E782 A460                       		dc.w $A460
0001E784 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E788 A660                       		dc.w $A660
0001E78A 0005                       PLC_BHZ2:	dc.w 5
0001E78C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E790 7000                       		dc.w $7000
0001E792 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E796 71C0                       		dc.w $71C0
0001E798 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E79C 7300                       		dc.w $7300
0001E79E 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E7A2 7540                       		dc.w $7540
0001E7A4 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E7A8 A1E0                       		dc.w $A1E0
0001E7AA 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E7AE 6980                       		dc.w $6980
0001E7B0                            ; ---------------------------------------------------------------------------
0001E7B0                            ; Pattern load cues - title card
0001E7B0                            ; ---------------------------------------------------------------------------
0001E7B0 0000                       PLC_TitleCard:	dc.w 0
0001E7B2 0000 0000                  		dc.l Nem_TitleCard
0001E7B6 B000                       		dc.w $B000
0001E7B8                            ; ---------------------------------------------------------------------------
0001E7B8                            ; Pattern load cues - act 3 boss
0001E7B8                            ; ---------------------------------------------------------------------------
0001E7B8 0005                       PLC_Boss:	dc.w 5
0001E7BA 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E7BE 8000                       		dc.w $8000
0001E7C0 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E7C4 8D80                       		dc.w $8D80
0001E7C6 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E7CA 93A0                       		dc.w $93A0
0001E7CC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E7D0 A300                       		dc.w $A300
0001E7D2 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E7D6 A300                       		dc.w $A300
0001E7D8 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E7DC A540                       		dc.w $A540
0001E7DE                            ; ---------------------------------------------------------------------------
0001E7DE                            ; Pattern load cues - act 1/2 signpost
0001E7DE                            ; ---------------------------------------------------------------------------
0001E7DE 0002                       PLC_Signpost:	dc.w 2
0001E7E0 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E7E4 D000                       		dc.w $D000
0001E7E6 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E7EA 96C0                       		dc.w $96C0
0001E7EC 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E7F0 8C40                       		dc.w $8C40
0001E7F2                            ; ---------------------------------------------------------------------------
0001E7F2                            ; Pattern load cues - beta special stage warp effect
0001E7F2                            ; ---------------------------------------------------------------------------
0001E7F2 0000                       PLC_Warp:	dc.w 0
0001E7F4 0000 0000                  		dc.l Nem_Warp
0001E7F8 A820                       		dc.w $A820
0001E7FA                            ; ---------------------------------------------------------------------------
0001E7FA                            ; Pattern load cues - special stage
0001E7FA                            ; ---------------------------------------------------------------------------
0001E7FA 0010                       PLC_SpeStage:	dc.w $10
0001E7FC 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E800 0000                       		dc.w 0
0001E802 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E806 0A20                       		dc.w $A20
0001E808 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E80C 2840                       		dc.w $2840
0001E80E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E812 4760                       		dc.w $4760
0001E814 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E818 4A20                       		dc.w $4A20
0001E81A 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E81E 4C60                       		dc.w $4C60
0001E820 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E824 5E00                       		dc.w $5E00
0001E826 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E82A 6E00                       		dc.w $6E00
0001E82C 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E830 7E00                       		dc.w $7E00
0001E832 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E836 8E00                       		dc.w $8E00
0001E838 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E83C 9E00                       		dc.w $9E00
0001E83E 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E842 AE00                       		dc.w $AE00
0001E844 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E848 BE00                       		dc.w $BE00
0001E84A 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E84E EE00                       		dc.w $EE00
0001E850 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E854 F2E0                       		dc.w $F2E0
0001E856 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E85A F400                       		dc.w $F400
0001E85C 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E860 F520                       		dc.w $F520
0001E862 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E866 F2E0                       		dc.w $F2E0
0001E868 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E86C F400                       		dc.w $F400
0001E86E 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E872 F520                       		dc.w $F520
0001E874                            ; ---------------------------------------------------------------------------
0001E874                            ; Pattern load cues - GHZ animals
0001E874                            ; ---------------------------------------------------------------------------
0001E874 0001                       PLC_GHZAnimals:	dc.w 1
0001E876 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E87A B000                       		dc.w $B000
0001E87C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E880 B240                       		dc.w $B240
0001E882                            ; ---------------------------------------------------------------------------
0001E882                            ; Pattern load cues - LZ animals
0001E882                            ; ---------------------------------------------------------------------------
0001E882 0001                       PLC_LZAnimals:	dc.w 1
0001E884 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E888 B000                       		dc.w $B000
0001E88A 0000 0000                  		dc.l Nem_Seal		; seal
0001E88E B240                       		dc.w $B240
0001E890                            ; ---------------------------------------------------------------------------
0001E890                            ; Pattern load cues - MZ animals
0001E890                            ; ---------------------------------------------------------------------------
0001E890 0001                       PLC_MZAnimals:	dc.w 1
0001E892 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E896 B000                       		dc.w $B000
0001E898 0000 0000                  		dc.l Nem_Seal		; seal
0001E89C B240                       		dc.w $B240
0001E89E                            ; ---------------------------------------------------------------------------
0001E89E                            ; Pattern load cues - SLZ animals
0001E89E                            ; ---------------------------------------------------------------------------
0001E89E 0001                       PLC_SLZAnimals:	dc.w 1
0001E8A0 0000 0000                  		dc.l Nem_Pig		; pig
0001E8A4 B000                       		dc.w $B000
0001E8A6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E8AA B240                       		dc.w $B240
0001E8AC                            ; ---------------------------------------------------------------------------
0001E8AC                            ; Pattern load cues - SYZ animals
0001E8AC                            ; ---------------------------------------------------------------------------
0001E8AC 0001                       PLC_SYZAnimals:	dc.w 1
0001E8AE 0000 0000                  		dc.l Nem_Pig		; pig
0001E8B2 B000                       		dc.w $B000
0001E8B4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E8B8 B240                       		dc.w $B240
0001E8BA                            ; ---------------------------------------------------------------------------
0001E8BA                            ; Pattern load cues - SBZ animals
0001E8BA                            ; ---------------------------------------------------------------------------
0001E8BA 0001                       PLC_SBZAnimals:	dc.w 1
0001E8BC 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E8C0 B000                       		dc.w $B000
0001E8C2 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E8C6 B240                       		dc.w $B240
0001E8C8                            ; ---------------------------------------------------------------------------
0001E8C8                            ; Pattern load cues - special stage results screen
0001E8C8                            ; ---------------------------------------------------------------------------
0001E8C8 0001                       PLC_SpeStResult:dc.w 1
0001E8CA 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E8CE A820                       		dc.w $A820
0001E8D0 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E8D4 AA20                       		dc.w $AA20
0001E8D6                            ; ---------------------------------------------------------------------------
0001E8D6                            ; Pattern load cues - ending sequence
0001E8D6                            ; ---------------------------------------------------------------------------
0001E8D6 000E                       PLC_Ending:	dc.w $E
0001E8D8 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E8DC 0000                       		dc.w 0
0001E8DE 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E8E2 39A0                       		dc.w $39A0
0001E8E4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E8E8 6B00                       		dc.w $6B00
0001E8EA 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E8EE 7400                       		dc.w $7400
0001E8F0 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E8F4 78A0                       		dc.w $78A0
0001E8F6 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E8FA 7C20                       		dc.w $7C20
0001E8FC 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E900 A480                       		dc.w $A480
0001E902 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E906 AA60                       		dc.w $AA60
0001E908 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E90C ACA0                       		dc.w $ACA0
0001E90E 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E912 AE60                       		dc.w $AE60
0001E914 0000 0000                  		dc.l Nem_Seal		; seal
0001E918 B0A0                       		dc.w $B0A0
0001E91A 0000 0000                  		dc.l Nem_Pig		; pig
0001E91E B260                       		dc.w $B260
0001E920 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E924 B4A0                       		dc.w $B4A0
0001E926 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E92A B660                       		dc.w $B660
0001E92C 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E930 B8A0                       		dc.w $B8A0
0001E932                            ; ---------------------------------------------------------------------------
0001E932                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E932                            ; ---------------------------------------------------------------------------
0001E932 0002                       PLC_TryAgain:	dc.w 2
0001E934 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E938 78A0                       		dc.w $78A0
0001E93A 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E93E 7C20                       		dc.w $7C20
0001E940 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E944 B400                       		dc.w $B400
0001E946                            ; ---------------------------------------------------------------------------
0001E946                            ; Pattern load cues - Eggman on SBZ 2
0001E946                            ; ---------------------------------------------------------------------------
0001E946 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E948 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E94C A300                       		dc.w $A300
0001E94E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E952 8000                       		dc.w $8000
0001E954 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E958 9400                       		dc.w $9400
0001E95A                            ; ---------------------------------------------------------------------------
0001E95A                            ; Pattern load cues - final boss
0001E95A                            ; ---------------------------------------------------------------------------
0001E95A 0004                       PLC_FZBoss:	dc.w 4
0001E95C 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E960 7400                       		dc.w $7400
0001E962 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E966 6000                       		dc.w $6000
0001E968 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E96C 8000                       		dc.w $8000
0001E96E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E972 8E00                       		dc.w $8E00
0001E974 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E978 A540                       		dc.w $A540
0001E97A                            ; ---------------------------------------------------------------------------
0001E97A                            ; Pattern load cues - Teto boss
0001E97A                            ; ---------------------------------------------------------------------------
0001E97A 0002                       PLC_TetoBoss:	dc.w 2
0001E97C 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E980 8000                       		dc.w $8000
0001E982 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E986 93A0                       		dc.w $93A0
0001E988 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E98C 9000                       		dc.w $9000
0001E98E                            		even
0001E98E                            		even
0001E98E                            
0001E98E                            		incbin	misc\padding.bin
0001EA7C                            		even
0001EA7C                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001EED2                            		even
0001EED2                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001EF6A                            		even
0001EF6A                            Nem_Gomer:	incbin	artnem\gomer.bin
0001F0AC                            		even
0001F0AC                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001F0FA                            		even
0001F0FA                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F20E                            		even
0001F20E                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
000200D8                            		even
000200D8                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
000241DE                            		even
000241DE                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00024212                            		even
00024212                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000242D0                            		even
000242D0                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024778                            		even
00024778                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000247D6                            		even
000247D6                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
000253DC                            		even
000253DC                            ; ---------------------------------------------------------------------------
000253DC                            ; Sprite mappings - Sonic
000253DC                            ; ---------------------------------------------------------------------------
000253DC                            Map_Sonic:
000253DC                            	include "_maps\Sonic.asm"
000253DC                            Map_a933:
000253DC 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
000253DE 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
000253E0 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
000253E2 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
000253E4 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
000253E6 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
000253E8 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
000253EA 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
000253EC 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
000253EE 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
000253F0 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
000253F2 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
000253F4 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
000253F6 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
000253F8 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
000253FA 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
000253FC 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
000253FE 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
00025400 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
00025402 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
00025404 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
00025406 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
00025408 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
0002540A 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
0002540C 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
0002540E 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
00025410 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
00025412 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
00025414 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
00025416 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
00025418 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
0002541A 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
0002541C 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
0002541E 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
00025420 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
00025422 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
00025424 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
00025426 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
00025428 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
0002542A 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
0002542C 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
0002542E 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
00025430 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
00025432 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
00025434 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
00025436 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
00025438 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
0002543A 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
0002543C 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
0002543E 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
00025440 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
00025442 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
00025444 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
00025446 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
00025448 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
0002544A 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
0002544C 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
0002544E 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
00025450 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
00025452 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
00025454 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
00025456 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
00025458 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
0002545A 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
0002545C 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
0002545E 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
00025460 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
00025462 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
00025464 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
00025466 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
00025468 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
0002546A 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
0002546C 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
0002546E 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
00025470 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
00025472 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00025474 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00025476 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00025478 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
0002547A 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
0002547C 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
0002547E 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
00025480 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
00025482 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00025484 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00025486 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00025488 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
0002548A 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
0002548C 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
0002548E 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
00025490 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
00025492 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00025494 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00025496 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
00025498 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
0002549A 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
0002549C 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
0002549E 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
000254A0 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
000254A2 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
000254A4 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
000254A6 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
000254A8 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
000254AA 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
000254AC 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
000254AE 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
000254B0 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
000254B2 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
000254B4 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
000254B6 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
000254B8 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
000254BA 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
000254BC 00                         Map_a933_E0: 	dc.b $0
000254BD 02                         Map_a933_E1: 	dc.b $2
000254BE ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
000254C3 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
000254C8 03                         Map_a933_EC: 	dc.b $3
000254C9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000254CE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000254D3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000254D8 03                         Map_a933_FC: 	dc.b $3
000254D9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000254DE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000254E3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000254E8 03                         Map_a933_10C: 	dc.b $3
000254E9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000254EE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000254F3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000254F8 03                         Map_a933_11C: 	dc.b $3
000254F9 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000254FE 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00025503 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00025508 04                         Map_a933_12C: 	dc.b $4
00025509 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
0002550E FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00025513 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00025518 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
0002551D 02                         Map_a933_141: 	dc.b $2
0002551E EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00025523 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00025528 02                         Map_a933_14C: 	dc.b $2
00025529 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
0002552E FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00025533 04                         Map_a933_157: 	dc.b $4
00025534 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025539 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
0002553E FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00025543 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00025548 02                         Map_a933_16C: 	dc.b $2
00025549 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
0002554E EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00025553 03                         Map_a933_177: 	dc.b $3
00025554 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00025559 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
0002555E 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00025563 05                         Map_a933_187: 	dc.b $5
00025564 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025569 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
0002556E FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00025573 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00025578 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
0002557D 06                         Map_a933_1A1: 	dc.b $6
0002557E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025583 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025588 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
0002558D 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00025592 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025597 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
0002559C 04                         Map_a933_1C0: 	dc.b $4
0002559D ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000255A2 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000255A7 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
000255AC 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
000255B1 05                         Map_a933_1D5: 	dc.b $5
000255B2 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000255B7 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
000255BC FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
000255C1 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
000255C6 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
000255CB 04                         Map_a933_1EF: 	dc.b $4
000255CC EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000255D1 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000255D6 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000255DB 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000255E0 05                         Map_a933_204: 	dc.b $5
000255E1 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000255E6 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000255EB FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000255F0 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000255F5 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000255FA 04                         Map_a933_21E: 	dc.b $4
000255FB F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00025600 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00025605 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
0002560A 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
0002560F 02                         Map_a933_233: 	dc.b $2
00025610 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00025615 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
0002561A 02                         Map_a933_23E: 	dc.b $2
0002561B F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00025620 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00025625 04                         Map_a933_249: 	dc.b $4
00025626 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
0002562B EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00025630 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00025635 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
0002563A 02                         Map_a933_25E: 	dc.b $2
0002563B F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00025640 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025645 03                         Map_a933_269: 	dc.b $3
00025646 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
0002564B EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00025650 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025655 06                         Map_a933_279: 	dc.b $6
00025656 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002565B ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00025660 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025665 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
0002566A 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002566F FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025674 06                         Map_a933_298: 	dc.b $6
00025675 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002567A E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002567F EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025684 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025689 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002568E 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00025693 04                         Map_a933_2B7: 	dc.b $4
00025694 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025699 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002569E EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
000256A3 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000256A8 05                         Map_a933_2CC: 	dc.b $5
000256A9 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000256AE ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
000256B3 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
000256B8 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
000256BD 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
000256C2 04                         Map_a933_2E6: 	dc.b $4
000256C3 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000256C8 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000256CD EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000256D2 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000256D7 05                         Map_a933_2FB: 	dc.b $5
000256D8 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000256DD EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000256E2 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000256E7 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000256EC 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000256F1 02                         Map_a933_315: 	dc.b $2
000256F2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000256F7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000256FC 02                         Map_a933_320: 	dc.b $2
000256FD EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025702 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025707 02                         Map_a933_32B: 	dc.b $2
00025708 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002570D FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025712 02                         Map_a933_336: 	dc.b $2
00025713 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025718 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002571D 04                         Map_a933_341: 	dc.b $4
0002571E EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025723 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025728 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002572D FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025732 03                         Map_a933_356: 	dc.b $3
00025733 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025738 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002573D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025742 04                         Map_a933_366: 	dc.b $4
00025743 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025748 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002574D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025752 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025757 03                         Map_a933_37B: 	dc.b $3
00025758 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002575D EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025762 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025767 02                         Map_a933_38B: 	dc.b $2
00025768 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002576D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025772 02                         Map_a933_396: 	dc.b $2
00025773 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025778 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002577D 02                         Map_a933_3A1: 	dc.b $2
0002577E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025783 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025788 02                         Map_a933_3AC: 	dc.b $2
00025789 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002578E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025793 04                         Map_a933_3B7: 	dc.b $4
00025794 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025799 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002579E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000257A3 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000257A8 02                         Map_a933_3CC: 	dc.b $2
000257A9 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000257AE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000257B3 04                         Map_a933_3D7: 	dc.b $4
000257B4 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000257B9 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000257BE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000257C3 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000257C8 02                         Map_a933_3EC: 	dc.b $2
000257C9 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000257CE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000257D3 01                         Map_a933_3F7: 	dc.b $1
000257D4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000257D9 01                         Map_a933_3FD: 	dc.b $1
000257DA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000257DF 01                         Map_a933_403: 	dc.b $1
000257E0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000257E5 01                         Map_a933_409: 	dc.b $1
000257E6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000257EB 01                         Map_a933_40F: 	dc.b $1
000257EC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000257F1 02                         Map_a933_415: 	dc.b $2
000257F2 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000257F7 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000257FC 01                         Map_a933_420: 	dc.b $1
000257FD F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025802 02                         Map_a933_426: 	dc.b $2
00025803 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025808 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002580D 01                         Map_a933_431: 	dc.b $1
0002580E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025813 02                         Map_a933_437: 	dc.b $2
00025814 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025819 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
0002581E 04                         Map_a933_442: 	dc.b $4
0002581F ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025824 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00025829 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
0002582E 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00025833 06                         Map_a933_457: 	dc.b $6
00025834 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00025839 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
0002583E 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00025843 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025848 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
0002584D F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00025852 02                         Map_a933_476: 	dc.b $2
00025853 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025858 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
0002585D 02                         Map_a933_481: 	dc.b $2
0002585E 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00025863 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025868 04                         Map_a933_48C: 	dc.b $4
00025869 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002586E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025873 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025878 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002587D 02                         Map_a933_4A1: 	dc.b $2
0002587E F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025883 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025888 03                         Map_a933_4AC: 	dc.b $3
00025889 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002588E FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025893 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025898 04                         Map_a933_4BC: 	dc.b $4
00025899 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002589E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000258A3 0408 000C 02               	dc.b $4, $8, $0, $C, $2
000258A8 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000258AD 02                         Map_a933_4D1: 	dc.b $2
000258AE EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000258B3 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
000258B8 04                         Map_a933_4DC: 	dc.b $4
000258B9 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000258BE 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000258C3 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000258C8 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000258CD 04                         Map_a933_4F1: 	dc.b $4
000258CE F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000258D3 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000258D8 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000258DD F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000258E2 05                         Map_a933_506: 	dc.b $5
000258E3 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000258E8 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000258ED 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000258F2 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000258F7 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000258FC 05                         Map_a933_520: 	dc.b $5
000258FD E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025902 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00025907 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002590C 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025911 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025916 02                         Map_a933_53A: 	dc.b $2
00025917 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002591C 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025921 03                         Map_a933_545: 	dc.b $3
00025922 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025927 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002592C 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025931 02                         Map_a933_555: 	dc.b $2
00025932 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025937 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002593C 03                         Map_a933_560: 	dc.b $3
0002593D EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025942 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025947 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002594C 02                         Map_a933_570: 	dc.b $2
0002594D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025952 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025957 03                         Map_a933_57B: 	dc.b $3
00025958 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002595D 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025962 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025967 03                         Map_a933_58B: 	dc.b $3
00025968 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002596D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025972 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025977 05                         Map_a933_59B: 	dc.b $5
00025978 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002597D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025982 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025987 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002598C 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025991 05                         Map_a933_5B5: 	dc.b $5
00025992 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025997 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002599C F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000259A1 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000259A6 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000259AB 02                         Map_a933_5CF: 	dc.b $2
000259AC EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000259B1 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000259B6 03                         Map_a933_5DA: 	dc.b $3
000259B7 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000259BC F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000259C1 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000259C6 01                         Map_a933_5EA: 	dc.b $1
000259C7 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000259CC 01                         Map_a933_5F0: 	dc.b $1
000259CD F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000259D2 01                         Map_a933_5F6: 	dc.b $1
000259D3 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000259D8 04                         Map_a933_5FC: 	dc.b $4
000259D9 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000259DE F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000259E3 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000259E8 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000259ED 03                         Map_a933_611: 	dc.b $3
000259EE F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000259F3 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000259F8 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000259FD 03                         Map_a933_621: 	dc.b $3
000259FE F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025A03 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00025A08 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00025A0D 03                         Map_a933_631: 	dc.b $3
00025A0E EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025A13 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00025A18 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00025A1D 02                         Map_a933_641: 	dc.b $2
00025A1E F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00025A23 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00025A28 02                         Map_a933_64C: 	dc.b $2
00025A29 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025A2E EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025A33 03                         Map_a933_657: 	dc.b $3
00025A34 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00025A39 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00025A3E 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025A43 02                         Map_a933_667: 	dc.b $2
00025A44 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00025A49 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00025A4E 04                         Map_a933_672: 	dc.b $4
00025A4F ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025A54 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00025A59 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00025A5E 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025A63 00                         Map_a933_687: 	dc.b $0
00025A64 00                         Map_a933_688: 	dc.b $0
00025A65 00                         Map_a933_689: 	dc.b $0
00025A66 00                         Map_a933_68A: 	dc.b $0
00025A67 02                         Map_a933_68B: 	dc.b $2
00025A68 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025A6D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025A72 00                         Map_a933_696: 	dc.b $0
00025A73 02                         Map_a933_697: 	dc.b $2
00025A74 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025A79 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025A7E 00                         Map_a933_6A2: 	dc.b $0
00025A7F 00                         Map_a933_6A3: 	dc.b $0
00025A80 00                         Map_a933_6A4: 	dc.b $0
00025A81 02                         Map_a933_6A5: 	dc.b $2
00025A82 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025A87 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025A8C 00                         Map_a933_6B0: 	dc.b $0
00025A8D 02                         Map_a933_6B1: 	dc.b $2
00025A8E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025A93 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025A98 00                         Map_a933_6BC: 	dc.b $0
00025A99 00                         Map_a933_6BD: 	dc.b $0
00025A9A 00                         Map_a933_6BE: 	dc.b $0
00025A9B 02                         Map_a933_6BF: 	dc.b $2
00025A9C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025AA1 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025AA6 00                         Map_a933_6CA: 	dc.b $0
00025AA7 02                         Map_a933_6CB: 	dc.b $2
00025AA8 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025AAD EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025AB2 00                         Map_a933_6D6: 	dc.b $0
00025AB4 00                         	even
00025AB4 00                         	even
00025AB4                            
00025AB4                            ; ---------------------------------------------------------------------------
00025AB4                            ; Uncompressed graphics	loading	array for Sonic
00025AB4                            ; ---------------------------------------------------------------------------
00025AB4                            SonicDynPLC:
00025AB4                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025AB4                            DPLC_33c5:
00025AB4 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00025AB6 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00025AB8 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
00025ABA 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
00025ABC 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
00025ABE 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
00025AC0 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
00025AC2 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00025AC4 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00025AC6 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00025AC8 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
00025ACA 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
00025ACC 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
00025ACE 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
00025AD0 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
00025AD2 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
00025AD4 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
00025AD6 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
00025AD8 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
00025ADA 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
00025ADC 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
00025ADE 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
00025AE0 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
00025AE2 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
00025AE4 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
00025AE6 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
00025AE8 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
00025AEA 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
00025AEC 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
00025AEE 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
00025AF0 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
00025AF2 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
00025AF4 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
00025AF6 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
00025AF8 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
00025AFA 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
00025AFC 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
00025AFE 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
00025B00 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
00025B02 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
00025B04 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
00025B06 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
00025B08 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
00025B0A 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
00025B0C 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
00025B0E 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
00025B10 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
00025B12 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
00025B14 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
00025B16 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
00025B18 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
00025B1A 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
00025B1C 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
00025B1E 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
00025B20 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
00025B22 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
00025B24 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
00025B26 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
00025B28 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
00025B2A 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
00025B2C 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
00025B2E 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
00025B30 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
00025B32 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
00025B34 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
00025B36 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
00025B38 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
00025B3A 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
00025B3C 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
00025B3E 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
00025B40 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
00025B42 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
00025B44 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00025B46 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00025B48 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
00025B4A 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
00025B4C 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
00025B4E 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
00025B50 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
00025B52 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
00025B54 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00025B56 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00025B58 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
00025B5A 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
00025B5C 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
00025B5E 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
00025B60 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
00025B62 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
00025B64 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00025B66 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00025B68 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
00025B6A 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
00025B6C 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
00025B6E 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
00025B70 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
00025B72 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00025B74 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00025B76 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00025B78 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
00025B7A 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00025B7C 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
00025B7E 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
00025B80 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
00025B82 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00025B84 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00025B86 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00025B88 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00025B8A 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00025B8C 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
00025B8E 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
00025B90 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
00025B92 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00025B94 00                         DPLC_33c5_E0: 	dc.b $0
00025B95 02                         DPLC_33c5_E1: 	dc.b $2
00025B96 F000                       	dc.b $F0, $0
00025B98 1010                       	dc.b $10, $10
00025B9A 03                         DPLC_33c5_E6: 	dc.b $3
00025B9B 5012                       	dc.b $50, $12
00025B9D 5018                       	dc.b $50, $18
00025B9F 201E                       	dc.b $20, $1E
00025BA1 03                         DPLC_33c5_ED: 	dc.b $3
00025BA2 5021                       	dc.b $50, $21
00025BA4 5018                       	dc.b $50, $18
00025BA6 201E                       	dc.b $20, $1E
00025BA8 03                         DPLC_33c5_F4: 	dc.b $3
00025BA9 5021                       	dc.b $50, $21
00025BAB 5018                       	dc.b $50, $18
00025BAD 2027                       	dc.b $20, $27
00025BAF 03                         DPLC_33c5_FB: 	dc.b $3
00025BB0 802A                       	dc.b $80, $2A
00025BB2 2033                       	dc.b $20, $33
00025BB4 2036                       	dc.b $20, $36
00025BB6 04                         DPLC_33c5_102: 	dc.b $4
00025BB7 7039                       	dc.b $70, $39
00025BB9 5041                       	dc.b $50, $41
00025BBB 5047                       	dc.b $50, $47
00025BBD 104D                       	dc.b $10, $4D
00025BBF 02                         DPLC_33c5_10B: 	dc.b $2
00025BC0 7039                       	dc.b $70, $39
00025BC2 B04F                       	dc.b $B0, $4F
00025BC4 02                         DPLC_33c5_110: 	dc.b $2
00025BC5 505B                       	dc.b $50, $5B
00025BC7 8061                       	dc.b $80, $61
00025BC9 04                         DPLC_33c5_115: 	dc.b $4
00025BCA 505B                       	dc.b $50, $5B
00025BCC 506A                       	dc.b $50, $6A
00025BCE 5070                       	dc.b $50, $70
00025BD0 1076                       	dc.b $10, $76
00025BD2 02                         DPLC_33c5_11E: 	dc.b $2
00025BD3 F4F0                       	dc.b $F4, $F0
00025BD5 1500                       	dc.b $15, $0
00025BD7 03                         DPLC_33c5_123: 	dc.b $3
00025BD8 7039                       	dc.b $70, $39
00025BDA 3078                       	dc.b $30, $78
00025BDC 507C                       	dc.b $50, $7C
00025BDE 05                         DPLC_33c5_12A: 	dc.b $5
00025BDF 5082                       	dc.b $50, $82
00025BE1 5088                       	dc.b $50, $88
00025BE3 208E                       	dc.b $20, $8E
00025BE5 5091                       	dc.b $50, $91
00025BE7 0097                       	dc.b $0, $97
00025BE9 06                         DPLC_33c5_135: 	dc.b $6
00025BEA 5082                       	dc.b $50, $82
00025BEC 1098                       	dc.b $10, $98
00025BEE 309A                       	dc.b $30, $9A
00025BF0 509E                       	dc.b $50, $9E
00025BF2 30A4                       	dc.b $30, $A4
00025BF4 00A8                       	dc.b $0, $A8
00025BF6 04                         DPLC_33c5_142: 	dc.b $4
00025BF7 50A9                       	dc.b $50, $A9
00025BF9 10AF                       	dc.b $10, $AF
00025BFB 70B1                       	dc.b $70, $B1
00025BFD 20B9                       	dc.b $20, $B9
00025BFF 05                         DPLC_33c5_14B: 	dc.b $5
00025C00 50BC                       	dc.b $50, $BC
00025C02 30C2                       	dc.b $30, $C2
00025C04 70C6                       	dc.b $70, $C6
00025C06 20CE                       	dc.b $20, $CE
00025C08 10D1                       	dc.b $10, $D1
00025C0A 04                         DPLC_33c5_156: 	dc.b $4
00025C0B 50BC                       	dc.b $50, $BC
00025C0D 10D3                       	dc.b $10, $D3
00025C0F 70D5                       	dc.b $70, $D5
00025C11 20DD                       	dc.b $20, $DD
00025C13 05                         DPLC_33c5_15F: 	dc.b $5
00025C14 5082                       	dc.b $50, $82
00025C16 1098                       	dc.b $10, $98
00025C18 008E                       	dc.b $0, $8E
00025C1A 70E0                       	dc.b $70, $E0
00025C1C 20E8                       	dc.b $20, $E8
00025C1E 04                         DPLC_33c5_16A: 	dc.b $4
00025C1F 70EB                       	dc.b $70, $EB
00025C21 50F3                       	dc.b $50, $F3
00025C23 10F9                       	dc.b $10, $F9
00025C25 50FB                       	dc.b $50, $FB
00025C27 02                         DPLC_33c5_173: 	dc.b $2
00025C28 70EB                       	dc.b $70, $EB
00025C2A B101                       	dc.b $B1, $1
00025C2C 02                         DPLC_33c5_178: 	dc.b $2
00025C2D 510D                       	dc.b $51, $D
00025C2F 8113                       	dc.b $81, $13
00025C31 04                         DPLC_33c5_17D: 	dc.b $4
00025C32 510D                       	dc.b $51, $D
00025C34 511C                       	dc.b $51, $1C
00025C36 1122                       	dc.b $11, $22
00025C38 5124                       	dc.b $51, $24
00025C3A 02                         DPLC_33c5_186: 	dc.b $2
00025C3B 510D                       	dc.b $51, $D
00025C3D B12A                       	dc.b $B1, $2A
00025C3F 03                         DPLC_33c5_18B: 	dc.b $3
00025C40 70EB                       	dc.b $70, $EB
00025C42 0101                       	dc.b $1, $1
00025C44 8136                       	dc.b $81, $36
00025C46 06                         DPLC_33c5_192: 	dc.b $6
00025C47 513F                       	dc.b $51, $3F
00025C49 1145                       	dc.b $11, $45
00025C4B 1147                       	dc.b $11, $47
00025C4D 8149                       	dc.b $81, $49
00025C4F 0152                       	dc.b $1, $52
00025C51 0153                       	dc.b $1, $53
00025C53 06                         DPLC_33c5_19F: 	dc.b $6
00025C54 513F                       	dc.b $51, $3F
00025C56 2154                       	dc.b $21, $54
00025C58 1157                       	dc.b $11, $57
00025C5A 1159                       	dc.b $11, $59
00025C5C 815B                       	dc.b $81, $5B
00025C5E 0152                       	dc.b $1, $52
00025C60 04                         DPLC_33c5_1AC: 	dc.b $4
00025C61 5164                       	dc.b $51, $64
00025C63 116A                       	dc.b $11, $6A
00025C65 816C                       	dc.b $81, $6C
00025C67 1175                       	dc.b $11, $75
00025C69 05                         DPLC_33c5_1B5: 	dc.b $5
00025C6A 5177                       	dc.b $51, $77
00025C6C 217D                       	dc.b $21, $7D
00025C6E 1180                       	dc.b $11, $80
00025C70 7182                       	dc.b $71, $82
00025C72 218A                       	dc.b $21, $8A
00025C74 04                         DPLC_33c5_1C0: 	dc.b $4
00025C75 5177                       	dc.b $51, $77
00025C77 118D                       	dc.b $11, $8D
00025C79 818F                       	dc.b $81, $8F
00025C7B 1198                       	dc.b $11, $98
00025C7D 05                         DPLC_33c5_1C9: 	dc.b $5
00025C7E 513F                       	dc.b $51, $3F
00025C80 819A                       	dc.b $81, $9A
00025C82 1159                       	dc.b $11, $59
00025C84 11A3                       	dc.b $11, $A3
00025C86 0152                       	dc.b $1, $52
00025C88 02                         DPLC_33c5_1D4: 	dc.b $2
00025C89 51A5                       	dc.b $51, $A5
00025C8B B1AB                       	dc.b $B1, $AB
00025C8D 02                         DPLC_33c5_1D9: 	dc.b $2
00025C8E 505B                       	dc.b $50, $5B
00025C90 B1B7                       	dc.b $B1, $B7
00025C92 02                         DPLC_33c5_1DE: 	dc.b $2
00025C93 51A5                       	dc.b $51, $A5
00025C95 B1C3                       	dc.b $B1, $C3
00025C97 02                         DPLC_33c5_1E3: 	dc.b $2
00025C98 505B                       	dc.b $50, $5B
00025C9A B1CF                       	dc.b $B1, $CF
00025C9C 04                         DPLC_33c5_1E8: 	dc.b $4
00025C9D 51DB                       	dc.b $51, $DB
00025C9F 11E1                       	dc.b $11, $E1
00025CA1 B1E3                       	dc.b $B1, $E3
00025CA3 01EF                       	dc.b $1, $EF
00025CA5 03                         DPLC_33c5_1F1: 	dc.b $3
00025CA6 51F0                       	dc.b $51, $F0
00025CA8 11F6                       	dc.b $11, $F6
00025CAA B1F8                       	dc.b $B1, $F8
00025CAC 04                         DPLC_33c5_1F8: 	dc.b $4
00025CAD 51DB                       	dc.b $51, $DB
00025CAF 1204                       	dc.b $12, $4
00025CB1 B206                       	dc.b $B2, $6
00025CB3 01EF                       	dc.b $1, $EF
00025CB5 03                         DPLC_33c5_201: 	dc.b $3
00025CB6 51F0                       	dc.b $51, $F0
00025CB8 11F6                       	dc.b $11, $F6
00025CBA B212                       	dc.b $B2, $12
00025CBC 02                         DPLC_33c5_208: 	dc.b $2
00025CBD 521E                       	dc.b $52, $1E
00025CBF B224                       	dc.b $B2, $24
00025CC1 02                         DPLC_33c5_20D: 	dc.b $2
00025CC2 510D                       	dc.b $51, $D
00025CC4 B230                       	dc.b $B2, $30
00025CC6 02                         DPLC_33c5_212: 	dc.b $2
00025CC7 521E                       	dc.b $52, $1E
00025CC9 B23C                       	dc.b $B2, $3C
00025CCB 02                         DPLC_33c5_217: 	dc.b $2
00025CCC 510D                       	dc.b $51, $D
00025CCE B248                       	dc.b $B2, $48
00025CD0 04                         DPLC_33c5_21C: 	dc.b $4
00025CD1 5254                       	dc.b $52, $54
00025CD3 125A                       	dc.b $12, $5A
00025CD5 B25C                       	dc.b $B2, $5C
00025CD7 0268                       	dc.b $2, $68
00025CD9 02                         DPLC_33c5_225: 	dc.b $2
00025CDA 7269                       	dc.b $72, $69
00025CDC B271                       	dc.b $B2, $71
00025CDE 04                         DPLC_33c5_22A: 	dc.b $4
00025CDF 5254                       	dc.b $52, $54
00025CE1 127D                       	dc.b $12, $7D
00025CE3 B27F                       	dc.b $B2, $7F
00025CE5 0268                       	dc.b $2, $68
00025CE7 02                         DPLC_33c5_233: 	dc.b $2
00025CE8 7269                       	dc.b $72, $69
00025CEA B28B                       	dc.b $B2, $8B
00025CEC 01                         DPLC_33c5_238: 	dc.b $1
00025CED F297                       	dc.b $F2, $97
00025CEF 01                         DPLC_33c5_23B: 	dc.b $1
00025CF0 F2A7                       	dc.b $F2, $A7
00025CF2 01                         DPLC_33c5_23E: 	dc.b $1
00025CF3 F2B7                       	dc.b $F2, $B7
00025CF5 01                         DPLC_33c5_241: 	dc.b $1
00025CF6 F2C7                       	dc.b $F2, $C7
00025CF8 01                         DPLC_33c5_244: 	dc.b $1
00025CF9 F2D7                       	dc.b $F2, $D7
00025CFB 02                         DPLC_33c5_247: 	dc.b $2
00025CFC B2E7                       	dc.b $B2, $E7
00025CFE 22F3                       	dc.b $22, $F3
00025D00 01                         DPLC_33c5_24C: 	dc.b $1
00025D01 F2F6                       	dc.b $F2, $F6
00025D03 02                         DPLC_33c5_24F: 	dc.b $2
00025D04 B306                       	dc.b $B3, $6
00025D06 2312                       	dc.b $23, $12
00025D08 01                         DPLC_33c5_254: 	dc.b $1
00025D09 F315                       	dc.b $F3, $15
00025D0B 02                         DPLC_33c5_257: 	dc.b $2
00025D0C 5325                       	dc.b $53, $25
00025D0E B32B                       	dc.b $B3, $2B
00025D10 04                         DPLC_33c5_25C: 	dc.b $4
00025D11 5337                       	dc.b $53, $37
00025D13 733D                       	dc.b $73, $3D
00025D15 1345                       	dc.b $13, $45
00025D17 0347                       	dc.b $3, $47
00025D19 02                         DPLC_33c5_265: 	dc.b $2
00025D1A D348                       	dc.b $D3, $48
00025D1C 34EC                       	dc.b $34, $EC
00025D1E 02                         DPLC_33c5_26A: 	dc.b $2
00025D1F F528                       	dc.b $F5, $28
00025D21 0538                       	dc.b $5, $38
00025D23 02                         DPLC_33c5_26F: 	dc.b $2
00025D24 F539                       	dc.b $F5, $39
00025D26 0549                       	dc.b $5, $49
00025D28 02                         DPLC_33c5_274: 	dc.b $2
00025D29 E356                       	dc.b $E3, $56
00025D2B 054A                       	dc.b $5, $4A
00025D2D 01                         DPLC_33c5_279: 	dc.b $1
00025D2E 8365                       	dc.b $83, $65
00025D30 03                         DPLC_33c5_27C: 	dc.b $3
00025D31 736E                       	dc.b $73, $6E
00025D33 0376                       	dc.b $3, $76
00025D35 3377                       	dc.b $33, $77
00025D37 02                         DPLC_33c5_283: 	dc.b $2
00025D38 E37B                       	dc.b $E3, $7B
00025D3A 054A                       	dc.b $5, $4A
00025D3C 01                         DPLC_33c5_288: 	dc.b $1
00025D3D D561                       	dc.b $D5, $61
00025D3F 04                         DPLC_33c5_28B: 	dc.b $4
00025D40 B399                       	dc.b $B3, $99
00025D42 33A5                       	dc.b $33, $A5
00025D44 03A9                       	dc.b $3, $A9
00025D46 03AA                       	dc.b $3, $AA
00025D48 04                         DPLC_33c5_294: 	dc.b $4
00025D49 B3AB                       	dc.b $B3, $AB
00025D4B 33B7                       	dc.b $33, $B7
00025D4D 03BB                       	dc.b $3, $BB
00025D4F 03BC                       	dc.b $3, $BC
00025D51 05                         DPLC_33c5_29D: 	dc.b $5
00025D52 83BD                       	dc.b $83, $BD
00025D54 13C6                       	dc.b $13, $C6
00025D56 53C8                       	dc.b $53, $C8
00025D58 13CE                       	dc.b $13, $CE
00025D5A 03D0                       	dc.b $3, $D0
00025D5C 05                         DPLC_33c5_2A8: 	dc.b $5
00025D5D 83D1                       	dc.b $83, $D1
00025D5F 13DA                       	dc.b $13, $DA
00025D61 53C8                       	dc.b $53, $C8
00025D63 13CE                       	dc.b $13, $CE
00025D65 03D0                       	dc.b $3, $D0
00025D67 02                         DPLC_33c5_2B3: 	dc.b $2
00025D68 83DC                       	dc.b $83, $DC
00025D6A 73E5                       	dc.b $73, $E5
00025D6C 03                         DPLC_33c5_2B8: 	dc.b $3
00025D6D 83ED                       	dc.b $83, $ED
00025D6F 23F6                       	dc.b $23, $F6
00025D71 13F9                       	dc.b $13, $F9
00025D73 02                         DPLC_33c5_2BF: 	dc.b $2
00025D74 83FB                       	dc.b $83, $FB
00025D76 7404                       	dc.b $74, $4
00025D78 03                         DPLC_33c5_2C4: 	dc.b $3
00025D79 83ED                       	dc.b $83, $ED
00025D7B 240C                       	dc.b $24, $C
00025D7D 140F                       	dc.b $14, $F
00025D7F 02                         DPLC_33c5_2CB: 	dc.b $2
00025D80 5411                       	dc.b $54, $11
00025D82 B417                       	dc.b $B4, $17
00025D84 03                         DPLC_33c5_2D0: 	dc.b $3
00025D85 8423                       	dc.b $84, $23
00025D87 342C                       	dc.b $34, $2C
00025D89 0430                       	dc.b $4, $30
00025D8B 03                         DPLC_33c5_2D7: 	dc.b $3
00025D8C 7431                       	dc.b $74, $31
00025D8E 1439                       	dc.b $14, $39
00025D90 B43B                       	dc.b $B4, $3B
00025D92 05                         DPLC_33c5_2DE: 	dc.b $5
00025D93 7447                       	dc.b $74, $47
00025D95 144F                       	dc.b $14, $4F
00025D97 5451                       	dc.b $54, $51
00025D99 3457                       	dc.b $34, $57
00025D9B 045B                       	dc.b $4, $5B
00025D9D 05                         DPLC_33c5_2E9: 	dc.b $5
00025D9E 745C                       	dc.b $74, $5C
00025DA0 144F                       	dc.b $14, $4F
00025DA2 5464                       	dc.b $54, $64
00025DA4 3457                       	dc.b $34, $57
00025DA6 045B                       	dc.b $4, $5B
00025DA8 02                         DPLC_33c5_2F4: 	dc.b $2
00025DA9 246A                       	dc.b $24, $6A
00025DAB F46D                       	dc.b $F4, $6D
00025DAD 03                         DPLC_33c5_2F9: 	dc.b $3
00025DAE 247D                       	dc.b $24, $7D
00025DB0 B480                       	dc.b $B4, $80
00025DB2 248C                       	dc.b $24, $8C
00025DB4 01                         DPLC_33c5_300: 	dc.b $1
00025DB5 B48F                       	dc.b $B4, $8F
00025DB7 01                         DPLC_33c5_303: 	dc.b $1
00025DB8 549B                       	dc.b $54, $9B
00025DBA 01                         DPLC_33c5_306: 	dc.b $1
00025DBB 14A1                       	dc.b $14, $A1
00025DBD 02                         DPLC_33c5_309: 	dc.b $2
00025DBE E356                       	dc.b $E3, $56
00025DC0 054A                       	dc.b $5, $4A
00025DC2 03                         DPLC_33c5_30E: 	dc.b $3
00025DC3 736E                       	dc.b $73, $6E
00025DC5 0376                       	dc.b $3, $76
00025DC7 3377                       	dc.b $33, $77
00025DC9 03                         DPLC_33c5_315: 	dc.b $3
00025DCA B4A3                       	dc.b $B4, $A3
00025DCC 14AF                       	dc.b $14, $AF
00025DCE 34B1                       	dc.b $34, $B1
00025DD0 03                         DPLC_33c5_31C: 	dc.b $3
00025DD1 54B5                       	dc.b $54, $B5
00025DD3 B4BB                       	dc.b $B4, $BB
00025DD5 1074                       	dc.b $10, $74
00025DD7 02                         DPLC_33c5_323: 	dc.b $2
00025DD8 F4C7                       	dc.b $F4, $C7
00025DDA 24D7                       	dc.b $24, $D7
00025DDC 02                         DPLC_33c5_328: 	dc.b $2
00025DDD F4DA                       	dc.b $F4, $DA
00025DDF 14EA                       	dc.b $14, $EA
00025DE1 02                         DPLC_33c5_32D: 	dc.b $2
00025DE2 F502                       	dc.b $F5, $2
00025DE4 2512                       	dc.b $25, $12
00025DE6 02                         DPLC_33c5_332: 	dc.b $2
00025DE7 F515                       	dc.b $F5, $15
00025DE9 2525                       	dc.b $25, $25
00025DEB 02                         DPLC_33c5_337: 	dc.b $2
00025DEC F54B                       	dc.b $F5, $4B
00025DEE 755B                       	dc.b $75, $5B
00025DF0 00                         DPLC_33c5_33C: 	dc.b $0
00025DF1 00                         DPLC_33c5_33D: 	dc.b $0
00025DF2 00                         DPLC_33c5_33E: 	dc.b $0
00025DF3 00                         DPLC_33c5_33F: 	dc.b $0
00025DF4 02                         DPLC_33c5_340: 	dc.b $2
00025DF5 F4DA                       	dc.b $F4, $DA
00025DF7 14EA                       	dc.b $14, $EA
00025DF9 00                         DPLC_33c5_345: 	dc.b $0
00025DFA 02                         DPLC_33c5_346: 	dc.b $2
00025DFB F4DA                       	dc.b $F4, $DA
00025DFD 14EA                       	dc.b $14, $EA
00025DFF 00                         DPLC_33c5_34B: 	dc.b $0
00025E00 00                         DPLC_33c5_34C: 	dc.b $0
00025E01 00                         DPLC_33c5_34D: 	dc.b $0
00025E02 02                         DPLC_33c5_34E: 	dc.b $2
00025E03 F4DA                       	dc.b $F4, $DA
00025E05 14EA                       	dc.b $14, $EA
00025E07 00                         DPLC_33c5_353: 	dc.b $0
00025E08 02                         DPLC_33c5_354: 	dc.b $2
00025E09 F4DA                       	dc.b $F4, $DA
00025E0B 14EA                       	dc.b $14, $EA
00025E0D 00                         DPLC_33c5_359: 	dc.b $0
00025E0E 00                         DPLC_33c5_35A: 	dc.b $0
00025E0F 00                         DPLC_33c5_35B: 	dc.b $0
00025E10 02                         DPLC_33c5_35C: 	dc.b $2
00025E11 F4DA                       	dc.b $F4, $DA
00025E13 14EA                       	dc.b $14, $EA
00025E15 00                         DPLC_33c5_361: 	dc.b $0
00025E16 02                         DPLC_33c5_362: 	dc.b $2
00025E17 F4DA                       	dc.b $F4, $DA
00025E19 14EA                       	dc.b $14, $EA
00025E1B 00                         DPLC_33c5_367: 	dc.b $0
00025E1C                            	even
00025E1C                            	even
00025E1C                            
00025E1C                            ; ---------------------------------------------------------------------------
00025E1C                            ; Uncompressed graphics	- Sonic
00025E1C                            ; ---------------------------------------------------------------------------
00025E1C                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00030BFC                            		even
00030BFC                            ; ---------------------------------------------------------------------------
00030BFC                            ; Compressed graphics - various
00030BFC                            ; ---------------------------------------------------------------------------
00030BFC                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030D00                            		even
00030D00                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030D3A                            		even
00030D3A                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030ED0                            		even
00030ED0                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00031018                            		even
00031018                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00031122                            		even
00031122                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00031174                            		even
00031174                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
000313BC                            		even
000313BC                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00031542                            		even
00031542                            ; ---------------------------------------------------------------------------
00031542                            ; Sprite mappings - walls of the special stage
00031542                            ; ---------------------------------------------------------------------------
00031542                            Map_SSWalls:
00031542                            	include "_maps\SSwalls.asm"
00031542                            ; ---------------------------------------------------------------------------
00031542                            ; Sprite mappings - walls of the special stage
00031542                            ; ---------------------------------------------------------------------------
00031542 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00031546 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003154A 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003154E 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00031552 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00031556 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003155A 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003155E 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00031562 01                         byte_2C584:	dc.b 1
00031563 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00031568 01                         byte_2C58A:	dc.b 1
00031569 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003156E 01                         byte_2C590:	dc.b 1
0003156F F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00031574 01                         byte_2C596:	dc.b 1
00031575 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003157A 01                         byte_2C59C:	dc.b 1
0003157B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00031580 01                         byte_2C5A2:	dc.b 1
00031581 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00031586 01                         byte_2C5A8:	dc.b 1
00031587 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003158C 01                         byte_2C5AE:	dc.b 1
0003158D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00031592 01                         byte_2C5B4:	dc.b 1
00031593 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00031598 01                         byte_2C5BA:	dc.b 1
00031599 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003159E 01                         byte_2C5C0:	dc.b 1
0003159F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
000315A4 01                         byte_2C5C6:	dc.b 1
000315A5 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
000315AA 01                         byte_2C5CC:	dc.b 1
000315AB F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
000315B0 01                         byte_2C5D2:	dc.b 1
000315B1 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
000315B6 01                         byte_2C5D8:	dc.b 1
000315B7 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
000315BC 01                         byte_2C5DE:	dc.b 1
000315BD F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
000315C2                            		even
000315C2                            		even
000315C2                            ; ---------------------------------------------------------------------------
000315C2                            ; Compressed graphics - special stage
000315C2                            ; ---------------------------------------------------------------------------
000315C2                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031EFA                            		even
00031EFA                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00032048                            		even
00032048                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
000334DA                            		even
000334DA                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000337DA                            		even
000337DA                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033CCE                            		even
00033CCE                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033DBC                            		even
00033DBC                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033E8C                            		even
00033E8C                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033F82                            		even
00033F82                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033FE0                            		even
00033FE0                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00034072                            		even
00034072                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00034134                            		even
00034134                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00034202                            		even
00034202                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
000342CE                            		even
000342CE                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00034396                            		even
00034396                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00034460                            		even
00034460                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00034530                            		even
00034530                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00034724                            		even
00034724                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003488C                            		even
0003488C                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003493C                            		even
0003493C                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00034A16                            		even
00034A16                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00034A9A                            		even
00034A9A                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00034C18                            		even
00034C18                            ; ---------------------------------------------------------------------------
00034C18                            ; Compressed graphics - GHZ stuff
00034C18                            ; ---------------------------------------------------------------------------
00034C18                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034C62                            		even
00034C62                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034D7C                            		even
00034D7C                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034E68                            		even
00034E68                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034EB0                            		even
00034EB0                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003504E                            		even
0003504E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003510A                            		even
0003510A                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003531E                            		even
0003531E                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003544A                            		even
0003544A                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00035578                            		even
00035578                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00035616                            		even
00035616                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00035676                            		even
00035676                            ; ---------------------------------------------------------------------------
00035676                            ; Compressed graphics - LZ stuff
00035676                            ; ---------------------------------------------------------------------------
00035676                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003579A                            		even
0003579A                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035F8E                            		even
00035F8E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003610E                            		even
0003610E                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00036278                            		even
00036278                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000368CE                            		even
000368CE                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036984                            		even
00036984                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00036A26                            		even
00036A26                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036B82                            		even
00036B82                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00036BE6                            		even
00036BE6                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036D38                            		even
00036D38                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003721A                            		even
0003721A                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003738A                            		even
0003738A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00037642                            		even
00037642                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003777A                            		even
0003777A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000378A4                            		even
000378A4                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000379B4                            		even
000379B4                            ; ---------------------------------------------------------------------------
000379B4                            ; Compressed graphics - MZ stuff
000379B4                            ; ---------------------------------------------------------------------------
000379B4                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037C42                            		even
00037C42                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037D00                            		even
00037D00                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037DB8                            		even
00037DB8                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037E0C                            		even
00037E0C                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000380DE 00                         		even
000380DE                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000389F4                            		even
000389F4                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038B58                            		even
00038B58                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00038BE0                            		even
00038BE0                            ; ---------------------------------------------------------------------------
00038BE0                            ; Compressed graphics - SLZ stuff
00038BE0                            ; ---------------------------------------------------------------------------
00038BE0                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038E1C                            		even
00038E1C                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038F62                            		even
00038F62                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
000391A6                            		even
000391A6                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00039208                            		even
00039208                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000392EA                            		even
000392EA                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000394CC                            		even
000394CC                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000395D8                            		even
000395D8                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003967C                            		even
0003967C                            ; ---------------------------------------------------------------------------
0003967C                            ; Compressed graphics - SYZ stuff
0003967C                            ; ---------------------------------------------------------------------------
0003967C                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000397E6                            		even
000397E6                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00039848                            		even
00039848                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003992A                            		even
0003992A                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039BB8                            		even
00039BB8                            ; ---------------------------------------------------------------------------
00039BB8                            ; Compressed graphics - SBZ stuff
00039BB8                            ; ---------------------------------------------------------------------------
00039BB8                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00039C0C                            		even
00039C0C                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039EA8                            		even
00039EA8                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003A0AC                            		even
0003A0AC                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003A24A                            		even
0003A24A                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A57A                            		even
0003A57A                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A758                            		even
0003A758                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A7B0                            		even
0003A7B0                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A97A 00                         		even
0003A97A                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003AA78                            		even
0003AA78                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003AC04                            		even
0003AC04                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003AC54                            		even
0003AC54                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003ACAC                            		even
0003ACAC                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003ADA8                            		even
0003ADA8                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003AEBE                            		even
0003AEBE                            ; ---------------------------------------------------------------------------
0003AEBE                            ; Compressed graphics - enemies
0003AEBE                            ; ---------------------------------------------------------------------------
0003AEBE                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003B32C 00                         		even
0003B32C                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003B4D6 00                         		even
0003B4D6                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B898 00                         		even
0003B898                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003BA80                            		even
0003BA80                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003BC38 00                         		even
0003BC38                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BD82                            		even
0003BD82                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003C00C                            		even
0003C00C                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C630                            		even
0003C630                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C826                            		even
0003C826                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CE44                            		even
0003CE44                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003D244 00                         		even
0003D244                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D540                            		even
0003D540                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D788                            		even
0003D788                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003DA20                            		even
0003DA20                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003DBFE                            		even
0003DBFE                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DD8C                            		even
0003DD8C                            ; ---------------------------------------------------------------------------
0003DD8C                            ; Compressed graphics - various
0003DD8C                            ; ---------------------------------------------------------------------------
0003DD8C                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003E2BC                            		even
0003E2BC                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E3B2                            		even
0003E3B2                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003E4B8                            		even
0003E4B8                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E5AC                            		even
0003E5AC                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003EAF0                            		even
0003EAF0                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003F156                            		even
0003F156                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003F206                            		even
0003F206                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F398                            		even
0003F398                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F4AC                            		even
0003F4AC                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F57E                            		even
0003F57E                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F9FA                            		even
0003F9FA                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003FABA                            		even
0003FABA                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003FC2E                            		even
0003FC2E                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003FF30                            		even
0003FF30                            ; ---------------------------------------------------------------------------
0003FF30                            ; Compressed graphics - continue screen
0003FF30                            ; ---------------------------------------------------------------------------
0003FF30                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
000401E0                            		even
000401E0                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0004041A                            		even
0004041A                            ; ---------------------------------------------------------------------------
0004041A                            ; Compressed graphics - animals
0004041A                            ; ---------------------------------------------------------------------------
0004041A                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040572                            		even
00040572                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
000406CE                            		even
000406CE                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0004084A                            		even
0004084A                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040966                            		even
00040966                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040A9C                            		even
00040A9C                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040BD6                            		even
00040BD6                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040D32                            		even
00040D32                            ; ---------------------------------------------------------------------------
00040D32                            ; Compressed graphics - primary patterns and block mappings
00040D32                            ; ---------------------------------------------------------------------------
00040D32                            Blk16_GHZ:	incbin	map16\ghz.bin
00041646                            		even
00041646                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042F54                            		even
00042F54                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
000442D4                            		even
000442D4                            Blk256_GHZ:	incbin	map256\ghz.bin
0004670E                            		even
0004670E                            Blk16_LZ:	incbin	map16\lz.bin
00046E48                            		even
00046E48                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004929C                            		even
0004929C                            Blk256_LZ:	incbin	map256\lz.bin
0004BC1C                            		even
0004BC1C                            Blk16_MZ:	incbin	map16\mz.bin
0004C384                            		even
0004C384                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004ECC0                            		even
0004ECC0                            Blk256_MZ:	incbin	map256\mz.bin
000504D6                            		even
000504D6                            Blk16_SLZ:	incbin	map16\slz.bin
00050BA0                            		even
00050BA0                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00052AF4                            		even
00052AF4                            Blk256_SLZ:	incbin	map256\slz.bin
0005316E                            		even
0005316E                            Blk16_SYZ:	incbin	map16\syz.bin
00053D94                            		even
00053D94                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00058326                            		even
00058326                            Blk256_SYZ:	incbin	map256\syz.bin
0005A382                            		even
0005A382                            Blk16_SBZ:	incbin	map16\sbz.bin
0005B2CA                            		even
0005B2CA                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005DC8E                            		even
0005DC8E                            Blk256_SBZ:	incbin	map256\sbz.bin
00060784                            		even
00060784                            Blk16_BHZ:	incbin	map16\bhz.bin
00061098                            		even
00061098                            Nem_BHZ_1st:	incbin	artnem\8x8bhz1.bin	; GHZ primary patterns
000626AA                            		even
000626AA                            Nem_BHZ_2nd:	incbin	artnem\8x8bhz2.bin	; GHZ secondary patterns
00063A3E                            		even
00063A3E                            Blk256_BHZ:	incbin	map256\bhz.bin
00065B8E                            		even
00065B8E                            ; ---------------------------------------------------------------------------
00065B8E                            ; Compressed graphics - bosses and ending sequence
00065B8E                            ; ---------------------------------------------------------------------------
00065B8E                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000663A8 00                         		even
000663A8                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
000669F6                            		even
000669F6                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00066A70                            		even
00066A70                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00066D5A                            		even
00066D5A                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000675DE                            		even
000675DE                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00068334 00                         		even
00068334                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00068A9C                            		even
00068A9C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006901C                            		even
0006901C                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006913C                            		even
0006913C                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006933A                            		even
0006933A                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006A518                            		even
0006A518                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006AE5C                            		even
0006AE5C                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006B232                            		even
0006B232                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006B7C2                            		even
0006B7C2                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006BA4A                            		even
0006BA4A                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006C038 00                         		even
0006C038                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006C2C0                            		even
0006C2C0                            		incbin	misc\padding2.bin
0006C3C4                            		even
0006C3C4                            ; ---------------------------------------------------------------------------
0006C3C4                            ; Collision data
0006C3C4                            ; ---------------------------------------------------------------------------
0006C3C4                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006C4C4                            		even
0006C4C4                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006D4C4                            		even
0006D4C4                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006E4C4                            		even
0006E4C4                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006E67C 00                         		even
0006E67C                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006E7E4                            		even
0006E7E4                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006E974 00                         		even
0006E974                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006EB68                            		even
0006EB68                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006ED6E                            		even
0006ED6E                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006F00C                            		even
0006F00C                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
0006F1C4 00                         		even
0006F1C4                            ; ---------------------------------------------------------------------------
0006F1C4                            ; Special layouts
0006F1C4                            ; ---------------------------------------------------------------------------
0006F1C4                            SS_1:		incbin	sslayout\1.bin
0006F40C                            		even
0006F40C                            SS_2:		incbin	sslayout\2.bin
0006F7C4                            		even
0006F7C4                            SS_3:		incbin	sslayout\3.bin
0006FB20                            		even
0006FB20                            SS_4:		incbin	sslayout\4.bin
0006FFFA                            		even
0006FFFA                            SS_5:		incbin	sslayout\5.bin
000704AA                            		even
000704AA                            SS_6:		incbin	sslayout\6.bin
0007079C                            		even
0007079C                            ; ---------------------------------------------------------------------------
0007079C                            ; Animated uncompressed graphics
0007079C                            ; ---------------------------------------------------------------------------
0007079C                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0007099C                            		even
0007099C                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00070D9C                            		even
00070D9C                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0007121C                            		even
0007121C                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0007151C                            		even
0007151C                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00071B1C                            		even
00071B1C                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00071E1C                            		even
00071E1C                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0007289C                            		even
0007289C                            
0007289C                            ; ---------------------------------------------------------------------------
0007289C                            ; Level	layout index
0007289C                            ; ---------------------------------------------------------------------------
0007289C 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000728A2 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000728A8 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000728AE 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000728B4 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000728BA 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
000728C0 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
000728C6 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
000728CC 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
000728D2 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
000728D8 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
000728DE 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
000728E4 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000728EA 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000728F0 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000728F6 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
000728FC 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00072902 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00072908 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007290E 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00072914 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007291A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00072920 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00072926 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007292C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00072932 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00072938 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007293E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00072944 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
0007294A 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
00072950 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
00072956 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007295C                            
0007295C                            Level_GHZ1:	incbin	levels\ghz1.bin
00072A4E                            		even
00072A4E 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00072A52                            Level_GHZ2:	incbin	levels\ghz2.bin
00072B1A                            		even
00072B1A 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00072B1E                            Level_GHZ3:	incbin	levels\ghz3.bin
00072C40                            		even
00072C40                            Level_GHZbg:	incbin	levels\ghzbg.bin
00072C62                            		even
00072C62 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00072C66 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00072C6A                            
00072C6A                            Level_LZ1:	incbin	levels\lz1.bin
00072D6C                            		even
00072D6C                            Level_LZbg:	incbin	levels\lzbg.bin
00072E6E                            		even
00072E6E 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00072E72                            Level_LZ2:	incbin	levels\lz2.bin
00072F0C                            		even
00072F0C 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00072F10                            Level_LZ3:	incbin	levels\lz3.bin
0007302A                            		even
0007302A 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007302E                            Level_SBZ3:	incbin	levels\sbz3.bin
000730E8                            		even
000730E8 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000730EC                            
000730EC                            Level_MZ1:	incbin	levels\mz1.bin
0007318A                            		even
0007318A                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00073204                            		even
00073204                            Level_MZ2:	incbin	levels\mz2.bin
000732A8                            		even
000732A8                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0007333A                            		even
0007333A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007333E                            Level_MZ3:	incbin	levels\mz3.bin
00073420                            		even
00073420                            Level_MZ3bg:	incbin	levels\mz3bg.bin
000734C4 00                         		even
000734C4 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000734C8 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000734CC                            
000734CC                            Level_SLZ1:	incbin	levels\slz1.bin
000735DE                            		even
000735DE                            Level_SLZbg:	incbin	levels\slzbg.bin
000735F8                            		even
000735F8                            Level_SLZ2:	incbin	levels\slz2.bin
000736E8                            		even
000736E8                            Level_SLZ3:	incbin	levels\slz3.bin
00073802                            		even
00073802 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00073806                            
00073806                            Level_SYZ1:	incbin	levels\syz1.bin
000738C2 00                         		even
000738C2                            Level_SYZbg:	incbin	levels\syzbg.bin
000738FC                            		even
000738FC 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00073900                            Level_SYZ2:	incbin	levels\syz2.bin
00073A04                            		even
00073A04 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00073A08                            Level_SYZ3:	incbin	levels\syz3.bin
00073B62 00                         		even
00073B62 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00073B66 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00073B6A                            
00073B6A                            Level_SBZ1:	incbin	levels\sbz1.bin
00073C8C                            		even
00073C8C                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00073CCA                            		even
00073CCA                            Level_SBZ2:	incbin	levels\sbz2.bin
00073E0C                            		even
00073E0C                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00073F76                            		even
00073F76 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00073F7A 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00073F7E                            Level_End:	incbin	levels\ending.bin
00073FAE 00                         		even
00073FAE 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00073FB2                            Level_BHZ1:	incbin	levels\bhz1.bin
000740A4                            		even
000740A4                            
000740A4                            Level_BHZ2:	incbin	levels\bhz2.bin
0007416C                            		even
0007416C                            
0007416C                            Level_BHZ3:	incbin	levels\bhz3.bin
0007428E                            		even
0007428E                            Level_BHZbg:	incbin	levels\bhzbg.bin
000742B0                            		even
000742B0                            ; ---------------------------------------------------------------------------
000742B0                            ; Animated uncompressed giant ring graphics
000742B0                            ; ---------------------------------------------------------------------------
000742B0                            Art_BigRing:	incbin	artunc\bigring.bin
00074EF0                            		even
00074EF0                            
00074EF0                            		incbin	misc\padding3.bin
00074F8C                            		even
00074F8C                            
00074F8C                            ; ---------------------------------------------------------------------------
00074F8C                            ; Sprite locations index
00074F8C                            ; ---------------------------------------------------------------------------
00074F8C 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074F90 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074F94 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074F98 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074F9C 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FA0 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FA4 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FA8 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FAC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FB0 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FB4 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FB8 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FBC 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FC0 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FC4 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FC8 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FCC 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FD0 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FD4 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FD8 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FDC 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FE0 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FE4 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FE8 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FEC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FF0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FF4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FF8 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074FFC 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075000 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075004 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075008 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007500C                            ObjPos_LZxpf_Index:
0007500C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00075010 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
00075014 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
00075018 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
0007501C                            
0007501C                            ObjPos_SBZ1pf_Index:
0007501C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00075020 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
00075024 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
00075028 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
0007502C FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00075032                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0007587E                            		even
0007587E                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00075B48                            		even
00075B48                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00076514                            		even
00076514                            ObjPos_LZ1:	incbin	objpos\lz1.bin
000768BC                            		even
000768BC                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00076BF2                            		even
00076BF2                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00077108                            		even
00077108                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000775A0                            		even
000775A0                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000775D2                            		even
000775D2                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00077604                            		even
00077604                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00077636                            		even
00077636                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00077668                            		even
00077668                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000776B2                            		even
000776B2                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000776F0                            		even
000776F0                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000779EA                            		even
000779EA                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00077E94                            		even
00077E94                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007840A                            		even
0007840A                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00078434                            		even
00078434                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007889C                            		even
0007889C                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00078E7E                            		even
00078E7E                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000794F0                            		even
000794F0                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00079A5A                            		even
00079A5A                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0007A060                            		even
0007A060                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007A79E                            		even
0007A79E                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007AE7C                            		even
0007AE7C                            ObjPos_FZ:	incbin	objpos\fz.bin
0007AEC4                            		even
0007AEC4                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007AEF6                            		even
0007AEF6                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007AF28                            		even
0007AF28                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007AF5A                            		even
0007AF5A                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007AF8C                            		even
0007AF8C                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007AFBE                            		even
0007AFBE                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007AFF6                            		even
0007AFF6                            ObjPos_End:	incbin	objpos\ending.bin
0007B152                            		even
0007B152                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007B758                            		even
0007B758                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007BD1C                            		even
0007BD1C                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007C3D6                            		even
0007C3D6 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007C3DC                            ; ---------------------------------------------------------------------------
0007C3DC                            		incbin	misc\padding4.bin
0007CA06                            		even
0007CA06                            
0007CA06 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007CA0A 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0007CA0E 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007CA12 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007CA16 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0007CA1A 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007CA1E                            ; ---------------------------------------------------------------------------
0007CA1E                            ; PSG instruments used in music
0007CA1E                            ; ---------------------------------------------------------------------------
0007CA1E 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007CA2A 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007CA36 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007CA42                            
0007CA42 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007CA52 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007CA59                            
0007CA59 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007CA60                            
0007CA60 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007CA70 80                                     dc.b    $80
0007CA71                            
0007CA71 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007CA7C                            
0007CA7C 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007CA8C 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007CA9C 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007CAA6                            
0007CAA6 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007CAB5                            
0007CAB5 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007CAC5 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007CAD1                            
0007CAD1 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007CAE1 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007CAF1 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007CAF9                            
0007CAF9 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007CB09 80                                     dc.b    $80
0007CB0A                            
0007CB0A 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007CB12                            ; ---------------------------------------------------------------------------
0007CB12                            ; Music	Pointers
0007CB12                            ; ---------------------------------------------------------------------------
0007CB12 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007CB1A 0000 0000 0000 0000        		dc.l Music83, Music84
0007CB22 0000 0000 0000 0000        		dc.l Music85, Music86
0007CB2A 0000 0000 0000 0000        		dc.l Music87, Music88
0007CB32 0000 0000 0000 0000        		dc.l Music89, Music8A
0007CB3A 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007CB42 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007CB4A 0000 0000 0000 0000        		dc.l Music8F, Music90
0007CB52 0000 0000 0000 0000        		dc.l Music91, Music92
0007CB5A 0000 0000 0000 0000        		dc.l Music93, Music94
0007CB62 0000 0000 0000 0000        		dc.l Music95, Music96
0007CB6A 0000 0000 0000 0000        		dc.l Music97, Music98
0007CB72 0000 0000 0000 0000        		dc.l Music99, Music9A
0007CB7A 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007CB82 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007CB8A 0000 0000                  		dc.l Music9F
0007CB8E                            ; ---------------------------------------------------------------------------
0007CB8E                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0007CB8E                            ; ---------------------------------------------------------------------------
0007CB8E 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007CB9E 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0007CBAE 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0007CBBE 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007CBCE 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007CBDE 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007CBEE 9090 9090                  		dc.b $90, $90, $90, $90
0007CBF2                            
0007CBF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CBF2                            
0007CBF2                            
0007CBF2                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007CBF2                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
0007CBF2 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; if in 60hz mode, branch
0007CBF6 6A00                       		bpl.s	@main
0007CBF8 7000                       		moveq	#0,d0			; PAL song timer "optimization"
0007CBFA 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
0007CBFE 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
0007CC02 4840                       		swap	d0
0007CC04 4A40                       		tst.w	d0
0007CC06 6600                       		bne.s	@main
0007CC08 6100 0000                  		bsr.w	@main
0007CC0C                            @main:
0007CC0C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007CC14 4E71                       		nop
0007CC16 4E71                       		nop
0007CC18 4E71                       		nop
0007CC1A                            ; loc_71B5A:
0007CC1A                            @wait:
0007CC1A 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007CC22 66F6                       		bne.s	@wait
0007CC24                            
0007CC24 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007CC2C 6700                       		beq.s	loc_71B82
0007CC2E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007CC36 4E71                       		nop
0007CC38 4E71                       		nop
0007CC3A 4E71                       		nop
0007CC3C 4E71                       		nop
0007CC3E 4E71                       		nop
0007CC40 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
0007CC42                            ; ===========================================================================
0007CC42                            
0007CC42                            loc_71B82:
0007CC42 4DF9 00FF F000             		lea	($FFF000).l,a6
0007CC48 422E 000E                  		clr.b	$E(a6)
0007CC4C 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007CC50 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007CC54 532E 0001                  		subq.b	#1,1(a6)
0007CC58 6600                       		bne.s	loc_71B9E
0007CC5A 4EBA 0000                  		jsr	sub_7260C(pc)
0007CC5E                            
0007CC5E                            loc_71B9E:
0007CC5E 102E 0004                  		move.b	4(a6),d0
0007CC62 6700                       		beq.s	loc_71BA8
0007CC64 4EBA 0000                  		jsr	sub_72504(pc)
0007CC68                            
0007CC68                            loc_71BA8:
0007CC68 4A2E 0024                  		tst.b	$24(a6)
0007CC6C 6700                       		beq.s	loc_71BB2
0007CC6E 4EBA 0000                  		jsr	sub_7267C(pc)
0007CC72                            
0007CC72                            loc_71BB2:
0007CC72 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007CC76 6700                       		beq.s	loc_71BBC	; if not, branch
0007CC78 4EBA 0000                  		jsr	Sound_Play(pc)
0007CC7C                            
0007CC7C                            loc_71BBC:
0007CC7C 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007CC82 6700                       		beq.s	loc_71BC8
0007CC84 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007CC88                            
0007CC88                            loc_71BC8:
0007CC88 4BEE 0040                  		lea	$40(a6),a5
0007CC8C 4A15                       		tst.b	(a5)
0007CC8E 6A00                       		bpl.s	loc_71BD4
0007CC90 4EBA 0000                  		jsr	sub_71C4E(pc)
0007CC94                            
0007CC94                            loc_71BD4:
0007CC94 422E 0008                  		clr.b	8(a6)
0007CC98 7E05                       		moveq	#5,d7
0007CC9A                            
0007CC9A                            loc_71BDA:
0007CC9A DAFC 0030                  		adda.w	#$30,a5
0007CC9E 4A15                       		tst.b	(a5)
0007CCA0 6A00                       		bpl.s	loc_71BE6
0007CCA2 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CCA6                            
0007CCA6                            loc_71BE6:
0007CCA6 51CF FFF2                  		dbf	d7,loc_71BDA
0007CCAA                            
0007CCAA 7E02                       		moveq	#2,d7
0007CCAC                            
0007CCAC                            loc_71BEC:
0007CCAC DAFC 0030                  		adda.w	#$30,a5
0007CCB0 4A15                       		tst.b	(a5)
0007CCB2 6A00                       		bpl.s	loc_71BF8
0007CCB4 4EBA 0000                  		jsr	sub_72850(pc)
0007CCB8                            
0007CCB8                            loc_71BF8:
0007CCB8 51CF FFF2                  		dbf	d7,loc_71BEC
0007CCBC                            
0007CCBC 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007CCC2 7E02                       		moveq	#2,d7
0007CCC4                            
0007CCC4                            loc_71C04:
0007CCC4 DAFC 0030                  		adda.w	#$30,a5
0007CCC8 4A15                       		tst.b	(a5)
0007CCCA 6A00                       		bpl.s	loc_71C10
0007CCCC 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CCD0                            
0007CCD0                            loc_71C10:
0007CCD0 51CF FFF2                  		dbf	d7,loc_71C04
0007CCD4                            
0007CCD4 7E02                       		moveq	#2,d7
0007CCD6                            
0007CCD6                            loc_71C16:
0007CCD6 DAFC 0030                  		adda.w	#$30,a5
0007CCDA 4A15                       		tst.b	(a5)
0007CCDC 6A00                       		bpl.s	loc_71C22
0007CCDE 4EBA 0000                  		jsr	sub_72850(pc)
0007CCE2                            
0007CCE2                            loc_71C22:
0007CCE2 51CF FFF2                  		dbf	d7,loc_71C16
0007CCE6 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007CCEC DAFC 0030                  		adda.w	#$30,a5
0007CCF0 4A15                       		tst.b	(a5)
0007CCF2 6A00                       		bpl.s	loc_71C38
0007CCF4 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CCF8                            
0007CCF8                            loc_71C38:
0007CCF8 DAFC 0030                  		adda.w	#$30,a5
0007CCFC 4A15                       		tst.b	(a5)
0007CCFE 6A00                       		bpl.s	loc_71C44
0007CD00 4EBA 0000                  		jsr	sub_72850(pc)
0007CD04                            
0007CD04                            loc_71C44:
0007CD04 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007CD0C 4E75                       		rts	
0007CD0E                            ; End of function sub_71B4C
0007CD0E                            
0007CD0E                            
0007CD0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD0E                            
0007CD0E                            
0007CD0E                            sub_71C4E:				; XREF: sub_71B4C
0007CD0E 532D 000E                  		subq.b	#1,$E(a5)
0007CD12 6600                       		bne.s	locret_71CAA
0007CD14 1D7C 0080 0008             		move.b	#$80,8(a6)
0007CD1A 286D 0004                  		movea.l	4(a5),a4
0007CD1E                            
0007CD1E                            loc_71C5E:
0007CD1E 7A00                       		moveq	#0,d5
0007CD20 1A1C                       		move.b	(a4)+,d5
0007CD22 0C05 00E0                  		cmpi.b	#-$20,d5
0007CD26 6500                       		bcs.s	loc_71C6E
0007CD28 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CD2C 60F0                       		bra.s	loc_71C5E
0007CD2E                            ; ===========================================================================
0007CD2E                            
0007CD2E                            loc_71C6E:
0007CD2E 4A05                       		tst.b	d5
0007CD30 6A00                       		bpl.s	loc_71C84
0007CD32 1B45 0010                  		move.b	d5,$10(a5)
0007CD36 1A1C                       		move.b	(a4)+,d5
0007CD38 6A00                       		bpl.s	loc_71C84
0007CD3A 534C                       		subq.w	#1,a4
0007CD3C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CD42 6000                       		bra.s	loc_71C88
0007CD44                            ; ===========================================================================
0007CD44                            
0007CD44                            loc_71C84:
0007CD44 4EBA 0000                  		jsr	sub_71D40(pc)
0007CD48                            
0007CD48                            loc_71C88:
0007CD48 2B4C 0004                  		move.l	a4,4(a5)
0007CD4C 0815 0002                  		btst	#2,(a5)
0007CD50 6600                       		bne.s	locret_71CAA
0007CD52 7000                       		moveq	#0,d0
0007CD54 102D 0010                  		move.b	$10(a5),d0
0007CD58 0C00 0080                  		cmpi.b	#$80,d0
0007CD5C 6700                       		beq.s	locret_71CAA
0007CD5E 0800 0003                  		btst	#3,d0
0007CD62 6600                       		bne.s	loc_71CAC
0007CD64 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007CD6A                            
0007CD6A                            locret_71CAA:
0007CD6A 4E75                       		rts	
0007CD6C                            ; ===========================================================================
0007CD6C                            
0007CD6C                            loc_71CAC:
0007CD6C 0400 0088                  		subi.b	#$88,d0
0007CD70 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007CD74 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007CD7A 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007CD82 4E75                       		rts	
0007CD84                            ; End of function sub_71C4E
0007CD84                            
0007CD84                            ; ===========================================================================
0007CD84 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007CD8A                            
0007CD8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD8A                            
0007CD8A                            
0007CD8A                            sub_71CCA:				; XREF: sub_71B4C
0007CD8A 532D 000E                  		subq.b	#1,$E(a5)
0007CD8E 6600                       		bne.s	loc_71CE0
0007CD90 0895 0004                  		bclr	#4,(a5)
0007CD94 4EBA 0000                  		jsr	sub_71CEC(pc)
0007CD98 4EBA 0000                  		jsr	sub_71E18(pc)
0007CD9C 6000 0000                  		bra.w	loc_726E2
0007CDA0                            ; ===========================================================================
0007CDA0                            
0007CDA0                            loc_71CE0:
0007CDA0 4EBA 0000                  		jsr	sub_71D9E(pc)
0007CDA4 4EBA 0000                  		jsr	sub_71DC6(pc)
0007CDA8 6000 0000                  		bra.w	loc_71E24
0007CDAC                            ; End of function sub_71CCA
0007CDAC                            
0007CDAC                            
0007CDAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CDAC                            
0007CDAC                            
0007CDAC                            sub_71CEC:				; XREF: sub_71CCA
0007CDAC 286D 0004                  		movea.l	4(a5),a4
0007CDB0 0895 0001                  		bclr	#1,(a5)
0007CDB4                            
0007CDB4                            loc_71CF4:
0007CDB4 7A00                       		moveq	#0,d5
0007CDB6 1A1C                       		move.b	(a4)+,d5
0007CDB8 0C05 00E0                  		cmpi.b	#-$20,d5
0007CDBC 6500                       		bcs.s	loc_71D04
0007CDBE 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CDC2 60F0                       		bra.s	loc_71CF4
0007CDC4                            ; ===========================================================================
0007CDC4                            
0007CDC4                            loc_71D04:
0007CDC4 4EBA 0000                  		jsr	sub_726FE(pc)
0007CDC8 4A05                       		tst.b	d5
0007CDCA 6A00                       		bpl.s	loc_71D1A
0007CDCC 4EBA 0000                  		jsr	sub_71D22(pc)
0007CDD0 1A1C                       		move.b	(a4)+,d5
0007CDD2 6A00                       		bpl.s	loc_71D1A
0007CDD4 534C                       		subq.w	#1,a4
0007CDD6 6000 0000                  		bra.w	sub_71D60
0007CDDA                            ; ===========================================================================
0007CDDA                            
0007CDDA                            loc_71D1A:
0007CDDA 4EBA 0000                  		jsr	sub_71D40(pc)
0007CDDE 6000 0000                  		bra.w	sub_71D60
0007CDE2                            ; End of function sub_71CEC
0007CDE2                            
0007CDE2                            
0007CDE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CDE2                            
0007CDE2                            
0007CDE2                            sub_71D22:				; XREF: sub_71CEC
0007CDE2 0405 0080                  		subi.b	#$80,d5
0007CDE6 6700                       		beq.s	loc_71D58
0007CDE8 DA2D 0008                  		add.b	8(a5),d5
0007CDEC 0245 007F                  		andi.w	#$7F,d5
0007CDF0 E34D                       		lsl.w	#1,d5
0007CDF2 41FA 0000                  		lea	word_72790(pc),a0
0007CDF6 3C30 5000                  		move.w	(a0,d5.w),d6
0007CDFA 3B46 0010                  		move.w	d6,$10(a5)
0007CDFE 4E75                       		rts	
0007CE00                            ; End of function sub_71D22
0007CE00                            
0007CE00                            
0007CE00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CE00                            
0007CE00                            
0007CE00                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007CE00 1005                       		move.b	d5,d0
0007CE02 122D 0002                  		move.b	2(a5),d1
0007CE06                            
0007CE06                            loc_71D46:
0007CE06 5301                       		subq.b	#1,d1
0007CE08 6700                       		beq.s	loc_71D4E
0007CE0A D005                       		add.b	d5,d0
0007CE0C 60F8                       		bra.s	loc_71D46
0007CE0E                            ; ===========================================================================
0007CE0E                            
0007CE0E                            loc_71D4E:
0007CE0E 1B40 000F                  		move.b	d0,$F(a5)
0007CE12 1B40 000E                  		move.b	d0,$E(a5)
0007CE16 4E75                       		rts	
0007CE18                            ; End of function sub_71D40
0007CE18                            
0007CE18                            ; ===========================================================================
0007CE18                            
0007CE18                            loc_71D58:				; XREF: sub_71D22
0007CE18 08D5 0001                  		bset	#1,(a5)
0007CE1C 426D 0010                  		clr.w	$10(a5)
0007CE20                            
0007CE20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CE20                            
0007CE20                            
0007CE20                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007CE20 2B4C 0004                  		move.l	a4,4(a5)
0007CE24 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CE2A 0815 0004                  		btst	#4,(a5)
0007CE2E 6600                       		bne.s	locret_71D9C
0007CE30 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007CE36 422D 000C                  		clr.b	$C(a5)
0007CE3A 0815 0003                  		btst	#3,(a5)
0007CE3E 6700                       		beq.s	locret_71D9C
0007CE40 206D 0014                  		movea.l	$14(a5),a0
0007CE44 1B58 0018                  		move.b	(a0)+,$18(a5)
0007CE48 1B58 0019                  		move.b	(a0)+,$19(a5)
0007CE4C 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007CE50 1018                       		move.b	(a0)+,d0
0007CE52 E208                       		lsr.b	#1,d0
0007CE54 1B40 001B                  		move.b	d0,$1B(a5)
0007CE58 426D 001C                  		clr.w	$1C(a5)
0007CE5C                            
0007CE5C                            locret_71D9C:
0007CE5C 4E75                       		rts	
0007CE5E                            ; End of function sub_71D60
0007CE5E                            
0007CE5E                            
0007CE5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CE5E                            
0007CE5E                            
0007CE5E                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007CE5E 4A2D 0012                  		tst.b	$12(a5)
0007CE62 6700                       		beq.s	locret_71DC4
0007CE64 532D 0012                  		subq.b	#1,$12(a5)
0007CE68 6600                       		bne.s	locret_71DC4
0007CE6A 08D5 0001                  		bset	#1,(a5)
0007CE6E 4A2D 0001                  		tst.b	1(a5)
0007CE72 6B00 0000                  		bmi.w	loc_71DBE
0007CE76 4EBA 0000                  		jsr	sub_726FE(pc)
0007CE7A 584F                       		addq.w	#4,sp
0007CE7C 4E75                       		rts	
0007CE7E                            ; ===========================================================================
0007CE7E                            
0007CE7E                            loc_71DBE:
0007CE7E 4EBA 0000                  		jsr	sub_729A0(pc)
0007CE82 584F                       		addq.w	#4,sp
0007CE84                            
0007CE84                            locret_71DC4:
0007CE84 4E75                       		rts	
0007CE86                            ; End of function sub_71D9E
0007CE86                            
0007CE86                            
0007CE86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CE86                            
0007CE86                            
0007CE86                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007CE86 584F                       		addq.w	#4,sp
0007CE88 0815 0003                  		btst	#3,(a5)
0007CE8C 6700                       		beq.s	locret_71E16
0007CE8E 4A2D 0018                  		tst.b	$18(a5)
0007CE92 6700                       		beq.s	loc_71DDA
0007CE94 532D 0018                  		subq.b	#1,$18(a5)
0007CE98 4E75                       		rts	
0007CE9A                            ; ===========================================================================
0007CE9A                            
0007CE9A                            loc_71DDA:
0007CE9A 532D 0019                  		subq.b	#1,$19(a5)
0007CE9E 6700                       		beq.s	loc_71DE2
0007CEA0 4E75                       		rts	
0007CEA2                            ; ===========================================================================
0007CEA2                            
0007CEA2                            loc_71DE2:
0007CEA2 206D 0014                  		movea.l	$14(a5),a0
0007CEA6 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007CEAC 4A2D 001B                  		tst.b	$1B(a5)
0007CEB0 6600                       		bne.s	loc_71DFE
0007CEB2 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007CEB8 442D 001A                  		neg.b	$1A(a5)
0007CEBC 4E75                       		rts	
0007CEBE                            ; ===========================================================================
0007CEBE                            
0007CEBE                            loc_71DFE:
0007CEBE 532D 001B                  		subq.b	#1,$1B(a5)
0007CEC2 1C2D 001A                  		move.b	$1A(a5),d6
0007CEC6 4886                       		ext.w	d6
0007CEC8 DC6D 001C                  		add.w	$1C(a5),d6
0007CECC 3B46 001C                  		move.w	d6,$1C(a5)
0007CED0 DC6D 0010                  		add.w	$10(a5),d6
0007CED4 594F                       		subq.w	#4,sp
0007CED6                            
0007CED6                            locret_71E16:
0007CED6 4E75                       		rts	
0007CED8                            ; End of function sub_71DC6
0007CED8                            
0007CED8                            
0007CED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CED8                            
0007CED8                            
0007CED8                            sub_71E18:				; XREF: sub_71CCA
0007CED8 0815 0001                  		btst	#1,(a5)
0007CEDC 6600                       		bne.s	locret_71E48
0007CEDE 3C2D 0010                  		move.w	$10(a5),d6
0007CEE2 6700                       		beq.s	loc_71E4A
0007CEE4                            
0007CEE4                            loc_71E24:				; XREF: sub_71CCA
0007CEE4 102D 001E                  		move.b	$1E(a5),d0
0007CEE8 4880                       		ext.w	d0
0007CEEA DC40                       		add.w	d0,d6
0007CEEC 0815 0002                  		btst	#2,(a5)
0007CEF0 6600                       		bne.s	locret_71E48
0007CEF2 3206                       		move.w	d6,d1
0007CEF4 E049                       		lsr.w	#8,d1
0007CEF6 103C 00A4                  		move.b	#-$5C,d0
0007CEFA 4EBA 0000                  		jsr	sub_72722(pc)
0007CEFE 1206                       		move.b	d6,d1
0007CF00 103C 00A0                  		move.b	#-$60,d0
0007CF04 4EBA 0000                  		jsr	sub_72722(pc)
0007CF08                            
0007CF08                            locret_71E48:
0007CF08 4E75                       		rts	
0007CF0A                            ; ===========================================================================
0007CF0A                            
0007CF0A                            loc_71E4A:
0007CF0A 08D5 0001                  		bset	#1,(a5)
0007CF0E 4E75                       		rts	
0007CF10                            ; End of function sub_71E18
0007CF10                            
0007CF10                            ; ===========================================================================
0007CF10                            
0007CF10                            loc_71E50:				; XREF: sub_71B4C
0007CF10 6B00                       		bmi.s	loc_71E94
0007CF12 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007CF18 6700 0000                  		beq.w	loc_71EFE
0007CF1C 1D7C 0002 0003             		move.b	#2,3(a6)
0007CF22 7602                       		moveq	#2,d3
0007CF24 103C 00B4                  		move.b	#-$4C,d0
0007CF28 7200                       		moveq	#0,d1
0007CF2A                            
0007CF2A                            loc_71E6A:
0007CF2A 4EBA 0000                  		jsr	sub_7272E(pc)
0007CF2E 4EBA 0000                  		jsr	sub_72764(pc)
0007CF32 5200                       		addq.b	#1,d0
0007CF34 51CB FFF4                  		dbf	d3,loc_71E6A
0007CF38                            
0007CF38 7602                       		moveq	#2,d3
0007CF3A 7028                       		moveq	#$28,d0
0007CF3C                            
0007CF3C                            loc_71E7C:
0007CF3C 1203                       		move.b	d3,d1
0007CF3E 4EBA 0000                  		jsr	sub_7272E(pc)
0007CF42 5801                       		addq.b	#4,d1
0007CF44 4EBA 0000                  		jsr	sub_7272E(pc)
0007CF48 51CB FFF2                  		dbf	d3,loc_71E7C
0007CF4C                            
0007CF4C 4EBA 0000                  		jsr	sub_729B6(pc)
0007CF50 6000 FDB2                  		bra.w	loc_71C44
0007CF54                            ; ===========================================================================
0007CF54                            
0007CF54                            loc_71E94:				; XREF: loc_71E50
0007CF54 422E 0003                  		clr.b	3(a6)
0007CF58 7630                       		moveq	#$30,d3
0007CF5A 4BEE 0040                  		lea	$40(a6),a5
0007CF5E 7806                       		moveq	#6,d4
0007CF60                            
0007CF60                            loc_71EA0:
0007CF60 0815 0007                  		btst	#7,(a5)
0007CF64 6700                       		beq.s	loc_71EB8
0007CF66 0815 0002                  		btst	#2,(a5)
0007CF6A 6600                       		bne.s	loc_71EB8
0007CF6C 103C 00B4                  		move.b	#-$4C,d0
0007CF70 122D 000A                  		move.b	$A(a5),d1
0007CF74 4EBA 0000                  		jsr	sub_72722(pc)
0007CF78                            
0007CF78                            loc_71EB8:
0007CF78 DAC3                       		adda.w	d3,a5
0007CF7A 51CC FFE4                  		dbf	d4,loc_71EA0
0007CF7E                            
0007CF7E 4BEE 0220                  		lea	$220(a6),a5
0007CF82 7802                       		moveq	#2,d4
0007CF84                            
0007CF84                            loc_71EC4:
0007CF84 0815 0007                  		btst	#7,(a5)
0007CF88 6700                       		beq.s	loc_71EDC
0007CF8A 0815 0002                  		btst	#2,(a5)
0007CF8E 6600                       		bne.s	loc_71EDC
0007CF90 103C 00B4                  		move.b	#-$4C,d0
0007CF94 122D 000A                  		move.b	$A(a5),d1
0007CF98 4EBA 0000                  		jsr	sub_72722(pc)
0007CF9C                            
0007CF9C                            loc_71EDC:
0007CF9C DAC3                       		adda.w	d3,a5
0007CF9E 51CC FFE4                  		dbf	d4,loc_71EC4
0007CFA2                            
0007CFA2 4BEE 0340                  		lea	$340(a6),a5
0007CFA6 0815 0007                  		btst	#7,(a5)
0007CFAA 6700                       		beq.s	loc_71EFE
0007CFAC 0815 0002                  		btst	#2,(a5)
0007CFB0 6600                       		bne.s	loc_71EFE
0007CFB2 103C 00B4                  		move.b	#-$4C,d0
0007CFB6 122D 000A                  		move.b	$A(a5),d1
0007CFBA 4EBA 0000                  		jsr	sub_72722(pc)
0007CFBE                            
0007CFBE                            loc_71EFE:
0007CFBE 6000 FD44                  		bra.w	loc_71C44
0007CFC2                            
0007CFC2                            ; ---------------------------------------------------------------------------
0007CFC2                            ; Subroutine to	play a sound or	music track
0007CFC2                            ; ---------------------------------------------------------------------------
0007CFC2                            
0007CFC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CFC2                            
0007CFC2                            
0007CFC2                            Sound_Play:				; XREF: sub_71B4C
0007CFC2 2079 0007 CA06             		movea.l	(Go_SoundTypes).l,a0
0007CFC8 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007CFCC 1616                       		move.b	0(a6),d3
0007CFCE 7802                       		moveq	#2,d4
0007CFD0                            
0007CFD0                            loc_71F12:
0007CFD0 1011                       		move.b	(a1),d0		; move track number to d0
0007CFD2 1200                       		move.b	d0,d1
0007CFD4 4219                       		clr.b	(a1)+
0007CFD6 0400 0081                  		subi.b	#$81,d0
0007CFDA 6500                       		bcs.s	loc_71F3E
0007CFDC 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007CFE2 6700                       		beq.s	loc_71F2C
0007CFE4 1D41 000A                  		move.b	d1,$A(a6)
0007CFE8 6000                       		bra.s	loc_71F3E
0007CFEA                            ; ===========================================================================
0007CFEA                            
0007CFEA                            loc_71F2C:
0007CFEA 0240 007F                  		andi.w	#$7F,d0
0007CFEE 1430 0000                  		move.b	(a0,d0.w),d2
0007CFF2 B403                       		cmp.b	d3,d2
0007CFF4 6500                       		bcs.s	loc_71F3E
0007CFF6 1602                       		move.b	d2,d3
0007CFF8 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007CFFC                            
0007CFFC                            loc_71F3E:
0007CFFC 51CC FFD2                  		dbf	d4,loc_71F12
0007D000                            
0007D000 4A03                       		tst.b	d3
0007D002 6B00                       		bmi.s	locret_71F4A
0007D004 1C83                       		move.b	d3,0(a6)
0007D006                            
0007D006                            locret_71F4A:
0007D006 4E75                       		rts	
0007D008                            ; End of function Sound_Play
0007D008                            
0007D008                            
0007D008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D008                            
0007D008                            
0007D008                            Sound_ChkValue:				; XREF: sub_71B4C
0007D008 7E00                       		moveq	#0,d7
0007D00A 1E2E 0009                  		move.b	9(a6),d7
0007D00E 6700 0000                  		beq.w	Sound_E4
0007D012 6A00                       		bpl.s	locret_71F8C
0007D014 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007D01A 0C07 009F                  		cmpi.b	#$9F,d7
0007D01E 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007D022 0C07 00A0                  		cmpi.b	#$A0,d7
0007D026 6500 0000                  		bcs.w	locret_71F8C
0007D02A 0C07 00CF                  		cmpi.b	#$CF,d7
0007D02E 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007D032 0C07 00D0                  		cmpi.b	#$D0,d7
0007D036 6500 0000                  		bcs.w	locret_71F8C
0007D03A 0C07 00E0                  		cmpi.b	#$E0,d7
0007D03E 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007D042 0C07 00E5                  		cmpi.b	#$E5,d7
0007D046 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007D048                            
0007D048                            locret_71F8C:
0007D048 4E75                       		rts	
0007D04A                            ; ===========================================================================
0007D04A                            
0007D04A                            Sound_E0toE5				; XREF: Sound_ChkValue
0007D04A 0407 00E0                  		subi.b	#$E0,d7
0007D04E E54F                       		lsl.w	#2,d7
0007D050 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007D054                            ; ===========================================================================
0007D054                            
0007D054                            Sound_ExIndex:
0007D054 6000 0000                  		bra.w	Sound_E0
0007D058                            ; ===========================================================================
0007D058 6000 0000                  		bra.w	Sound_E1
0007D05C                            ; ===========================================================================
0007D05C 6000 0000                  		bra.w	Sound_E2
0007D060                            ; ===========================================================================
0007D060 6000 0000                  		bra.w	Sound_E3
0007D064                            ; ===========================================================================
0007D064 6000 0000                  		bra.w	Sound_E4
0007D068                            ; ===========================================================================
0007D068 6000 0000                  		bra.w	Sound_E5
0007D06C                            ; ===========================================================================
0007D06C                            ; ---------------------------------------------------------------------------
0007D06C                            ; Play "Say-gaa" PCM sound
0007D06C                            ; ---------------------------------------------------------------------------
0007D06C                            
0007D06C                            Sound_E1:				  
0007D06C 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007D074 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007D07C 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
0007D080 51C8 FFFE                  		dbf	d0,*
0007D084 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007D08A 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007D090 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007D098                            PlayPCM_Loop:	  
0007D098 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D09E 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007D0A2 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007D0A6 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D0A8 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007D0AA 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007D0AE 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007D0B4 4EB8 1424                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007D0B8 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007D0BE 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007D0C0 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007D0C2                            return_PlayPCM: 
0007D0C2 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
0007D0CA 584F                       		addq.w	#4,sp 
0007D0CC 4E75                       		rts
0007D0CE                            		
0007D0CE                            ; ---------------------------------------------------------------------------
0007D0CE                            ; Play you are an idiot pcm sound
0007D0CE                            ; since the sfx already crashes the game forever load it here :V
0007D0CE                            ; ---------------------------------------------------------------------------
0007D0CE                            
0007D0CE                            Sound_E5: 
0007D0CE 4EB8 14FC                  		jsr	ClearScreen
0007D0D2 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007D0DA 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007D0E2                            
0007D0E2                            		;control port on a5
0007D0E2 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
0007D0E8 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007D0EE 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007D0F2 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
0007D0F6 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
0007D0FA                            		
0007D0FA 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007D0FE                            		
0007D0FE 2ABC 4000 0000             		move.l	#$40000000,(a5)
0007D104 41F9 0002 47D6             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0007D10A 4EB8 1678                  		jsr	NemDec
0007D10E 43F9 00FF 0000             		lea	($FF0000).l,a1
0007D114 41F9 0002 4778             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0007D11A 303C 0000                  		move.w	#0,d0
0007D11E 4EB8 1956                  		jsr	EniDec
0007D122 43F9 00FF 0000             		lea	($FF0000).l,a1
0007D128 203C 4304 0003             		move.l	#$43040003,d0
0007D12E 7223                       		moveq	#35,d1
0007D130 740D                       		moveq	#13,d2
0007D132 4EB8 1658                  		jsr	ShowVDPGraphics
0007D136 7014                       		moveq	#20,d0
0007D138 4EB8 231C                  		jsr	PalLoad2	; load pallet
0007D13C                            
0007D13C                            
0007D13C 4BF9 00C0 0004             		lea	($C00004).l,a5
0007D142 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
0007D146 7600                       		moveq	#0,d3				; make @palett jump to @start when done
0007D148 6000                       		bra.s	@palett
0007D14A                            @start:
0007D14A 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007D150 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
0007D156 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
0007D15E                            @loop:
0007D15E 44D5                       		move.w	(a5),ccr
0007D160 6B00                       		bmi.s	@vblank
0007D162                            
0007D162 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D168 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007D16C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007D170 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D172 66EA                       		bne.s	@loop				; if not zero, loop
0007D174 60D4                       		bra.s	@start
0007D176                            @vblank:
0007D176 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
0007D17C 6700                       		beq.s	@palett
0007D17E 5238 FE24                  		addq.b	#1,($FFFFFE24).w
0007D182                            @loop_vblank:
0007D182 44D5                       		move.w	(a5),ccr
0007D184 6AD8                       		bpl.s	@loop
0007D186                            
0007D186 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D18C 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007D190 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007D194 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D196 66EA                       		bne.s	@loop_vblank			; if not zero, loop
0007D198 60B0                       		bra.s	@start
0007D19A                            @palett:
0007D19A 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007D1A0                            
0007D1A0 4238 FE24                  		clr.b	($FFFFFE24).w
0007D1A4 4638 FE25                  		not.b	($FFFFFE25).w
0007D1A8 6700                       		beq.s	@not_black
0007D1AA 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007D1B0 6000                       		bra.s	@merge
0007D1B2                            	@not_black:
0007D1B2 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007D1B8                            	@merge:
0007D1B8 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007D1BC 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007D1C0 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
0007D1C4 3A9F                       		move.w	(sp)+,(a5)
0007D1C6                            		
0007D1C6 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007D1CA 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007D1CE 4A83                       		tst.l	d3
0007D1D0 66B0                       		bne.s	@loop_vblank
0007D1D2 6000 FF76                  		bra.w	@start
0007D1D6                            ; ===========================================================================
0007D1D6                            ; ---------------------------------------------------------------------------
0007D1D6                            ; Play music track $81-$9F
0007D1D6                            ; ---------------------------------------------------------------------------
0007D1D6                            
0007D1D6                            Sound_81to9F:				; XREF: Sound_ChkValue
0007D1D6 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007D1DA 6600                       		bne.s	loc_72024	; if not, branch
0007D1DC 4A2E 0027                  		tst.b	$27(a6)
0007D1E0 6600 0000                  		bne.w	loc_721B6
0007D1E4 4BEE 0040                  		lea	$40(a6),a5
0007D1E8 7009                       		moveq	#9,d0
0007D1EA                            
0007D1EA                            loc_71FE6:
0007D1EA 0895 0002                  		bclr	#2,(a5)
0007D1EE DAFC 0030                  		adda.w	#$30,a5
0007D1F2 51C8 FFF6                  		dbf	d0,loc_71FE6
0007D1F6                            
0007D1F6 4BEE 0220                  		lea	$220(a6),a5
0007D1FA 7005                       		moveq	#5,d0
0007D1FC                            
0007D1FC                            loc_71FF8:
0007D1FC 0895 0007                  		bclr	#7,(a5)
0007D200 DAFC 0030                  		adda.w	#$30,a5
0007D204 51C8 FFF6                  		dbf	d0,loc_71FF8
0007D208 4216                       		clr.b	0(a6)
0007D20A 204E                       		movea.l	a6,a0
0007D20C 43EE 03A0                  		lea	$3A0(a6),a1
0007D210 303C 0087                  		move.w	#$87,d0
0007D214                            
0007D214                            loc_72012:
0007D214 22D8                       		move.l	(a0)+,(a1)+
0007D216 51C8 FFFC                  		dbf	d0,loc_72012
0007D21A                            
0007D21A 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007D220 4216                       		clr.b	0(a6)
0007D222 6000                       		bra.s	loc_7202C
0007D224                            ; ===========================================================================
0007D224                            
0007D224                            loc_72024:
0007D224 422E 0027                  		clr.b	$27(a6)
0007D228 422E 0026                  		clr.b	$26(a6)
0007D22C                            
0007D22C                            loc_7202C:
0007D22C 4EBA 0000                  		jsr	sub_725CA(pc)
0007D230 2879 0007 CA16             		movea.l	(off_719A0).l,a4
0007D236 0407 0081                  		subi.b	#$81,d7
0007D23A 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007D240 2879 0007 CA0E             		movea.l	(Go_MusicIndex).l,a4
0007D246 E54F                       		lsl.w	#2,d7
0007D248 2874 7000                  		movea.l	(a4,d7.w),a4
0007D24C 7000                       		moveq	#0,d0
0007D24E 3014                       		move.w	(a4),d0
0007D250 D08C                       		add.l	a4,d0
0007D252 2D40 0018                  		move.l	d0,$18(a6)
0007D256 102C 0005                  		move.b	5(a4),d0
0007D25A 1D40 0028                  		move.b	d0,$28(a6)
0007D25E 4A2E 002A                  		tst.b	$2A(a6)
0007D262 6700                       		beq.s	loc_72068
0007D264 102E 0029                  		move.b	$29(a6),d0
0007D268                            
0007D268                            loc_72068:
0007D268 1D40 0002                  		move.b	d0,2(a6)
0007D26C 1D40 0001                  		move.b	d0,1(a6)
0007D270 7200                       		moveq	#0,d1
0007D272 264C                       		movea.l	a4,a3
0007D274 5C4C                       		addq.w	#6,a4
0007D276 7E00                       		moveq	#0,d7
0007D278 1E2B 0002                  		move.b	2(a3),d7
0007D27C 6700 0000                  		beq.w	loc_72114
0007D280 5307                       		subq.b	#1,d7
0007D282 123C 00C0                  		move.b	#-$40,d1
0007D286 182B 0004                  		move.b	4(a3),d4
0007D28A 7C30                       		moveq	#$30,d6
0007D28C 1A3C 0001                  		move.b	#1,d5
0007D290 43EE 0040                  		lea	$40(a6),a1
0007D294 45FA 0000                  		lea	byte_721BA(pc),a2
0007D298                            
0007D298                            loc_72098:
0007D298 08D1 0007                  		bset	#7,(a1)
0007D29C 135A 0001                  		move.b	(a2)+,1(a1)
0007D2A0 1344 0002                  		move.b	d4,2(a1)
0007D2A4 1346 000D                  		move.b	d6,$D(a1)
0007D2A8 1341 000A                  		move.b	d1,$A(a1)
0007D2AC 1345 000E                  		move.b	d5,$E(a1)
0007D2B0 7000                       		moveq	#0,d0
0007D2B2 301C                       		move.w	(a4)+,d0
0007D2B4 D08B                       		add.l	a3,d0
0007D2B6 2340 0004                  		move.l	d0,4(a1)
0007D2BA 335C 0008                  		move.w	(a4)+,8(a1)
0007D2BE D2C6                       		adda.w	d6,a1
0007D2C0 51CF FFD6                  		dbf	d7,loc_72098
0007D2C4 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007D2CA 6600                       		bne.s	loc_720D8
0007D2CC 702B                       		moveq	#$2B,d0
0007D2CE 7200                       		moveq	#0,d1
0007D2D0 4EBA 0000                  		jsr	sub_7272E(pc)
0007D2D4 6000 0000                  		bra.w	loc_72114
0007D2D8                            ; ===========================================================================
0007D2D8                            
0007D2D8                            loc_720D8:
0007D2D8 7028                       		moveq	#$28,d0
0007D2DA 7206                       		moveq	#6,d1
0007D2DC 4EBA 0000                  		jsr	sub_7272E(pc)
0007D2E0 103C 0042                  		move.b	#$42,d0
0007D2E4 727F                       		moveq	#$7F,d1
0007D2E6 4EBA 0000                  		jsr	sub_72764(pc)
0007D2EA 103C 004A                  		move.b	#$4A,d0
0007D2EE 727F                       		moveq	#$7F,d1
0007D2F0 4EBA 0000                  		jsr	sub_72764(pc)
0007D2F4 103C 0046                  		move.b	#$46,d0
0007D2F8 727F                       		moveq	#$7F,d1
0007D2FA 4EBA 0000                  		jsr	sub_72764(pc)
0007D2FE 103C 004E                  		move.b	#$4E,d0
0007D302 727F                       		moveq	#$7F,d1
0007D304 4EBA 0000                  		jsr	sub_72764(pc)
0007D308 103C 00B6                  		move.b	#-$4A,d0
0007D30C 123C 00C0                  		move.b	#-$40,d1
0007D310 4EBA 0000                  		jsr	sub_72764(pc)
0007D314                            
0007D314                            loc_72114:
0007D314 7E00                       		moveq	#0,d7
0007D316 1E2B 0003                  		move.b	3(a3),d7
0007D31A 6700                       		beq.s	loc_72154
0007D31C 5307                       		subq.b	#1,d7
0007D31E 43EE 0190                  		lea	$190(a6),a1
0007D322 45FA 0000                  		lea	byte_721C2(pc),a2
0007D326                            
0007D326                            loc_72126:
0007D326 08D1 0007                  		bset	#7,(a1)
0007D32A 135A 0001                  		move.b	(a2)+,1(a1)
0007D32E 1344 0002                  		move.b	d4,2(a1)
0007D332 1346 000D                  		move.b	d6,$D(a1)
0007D336 1345 000E                  		move.b	d5,$E(a1)
0007D33A 7000                       		moveq	#0,d0
0007D33C 301C                       		move.w	(a4)+,d0
0007D33E D08B                       		add.l	a3,d0
0007D340 2340 0004                  		move.l	d0,4(a1)
0007D344 335C 0008                  		move.w	(a4)+,8(a1)
0007D348 101C                       		move.b	(a4)+,d0
0007D34A 135C 000B                  		move.b	(a4)+,$B(a1)
0007D34E D2C6                       		adda.w	d6,a1
0007D350 51CF FFD4                  		dbf	d7,loc_72126
0007D354                            
0007D354                            loc_72154:
0007D354 43EE 0220                  		lea	$220(a6),a1
0007D358 7E05                       		moveq	#5,d7
0007D35A                            
0007D35A                            loc_7215A:
0007D35A 4A11                       		tst.b	(a1)
0007D35C 6A00 0000                  		bpl.w	loc_7217C
0007D360 7000                       		moveq	#0,d0
0007D362 1029 0001                  		move.b	1(a1),d0
0007D366 6B00                       		bmi.s	loc_7216E
0007D368 5500                       		subq.b	#2,d0
0007D36A E508                       		lsl.b	#2,d0
0007D36C 6000                       		bra.s	loc_72170
0007D36E                            ; ===========================================================================
0007D36E                            
0007D36E                            loc_7216E:
0007D36E E608                       		lsr.b	#3,d0
0007D370                            
0007D370                            loc_72170:
0007D370 41FA 0000                  		lea	dword_722CC(pc),a0
0007D374 2070 0000                  		movea.l	(a0,d0.w),a0
0007D378 08D0 0002                  		bset	#2,(a0)
0007D37C                            
0007D37C                            loc_7217C:
0007D37C D2C6                       		adda.w	d6,a1
0007D37E 51CF FFDA                  		dbf	d7,loc_7215A
0007D382                            
0007D382 4A6E 0340                  		tst.w	$340(a6)
0007D386 6A00                       		bpl.s	loc_7218E
0007D388 08EE 0002 0100             		bset	#2,$100(a6)
0007D38E                            
0007D38E                            loc_7218E:
0007D38E 4A6E 0370                  		tst.w	$370(a6)
0007D392 6A00                       		bpl.s	loc_7219A
0007D394 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D39A                            
0007D39A                            loc_7219A:
0007D39A 4BEE 0070                  		lea	$70(a6),a5
0007D39E 7805                       		moveq	#5,d4
0007D3A0                            
0007D3A0                            loc_721A0:
0007D3A0 4EBA 0000                  		jsr	sub_726FE(pc)
0007D3A4 DAC6                       		adda.w	d6,a5
0007D3A6 51CC FFF8                  		dbf	d4,loc_721A0
0007D3AA 7802                       		moveq	#2,d4
0007D3AC                            
0007D3AC                            loc_721AC:
0007D3AC 4EBA 0000                  		jsr	sub_729A0(pc)
0007D3B0 DAC6                       		adda.w	d6,a5
0007D3B2 51CC FFF8                  		dbf	d4,loc_721AC
0007D3B6                            
0007D3B6                            loc_721B6:
0007D3B6 584F                       		addq.w	#4,sp
0007D3B8 4E75                       		rts	
0007D3BA                            ; ===========================================================================
0007D3BA 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007D3C2                            		even
0007D3C2 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007D3C6                            		even
0007D3C6                            ; ===========================================================================
0007D3C6                            ; ---------------------------------------------------------------------------
0007D3C6                            ; Play normal sound effect
0007D3C6                            ; ---------------------------------------------------------------------------
0007D3C6                            
0007D3C6                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007D3C6 4A2E 0027                  		tst.b	$27(a6)
0007D3CA 6600 0000                  		bne.w	loc_722C6
0007D3CE 4A2E 0004                  		tst.b	4(a6)
0007D3D2 6600 0000                  		bne.w	loc_722C6
0007D3D6 4A2E 0024                  		tst.b	$24(a6)
0007D3DA 6600 0000                  		bne.w	loc_722C6
0007D3DE 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007D3E2 6600                       		bne.s	Sound_notB5	; if not, branch
0007D3E4 4A2E 002B                  		tst.b	$2B(a6)
0007D3E8 6600                       		bne.s	loc_721EE
0007D3EA 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007D3EE                            
0007D3EE                            loc_721EE:
0007D3EE 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007D3F4                            
0007D3F4                            Sound_notB5:
0007D3F4 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007D3F8 6600                       		bne.s	Sound_notA7	; if not, branch
0007D3FA 4A2E 002C                  		tst.b	$2C(a6)
0007D3FE 6600 0000                  		bne.w	locret_722C4
0007D402 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007D408                            
0007D408                            Sound_notA7:
0007D408 2079 0007 CA12             		movea.l	(Go_SoundIndex).l,a0
0007D40E 0407 00A0                  		subi.b	#$A0,d7
0007D412 E54F                       		lsl.w	#2,d7
0007D414 2670 7000                  		movea.l	(a0,d7.w),a3
0007D418 224B                       		movea.l	a3,a1
0007D41A 7200                       		moveq	#0,d1
0007D41C 3219                       		move.w	(a1)+,d1
0007D41E D28B                       		add.l	a3,d1
0007D420 1A19                       		move.b	(a1)+,d5
0007D422 1E19                       		move.b	(a1)+,d7
0007D424 5307                       		subq.b	#1,d7
0007D426 7C30                       		moveq	#$30,d6
0007D428                            
0007D428                            loc_72228:
0007D428 7600                       		moveq	#0,d3
0007D42A 1629 0001                  		move.b	1(a1),d3
0007D42E 1803                       		move.b	d3,d4
0007D430 6B00                       		bmi.s	loc_72244
0007D432 5543                       		subq.w	#2,d3
0007D434 E54B                       		lsl.w	#2,d3
0007D436 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D43A 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D43E 08D5 0002                  		bset	#2,(a5)
0007D442 6000                       		bra.s	loc_7226E
0007D444                            ; ===========================================================================
0007D444                            
0007D444                            loc_72244:
0007D444 E64B                       		lsr.w	#3,d3
0007D446 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D44A 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D44E 08D5 0002                  		bset	#2,(a5)
0007D452 0C04 00C0                  		cmpi.b	#$C0,d4
0007D456 6600                       		bne.s	loc_7226E
0007D458 1004                       		move.b	d4,d0
0007D45A 0000 001F                  		ori.b	#$1F,d0
0007D45E 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D464 0840 0005                  		bchg	#5,d0
0007D468 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D46E                            
0007D46E                            loc_7226E:
0007D46E 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007D472 244D                       		movea.l	a5,a2
0007D474 700B                       		moveq	#$B,d0
0007D476                            
0007D476                            loc_72276:
0007D476 429A                       		clr.l	(a2)+
0007D478 51C8 FFFC                  		dbf	d0,loc_72276
0007D47C                            
0007D47C 3A99                       		move.w	(a1)+,(a5)
0007D47E 1B45 0002                  		move.b	d5,2(a5)
0007D482 7000                       		moveq	#0,d0
0007D484 3019                       		move.w	(a1)+,d0
0007D486 D08B                       		add.l	a3,d0
0007D488 2B40 0004                  		move.l	d0,4(a5)
0007D48C 3B59 0008                  		move.w	(a1)+,8(a5)
0007D490 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D496 1B46 000D                  		move.b	d6,$D(a5)
0007D49A 4A04                       		tst.b	d4
0007D49C 6B00                       		bmi.s	loc_722A8
0007D49E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D4A4 2B41 0020                  		move.l	d1,$20(a5)
0007D4A8                            
0007D4A8                            loc_722A8:
0007D4A8 51CF FF7E                  		dbf	d7,loc_72228
0007D4AC                            
0007D4AC 4A2E 0250                  		tst.b	$250(a6)
0007D4B0 6A00                       		bpl.s	loc_722B8
0007D4B2 08EE 0002 0340             		bset	#2,$340(a6)
0007D4B8                            
0007D4B8                            loc_722B8:
0007D4B8 4A2E 0310                  		tst.b	$310(a6)
0007D4BC 6A00                       		bpl.s	locret_722C4
0007D4BE 08EE 0002 0370             		bset	#2,$370(a6)
0007D4C4                            
0007D4C4                            locret_722C4:
0007D4C4 4E75                       		rts	
0007D4C6                            ; ===========================================================================
0007D4C6                            
0007D4C6                            loc_722C6:
0007D4C6 4216                       		clr.b	0(a6)
0007D4C8 4E75                       		rts	
0007D4CA                            ; ===========================================================================
0007D4CA 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007D4CE 0000 0000                  		dc.l 0
0007D4D2 00FF F100                  		dc.l $FFF100
0007D4D6 00FF F130                  		dc.l $FFF130
0007D4DA 00FF F190                  		dc.l $FFF190
0007D4DE 00FF F1C0                  		dc.l $FFF1C0
0007D4E2 00FF F1F0                  		dc.l $FFF1F0
0007D4E6 00FF F1F0                  		dc.l $FFF1F0
0007D4EA 00FF F220                  dword_722EC:	dc.l $FFF220
0007D4EE 0000 0000                  		dc.l 0
0007D4F2 00FF F250                  		dc.l $FFF250
0007D4F6 00FF F280                  		dc.l $FFF280
0007D4FA 00FF F2B0                  		dc.l $FFF2B0
0007D4FE 00FF F2E0                  		dc.l $FFF2E0
0007D502 00FF F310                  		dc.l $FFF310
0007D506 00FF F310                  		dc.l $FFF310
0007D50A                            ; ===========================================================================
0007D50A                            ; ---------------------------------------------------------------------------
0007D50A                            ; Play GHZ waterfall sound
0007D50A                            ; ---------------------------------------------------------------------------
0007D50A                            
0007D50A                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007D50A 4A2E 0027                  		tst.b	$27(a6)
0007D50E 6600 0000                  		bne.w	locret_723C6
0007D512 4A2E 0004                  		tst.b	4(a6)
0007D516 6600 0000                  		bne.w	locret_723C6
0007D51A 4A2E 0024                  		tst.b	$24(a6)
0007D51E 6600 0000                  		bne.w	locret_723C6
0007D522 2079 0007 CA0A             		movea.l	(Go_SoundD0).l,a0
0007D528 0407 00D0                  		subi.b	#$D0,d7
0007D52C E54F                       		lsl.w	#2,d7
0007D52E 2670 7000                  		movea.l	(a0,d7.w),a3
0007D532 224B                       		movea.l	a3,a1
0007D534 7000                       		moveq	#0,d0
0007D536 3019                       		move.w	(a1)+,d0
0007D538 D08B                       		add.l	a3,d0
0007D53A 2D40 0020                  		move.l	d0,$20(a6)
0007D53E 1A19                       		move.b	(a1)+,d5
0007D540 1E19                       		move.b	(a1)+,d7
0007D542 5307                       		subq.b	#1,d7
0007D544 7C30                       		moveq	#$30,d6
0007D546                            
0007D546                            loc_72348:
0007D546 1829 0001                  		move.b	1(a1),d4
0007D54A 6B00                       		bmi.s	loc_7235A
0007D54C 08EE 0002 0100             		bset	#2,$100(a6)
0007D552 4BEE 0340                  		lea	$340(a6),a5
0007D556 6000                       		bra.s	loc_72364
0007D558                            ; ===========================================================================
0007D558                            
0007D558                            loc_7235A:
0007D558 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D55E 4BEE 0370                  		lea	$370(a6),a5
0007D562                            
0007D562                            loc_72364:
0007D562 244D                       		movea.l	a5,a2
0007D564 700B                       		moveq	#$B,d0
0007D566                            
0007D566                            loc_72368:
0007D566 429A                       		clr.l	(a2)+
0007D568 51C8 FFFC                  		dbf	d0,loc_72368
0007D56C                            
0007D56C 3A99                       		move.w	(a1)+,(a5)
0007D56E 1B45 0002                  		move.b	d5,2(a5)
0007D572 7000                       		moveq	#0,d0
0007D574 3019                       		move.w	(a1)+,d0
0007D576 D08B                       		add.l	a3,d0
0007D578 2B40 0004                  		move.l	d0,4(a5)
0007D57C 3B59 0008                  		move.w	(a1)+,8(a5)
0007D580 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D586 1B46 000D                  		move.b	d6,$D(a5)
0007D58A 4A04                       		tst.b	d4
0007D58C 6B00                       		bmi.s	loc_72396
0007D58E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D594                            
0007D594                            loc_72396:
0007D594 51CF FFB0                  		dbf	d7,loc_72348
0007D598                            
0007D598 4A2E 0250                  		tst.b	$250(a6)
0007D59C 6A00                       		bpl.s	loc_723A6
0007D59E 08EE 0002 0340             		bset	#2,$340(a6)
0007D5A4                            
0007D5A4                            loc_723A6:
0007D5A4 4A2E 0310                  		tst.b	$310(a6)
0007D5A8 6A00                       		bpl.s	locret_723C6
0007D5AA 08EE 0002 0370             		bset	#2,$370(a6)
0007D5B0 0004 001F                  		ori.b	#$1F,d4
0007D5B4 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D5BA 0844 0005                  		bchg	#5,d4
0007D5BE 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D5C4                            
0007D5C4                            locret_723C6:
0007D5C4 4E75                       		rts	
0007D5C6                            ; End of function Sound_ChkValue
0007D5C6                            
0007D5C6                            ; ===========================================================================
0007D5C6 00FF F100                  		dc.l $FFF100
0007D5CA 00FF F1F0                  		dc.l $FFF1F0
0007D5CE 00FF F250                  		dc.l $FFF250
0007D5D2 00FF F310                  		dc.l $FFF310
0007D5D6 00FF F340                  		dc.l $FFF340
0007D5DA 00FF F370                  		dc.l $FFF370
0007D5DE                            
0007D5DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D5DE                            
0007D5DE                            
0007D5DE                            Snd_FadeOut1:				; XREF: Sound_E0
0007D5DE 4216                       		clr.b	0(a6)
0007D5E0 4BEE 0220                  		lea	$220(a6),a5
0007D5E4 7E05                       		moveq	#5,d7
0007D5E6                            
0007D5E6                            loc_723EA:
0007D5E6 4A15                       		tst.b	(a5)
0007D5E8 6A00 0000                  		bpl.w	loc_72472
0007D5EC 0895 0007                  		bclr	#7,(a5)
0007D5F0 7600                       		moveq	#0,d3
0007D5F2 162D 0001                  		move.b	1(a5),d3
0007D5F6 6B00                       		bmi.s	loc_7243C
0007D5F8 4EBA 0000                  		jsr	sub_726FE(pc)
0007D5FC 0C03 0004                  		cmpi.b	#4,d3
0007D600 6600                       		bne.s	loc_72416
0007D602 4A2E 0340                  		tst.b	$340(a6)
0007D606 6A00                       		bpl.s	loc_72416
0007D608 4BEE 0340                  		lea	$340(a6),a5
0007D60C 226E 0020                  		movea.l	$20(a6),a1
0007D610 6000                       		bra.s	loc_72428
0007D612                            ; ===========================================================================
0007D612                            
0007D612                            loc_72416:
0007D612 5503                       		subq.b	#2,d3
0007D614 E50B                       		lsl.b	#2,d3
0007D616 41FA FEB2                  		lea	dword_722CC(pc),a0
0007D61A 264D                       		movea.l	a5,a3
0007D61C 2A70 3000                  		movea.l	(a0,d3.w),a5
0007D620 226E 0018                  		movea.l	$18(a6),a1
0007D624                            
0007D624                            loc_72428:
0007D624 0895 0002                  		bclr	#2,(a5)
0007D628 08D5 0001                  		bset	#1,(a5)
0007D62C 102D 000B                  		move.b	$B(a5),d0
0007D630 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D634 2A4B                       		movea.l	a3,a5
0007D636 6000                       		bra.s	loc_72472
0007D638                            ; ===========================================================================
0007D638                            
0007D638                            loc_7243C:
0007D638 4EBA 0000                  		jsr	sub_729A0(pc)
0007D63C 41EE 0370                  		lea	$370(a6),a0
0007D640 0C03 00E0                  		cmpi.b	#$E0,d3
0007D644 6700                       		beq.s	loc_7245A
0007D646 0C03 00C0                  		cmpi.b	#$C0,d3
0007D64A 6700                       		beq.s	loc_7245A
0007D64C E60B                       		lsr.b	#3,d3
0007D64E 41FA FE7A                  		lea	dword_722CC(pc),a0
0007D652 2070 3000                  		movea.l	(a0,d3.w),a0
0007D656                            
0007D656                            loc_7245A:
0007D656 0890 0002                  		bclr	#2,(a0)
0007D65A 08D0 0001                  		bset	#1,(a0)
0007D65E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007D664 6600                       		bne.s	loc_72472
0007D666 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007D66E                            
0007D66E                            loc_72472:
0007D66E DAFC 0030                  		adda.w	#$30,a5
0007D672 51CF FF72                  		dbf	d7,loc_723EA
0007D676                            
0007D676 4E75                       		rts	
0007D678                            ; End of function Snd_FadeOut1
0007D678                            
0007D678                            
0007D678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D678                            
0007D678                            
0007D678                            Snd_FadeOut2:				; XREF: Sound_E0
0007D678 4BEE 0340                  		lea	$340(a6),a5
0007D67C 4A15                       		tst.b	(a5)
0007D67E 6A00                       		bpl.s	loc_724AE
0007D680 0895 0007                  		bclr	#7,(a5)
0007D684 0815 0002                  		btst	#2,(a5)
0007D688 6600                       		bne.s	loc_724AE
0007D68A 4EBA 0000                  		jsr	loc_7270A(pc)
0007D68E 4BEE 0100                  		lea	$100(a6),a5
0007D692 0895 0002                  		bclr	#2,(a5)
0007D696 08D5 0001                  		bset	#1,(a5)
0007D69A 4A15                       		tst.b	(a5)
0007D69C 6A00                       		bpl.s	loc_724AE
0007D69E 226E 0018                  		movea.l	$18(a6),a1
0007D6A2 102D 000B                  		move.b	$B(a5),d0
0007D6A6 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D6AA                            
0007D6AA                            loc_724AE:
0007D6AA 4BEE 0370                  		lea	$370(a6),a5
0007D6AE 4A15                       		tst.b	(a5)
0007D6B0 6A00                       		bpl.s	locret_724E4
0007D6B2 0895 0007                  		bclr	#7,(a5)
0007D6B6 0815 0002                  		btst	#2,(a5)
0007D6BA 6600                       		bne.s	locret_724E4
0007D6BC 4EBA 0000                  		jsr	loc_729A6(pc)
0007D6C0 4BEE 01F0                  		lea	$1F0(a6),a5
0007D6C4 0895 0002                  		bclr	#2,(a5)
0007D6C8 08D5 0001                  		bset	#1,(a5)
0007D6CC 4A15                       		tst.b	(a5)
0007D6CE 6A00                       		bpl.s	locret_724E4
0007D6D0 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007D6D6 6600                       		bne.s	locret_724E4
0007D6D8 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007D6E0                            
0007D6E0                            locret_724E4:
0007D6E0 4E75                       		rts	
0007D6E2                            ; End of function Snd_FadeOut2
0007D6E2                            
0007D6E2                            ; ===========================================================================
0007D6E2                            ; ---------------------------------------------------------------------------
0007D6E2                            ; Fade out music
0007D6E2                            ; ---------------------------------------------------------------------------
0007D6E2                            
0007D6E2                            Sound_E0:				; XREF: Sound_ExIndex
0007D6E2 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007D6E6 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007D6EA 1D7C 0003 0006             		move.b	#3,6(a6)
0007D6F0 1D7C 0028 0004             		move.b	#$28,4(a6)
0007D6F6 422E 0040                  		clr.b	$40(a6)
0007D6FA 422E 002A                  		clr.b	$2A(a6)
0007D6FE 4E75                       		rts	
0007D700                            
0007D700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D700                            
0007D700                            
0007D700                            sub_72504:				; XREF: sub_71B4C
0007D700 102E 0006                  		move.b	6(a6),d0
0007D704 6700                       		beq.s	loc_72510
0007D706 532E 0006                  		subq.b	#1,6(a6)
0007D70A 4E75                       		rts	
0007D70C                            ; ===========================================================================
0007D70C                            
0007D70C                            loc_72510:
0007D70C 532E 0004                  		subq.b	#1,4(a6)
0007D710 6700 0000                  		beq.w	Sound_E4
0007D714 1D7C 0003 0006             		move.b	#3,6(a6)
0007D71A 4BEE 0070                  		lea	$70(a6),a5
0007D71E 7E05                       		moveq	#5,d7
0007D720                            
0007D720                            loc_72524:
0007D720 4A15                       		tst.b	(a5)
0007D722 6A00                       		bpl.s	loc_72538
0007D724 522D 0009                  		addq.b	#1,9(a5)
0007D728 6A00                       		bpl.s	loc_72534
0007D72A 0895 0007                  		bclr	#7,(a5)
0007D72E 6000                       		bra.s	loc_72538
0007D730                            ; ===========================================================================
0007D730                            
0007D730                            loc_72534:
0007D730 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D734                            
0007D734                            loc_72538:
0007D734 DAFC 0030                  		adda.w	#$30,a5
0007D738 51CF FFE6                  		dbf	d7,loc_72524
0007D73C                            
0007D73C 7E02                       		moveq	#2,d7
0007D73E                            
0007D73E                            loc_72542:
0007D73E 4A15                       		tst.b	(a5)
0007D740 6A00                       		bpl.s	loc_72560
0007D742 522D 0009                  		addq.b	#1,9(a5)
0007D746 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007D74C 6500                       		bcs.s	loc_72558
0007D74E 0895 0007                  		bclr	#7,(a5)
0007D752 6000                       		bra.s	loc_72560
0007D754                            ; ===========================================================================
0007D754                            
0007D754                            loc_72558:
0007D754 1C2D 0009                  		move.b	9(a5),d6
0007D758 4EBA 0000                  		jsr	sub_7296A(pc)
0007D75C                            
0007D75C                            loc_72560:
0007D75C DAFC 0030                  		adda.w	#$30,a5
0007D760 51CF FFDC                  		dbf	d7,loc_72542
0007D764                            
0007D764 4E75                       		rts	
0007D766                            ; End of function sub_72504
0007D766                            
0007D766                            
0007D766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D766                            
0007D766                            
0007D766                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007D766 7602                       		moveq	#2,d3
0007D768 7028                       		moveq	#$28,d0
0007D76A                            
0007D76A                            loc_7256E:
0007D76A 1203                       		move.b	d3,d1
0007D76C 4EBA 0000                  		jsr	sub_7272E(pc)
0007D770 5801                       		addq.b	#4,d1
0007D772 4EBA 0000                  		jsr	sub_7272E(pc)
0007D776 51CB FFF2                  		dbf	d3,loc_7256E
0007D77A                            
0007D77A 7040                       		moveq	#$40,d0
0007D77C 727F                       		moveq	#$7F,d1
0007D77E 7802                       		moveq	#2,d4
0007D780                            
0007D780                            loc_72584:
0007D780 7603                       		moveq	#3,d3
0007D782                            
0007D782                            loc_72586:
0007D782 4EBA 0000                  		jsr	sub_7272E(pc)
0007D786 4EBA 0000                  		jsr	sub_72764(pc)
0007D78A 5840                       		addq.w	#4,d0
0007D78C 51CB FFF4                  		dbf	d3,loc_72586
0007D790                            
0007D790 0400 000F                  		subi.b	#$F,d0
0007D794 51CC FFEA                  		dbf	d4,loc_72584
0007D798                            
0007D798 4E75                       		rts	
0007D79A                            ; End of function sub_7256A
0007D79A                            
0007D79A                            ; ===========================================================================
0007D79A                            ; ---------------------------------------------------------------------------
0007D79A                            ; Stop music
0007D79A                            ; ---------------------------------------------------------------------------
0007D79A                            
0007D79A                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007D79A 702B                       		moveq	#$2B,d0
0007D79C 123C 0080                  		move.b	#$80,d1
0007D7A0 4EBA 0000                  		jsr	sub_7272E(pc)
0007D7A4 7027                       		moveq	#$27,d0
0007D7A6 7200                       		moveq	#0,d1
0007D7A8 4EBA 0000                  		jsr	sub_7272E(pc)
0007D7AC 204E                       		movea.l	a6,a0
0007D7AE 303C 00E3                  		move.w	#$E3,d0
0007D7B2                            
0007D7B2                            loc_725B6:
0007D7B2 4298                       		clr.l	(a0)+
0007D7B4 51C8 FFFC                  		dbf	d0,loc_725B6
0007D7B8                            
0007D7B8 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007D7BE 4EBA FFA6                  		jsr	sub_7256A(pc)
0007D7C2 6000 0000                  		bra.w	sub_729B6
0007D7C6                            
0007D7C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7C6                            
0007D7C6                            
0007D7C6                            sub_725CA:				; XREF: Sound_ChkValue
0007D7C6 204E                       		movea.l	a6,a0
0007D7C8 1216                       		move.b	0(a6),d1
0007D7CA 142E 0027                  		move.b	$27(a6),d2
0007D7CE 162E 002A                  		move.b	$2A(a6),d3
0007D7D2 182E 0026                  		move.b	$26(a6),d4
0007D7D6 3A2E 000A                  		move.w	$A(a6),d5
0007D7DA 303C 0087                  		move.w	#$87,d0
0007D7DE                            
0007D7DE                            loc_725E4:
0007D7DE 4298                       		clr.l	(a0)+
0007D7E0 51C8 FFFC                  		dbf	d0,loc_725E4
0007D7E4                            
0007D7E4 1C81                       		move.b	d1,0(a6)
0007D7E6 1D42 0027                  		move.b	d2,$27(a6)
0007D7EA 1D43 002A                  		move.b	d3,$2A(a6)
0007D7EE 1D44 0026                  		move.b	d4,$26(a6)
0007D7F2 3D45 000A                  		move.w	d5,$A(a6)
0007D7F6 1D7C 0080 0009             		move.b	#$80,9(a6)
0007D7FC 4EBA FF68                  		jsr	sub_7256A(pc)
0007D800 6000 0000                  		bra.w	sub_729B6
0007D804                            ; End of function sub_725CA
0007D804                            
0007D804                            
0007D804                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D804                            
0007D804                            
0007D804                            sub_7260C:				; XREF: sub_71B4C
0007D804 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007D80A 41EE 004E                  		lea	$4E(a6),a0
0007D80E 7030                       		moveq	#$30,d0
0007D810 7209                       		moveq	#9,d1
0007D812                            
0007D812                            loc_7261A:
0007D812 5210                       		addq.b	#1,(a0)
0007D814 D0C0                       		adda.w	d0,a0
0007D816 51C9 FFFA                  		dbf	d1,loc_7261A
0007D81A                            
0007D81A 4E75                       		rts	
0007D81C                            ; End of function sub_7260C
0007D81C                            
0007D81C                            ; ===========================================================================
0007D81C                            ; ---------------------------------------------------------------------------
0007D81C                            ; Speed	up music
0007D81C                            ; ---------------------------------------------------------------------------
0007D81C                            
0007D81C                            Sound_E2:				; XREF: Sound_ExIndex
0007D81C 4A2E 0027                  		tst.b	$27(a6)
0007D820 6600                       		bne.s	loc_7263E
0007D822 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007D828 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007D82E 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007D834 4E75                       		rts	
0007D836                            ; ===========================================================================
0007D836                            
0007D836                            loc_7263E:
0007D836 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007D83C 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007D842 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007D848 4E75                       		rts	
0007D84A                            ; ===========================================================================
0007D84A                            ; ---------------------------------------------------------------------------
0007D84A                            ; Change music back to normal speed
0007D84A                            ; ---------------------------------------------------------------------------
0007D84A                            
0007D84A                            Sound_E3:				; XREF: Sound_ExIndex
0007D84A 4A2E 0027                  		tst.b	$27(a6)
0007D84E 6600                       		bne.s	loc_7266A
0007D850 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007D856 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007D85C 422E 002A                  		clr.b	$2A(a6)
0007D860 4E75                       		rts	
0007D862                            ; ===========================================================================
0007D862                            
0007D862                            loc_7266A:
0007D862 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007D868 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007D86E 422E 03CA                  		clr.b	$3CA(a6)
0007D872 4E75                       		rts	
0007D874                            
0007D874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D874                            
0007D874                            
0007D874                            sub_7267C:				; XREF: sub_71B4C
0007D874 4A2E 0025                  		tst.b	$25(a6)
0007D878 6700                       		beq.s	loc_72688
0007D87A 532E 0025                  		subq.b	#1,$25(a6)
0007D87E 4E75                       		rts	
0007D880                            ; ===========================================================================
0007D880                            
0007D880                            loc_72688:
0007D880 4A2E 0026                  		tst.b	$26(a6)
0007D884 6700                       		beq.s	loc_726D6
0007D886 532E 0026                  		subq.b	#1,$26(a6)
0007D88A 1D7C 0002 0025             		move.b	#2,$25(a6)
0007D890 4BEE 0070                  		lea	$70(a6),a5
0007D894 7E05                       		moveq	#5,d7
0007D896                            
0007D896                            loc_7269E:
0007D896 4A15                       		tst.b	(a5)
0007D898 6A00                       		bpl.s	loc_726AA
0007D89A 532D 0009                  		subq.b	#1,9(a5)
0007D89E 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D8A2                            
0007D8A2                            loc_726AA:
0007D8A2 DAFC 0030                  		adda.w	#$30,a5
0007D8A6 51CF FFEE                  		dbf	d7,loc_7269E
0007D8AA 7E02                       		moveq	#2,d7
0007D8AC                            
0007D8AC                            loc_726B4:
0007D8AC 4A15                       		tst.b	(a5)
0007D8AE 6A00                       		bpl.s	loc_726CC
0007D8B0 532D 0009                  		subq.b	#1,9(a5)
0007D8B4 1C2D 0009                  		move.b	9(a5),d6
0007D8B8 0C06 0010                  		cmpi.b	#$10,d6
0007D8BC 6500                       		bcs.s	loc_726C8
0007D8BE 7C0F                       		moveq	#$F,d6
0007D8C0                            
0007D8C0                            loc_726C8:
0007D8C0 4EBA 0000                  		jsr	sub_7296A(pc)
0007D8C4                            
0007D8C4                            loc_726CC:
0007D8C4 DAFC 0030                  		adda.w	#$30,a5
0007D8C8 51CF FFE2                  		dbf	d7,loc_726B4
0007D8CC 4E75                       		rts	
0007D8CE                            ; ===========================================================================
0007D8CE                            
0007D8CE                            loc_726D6:
0007D8CE 08AE 0002 0040             		bclr	#2,$40(a6)
0007D8D4 422E 0024                  		clr.b	$24(a6)
0007D8D8 4E75                       		rts	
0007D8DA                            ; End of function sub_7267C
0007D8DA                            
0007D8DA                            ; ===========================================================================
0007D8DA                            
0007D8DA                            loc_726E2:				; XREF: sub_71CCA
0007D8DA 0815 0001                  		btst	#1,(a5)
0007D8DE 6600                       		bne.s	locret_726FC
0007D8E0 0815 0002                  		btst	#2,(a5)
0007D8E4 6600                       		bne.s	locret_726FC
0007D8E6 7028                       		moveq	#$28,d0
0007D8E8 122D 0001                  		move.b	1(a5),d1
0007D8EC 0001 00F0                  		ori.b	#-$10,d1
0007D8F0 6000 0000                  		bra.w	sub_7272E
0007D8F4                            ; ===========================================================================
0007D8F4                            
0007D8F4                            locret_726FC:
0007D8F4 4E75                       		rts	
0007D8F6                            
0007D8F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D8F6                            
0007D8F6                            
0007D8F6                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007D8F6 0815 0004                  		btst	#4,(a5)
0007D8FA 6600                       		bne.s	locret_72714
0007D8FC 0815 0002                  		btst	#2,(a5)
0007D900 6600                       		bne.s	locret_72714
0007D902                            
0007D902                            loc_7270A:				; XREF: Snd_FadeOut2
0007D902 7028                       		moveq	#$28,d0
0007D904 122D 0001                  		move.b	1(a5),d1
0007D908 6000 0000                  		bra.w	sub_7272E
0007D90C                            ; ===========================================================================
0007D90C                            
0007D90C                            locret_72714:
0007D90C 4E75                       		rts	
0007D90E                            ; End of function sub_726FE
0007D90E                            
0007D90E                            ; ===========================================================================
0007D90E                            
0007D90E                            loc_72716:				; XREF: sub_72A5A
0007D90E 0815 0002                  		btst	#2,(a5)
0007D912 6600                       		bne.s	locret_72720
0007D914 6000 0000                  		bra.w	sub_72722
0007D918                            ; ===========================================================================
0007D918                            
0007D918                            locret_72720:
0007D918 4E75                       		rts	
0007D91A                            
0007D91A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D91A                            
0007D91A                            
0007D91A                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007D91A 082D 0002 0001             		btst	#2,1(a5)
0007D920 6600                       		bne.s	loc_7275A
0007D922 D02D 0001                  		add.b	1(a5),d0
0007D926                            ; End of function sub_72722
0007D926                            
0007D926                            
0007D926                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D926                            
0007D926                            
0007D926                            sub_7272E:				; XREF: loc_71E6A
0007D926 1439 00A0 4000             		move.b	($A04000).l,d2
0007D92C 0802 0007                  		btst	#7,d2
0007D930 66F4                       		bne.s	sub_7272E
0007D932 13C0 00A0 4000             		move.b	d0,($A04000).l
0007D938 4E71                       		nop	
0007D93A 4E71                       		nop	
0007D93C 4E71                       		nop	
0007D93E                            
0007D93E                            loc_72746:
0007D93E 1439 00A0 4000             		move.b	($A04000).l,d2
0007D944 0802 0007                  		btst	#7,d2
0007D948 66F4                       		bne.s	loc_72746
0007D94A                            
0007D94A 13C1 00A0 4001             		move.b	d1,($A04001).l
0007D950 4E75                       		rts	
0007D952                            ; End of function sub_7272E
0007D952                            
0007D952                            ; ===========================================================================
0007D952                            
0007D952                            loc_7275A:				; XREF: sub_72722
0007D952 142D 0001                  		move.b	1(a5),d2
0007D956 0882 0002                  		bclr	#2,d2
0007D95A D002                       		add.b	d2,d0
0007D95C                            
0007D95C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D95C                            
0007D95C                            
0007D95C                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007D95C 1439 00A0 4000             		move.b	($A04000).l,d2
0007D962 0802 0007                  		btst	#7,d2
0007D966 66F4                       		bne.s	sub_72764
0007D968 13C0 00A0 4002             		move.b	d0,($A04002).l
0007D96E 4E71                       		nop	
0007D970 4E71                       		nop	
0007D972 4E71                       		nop	
0007D974                            
0007D974                            loc_7277C:
0007D974 1439 00A0 4000             		move.b	($A04000).l,d2
0007D97A 0802 0007                  		btst	#7,d2
0007D97E 66F4                       		bne.s	loc_7277C
0007D980                            
0007D980 13C1 00A0 4003             		move.b	d1,($A04003).l
0007D986 4E75                       		rts	
0007D988                            ; End of function sub_72764
0007D988                            
0007D988                            ; ===========================================================================
0007D988 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007D99A 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007D9AC 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007D9BC 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007D9CC 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007D9DC 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007D9EC 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007D9FC 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007DA0C 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007DA1C 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007DA2C 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007DA3C 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007DA48                            
0007DA48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA48                            
0007DA48                            
0007DA48                            sub_72850:				; XREF: sub_71B4C
0007DA48 532D 000E                  		subq.b	#1,$E(a5)
0007DA4C 6600                       		bne.s	loc_72866
0007DA4E 0895 0004                  		bclr	#4,(a5)
0007DA52 4EBA 0000                  		jsr	sub_72878(pc)
0007DA56 4EBA 0000                  		jsr	sub_728DC(pc)
0007DA5A 6000 0000                  		bra.w	loc_7292E
0007DA5E                            ; ===========================================================================
0007DA5E                            
0007DA5E                            loc_72866:
0007DA5E 4EBA F3FE                  		jsr	sub_71D9E(pc)
0007DA62 4EBA 0000                  		jsr	sub_72926(pc)
0007DA66 4EBA F41E                  		jsr	sub_71DC6(pc)
0007DA6A 4EBA 0000                  		jsr	sub_728E2(pc)
0007DA6E 4E75                       		rts	
0007DA70                            ; End of function sub_72850
0007DA70                            
0007DA70                            
0007DA70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA70                            
0007DA70                            
0007DA70                            sub_72878:				; XREF: sub_72850
0007DA70 0895 0001                  		bclr	#1,(a5)
0007DA74 286D 0004                  		movea.l	4(a5),a4
0007DA78                            
0007DA78                            loc_72880:
0007DA78 7A00                       		moveq	#0,d5
0007DA7A 1A1C                       		move.b	(a4)+,d5
0007DA7C 0C05 00E0                  		cmpi.b	#$E0,d5
0007DA80 6500                       		bcs.s	loc_72890
0007DA82 4EBA 0000                  		jsr	sub_72A5A(pc)
0007DA86 60F0                       		bra.s	loc_72880
0007DA88                            ; ===========================================================================
0007DA88                            
0007DA88                            loc_72890:
0007DA88 4A05                       		tst.b	d5
0007DA8A 6A00                       		bpl.s	loc_728A4
0007DA8C 4EBA 0000                  		jsr	sub_728AC(pc)
0007DA90 1A1C                       		move.b	(a4)+,d5
0007DA92 4A05                       		tst.b	d5
0007DA94 6A00                       		bpl.s	loc_728A4
0007DA96 534C                       		subq.w	#1,a4
0007DA98 6000 F386                  		bra.w	sub_71D60
0007DA9C                            ; ===========================================================================
0007DA9C                            
0007DA9C                            loc_728A4:
0007DA9C 4EBA F362                  		jsr	sub_71D40(pc)
0007DAA0 6000 F37E                  		bra.w	sub_71D60
0007DAA4                            ; End of function sub_72878
0007DAA4                            
0007DAA4                            
0007DAA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DAA4                            
0007DAA4                            
0007DAA4                            sub_728AC:				; XREF: sub_72878
0007DAA4 0405 0081                  		subi.b	#$81,d5
0007DAA8 6500                       		bcs.s	loc_728CA
0007DAAA DA2D 0008                  		add.b	8(a5),d5
0007DAAE 0245 007F                  		andi.w	#$7F,d5
0007DAB2 E34D                       		lsl.w	#1,d5
0007DAB4 41FA 0000                  		lea	word_729CE(pc),a0
0007DAB8 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007DABE 6000 F360                  		bra.w	sub_71D60
0007DAC2                            ; ===========================================================================
0007DAC2                            
0007DAC2                            loc_728CA:
0007DAC2 08D5 0001                  		bset	#1,(a5)
0007DAC6 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007DACC 4EBA F352                  		jsr	sub_71D60(pc)
0007DAD0 6000 0000                  		bra.w	sub_729A0
0007DAD4                            ; End of function sub_728AC
0007DAD4                            
0007DAD4                            
0007DAD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DAD4                            
0007DAD4                            
0007DAD4                            sub_728DC:				; XREF: sub_72850
0007DAD4 3C2D 0010                  		move.w	$10(a5),d6
0007DAD8 6B00                       		bmi.s	loc_72920
0007DADA                            ; End of function sub_728DC
0007DADA                            
0007DADA                            
0007DADA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DADA                            
0007DADA                            
0007DADA                            sub_728E2:				; XREF: sub_72850
0007DADA 102D 001E                  		move.b	$1E(a5),d0
0007DADE 4880                       		ext.w	d0
0007DAE0 DC40                       		add.w	d0,d6
0007DAE2 0815 0002                  		btst	#2,(a5)
0007DAE6 6600                       		bne.s	locret_7291E
0007DAE8 0815 0001                  		btst	#1,(a5)
0007DAEC 6600                       		bne.s	locret_7291E
0007DAEE 102D 0001                  		move.b	1(a5),d0
0007DAF2 0C00 00E0                  		cmpi.b	#$E0,d0
0007DAF6 6600                       		bne.s	loc_72904
0007DAF8 103C 00C0                  		move.b	#$C0,d0
0007DAFC                            
0007DAFC                            loc_72904:
0007DAFC 3206                       		move.w	d6,d1
0007DAFE 0201 000F                  		andi.b	#$F,d1
0007DB02 8001                       		or.b	d1,d0
0007DB04 E84E                       		lsr.w	#4,d6
0007DB06 0206 003F                  		andi.b	#$3F,d6
0007DB0A 13C0 00C0 0011             		move.b	d0,($C00011).l
0007DB10 13C6 00C0 0011             		move.b	d6,($C00011).l
0007DB16                            
0007DB16                            locret_7291E:
0007DB16 4E75                       		rts	
0007DB18                            ; End of function sub_728E2
0007DB18                            
0007DB18                            ; ===========================================================================
0007DB18                            
0007DB18                            loc_72920:				; XREF: sub_728DC
0007DB18 08D5 0001                  		bset	#1,(a5)
0007DB1C 4E75                       		rts	
0007DB1E                            
0007DB1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DB1E                            
0007DB1E                            
0007DB1E                            sub_72926:				; XREF: sub_72850
0007DB1E 4A2D 000B                  		tst.b	$B(a5)
0007DB22 6700 0000                  		beq.w	locret_7298A
0007DB26                            
0007DB26                            loc_7292E:				; XREF: sub_72850
0007DB26 1C2D 0009                  		move.b	9(a5),d6
0007DB2A 7000                       		moveq	#0,d0
0007DB2C 102D 000B                  		move.b	$B(a5),d0
0007DB30 6700                       		beq.s	sub_7296A
0007DB32 2079 0007 CA1A             		movea.l	(Go_PSGIndex).l,a0
0007DB38 5340                       		subq.w	#1,d0
0007DB3A E548                       		lsl.w	#2,d0
0007DB3C 2070 0000                  		movea.l	(a0,d0.w),a0
0007DB40 102D 000C                  		move.b	$C(a5),d0
0007DB44 1030 0000                  		move.b	(a0,d0.w),d0
0007DB48 522D 000C                  		addq.b	#1,$C(a5)
0007DB4C 0800 0007                  		btst	#7,d0
0007DB50 6700                       		beq.s	loc_72960
0007DB52 0C00 0080                  		cmpi.b	#$80,d0
0007DB56 6700                       		beq.s	loc_7299A
0007DB58                            
0007DB58                            loc_72960:
0007DB58 DC40                       		add.w	d0,d6
0007DB5A 0C06 0010                  		cmpi.b	#$10,d6
0007DB5E 6500                       		bcs.s	sub_7296A
0007DB60 7C0F                       		moveq	#$F,d6
0007DB62                            ; End of function sub_72926
0007DB62                            
0007DB62                            
0007DB62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DB62                            
0007DB62                            
0007DB62                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007DB62 0815 0001                  		btst	#1,(a5)
0007DB66 6600                       		bne.s	locret_7298A
0007DB68 0815 0002                  		btst	#2,(a5)
0007DB6C 6600                       		bne.s	locret_7298A
0007DB6E 0815 0004                  		btst	#4,(a5)
0007DB72 6600                       		bne.s	loc_7298C
0007DB74                            
0007DB74                            loc_7297C:
0007DB74 8C2D 0001                  		or.b	1(a5),d6
0007DB78 0606 0010                  		addi.b	#$10,d6
0007DB7C 13C6 00C0 0011             		move.b	d6,($C00011).l
0007DB82                            
0007DB82                            locret_7298A:
0007DB82 4E75                       		rts	
0007DB84                            ; ===========================================================================
0007DB84                            
0007DB84                            loc_7298C:
0007DB84 4A2D 0013                  		tst.b	$13(a5)
0007DB88 67EA                       		beq.s	loc_7297C
0007DB8A 4A2D 0012                  		tst.b	$12(a5)
0007DB8E 66E4                       		bne.s	loc_7297C
0007DB90 4E75                       		rts	
0007DB92                            ; End of function sub_7296A
0007DB92                            
0007DB92                            ; ===========================================================================
0007DB92                            
0007DB92                            loc_7299A:				; XREF: sub_72926
0007DB92 532D 000C                  		subq.b	#1,$C(a5)
0007DB96 4E75                       		rts	
0007DB98                            
0007DB98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DB98                            
0007DB98                            
0007DB98                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007DB98 0815 0002                  		btst	#2,(a5)
0007DB9C 6600                       		bne.s	locret_729B4
0007DB9E                            
0007DB9E                            loc_729A6:				; XREF: Snd_FadeOut2
0007DB9E 102D 0001                  		move.b	1(a5),d0
0007DBA2 0000 001F                  		ori.b	#$1F,d0
0007DBA6 13C0 00C0 0011             		move.b	d0,($C00011).l
0007DBAC                            
0007DBAC                            locret_729B4:
0007DBAC 4E75                       		rts	
0007DBAE                            ; End of function sub_729A0
0007DBAE                            
0007DBAE                            
0007DBAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DBAE                            
0007DBAE                            
0007DBAE                            sub_729B6:				; XREF: loc_71E7C
0007DBAE 41F9 00C0 0011             		lea	($C00011).l,a0
0007DBB4 10BC 009F                  		move.b	#$9F,(a0)
0007DBB8 10BC 00BF                  		move.b	#$BF,(a0)
0007DBBC 10BC 00DF                  		move.b	#$DF,(a0)
0007DBC0 10BC 00FF                  		move.b	#$FF,(a0)
0007DBC4 4E75                       		rts	
0007DBC6                            ; End of function sub_729B6
0007DBC6                            
0007DBC6                            ; ===========================================================================
0007DBC6 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007DBD8 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007DBEA 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007DBFE 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007DC12 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007DC26 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007DC3A 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007DC4E 0011 0000                  		dc.w $11, 0
0007DC52                            
0007DC52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DC52                            
0007DC52                            
0007DC52                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007DC52 0445 00E0                  		subi.w	#$E0,d5
0007DC56 E54D                       		lsl.w	#2,d5
0007DC58 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007DC5C                            ; End of function sub_72A5A
0007DC5C                            
0007DC5C                            ; ===========================================================================
0007DC5C                            
0007DC5C                            loc_72A64:
0007DC5C 6000 0000                  		bra.w	loc_72ACC
0007DC60                            ; ===========================================================================
0007DC60 6000 0000                  		bra.w	loc_72AEC
0007DC64                            ; ===========================================================================
0007DC64 6000 0000                  		bra.w	loc_72AF2
0007DC68                            ; ===========================================================================
0007DC68 6000 0000                  		bra.w	loc_72AF8
0007DC6C                            ; ===========================================================================
0007DC6C 6000 0000                  		bra.w	loc_72B14
0007DC70                            ; ===========================================================================
0007DC70 6000 0000                  		bra.w	loc_72B9E
0007DC74                            ; ===========================================================================
0007DC74 6000 0000                  		bra.w	loc_72BA4
0007DC78                            ; ===========================================================================
0007DC78 6000 0000                  		bra.w	loc_72BAE
0007DC7C                            ; ===========================================================================
0007DC7C 6000 0000                  		bra.w	loc_72BB4
0007DC80                            ; ===========================================================================
0007DC80 6000 0000                  		bra.w	loc_72BBE
0007DC84                            ; ===========================================================================
0007DC84 6000 0000                  		bra.w	loc_72BC6
0007DC88                            ; ===========================================================================
0007DC88 6000 0000                  		bra.w	loc_72BD0
0007DC8C                            ; ===========================================================================
0007DC8C 6000 0000                  		bra.w	loc_72BE6
0007DC90                            ; ===========================================================================
0007DC90 6000 0000                  		bra.w	loc_72BEE
0007DC94                            ; ===========================================================================
0007DC94 6000 0000                  		bra.w	loc_72BF4
0007DC98                            ; ===========================================================================
0007DC98 6000 0000                  		bra.w	loc_72C26
0007DC9C                            ; ===========================================================================
0007DC9C 6000 0000                  		bra.w	loc_72D30
0007DCA0                            ; ===========================================================================
0007DCA0 6000 0000                  		bra.w	loc_72D52
0007DCA4                            ; ===========================================================================
0007DCA4 6000 0000                  		bra.w	loc_72D58
0007DCA8                            ; ===========================================================================
0007DCA8 6000 0000                  		bra.w	loc_72E06
0007DCAC                            ; ===========================================================================
0007DCAC 6000 0000                  		bra.w	loc_72E20
0007DCB0                            ; ===========================================================================
0007DCB0 6000 0000                  		bra.w	loc_72E26
0007DCB4                            ; ===========================================================================
0007DCB4 6000 0000                  		bra.w	loc_72E2C
0007DCB8                            ; ===========================================================================
0007DCB8 6000 0000                  		bra.w	loc_72E38
0007DCBC                            ; ===========================================================================
0007DCBC 6000 0000                  		bra.w	loc_72E52
0007DCC0                            ; ===========================================================================
0007DCC0 6000 0000                  		bra.w	loc_72E64
0007DCC4                            ; ===========================================================================
0007DCC4                            
0007DCC4                            loc_72ACC:				; XREF: loc_72A64
0007DCC4 121C                       		move.b	(a4)+,d1
0007DCC6 4A2D 0001                  		tst.b	1(a5)
0007DCCA 6B00                       		bmi.s	locret_72AEA
0007DCCC 102D 000A                  		move.b	$A(a5),d0
0007DCD0 0200 0037                  		andi.b	#$37,d0
0007DCD4 8200                       		or.b	d0,d1
0007DCD6 1B41 000A                  		move.b	d1,$A(a5)
0007DCDA 103C 00B4                  		move.b	#$B4,d0
0007DCDE 6000 FC2E                  		bra.w	loc_72716
0007DCE2                            ; ===========================================================================
0007DCE2                            
0007DCE2                            locret_72AEA:
0007DCE2 4E75                       		rts	
0007DCE4                            ; ===========================================================================
0007DCE4                            
0007DCE4                            loc_72AEC:				; XREF: loc_72A64
0007DCE4 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007DCE8 4E75                       		rts	
0007DCEA                            ; ===========================================================================
0007DCEA                            
0007DCEA                            loc_72AF2:				; XREF: loc_72A64
0007DCEA 1D5C 0007                  		move.b	(a4)+,7(a6)
0007DCEE 4E75                       		rts	
0007DCF0                            ; ===========================================================================
0007DCF0                            
0007DCF0                            loc_72AF8:				; XREF: loc_72A64
0007DCF0 7000                       		moveq	#0,d0
0007DCF2 102D 000D                  		move.b	$D(a5),d0
0007DCF6 2875 0000                  		movea.l	(a5,d0.w),a4
0007DCFA 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007DD02 544C                       		addq.w	#2,a4
0007DD04 5800                       		addq.b	#4,d0
0007DD06 1B40 000D                  		move.b	d0,$D(a5)
0007DD0A 4E75                       		rts	
0007DD0C                            ; ===========================================================================
0007DD0C                            
0007DD0C                            loc_72B14:				; XREF: loc_72A64
0007DD0C 204E                       		movea.l	a6,a0
0007DD0E 43EE 03A0                  		lea	$3A0(a6),a1
0007DD12 303C 0087                  		move.w	#$87,d0
0007DD16                            
0007DD16                            loc_72B1E:
0007DD16 20D9                       		move.l	(a1)+,(a0)+
0007DD18 51C8 FFFC                  		dbf	d0,loc_72B1E
0007DD1C                            
0007DD1C 08EE 0002 0040             		bset	#2,$40(a6)
0007DD22 264D                       		movea.l	a5,a3
0007DD24 1C3C 0028                  		move.b	#$28,d6
0007DD28 9C2E 0026                  		sub.b	$26(a6),d6
0007DD2C 7E05                       		moveq	#5,d7
0007DD2E 4BEE 0070                  		lea	$70(a6),a5
0007DD32                            
0007DD32                            loc_72B3A:
0007DD32 0815 0007                  		btst	#7,(a5)
0007DD36 6700                       		beq.s	loc_72B5C
0007DD38 08D5 0001                  		bset	#1,(a5)
0007DD3C DD2D 0009                  		add.b	d6,9(a5)
0007DD40 0815 0002                  		btst	#2,(a5)
0007DD44 6600                       		bne.s	loc_72B5C
0007DD46 7000                       		moveq	#0,d0
0007DD48 102D 000B                  		move.b	$B(a5),d0
0007DD4C 226E 0018                  		movea.l	$18(a6),a1
0007DD50 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DD54                            
0007DD54                            loc_72B5C:
0007DD54 DAFC 0030                  		adda.w	#$30,a5
0007DD58 51CF FFD8                  		dbf	d7,loc_72B3A
0007DD5C                            
0007DD5C 7E02                       		moveq	#2,d7
0007DD5E                            
0007DD5E                            loc_72B66:
0007DD5E 0815 0007                  		btst	#7,(a5)
0007DD62 6700                       		beq.s	loc_72B78
0007DD64 08D5 0001                  		bset	#1,(a5)
0007DD68 4EBA FE2E                  		jsr	sub_729A0(pc)
0007DD6C DD2D 0009                  		add.b	d6,9(a5)
0007DD70                            
0007DD70                            loc_72B78:
0007DD70 DAFC 0030                  		adda.w	#$30,a5
0007DD74 51CF FFE8                  		dbf	d7,loc_72B66
0007DD78 2A4B                       		movea.l	a3,a5
0007DD7A 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007DD80 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007DD86 422E 0027                  		clr.b	$27(a6)
0007DD8A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007DD92 504F                       		addq.w	#8,sp
0007DD94 4E75                       		rts	
0007DD96                            ; ===========================================================================
0007DD96                            
0007DD96                            loc_72B9E:				; XREF: loc_72A64
0007DD96 1B5C 0002                  		move.b	(a4)+,2(a5)
0007DD9A 4E75                       		rts	
0007DD9C                            ; ===========================================================================
0007DD9C                            
0007DD9C                            loc_72BA4:				; XREF: loc_72A64
0007DD9C 101C                       		move.b	(a4)+,d0
0007DD9E D12D 0009                  		add.b	d0,9(a5)
0007DDA2 6000 0000                  		bra.w	sub_72CB4
0007DDA6                            ; ===========================================================================
0007DDA6                            
0007DDA6                            loc_72BAE:				; XREF: loc_72A64
0007DDA6 08D5 0004                  		bset	#4,(a5)
0007DDAA 4E75                       		rts	
0007DDAC                            ; ===========================================================================
0007DDAC                            
0007DDAC                            loc_72BB4:				; XREF: loc_72A64
0007DDAC 1B54 0012                  		move.b	(a4),$12(a5)
0007DDB0 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007DDB4 4E75                       		rts	
0007DDB6                            ; ===========================================================================
0007DDB6                            
0007DDB6                            loc_72BBE:				; XREF: loc_72A64
0007DDB6 101C                       		move.b	(a4)+,d0
0007DDB8 D12D 0008                  		add.b	d0,8(a5)
0007DDBC 4E75                       		rts	
0007DDBE                            ; ===========================================================================
0007DDBE                            
0007DDBE                            loc_72BC6:				; XREF: loc_72A64
0007DDBE 1D54 0002                  		move.b	(a4),2(a6)
0007DDC2 1D5C 0001                  		move.b	(a4)+,1(a6)
0007DDC6 4E75                       		rts	
0007DDC8                            ; ===========================================================================
0007DDC8                            
0007DDC8                            loc_72BD0:				; XREF: loc_72A64
0007DDC8 41EE 0040                  		lea	$40(a6),a0
0007DDCC 101C                       		move.b	(a4)+,d0
0007DDCE 7230                       		moveq	#$30,d1
0007DDD0 7409                       		moveq	#9,d2
0007DDD2                            
0007DDD2                            loc_72BDA:
0007DDD2 1140 0002                  		move.b	d0,2(a0)
0007DDD6 D0C1                       		adda.w	d1,a0
0007DDD8 51CA FFF8                  		dbf	d2,loc_72BDA
0007DDDC                            
0007DDDC 4E75                       		rts	
0007DDDE                            ; ===========================================================================
0007DDDE                            
0007DDDE                            loc_72BE6:				; XREF: loc_72A64
0007DDDE 101C                       		move.b	(a4)+,d0
0007DDE0 D12D 0009                  		add.b	d0,9(a5)
0007DDE4 4E75                       		rts	
0007DDE6                            ; ===========================================================================
0007DDE6                            
0007DDE6                            loc_72BEE:				; XREF: loc_72A64
0007DDE6 422E 002C                  		clr.b	$2C(a6)
0007DDEA 4E75                       		rts	
0007DDEC                            ; ===========================================================================
0007DDEC                            
0007DDEC                            loc_72BF4:				; XREF: loc_72A64
0007DDEC 0895 0007                  		bclr	#7,(a5)
0007DDF0 0895 0004                  		bclr	#4,(a5)
0007DDF4 4EBA FB00                  		jsr	sub_726FE(pc)
0007DDF8 4A2E 0250                  		tst.b	$250(a6)
0007DDFC 6B00                       		bmi.s	loc_72C22
0007DDFE 264D                       		movea.l	a5,a3
0007DE00 4BEE 0100                  		lea	$100(a6),a5
0007DE04 226E 0018                  		movea.l	$18(a6),a1
0007DE08 0895 0002                  		bclr	#2,(a5)
0007DE0C 08D5 0001                  		bset	#1,(a5)
0007DE10 102D 000B                  		move.b	$B(a5),d0
0007DE14 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DE18 2A4B                       		movea.l	a3,a5
0007DE1A                            
0007DE1A                            loc_72C22:
0007DE1A 504F                       		addq.w	#8,sp
0007DE1C 4E75                       		rts	
0007DE1E                            ; ===========================================================================
0007DE1E                            
0007DE1E                            loc_72C26:				; XREF: loc_72A64
0007DE1E 7000                       		moveq	#0,d0
0007DE20 101C                       		move.b	(a4)+,d0
0007DE22 1B40 000B                  		move.b	d0,$B(a5)
0007DE26 0815 0002                  		btst	#2,(a5)
0007DE2A 6600 0000                  		bne.w	locret_72CAA
0007DE2E 226E 0018                  		movea.l	$18(a6),a1
0007DE32 4A2E 000E                  		tst.b	$E(a6)
0007DE36 6700                       		beq.s	sub_72C4E
0007DE38 226D 0020                  		movea.l	$20(a5),a1
0007DE3C 4A2E 000E                  		tst.b	$E(a6)
0007DE40 6B00                       		bmi.s	sub_72C4E
0007DE42 226E 0020                  		movea.l	$20(a6),a1
0007DE46                            
0007DE46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DE46                            
0007DE46                            
0007DE46                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007DE46 5340                       		subq.w	#1,d0
0007DE48 6B00                       		bmi.s	loc_72C5C
0007DE4A 323C 0019                  		move.w	#$19,d1
0007DE4E                            
0007DE4E                            loc_72C56:
0007DE4E D2C1                       		adda.w	d1,a1
0007DE50 51C8 FFFC                  		dbf	d0,loc_72C56
0007DE54                            
0007DE54                            loc_72C5C:
0007DE54 1219                       		move.b	(a1)+,d1
0007DE56 1B41 001F                  		move.b	d1,$1F(a5)
0007DE5A 1801                       		move.b	d1,d4
0007DE5C 103C 00B0                  		move.b	#$B0,d0
0007DE60 4EBA FAB8                  		jsr	sub_72722(pc)
0007DE64 45FA 0000                  		lea	byte_72D18(pc),a2
0007DE68 7613                       		moveq	#$13,d3
0007DE6A                            
0007DE6A                            loc_72C72:
0007DE6A 101A                       		move.b	(a2)+,d0
0007DE6C 1219                       		move.b	(a1)+,d1
0007DE6E 4EBA FAAA                  		jsr	sub_72722(pc)
0007DE72 51CB FFF6                  		dbf	d3,loc_72C72
0007DE76 7A03                       		moveq	#3,d5
0007DE78 0244 0007                  		andi.w	#7,d4
0007DE7C 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007DE80 162D 0009                  		move.b	9(a5),d3
0007DE84                            
0007DE84                            loc_72C8C:
0007DE84 101A                       		move.b	(a2)+,d0
0007DE86 1219                       		move.b	(a1)+,d1
0007DE88 E20C                       		lsr.b	#1,d4
0007DE8A 6400                       		bcc.s	loc_72C96
0007DE8C D203                       		add.b	d3,d1
0007DE8E                            
0007DE8E                            loc_72C96:
0007DE8E 4EBA FA8A                  		jsr	sub_72722(pc)
0007DE92 51CD FFF0                  		dbf	d5,loc_72C8C
0007DE96 103C 00B4                  		move.b	#$B4,d0
0007DE9A 122D 000A                  		move.b	$A(a5),d1
0007DE9E 4EBA FA7A                  		jsr	sub_72722(pc)
0007DEA2                            
0007DEA2                            locret_72CAA:
0007DEA2 4E75                       		rts	
0007DEA4                            ; End of function sub_72C4E
0007DEA4                            
0007DEA4                            ; ===========================================================================
0007DEA4 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007DEAC                            
0007DEAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DEAC                            
0007DEAC                            
0007DEAC                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007DEAC 0815 0002                  		btst	#2,(a5)
0007DEB0 6600                       		bne.s	locret_72D16
0007DEB2 7000                       		moveq	#0,d0
0007DEB4 102D 000B                  		move.b	$B(a5),d0
0007DEB8 226E 0018                  		movea.l	$18(a6),a1
0007DEBC 4A2E 000E                  		tst.b	$E(a6)
0007DEC0 6700                       		beq.s	loc_72CD8
0007DEC2 226E 0020                  		movea.l	$20(a6),a1
0007DEC6 4A2E 000E                  		tst.b	$E(a6)
0007DECA 6B00                       		bmi.s	loc_72CD8
0007DECC 226E 0020                  		movea.l	$20(a6),a1
0007DED0                            
0007DED0                            loc_72CD8:
0007DED0 5340                       		subq.w	#1,d0
0007DED2 6B00                       		bmi.s	loc_72CE6
0007DED4 323C 0019                  		move.w	#$19,d1
0007DED8                            
0007DED8                            loc_72CE0:
0007DED8 D2C1                       		adda.w	d1,a1
0007DEDA 51C8 FFFC                  		dbf	d0,loc_72CE0
0007DEDE                            
0007DEDE                            loc_72CE6:
0007DEDE D2FC 0015                  		adda.w	#$15,a1
0007DEE2 45FA 0000                  		lea	byte_72D2C(pc),a2
0007DEE6 102D 001F                  		move.b	$1F(a5),d0
0007DEEA 0240 0007                  		andi.w	#7,d0
0007DEEE 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007DEF2 162D 0009                  		move.b	9(a5),d3
0007DEF6 6B00                       		bmi.s	locret_72D16
0007DEF8 7A03                       		moveq	#3,d5
0007DEFA                            
0007DEFA                            loc_72D02:
0007DEFA 101A                       		move.b	(a2)+,d0
0007DEFC 1219                       		move.b	(a1)+,d1
0007DEFE E20C                       		lsr.b	#1,d4
0007DF00 6400                       		bcc.s	loc_72D12
0007DF02 D203                       		add.b	d3,d1
0007DF04 6500                       		bcs.s	loc_72D12
0007DF06 4EBA FA12                  		jsr	sub_72722(pc)
0007DF0A                            
0007DF0A                            loc_72D12:
0007DF0A 51CD FFEE                  		dbf	d5,loc_72D02
0007DF0E                            
0007DF0E                            locret_72D16:
0007DF0E 4E75                       		rts	
0007DF10                            ; End of function sub_72CB4
0007DF10                            
0007DF10                            ; ===========================================================================
0007DF10 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007DF1A 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007DF24 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007DF28                            ; ===========================================================================
0007DF28                            
0007DF28                            loc_72D30:				; XREF: loc_72A64
0007DF28 08D5 0003                  		bset	#3,(a5)
0007DF2C 2B4C 0014                  		move.l	a4,$14(a5)
0007DF30 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007DF34 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007DF38 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007DF3C 101C                       		move.b	(a4)+,d0
0007DF3E E208                       		lsr.b	#1,d0
0007DF40 1B40 001B                  		move.b	d0,$1B(a5)
0007DF44 426D 001C                  		clr.w	$1C(a5)
0007DF48 4E75                       		rts	
0007DF4A                            ; ===========================================================================
0007DF4A                            
0007DF4A                            loc_72D52:				; XREF: loc_72A64
0007DF4A 08D5 0003                  		bset	#3,(a5)
0007DF4E 4E75                       		rts	
0007DF50                            ; ===========================================================================
0007DF50                            
0007DF50                            loc_72D58:				; XREF: loc_72A64
0007DF50 0895 0007                  		bclr	#7,(a5)
0007DF54 0895 0004                  		bclr	#4,(a5)
0007DF58 4A2D 0001                  		tst.b	1(a5)
0007DF5C 6B00                       		bmi.s	loc_72D74
0007DF5E 4A2E 0008                  		tst.b	8(a6)
0007DF62 6B00 0000                  		bmi.w	loc_72E02
0007DF66 4EBA F98E                  		jsr	sub_726FE(pc)
0007DF6A 6000                       		bra.s	loc_72D78
0007DF6C                            ; ===========================================================================
0007DF6C                            
0007DF6C                            loc_72D74:
0007DF6C 4EBA FC2A                  		jsr	sub_729A0(pc)
0007DF70                            
0007DF70                            loc_72D78:
0007DF70 4A2E 000E                  		tst.b	$E(a6)
0007DF74 6A00 0000                  		bpl.w	loc_72E02
0007DF78 4216                       		clr.b	0(a6)
0007DF7A 7000                       		moveq	#0,d0
0007DF7C 102D 0001                  		move.b	1(a5),d0
0007DF80 6B00                       		bmi.s	loc_72DCC
0007DF82 41FA F546                  		lea	dword_722CC(pc),a0
0007DF86 264D                       		movea.l	a5,a3
0007DF88 0C00 0004                  		cmpi.b	#4,d0
0007DF8C 6600                       		bne.s	loc_72DA8
0007DF8E 4A2E 0340                  		tst.b	$340(a6)
0007DF92 6A00                       		bpl.s	loc_72DA8
0007DF94 4BEE 0340                  		lea	$340(a6),a5
0007DF98 226E 0020                  		movea.l	$20(a6),a1
0007DF9C 6000                       		bra.s	loc_72DB8
0007DF9E                            ; ===========================================================================
0007DF9E                            
0007DF9E                            loc_72DA8:
0007DF9E 5500                       		subq.b	#2,d0
0007DFA0 E508                       		lsl.b	#2,d0
0007DFA2 2A70 0000                  		movea.l	(a0,d0.w),a5
0007DFA6 4A15                       		tst.b	(a5)
0007DFA8 6A00                       		bpl.s	loc_72DC8
0007DFAA 226E 0018                  		movea.l	$18(a6),a1
0007DFAE                            
0007DFAE                            loc_72DB8:
0007DFAE 0895 0002                  		bclr	#2,(a5)
0007DFB2 08D5 0001                  		bset	#1,(a5)
0007DFB6 102D 000B                  		move.b	$B(a5),d0
0007DFBA 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007DFBE                            
0007DFBE                            loc_72DC8:
0007DFBE 2A4B                       		movea.l	a3,a5
0007DFC0 6000                       		bra.s	loc_72E02
0007DFC2                            ; ===========================================================================
0007DFC2                            
0007DFC2                            loc_72DCC:
0007DFC2 41EE 0370                  		lea	$370(a6),a0
0007DFC6 4A10                       		tst.b	(a0)
0007DFC8 6A00                       		bpl.s	loc_72DE0
0007DFCA 0C00 00E0                  		cmpi.b	#$E0,d0
0007DFCE 6700                       		beq.s	loc_72DEA
0007DFD0 0C00 00C0                  		cmpi.b	#$C0,d0
0007DFD4 6700                       		beq.s	loc_72DEA
0007DFD6                            
0007DFD6                            loc_72DE0:
0007DFD6 41FA F4F2                  		lea	dword_722CC(pc),a0
0007DFDA E608                       		lsr.b	#3,d0
0007DFDC 2070 0000                  		movea.l	(a0,d0.w),a0
0007DFE0                            
0007DFE0                            loc_72DEA:
0007DFE0 0890 0002                  		bclr	#2,(a0)
0007DFE4 08D0 0001                  		bset	#1,(a0)
0007DFE8 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007DFEE 6600                       		bne.s	loc_72E02
0007DFF0 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007DFF8                            
0007DFF8                            loc_72E02:
0007DFF8 504F                       		addq.w	#8,sp
0007DFFA 4E75                       		rts	
0007DFFC                            ; ===========================================================================
0007DFFC                            
0007DFFC                            loc_72E06:				; XREF: loc_72A64
0007DFFC 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007E002 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007E006 0815 0002                  		btst	#2,(a5)
0007E00A 6600                       		bne.s	locret_72E1E
0007E00C 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007E014                            
0007E014                            locret_72E1E:
0007E014 4E75                       		rts	
0007E016                            ; ===========================================================================
0007E016                            
0007E016                            loc_72E20:				; XREF: loc_72A64
0007E016 0895 0003                  		bclr	#3,(a5)
0007E01A 4E75                       		rts	
0007E01C                            ; ===========================================================================
0007E01C                            
0007E01C                            loc_72E26:				; XREF: loc_72A64
0007E01C 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007E020 4E75                       		rts	
0007E022                            ; ===========================================================================
0007E022                            
0007E022                            loc_72E2C:				; XREF: loc_72A64
0007E022 101C                       		move.b	(a4)+,d0
0007E024 E148                       		lsl.w	#8,d0
0007E026 101C                       		move.b	(a4)+,d0
0007E028 D8C0                       		adda.w	d0,a4
0007E02A 534C                       		subq.w	#1,a4
0007E02C 4E75                       		rts	
0007E02E                            ; ===========================================================================
0007E02E                            
0007E02E                            loc_72E38:				; XREF: loc_72A64
0007E02E 7000                       		moveq	#0,d0
0007E030 101C                       		move.b	(a4)+,d0
0007E032 121C                       		move.b	(a4)+,d1
0007E034 4A35 0024                  		tst.b	$24(a5,d0.w)
0007E038 6600                       		bne.s	loc_72E48
0007E03A 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007E03E                            
0007E03E                            loc_72E48:
0007E03E 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007E042 66DE                       		bne.s	loc_72E2C
0007E044 544C                       		addq.w	#2,a4
0007E046 4E75                       		rts	
0007E048                            ; ===========================================================================
0007E048                            
0007E048                            loc_72E52:				; XREF: loc_72A64
0007E048 7000                       		moveq	#0,d0
0007E04A 102D 000D                  		move.b	$D(a5),d0
0007E04E 5900                       		subq.b	#4,d0
0007E050 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007E054 1B40 000D                  		move.b	d0,$D(a5)
0007E058 60C8                       		bra.s	loc_72E2C
0007E05A                            ; ===========================================================================
0007E05A                            
0007E05A                            loc_72E64:				; XREF: loc_72A64
0007E05A 103C 0088                  		move.b	#$88,d0
0007E05E 123C 000F                  		move.b	#$F,d1
0007E062 4EBA F8C2                  		jsr	sub_7272E(pc)
0007E066 103C 008C                  		move.b	#$8C,d0
0007E06A 123C 000F                  		move.b	#$F,d1
0007E06E 6000 F8B6                  		bra.w	sub_7272E
0007E072                            ; ===========================================================================
0007E072                            Kos_Z80:	incbin	sound\z80_1.bin
0007E122 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007E124 21                         		dc.b $21
0007E125 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007E127                            		incbin	sound\z80_2.bin
0007F7D2                            		even
0007F7D2                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00085FD2                            		even
00085FD2                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008F870                            		even
0008F870                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00093490 00                         		even
00093490                            Music84:	include	sound\music84.asm ; Star Light Act 1
00093490                            music84_Header:
00093490 =00000001                  smpsHeaderStartSong = 1
00093490 0000                       	smpsHeaderVoice     music84_Voices
00093492 0603                       	smpsHeaderChan      $06, $03
00093494 0205                       	smpsHeaderTempo     $02, $05
00093496                            
0009349A 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0009349E 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000934A2 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000934A6 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000934AA 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000934AE 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000934B4 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000934BA 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000934C0                            
000934C0                            ; FM1 Data
000934C0                            music84_FM1:
000934C0 E0C0                       	smpsPan             panCenter, $00
000934C4 E107                       	smpsAlterNote       $07
000934C6 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000934CA E106                       	smpsAlterNote       $06
000934CC 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000934D0 E10B                       	smpsAlterNote       $0B
000934D2 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000934D8 E10C                       	smpsAlterNote       $0C
000934DA E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000934DD E10B                       	smpsAlterNote       $0B
000934DF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000934E2 E109                       	smpsAlterNote       $09
000934E4 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000934E9 E108                       	smpsAlterNote       $08
000934EB 8001                       	dc.b	nRst, $01
000934ED E10B                       	smpsAlterNote       $0B
000934EF 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
000934F5 E107                       	smpsAlterNote       $07
000934F7 9B03                       	dc.b	nD2, $03
000934F9                            
000934F9                            music84_Jump04:
000934F9 E107                       	smpsAlterNote       $07
000934FB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000934FF E10B                       	smpsAlterNote       $0B
00093501 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093505 E107                       	smpsAlterNote       $07
00093507 9B03                       	dc.b	nD2, $03
00093509 E11A                       	smpsAlterNote       $1A
0009350B A301                       	dc.b	nBb2, $01
0009350D E1F2                       	smpsAlterNote       $F2
0009350F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093512 E1FF                       	smpsAlterNote       $FF
00093514 E701                       	dc.b	smpsNoAttack, $01
00093516 E111                       	smpsAlterNote       $11
00093518 E701                       	dc.b	smpsNoAttack, $01
0009351A E106                       	smpsAlterNote       $06
0009351C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0009351F E107                       	smpsAlterNote       $07
00093521 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093525 E108                       	smpsAlterNote       $08
00093527 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0009352F E109                       	smpsAlterNote       $09
00093531 A003                       	dc.b	nG2, $03
00093533 E10C                       	smpsAlterNote       $0C
00093535 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093539 E1FD                       	smpsAlterNote       $FD
0009353B A401                       	dc.b	nB2, $01
0009353D E109                       	smpsAlterNote       $09
0009353F E701                       	dc.b	smpsNoAttack, $01
00093541 E106                       	smpsAlterNote       $06
00093543 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093546 E109                       	smpsAlterNote       $09
00093548 A007                       	dc.b	nG2, $07
0009354A E108                       	smpsAlterNote       $08
0009354C 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093550 E107                       	smpsAlterNote       $07
00093552 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093558 E10B                       	smpsAlterNote       $0B
0009355A A203 8001                  	dc.b	nA2, $03, nRst, $01
0009355E E107                       	smpsAlterNote       $07
00093560 9B03                       	dc.b	nD2, $03
00093562 E11A                       	smpsAlterNote       $1A
00093564 A301                       	dc.b	nBb2, $01
00093566 E1F9                       	smpsAlterNote       $F9
00093568 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009356B E107                       	smpsAlterNote       $07
0009356D E701                       	dc.b	smpsNoAttack, $01
0009356F E111                       	smpsAlterNote       $11
00093571 E701                       	dc.b	smpsNoAttack, $01
00093573 E106                       	smpsAlterNote       $06
00093575 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0009357A E107                       	smpsAlterNote       $07
0009357C 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093584 E1EC                       	smpsAlterNote       $EC
00093586 A101                       	dc.b	nAb2, $01
00093588 E108                       	smpsAlterNote       $08
0009358A E701                       	dc.b	smpsNoAttack, $01
0009358C E116                       	smpsAlterNote       $16
0009358E E701                       	dc.b	smpsNoAttack, $01
00093590 E1F5                       	smpsAlterNote       $F5
00093592 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093595 E10B                       	smpsAlterNote       $0B
00093597 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009359B E107                       	smpsAlterNote       $07
0009359D 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000935A3 E109                       	smpsAlterNote       $09
000935A5 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000935A9 E10B                       	smpsAlterNote       $0B
000935AB 9603                       	dc.b	nA1, $03
000935AD E107                       	smpsAlterNote       $07
000935AF 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000935B5 E10B                       	smpsAlterNote       $0B
000935B7 A203 8001                  	dc.b	nA2, $03, nRst, $01
000935BB E107                       	smpsAlterNote       $07
000935BD 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000935C1 E11A                       	smpsAlterNote       $1A
000935C3 A301                       	dc.b	nBb2, $01
000935C5 E1F9                       	smpsAlterNote       $F9
000935C7 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000935CA E107                       	smpsAlterNote       $07
000935CC E701                       	dc.b	smpsNoAttack, $01
000935CE E1FB                       	smpsAlterNote       $FB
000935D0 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000935D3 E106                       	smpsAlterNote       $06
000935D5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000935D9 E107                       	smpsAlterNote       $07
000935DB 9B03                       	dc.b	nD2, $03
000935DD E108                       	smpsAlterNote       $08
000935DF 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000935E5 E109                       	smpsAlterNote       $09
000935E7 A002 8001                  	dc.b	nG2, $02, nRst, $01
000935EB E10C                       	smpsAlterNote       $0C
000935ED A303                       	dc.b	nBb2, $03
000935EF E1F0                       	smpsAlterNote       $F0
000935F1 A401                       	dc.b	nB2, $01
000935F3 E1FD                       	smpsAlterNote       $FD
000935F5 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
000935FA E106                       	smpsAlterNote       $06
000935FC 8001                       	dc.b	nRst, $01
000935FE E109                       	smpsAlterNote       $09
00093600 A006 8001                  	dc.b	nG2, $06, nRst, $01
00093604 E108                       	smpsAlterNote       $08
00093606 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0009360A E107                       	smpsAlterNote       $07
0009360C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093612 E10B                       	smpsAlterNote       $0B
00093614 A203                       	dc.b	nA2, $03
00093616 E107                       	smpsAlterNote       $07
00093618 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009361C E1F2                       	smpsAlterNote       $F2
0009361E A401                       	dc.b	nB2, $01
00093620 E1FF                       	smpsAlterNote       $FF
00093622 E701                       	dc.b	smpsNoAttack, $01
00093624 E107                       	smpsAlterNote       $07
00093626 E701                       	dc.b	smpsNoAttack, $01
00093628 E1FB                       	smpsAlterNote       $FB
0009362A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009362D E106                       	smpsAlterNote       $06
0009362F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093633 E107                       	smpsAlterNote       $07
00093635 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0009363F E117                       	smpsAlterNote       $17
00093641 A001                       	dc.b	nG2, $01
00093643 E1FA                       	smpsAlterNote       $FA
00093645 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093648 E108                       	smpsAlterNote       $08
0009364A E701                       	dc.b	smpsNoAttack, $01
0009364C E1E7                       	smpsAlterNote       $E7
0009364E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093651 E103                       	smpsAlterNote       $03
00093653 E701                       	dc.b	smpsNoAttack, $01
00093655 E10B                       	smpsAlterNote       $0B
00093657 E702                       	dc.b	smpsNoAttack, $02
00093659 E107                       	smpsAlterNote       $07
0009365B 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00093663 E106                       	smpsAlterNote       $06
00093665 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0009366B E10C                       	smpsAlterNote       $0C
0009366D 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00093673 E109                       	smpsAlterNote       $09
00093675 9E03                       	dc.b	nF2, $03
00093677 E10C                       	smpsAlterNote       $0C
00093679 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0009367D E1EA                       	smpsAlterNote       $EA
0009367F A201                       	dc.b	nA2, $01
00093681 E106                       	smpsAlterNote       $06
00093683 E701                       	dc.b	smpsNoAttack, $01
00093685 E1E2                       	smpsAlterNote       $E2
00093687 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009368A E1F0                       	smpsAlterNote       $F0
0009368C E701                       	dc.b	smpsNoAttack, $01
0009368E E10C                       	smpsAlterNote       $0C
00093690 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0009369C E116                       	smpsAlterNote       $16
0009369E 9C01                       	dc.b	nEb2, $01
000936A0 E105                       	smpsAlterNote       $05
000936A2 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000936A5 E1F1                       	smpsAlterNote       $F1
000936A7 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000936AA E1FF                       	smpsAlterNote       $FF
000936AC E701                       	dc.b	smpsNoAttack, $01
000936AE E109                       	smpsAlterNote       $09
000936B0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000936B4 E10C                       	smpsAlterNote       $0C
000936B6 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000936C2 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000936C8 E109                       	smpsAlterNote       $09
000936CA 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000936CE E10C                       	smpsAlterNote       $0C
000936D0 9703                       	dc.b	nBb1, $03
000936D2 E11A                       	smpsAlterNote       $1A
000936D4 A101                       	dc.b	nAb2, $01
000936D6 E1FB                       	smpsAlterNote       $FB
000936D8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000936DB E10A                       	smpsAlterNote       $0A
000936DD E701                       	dc.b	smpsNoAttack, $01
000936DF E1E8                       	smpsAlterNote       $E8
000936E1 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000936E4 E106                       	smpsAlterNote       $06
000936E6 E701                       	dc.b	smpsNoAttack, $01
000936E8 E10C                       	smpsAlterNote       $0C
000936EA E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
000936F6 E1F9                       	smpsAlterNote       $F9
000936F8 9D01                       	dc.b	nE2, $01
000936FA E108                       	smpsAlterNote       $08
000936FC E701                       	dc.b	smpsNoAttack, $01
000936FE E1F6                       	smpsAlterNote       $F6
00093700 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093703 E109                       	smpsAlterNote       $09
00093705 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00093709 E10C                       	smpsAlterNote       $0C
0009370B 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00093717 E108                       	smpsAlterNote       $08
00093719 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0009371F E106                       	smpsAlterNote       $06
00093721 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093725 E108                       	smpsAlterNote       $08
00093727 9D03                       	dc.b	nE2, $03
00093729 E1EB                       	smpsAlterNote       $EB
0009372B A801                       	dc.b	nEb3, $01
0009372D E109                       	smpsAlterNote       $09
0009372F E701                       	dc.b	smpsNoAttack, $01
00093731 E1FA                       	smpsAlterNote       $FA
00093733 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00093736 E108                       	smpsAlterNote       $08
00093738 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00093744 E1E9                       	smpsAlterNote       $E9
00093746 A301                       	dc.b	nBb2, $01
00093748 E107                       	smpsAlterNote       $07
0009374A E701                       	dc.b	smpsNoAttack, $01
0009374C E1F0                       	smpsAlterNote       $F0
0009374E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093751 E1F7                       	smpsAlterNote       $F7
00093753 E701                       	dc.b	smpsNoAttack, $01
00093755 E107                       	smpsAlterNote       $07
00093757 E701                       	dc.b	smpsNoAttack, $01
00093759 E106                       	smpsAlterNote       $06
0009375B E701                       	dc.b	smpsNoAttack, $01
0009375D E108                       	smpsAlterNote       $08
0009375F 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00093765 E106                       	smpsAlterNote       $06
00093767 A403 8001                  	dc.b	nB2, $03, nRst, $01
0009376B E108                       	smpsAlterNote       $08
0009376D 9D03                       	dc.b	nE2, $03
0009376F E10B                       	smpsAlterNote       $0B
00093771 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00093779 E108                       	smpsAlterNote       $08
0009377B 9D03                       	dc.b	nE2, $03
0009377D E10B                       	smpsAlterNote       $0B
0009377F 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093783 E113                       	smpsAlterNote       $13
00093785 A001                       	dc.b	nG2, $01
00093787 E118                       	smpsAlterNote       $18
00093789 E701                       	dc.b	smpsNoAttack, $01
0009378B E1E9                       	smpsAlterNote       $E9
0009378D E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093790 E1F3                       	smpsAlterNote       $F3
00093792 E701                       	dc.b	smpsNoAttack, $01
00093794 E1FD                       	smpsAlterNote       $FD
00093796 E701                       	dc.b	smpsNoAttack, $01
00093798 E102                       	smpsAlterNote       $02
0009379A E701                       	dc.b	smpsNoAttack, $01
0009379C E107                       	smpsAlterNote       $07
0009379E 8001                       	dc.b	nRst, $01
000937A0 E10B                       	smpsAlterNote       $0B
000937A2 9603                       	dc.b	nA1, $03
000937A4 E10C                       	smpsAlterNote       $0C
000937A6 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000937AC E10B                       	smpsAlterNote       $0B
000937AE 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000937BA 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000937C0 E107                       	smpsAlterNote       $07
000937C2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000937C8 E10B                       	smpsAlterNote       $0B
000937CA A203                       	dc.b	nA2, $03
000937CC E107                       	smpsAlterNote       $07
000937CE 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000937D2 E1F2                       	smpsAlterNote       $F2
000937D4 A401                       	dc.b	nB2, $01
000937D6 E1FF                       	smpsAlterNote       $FF
000937D8 E701                       	dc.b	smpsNoAttack, $01
000937DA E107                       	smpsAlterNote       $07
000937DC E701                       	dc.b	smpsNoAttack, $01
000937DE E1FB                       	smpsAlterNote       $FB
000937E0 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000937E3 E106                       	smpsAlterNote       $06
000937E5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000937E9 E107                       	smpsAlterNote       $07
000937EB 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000937EF E108                       	smpsAlterNote       $08
000937F1 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000937F7 E109                       	smpsAlterNote       $09
000937F9 A003 8001                  	dc.b	nG2, $03, nRst, $01
000937FD E10C                       	smpsAlterNote       $0C
000937FF A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093803 E1F0                       	smpsAlterNote       $F0
00093805 A401                       	dc.b	nB2, $01
00093807 E109                       	smpsAlterNote       $09
00093809 E701                       	dc.b	smpsNoAttack, $01
0009380B E106                       	smpsAlterNote       $06
0009380D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093810 E109                       	smpsAlterNote       $09
00093812 A007                       	dc.b	nG2, $07
00093814 E108                       	smpsAlterNote       $08
00093816 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0009381A E107                       	smpsAlterNote       $07
0009381C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093822 E10B                       	smpsAlterNote       $0B
00093824 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093828 E107                       	smpsAlterNote       $07
0009382A 9B03                       	dc.b	nD2, $03
0009382C E11A                       	smpsAlterNote       $1A
0009382E A301                       	dc.b	nBb2, $01
00093830 E1F2                       	smpsAlterNote       $F2
00093832 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093835 E1FF                       	smpsAlterNote       $FF
00093837 E701                       	dc.b	smpsNoAttack, $01
00093839 E111                       	smpsAlterNote       $11
0009383B E701                       	dc.b	smpsNoAttack, $01
0009383D E106                       	smpsAlterNote       $06
0009383F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093842 E107                       	smpsAlterNote       $07
00093844 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093850 E117                       	smpsAlterNote       $17
00093852 A001                       	dc.b	nG2, $01
00093854 E1FA                       	smpsAlterNote       $FA
00093856 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093859 E116                       	smpsAlterNote       $16
0009385B E701                       	dc.b	smpsNoAttack, $01
0009385D E1F5                       	smpsAlterNote       $F5
0009385F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093862 E103                       	smpsAlterNote       $03
00093864 E701                       	dc.b	smpsNoAttack, $01
00093866 E10B                       	smpsAlterNote       $0B
00093868 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009386C E107                       	smpsAlterNote       $07
0009386E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093874 E109                       	smpsAlterNote       $09
00093876 9E03                       	dc.b	nF2, $03
00093878 E10B                       	smpsAlterNote       $0B
0009387A 9603 8001                  	dc.b	nA1, $03, nRst, $01
0009387E E107                       	smpsAlterNote       $07
00093880 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093886 E10B                       	smpsAlterNote       $0B
00093888 A203 8001                  	dc.b	nA2, $03, nRst, $01
0009388C E107                       	smpsAlterNote       $07
0009388E 9B03                       	dc.b	nD2, $03
00093890 E11A                       	smpsAlterNote       $1A
00093892 A301                       	dc.b	nBb2, $01
00093894 E1F9                       	smpsAlterNote       $F9
00093896 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093899 E107                       	smpsAlterNote       $07
0009389B E701                       	dc.b	smpsNoAttack, $01
0009389D E111                       	smpsAlterNote       $11
0009389F E701                       	dc.b	smpsNoAttack, $01
000938A1 E106                       	smpsAlterNote       $06
000938A3 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000938A8 E107                       	smpsAlterNote       $07
000938AA 9B03                       	dc.b	nD2, $03
000938AC E108                       	smpsAlterNote       $08
000938AE 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000938B4 E109                       	smpsAlterNote       $09
000938B6 A003                       	dc.b	nG2, $03
000938B8 E10C                       	smpsAlterNote       $0C
000938BA A303 8001                  	dc.b	nBb2, $03, nRst, $01
000938BE E1FD                       	smpsAlterNote       $FD
000938C0 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000938C5 E106                       	smpsAlterNote       $06
000938C7 8001                       	dc.b	nRst, $01
000938C9 E109                       	smpsAlterNote       $09
000938CB A006 8001                  	dc.b	nG2, $06, nRst, $01
000938CF E108                       	smpsAlterNote       $08
000938D1 9C03                       	dc.b	nEb2, $03
000938D3 E107                       	smpsAlterNote       $07
000938D5 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000938DB E10B                       	smpsAlterNote       $0B
000938DD A203 8001                  	dc.b	nA2, $03, nRst, $01
000938E1 E107                       	smpsAlterNote       $07
000938E3 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000938E7 E11A                       	smpsAlterNote       $1A
000938E9 A301                       	dc.b	nBb2, $01
000938EB E1F9                       	smpsAlterNote       $F9
000938ED E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000938F0 E107                       	smpsAlterNote       $07
000938F2 E701                       	dc.b	smpsNoAttack, $01
000938F4 E1FB                       	smpsAlterNote       $FB
000938F6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000938F9 E106                       	smpsAlterNote       $06
000938FB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000938FF E107                       	smpsAlterNote       $07
00093901 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093909 E1EC                       	smpsAlterNote       $EC
0009390B A101                       	dc.b	nAb2, $01
0009390D E108                       	smpsAlterNote       $08
0009390F E701                       	dc.b	smpsNoAttack, $01
00093911 E1E7                       	smpsAlterNote       $E7
00093913 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093916 E1F5                       	smpsAlterNote       $F5
00093918 E701                       	dc.b	smpsNoAttack, $01
0009391A E10B                       	smpsAlterNote       $0B
0009391C E702                       	dc.b	smpsNoAttack, $02
0009391E E107                       	smpsAlterNote       $07
00093920 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093926 E106                       	smpsAlterNote       $06
00093928 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0009392E E10C                       	smpsAlterNote       $0C
00093930 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093938 E109                       	smpsAlterNote       $09
0009393A 9E03                       	dc.b	nF2, $03
0009393C E10C                       	smpsAlterNote       $0C
0009393E 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093942 E1EA                       	smpsAlterNote       $EA
00093944 A201                       	dc.b	nA2, $01
00093946 E106                       	smpsAlterNote       $06
00093948 E701                       	dc.b	smpsNoAttack, $01
0009394A E114                       	smpsAlterNote       $14
0009394C E701                       	dc.b	smpsNoAttack, $01
0009394E E1F0                       	smpsAlterNote       $F0
00093950 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093953 E10C                       	smpsAlterNote       $0C
00093955 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093961 9703                       	dc.b	nBb1, $03
00093963 E116                       	smpsAlterNote       $16
00093965 9C01                       	dc.b	nEb2, $01
00093967 E105                       	smpsAlterNote       $05
00093969 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0009396C E113                       	smpsAlterNote       $13
0009396E E701                       	dc.b	smpsNoAttack, $01
00093970 E1FF                       	smpsAlterNote       $FF
00093972 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093975 E109                       	smpsAlterNote       $09
00093977 E703                       	dc.b	smpsNoAttack, $03
00093979 E10C                       	smpsAlterNote       $0C
0009397B 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093987 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0009398F E109                       	smpsAlterNote       $09
00093991 9E03                       	dc.b	nF2, $03
00093993 E10C                       	smpsAlterNote       $0C
00093995 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093999 E1EC                       	smpsAlterNote       $EC
0009399B A201                       	dc.b	nA2, $01
0009399D E10A                       	smpsAlterNote       $0A
0009399F E701                       	dc.b	smpsNoAttack, $01
000939A1 E1E8                       	smpsAlterNote       $E8
000939A3 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000939A6 E1F7                       	smpsAlterNote       $F7
000939A8 E701                       	dc.b	smpsNoAttack, $01
000939AA E10C                       	smpsAlterNote       $0C
000939AC E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000939B8 E1EA                       	smpsAlterNote       $EA
000939BA 9D01                       	dc.b	nE2, $01
000939BC E108                       	smpsAlterNote       $08
000939BE E701                       	dc.b	smpsNoAttack, $01
000939C0 E1F6                       	smpsAlterNote       $F6
000939C2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000939C5 E105                       	smpsAlterNote       $05
000939C7 E701                       	dc.b	smpsNoAttack, $01
000939C9 E109                       	smpsAlterNote       $09
000939CB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000939CF E10C                       	smpsAlterNote       $0C
000939D1 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000939DD E108                       	smpsAlterNote       $08
000939DF 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
000939E5 E106                       	smpsAlterNote       $06
000939E7 A403 8001                  	dc.b	nB2, $03, nRst, $01
000939EB E108                       	smpsAlterNote       $08
000939ED 9D03                       	dc.b	nE2, $03
000939EF E1EB                       	smpsAlterNote       $EB
000939F1 A801                       	dc.b	nEb3, $01
000939F3 E109                       	smpsAlterNote       $09
000939F5 E701                       	dc.b	smpsNoAttack, $01
000939F7 E1EB                       	smpsAlterNote       $EB
000939F9 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000939FC E108                       	smpsAlterNote       $08
000939FE E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00093A0A E1E9                       	smpsAlterNote       $E9
00093A0C A301                       	dc.b	nBb2, $01
00093A0E E1F8                       	smpsAlterNote       $F8
00093A10 E701                       	dc.b	smpsNoAttack, $01
00093A12 E116                       	smpsAlterNote       $16
00093A14 E701                       	dc.b	smpsNoAttack, $01
00093A16 E1F7                       	smpsAlterNote       $F7
00093A18 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093A1B E107                       	smpsAlterNote       $07
00093A1D E701                       	dc.b	smpsNoAttack, $01
00093A1F E1EE                       	smpsAlterNote       $EE
00093A21 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093A24 E106                       	smpsAlterNote       $06
00093A26 8001                       	dc.b	nRst, $01
00093A28 E108                       	smpsAlterNote       $08
00093A2A 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00093A30 E106                       	smpsAlterNote       $06
00093A32 A402 8001                  	dc.b	nB2, $02, nRst, $01
00093A36 E108                       	smpsAlterNote       $08
00093A38 9D03                       	dc.b	nE2, $03
00093A3A E10B                       	smpsAlterNote       $0B
00093A3C 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00093A42 E108                       	smpsAlterNote       $08
00093A44 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00093A48 E10B                       	smpsAlterNote       $0B
00093A4A 9603                       	dc.b	nA1, $03
00093A4C E10E                       	smpsAlterNote       $0E
00093A4E A001                       	dc.b	nG2, $01
00093A50 E118                       	smpsAlterNote       $18
00093A52 E701                       	dc.b	smpsNoAttack, $01
00093A54 E1E9                       	smpsAlterNote       $E9
00093A56 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093A59 E1EE                       	smpsAlterNote       $EE
00093A5B E701                       	dc.b	smpsNoAttack, $01
00093A5D E1F8                       	smpsAlterNote       $F8
00093A5F E701                       	dc.b	smpsNoAttack, $01
00093A61 E102                       	smpsAlterNote       $02
00093A63 E701                       	dc.b	smpsNoAttack, $01
00093A65 E107                       	smpsAlterNote       $07
00093A67 8001                       	dc.b	nRst, $01
00093A69 E10B                       	smpsAlterNote       $0B
00093A6B 9603                       	dc.b	nA1, $03
00093A6D E10C                       	smpsAlterNote       $0C
00093A6F 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00093A75 E10B                       	smpsAlterNote       $0B
00093A77 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00093A83 8001 9603                  	dc.b	nRst, $01, nA1, $03
00093A87 E10C                       	smpsAlterNote       $0C
00093A89 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00093A95 8001                       	dc.b	nRst, $01
00093A97 E10B                       	smpsAlterNote       $0B
00093A99 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00093AA1 E107                       	smpsAlterNote       $07
00093AA3 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00093AA7 E10B                       	smpsAlterNote       $0B
00093AA9 9603                       	dc.b	nA1, $03
00093AAB E109                       	smpsAlterNote       $09
00093AAD 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093AB1 E108                       	smpsAlterNote       $08
00093AB3 9D06                       	dc.b	nE2, $06
00093AB5 E107                       	smpsAlterNote       $07
00093AB7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093ABB E106                       	smpsAlterNote       $06
00093ABD 9903                       	dc.b	nC2, $03
00093ABF E10C                       	smpsAlterNote       $0C
00093AC1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093AC5 E10B                       	smpsAlterNote       $0B
00093AC7 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093AD3 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093ADD E10C                       	smpsAlterNote       $0C
00093ADF 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00093AEB 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00093AF7 8001                       	dc.b	nRst, $01
00093AF9 E10B                       	smpsAlterNote       $0B
00093AFB 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093B07 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00093B13 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00093B1F 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093B29 E10C                       	smpsAlterNote       $0C
00093B2B 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00093B37 E10B                       	smpsAlterNote       $0B
00093B39 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00093B41 E107                       	smpsAlterNote       $07
00093B43 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00093B47 E10B                       	smpsAlterNote       $0B
00093B49 9603                       	dc.b	nA1, $03
00093B4B E109                       	smpsAlterNote       $09
00093B4D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093B51 E108                       	smpsAlterNote       $08
00093B53 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00093B57 E107                       	smpsAlterNote       $07
00093B59 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093B5D E106                       	smpsAlterNote       $06
00093B5F 9903                       	dc.b	nC2, $03
00093B61 E10C                       	smpsAlterNote       $0C
00093B63 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093B67 E10B                       	smpsAlterNote       $0B
00093B69 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093B75 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093B7F E10C                       	smpsAlterNote       $0C
00093B81 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00093B8D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00093B99 8001                       	dc.b	nRst, $01
00093B9B E10B                       	smpsAlterNote       $0B
00093B9D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093BA9 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093BB3 E10C                       	smpsAlterNote       $0C
00093BB5 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093BC1 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00093BCD E10B                       	smpsAlterNote       $0B
00093BCF 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093BDB 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093BE5 E10C                       	smpsAlterNote       $0C
00093BE7 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093BF3 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00093BFF E10B                       	smpsAlterNote       $0B
00093C01 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00093C0D 8001                       	dc.b	nRst, $01
00093C0F E1EC                       	smpsAlterNote       $EC
00093C11 A101                       	dc.b	nAb2, $01
00093C13 E1FA                       	smpsAlterNote       $FA
00093C15 E701                       	dc.b	smpsNoAttack, $01
00093C17 E116                       	smpsAlterNote       $16
00093C19 E701                       	dc.b	smpsNoAttack, $01
00093C1B E1F5                       	smpsAlterNote       $F5
00093C1D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093C20 E10B                       	smpsAlterNote       $0B
00093C22 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00093C2E 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00093C3A E107                       	smpsAlterNote       $07
00093C3C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093C42 E10B                       	smpsAlterNote       $0B
00093C44 A203                       	dc.b	nA2, $03
00093C46 E107                       	smpsAlterNote       $07
00093C48 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093C4C E1F3                       	smpsAlterNote       $F3
00093C4E A401                       	dc.b	nB2, $01
00093C50 E102                       	smpsAlterNote       $02
00093C52 E701                       	dc.b	smpsNoAttack, $01
00093C54 E109                       	smpsAlterNote       $09
00093C56 E701                       	dc.b	smpsNoAttack, $01
00093C58 E102                       	smpsAlterNote       $02
00093C5A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093C5D E106                       	smpsAlterNote       $06
00093C5F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093C63 E107                       	smpsAlterNote       $07
00093C65 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093C69 E108                       	smpsAlterNote       $08
00093C6B 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00093C71 E109                       	smpsAlterNote       $09
00093C73 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093C77 E1F2                       	smpsAlterNote       $F2
00093C79 A401                       	dc.b	nB2, $01
00093C7B E1FF                       	smpsAlterNote       $FF
00093C7D E701                       	dc.b	smpsNoAttack, $01
00093C7F E111                       	smpsAlterNote       $11
00093C81 E701                       	dc.b	smpsNoAttack, $01
00093C83 E1FB                       	smpsAlterNote       $FB
00093C85 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093C88 E106                       	smpsAlterNote       $06
00093C8A E702                       	dc.b	smpsNoAttack, $02
00093C8C E109                       	smpsAlterNote       $09
00093C8E A007                       	dc.b	nG2, $07
00093C90 E108                       	smpsAlterNote       $08
00093C92 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093C96 E107                       	smpsAlterNote       $07
00093C98 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093C9E E10B                       	smpsAlterNote       $0B
00093CA0 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093CA4 E107                       	smpsAlterNote       $07
00093CA6 9B03                       	dc.b	nD2, $03
00093CA8 E11A                       	smpsAlterNote       $1A
00093CAA A301                       	dc.b	nBb2, $01
00093CAC E1F2                       	smpsAlterNote       $F2
00093CAE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093CB1 E1FF                       	smpsAlterNote       $FF
00093CB3 E701                       	dc.b	smpsNoAttack, $01
00093CB5 E111                       	smpsAlterNote       $11
00093CB7 E701                       	dc.b	smpsNoAttack, $01
00093CB9 E106                       	smpsAlterNote       $06
00093CBB E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093CBE E107                       	smpsAlterNote       $07
00093CC0 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093CCC E117                       	smpsAlterNote       $17
00093CCE A001                       	dc.b	nG2, $01
00093CD0 E1FA                       	smpsAlterNote       $FA
00093CD2 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093CD5 E116                       	smpsAlterNote       $16
00093CD7 E701                       	dc.b	smpsNoAttack, $01
00093CD9 E1F5                       	smpsAlterNote       $F5
00093CDB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093CDE E103                       	smpsAlterNote       $03
00093CE0 E701                       	dc.b	smpsNoAttack, $01
00093CE2 E10B                       	smpsAlterNote       $0B
00093CE4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093CE8 E107                       	smpsAlterNote       $07
00093CEA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093CF0 E109                       	smpsAlterNote       $09
00093CF2 9E03                       	dc.b	nF2, $03
00093CF4 E10B                       	smpsAlterNote       $0B
00093CF6 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093CFA E107                       	smpsAlterNote       $07
00093CFC 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093D02 E10B                       	smpsAlterNote       $0B
00093D04 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093D08 E107                       	smpsAlterNote       $07
00093D0A 9B03                       	dc.b	nD2, $03
00093D0C E11A                       	smpsAlterNote       $1A
00093D0E A301                       	dc.b	nBb2, $01
00093D10 E1F9                       	smpsAlterNote       $F9
00093D12 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093D15 E1FF                       	smpsAlterNote       $FF
00093D17 E701                       	dc.b	smpsNoAttack, $01
00093D19 E111                       	smpsAlterNote       $11
00093D1B E701                       	dc.b	smpsNoAttack, $01
00093D1D E106                       	smpsAlterNote       $06
00093D1F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093D22 E107                       	smpsAlterNote       $07
00093D24 9B03                       	dc.b	nD2, $03
00093D26 E108                       	smpsAlterNote       $08
00093D28 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093D2E E109                       	smpsAlterNote       $09
00093D30 A003                       	dc.b	nG2, $03
00093D32 E1F0                       	smpsAlterNote       $F0
00093D34 A501                       	dc.b	nC3, $01
00093D36 E106                       	smpsAlterNote       $06
00093D38 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00093D3C E109                       	smpsAlterNote       $09
00093D3E A006 8001                  	dc.b	nG2, $06, nRst, $01
00093D42 E108                       	smpsAlterNote       $08
00093D44 9C03                       	dc.b	nEb2, $03
00093D46 E107                       	smpsAlterNote       $07
00093D48 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093D4E E10B                       	smpsAlterNote       $0B
00093D50 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093D54 E107                       	smpsAlterNote       $07
00093D56 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093D5A E11A                       	smpsAlterNote       $1A
00093D5C A301                       	dc.b	nBb2, $01
00093D5E E1F9                       	smpsAlterNote       $F9
00093D60 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093D63 E107                       	smpsAlterNote       $07
00093D65 E701                       	dc.b	smpsNoAttack, $01
00093D67 E1FB                       	smpsAlterNote       $FB
00093D69 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093D6C E106                       	smpsAlterNote       $06
00093D6E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093D72 E107                       	smpsAlterNote       $07
00093D74 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093D7C E1EC                       	smpsAlterNote       $EC
00093D7E A101                       	dc.b	nAb2, $01
00093D80 E108                       	smpsAlterNote       $08
00093D82 E701                       	dc.b	smpsNoAttack, $01
00093D84 E1E7                       	smpsAlterNote       $E7
00093D86 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093D89 E1F5                       	smpsAlterNote       $F5
00093D8B E701                       	dc.b	smpsNoAttack, $01
00093D8D E10B                       	smpsAlterNote       $0B
00093D8F E702                       	dc.b	smpsNoAttack, $02
00093D91 E107                       	smpsAlterNote       $07
00093D93 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093D99 E106                       	smpsAlterNote       $06
00093D9B 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00093DA1 E10C                       	smpsAlterNote       $0C
00093DA3 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093DAB E109                       	smpsAlterNote       $09
00093DAD 9E03                       	dc.b	nF2, $03
00093DAF E10C                       	smpsAlterNote       $0C
00093DB1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093DB5 E1EA                       	smpsAlterNote       $EA
00093DB7 A201                       	dc.b	nA2, $01
00093DB9 E106                       	smpsAlterNote       $06
00093DBB E701                       	dc.b	smpsNoAttack, $01
00093DBD E114                       	smpsAlterNote       $14
00093DBF E701                       	dc.b	smpsNoAttack, $01
00093DC1 E1F0                       	smpsAlterNote       $F0
00093DC3 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093DC6 E10C                       	smpsAlterNote       $0C
00093DC8 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093DD4 9703                       	dc.b	nBb1, $03
00093DD6 E116                       	smpsAlterNote       $16
00093DD8 9C01                       	dc.b	nEb2, $01
00093DDA E105                       	smpsAlterNote       $05
00093DDC E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093DDF E113                       	smpsAlterNote       $13
00093DE1 E701                       	dc.b	smpsNoAttack, $01
00093DE3 E1FF                       	smpsAlterNote       $FF
00093DE5 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093DE8 E109                       	smpsAlterNote       $09
00093DEA E703                       	dc.b	smpsNoAttack, $03
00093DEC E10C                       	smpsAlterNote       $0C
00093DEE 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093DFA 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093E02 E109                       	smpsAlterNote       $09
00093E04 9E03                       	dc.b	nF2, $03
00093E06 E10C                       	smpsAlterNote       $0C
00093E08 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093E0C E1EA                       	smpsAlterNote       $EA
00093E0E A201                       	dc.b	nA2, $01
00093E10 E106                       	smpsAlterNote       $06
00093E12 E701                       	dc.b	smpsNoAttack, $01
00093E14 E1E2                       	smpsAlterNote       $E2
00093E16 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093E19 E1F0                       	smpsAlterNote       $F0
00093E1B E701                       	dc.b	smpsNoAttack, $01
00093E1D E10C                       	smpsAlterNote       $0C
00093E1F E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093E2B E116                       	smpsAlterNote       $16
00093E2D 9C01                       	dc.b	nEb2, $01
00093E2F E105                       	smpsAlterNote       $05
00093E31 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093E34 E1F1                       	smpsAlterNote       $F1
00093E36 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093E39 E1FF                       	smpsAlterNote       $FF
00093E3B E701                       	dc.b	smpsNoAttack, $01
00093E3D E109                       	smpsAlterNote       $09
00093E3F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093E43 E10C                       	smpsAlterNote       $0C
00093E45 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00093E51 E106                       	smpsAlterNote       $06
00093E53 9903                       	dc.b	nC2, $03
00093E55 E107                       	smpsAlterNote       $07
00093E57 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093E5B E109                       	smpsAlterNote       $09
00093E5D 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00093E63 E107                       	smpsAlterNote       $07
00093E65 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093E69 E108                       	smpsAlterNote       $08
00093E6B 9D03                       	dc.b	nE2, $03
00093E6D E10B                       	smpsAlterNote       $0B
00093E6F 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00093E75 E109                       	smpsAlterNote       $09
00093E77 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00093E7D E10C                       	smpsAlterNote       $0C
00093E7F 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00093E85 E106                       	smpsAlterNote       $06
00093E87 9903                       	dc.b	nC2, $03
00093E89 E11A                       	smpsAlterNote       $1A
00093E8B A301                       	dc.b	nBb2, $01
00093E8D E1F9                       	smpsAlterNote       $F9
00093E8F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093E92 E1FF                       	smpsAlterNote       $FF
00093E94 E701                       	dc.b	smpsNoAttack, $01
00093E96 E111                       	smpsAlterNote       $11
00093E98 E701                       	dc.b	smpsNoAttack, $01
00093E9A E106                       	smpsAlterNote       $06
00093E9C E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00093EA3 E109                       	smpsAlterNote       $09
00093EA5 A003                       	dc.b	nG2, $03
00093EA7 E106                       	smpsAlterNote       $06
00093EA9 9907                       	dc.b	nC2, $07
00093EAB E107                       	smpsAlterNote       $07
00093EAD 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00093EB5 E10B                       	smpsAlterNote       $0B
00093EB7 A203                       	dc.b	nA2, $03
00093EB9 E107                       	smpsAlterNote       $07
00093EBB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093EBF E1F2                       	smpsAlterNote       $F2
00093EC1 A401                       	dc.b	nB2, $01
00093EC3 E1F9                       	smpsAlterNote       $F9
00093EC5 E701                       	dc.b	smpsNoAttack, $01
00093EC7 E107                       	smpsAlterNote       $07
00093EC9 E701                       	dc.b	smpsNoAttack, $01
00093ECB E1FB                       	smpsAlterNote       $FB
00093ECD E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093ED0 E106                       	smpsAlterNote       $06
00093ED2 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093ED6 E107                       	smpsAlterNote       $07
00093ED8 9B03                       	dc.b	nD2, $03
00093EDA E108                       	smpsAlterNote       $08
00093EDC 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093EE2 E109                       	smpsAlterNote       $09
00093EE4 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093EE8 E1F2                       	smpsAlterNote       $F2
00093EEA A401                       	dc.b	nB2, $01
00093EEC E1F9                       	smpsAlterNote       $F9
00093EEE E701                       	dc.b	smpsNoAttack, $01
00093EF0 E107                       	smpsAlterNote       $07
00093EF2 E701                       	dc.b	smpsNoAttack, $01
00093EF4 E1FB                       	smpsAlterNote       $FB
00093EF6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093EF9 E106                       	smpsAlterNote       $06
00093EFB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093EFF E108                       	smpsAlterNote       $08
00093F01 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00093F05 E10C                       	smpsAlterNote       $0C
00093F07 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093F0B E107                       	smpsAlterNote       $07
00093F0D 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093F13 E10B                       	smpsAlterNote       $0B
00093F15 A203                       	dc.b	nA2, $03
00093F17 E107                       	smpsAlterNote       $07
00093F19 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093F1D E1F2                       	smpsAlterNote       $F2
00093F1F A401                       	dc.b	nB2, $01
00093F21 E1FF                       	smpsAlterNote       $FF
00093F23 E701                       	dc.b	smpsNoAttack, $01
00093F25 E107                       	smpsAlterNote       $07
00093F27 E701                       	dc.b	smpsNoAttack, $01
00093F29 E1FB                       	smpsAlterNote       $FB
00093F2B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093F2E E106                       	smpsAlterNote       $06
00093F30 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093F34 E107                       	smpsAlterNote       $07
00093F36 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093F3A E108                       	smpsAlterNote       $08
00093F3C 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093F42 E109                       	smpsAlterNote       $09
00093F44 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093F48 E1F2                       	smpsAlterNote       $F2
00093F4A A401                       	dc.b	nB2, $01
00093F4C E1FF                       	smpsAlterNote       $FF
00093F4E E701                       	dc.b	smpsNoAttack, $01
00093F50 E111                       	smpsAlterNote       $11
00093F52 E701                       	dc.b	smpsNoAttack, $01
00093F54 E1FB                       	smpsAlterNote       $FB
00093F56 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093F59 E106                       	smpsAlterNote       $06
00093F5B E702                       	dc.b	smpsNoAttack, $02
00093F5D E108                       	smpsAlterNote       $08
00093F5F 9C07                       	dc.b	nEb2, $07
00093F61 E10C                       	smpsAlterNote       $0C
00093F63 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093F67 E107                       	smpsAlterNote       $07
00093F69 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093F6F E10B                       	smpsAlterNote       $0B
00093F71 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093F75 E107                       	smpsAlterNote       $07
00093F77 9B03                       	dc.b	nD2, $03
00093F79 E11A                       	smpsAlterNote       $1A
00093F7B A301                       	dc.b	nBb2, $01
00093F7D E1F2                       	smpsAlterNote       $F2
00093F7F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093F82 E1FF                       	smpsAlterNote       $FF
00093F84 E701                       	dc.b	smpsNoAttack, $01
00093F86 E111                       	smpsAlterNote       $11
00093F88 E701                       	dc.b	smpsNoAttack, $01
00093F8A E106                       	smpsAlterNote       $06
00093F8C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093F8F E107                       	smpsAlterNote       $07
00093F91 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093F95 E108                       	smpsAlterNote       $08
00093F97 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00093F9F E109                       	smpsAlterNote       $09
00093FA1 A003                       	dc.b	nG2, $03
00093FA3 E11A                       	smpsAlterNote       $1A
00093FA5 A301                       	dc.b	nBb2, $01
00093FA7 E1F2                       	smpsAlterNote       $F2
00093FA9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093FAC E1FF                       	smpsAlterNote       $FF
00093FAE E701                       	dc.b	smpsNoAttack, $01
00093FB0 E111                       	smpsAlterNote       $11
00093FB2 E701                       	dc.b	smpsNoAttack, $01
00093FB4 E106                       	smpsAlterNote       $06
00093FB6 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093FB9 E108                       	smpsAlterNote       $08
00093FBB 9C07                       	dc.b	nEb2, $07
00093FBD E10C                       	smpsAlterNote       $0C
00093FBF A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093FC3 E107                       	smpsAlterNote       $07
00093FC5 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00093FD1 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00093FDB E108                       	smpsAlterNote       $08
00093FDD 9C06                       	dc.b	nEb2, $06
00093FDF E10C                       	smpsAlterNote       $0C
00093FE1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093FE5 E108                       	smpsAlterNote       $08
00093FE7 9C03                       	dc.b	nEb2, $03
00093FE9 E109                       	smpsAlterNote       $09
00093FEB A003 8001                  	dc.b	nG2, $03, nRst, $01
00093FEF E10C                       	smpsAlterNote       $0C
00093FF1 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00093FF9 E107                       	smpsAlterNote       $07
00093FFB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093FFF F6F4 F8                    	smpsJump            music84_Jump04
00094002                            
00094002                            ; FM2 Data
00094002                            music84_FM2:
00094002 E0C0                       	smpsPan             panCenter, $00
00094006 E10B                       	smpsAlterNote       $0B
00094008 C603 8007                  	dc.b	nA5, $03, nRst, $07
0009400C E109                       	smpsAlterNote       $09
0009400E C403 800B                  	dc.b	nG5, $03, nRst, $0B
00094012 E108                       	smpsAlterNote       $08
00094014 C103 8004                  	dc.b	nE5, $03, nRst, $04
0009401A E080                       	smpsPan             panLeft, $00
0009401C E10C                       	smpsAlterNote       $0C
0009401E E6F9                       	smpsAlterVol        $F9
00094020 C703                       	dc.b	nBb5, $03
00094022 E10B                       	smpsAlterNote       $0B
00094024 C603 8001                  	dc.b	nA5, $03, nRst, $01
00094028 E109                       	smpsAlterNote       $09
0009402A C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00094030 E108                       	smpsAlterNote       $08
00094032 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094036 E106                       	smpsAlterNote       $06
00094038 BD03                       	dc.b	nC5, $03
0009403A E10B                       	smpsAlterNote       $0B
0009403C BA03 8001                  	dc.b	nA4, $03, nRst, $01
00094042 E0C0                       	smpsPan             panCenter, $00
00094044 E107                       	smpsAlterNote       $07
00094046 E606                       	smpsAlterVol        $06
00094048 BF03                       	dc.b	nD5, $03
0009404A                            
0009404A                            music84_Jump03:
0009404A E108                       	smpsAlterNote       $08
0009404C C103 8001                  	dc.b	nE5, $03, nRst, $01
00094050 E109                       	smpsAlterNote       $09
00094052 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00094058 E10B                       	smpsAlterNote       $0B
0009405A C607                       	dc.b	nA5, $07
0009405C E107                       	smpsAlterNote       $07
0009405E BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094062 E106                       	smpsAlterNote       $06
00094064 C90D                       	dc.b	nC6, $0D
00094066 E100                       	smpsAlterNote       $00
00094068 E701                       	dc.b	smpsNoAttack, $01
0009406A E1FF                       	smpsAlterNote       $FF
0009406C E701                       	dc.b	smpsNoAttack, $01
0009406E E103                       	smpsAlterNote       $03
00094070 E701                       	dc.b	smpsNoAttack, $01
00094072 E109                       	smpsAlterNote       $09
00094074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094078 E106                       	smpsAlterNote       $06
0009407A E701                       	dc.b	smpsNoAttack, $01
0009407C E100                       	smpsAlterNote       $00
0009407E E701                       	dc.b	smpsNoAttack, $01
00094080 E10C                       	smpsAlterNote       $0C
00094082 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094086 E10B                       	smpsAlterNote       $0B
00094088 C603                       	dc.b	nA5, $03
0009408A E109                       	smpsAlterNote       $09
0009408C C403 8001                  	dc.b	nG5, $03, nRst, $01
00094090 E10B                       	smpsAlterNote       $0B
00094092 C60D                       	dc.b	nA5, $0D
00094094 E105                       	smpsAlterNote       $05
00094096 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009409A E10B                       	smpsAlterNote       $0B
0009409C E701                       	dc.b	smpsNoAttack, $01
0009409E E10E                       	smpsAlterNote       $0E
000940A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940A4 E108                       	smpsAlterNote       $08
000940A6 E701                       	dc.b	smpsNoAttack, $01
000940A8 E104                       	smpsAlterNote       $04
000940AA E701                       	dc.b	smpsNoAttack, $01
000940AC E105                       	smpsAlterNote       $05
000940AE E701                       	dc.b	smpsNoAttack, $01
000940B0 E10B                       	smpsAlterNote       $0B
000940B2 E701                       	dc.b	smpsNoAttack, $01
000940B4 E10F                       	smpsAlterNote       $0F
000940B6 E701                       	dc.b	smpsNoAttack, $01
000940B8 E10B                       	smpsAlterNote       $0B
000940BA E701                       	dc.b	smpsNoAttack, $01
000940BC E108                       	smpsAlterNote       $08
000940BE E701                       	dc.b	smpsNoAttack, $01
000940C0 E104                       	smpsAlterNote       $04
000940C2 E701                       	dc.b	smpsNoAttack, $01
000940C4 E108                       	smpsAlterNote       $08
000940C6 E701                       	dc.b	smpsNoAttack, $01
000940C8 E10E                       	smpsAlterNote       $0E
000940CA E701                       	dc.b	smpsNoAttack, $01
000940CC E10F                       	smpsAlterNote       $0F
000940CE E701                       	dc.b	smpsNoAttack, $01
000940D0 E10B                       	smpsAlterNote       $0B
000940D2 E701                       	dc.b	smpsNoAttack, $01
000940D4 E105                       	smpsAlterNote       $05
000940D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940DA E108                       	smpsAlterNote       $08
000940DC E701                       	dc.b	smpsNoAttack, $01
000940DE E10E                       	smpsAlterNote       $0E
000940E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940E4 E108                       	smpsAlterNote       $08
000940E6 E701                       	dc.b	smpsNoAttack, $01
000940E8 E105                       	smpsAlterNote       $05
000940EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940EE E10B                       	smpsAlterNote       $0B
000940F0 E701                       	dc.b	smpsNoAttack, $01
000940F2 E10F                       	smpsAlterNote       $0F
000940F4 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000940F8 E107                       	smpsAlterNote       $07
000940FA BF03 8001                  	dc.b	nD5, $03, nRst, $01
000940FE E108                       	smpsAlterNote       $08
00094100 C103                       	dc.b	nE5, $03
00094102 E109                       	smpsAlterNote       $09
00094104 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0009410C E10B                       	smpsAlterNote       $0B
0009410E C606 8001                  	dc.b	nA5, $06, nRst, $01
00094112 E107                       	smpsAlterNote       $07
00094114 BF03                       	dc.b	nD5, $03
00094116 E106                       	smpsAlterNote       $06
00094118 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0009411C E107                       	smpsAlterNote       $07
0009411E CB03                       	dc.b	nD6, $03
00094120 E10C                       	smpsAlterNote       $0C
00094122 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00094126 E10B                       	smpsAlterNote       $0B
00094128 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009412C E109                       	smpsAlterNote       $09
0009412E C404                       	dc.b	nG5, $04
00094130 E10B                       	smpsAlterNote       $0B
00094132 C60D                       	dc.b	nA5, $0D
00094134 E108                       	smpsAlterNote       $08
00094136 E701                       	dc.b	smpsNoAttack, $01
00094138 E104                       	smpsAlterNote       $04
0009413A E701                       	dc.b	smpsNoAttack, $01
0009413C E108                       	smpsAlterNote       $08
0009413E E701                       	dc.b	smpsNoAttack, $01
00094140 E10B                       	smpsAlterNote       $0B
00094142 E701                       	dc.b	smpsNoAttack, $01
00094144 E10F                       	smpsAlterNote       $0F
00094146 E701                       	dc.b	smpsNoAttack, $01
00094148 E10B                       	smpsAlterNote       $0B
0009414A E701                       	dc.b	smpsNoAttack, $01
0009414C E105                       	smpsAlterNote       $05
0009414E E701                       	dc.b	smpsNoAttack, $01
00094150 E104                       	smpsAlterNote       $04
00094152 E701                       	dc.b	smpsNoAttack, $01
00094154 E108                       	smpsAlterNote       $08
00094156 E701                       	dc.b	smpsNoAttack, $01
00094158 E10E                       	smpsAlterNote       $0E
0009415A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009415E E10B                       	smpsAlterNote       $0B
00094160 E701                       	dc.b	smpsNoAttack, $01
00094162 E105                       	smpsAlterNote       $05
00094164 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094168 E10B                       	smpsAlterNote       $0B
0009416A E701                       	dc.b	smpsNoAttack, $01
0009416C E10E                       	smpsAlterNote       $0E
0009416E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094172 E108                       	smpsAlterNote       $08
00094174 E701                       	dc.b	smpsNoAttack, $01
00094176 E104                       	smpsAlterNote       $04
00094178 E701                       	dc.b	smpsNoAttack, $01
0009417A E105                       	smpsAlterNote       $05
0009417C E701                       	dc.b	smpsNoAttack, $01
0009417E E10B                       	smpsAlterNote       $0B
00094180 E701                       	dc.b	smpsNoAttack, $01
00094182 E10F                       	smpsAlterNote       $0F
00094184 E701                       	dc.b	smpsNoAttack, $01
00094186 E10B                       	smpsAlterNote       $0B
00094188 E701                       	dc.b	smpsNoAttack, $01
0009418A E108                       	smpsAlterNote       $08
0009418C E701                       	dc.b	smpsNoAttack, $01
0009418E E105                       	smpsAlterNote       $05
00094190 8001                       	dc.b	nRst, $01
00094192 E109                       	smpsAlterNote       $09
00094194 C401                       	dc.b	nG5, $01
00094196 E10B                       	smpsAlterNote       $0B
00094198 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000941A1 E109                       	smpsAlterNote       $09
000941A3 C404 8001                  	dc.b	nG5, $04, nRst, $01
000941A7 E10B                       	smpsAlterNote       $0B
000941A9 C604 8001                  	dc.b	nA5, $04, nRst, $01
000941AD E107                       	smpsAlterNote       $07
000941AF BF0D                       	dc.b	nD5, $0D
000941B1 E101                       	smpsAlterNote       $01
000941B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941B7 E104                       	smpsAlterNote       $04
000941B9 E701                       	dc.b	smpsNoAttack, $01
000941BB E10A                       	smpsAlterNote       $0A
000941BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941C1 E104                       	smpsAlterNote       $04
000941C3 E701                       	dc.b	smpsNoAttack, $01
000941C5 E101                       	smpsAlterNote       $01
000941C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941CB E107                       	smpsAlterNote       $07
000941CD E701                       	dc.b	smpsNoAttack, $01
000941CF E10B                       	smpsAlterNote       $0B
000941D1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000941D5 E108                       	smpsAlterNote       $08
000941D7 C101                       	dc.b	nE5, $01
000941D9 E109                       	smpsAlterNote       $09
000941DB E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000941E0 E10B                       	smpsAlterNote       $0B
000941E2 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000941EA E108                       	smpsAlterNote       $08
000941EC CD06                       	dc.b	nE6, $06
000941EE E109                       	smpsAlterNote       $09
000941F0 CE07                       	dc.b	nF6, $07
000941F2 E108                       	smpsAlterNote       $08
000941F4 CD03 8001                  	dc.b	nE6, $03, nRst, $01
000941F8 E106                       	smpsAlterNote       $06
000941FA C903                       	dc.b	nC6, $03
000941FC E109                       	smpsAlterNote       $09
000941FE C403 8001                  	dc.b	nG5, $03, nRst, $01
00094202 E10C                       	smpsAlterNote       $0C
00094204 C70D                       	dc.b	nBb5, $0D
00094206 E106                       	smpsAlterNote       $06
00094208 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009420C E109                       	smpsAlterNote       $09
0009420E E701                       	dc.b	smpsNoAttack, $01
00094210 E10F                       	smpsAlterNote       $0F
00094212 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094216 E109                       	smpsAlterNote       $09
00094218 E701                       	dc.b	smpsNoAttack, $01
0009421A E106                       	smpsAlterNote       $06
0009421C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094220 E10C                       	smpsAlterNote       $0C
00094222 E701                       	dc.b	smpsNoAttack, $01
00094224 E110                       	smpsAlterNote       $10
00094226 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009422A E10B                       	smpsAlterNote       $0B
0009422C C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00094230 E105                       	smpsAlterNote       $05
00094232 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094236 E10B                       	smpsAlterNote       $0B
00094238 E701                       	dc.b	smpsNoAttack, $01
0009423A E10E                       	smpsAlterNote       $0E
0009423C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094240 E108                       	smpsAlterNote       $08
00094242 E701                       	dc.b	smpsNoAttack, $01
00094244 E104                       	smpsAlterNote       $04
00094246 E701                       	dc.b	smpsNoAttack, $01
00094248 E105                       	smpsAlterNote       $05
0009424A E701                       	dc.b	smpsNoAttack, $01
0009424C E10B                       	smpsAlterNote       $0B
0009424E E701                       	dc.b	smpsNoAttack, $01
00094250 E10F                       	smpsAlterNote       $0F
00094252 E701                       	dc.b	smpsNoAttack, $01
00094254 E10B                       	smpsAlterNote       $0B
00094256 E701                       	dc.b	smpsNoAttack, $01
00094258 E108                       	smpsAlterNote       $08
0009425A E701                       	dc.b	smpsNoAttack, $01
0009425C E104                       	smpsAlterNote       $04
0009425E E701                       	dc.b	smpsNoAttack, $01
00094260 E108                       	smpsAlterNote       $08
00094262 E701                       	dc.b	smpsNoAttack, $01
00094264 E10E                       	smpsAlterNote       $0E
00094266 E701                       	dc.b	smpsNoAttack, $01
00094268 E10F                       	smpsAlterNote       $0F
0009426A E701                       	dc.b	smpsNoAttack, $01
0009426C E10B                       	smpsAlterNote       $0B
0009426E E701                       	dc.b	smpsNoAttack, $01
00094270 E105                       	smpsAlterNote       $05
00094272 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094276 E108                       	smpsAlterNote       $08
00094278 E701                       	dc.b	smpsNoAttack, $01
0009427A E10E                       	smpsAlterNote       $0E
0009427C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094280 E108                       	smpsAlterNote       $08
00094282 E701                       	dc.b	smpsNoAttack, $01
00094284 E105                       	smpsAlterNote       $05
00094286 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009428A E10B                       	smpsAlterNote       $0B
0009428C E701                       	dc.b	smpsNoAttack, $01
0009428E E10F                       	smpsAlterNote       $0F
00094290 E701                       	dc.b	smpsNoAttack, $01
00094292 E10E                       	smpsAlterNote       $0E
00094294 E701                       	dc.b	smpsNoAttack, $01
00094296 E108                       	smpsAlterNote       $08
00094298 E701                       	dc.b	smpsNoAttack, $01
0009429A E104                       	smpsAlterNote       $04
0009429C E701                       	dc.b	smpsNoAttack, $01
0009429E E108                       	smpsAlterNote       $08
000942A0 E701                       	dc.b	smpsNoAttack, $01
000942A2 E10E                       	smpsAlterNote       $0E
000942A4 E701                       	dc.b	smpsNoAttack, $01
000942A6 E10F                       	smpsAlterNote       $0F
000942A8 E701                       	dc.b	smpsNoAttack, $01
000942AA E10B                       	smpsAlterNote       $0B
000942AC E701                       	dc.b	smpsNoAttack, $01
000942AE E105                       	smpsAlterNote       $05
000942B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942B4 E108                       	smpsAlterNote       $08
000942B6 E701                       	dc.b	smpsNoAttack, $01
000942B8 E10E                       	smpsAlterNote       $0E
000942BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942BE E108                       	smpsAlterNote       $08
000942C0 E701                       	dc.b	smpsNoAttack, $01
000942C2 E105                       	smpsAlterNote       $05
000942C4 E701                       	dc.b	smpsNoAttack, $01
000942C6 E10B                       	smpsAlterNote       $0B
000942C8 C60D                       	dc.b	nA5, $0D
000942CA E108                       	smpsAlterNote       $08
000942CC E701                       	dc.b	smpsNoAttack, $01
000942CE E104                       	smpsAlterNote       $04
000942D0 E701                       	dc.b	smpsNoAttack, $01
000942D2 E105                       	smpsAlterNote       $05
000942D4 E701                       	dc.b	smpsNoAttack, $01
000942D6 E10B                       	smpsAlterNote       $0B
000942D8 E701                       	dc.b	smpsNoAttack, $01
000942DA E10F                       	smpsAlterNote       $0F
000942DC E701                       	dc.b	smpsNoAttack, $01
000942DE E10B                       	smpsAlterNote       $0B
000942E0 E701                       	dc.b	smpsNoAttack, $01
000942E2 E108                       	smpsAlterNote       $08
000942E4 E701                       	dc.b	smpsNoAttack, $01
000942E6 E104                       	smpsAlterNote       $04
000942E8 E701                       	dc.b	smpsNoAttack, $01
000942EA E108                       	smpsAlterNote       $08
000942EC E701                       	dc.b	smpsNoAttack, $01
000942EE E10E                       	smpsAlterNote       $0E
000942F0 E701                       	dc.b	smpsNoAttack, $01
000942F2 E10F                       	smpsAlterNote       $0F
000942F4 E701                       	dc.b	smpsNoAttack, $01
000942F8 E109                       	smpsAlterNote       $09
000942FA E6FF                       	smpsAlterVol        $FF
000942FC C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00094306 E108                       	smpsAlterNote       $08
00094308 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0009430E E107                       	smpsAlterNote       $07
00094310 E601                       	smpsAlterVol        $01
00094312 BF03                       	dc.b	nD5, $03
00094314 E108                       	smpsAlterNote       $08
00094316 C103 8001                  	dc.b	nE5, $03, nRst, $01
0009431A E109                       	smpsAlterNote       $09
0009431C C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00094322 E10B                       	smpsAlterNote       $0B
00094324 C606 8001                  	dc.b	nA5, $06, nRst, $01
00094328 E107                       	smpsAlterNote       $07
0009432A BF02 8001                  	dc.b	nD5, $02, nRst, $01
0009432E E106                       	smpsAlterNote       $06
00094330 C90D                       	dc.b	nC6, $0D
00094332 E103                       	smpsAlterNote       $03
00094334 E701                       	dc.b	smpsNoAttack, $01
00094336 E1FF                       	smpsAlterNote       $FF
00094338 E701                       	dc.b	smpsNoAttack, $01
0009433A E103                       	smpsAlterNote       $03
0009433C E701                       	dc.b	smpsNoAttack, $01
0009433E E109                       	smpsAlterNote       $09
00094340 E701                       	dc.b	smpsNoAttack, $01
00094342 E10A                       	smpsAlterNote       $0A
00094344 E701                       	dc.b	smpsNoAttack, $01
00094346 E106                       	smpsAlterNote       $06
00094348 E701                       	dc.b	smpsNoAttack, $01
0009434A E100                       	smpsAlterNote       $00
0009434C E701                       	dc.b	smpsNoAttack, $01
0009434E E10C                       	smpsAlterNote       $0C
00094350 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094354 E10B                       	smpsAlterNote       $0B
00094356 C603                       	dc.b	nA5, $03
00094358 E109                       	smpsAlterNote       $09
0009435A C403 8001                  	dc.b	nG5, $03, nRst, $01
0009435E E10B                       	smpsAlterNote       $0B
00094360 C60D                       	dc.b	nA5, $0D
00094362 E105                       	smpsAlterNote       $05
00094364 E701                       	dc.b	smpsNoAttack, $01
00094366 E104                       	smpsAlterNote       $04
00094368 E701                       	dc.b	smpsNoAttack, $01
0009436A E108                       	smpsAlterNote       $08
0009436C E701                       	dc.b	smpsNoAttack, $01
0009436E E10E                       	smpsAlterNote       $0E
00094370 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094374 E10B                       	smpsAlterNote       $0B
00094376 E701                       	dc.b	smpsNoAttack, $01
00094378 E105                       	smpsAlterNote       $05
0009437A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009437E E10B                       	smpsAlterNote       $0B
00094380 E701                       	dc.b	smpsNoAttack, $01
00094382 E10E                       	smpsAlterNote       $0E
00094384 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094388 E108                       	smpsAlterNote       $08
0009438A E701                       	dc.b	smpsNoAttack, $01
0009438C E104                       	smpsAlterNote       $04
0009438E E701                       	dc.b	smpsNoAttack, $01
00094390 E105                       	smpsAlterNote       $05
00094392 E701                       	dc.b	smpsNoAttack, $01
00094394 E10B                       	smpsAlterNote       $0B
00094396 E701                       	dc.b	smpsNoAttack, $01
00094398 E10F                       	smpsAlterNote       $0F
0009439A E701                       	dc.b	smpsNoAttack, $01
0009439C E10B                       	smpsAlterNote       $0B
0009439E E701                       	dc.b	smpsNoAttack, $01
000943A0 E108                       	smpsAlterNote       $08
000943A2 E701                       	dc.b	smpsNoAttack, $01
000943A4 E104                       	smpsAlterNote       $04
000943A6 E701                       	dc.b	smpsNoAttack, $01
000943A8 E108                       	smpsAlterNote       $08
000943AA E701                       	dc.b	smpsNoAttack, $01
000943AC E10E                       	smpsAlterNote       $0E
000943AE E701                       	dc.b	smpsNoAttack, $01
000943B0 E10F                       	smpsAlterNote       $0F
000943B2 E701                       	dc.b	smpsNoAttack, $01
000943B4 E10B                       	smpsAlterNote       $0B
000943B6 E701                       	dc.b	smpsNoAttack, $01
000943B8 E105                       	smpsAlterNote       $05
000943BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943BE E108                       	smpsAlterNote       $08
000943C0 E701                       	dc.b	smpsNoAttack, $01
000943C2 E10E                       	smpsAlterNote       $0E
000943C4 E701                       	dc.b	smpsNoAttack, $01
000943C6 E10F                       	smpsAlterNote       $0F
000943C8 800F                       	dc.b	nRst, $0F
000943CA E107                       	smpsAlterNote       $07
000943CC BF02 8001                  	dc.b	nD5, $02, nRst, $01
000943D0 E108                       	smpsAlterNote       $08
000943D2 C103                       	dc.b	nE5, $03
000943D4 E109                       	smpsAlterNote       $09
000943D6 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000943DC E10B                       	smpsAlterNote       $0B
000943DE C606 8001                  	dc.b	nA5, $06, nRst, $01
000943E2 E107                       	smpsAlterNote       $07
000943E4 BF03                       	dc.b	nD5, $03
000943E6 E106                       	smpsAlterNote       $06
000943E8 C90E                       	dc.b	nC6, $0E
000943EA E107                       	smpsAlterNote       $07
000943EC CB03 8001                  	dc.b	nD6, $03, nRst, $01
000943F0 E10C                       	smpsAlterNote       $0C
000943F2 C704                       	dc.b	nBb5, $04
000943F4 E10B                       	smpsAlterNote       $0B
000943F6 C604 8001                  	dc.b	nA5, $04, nRst, $01
000943FA E109                       	smpsAlterNote       $09
000943FC C404                       	dc.b	nG5, $04
000943FE E10B                       	smpsAlterNote       $0B
00094400 C60D                       	dc.b	nA5, $0D
00094402 E108                       	smpsAlterNote       $08
00094404 E701                       	dc.b	smpsNoAttack, $01
00094406 E105                       	smpsAlterNote       $05
00094408 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009440C E10B                       	smpsAlterNote       $0B
0009440E E701                       	dc.b	smpsNoAttack, $01
00094410 E10F                       	smpsAlterNote       $0F
00094412 E701                       	dc.b	smpsNoAttack, $01
00094414 E10E                       	smpsAlterNote       $0E
00094416 E701                       	dc.b	smpsNoAttack, $01
00094418 E108                       	smpsAlterNote       $08
0009441A E701                       	dc.b	smpsNoAttack, $01
0009441C E104                       	smpsAlterNote       $04
0009441E E701                       	dc.b	smpsNoAttack, $01
00094420 E108                       	smpsAlterNote       $08
00094422 E701                       	dc.b	smpsNoAttack, $01
00094424 E10B                       	smpsAlterNote       $0B
00094426 E701                       	dc.b	smpsNoAttack, $01
00094428 E10F                       	smpsAlterNote       $0F
0009442A E701                       	dc.b	smpsNoAttack, $01
0009442C E10B                       	smpsAlterNote       $0B
0009442E E701                       	dc.b	smpsNoAttack, $01
00094430 E105                       	smpsAlterNote       $05
00094432 E701                       	dc.b	smpsNoAttack, $01
00094434 E104                       	smpsAlterNote       $04
00094436 E701                       	dc.b	smpsNoAttack, $01
00094438 E108                       	smpsAlterNote       $08
0009443A E701                       	dc.b	smpsNoAttack, $01
0009443C E10E                       	smpsAlterNote       $0E
0009443E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094442 E10B                       	smpsAlterNote       $0B
00094444 E701                       	dc.b	smpsNoAttack, $01
00094446 E105                       	smpsAlterNote       $05
00094448 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009444C E10B                       	smpsAlterNote       $0B
0009444E E701                       	dc.b	smpsNoAttack, $01
00094450 E10E                       	smpsAlterNote       $0E
00094452 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094456 E108                       	smpsAlterNote       $08
00094458 E701                       	dc.b	smpsNoAttack, $01
0009445A E105                       	smpsAlterNote       $05
0009445C 8001                       	dc.b	nRst, $01
0009445E E109                       	smpsAlterNote       $09
00094460 C402                       	dc.b	nG5, $02
00094462 E10B                       	smpsAlterNote       $0B
00094464 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0009446D E109                       	smpsAlterNote       $09
0009446F C404                       	dc.b	nG5, $04
00094471 E10B                       	smpsAlterNote       $0B
00094473 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094477 E107                       	smpsAlterNote       $07
00094479 BF0D                       	dc.b	nD5, $0D
0009447B E101                       	smpsAlterNote       $01
0009447D E701                       	dc.b	smpsNoAttack, $01
0009447F E100                       	smpsAlterNote       $00
00094481 E701                       	dc.b	smpsNoAttack, $01
00094483 E104                       	smpsAlterNote       $04
00094485 E701                       	dc.b	smpsNoAttack, $01
00094487 E10A                       	smpsAlterNote       $0A
00094489 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009448D E107                       	smpsAlterNote       $07
0009448F E701                       	dc.b	smpsNoAttack, $01
00094491 E101                       	smpsAlterNote       $01
00094493 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094497 E107                       	smpsAlterNote       $07
00094499 E701                       	dc.b	smpsNoAttack, $01
0009449B E10A                       	smpsAlterNote       $0A
0009449D E701                       	dc.b	smpsNoAttack, $01
0009449F E10B                       	smpsAlterNote       $0B
000944A1 8001                       	dc.b	nRst, $01
000944A3 E108                       	smpsAlterNote       $08
000944A5 C101                       	dc.b	nE5, $01
000944A7 E109                       	smpsAlterNote       $09
000944A9 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000944AE E10B                       	smpsAlterNote       $0B
000944B0 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000944B8 E108                       	smpsAlterNote       $08
000944BA CD06 8001                  	dc.b	nE6, $06, nRst, $01
000944BE E109                       	smpsAlterNote       $09
000944C0 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000944C4 E108                       	smpsAlterNote       $08
000944C6 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000944CA E106                       	smpsAlterNote       $06
000944CC C903                       	dc.b	nC6, $03
000944CE E109                       	smpsAlterNote       $09
000944D0 C403 8001                  	dc.b	nG5, $03, nRst, $01
000944D4 E10C                       	smpsAlterNote       $0C
000944D6 C70D                       	dc.b	nBb5, $0D
000944D8 E109                       	smpsAlterNote       $09
000944DA E701                       	dc.b	smpsNoAttack, $01
000944DC E105                       	smpsAlterNote       $05
000944DE E701                       	dc.b	smpsNoAttack, $01
000944E0 E109                       	smpsAlterNote       $09
000944E2 E701                       	dc.b	smpsNoAttack, $01
000944E4 E10F                       	smpsAlterNote       $0F
000944E6 E701                       	dc.b	smpsNoAttack, $01
000944E8 E110                       	smpsAlterNote       $10
000944EA E701                       	dc.b	smpsNoAttack, $01
000944EC E10C                       	smpsAlterNote       $0C
000944EE E701                       	dc.b	smpsNoAttack, $01
000944F0 E106                       	smpsAlterNote       $06
000944F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944F6 E109                       	smpsAlterNote       $09
000944F8 E701                       	dc.b	smpsNoAttack, $01
000944FA E10F                       	smpsAlterNote       $0F
000944FC E701                       	dc.b	smpsNoAttack, $01
000944FE E110                       	smpsAlterNote       $10
00094500 8001                       	dc.b	nRst, $01
00094502 E10B                       	smpsAlterNote       $0B
00094504 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0009450A E105                       	smpsAlterNote       $05
0009450C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094510 E108                       	smpsAlterNote       $08
00094512 E701                       	dc.b	smpsNoAttack, $01
00094514 E10E                       	smpsAlterNote       $0E
00094516 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009451A E108                       	smpsAlterNote       $08
0009451C E701                       	dc.b	smpsNoAttack, $01
0009451E E105                       	smpsAlterNote       $05
00094520 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094524 E10B                       	smpsAlterNote       $0B
00094526 E701                       	dc.b	smpsNoAttack, $01
00094528 E10F                       	smpsAlterNote       $0F
0009452A E701                       	dc.b	smpsNoAttack, $01
0009452C E10E                       	smpsAlterNote       $0E
0009452E E701                       	dc.b	smpsNoAttack, $01
00094530 E108                       	smpsAlterNote       $08
00094532 E701                       	dc.b	smpsNoAttack, $01
00094534 E104                       	smpsAlterNote       $04
00094536 E701                       	dc.b	smpsNoAttack, $01
00094538 E108                       	smpsAlterNote       $08
0009453A E701                       	dc.b	smpsNoAttack, $01
0009453C E10B                       	smpsAlterNote       $0B
0009453E E701                       	dc.b	smpsNoAttack, $01
00094540 E10F                       	smpsAlterNote       $0F
00094542 E701                       	dc.b	smpsNoAttack, $01
00094544 E10B                       	smpsAlterNote       $0B
00094546 E701                       	dc.b	smpsNoAttack, $01
00094548 E105                       	smpsAlterNote       $05
0009454A E701                       	dc.b	smpsNoAttack, $01
0009454C E104                       	smpsAlterNote       $04
0009454E E701                       	dc.b	smpsNoAttack, $01
00094550 E108                       	smpsAlterNote       $08
00094552 E701                       	dc.b	smpsNoAttack, $01
00094554 E10E                       	smpsAlterNote       $0E
00094556 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009455A E10B                       	smpsAlterNote       $0B
0009455C E701                       	dc.b	smpsNoAttack, $01
0009455E E105                       	smpsAlterNote       $05
00094560 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094564 E10B                       	smpsAlterNote       $0B
00094566 E701                       	dc.b	smpsNoAttack, $01
00094568 E10E                       	smpsAlterNote       $0E
0009456A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009456E E108                       	smpsAlterNote       $08
00094570 E701                       	dc.b	smpsNoAttack, $01
00094572 E104                       	smpsAlterNote       $04
00094574 E701                       	dc.b	smpsNoAttack, $01
00094576 E105                       	smpsAlterNote       $05
00094578 E701                       	dc.b	smpsNoAttack, $01
0009457A E10B                       	smpsAlterNote       $0B
0009457C E701                       	dc.b	smpsNoAttack, $01
0009457E E10F                       	smpsAlterNote       $0F
00094580 E701                       	dc.b	smpsNoAttack, $01
00094582 E10B                       	smpsAlterNote       $0B
00094584 E701                       	dc.b	smpsNoAttack, $01
00094586 E108                       	smpsAlterNote       $08
00094588 E701                       	dc.b	smpsNoAttack, $01
0009458A E104                       	smpsAlterNote       $04
0009458C E701                       	dc.b	smpsNoAttack, $01
0009458E E108                       	smpsAlterNote       $08
00094590 E701                       	dc.b	smpsNoAttack, $01
00094592 E10E                       	smpsAlterNote       $0E
00094594 E701                       	dc.b	smpsNoAttack, $01
00094596 E10F                       	smpsAlterNote       $0F
00094598 E701                       	dc.b	smpsNoAttack, $01
0009459A E10B                       	smpsAlterNote       $0B
0009459C E701                       	dc.b	smpsNoAttack, $01
0009459E E105                       	smpsAlterNote       $05
000945A0 E701                       	dc.b	smpsNoAttack, $01
000945A2 E10B                       	smpsAlterNote       $0B
000945A4 C60E                       	dc.b	nA5, $0E
000945A6 E105                       	smpsAlterNote       $05
000945A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945AC E10B                       	smpsAlterNote       $0B
000945AE E701                       	dc.b	smpsNoAttack, $01
000945B0 E10E                       	smpsAlterNote       $0E
000945B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945B6 E108                       	smpsAlterNote       $08
000945B8 E701                       	dc.b	smpsNoAttack, $01
000945BA E104                       	smpsAlterNote       $04
000945BC E701                       	dc.b	smpsNoAttack, $01
000945BE E105                       	smpsAlterNote       $05
000945C0 E701                       	dc.b	smpsNoAttack, $01
000945C2 E10B                       	smpsAlterNote       $0B
000945C4 E701                       	dc.b	smpsNoAttack, $01
000945C6 E10F                       	smpsAlterNote       $0F
000945C8 E701                       	dc.b	smpsNoAttack, $01
000945CA E10B                       	smpsAlterNote       $0B
000945CC E701                       	dc.b	smpsNoAttack, $01
000945CE E108                       	smpsAlterNote       $08
000945D0 E701                       	dc.b	smpsNoAttack, $01
000945D2 E104                       	smpsAlterNote       $04
000945D4 E701                       	dc.b	smpsNoAttack, $01
000945D6 E108                       	smpsAlterNote       $08
000945D8 E701                       	dc.b	smpsNoAttack, $01
000945DA E10E                       	smpsAlterNote       $0E
000945DC E701                       	dc.b	smpsNoAttack, $01
000945DE E10F                       	smpsAlterNote       $0F
000945E0 E701                       	dc.b	smpsNoAttack, $01
000945E2 E10B                       	smpsAlterNote       $0B
000945E4 E701                       	dc.b	smpsNoAttack, $01
000945E6 E105                       	smpsAlterNote       $05
000945E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945EC E108                       	smpsAlterNote       $08
000945EE E701                       	dc.b	smpsNoAttack, $01
000945F0 E10E                       	smpsAlterNote       $0E
000945F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945F6 E108                       	smpsAlterNote       $08
000945F8 E701                       	dc.b	smpsNoAttack, $01
000945FA E105                       	smpsAlterNote       $05
000945FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094600 E10B                       	smpsAlterNote       $0B
00094602 E701                       	dc.b	smpsNoAttack, $01
00094604 E10F                       	smpsAlterNote       $0F
00094606 E701                       	dc.b	smpsNoAttack, $01
00094608 E10E                       	smpsAlterNote       $0E
0009460A E701                       	dc.b	smpsNoAttack, $01
0009460C E108                       	smpsAlterNote       $08
0009460E E701                       	dc.b	smpsNoAttack, $01
00094610 E104                       	smpsAlterNote       $04
00094612 E701                       	dc.b	smpsNoAttack, $01
00094614 E108                       	smpsAlterNote       $08
00094616 E701                       	dc.b	smpsNoAttack, $01
00094618 E10E                       	smpsAlterNote       $0E
0009461A E701                       	dc.b	smpsNoAttack, $01
0009461C E10F                       	smpsAlterNote       $0F
0009461E E701                       	dc.b	smpsNoAttack, $01
00094620 E10B                       	smpsAlterNote       $0B
00094622 E701                       	dc.b	smpsNoAttack, $01
00094624 E105                       	smpsAlterNote       $05
00094626 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009462A E108                       	smpsAlterNote       $08
0009462C E701                       	dc.b	smpsNoAttack, $01
0009462E E10E                       	smpsAlterNote       $0E
00094630 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094634 E108                       	smpsAlterNote       $08
00094636 E701                       	dc.b	smpsNoAttack, $01
00094638 E105                       	smpsAlterNote       $05
0009463A E701                       	dc.b	smpsNoAttack, $01
0009463E E10B                       	smpsAlterNote       $0B
00094640 E6FD                       	smpsAlterVol        $FD
00094642 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094646 E109                       	smpsAlterNote       $09
00094648 C404                       	dc.b	nG5, $04
0009464A E10B                       	smpsAlterNote       $0B
0009464C C604 8001                  	dc.b	nA5, $04, nRst, $01
00094650 E107                       	smpsAlterNote       $07
00094652 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00094658 E10B                       	smpsAlterNote       $0B
0009465A C604                       	dc.b	nA5, $04
0009465C E109                       	smpsAlterNote       $09
0009465E C404 8001                  	dc.b	nG5, $04, nRst, $01
00094662 E10B                       	smpsAlterNote       $0B
00094664 C604                       	dc.b	nA5, $04
00094666 E108                       	smpsAlterNote       $08
00094668 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00094670 E106                       	smpsAlterNote       $06
00094672 C904 8001                  	dc.b	nC6, $04, nRst, $01
00094676 E10C                       	smpsAlterNote       $0C
00094678 C704                       	dc.b	nBb5, $04
0009467A E10B                       	smpsAlterNote       $0B
0009467C C604 8001                  	dc.b	nA5, $04, nRst, $01
00094680 E109                       	smpsAlterNote       $09
00094682 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0009468C E10B                       	smpsAlterNote       $0B
0009468E C60D                       	dc.b	nA5, $0D
00094690 E108                       	smpsAlterNote       $08
00094692 E701                       	dc.b	smpsNoAttack, $01
00094694 E104                       	smpsAlterNote       $04
00094696 E701                       	dc.b	smpsNoAttack, $01
00094698 E108                       	smpsAlterNote       $08
0009469A E701                       	dc.b	smpsNoAttack, $01
0009469C E10E                       	smpsAlterNote       $0E
0009469E E701                       	dc.b	smpsNoAttack, $01
000946A0 E10F                       	smpsAlterNote       $0F
000946A2 E701                       	dc.b	smpsNoAttack, $01
000946A4 E10B                       	smpsAlterNote       $0B
000946A6 E701                       	dc.b	smpsNoAttack, $01
000946A8 E105                       	smpsAlterNote       $05
000946AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946AE E108                       	smpsAlterNote       $08
000946B0 E701                       	dc.b	smpsNoAttack, $01
000946B2 E10E                       	smpsAlterNote       $0E
000946B4 E701                       	dc.b	smpsNoAttack, $01
000946B6 E10F                       	smpsAlterNote       $0F
000946B8 8001                       	dc.b	nRst, $01
000946BA E109                       	smpsAlterNote       $09
000946BC C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000946C2 E108                       	smpsAlterNote       $08
000946C4 C10D                       	dc.b	nE5, $0D
000946C6 E102                       	smpsAlterNote       $02
000946C8 E701                       	dc.b	smpsNoAttack, $01
000946CA E101                       	smpsAlterNote       $01
000946CC E701                       	dc.b	smpsNoAttack, $01
000946CE E105                       	smpsAlterNote       $05
000946D0 E701                       	dc.b	smpsNoAttack, $01
000946D2 E10B                       	smpsAlterNote       $0B
000946D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946D8 E108                       	smpsAlterNote       $08
000946DA E701                       	dc.b	smpsNoAttack, $01
000946DC E102                       	smpsAlterNote       $02
000946DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946E2 E108                       	smpsAlterNote       $08
000946E4 E701                       	dc.b	smpsNoAttack, $01
000946E6 E10B                       	smpsAlterNote       $0B
000946E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946EC E105                       	smpsAlterNote       $05
000946EE E701                       	dc.b	smpsNoAttack, $01
000946F0 E101                       	smpsAlterNote       $01
000946F2 E701                       	dc.b	smpsNoAttack, $01
000946F4 E102                       	smpsAlterNote       $02
000946F6 E701                       	dc.b	smpsNoAttack, $01
000946F8 E108                       	smpsAlterNote       $08
000946FA E701                       	dc.b	smpsNoAttack, $01
000946FC E10C                       	smpsAlterNote       $0C
000946FE E701                       	dc.b	smpsNoAttack, $01
00094700 E108                       	smpsAlterNote       $08
00094702 E701                       	dc.b	smpsNoAttack, $01
00094704 E105                       	smpsAlterNote       $05
00094706 E701                       	dc.b	smpsNoAttack, $01
00094708 E101                       	smpsAlterNote       $01
0009470A E701                       	dc.b	smpsNoAttack, $01
0009470C E105                       	smpsAlterNote       $05
0009470E E701                       	dc.b	smpsNoAttack, $01
00094710 E10B                       	smpsAlterNote       $0B
00094712 E701                       	dc.b	smpsNoAttack, $01
00094714 E10C                       	smpsAlterNote       $0C
00094716 E701                       	dc.b	smpsNoAttack, $01
00094718 E108                       	smpsAlterNote       $08
0009471A E701                       	dc.b	smpsNoAttack, $01
0009471C E102                       	smpsAlterNote       $02
0009471E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094722 E105                       	smpsAlterNote       $05
00094724 E701                       	dc.b	smpsNoAttack, $01
00094726 E10B                       	smpsAlterNote       $0B
00094728 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009472C E105                       	smpsAlterNote       $05
0009472E E701                       	dc.b	smpsNoAttack, $01
00094730 E102                       	smpsAlterNote       $02
00094732 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094736 E108                       	smpsAlterNote       $08
00094738 E701                       	dc.b	smpsNoAttack, $01
0009473A E10C                       	smpsAlterNote       $0C
0009473C E701                       	dc.b	smpsNoAttack, $01
0009473E E10B                       	smpsAlterNote       $0B
00094740 E701                       	dc.b	smpsNoAttack, $01
00094742 E105                       	smpsAlterNote       $05
00094744 E701                       	dc.b	smpsNoAttack, $01
00094746 E101                       	smpsAlterNote       $01
00094748 E701                       	dc.b	smpsNoAttack, $01
0009474A E105                       	smpsAlterNote       $05
0009474C E701                       	dc.b	smpsNoAttack, $01
0009474E E108                       	smpsAlterNote       $08
00094750 E701                       	dc.b	smpsNoAttack, $01
00094752 E10C                       	smpsAlterNote       $0C
00094754 E701                       	dc.b	smpsNoAttack, $01
00094756 E108                       	smpsAlterNote       $08
00094758 E701                       	dc.b	smpsNoAttack, $01
0009475A E102                       	smpsAlterNote       $02
0009475C E701                       	dc.b	smpsNoAttack, $01
0009475E E101                       	smpsAlterNote       $01
00094760 E701                       	dc.b	smpsNoAttack, $01
00094762 E105                       	smpsAlterNote       $05
00094764 E701                       	dc.b	smpsNoAttack, $01
00094766 E10B                       	smpsAlterNote       $0B
00094768 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009476C E108                       	smpsAlterNote       $08
0009476E E701                       	dc.b	smpsNoAttack, $01
00094770 E102                       	smpsAlterNote       $02
00094772 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094776 E108                       	smpsAlterNote       $08
00094778 E701                       	dc.b	smpsNoAttack, $01
0009477A E10B                       	smpsAlterNote       $0B
0009477C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094780 E105                       	smpsAlterNote       $05
00094782 E701                       	dc.b	smpsNoAttack, $01
00094784 E101                       	smpsAlterNote       $01
00094786 E701                       	dc.b	smpsNoAttack, $01
00094788 E102                       	smpsAlterNote       $02
0009478A E701                       	dc.b	smpsNoAttack, $01
0009478C E108                       	smpsAlterNote       $08
0009478E E701                       	dc.b	smpsNoAttack, $01
00094790 E10C                       	smpsAlterNote       $0C
00094792 E701                       	dc.b	smpsNoAttack, $01
00094794 E108                       	smpsAlterNote       $08
00094796 E701                       	dc.b	smpsNoAttack, $01
00094798 E105                       	smpsAlterNote       $05
0009479A E701                       	dc.b	smpsNoAttack, $01
0009479C E101                       	smpsAlterNote       $01
0009479E E701                       	dc.b	smpsNoAttack, $01
000947A0 E105                       	smpsAlterNote       $05
000947A2 E701                       	dc.b	smpsNoAttack, $01
000947A4 E10B                       	smpsAlterNote       $0B
000947A6 E701                       	dc.b	smpsNoAttack, $01
000947A8 E10C                       	smpsAlterNote       $0C
000947AA E701                       	dc.b	smpsNoAttack, $01
000947AC E108                       	smpsAlterNote       $08
000947AE E701                       	dc.b	smpsNoAttack, $01
000947B0 E102                       	smpsAlterNote       $02
000947B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947B6 E105                       	smpsAlterNote       $05
000947B8 E701                       	dc.b	smpsNoAttack, $01
000947BA E10B                       	smpsAlterNote       $0B
000947BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947C0 E105                       	smpsAlterNote       $05
000947C2 E701                       	dc.b	smpsNoAttack, $01
000947C4 E101                       	smpsAlterNote       $01
000947C6 E701                       	dc.b	smpsNoAttack, $01
000947C8 E102                       	smpsAlterNote       $02
000947CA E701                       	dc.b	smpsNoAttack, $01
000947CC E108                       	smpsAlterNote       $08
000947CE E701                       	dc.b	smpsNoAttack, $01
000947D0 E10C                       	smpsAlterNote       $0C
000947D2 E701                       	dc.b	smpsNoAttack, $01
000947D4 E108                       	smpsAlterNote       $08
000947D6 E701                       	dc.b	smpsNoAttack, $01
000947D8 E105                       	smpsAlterNote       $05
000947DA E701                       	dc.b	smpsNoAttack, $01
000947DC E101                       	smpsAlterNote       $01
000947DE E701                       	dc.b	smpsNoAttack, $01
000947E0 E105                       	smpsAlterNote       $05
000947E2 E701                       	dc.b	smpsNoAttack, $01
000947E4 E10B                       	smpsAlterNote       $0B
000947E6 E701                       	dc.b	smpsNoAttack, $01
000947E8 E10C                       	smpsAlterNote       $0C
000947EA E701                       	dc.b	smpsNoAttack, $01
000947EC E108                       	smpsAlterNote       $08
000947EE E701                       	dc.b	smpsNoAttack, $01
000947F0 E102                       	smpsAlterNote       $02
000947F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947F6 E105                       	smpsAlterNote       $05
000947F8 E701                       	dc.b	smpsNoAttack, $01
000947FA E10B                       	smpsAlterNote       $0B
000947FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094800 E105                       	smpsAlterNote       $05
00094802 E701                       	dc.b	smpsNoAttack, $01
00094804 E102                       	smpsAlterNote       $02
00094806 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009480A E108                       	smpsAlterNote       $08
0009480C E701                       	dc.b	smpsNoAttack, $01
0009480E E10C                       	smpsAlterNote       $0C
00094810 E701                       	dc.b	smpsNoAttack, $01
00094812 E10B                       	smpsAlterNote       $0B
00094814 E701                       	dc.b	smpsNoAttack, $01
00094816 E105                       	smpsAlterNote       $05
00094818 E701                       	dc.b	smpsNoAttack, $01
0009481A E101                       	smpsAlterNote       $01
0009481C E701                       	dc.b	smpsNoAttack, $01
0009481E E105                       	smpsAlterNote       $05
00094820 E701                       	dc.b	smpsNoAttack, $01
00094822 E108                       	smpsAlterNote       $08
00094824 E701                       	dc.b	smpsNoAttack, $01
00094826 E10C                       	smpsAlterNote       $0C
00094828 E701                       	dc.b	smpsNoAttack, $01
0009482C E10B                       	smpsAlterNote       $0B
0009482E C604 8001                  	dc.b	nA5, $04, nRst, $01
00094832 E109                       	smpsAlterNote       $09
00094834 C404                       	dc.b	nG5, $04
00094836 E10B                       	smpsAlterNote       $0B
00094838 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009483C E107                       	smpsAlterNote       $07
0009483E BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00094844 E10B                       	smpsAlterNote       $0B
00094846 C604                       	dc.b	nA5, $04
00094848 E109                       	smpsAlterNote       $09
0009484A C404 8001                  	dc.b	nG5, $04, nRst, $01
0009484E E10B                       	smpsAlterNote       $0B
00094850 C604                       	dc.b	nA5, $04
00094852 E108                       	smpsAlterNote       $08
00094854 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0009485A E106                       	smpsAlterNote       $06
0009485C C904 8001                  	dc.b	nC6, $04, nRst, $01
00094860 E10C                       	smpsAlterNote       $0C
00094862 C704                       	dc.b	nBb5, $04
00094864 E10B                       	smpsAlterNote       $0B
00094866 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009486A E109                       	smpsAlterNote       $09
0009486C C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00094876 E10B                       	smpsAlterNote       $0B
00094878 C60D                       	dc.b	nA5, $0D
0009487A E108                       	smpsAlterNote       $08
0009487C E701                       	dc.b	smpsNoAttack, $01
0009487E E104                       	smpsAlterNote       $04
00094880 E701                       	dc.b	smpsNoAttack, $01
00094882 E108                       	smpsAlterNote       $08
00094884 E701                       	dc.b	smpsNoAttack, $01
00094886 E10B                       	smpsAlterNote       $0B
00094888 E701                       	dc.b	smpsNoAttack, $01
0009488A E10F                       	smpsAlterNote       $0F
0009488C E701                       	dc.b	smpsNoAttack, $01
0009488E E10B                       	smpsAlterNote       $0B
00094890 E701                       	dc.b	smpsNoAttack, $01
00094892 E105                       	smpsAlterNote       $05
00094894 E701                       	dc.b	smpsNoAttack, $01
00094896 E104                       	smpsAlterNote       $04
00094898 E701                       	dc.b	smpsNoAttack, $01
0009489A E108                       	smpsAlterNote       $08
0009489C E701                       	dc.b	smpsNoAttack, $01
0009489E E10E                       	smpsAlterNote       $0E
000948A0 E701                       	dc.b	smpsNoAttack, $01
000948A2 E10F                       	smpsAlterNote       $0F
000948A4 8001                       	dc.b	nRst, $01
000948A6 E109                       	smpsAlterNote       $09
000948A8 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000948AE E108                       	smpsAlterNote       $08
000948B0 C10D                       	dc.b	nE5, $0D
000948B2 E105                       	smpsAlterNote       $05
000948B4 E701                       	dc.b	smpsNoAttack, $01
000948B6 E101                       	smpsAlterNote       $01
000948B8 E701                       	dc.b	smpsNoAttack, $01
000948BA E105                       	smpsAlterNote       $05
000948BC E701                       	dc.b	smpsNoAttack, $01
000948BE E10B                       	smpsAlterNote       $0B
000948C0 E701                       	dc.b	smpsNoAttack, $01
000948C2 E10C                       	smpsAlterNote       $0C
000948C4 E701                       	dc.b	smpsNoAttack, $01
000948C6 E108                       	smpsAlterNote       $08
000948C8 E701                       	dc.b	smpsNoAttack, $01
000948CA E102                       	smpsAlterNote       $02
000948CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948D0 E105                       	smpsAlterNote       $05
000948D2 E701                       	dc.b	smpsNoAttack, $01
000948D4 E10B                       	smpsAlterNote       $0B
000948D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948DA E105                       	smpsAlterNote       $05
000948DC E701                       	dc.b	smpsNoAttack, $01
000948DE E102                       	smpsAlterNote       $02
000948E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948E4 E108                       	smpsAlterNote       $08
000948E6 E701                       	dc.b	smpsNoAttack, $01
000948E8 E10C                       	smpsAlterNote       $0C
000948EA E701                       	dc.b	smpsNoAttack, $01
000948EC E10B                       	smpsAlterNote       $0B
000948EE E701                       	dc.b	smpsNoAttack, $01
000948F0 E105                       	smpsAlterNote       $05
000948F2 E701                       	dc.b	smpsNoAttack, $01
000948F4 E101                       	smpsAlterNote       $01
000948F6 E701                       	dc.b	smpsNoAttack, $01
000948F8 E105                       	smpsAlterNote       $05
000948FA E701                       	dc.b	smpsNoAttack, $01
000948FC E108                       	smpsAlterNote       $08
000948FE E701                       	dc.b	smpsNoAttack, $01
00094900 E10C                       	smpsAlterNote       $0C
00094902 E701                       	dc.b	smpsNoAttack, $01
00094904 E108                       	smpsAlterNote       $08
00094906 E701                       	dc.b	smpsNoAttack, $01
00094908 E102                       	smpsAlterNote       $02
0009490A E701                       	dc.b	smpsNoAttack, $01
0009490C E101                       	smpsAlterNote       $01
0009490E E701                       	dc.b	smpsNoAttack, $01
00094910 E105                       	smpsAlterNote       $05
00094912 E701                       	dc.b	smpsNoAttack, $01
00094914 E10B                       	smpsAlterNote       $0B
00094916 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009491A E108                       	smpsAlterNote       $08
0009491C E701                       	dc.b	smpsNoAttack, $01
0009491E E102                       	smpsAlterNote       $02
00094920 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094924 E108                       	smpsAlterNote       $08
00094926 E701                       	dc.b	smpsNoAttack, $01
00094928 E10B                       	smpsAlterNote       $0B
0009492A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009492E E105                       	smpsAlterNote       $05
00094930 E701                       	dc.b	smpsNoAttack, $01
00094932 E101                       	smpsAlterNote       $01
00094934 E701                       	dc.b	smpsNoAttack, $01
00094936 E102                       	smpsAlterNote       $02
00094938 E701                       	dc.b	smpsNoAttack, $01
0009493A E108                       	smpsAlterNote       $08
0009493C E701                       	dc.b	smpsNoAttack, $01
0009493E E10C                       	smpsAlterNote       $0C
00094940 E701                       	dc.b	smpsNoAttack, $01
00094942 E108                       	smpsAlterNote       $08
00094944 E701                       	dc.b	smpsNoAttack, $01
00094946 E105                       	smpsAlterNote       $05
00094948 E701                       	dc.b	smpsNoAttack, $01
0009494A E101                       	smpsAlterNote       $01
0009494C E701                       	dc.b	smpsNoAttack, $01
0009494E E105                       	smpsAlterNote       $05
00094950 E701                       	dc.b	smpsNoAttack, $01
00094952 E10B                       	smpsAlterNote       $0B
00094954 E701                       	dc.b	smpsNoAttack, $01
00094956 E10C                       	smpsAlterNote       $0C
00094958 E701                       	dc.b	smpsNoAttack, $01
0009495A E108                       	smpsAlterNote       $08
0009495C E701                       	dc.b	smpsNoAttack, $01
0009495E E102                       	smpsAlterNote       $02
00094960 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094964 E108                       	smpsAlterNote       $08
00094966 E701                       	dc.b	smpsNoAttack, $01
00094968 E10B                       	smpsAlterNote       $0B
0009496A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009496E E105                       	smpsAlterNote       $05
00094970 E701                       	dc.b	smpsNoAttack, $01
00094972 E101                       	smpsAlterNote       $01
00094974 E701                       	dc.b	smpsNoAttack, $01
00094976 E102                       	smpsAlterNote       $02
00094978 E701                       	dc.b	smpsNoAttack, $01
0009497A E108                       	smpsAlterNote       $08
0009497C E701                       	dc.b	smpsNoAttack, $01
0009497E E10C                       	smpsAlterNote       $0C
00094980 E701                       	dc.b	smpsNoAttack, $01
00094982 E108                       	smpsAlterNote       $08
00094984 E701                       	dc.b	smpsNoAttack, $01
00094986 E105                       	smpsAlterNote       $05
00094988 E701                       	dc.b	smpsNoAttack, $01
0009498A E101                       	smpsAlterNote       $01
0009498C E701                       	dc.b	smpsNoAttack, $01
0009498E E105                       	smpsAlterNote       $05
00094990 E701                       	dc.b	smpsNoAttack, $01
00094992 E10B                       	smpsAlterNote       $0B
00094994 E701                       	dc.b	smpsNoAttack, $01
00094996 E10C                       	smpsAlterNote       $0C
00094998 E701                       	dc.b	smpsNoAttack, $01
0009499A E108                       	smpsAlterNote       $08
0009499C E701                       	dc.b	smpsNoAttack, $01
0009499E E102                       	smpsAlterNote       $02
000949A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949A4 E105                       	smpsAlterNote       $05
000949A6 E701                       	dc.b	smpsNoAttack, $01
000949A8 E10B                       	smpsAlterNote       $0B
000949AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949AE E105                       	smpsAlterNote       $05
000949B0 E701                       	dc.b	smpsNoAttack, $01
000949B2 E102                       	smpsAlterNote       $02
000949B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949B8 E108                       	smpsAlterNote       $08
000949BA E701                       	dc.b	smpsNoAttack, $01
000949BC E10C                       	smpsAlterNote       $0C
000949BE E701                       	dc.b	smpsNoAttack, $01
000949C0 E10B                       	smpsAlterNote       $0B
000949C2 E701                       	dc.b	smpsNoAttack, $01
000949C4 E105                       	smpsAlterNote       $05
000949C6 E701                       	dc.b	smpsNoAttack, $01
000949C8 E101                       	smpsAlterNote       $01
000949CA E701                       	dc.b	smpsNoAttack, $01
000949CC E105                       	smpsAlterNote       $05
000949CE E701                       	dc.b	smpsNoAttack, $01
000949D0 E108                       	smpsAlterNote       $08
000949D2 E701                       	dc.b	smpsNoAttack, $01
000949D4 E10C                       	smpsAlterNote       $0C
000949D6 E701                       	dc.b	smpsNoAttack, $01
000949D8 E108                       	smpsAlterNote       $08
000949DA E701                       	dc.b	smpsNoAttack, $01
000949DC E102                       	smpsAlterNote       $02
000949DE E701                       	dc.b	smpsNoAttack, $01
000949E0 E101                       	smpsAlterNote       $01
000949E2 E701                       	dc.b	smpsNoAttack, $01
000949E4 E105                       	smpsAlterNote       $05
000949E6 E701                       	dc.b	smpsNoAttack, $01
000949E8 E10B                       	smpsAlterNote       $0B
000949EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949EE E108                       	smpsAlterNote       $08
000949F0 E701                       	dc.b	smpsNoAttack, $01
000949F2 E102                       	smpsAlterNote       $02
000949F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949F8 E108                       	smpsAlterNote       $08
000949FA E701                       	dc.b	smpsNoAttack, $01
000949FC E10B                       	smpsAlterNote       $0B
000949FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A02 E105                       	smpsAlterNote       $05
00094A04 E701                       	dc.b	smpsNoAttack, $01
00094A06 E102                       	smpsAlterNote       $02
00094A08 8001                       	dc.b	nRst, $01
00094A0A E107                       	smpsAlterNote       $07
00094A0C BF01 8001                  	dc.b	nD5, $01, nRst, $01
00094A10 E108                       	smpsAlterNote       $08
00094A12 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00094A16 E102                       	smpsAlterNote       $02
00094A18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A1C E108                       	smpsAlterNote       $08
00094A1E E701                       	dc.b	smpsNoAttack, $01
00094A20 E10B                       	smpsAlterNote       $0B
00094A22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A26 E105                       	smpsAlterNote       $05
00094A28 E701                       	dc.b	smpsNoAttack, $01
00094A2A E101                       	smpsAlterNote       $01
00094A2C E701                       	dc.b	smpsNoAttack, $01
00094A2E E102                       	smpsAlterNote       $02
00094A30 E701                       	dc.b	smpsNoAttack, $01
00094A32 E108                       	smpsAlterNote       $08
00094A34 E701                       	dc.b	smpsNoAttack, $01
00094A36 E10C                       	smpsAlterNote       $0C
00094A38 E701                       	dc.b	smpsNoAttack, $01
00094A3A E108                       	smpsAlterNote       $08
00094A3C E701                       	dc.b	smpsNoAttack, $01
00094A3E E105                       	smpsAlterNote       $05
00094A40 E701                       	dc.b	smpsNoAttack, $01
00094A42 E101                       	smpsAlterNote       $01
00094A44 E701                       	dc.b	smpsNoAttack, $01
00094A46 E105                       	smpsAlterNote       $05
00094A48 E701                       	dc.b	smpsNoAttack, $01
00094A4A E10B                       	smpsAlterNote       $0B
00094A4C E701                       	dc.b	smpsNoAttack, $01
00094A4E E10C                       	smpsAlterNote       $0C
00094A50 E701                       	dc.b	smpsNoAttack, $01
00094A52 E108                       	smpsAlterNote       $08
00094A54 E701                       	dc.b	smpsNoAttack, $01
00094A56 E102                       	smpsAlterNote       $02
00094A58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A5C E105                       	smpsAlterNote       $05
00094A5E E701                       	dc.b	smpsNoAttack, $01
00094A60 E10B                       	smpsAlterNote       $0B
00094A62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A66 E105                       	smpsAlterNote       $05
00094A68 E701                       	dc.b	smpsNoAttack, $01
00094A6A E102                       	smpsAlterNote       $02
00094A6C E701                       	dc.b	smpsNoAttack, $01
00094A6E E109                       	smpsAlterNote       $09
00094A70 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00094A74 E108                       	smpsAlterNote       $08
00094A76 C10D                       	dc.b	nE5, $0D
00094A78 E105                       	smpsAlterNote       $05
00094A7A E701                       	dc.b	smpsNoAttack, $01
00094A7C E101                       	smpsAlterNote       $01
00094A7E E701                       	dc.b	smpsNoAttack, $01
00094A80 E102                       	smpsAlterNote       $02
00094A82 E701                       	dc.b	smpsNoAttack, $01
00094A84 E108                       	smpsAlterNote       $08
00094A86 E701                       	dc.b	smpsNoAttack, $01
00094A88 E10C                       	smpsAlterNote       $0C
00094A8A E701                       	dc.b	smpsNoAttack, $01
00094A8C E108                       	smpsAlterNote       $08
00094A8E E701                       	dc.b	smpsNoAttack, $01
00094A90 E105                       	smpsAlterNote       $05
00094A92 E701                       	dc.b	smpsNoAttack, $01
00094A94 E101                       	smpsAlterNote       $01
00094A96 E701                       	dc.b	smpsNoAttack, $01
00094A98 E105                       	smpsAlterNote       $05
00094A9A E701                       	dc.b	smpsNoAttack, $01
00094A9C E10B                       	smpsAlterNote       $0B
00094A9E E701                       	dc.b	smpsNoAttack, $01
00094AA0 E10C                       	smpsAlterNote       $0C
00094AA2 E701                       	dc.b	smpsNoAttack, $01
00094AA4 E108                       	smpsAlterNote       $08
00094AA6 E701                       	dc.b	smpsNoAttack, $01
00094AA8 E102                       	smpsAlterNote       $02
00094AAA E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00094AB2 E10B                       	smpsAlterNote       $0B
00094AB4 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094AB8 E10C                       	smpsAlterNote       $0C
00094ABA BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00094ABE E10B                       	smpsAlterNote       $0B
00094AC0 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00094AC6 E107                       	smpsAlterNote       $07
00094AC8 BF03                       	dc.b	nD5, $03
00094ACA E108                       	smpsAlterNote       $08
00094ACC C103 8001                  	dc.b	nE5, $03, nRst, $01
00094AD0 E109                       	smpsAlterNote       $09
00094AD2 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00094AD8 E10B                       	smpsAlterNote       $0B
00094ADA C606 8001                  	dc.b	nA5, $06, nRst, $01
00094ADE E107                       	smpsAlterNote       $07
00094AE0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094AE4 E106                       	smpsAlterNote       $06
00094AE6 C90D                       	dc.b	nC6, $0D
00094AE8 E103                       	smpsAlterNote       $03
00094AEA E701                       	dc.b	smpsNoAttack, $01
00094AEC E1FF                       	smpsAlterNote       $FF
00094AEE E701                       	dc.b	smpsNoAttack, $01
00094AF0 E103                       	smpsAlterNote       $03
00094AF2 E701                       	dc.b	smpsNoAttack, $01
00094AF4 E109                       	smpsAlterNote       $09
00094AF6 E701                       	dc.b	smpsNoAttack, $01
00094AF8 E10A                       	smpsAlterNote       $0A
00094AFA E701                       	dc.b	smpsNoAttack, $01
00094AFC E106                       	smpsAlterNote       $06
00094AFE E701                       	dc.b	smpsNoAttack, $01
00094B00 E100                       	smpsAlterNote       $00
00094B02 E701                       	dc.b	smpsNoAttack, $01
00094B04 E10C                       	smpsAlterNote       $0C
00094B06 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094B0A E10B                       	smpsAlterNote       $0B
00094B0C C603                       	dc.b	nA5, $03
00094B0E E109                       	smpsAlterNote       $09
00094B10 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094B14 E10B                       	smpsAlterNote       $0B
00094B16 C60D                       	dc.b	nA5, $0D
00094B18 E105                       	smpsAlterNote       $05
00094B1A E701                       	dc.b	smpsNoAttack, $01
00094B1C E104                       	smpsAlterNote       $04
00094B1E E701                       	dc.b	smpsNoAttack, $01
00094B20 E108                       	smpsAlterNote       $08
00094B22 E701                       	dc.b	smpsNoAttack, $01
00094B24 E10E                       	smpsAlterNote       $0E
00094B26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B2A E10B                       	smpsAlterNote       $0B
00094B2C E701                       	dc.b	smpsNoAttack, $01
00094B2E E105                       	smpsAlterNote       $05
00094B30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B34 E10B                       	smpsAlterNote       $0B
00094B36 E701                       	dc.b	smpsNoAttack, $01
00094B38 E10E                       	smpsAlterNote       $0E
00094B3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B3E E108                       	smpsAlterNote       $08
00094B40 E701                       	dc.b	smpsNoAttack, $01
00094B42 E104                       	smpsAlterNote       $04
00094B44 E701                       	dc.b	smpsNoAttack, $01
00094B46 E105                       	smpsAlterNote       $05
00094B48 E701                       	dc.b	smpsNoAttack, $01
00094B4A E10B                       	smpsAlterNote       $0B
00094B4C E701                       	dc.b	smpsNoAttack, $01
00094B4E E10F                       	smpsAlterNote       $0F
00094B50 E701                       	dc.b	smpsNoAttack, $01
00094B52 E10B                       	smpsAlterNote       $0B
00094B54 E701                       	dc.b	smpsNoAttack, $01
00094B56 E108                       	smpsAlterNote       $08
00094B58 E701                       	dc.b	smpsNoAttack, $01
00094B5A E104                       	smpsAlterNote       $04
00094B5C E701                       	dc.b	smpsNoAttack, $01
00094B5E E108                       	smpsAlterNote       $08
00094B60 E701                       	dc.b	smpsNoAttack, $01
00094B62 E10E                       	smpsAlterNote       $0E
00094B64 E701                       	dc.b	smpsNoAttack, $01
00094B66 E10F                       	smpsAlterNote       $0F
00094B68 E701                       	dc.b	smpsNoAttack, $01
00094B6A E10B                       	smpsAlterNote       $0B
00094B6C E701                       	dc.b	smpsNoAttack, $01
00094B6E E105                       	smpsAlterNote       $05
00094B70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B74 E108                       	smpsAlterNote       $08
00094B76 E701                       	dc.b	smpsNoAttack, $01
00094B78 E10E                       	smpsAlterNote       $0E
00094B7A E701                       	dc.b	smpsNoAttack, $01
00094B7C E10F                       	smpsAlterNote       $0F
00094B7E 800F                       	dc.b	nRst, $0F
00094B80 E107                       	smpsAlterNote       $07
00094B82 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094B86 E108                       	smpsAlterNote       $08
00094B88 C103                       	dc.b	nE5, $03
00094B8A E109                       	smpsAlterNote       $09
00094B8C C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00094B92 E10B                       	smpsAlterNote       $0B
00094B94 C607                       	dc.b	nA5, $07
00094B96 E107                       	smpsAlterNote       $07
00094B98 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094B9C E106                       	smpsAlterNote       $06
00094B9E C90D                       	dc.b	nC6, $0D
00094BA0 E107                       	smpsAlterNote       $07
00094BA2 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00094BA6 E10C                       	smpsAlterNote       $0C
00094BA8 C704                       	dc.b	nBb5, $04
00094BAA E10B                       	smpsAlterNote       $0B
00094BAC C604 8001                  	dc.b	nA5, $04, nRst, $01
00094BB0 E109                       	smpsAlterNote       $09
00094BB2 C404                       	dc.b	nG5, $04
00094BB4 E10B                       	smpsAlterNote       $0B
00094BB6 C60D                       	dc.b	nA5, $0D
00094BB8 E108                       	smpsAlterNote       $08
00094BBA E701                       	dc.b	smpsNoAttack, $01
00094BBC E105                       	smpsAlterNote       $05
00094BBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BC2 E10B                       	smpsAlterNote       $0B
00094BC4 E701                       	dc.b	smpsNoAttack, $01
00094BC6 E10F                       	smpsAlterNote       $0F
00094BC8 E701                       	dc.b	smpsNoAttack, $01
00094BCA E10E                       	smpsAlterNote       $0E
00094BCC E701                       	dc.b	smpsNoAttack, $01
00094BCE E108                       	smpsAlterNote       $08
00094BD0 E701                       	dc.b	smpsNoAttack, $01
00094BD2 E104                       	smpsAlterNote       $04
00094BD4 E701                       	dc.b	smpsNoAttack, $01
00094BD6 E108                       	smpsAlterNote       $08
00094BD8 E701                       	dc.b	smpsNoAttack, $01
00094BDA E10B                       	smpsAlterNote       $0B
00094BDC E701                       	dc.b	smpsNoAttack, $01
00094BDE E10F                       	smpsAlterNote       $0F
00094BE0 E701                       	dc.b	smpsNoAttack, $01
00094BE2 E10B                       	smpsAlterNote       $0B
00094BE4 E701                       	dc.b	smpsNoAttack, $01
00094BE6 E105                       	smpsAlterNote       $05
00094BE8 E701                       	dc.b	smpsNoAttack, $01
00094BEA E104                       	smpsAlterNote       $04
00094BEC E701                       	dc.b	smpsNoAttack, $01
00094BEE E108                       	smpsAlterNote       $08
00094BF0 E701                       	dc.b	smpsNoAttack, $01
00094BF2 E10E                       	smpsAlterNote       $0E
00094BF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BF8 E10B                       	smpsAlterNote       $0B
00094BFA E701                       	dc.b	smpsNoAttack, $01
00094BFC E105                       	smpsAlterNote       $05
00094BFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C02 E10B                       	smpsAlterNote       $0B
00094C04 E701                       	dc.b	smpsNoAttack, $01
00094C06 E10E                       	smpsAlterNote       $0E
00094C08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C0C E108                       	smpsAlterNote       $08
00094C0E E701                       	dc.b	smpsNoAttack, $01
00094C10 E105                       	smpsAlterNote       $05
00094C12 8001                       	dc.b	nRst, $01
00094C14 E109                       	smpsAlterNote       $09
00094C16 C401 8001                  	dc.b	nG5, $01, nRst, $01
00094C1A E10B                       	smpsAlterNote       $0B
00094C1C C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094C24 E109                       	smpsAlterNote       $09
00094C26 C404                       	dc.b	nG5, $04
00094C28 E10B                       	smpsAlterNote       $0B
00094C2A C604 8001                  	dc.b	nA5, $04, nRst, $01
00094C2E E107                       	smpsAlterNote       $07
00094C30 BF0D                       	dc.b	nD5, $0D
00094C32 E101                       	smpsAlterNote       $01
00094C34 E701                       	dc.b	smpsNoAttack, $01
00094C36 E100                       	smpsAlterNote       $00
00094C38 E701                       	dc.b	smpsNoAttack, $01
00094C3A E104                       	smpsAlterNote       $04
00094C3C E701                       	dc.b	smpsNoAttack, $01
00094C3E E10A                       	smpsAlterNote       $0A
00094C40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C44 E107                       	smpsAlterNote       $07
00094C46 E701                       	dc.b	smpsNoAttack, $01
00094C48 E101                       	smpsAlterNote       $01
00094C4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C4E E107                       	smpsAlterNote       $07
00094C50 E701                       	dc.b	smpsNoAttack, $01
00094C52 E10A                       	smpsAlterNote       $0A
00094C54 E701                       	dc.b	smpsNoAttack, $01
00094C56 E10B                       	smpsAlterNote       $0B
00094C58 8001                       	dc.b	nRst, $01
00094C5A E108                       	smpsAlterNote       $08
00094C5C 8001                       	dc.b	nRst, $01
00094C5E E109                       	smpsAlterNote       $09
00094C60 8001 C401                  	dc.b	nRst, $01, nG5, $01
00094C64 E10B                       	smpsAlterNote       $0B
00094C66 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00094C6E E108                       	smpsAlterNote       $08
00094C70 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094C74 E109                       	smpsAlterNote       $09
00094C76 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00094C7A E108                       	smpsAlterNote       $08
00094C7C CD02 8001                  	dc.b	nE6, $02, nRst, $01
00094C80 E106                       	smpsAlterNote       $06
00094C82 C903                       	dc.b	nC6, $03
00094C84 E109                       	smpsAlterNote       $09
00094C86 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094C8A E10C                       	smpsAlterNote       $0C
00094C8C C70D                       	dc.b	nBb5, $0D
00094C8E E109                       	smpsAlterNote       $09
00094C90 E701                       	dc.b	smpsNoAttack, $01
00094C92 E105                       	smpsAlterNote       $05
00094C94 E701                       	dc.b	smpsNoAttack, $01
00094C96 E109                       	smpsAlterNote       $09
00094C98 E701                       	dc.b	smpsNoAttack, $01
00094C9A E10F                       	smpsAlterNote       $0F
00094C9C E701                       	dc.b	smpsNoAttack, $01
00094C9E E110                       	smpsAlterNote       $10
00094CA0 E701                       	dc.b	smpsNoAttack, $01
00094CA2 E10C                       	smpsAlterNote       $0C
00094CA4 E701                       	dc.b	smpsNoAttack, $01
00094CA6 E106                       	smpsAlterNote       $06
00094CA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CAC E109                       	smpsAlterNote       $09
00094CAE E701                       	dc.b	smpsNoAttack, $01
00094CB0 E10F                       	smpsAlterNote       $0F
00094CB2 E701                       	dc.b	smpsNoAttack, $01
00094CB4 E110                       	smpsAlterNote       $10
00094CB6 8001                       	dc.b	nRst, $01
00094CB8 E10B                       	smpsAlterNote       $0B
00094CBA C606 8001                  	dc.b	nA5, $06, nRst, $01
00094CBE E109                       	smpsAlterNote       $09
00094CC0 C40D                       	dc.b	nG5, $0D
00094CC2 E103                       	smpsAlterNote       $03
00094CC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CC8 E106                       	smpsAlterNote       $06
00094CCA E701                       	dc.b	smpsNoAttack, $01
00094CCC E10C                       	smpsAlterNote       $0C
00094CCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CD2 E106                       	smpsAlterNote       $06
00094CD4 E701                       	dc.b	smpsNoAttack, $01
00094CD6 E103                       	smpsAlterNote       $03
00094CD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CDC E109                       	smpsAlterNote       $09
00094CDE E701                       	dc.b	smpsNoAttack, $01
00094CE0 E10D                       	smpsAlterNote       $0D
00094CE2 E701                       	dc.b	smpsNoAttack, $01
00094CE4 E10C                       	smpsAlterNote       $0C
00094CE6 E701                       	dc.b	smpsNoAttack, $01
00094CE8 E106                       	smpsAlterNote       $06
00094CEA E701                       	dc.b	smpsNoAttack, $01
00094CEC E102                       	smpsAlterNote       $02
00094CEE E701                       	dc.b	smpsNoAttack, $01
00094CF0 E103                       	smpsAlterNote       $03
00094CF2 8001                       	dc.b	nRst, $01
00094CF4 E10B                       	smpsAlterNote       $0B
00094CF6 C60D                       	dc.b	nA5, $0D
00094CF8 E108                       	smpsAlterNote       $08
00094CFA E701                       	dc.b	smpsNoAttack, $01
00094CFC E104                       	smpsAlterNote       $04
00094CFE E701                       	dc.b	smpsNoAttack, $01
00094D00 E108                       	smpsAlterNote       $08
00094D02 E701                       	dc.b	smpsNoAttack, $01
00094D04 E10B                       	smpsAlterNote       $0B
00094D06 E701                       	dc.b	smpsNoAttack, $01
00094D08 E10F                       	smpsAlterNote       $0F
00094D0A E701                       	dc.b	smpsNoAttack, $01
00094D0C E10B                       	smpsAlterNote       $0B
00094D0E E701                       	dc.b	smpsNoAttack, $01
00094D10 E105                       	smpsAlterNote       $05
00094D12 E701                       	dc.b	smpsNoAttack, $01
00094D14 E104                       	smpsAlterNote       $04
00094D16 E701                       	dc.b	smpsNoAttack, $01
00094D18 E108                       	smpsAlterNote       $08
00094D1A E701                       	dc.b	smpsNoAttack, $01
00094D1C E10E                       	smpsAlterNote       $0E
00094D1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D22 E10B                       	smpsAlterNote       $0B
00094D24 E701                       	dc.b	smpsNoAttack, $01
00094D26 E105                       	smpsAlterNote       $05
00094D28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D2C E10C                       	smpsAlterNote       $0C
00094D2E C70E                       	dc.b	nBb5, $0E
00094D30 E106                       	smpsAlterNote       $06
00094D32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D36 E10C                       	smpsAlterNote       $0C
00094D38 E701                       	dc.b	smpsNoAttack, $01
00094D3A E10F                       	smpsAlterNote       $0F
00094D3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D40 E109                       	smpsAlterNote       $09
00094D42 E701                       	dc.b	smpsNoAttack, $01
00094D44 E105                       	smpsAlterNote       $05
00094D46 E701                       	dc.b	smpsNoAttack, $01
00094D48 E106                       	smpsAlterNote       $06
00094D4A E701                       	dc.b	smpsNoAttack, $01
00094D4C E10C                       	smpsAlterNote       $0C
00094D4E E701                       	dc.b	smpsNoAttack, $01
00094D50 E110                       	smpsAlterNote       $10
00094D52 E701                       	dc.b	smpsNoAttack, $01
00094D54 E10C                       	smpsAlterNote       $0C
00094D56 E701                       	dc.b	smpsNoAttack, $01
00094D58 E109                       	smpsAlterNote       $09
00094D5A E701                       	dc.b	smpsNoAttack, $01
00094D5C E105                       	smpsAlterNote       $05
00094D5E E701                       	dc.b	smpsNoAttack, $01
00094D60 E106                       	smpsAlterNote       $06
00094D62 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00094D66 E107                       	smpsAlterNote       $07
00094D68 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00094D6D E108                       	smpsAlterNote       $08
00094D6F CD0D                       	dc.b	nE6, $0D
00094D71 E107                       	smpsAlterNote       $07
00094D73 CB0D                       	dc.b	nD6, $0D
00094D75 E104                       	smpsAlterNote       $04
00094D77 E701                       	dc.b	smpsNoAttack, $01
00094D79 E100                       	smpsAlterNote       $00
00094D7B E701                       	dc.b	smpsNoAttack, $01
00094D7D E101                       	smpsAlterNote       $01
00094D7F E701                       	dc.b	smpsNoAttack, $01
00094D81 E107                       	smpsAlterNote       $07
00094D83 E701                       	dc.b	smpsNoAttack, $01
00094D85 E10B                       	smpsAlterNote       $0B
00094D87 E701                       	dc.b	smpsNoAttack, $01
00094D89 E107                       	smpsAlterNote       $07
00094D8B E701                       	dc.b	smpsNoAttack, $01
00094D8D E104                       	smpsAlterNote       $04
00094D8F E701                       	dc.b	smpsNoAttack, $01
00094D91 E100                       	smpsAlterNote       $00
00094D93 E701                       	dc.b	smpsNoAttack, $01
00094D95 E104                       	smpsAlterNote       $04
00094D97 E701                       	dc.b	smpsNoAttack, $01
00094D99 E10A                       	smpsAlterNote       $0A
00094D9B E701                       	dc.b	smpsNoAttack, $01
00094D9D E10B                       	smpsAlterNote       $0B
00094D9F E701                       	dc.b	smpsNoAttack, $01
00094DA1 E108                       	smpsAlterNote       $08
00094DA3 CC0D                       	dc.b	nEb6, $0D
00094DA5 E105                       	smpsAlterNote       $05
00094DA7 E701                       	dc.b	smpsNoAttack, $01
00094DA9 E101                       	smpsAlterNote       $01
00094DAB E701                       	dc.b	smpsNoAttack, $01
00094DAD E102                       	smpsAlterNote       $02
00094DAF E701                       	dc.b	smpsNoAttack, $01
00094DB1 E108                       	smpsAlterNote       $08
00094DB3 E701                       	dc.b	smpsNoAttack, $01
00094DB5 E106                       	smpsAlterNote       $06
00094DB7 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00094DC3 8001                       	dc.b	nRst, $01
00094DC5 E107                       	smpsAlterNote       $07
00094DC7 CB0D                       	dc.b	nD6, $0D
00094DC9 E104                       	smpsAlterNote       $04
00094DCB E701                       	dc.b	smpsNoAttack, $01
00094DCD E100                       	smpsAlterNote       $00
00094DCF E701                       	dc.b	smpsNoAttack, $01
00094DD1 E104                       	smpsAlterNote       $04
00094DD3 E701                       	dc.b	smpsNoAttack, $01
00094DD5 E107                       	smpsAlterNote       $07
00094DD7 E701                       	dc.b	smpsNoAttack, $01
00094DD9 E10B                       	smpsAlterNote       $0B
00094DDB E701                       	dc.b	smpsNoAttack, $01
00094DDD E107                       	smpsAlterNote       $07
00094DDF E701                       	dc.b	smpsNoAttack, $01
00094DE1 E101                       	smpsAlterNote       $01
00094DE3 E701                       	dc.b	smpsNoAttack, $01
00094DE5 E100                       	smpsAlterNote       $00
00094DE7 E701                       	dc.b	smpsNoAttack, $01
00094DE9 E104                       	smpsAlterNote       $04
00094DEB E701                       	dc.b	smpsNoAttack, $01
00094DED E10A                       	smpsAlterNote       $0A
00094DEF E701                       	dc.b	smpsNoAttack, $01
00094DF1 E10B                       	smpsAlterNote       $0B
00094DF3 8001                       	dc.b	nRst, $01
00094DF5 E109                       	smpsAlterNote       $09
00094DF7 CE0A                       	dc.b	nF6, $0A
00094DF9 E108                       	smpsAlterNote       $08
00094DFB CC07                       	dc.b	nEb6, $07
00094DFD E106                       	smpsAlterNote       $06
00094DFF C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00094E0B E107                       	smpsAlterNote       $07
00094E0D CB0D                       	dc.b	nD6, $0D
00094E0F E101                       	smpsAlterNote       $01
00094E11 E701                       	dc.b	smpsNoAttack, $01
00094E13 E100                       	smpsAlterNote       $00
00094E15 E701                       	dc.b	smpsNoAttack, $01
00094E17 E104                       	smpsAlterNote       $04
00094E19 E701                       	dc.b	smpsNoAttack, $01
00094E1B E10A                       	smpsAlterNote       $0A
00094E1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E21 E107                       	smpsAlterNote       $07
00094E23 E701                       	dc.b	smpsNoAttack, $01
00094E25 E101                       	smpsAlterNote       $01
00094E27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E2B E107                       	smpsAlterNote       $07
00094E2D E701                       	dc.b	smpsNoAttack, $01
00094E2F E10A                       	smpsAlterNote       $0A
00094E31 E701                       	dc.b	smpsNoAttack, $01
00094E33 E10B                       	smpsAlterNote       $0B
00094E35 8001                       	dc.b	nRst, $01
00094E37 E108                       	smpsAlterNote       $08
00094E39 CC0D                       	dc.b	nEb6, $0D
00094E3B E102                       	smpsAlterNote       $02
00094E3D E701                       	dc.b	smpsNoAttack, $01
00094E3F E101                       	smpsAlterNote       $01
00094E41 E701                       	dc.b	smpsNoAttack, $01
00094E43 E105                       	smpsAlterNote       $05
00094E45 E701                       	dc.b	smpsNoAttack, $01
00094E47 E108                       	smpsAlterNote       $08
00094E49 8001                       	dc.b	nRst, $01
00094E4B E106                       	smpsAlterNote       $06
00094E4D C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00094E59 8001                       	dc.b	nRst, $01
00094E5B E107                       	smpsAlterNote       $07
00094E5D CB0D                       	dc.b	nD6, $0D
00094E5F E101                       	smpsAlterNote       $01
00094E61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E65 E104                       	smpsAlterNote       $04
00094E67 E701                       	dc.b	smpsNoAttack, $01
00094E69 E10A                       	smpsAlterNote       $0A
00094E6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E6F E104                       	smpsAlterNote       $04
00094E71 E701                       	dc.b	smpsNoAttack, $01
00094E73 E101                       	smpsAlterNote       $01
00094E75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E79 E107                       	smpsAlterNote       $07
00094E7B E701                       	dc.b	smpsNoAttack, $01
00094E7D E10B                       	smpsAlterNote       $0B
00094E7F E701                       	dc.b	smpsNoAttack, $01
00094E81 E10A                       	smpsAlterNote       $0A
00094E83 E701                       	dc.b	smpsNoAttack, $01
00094E85 E104                       	smpsAlterNote       $04
00094E87 E701                       	dc.b	smpsNoAttack, $01
00094E89 E100                       	smpsAlterNote       $00
00094E8B E701                       	dc.b	smpsNoAttack, $01
00094E8D E101                       	smpsAlterNote       $01
00094E8F 801C                       	dc.b	nRst, $1C
00094E93 E107                       	smpsAlterNote       $07
00094E95 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094E99 E603                       	smpsAlterVol        $03
00094E9B F6F1 AD                    	smpsJump            music84_Jump03
00094E9E                            
00094E9E                            ; FM3 Data
00094E9E                            music84_FM3:
00094E9E E0C0                       	smpsPan             panCenter, $00
00094EA2 E109                       	smpsAlterNote       $09
00094EA4 C203 8007                  	dc.b	nF5, $03, nRst, $07
00094EA8 E108                       	smpsAlterNote       $08
00094EAA C103 800B                  	dc.b	nE5, $03, nRst, $0B
00094EAE E10B                       	smpsAlterNote       $0B
00094EB0 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00094EB6 E040                       	smpsPan             panRight, $00
00094EB8 E110                       	smpsAlterNote       $10
00094EBA E6F9                       	smpsAlterVol        $F9
00094EBC C702 8001                  	dc.b	nBb5, $02, nRst, $01
00094EC0 E10F                       	smpsAlterNote       $0F
00094EC2 C603                       	dc.b	nA5, $03
00094EC4 E10D                       	smpsAlterNote       $0D
00094EC6 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00094ECC E10C                       	smpsAlterNote       $0C
00094ECE C103 8001                  	dc.b	nE5, $03, nRst, $01
00094ED2 E10A                       	smpsAlterNote       $0A
00094ED4 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00094ED8 E10F                       	smpsAlterNote       $0F
00094EDA BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094EDE E0C0                       	smpsPan             panCenter, $00
00094EE2 E109                       	smpsAlterNote       $09
00094EE4 E609                       	smpsAlterVol        $09
00094EE6 B603                       	dc.b	nF4, $03
00094EE8                            
00094EE8                            music84_Jump02:
00094EE8 E70A                       	dc.b	smpsNoAttack, $0A
00094EEA E103                       	smpsAlterNote       $03
00094EEC E701                       	dc.b	smpsNoAttack, $01
00094EEE E102                       	smpsAlterNote       $02
00094EF0 E701                       	dc.b	smpsNoAttack, $01
00094EF2 E106                       	smpsAlterNote       $06
00094EF4 E701                       	dc.b	smpsNoAttack, $01
00094EF6 E10C                       	smpsAlterNote       $0C
00094EF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EFC E109                       	smpsAlterNote       $09
00094EFE E701                       	dc.b	smpsNoAttack, $01
00094F00 E103                       	smpsAlterNote       $03
00094F02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F06 E109                       	smpsAlterNote       $09
00094F08 E701                       	dc.b	smpsNoAttack, $01
00094F0A E10C                       	smpsAlterNote       $0C
00094F0C E701                       	dc.b	smpsNoAttack, $01
00094F0E E10D                       	smpsAlterNote       $0D
00094F10 8001                       	dc.b	nRst, $01
00094F12 E109                       	smpsAlterNote       $09
00094F14 B80D                       	dc.b	nG4, $0D
00094F16 E103                       	smpsAlterNote       $03
00094F18 E701                       	dc.b	smpsNoAttack, $01
00094F1A E102                       	smpsAlterNote       $02
00094F1C E701                       	dc.b	smpsNoAttack, $01
00094F1E E106                       	smpsAlterNote       $06
00094F20 E701                       	dc.b	smpsNoAttack, $01
00094F22 E10C                       	smpsAlterNote       $0C
00094F24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F28 E109                       	smpsAlterNote       $09
00094F2A E701                       	dc.b	smpsNoAttack, $01
00094F2C E103                       	smpsAlterNote       $03
00094F2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F32 E109                       	smpsAlterNote       $09
00094F34 E701                       	dc.b	smpsNoAttack, $01
00094F36 E10C                       	smpsAlterNote       $0C
00094F38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F3C E106                       	smpsAlterNote       $06
00094F3E E701                       	dc.b	smpsNoAttack, $01
00094F40 E102                       	smpsAlterNote       $02
00094F42 E701                       	dc.b	smpsNoAttack, $01
00094F44 E103                       	smpsAlterNote       $03
00094F46 E701                       	dc.b	smpsNoAttack, $01
00094F48 E109                       	smpsAlterNote       $09
00094F4A E701                       	dc.b	smpsNoAttack, $01
00094F4C E10D                       	smpsAlterNote       $0D
00094F4E E701                       	dc.b	smpsNoAttack, $01
00094F50 E109                       	smpsAlterNote       $09
00094F52 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094F56 E10B                       	smpsAlterNote       $0B
00094F58 BA0D                       	dc.b	nA4, $0D
00094F5A E105                       	smpsAlterNote       $05
00094F5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F60 E108                       	smpsAlterNote       $08
00094F62 E701                       	dc.b	smpsNoAttack, $01
00094F64 E10E                       	smpsAlterNote       $0E
00094F66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F6A E108                       	smpsAlterNote       $08
00094F6C E701                       	dc.b	smpsNoAttack, $01
00094F6E E104                       	smpsAlterNote       $04
00094F70 E701                       	dc.b	smpsNoAttack, $01
00094F72 E105                       	smpsAlterNote       $05
00094F74 E701                       	dc.b	smpsNoAttack, $01
00094F76 E10B                       	smpsAlterNote       $0B
00094F78 E701                       	dc.b	smpsNoAttack, $01
00094F7A E10F                       	smpsAlterNote       $0F
00094F7C E701                       	dc.b	smpsNoAttack, $01
00094F7E E10B                       	smpsAlterNote       $0B
00094F80 E701                       	dc.b	smpsNoAttack, $01
00094F82 E108                       	smpsAlterNote       $08
00094F84 E701                       	dc.b	smpsNoAttack, $01
00094F86 E104                       	smpsAlterNote       $04
00094F88 E701                       	dc.b	smpsNoAttack, $01
00094F8A E108                       	smpsAlterNote       $08
00094F8C E701                       	dc.b	smpsNoAttack, $01
00094F8E E10E                       	smpsAlterNote       $0E
00094F90 E701                       	dc.b	smpsNoAttack, $01
00094F92 E10F                       	smpsAlterNote       $0F
00094F94 E701                       	dc.b	smpsNoAttack, $01
00094F96 E10B                       	smpsAlterNote       $0B
00094F98 E701                       	dc.b	smpsNoAttack, $01
00094F9A E105                       	smpsAlterNote       $05
00094F9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FA0 E108                       	smpsAlterNote       $08
00094FA2 E701                       	dc.b	smpsNoAttack, $01
00094FA4 E10E                       	smpsAlterNote       $0E
00094FA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FAA E108                       	smpsAlterNote       $08
00094FAC E701                       	dc.b	smpsNoAttack, $01
00094FAE E105                       	smpsAlterNote       $05
00094FB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FB4 E10B                       	smpsAlterNote       $0B
00094FB6 E701                       	dc.b	smpsNoAttack, $01
00094FB8 E10F                       	smpsAlterNote       $0F
00094FBA E701                       	dc.b	smpsNoAttack, $01
00094FBC E10E                       	smpsAlterNote       $0E
00094FBE E701                       	dc.b	smpsNoAttack, $01
00094FC0 E108                       	smpsAlterNote       $08
00094FC2 E701                       	dc.b	smpsNoAttack, $01
00094FC4 E104                       	smpsAlterNote       $04
00094FC6 E701                       	dc.b	smpsNoAttack, $01
00094FC8 E105                       	smpsAlterNote       $05
00094FCA 8001                       	dc.b	nRst, $01
00094FCC E108                       	smpsAlterNote       $08
00094FCE B50A                       	dc.b	nE4, $0A
00094FD0 E109                       	smpsAlterNote       $09
00094FD2 B60D                       	dc.b	nF4, $0D
00094FD4 E106                       	smpsAlterNote       $06
00094FD6 E701                       	dc.b	smpsNoAttack, $01
00094FD8 E103                       	smpsAlterNote       $03
00094FDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FDE E109                       	smpsAlterNote       $09
00094FE0 E701                       	dc.b	smpsNoAttack, $01
00094FE2 E10D                       	smpsAlterNote       $0D
00094FE4 E701                       	dc.b	smpsNoAttack, $01
00094FE6 E10C                       	smpsAlterNote       $0C
00094FE8 E701                       	dc.b	smpsNoAttack, $01
00094FEA E106                       	smpsAlterNote       $06
00094FEC E701                       	dc.b	smpsNoAttack, $01
00094FEE E102                       	smpsAlterNote       $02
00094FF0 E701                       	dc.b	smpsNoAttack, $01
00094FF2 E106                       	smpsAlterNote       $06
00094FF4 E701                       	dc.b	smpsNoAttack, $01
00094FF6 E109                       	smpsAlterNote       $09
00094FF8 E701                       	dc.b	smpsNoAttack, $01
00094FFA E10D                       	smpsAlterNote       $0D
00094FFC E701                       	dc.b	smpsNoAttack, $01
00094FFE E109                       	smpsAlterNote       $09
00095000 B80D                       	dc.b	nG4, $0D
00095002 E106                       	smpsAlterNote       $06
00095004 E701                       	dc.b	smpsNoAttack, $01
00095006 E103                       	smpsAlterNote       $03
00095008 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009500C E109                       	smpsAlterNote       $09
0009500E E701                       	dc.b	smpsNoAttack, $01
00095010 E10D                       	smpsAlterNote       $0D
00095012 E701                       	dc.b	smpsNoAttack, $01
00095014 E10C                       	smpsAlterNote       $0C
00095016 E701                       	dc.b	smpsNoAttack, $01
00095018 E106                       	smpsAlterNote       $06
0009501A E701                       	dc.b	smpsNoAttack, $01
0009501C E102                       	smpsAlterNote       $02
0009501E E701                       	dc.b	smpsNoAttack, $01
00095020 E106                       	smpsAlterNote       $06
00095022 E701                       	dc.b	smpsNoAttack, $01
00095024 E109                       	smpsAlterNote       $09
00095026 E701                       	dc.b	smpsNoAttack, $01
00095028 E10D                       	smpsAlterNote       $0D
0009502A E701                       	dc.b	smpsNoAttack, $01
0009502C E109                       	smpsAlterNote       $09
0009502E E701                       	dc.b	smpsNoAttack, $01
00095030 E103                       	smpsAlterNote       $03
00095032 E701                       	dc.b	smpsNoAttack, $01
00095034 E102                       	smpsAlterNote       $02
00095036 E701                       	dc.b	smpsNoAttack, $01
00095038 E106                       	smpsAlterNote       $06
0009503A E701                       	dc.b	smpsNoAttack, $01
0009503C E10C                       	smpsAlterNote       $0C
0009503E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095042 E109                       	smpsAlterNote       $09
00095044 E701                       	dc.b	smpsNoAttack, $01
00095046 E10B                       	smpsAlterNote       $0B
00095048 BA0D                       	dc.b	nA4, $0D
0009504A E108                       	smpsAlterNote       $08
0009504C E701                       	dc.b	smpsNoAttack, $01
0009504E E104                       	smpsAlterNote       $04
00095050 E701                       	dc.b	smpsNoAttack, $01
00095052 E108                       	smpsAlterNote       $08
00095054 E701                       	dc.b	smpsNoAttack, $01
00095056 E10B                       	smpsAlterNote       $0B
00095058 E701                       	dc.b	smpsNoAttack, $01
0009505A E10F                       	smpsAlterNote       $0F
0009505C E701                       	dc.b	smpsNoAttack, $01
0009505E E10B                       	smpsAlterNote       $0B
00095060 E701                       	dc.b	smpsNoAttack, $01
00095062 E105                       	smpsAlterNote       $05
00095064 E701                       	dc.b	smpsNoAttack, $01
00095066 E104                       	smpsAlterNote       $04
00095068 E701                       	dc.b	smpsNoAttack, $01
0009506A E108                       	smpsAlterNote       $08
0009506C E701                       	dc.b	smpsNoAttack, $01
0009506E E10E                       	smpsAlterNote       $0E
00095070 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095074 E10B                       	smpsAlterNote       $0B
00095076 E701                       	dc.b	smpsNoAttack, $01
00095078 E105                       	smpsAlterNote       $05
0009507A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009507E E10B                       	smpsAlterNote       $0B
00095080 E701                       	dc.b	smpsNoAttack, $01
00095082 E10E                       	smpsAlterNote       $0E
00095084 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095088 E108                       	smpsAlterNote       $08
0009508A E701                       	dc.b	smpsNoAttack, $01
0009508C E104                       	smpsAlterNote       $04
0009508E E701                       	dc.b	smpsNoAttack, $01
00095090 E105                       	smpsAlterNote       $05
00095092 E701                       	dc.b	smpsNoAttack, $01
00095094 E10B                       	smpsAlterNote       $0B
00095096 E701                       	dc.b	smpsNoAttack, $01
00095098 E10F                       	smpsAlterNote       $0F
0009509A E701                       	dc.b	smpsNoAttack, $01
0009509C E10B                       	smpsAlterNote       $0B
0009509E E701                       	dc.b	smpsNoAttack, $01
000950A0 E108                       	smpsAlterNote       $08
000950A2 E701                       	dc.b	smpsNoAttack, $01
000950A4 E105                       	smpsAlterNote       $05
000950A6 8001                       	dc.b	nRst, $01
000950A8 E109                       	smpsAlterNote       $09
000950AA B609 8001                  	dc.b	nF4, $09, nRst, $01
000950AE E108                       	smpsAlterNote       $08
000950B0 B506 8001                  	dc.b	nE4, $06, nRst, $01
000950B4 E107                       	smpsAlterNote       $07
000950B6 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000950BA E108                       	smpsAlterNote       $08
000950BC B502 8001                  	dc.b	nE4, $02, nRst, $01
000950C0 E109                       	smpsAlterNote       $09
000950C2 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000950C8 E10B                       	smpsAlterNote       $0B
000950CA BA0D                       	dc.b	nA4, $0D
000950CC E108                       	smpsAlterNote       $08
000950CE E701                       	dc.b	smpsNoAttack, $01
000950D0 E104                       	smpsAlterNote       $04
000950D2 E701                       	dc.b	smpsNoAttack, $01
000950D4 E108                       	smpsAlterNote       $08
000950D6 E701                       	dc.b	smpsNoAttack, $01
000950D8 E10E                       	smpsAlterNote       $0E
000950DA E701                       	dc.b	smpsNoAttack, $01
000950DC E10F                       	smpsAlterNote       $0F
000950DE E701                       	dc.b	smpsNoAttack, $01
000950E0 E10B                       	smpsAlterNote       $0B
000950E2 E701                       	dc.b	smpsNoAttack, $01
000950E4 E105                       	smpsAlterNote       $05
000950E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950EA E108                       	smpsAlterNote       $08
000950EC E701                       	dc.b	smpsNoAttack, $01
000950EE E10E                       	smpsAlterNote       $0E
000950F0 E701                       	dc.b	smpsNoAttack, $01
000950F2 E10F                       	smpsAlterNote       $0F
000950F4 8001                       	dc.b	nRst, $01
000950F6 E109                       	smpsAlterNote       $09
000950F8 C20D                       	dc.b	nF5, $0D
000950FA E103                       	smpsAlterNote       $03
000950FC E701                       	dc.b	smpsNoAttack, $01
000950FE E102                       	smpsAlterNote       $02
00095100 E701                       	dc.b	smpsNoAttack, $01
00095102 E106                       	smpsAlterNote       $06
00095104 E701                       	dc.b	smpsNoAttack, $01
00095106 E10C                       	smpsAlterNote       $0C
00095108 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009510C E109                       	smpsAlterNote       $09
0009510E E701                       	dc.b	smpsNoAttack, $01
00095110 E103                       	smpsAlterNote       $03
00095112 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095116 E109                       	smpsAlterNote       $09
00095118 E701                       	dc.b	smpsNoAttack, $01
0009511A E10C                       	smpsAlterNote       $0C
0009511C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095120 E106                       	smpsAlterNote       $06
00095122 E701                       	dc.b	smpsNoAttack, $01
00095124 E102                       	smpsAlterNote       $02
00095126 E701                       	dc.b	smpsNoAttack, $01
00095128 E103                       	smpsAlterNote       $03
0009512A E701                       	dc.b	smpsNoAttack, $01
0009512C E109                       	smpsAlterNote       $09
0009512E E701                       	dc.b	smpsNoAttack, $01
00095130 E10D                       	smpsAlterNote       $0D
00095132 E701                       	dc.b	smpsNoAttack, $01
00095134 E109                       	smpsAlterNote       $09
00095136 E701                       	dc.b	smpsNoAttack, $01
00095138 E106                       	smpsAlterNote       $06
0009513A E701                       	dc.b	smpsNoAttack, $01
0009513C E102                       	smpsAlterNote       $02
0009513E E701                       	dc.b	smpsNoAttack, $01
00095140 E106                       	smpsAlterNote       $06
00095142 E701                       	dc.b	smpsNoAttack, $01
00095144 E10C                       	smpsAlterNote       $0C
00095146 E701                       	dc.b	smpsNoAttack, $01
00095148 E10D                       	smpsAlterNote       $0D
0009514A E701                       	dc.b	smpsNoAttack, $01
0009514C E109                       	smpsAlterNote       $09
0009514E E701                       	dc.b	smpsNoAttack, $01
00095150 E103                       	smpsAlterNote       $03
00095152 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095156 E106                       	smpsAlterNote       $06
00095158 E701                       	dc.b	smpsNoAttack, $01
0009515A E10C                       	smpsAlterNote       $0C
0009515C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095160 E106                       	smpsAlterNote       $06
00095162 E701                       	dc.b	smpsNoAttack, $01
00095164 E103                       	smpsAlterNote       $03
00095166 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009516A E109                       	smpsAlterNote       $09
0009516C E701                       	dc.b	smpsNoAttack, $01
0009516E E10D                       	smpsAlterNote       $0D
00095170 E701                       	dc.b	smpsNoAttack, $01
00095172 E10C                       	smpsAlterNote       $0C
00095174 E701                       	dc.b	smpsNoAttack, $01
00095176 E106                       	smpsAlterNote       $06
00095178 E701                       	dc.b	smpsNoAttack, $01
0009517A E102                       	smpsAlterNote       $02
0009517C E701                       	dc.b	smpsNoAttack, $01
0009517E E106                       	smpsAlterNote       $06
00095180 E701                       	dc.b	smpsNoAttack, $01
00095182 E109                       	smpsAlterNote       $09
00095184 E701                       	dc.b	smpsNoAttack, $01
00095186 E10D                       	smpsAlterNote       $0D
00095188 E701                       	dc.b	smpsNoAttack, $01
0009518A E109                       	smpsAlterNote       $09
0009518C E701                       	dc.b	smpsNoAttack, $01
0009518E E103                       	smpsAlterNote       $03
00095190 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095194 E109                       	smpsAlterNote       $09
00095196 C206                       	dc.b	nF5, $06
00095198 E108                       	smpsAlterNote       $08
0009519A C10E                       	dc.b	nE5, $0E
0009519C E102                       	smpsAlterNote       $02
0009519E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951A2 E108                       	smpsAlterNote       $08
000951A4 E701                       	dc.b	smpsNoAttack, $01
000951A6 E10B                       	smpsAlterNote       $0B
000951A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951AC E105                       	smpsAlterNote       $05
000951AE E701                       	dc.b	smpsNoAttack, $01
000951B0 E101                       	smpsAlterNote       $01
000951B2 E701                       	dc.b	smpsNoAttack, $01
000951B4 E102                       	smpsAlterNote       $02
000951B6 E701                       	dc.b	smpsNoAttack, $01
000951B8 E108                       	smpsAlterNote       $08
000951BA E701                       	dc.b	smpsNoAttack, $01
000951BC E10C                       	smpsAlterNote       $0C
000951BE E701                       	dc.b	smpsNoAttack, $01
000951C0 E107                       	smpsAlterNote       $07
000951C2 BF0E                       	dc.b	nD5, $0E
000951C4 E101                       	smpsAlterNote       $01
000951C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951CA E107                       	smpsAlterNote       $07
000951CC E701                       	dc.b	smpsNoAttack, $01
000951CE E10A                       	smpsAlterNote       $0A
000951D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951D4 E104                       	smpsAlterNote       $04
000951D6 E701                       	dc.b	smpsNoAttack, $01
000951D8 E100                       	smpsAlterNote       $00
000951DA E701                       	dc.b	smpsNoAttack, $01
000951DC E104                       	smpsAlterNote       $04
000951DE E701                       	dc.b	smpsNoAttack, $01
000951E0 E107                       	smpsAlterNote       $07
000951E2 E701                       	dc.b	smpsNoAttack, $01
000951E4 E10B                       	smpsAlterNote       $0B
000951E6 E701                       	dc.b	smpsNoAttack, $01
000951E8 E107                       	smpsAlterNote       $07
000951EA E701                       	dc.b	smpsNoAttack, $01
000951EC E101                       	smpsAlterNote       $01
000951EE E701                       	dc.b	smpsNoAttack, $01
000951F0 E100                       	smpsAlterNote       $00
000951F2 E701                       	dc.b	smpsNoAttack, $01
000951F4 E104                       	smpsAlterNote       $04
000951F6 E701                       	dc.b	smpsNoAttack, $01
000951F8 E10A                       	smpsAlterNote       $0A
000951FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951FE E107                       	smpsAlterNote       $07
00095200 E701                       	dc.b	smpsNoAttack, $01
00095202 E101                       	smpsAlterNote       $01
00095204 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095208 E107                       	smpsAlterNote       $07
0009520A E701                       	dc.b	smpsNoAttack, $01
0009520C E10A                       	smpsAlterNote       $0A
0009520E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095212 E104                       	smpsAlterNote       $04
00095214 E701                       	dc.b	smpsNoAttack, $01
00095216 E100                       	smpsAlterNote       $00
00095218 E701                       	dc.b	smpsNoAttack, $01
0009521A E101                       	smpsAlterNote       $01
0009521C E701                       	dc.b	smpsNoAttack, $01
0009521E E107                       	smpsAlterNote       $07
00095220 E701                       	dc.b	smpsNoAttack, $01
00095222 E10B                       	smpsAlterNote       $0B
00095224 E701                       	dc.b	smpsNoAttack, $01
00095226 E107                       	smpsAlterNote       $07
00095228 E701                       	dc.b	smpsNoAttack, $01
0009522A E104                       	smpsAlterNote       $04
0009522C E701                       	dc.b	smpsNoAttack, $01
0009522E E100                       	smpsAlterNote       $00
00095230 E701                       	dc.b	smpsNoAttack, $01
00095232 E104                       	smpsAlterNote       $04
00095234 E701                       	dc.b	smpsNoAttack, $01
00095236 E10A                       	smpsAlterNote       $0A
00095238 E701                       	dc.b	smpsNoAttack, $01
0009523A E10B                       	smpsAlterNote       $0B
0009523C E701                       	dc.b	smpsNoAttack, $01
0009523E E107                       	smpsAlterNote       $07
00095240 E701                       	dc.b	smpsNoAttack, $01
00095242 E101                       	smpsAlterNote       $01
00095244 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095248 E104                       	smpsAlterNote       $04
0009524A E701                       	dc.b	smpsNoAttack, $01
0009524C E10A                       	smpsAlterNote       $0A
0009524E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095252 E104                       	smpsAlterNote       $04
00095254 E701                       	dc.b	smpsNoAttack, $01
00095256 E101                       	smpsAlterNote       $01
00095258 E701                       	dc.b	smpsNoAttack, $01
0009525C E107                       	smpsAlterNote       $07
0009525E E6FF                       	smpsAlterVol        $FF
00095260 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0009526C 8004                       	dc.b	nRst, $04
00095270 E109                       	smpsAlterNote       $09
00095272 E602                       	smpsAlterVol        $02
00095274 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0009527A E108                       	smpsAlterNote       $08
0009527C B502 8001                  	dc.b	nE4, $02, nRst, $01
00095280 E109                       	smpsAlterNote       $09
00095282 B60D                       	dc.b	nF4, $0D
00095284 E106                       	smpsAlterNote       $06
00095286 E701                       	dc.b	smpsNoAttack, $01
00095288 E102                       	smpsAlterNote       $02
0009528A E701                       	dc.b	smpsNoAttack, $01
0009528C E106                       	smpsAlterNote       $06
0009528E E701                       	dc.b	smpsNoAttack, $01
00095290 E109                       	smpsAlterNote       $09
00095292 E701                       	dc.b	smpsNoAttack, $01
00095294 E10D                       	smpsAlterNote       $0D
00095296 E701                       	dc.b	smpsNoAttack, $01
00095298 E109                       	smpsAlterNote       $09
0009529A E701                       	dc.b	smpsNoAttack, $01
0009529C E103                       	smpsAlterNote       $03
0009529E E701                       	dc.b	smpsNoAttack, $01
000952A0 E102                       	smpsAlterNote       $02
000952A2 E701                       	dc.b	smpsNoAttack, $01
000952A4 E106                       	smpsAlterNote       $06
000952A6 E701                       	dc.b	smpsNoAttack, $01
000952A8 E10C                       	smpsAlterNote       $0C
000952AA E701                       	dc.b	smpsNoAttack, $01
000952AC E10D                       	smpsAlterNote       $0D
000952AE 8001                       	dc.b	nRst, $01
000952B0 E109                       	smpsAlterNote       $09
000952B2 B80D                       	dc.b	nG4, $0D
000952B4 E106                       	smpsAlterNote       $06
000952B6 E701                       	dc.b	smpsNoAttack, $01
000952B8 E102                       	smpsAlterNote       $02
000952BA E701                       	dc.b	smpsNoAttack, $01
000952BC E106                       	smpsAlterNote       $06
000952BE E701                       	dc.b	smpsNoAttack, $01
000952C0 E10C                       	smpsAlterNote       $0C
000952C2 E701                       	dc.b	smpsNoAttack, $01
000952C4 E10D                       	smpsAlterNote       $0D
000952C6 E701                       	dc.b	smpsNoAttack, $01
000952C8 E109                       	smpsAlterNote       $09
000952CA E701                       	dc.b	smpsNoAttack, $01
000952CC E103                       	smpsAlterNote       $03
000952CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952D2 E106                       	smpsAlterNote       $06
000952D4 E701                       	dc.b	smpsNoAttack, $01
000952D6 E10C                       	smpsAlterNote       $0C
000952D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952DC E106                       	smpsAlterNote       $06
000952DE E701                       	dc.b	smpsNoAttack, $01
000952E0 E103                       	smpsAlterNote       $03
000952E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952E6 E109                       	smpsAlterNote       $09
000952E8 E701                       	dc.b	smpsNoAttack, $01
000952EA E10D                       	smpsAlterNote       $0D
000952EC E701                       	dc.b	smpsNoAttack, $01
000952EE E10C                       	smpsAlterNote       $0C
000952F0 E701                       	dc.b	smpsNoAttack, $01
000952F2 E109                       	smpsAlterNote       $09
000952F4 8001                       	dc.b	nRst, $01
000952F6 E10B                       	smpsAlterNote       $0B
000952F8 BA03                       	dc.b	nA4, $03
000952FA E10C                       	smpsAlterNote       $0C
000952FC BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00095300 E10B                       	smpsAlterNote       $0B
00095302 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00095308 E10C                       	smpsAlterNote       $0C
0009530A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009530E E10B                       	smpsAlterNote       $0B
00095310 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00095316 E10C                       	smpsAlterNote       $0C
00095318 D303                       	dc.b	nBb6, $03
0009531A E10B                       	smpsAlterNote       $0B
0009531C D20D                       	dc.b	nA6, $0D
0009531E E108                       	smpsAlterNote       $08
00095320 E701                       	dc.b	smpsNoAttack, $01
00095322 E104                       	smpsAlterNote       $04
00095324 E701                       	dc.b	smpsNoAttack, $01
00095326 E105                       	smpsAlterNote       $05
00095328 E701                       	dc.b	smpsNoAttack, $01
0009532A E10B                       	smpsAlterNote       $0B
0009532C E701                       	dc.b	smpsNoAttack, $01
0009532E E10F                       	smpsAlterNote       $0F
00095330 E701                       	dc.b	smpsNoAttack, $01
00095332 E10B                       	smpsAlterNote       $0B
00095334 E701                       	dc.b	smpsNoAttack, $01
00095336 E108                       	smpsAlterNote       $08
00095338 E701                       	dc.b	smpsNoAttack, $01
0009533A E104                       	smpsAlterNote       $04
0009533C E701                       	dc.b	smpsNoAttack, $01
0009533E E108                       	smpsAlterNote       $08
00095340 E701                       	dc.b	smpsNoAttack, $01
00095342 E10E                       	smpsAlterNote       $0E
00095344 E701                       	dc.b	smpsNoAttack, $01
00095346 E10F                       	smpsAlterNote       $0F
00095348 E701                       	dc.b	smpsNoAttack, $01
0009534A E10B                       	smpsAlterNote       $0B
0009534C E701                       	dc.b	smpsNoAttack, $01
0009534E E105                       	smpsAlterNote       $05
00095350 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00095356 E109                       	smpsAlterNote       $09
00095358 CE07                       	dc.b	nF6, $07
0009535A E108                       	smpsAlterNote       $08
0009535C CD06 8001                  	dc.b	nE6, $06, nRst, $01
00095360 E109                       	smpsAlterNote       $09
00095362 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00095366 E108                       	smpsAlterNote       $08
00095368 CC0D                       	dc.b	nEb6, $0D
0009536A E102                       	smpsAlterNote       $02
0009536C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095370 E108                       	smpsAlterNote       $08
00095372 E701                       	dc.b	smpsNoAttack, $01
00095374 E10B                       	smpsAlterNote       $0B
00095376 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009537A E105                       	smpsAlterNote       $05
0009537C E701                       	dc.b	smpsNoAttack, $01
0009537E E101                       	smpsAlterNote       $01
00095380 E701                       	dc.b	smpsNoAttack, $01
00095382 E102                       	smpsAlterNote       $02
00095384 E701                       	dc.b	smpsNoAttack, $01
00095386 E108                       	smpsAlterNote       $08
00095388 E701                       	dc.b	smpsNoAttack, $01
0009538A E10C                       	smpsAlterNote       $0C
0009538C E701                       	dc.b	smpsNoAttack, $01
0009538E E108                       	smpsAlterNote       $08
00095390 E701                       	dc.b	smpsNoAttack, $01
00095392 E105                       	smpsAlterNote       $05
00095394 E701                       	dc.b	smpsNoAttack, $01
00095396 E101                       	smpsAlterNote       $01
00095398 E701                       	dc.b	smpsNoAttack, $01
0009539A E105                       	smpsAlterNote       $05
0009539C E701                       	dc.b	smpsNoAttack, $01
0009539E E10B                       	smpsAlterNote       $0B
000953A0 E701                       	dc.b	smpsNoAttack, $01
000953A2 E10C                       	smpsAlterNote       $0C
000953A4 E701                       	dc.b	smpsNoAttack, $01
000953A6 E108                       	smpsAlterNote       $08
000953A8 E701                       	dc.b	smpsNoAttack, $01
000953AA E107                       	smpsAlterNote       $07
000953AC CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000953B6 E10B                       	smpsAlterNote       $0B
000953B8 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000953C2 E109                       	smpsAlterNote       $09
000953C4 C203                       	dc.b	nF5, $03
000953C6 E108                       	smpsAlterNote       $08
000953C8 C103 8001                  	dc.b	nE5, $03, nRst, $01
000953CC E109                       	smpsAlterNote       $09
000953CE C20D                       	dc.b	nF5, $0D
000953D0 E108                       	smpsAlterNote       $08
000953D2 C10E                       	dc.b	nE5, $0E
000953D4 E107                       	smpsAlterNote       $07
000953D6 BF0D                       	dc.b	nD5, $0D
000953D8 E104                       	smpsAlterNote       $04
000953DA E701                       	dc.b	smpsNoAttack, $01
000953DC E100                       	smpsAlterNote       $00
000953DE E701                       	dc.b	smpsNoAttack, $01
000953E0 E104                       	smpsAlterNote       $04
000953E2 E701                       	dc.b	smpsNoAttack, $01
000953E4 E107                       	smpsAlterNote       $07
000953E6 E701                       	dc.b	smpsNoAttack, $01
000953E8 E10B                       	smpsAlterNote       $0B
000953EA E701                       	dc.b	smpsNoAttack, $01
000953EC E107                       	smpsAlterNote       $07
000953EE E701                       	dc.b	smpsNoAttack, $01
000953F0 E101                       	smpsAlterNote       $01
000953F2 E701                       	dc.b	smpsNoAttack, $01
000953F4 E100                       	smpsAlterNote       $00
000953F6 E701                       	dc.b	smpsNoAttack, $01
000953F8 E104                       	smpsAlterNote       $04
000953FA E701                       	dc.b	smpsNoAttack, $01
000953FC E10A                       	smpsAlterNote       $0A
000953FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095402 E107                       	smpsAlterNote       $07
00095404 E701                       	dc.b	smpsNoAttack, $01
00095406 E101                       	smpsAlterNote       $01
00095408 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009540C E107                       	smpsAlterNote       $07
0009540E E701                       	dc.b	smpsNoAttack, $01
00095410 E10A                       	smpsAlterNote       $0A
00095412 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095416 E104                       	smpsAlterNote       $04
00095418 E701                       	dc.b	smpsNoAttack, $01
0009541A E100                       	smpsAlterNote       $00
0009541C E701                       	dc.b	smpsNoAttack, $01
0009541E E101                       	smpsAlterNote       $01
00095420 E701                       	dc.b	smpsNoAttack, $01
00095422 E107                       	smpsAlterNote       $07
00095424 E701                       	dc.b	smpsNoAttack, $01
00095426 E10B                       	smpsAlterNote       $0B
00095428 E701                       	dc.b	smpsNoAttack, $01
0009542A E107                       	smpsAlterNote       $07
0009542C E701                       	dc.b	smpsNoAttack, $01
0009542E E104                       	smpsAlterNote       $04
00095430 E701                       	dc.b	smpsNoAttack, $01
00095432 E100                       	smpsAlterNote       $00
00095434 E701                       	dc.b	smpsNoAttack, $01
00095436 E104                       	smpsAlterNote       $04
00095438 E701                       	dc.b	smpsNoAttack, $01
0009543A E10A                       	smpsAlterNote       $0A
0009543C E701                       	dc.b	smpsNoAttack, $01
0009543E E10B                       	smpsAlterNote       $0B
00095440 E701                       	dc.b	smpsNoAttack, $01
00095442 E107                       	smpsAlterNote       $07
00095444 E701                       	dc.b	smpsNoAttack, $01
00095446 E101                       	smpsAlterNote       $01
00095448 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009544C E104                       	smpsAlterNote       $04
0009544E E701                       	dc.b	smpsNoAttack, $01
00095450 E10A                       	smpsAlterNote       $0A
00095452 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095456 E104                       	smpsAlterNote       $04
00095458 E701                       	dc.b	smpsNoAttack, $01
0009545A E101                       	smpsAlterNote       $01
0009545C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095460 E107                       	smpsAlterNote       $07
00095462 E701                       	dc.b	smpsNoAttack, $01
00095464 E10B                       	smpsAlterNote       $0B
00095466 E701                       	dc.b	smpsNoAttack, $01
00095468 E10A                       	smpsAlterNote       $0A
0009546A E701                       	dc.b	smpsNoAttack, $01
0009546C E104                       	smpsAlterNote       $04
0009546E E701                       	dc.b	smpsNoAttack, $01
00095470 E100                       	smpsAlterNote       $00
00095472 E701                       	dc.b	smpsNoAttack, $01
00095474 E104                       	smpsAlterNote       $04
00095476 E701                       	dc.b	smpsNoAttack, $01
00095478 E107                       	smpsAlterNote       $07
0009547A E701                       	dc.b	smpsNoAttack, $01
0009547C E10B                       	smpsAlterNote       $0B
0009547E E701                       	dc.b	smpsNoAttack, $01
00095480 E107                       	smpsAlterNote       $07
00095482 E701                       	dc.b	smpsNoAttack, $01
00095484 E101                       	smpsAlterNote       $01
00095486 E701                       	dc.b	smpsNoAttack, $01
00095488 E100                       	smpsAlterNote       $00
0009548A E701                       	dc.b	smpsNoAttack, $01
0009548C E104                       	smpsAlterNote       $04
0009548E E701                       	dc.b	smpsNoAttack, $01
00095490 E10A                       	smpsAlterNote       $0A
00095492 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095496 E107                       	smpsAlterNote       $07
00095498 E701                       	dc.b	smpsNoAttack, $01
0009549A E101                       	smpsAlterNote       $01
0009549C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954A0 E107                       	smpsAlterNote       $07
000954A2 E701                       	dc.b	smpsNoAttack, $01
000954A4 E10A                       	smpsAlterNote       $0A
000954A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954AA E104                       	smpsAlterNote       $04
000954AC E701                       	dc.b	smpsNoAttack, $01
000954AE E100                       	smpsAlterNote       $00
000954B0 E701                       	dc.b	smpsNoAttack, $01
000954B2 E101                       	smpsAlterNote       $01
000954B4 E701                       	dc.b	smpsNoAttack, $01
000954B6 E107                       	smpsAlterNote       $07
000954B8 E701                       	dc.b	smpsNoAttack, $01
000954BA E10B                       	smpsAlterNote       $0B
000954BC E701                       	dc.b	smpsNoAttack, $01
000954BE E107                       	smpsAlterNote       $07
000954C0 E701                       	dc.b	smpsNoAttack, $01
000954C2 E104                       	smpsAlterNote       $04
000954C4 E701                       	dc.b	smpsNoAttack, $01
000954C6 E100                       	smpsAlterNote       $00
000954C8 E701                       	dc.b	smpsNoAttack, $01
000954CA E101                       	smpsAlterNote       $01
000954CC 8001                       	dc.b	nRst, $01
000954CE E109                       	smpsAlterNote       $09
000954D0 C20D                       	dc.b	nF5, $0D
000954D2 E106                       	smpsAlterNote       $06
000954D4 E701                       	dc.b	smpsNoAttack, $01
000954D6 E102                       	smpsAlterNote       $02
000954D8 E701                       	dc.b	smpsNoAttack, $01
000954DA E106                       	smpsAlterNote       $06
000954DC E701                       	dc.b	smpsNoAttack, $01
000954DE E10C                       	smpsAlterNote       $0C
000954E0 E701                       	dc.b	smpsNoAttack, $01
000954E2 E10D                       	smpsAlterNote       $0D
000954E4 E701                       	dc.b	smpsNoAttack, $01
000954E6 E109                       	smpsAlterNote       $09
000954E8 E701                       	dc.b	smpsNoAttack, $01
000954EA E103                       	smpsAlterNote       $03
000954EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954F0 E106                       	smpsAlterNote       $06
000954F2 E701                       	dc.b	smpsNoAttack, $01
000954F4 E10C                       	smpsAlterNote       $0C
000954F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954FA E106                       	smpsAlterNote       $06
000954FC E701                       	dc.b	smpsNoAttack, $01
000954FE E103                       	smpsAlterNote       $03
00095500 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095504 E109                       	smpsAlterNote       $09
00095506 E701                       	dc.b	smpsNoAttack, $01
00095508 E10D                       	smpsAlterNote       $0D
0009550A E701                       	dc.b	smpsNoAttack, $01
0009550C E10C                       	smpsAlterNote       $0C
0009550E E701                       	dc.b	smpsNoAttack, $01
00095510 E109                       	smpsAlterNote       $09
00095512 8001                       	dc.b	nRst, $01
00095514 E108                       	smpsAlterNote       $08
00095516 C10D                       	dc.b	nE5, $0D
00095518 E109                       	smpsAlterNote       $09
0009551A C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0009551E E108                       	smpsAlterNote       $08
00095520 C10D                       	dc.b	nE5, $0D
00095522 E102                       	smpsAlterNote       $02
00095524 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095528 E105                       	smpsAlterNote       $05
0009552A E701                       	dc.b	smpsNoAttack, $01
0009552C E108                       	smpsAlterNote       $08
0009552E 8001                       	dc.b	nRst, $01
00095530 E107                       	smpsAlterNote       $07
00095532 BF0D                       	dc.b	nD5, $0D
00095534 E108                       	smpsAlterNote       $08
00095536 C107                       	dc.b	nE5, $07
00095538 E109                       	smpsAlterNote       $09
0009553A C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00095540 E10B                       	smpsAlterNote       $0B
00095542 C603                       	dc.b	nA5, $03
00095544 E10C                       	smpsAlterNote       $0C
00095546 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0009554C E10B                       	smpsAlterNote       $0B
0009554E C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00095554 E109                       	smpsAlterNote       $09
00095556 D003                       	dc.b	nG6, $03
00095558 E108                       	smpsAlterNote       $08
0009555A CD02 8001                  	dc.b	nE6, $02, nRst, $01
0009555E E10B                       	smpsAlterNote       $0B
00095560 C601 8001                  	dc.b	nA5, $01, nRst, $01
00095564 E108                       	smpsAlterNote       $08
00095566 C102                       	dc.b	nE5, $02
0009556A E10C                       	smpsAlterNote       $0C
0009556C E6FB                       	smpsAlterVol        $FB
0009556E A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0009557A 8001                       	dc.b	nRst, $01
0009557C E10B                       	smpsAlterNote       $0B
0009557E A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00095586 E107                       	smpsAlterNote       $07
00095588 A706 8001                  	dc.b	nD3, $06, nRst, $01
0009558C E10B                       	smpsAlterNote       $0B
0009558E A203                       	dc.b	nA2, $03
00095590 E109                       	smpsAlterNote       $09
00095592 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00095596 E108                       	smpsAlterNote       $08
00095598 A906                       	dc.b	nE3, $06
0009559A E107                       	smpsAlterNote       $07
0009559C A703 8001                  	dc.b	nD3, $03, nRst, $01
000955A0 E106                       	smpsAlterNote       $06
000955A2 A503                       	dc.b	nC3, $03
000955A4 E10C                       	smpsAlterNote       $0C
000955A6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000955AA E10B                       	smpsAlterNote       $0B
000955AC A203 8004                  	dc.b	nA2, $03, nRst, $04
000955B0 E11B                       	smpsAlterNote       $1B
000955B2 C401                       	dc.b	nG5, $01
000955B4 E1F4                       	smpsAlterNote       $F4
000955B6 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000955B9 E106                       	smpsAlterNote       $06
000955BB E701                       	dc.b	smpsNoAttack, $01
000955BD E10F                       	smpsAlterNote       $0F
000955BF E701                       	dc.b	smpsNoAttack, $01
000955C1 E1E4                       	smpsAlterNote       $E4
000955C3 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000955C6 E1F6                       	smpsAlterNote       $F6
000955C8 E701                       	dc.b	smpsNoAttack, $01
000955CA E108                       	smpsAlterNote       $08
000955CC E701                       	dc.b	smpsNoAttack, $01
000955CE E10B                       	smpsAlterNote       $0B
000955D0 E706                       	dc.b	smpsNoAttack, $06
000955D2 E105                       	smpsAlterNote       $05
000955D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955D8 E108                       	smpsAlterNote       $08
000955DA E701                       	dc.b	smpsNoAttack, $01
000955DC E10E                       	smpsAlterNote       $0E
000955DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955E2 E108                       	smpsAlterNote       $08
000955E4 E701                       	dc.b	smpsNoAttack, $01
000955E6 E105                       	smpsAlterNote       $05
000955E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955EC E10B                       	smpsAlterNote       $0B
000955EE E701                       	dc.b	smpsNoAttack, $01
000955F0 E10F                       	smpsAlterNote       $0F
000955F2 E701                       	dc.b	smpsNoAttack, $01
000955F4 E10E                       	smpsAlterNote       $0E
000955F6 E701                       	dc.b	smpsNoAttack, $01
000955F8 E108                       	smpsAlterNote       $08
000955FA E701                       	dc.b	smpsNoAttack, $01
000955FC E104                       	smpsAlterNote       $04
000955FE E701                       	dc.b	smpsNoAttack, $01
00095600 E108                       	smpsAlterNote       $08
00095602 E701                       	dc.b	smpsNoAttack, $01
00095604 E10B                       	smpsAlterNote       $0B
00095606 E701                       	dc.b	smpsNoAttack, $01
00095608 E10F                       	smpsAlterNote       $0F
0009560A E701                       	dc.b	smpsNoAttack, $01
0009560C E10B                       	smpsAlterNote       $0B
0009560E E701                       	dc.b	smpsNoAttack, $01
00095610 E105                       	smpsAlterNote       $05
00095612 E701                       	dc.b	smpsNoAttack, $01
00095614 E104                       	smpsAlterNote       $04
00095616 E701                       	dc.b	smpsNoAttack, $01
00095618 E108                       	smpsAlterNote       $08
0009561A E701                       	dc.b	smpsNoAttack, $01
0009561C E10E                       	smpsAlterNote       $0E
0009561E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095622 E10B                       	smpsAlterNote       $0B
00095624 E701                       	dc.b	smpsNoAttack, $01
00095626 E105                       	smpsAlterNote       $05
00095628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009562C E10B                       	smpsAlterNote       $0B
0009562E E701                       	dc.b	smpsNoAttack, $01
00095630 E10E                       	smpsAlterNote       $0E
00095632 E701                       	dc.b	smpsNoAttack, $01
00095634 E10F                       	smpsAlterNote       $0F
00095636 8001                       	dc.b	nRst, $01
00095638 E109                       	smpsAlterNote       $09
0009563A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00095640 E108                       	smpsAlterNote       $08
00095642 C101 8001                  	dc.b	nE5, $01, nRst, $01
00095646 E109                       	smpsAlterNote       $09
00095648 C202                       	dc.b	nF5, $02
0009564A E108                       	smpsAlterNote       $08
0009564C C102                       	dc.b	nE5, $02
0009564E E107                       	smpsAlterNote       $07
00095650 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00095654 E108                       	smpsAlterNote       $08
00095656 C101 8001                  	dc.b	nE5, $01, nRst, $01
0009565A E107                       	smpsAlterNote       $07
0009565C BF02                       	dc.b	nD5, $02
0009565E E106                       	smpsAlterNote       $06
00095660 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00095664 E107                       	smpsAlterNote       $07
00095666 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0009566A E106                       	smpsAlterNote       $06
0009566C BD02                       	dc.b	nC5, $02
0009566E E10C                       	smpsAlterNote       $0C
00095670 BB02                       	dc.b	nBb4, $02
00095672 E106                       	smpsAlterNote       $06
00095674 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00095678 E10C                       	smpsAlterNote       $0C
0009567A BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009567E E10B                       	smpsAlterNote       $0B
00095680 BA02                       	dc.b	nA4, $02
00095682 E10C                       	smpsAlterNote       $0C
00095684 BB02                       	dc.b	nBb4, $02
00095686 E10B                       	smpsAlterNote       $0B
00095688 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00095692 E108                       	smpsAlterNote       $08
00095694 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0009569C E107                       	smpsAlterNote       $07
0009569E BE02                       	dc.b	nCs5, $02
000956A0 E10B                       	smpsAlterNote       $0B
000956A2 BA02                       	dc.b	nA4, $02
000956A4 E109                       	smpsAlterNote       $09
000956A6 B802 8001                  	dc.b	nG4, $02, nRst, $01
000956AA E108                       	smpsAlterNote       $08
000956AC B501 8001                  	dc.b	nE4, $01, nRst, $01
000956B0 E10B                       	smpsAlterNote       $0B
000956B2 AE02                       	dc.b	nA3, $02
000956B4 E10C                       	smpsAlterNote       $0C
000956B6 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000956C2 E10B                       	smpsAlterNote       $0B
000956C4 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000956CC E107                       	smpsAlterNote       $07
000956CE A706 8001                  	dc.b	nD3, $06, nRst, $01
000956D2 E10B                       	smpsAlterNote       $0B
000956D4 A203                       	dc.b	nA2, $03
000956D6 E109                       	smpsAlterNote       $09
000956D8 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000956DC E108                       	smpsAlterNote       $08
000956DE A906 8001                  	dc.b	nE3, $06, nRst, $01
000956E2 E107                       	smpsAlterNote       $07
000956E4 A702 8001                  	dc.b	nD3, $02, nRst, $01
000956E8 E106                       	smpsAlterNote       $06
000956EA A503                       	dc.b	nC3, $03
000956EC E10C                       	smpsAlterNote       $0C
000956EE A303 8001                  	dc.b	nBb2, $03, nRst, $01
000956F4 E107                       	smpsAlterNote       $07
000956F6 B20D                       	dc.b	nCs4, $0D
000956F8 E104                       	smpsAlterNote       $04
000956FA E701                       	dc.b	smpsNoAttack, $01
000956FC E100                       	smpsAlterNote       $00
000956FE E701                       	dc.b	smpsNoAttack, $01
00095700 E104                       	smpsAlterNote       $04
00095702 E701                       	dc.b	smpsNoAttack, $01
00095704 E10A                       	smpsAlterNote       $0A
00095706 E701                       	dc.b	smpsNoAttack, $01
00095708 E10B                       	smpsAlterNote       $0B
0009570A E701                       	dc.b	smpsNoAttack, $01
0009570C E107                       	smpsAlterNote       $07
0009570E E701                       	dc.b	smpsNoAttack, $01
00095710 E101                       	smpsAlterNote       $01
00095712 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095716 E104                       	smpsAlterNote       $04
00095718 E701                       	dc.b	smpsNoAttack, $01
0009571A E10A                       	smpsAlterNote       $0A
0009571C E701                       	dc.b	smpsNoAttack, $01
0009571E E10B                       	smpsAlterNote       $0B
00095720 8001                       	dc.b	nRst, $01
00095722 E107                       	smpsAlterNote       $07
00095724 B30D                       	dc.b	nD4, $0D
00095726 E104                       	smpsAlterNote       $04
00095728 E701                       	dc.b	smpsNoAttack, $01
0009572A E100                       	smpsAlterNote       $00
0009572C E701                       	dc.b	smpsNoAttack, $01
0009572E E104                       	smpsAlterNote       $04
00095730 E701                       	dc.b	smpsNoAttack, $01
00095732 E10A                       	smpsAlterNote       $0A
00095734 E701                       	dc.b	smpsNoAttack, $01
00095736 E10B                       	smpsAlterNote       $0B
00095738 E701                       	dc.b	smpsNoAttack, $01
0009573A E107                       	smpsAlterNote       $07
0009573C E701                       	dc.b	smpsNoAttack, $01
0009573E E101                       	smpsAlterNote       $01
00095740 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095744 E104                       	smpsAlterNote       $04
00095746 E701                       	dc.b	smpsNoAttack, $01
00095748 E10A                       	smpsAlterNote       $0A
0009574A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009574E E104                       	smpsAlterNote       $04
00095750 E701                       	dc.b	smpsNoAttack, $01
00095752 E101                       	smpsAlterNote       $01
00095754 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095758 E107                       	smpsAlterNote       $07
0009575A E701                       	dc.b	smpsNoAttack, $01
0009575C E10B                       	smpsAlterNote       $0B
0009575E E701                       	dc.b	smpsNoAttack, $01
00095760 E10A                       	smpsAlterNote       $0A
00095762 E701                       	dc.b	smpsNoAttack, $01
00095764 E107                       	smpsAlterNote       $07
00095766 8001                       	dc.b	nRst, $01
00095768 E108                       	smpsAlterNote       $08
0009576A B50D                       	dc.b	nE4, $0D
0009576C E102                       	smpsAlterNote       $02
0009576E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095772 E105                       	smpsAlterNote       $05
00095774 E701                       	dc.b	smpsNoAttack, $01
00095776 E10B                       	smpsAlterNote       $0B
00095778 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009577C E105                       	smpsAlterNote       $05
0009577E E701                       	dc.b	smpsNoAttack, $01
00095780 E102                       	smpsAlterNote       $02
00095782 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095786 E108                       	smpsAlterNote       $08
00095788 E701                       	dc.b	smpsNoAttack, $01
0009578A E10C                       	smpsAlterNote       $0C
0009578C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095790 E107                       	smpsAlterNote       $07
00095792 B30D                       	dc.b	nD4, $0D
00095794 E101                       	smpsAlterNote       $01
00095796 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009579A E104                       	smpsAlterNote       $04
0009579C E701                       	dc.b	smpsNoAttack, $01
0009579E E10A                       	smpsAlterNote       $0A
000957A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957A4 E104                       	smpsAlterNote       $04
000957A6 E701                       	dc.b	smpsNoAttack, $01
000957A8 E101                       	smpsAlterNote       $01
000957AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957AE E107                       	smpsAlterNote       $07
000957B0 E701                       	dc.b	smpsNoAttack, $01
000957B2 E10B                       	smpsAlterNote       $0B
000957B4 E701                       	dc.b	smpsNoAttack, $01
000957B6 E10A                       	smpsAlterNote       $0A
000957B8 E701                       	dc.b	smpsNoAttack, $01
000957BA E104                       	smpsAlterNote       $04
000957BC E701                       	dc.b	smpsNoAttack, $01
000957BE E100                       	smpsAlterNote       $00
000957C0 E701                       	dc.b	smpsNoAttack, $01
000957C2 E104                       	smpsAlterNote       $04
000957C4 E701                       	dc.b	smpsNoAttack, $01
000957C6 E107                       	smpsAlterNote       $07
000957C8 E701                       	dc.b	smpsNoAttack, $01
000957CA E10B                       	smpsAlterNote       $0B
000957CC E701                       	dc.b	smpsNoAttack, $01
000957CE E107                       	smpsAlterNote       $07
000957D0 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000957D4 E101                       	smpsAlterNote       $01
000957D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957DA E107                       	smpsAlterNote       $07
000957DC E701                       	dc.b	smpsNoAttack, $01
000957DE E10A                       	smpsAlterNote       $0A
000957E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957E4 E104                       	smpsAlterNote       $04
000957E6 E701                       	dc.b	smpsNoAttack, $01
000957E8 E100                       	smpsAlterNote       $00
000957EA E701                       	dc.b	smpsNoAttack, $01
000957EC E101                       	smpsAlterNote       $01
000957EE E701                       	dc.b	smpsNoAttack, $01
000957F0 E107                       	smpsAlterNote       $07
000957F2 E701                       	dc.b	smpsNoAttack, $01
000957F4 E10B                       	smpsAlterNote       $0B
000957F6 E701                       	dc.b	smpsNoAttack, $01
000957F8 E107                       	smpsAlterNote       $07
000957FA B30E                       	dc.b	nD4, $0E
000957FC E101                       	smpsAlterNote       $01
000957FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095802 E107                       	smpsAlterNote       $07
00095804 E701                       	dc.b	smpsNoAttack, $01
00095806 E10A                       	smpsAlterNote       $0A
00095808 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009580C E104                       	smpsAlterNote       $04
0009580E E701                       	dc.b	smpsNoAttack, $01
00095810 E100                       	smpsAlterNote       $00
00095812 E701                       	dc.b	smpsNoAttack, $01
00095814 E101                       	smpsAlterNote       $01
00095816 E701                       	dc.b	smpsNoAttack, $01
00095818 E107                       	smpsAlterNote       $07
0009581A E701                       	dc.b	smpsNoAttack, $01
0009581C E10B                       	smpsAlterNote       $0B
0009581E E701                       	dc.b	smpsNoAttack, $01
00095820 E107                       	smpsAlterNote       $07
00095822 E701                       	dc.b	smpsNoAttack, $01
00095824 E104                       	smpsAlterNote       $04
00095826 E701                       	dc.b	smpsNoAttack, $01
00095828 E100                       	smpsAlterNote       $00
0009582A E701                       	dc.b	smpsNoAttack, $01
0009582C E104                       	smpsAlterNote       $04
0009582E E701                       	dc.b	smpsNoAttack, $01
00095830 E10A                       	smpsAlterNote       $0A
00095832 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095836 E107                       	smpsAlterNote       $07
00095838 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0009583C E104                       	smpsAlterNote       $04
0009583E E701                       	dc.b	smpsNoAttack, $01
00095840 E100                       	smpsAlterNote       $00
00095842 E701                       	dc.b	smpsNoAttack, $01
00095844 E101                       	smpsAlterNote       $01
00095846 E701                       	dc.b	smpsNoAttack, $01
00095848 E107                       	smpsAlterNote       $07
0009584A E701                       	dc.b	smpsNoAttack, $01
0009584C E10B                       	smpsAlterNote       $0B
0009584E E701                       	dc.b	smpsNoAttack, $01
00095850 E107                       	smpsAlterNote       $07
00095852 E701                       	dc.b	smpsNoAttack, $01
00095854 E104                       	smpsAlterNote       $04
00095856 E701                       	dc.b	smpsNoAttack, $01
00095858 E100                       	smpsAlterNote       $00
0009585A E701                       	dc.b	smpsNoAttack, $01
0009585C E104                       	smpsAlterNote       $04
0009585E E701                       	dc.b	smpsNoAttack, $01
00095860 E10A                       	smpsAlterNote       $0A
00095862 E701                       	dc.b	smpsNoAttack, $01
00095864 E10B                       	smpsAlterNote       $0B
00095866 E701                       	dc.b	smpsNoAttack, $01
0009586A E6FF                       	smpsAlterVol        $FF
0009586C A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00095878 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00095880 E109                       	smpsAlterNote       $09
00095882 E601                       	smpsAlterVol        $01
00095884 B60D                       	dc.b	nF4, $0D
00095886 E106                       	smpsAlterNote       $06
00095888 E701                       	dc.b	smpsNoAttack, $01
0009588A E102                       	smpsAlterNote       $02
0009588C E701                       	dc.b	smpsNoAttack, $01
0009588E E106                       	smpsAlterNote       $06
00095890 E701                       	dc.b	smpsNoAttack, $01
00095892 E109                       	smpsAlterNote       $09
00095894 E701                       	dc.b	smpsNoAttack, $01
00095896 E10D                       	smpsAlterNote       $0D
00095898 E701                       	dc.b	smpsNoAttack, $01
0009589A E109                       	smpsAlterNote       $09
0009589C E701                       	dc.b	smpsNoAttack, $01
0009589E E103                       	smpsAlterNote       $03
000958A0 E701                       	dc.b	smpsNoAttack, $01
000958A2 E102                       	smpsAlterNote       $02
000958A4 E701                       	dc.b	smpsNoAttack, $01
000958A6 E106                       	smpsAlterNote       $06
000958A8 E701                       	dc.b	smpsNoAttack, $01
000958AA E10C                       	smpsAlterNote       $0C
000958AC E701                       	dc.b	smpsNoAttack, $01
000958AE E10D                       	smpsAlterNote       $0D
000958B0 8001                       	dc.b	nRst, $01
000958B2 E109                       	smpsAlterNote       $09
000958B4 B80D                       	dc.b	nG4, $0D
000958B6 E106                       	smpsAlterNote       $06
000958B8 E701                       	dc.b	smpsNoAttack, $01
000958BA E102                       	smpsAlterNote       $02
000958BC E701                       	dc.b	smpsNoAttack, $01
000958BE E106                       	smpsAlterNote       $06
000958C0 E701                       	dc.b	smpsNoAttack, $01
000958C2 E109                       	smpsAlterNote       $09
000958C4 E701                       	dc.b	smpsNoAttack, $01
000958C6 E10D                       	smpsAlterNote       $0D
000958C8 E701                       	dc.b	smpsNoAttack, $01
000958CA E109                       	smpsAlterNote       $09
000958CC E701                       	dc.b	smpsNoAttack, $01
000958CE E103                       	smpsAlterNote       $03
000958D0 E701                       	dc.b	smpsNoAttack, $01
000958D2 E102                       	smpsAlterNote       $02
000958D4 E701                       	dc.b	smpsNoAttack, $01
000958D6 E106                       	smpsAlterNote       $06
000958D8 E701                       	dc.b	smpsNoAttack, $01
000958DA E10C                       	smpsAlterNote       $0C
000958DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958E0 E106                       	smpsAlterNote       $06
000958E2 E701                       	dc.b	smpsNoAttack, $01
000958E4 E103                       	smpsAlterNote       $03
000958E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958EA E109                       	smpsAlterNote       $09
000958EC E701                       	dc.b	smpsNoAttack, $01
000958EE E10D                       	smpsAlterNote       $0D
000958F0 E701                       	dc.b	smpsNoAttack, $01
000958F2 E10C                       	smpsAlterNote       $0C
000958F4 E701                       	dc.b	smpsNoAttack, $01
000958F6 E109                       	smpsAlterNote       $09
000958F8 8001                       	dc.b	nRst, $01
000958FA E10B                       	smpsAlterNote       $0B
000958FC BA0D                       	dc.b	nA4, $0D
000958FE E105                       	smpsAlterNote       $05
00095900 E701                       	dc.b	smpsNoAttack, $01
00095902 E104                       	smpsAlterNote       $04
00095904 E701                       	dc.b	smpsNoAttack, $01
00095906 E108                       	smpsAlterNote       $08
00095908 E701                       	dc.b	smpsNoAttack, $01
0009590A E10E                       	smpsAlterNote       $0E
0009590C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095910 E10B                       	smpsAlterNote       $0B
00095912 E701                       	dc.b	smpsNoAttack, $01
00095914 E105                       	smpsAlterNote       $05
00095916 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009591A E10B                       	smpsAlterNote       $0B
0009591C E701                       	dc.b	smpsNoAttack, $01
0009591E E10E                       	smpsAlterNote       $0E
00095920 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095924 E108                       	smpsAlterNote       $08
00095926 E701                       	dc.b	smpsNoAttack, $01
00095928 E104                       	smpsAlterNote       $04
0009592A E701                       	dc.b	smpsNoAttack, $01
0009592C E105                       	smpsAlterNote       $05
0009592E E701                       	dc.b	smpsNoAttack, $01
00095930 E10B                       	smpsAlterNote       $0B
00095932 E701                       	dc.b	smpsNoAttack, $01
00095934 E10F                       	smpsAlterNote       $0F
00095936 E701                       	dc.b	smpsNoAttack, $01
00095938 E10B                       	smpsAlterNote       $0B
0009593A E701                       	dc.b	smpsNoAttack, $01
0009593C E108                       	smpsAlterNote       $08
0009593E E701                       	dc.b	smpsNoAttack, $01
00095940 E104                       	smpsAlterNote       $04
00095942 E701                       	dc.b	smpsNoAttack, $01
00095944 E108                       	smpsAlterNote       $08
00095946 E701                       	dc.b	smpsNoAttack, $01
00095948 E10E                       	smpsAlterNote       $0E
0009594A E701                       	dc.b	smpsNoAttack, $01
0009594C E10F                       	smpsAlterNote       $0F
0009594E E701                       	dc.b	smpsNoAttack, $01
00095950 E10B                       	smpsAlterNote       $0B
00095952 E701                       	dc.b	smpsNoAttack, $01
00095954 E105                       	smpsAlterNote       $05
00095956 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009595A E108                       	smpsAlterNote       $08
0009595C E701                       	dc.b	smpsNoAttack, $01
0009595E E10E                       	smpsAlterNote       $0E
00095960 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095964 E108                       	smpsAlterNote       $08
00095966 E701                       	dc.b	smpsNoAttack, $01
00095968 E105                       	smpsAlterNote       $05
0009596A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009596E E108                       	smpsAlterNote       $08
00095970 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00095974 E109                       	smpsAlterNote       $09
00095976 B60D                       	dc.b	nF4, $0D
00095978 E103                       	smpsAlterNote       $03
0009597A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009597E E106                       	smpsAlterNote       $06
00095980 E701                       	dc.b	smpsNoAttack, $01
00095982 E10C                       	smpsAlterNote       $0C
00095984 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095988 E106                       	smpsAlterNote       $06
0009598A E701                       	dc.b	smpsNoAttack, $01
0009598C E103                       	smpsAlterNote       $03
0009598E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095992 E109                       	smpsAlterNote       $09
00095994 E701                       	dc.b	smpsNoAttack, $01
00095996 E10D                       	smpsAlterNote       $0D
00095998 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009599C E109                       	smpsAlterNote       $09
0009599E B80D                       	dc.b	nG4, $0D
000959A0 E103                       	smpsAlterNote       $03
000959A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959A6 E109                       	smpsAlterNote       $09
000959A8 E701                       	dc.b	smpsNoAttack, $01
000959AA E10C                       	smpsAlterNote       $0C
000959AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959B0 E106                       	smpsAlterNote       $06
000959B2 E701                       	dc.b	smpsNoAttack, $01
000959B4 E102                       	smpsAlterNote       $02
000959B6 E701                       	dc.b	smpsNoAttack, $01
000959B8 E103                       	smpsAlterNote       $03
000959BA E701                       	dc.b	smpsNoAttack, $01
000959BC E109                       	smpsAlterNote       $09
000959BE E701                       	dc.b	smpsNoAttack, $01
000959C0 E10D                       	smpsAlterNote       $0D
000959C2 E701                       	dc.b	smpsNoAttack, $01
000959C4 E109                       	smpsAlterNote       $09
000959C6 E701                       	dc.b	smpsNoAttack, $01
000959C8 E106                       	smpsAlterNote       $06
000959CA E701                       	dc.b	smpsNoAttack, $01
000959CC E102                       	smpsAlterNote       $02
000959CE E701                       	dc.b	smpsNoAttack, $01
000959D0 E106                       	smpsAlterNote       $06
000959D2 E701                       	dc.b	smpsNoAttack, $01
000959D4 E10C                       	smpsAlterNote       $0C
000959D6 E701                       	dc.b	smpsNoAttack, $01
000959D8 E10D                       	smpsAlterNote       $0D
000959DA E701                       	dc.b	smpsNoAttack, $01
000959DC E109                       	smpsAlterNote       $09
000959DE E701                       	dc.b	smpsNoAttack, $01
000959E0 E10B                       	smpsAlterNote       $0B
000959E2 BA0D                       	dc.b	nA4, $0D
000959E4 E108                       	smpsAlterNote       $08
000959E6 E701                       	dc.b	smpsNoAttack, $01
000959E8 E105                       	smpsAlterNote       $05
000959EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959EE E10B                       	smpsAlterNote       $0B
000959F0 E701                       	dc.b	smpsNoAttack, $01
000959F2 E10F                       	smpsAlterNote       $0F
000959F4 E701                       	dc.b	smpsNoAttack, $01
000959F6 E10E                       	smpsAlterNote       $0E
000959F8 E701                       	dc.b	smpsNoAttack, $01
000959FA E108                       	smpsAlterNote       $08
000959FC E701                       	dc.b	smpsNoAttack, $01
000959FE E104                       	smpsAlterNote       $04
00095A00 E701                       	dc.b	smpsNoAttack, $01
00095A02 E108                       	smpsAlterNote       $08
00095A04 E701                       	dc.b	smpsNoAttack, $01
00095A06 E10B                       	smpsAlterNote       $0B
00095A08 E701                       	dc.b	smpsNoAttack, $01
00095A0A E10F                       	smpsAlterNote       $0F
00095A0C E701                       	dc.b	smpsNoAttack, $01
00095A0E E10B                       	smpsAlterNote       $0B
00095A10 E701                       	dc.b	smpsNoAttack, $01
00095A12 E105                       	smpsAlterNote       $05
00095A14 E701                       	dc.b	smpsNoAttack, $01
00095A16 E104                       	smpsAlterNote       $04
00095A18 E701                       	dc.b	smpsNoAttack, $01
00095A1A E108                       	smpsAlterNote       $08
00095A1C E701                       	dc.b	smpsNoAttack, $01
00095A1E E10E                       	smpsAlterNote       $0E
00095A20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A24 E10B                       	smpsAlterNote       $0B
00095A26 E701                       	dc.b	smpsNoAttack, $01
00095A28 E105                       	smpsAlterNote       $05
00095A2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A2E E10B                       	smpsAlterNote       $0B
00095A30 E701                       	dc.b	smpsNoAttack, $01
00095A32 E10E                       	smpsAlterNote       $0E
00095A34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A38 E108                       	smpsAlterNote       $08
00095A3A E701                       	dc.b	smpsNoAttack, $01
00095A3C E105                       	smpsAlterNote       $05
00095A3E 8001                       	dc.b	nRst, $01
00095A40 E109                       	smpsAlterNote       $09
00095A42 B60A                       	dc.b	nF4, $0A
00095A44 E108                       	smpsAlterNote       $08
00095A46 B507                       	dc.b	nE4, $07
00095A48 E107                       	smpsAlterNote       $07
00095A4A B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00095A4E E108                       	smpsAlterNote       $08
00095A50 B503                       	dc.b	nE4, $03
00095A52 E109                       	smpsAlterNote       $09
00095A54 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00095A5C E10B                       	smpsAlterNote       $0B
00095A5E BA0D                       	dc.b	nA4, $0D
00095A60 E108                       	smpsAlterNote       $08
00095A62 E701                       	dc.b	smpsNoAttack, $01
00095A64 E104                       	smpsAlterNote       $04
00095A66 E701                       	dc.b	smpsNoAttack, $01
00095A68 E108                       	smpsAlterNote       $08
00095A6A E701                       	dc.b	smpsNoAttack, $01
00095A6C E10B                       	smpsAlterNote       $0B
00095A6E E701                       	dc.b	smpsNoAttack, $01
00095A70 E10F                       	smpsAlterNote       $0F
00095A72 E701                       	dc.b	smpsNoAttack, $01
00095A74 E10B                       	smpsAlterNote       $0B
00095A76 E701                       	dc.b	smpsNoAttack, $01
00095A78 E105                       	smpsAlterNote       $05
00095A7A E701                       	dc.b	smpsNoAttack, $01
00095A7C E104                       	smpsAlterNote       $04
00095A7E E701                       	dc.b	smpsNoAttack, $01
00095A80 E108                       	smpsAlterNote       $08
00095A82 E701                       	dc.b	smpsNoAttack, $01
00095A84 E10E                       	smpsAlterNote       $0E
00095A86 E701                       	dc.b	smpsNoAttack, $01
00095A88 E10F                       	smpsAlterNote       $0F
00095A8A 8001                       	dc.b	nRst, $01
00095A8C E109                       	smpsAlterNote       $09
00095A8E C20D                       	dc.b	nF5, $0D
00095A90 E106                       	smpsAlterNote       $06
00095A92 E701                       	dc.b	smpsNoAttack, $01
00095A94 E102                       	smpsAlterNote       $02
00095A96 E701                       	dc.b	smpsNoAttack, $01
00095A98 E106                       	smpsAlterNote       $06
00095A9A E701                       	dc.b	smpsNoAttack, $01
00095A9C E109                       	smpsAlterNote       $09
00095A9E E701                       	dc.b	smpsNoAttack, $01
00095AA0 E10D                       	smpsAlterNote       $0D
00095AA2 E701                       	dc.b	smpsNoAttack, $01
00095AA4 E109                       	smpsAlterNote       $09
00095AA6 E701                       	dc.b	smpsNoAttack, $01
00095AA8 E103                       	smpsAlterNote       $03
00095AAA E701                       	dc.b	smpsNoAttack, $01
00095AAC E102                       	smpsAlterNote       $02
00095AAE E701                       	dc.b	smpsNoAttack, $01
00095AB0 E106                       	smpsAlterNote       $06
00095AB2 E701                       	dc.b	smpsNoAttack, $01
00095AB4 E10C                       	smpsAlterNote       $0C
00095AB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095ABA E109                       	smpsAlterNote       $09
00095ABC E701                       	dc.b	smpsNoAttack, $01
00095ABE E103                       	smpsAlterNote       $03
00095AC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AC4 E109                       	smpsAlterNote       $09
00095AC6 E701                       	dc.b	smpsNoAttack, $01
00095AC8 E10C                       	smpsAlterNote       $0C
00095ACA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095ACE E106                       	smpsAlterNote       $06
00095AD0 E701                       	dc.b	smpsNoAttack, $01
00095AD2 E102                       	smpsAlterNote       $02
00095AD4 E701                       	dc.b	smpsNoAttack, $01
00095AD6 E103                       	smpsAlterNote       $03
00095AD8 E701                       	dc.b	smpsNoAttack, $01
00095ADA E109                       	smpsAlterNote       $09
00095ADC E701                       	dc.b	smpsNoAttack, $01
00095ADE E10D                       	smpsAlterNote       $0D
00095AE0 E701                       	dc.b	smpsNoAttack, $01
00095AE2 E109                       	smpsAlterNote       $09
00095AE4 E701                       	dc.b	smpsNoAttack, $01
00095AE6 E106                       	smpsAlterNote       $06
00095AE8 E701                       	dc.b	smpsNoAttack, $01
00095AEA E102                       	smpsAlterNote       $02
00095AEC E701                       	dc.b	smpsNoAttack, $01
00095AEE E106                       	smpsAlterNote       $06
00095AF0 E701                       	dc.b	smpsNoAttack, $01
00095AF2 E10C                       	smpsAlterNote       $0C
00095AF4 E701                       	dc.b	smpsNoAttack, $01
00095AF6 E10D                       	smpsAlterNote       $0D
00095AF8 E701                       	dc.b	smpsNoAttack, $01
00095AFA E109                       	smpsAlterNote       $09
00095AFC E701                       	dc.b	smpsNoAttack, $01
00095AFE E103                       	smpsAlterNote       $03
00095B00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B04 E106                       	smpsAlterNote       $06
00095B06 E701                       	dc.b	smpsNoAttack, $01
00095B08 E10C                       	smpsAlterNote       $0C
00095B0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B0E E106                       	smpsAlterNote       $06
00095B10 E701                       	dc.b	smpsNoAttack, $01
00095B12 E103                       	smpsAlterNote       $03
00095B14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B18 E109                       	smpsAlterNote       $09
00095B1A E701                       	dc.b	smpsNoAttack, $01
00095B1C E10D                       	smpsAlterNote       $0D
00095B1E E701                       	dc.b	smpsNoAttack, $01
00095B20 E10C                       	smpsAlterNote       $0C
00095B22 E701                       	dc.b	smpsNoAttack, $01
00095B24 E106                       	smpsAlterNote       $06
00095B26 E701                       	dc.b	smpsNoAttack, $01
00095B28 E103                       	smpsAlterNote       $03
00095B2A 8001                       	dc.b	nRst, $01
00095B2C E109                       	smpsAlterNote       $09
00095B2E C206 8001                  	dc.b	nF5, $06, nRst, $01
00095B34 E10C                       	smpsAlterNote       $0C
00095B36 E601                       	smpsAlterVol        $01
00095B38 BB0D                       	dc.b	nBb4, $0D
00095B3A E106                       	smpsAlterNote       $06
00095B3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B40 E109                       	smpsAlterNote       $09
00095B42 E701                       	dc.b	smpsNoAttack, $01
00095B44 E10F                       	smpsAlterNote       $0F
00095B46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B4A E109                       	smpsAlterNote       $09
00095B4C E701                       	dc.b	smpsNoAttack, $01
00095B4E E106                       	smpsAlterNote       $06
00095B50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B54 E10C                       	smpsAlterNote       $0C
00095B56 E701                       	dc.b	smpsNoAttack, $01
00095B58 E110                       	smpsAlterNote       $10
00095B5A E701                       	dc.b	smpsNoAttack, $01
00095B5C E10F                       	smpsAlterNote       $0F
00095B5E E701                       	dc.b	smpsNoAttack, $01
00095B60 E109                       	smpsAlterNote       $09
00095B62 E701                       	dc.b	smpsNoAttack, $01
00095B64 E105                       	smpsAlterNote       $05
00095B66 E701                       	dc.b	smpsNoAttack, $01
00095B68 E106                       	smpsAlterNote       $06
00095B6A 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00095B6E E103                       	smpsAlterNote       $03
00095B70 E701                       	dc.b	smpsNoAttack, $01
00095B72 E1FF                       	smpsAlterNote       $FF
00095B74 E701                       	dc.b	smpsNoAttack, $01
00095B76 E103                       	smpsAlterNote       $03
00095B78 E701                       	dc.b	smpsNoAttack, $01
00095B7A E106                       	smpsAlterNote       $06
00095B7C E701                       	dc.b	smpsNoAttack, $01
00095B7E E10A                       	smpsAlterNote       $0A
00095B80 E701                       	dc.b	smpsNoAttack, $01
00095B82 E106                       	smpsAlterNote       $06
00095B84 E701                       	dc.b	smpsNoAttack, $01
00095B86 E100                       	smpsAlterNote       $00
00095B88 E701                       	dc.b	smpsNoAttack, $01
00095B8A E1FF                       	smpsAlterNote       $FF
00095B8C E701                       	dc.b	smpsNoAttack, $01
00095B8E E103                       	smpsAlterNote       $03
00095B90 E701                       	dc.b	smpsNoAttack, $01
00095B92 E109                       	smpsAlterNote       $09
00095B94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B98 E106                       	smpsAlterNote       $06
00095B9A E701                       	dc.b	smpsNoAttack, $01
00095B9C E100                       	smpsAlterNote       $00
00095B9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BA2 E107                       	smpsAlterNote       $07
00095BA4 BF0E                       	dc.b	nD5, $0E
00095BA6 E101                       	smpsAlterNote       $01
00095BA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BAC E107                       	smpsAlterNote       $07
00095BAE E701                       	dc.b	smpsNoAttack, $01
00095BB0 E10A                       	smpsAlterNote       $0A
00095BB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BB6 E104                       	smpsAlterNote       $04
00095BB8 E701                       	dc.b	smpsNoAttack, $01
00095BBA E100                       	smpsAlterNote       $00
00095BBC E701                       	dc.b	smpsNoAttack, $01
00095BBE E101                       	smpsAlterNote       $01
00095BC0 E701                       	dc.b	smpsNoAttack, $01
00095BC2 E107                       	smpsAlterNote       $07
00095BC4 E701                       	dc.b	smpsNoAttack, $01
00095BC6 E10B                       	smpsAlterNote       $0B
00095BC8 E701                       	dc.b	smpsNoAttack, $01
00095BCA E107                       	smpsAlterNote       $07
00095BCC E701                       	dc.b	smpsNoAttack, $01
00095BCE E104                       	smpsAlterNote       $04
00095BD0 E701                       	dc.b	smpsNoAttack, $01
00095BD2 E100                       	smpsAlterNote       $00
00095BD4 E701                       	dc.b	smpsNoAttack, $01
00095BD6 E101                       	smpsAlterNote       $01
00095BD8 8001                       	dc.b	nRst, $01
00095BDA E108                       	smpsAlterNote       $08
00095BDC C10C                       	dc.b	nE5, $0C
00095BDE E109                       	smpsAlterNote       $09
00095BE0 C201 8001                  	dc.b	nF5, $01, nRst, $01
00095BE4 E10A                       	smpsAlterNote       $0A
00095BE6 8001                       	dc.b	nRst, $01
00095BE8 E109                       	smpsAlterNote       $09
00095BEA C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00095BEE E106                       	smpsAlterNote       $06
00095BF0 E701                       	dc.b	smpsNoAttack, $01
00095BF2 E102                       	smpsAlterNote       $02
00095BF4 E701                       	dc.b	smpsNoAttack, $01
00095BF6 E103                       	smpsAlterNote       $03
00095BF8 E701                       	dc.b	smpsNoAttack, $01
00095BFA E109                       	smpsAlterNote       $09
00095BFC E701                       	dc.b	smpsNoAttack, $01
00095BFE E10D                       	smpsAlterNote       $0D
00095C00 E701                       	dc.b	smpsNoAttack, $01
00095C02 E109                       	smpsAlterNote       $09
00095C04 E701                       	dc.b	smpsNoAttack, $01
00095C06 E106                       	smpsAlterNote       $06
00095C08 E701                       	dc.b	smpsNoAttack, $01
00095C0A E102                       	smpsAlterNote       $02
00095C0C E701                       	dc.b	smpsNoAttack, $01
00095C0E E106                       	smpsAlterNote       $06
00095C10 E701                       	dc.b	smpsNoAttack, $01
00095C12 E10C                       	smpsAlterNote       $0C
00095C14 E701                       	dc.b	smpsNoAttack, $01
00095C16 E10D                       	smpsAlterNote       $0D
00095C18 E701                       	dc.b	smpsNoAttack, $01
00095C1A E109                       	smpsAlterNote       $09
00095C1C C40D                       	dc.b	nG5, $0D
00095C1E E106                       	smpsAlterNote       $06
00095C20 E701                       	dc.b	smpsNoAttack, $01
00095C22 E102                       	smpsAlterNote       $02
00095C24 E701                       	dc.b	smpsNoAttack, $01
00095C26 E103                       	smpsAlterNote       $03
00095C28 E701                       	dc.b	smpsNoAttack, $01
00095C2A E109                       	smpsAlterNote       $09
00095C2C E701                       	dc.b	smpsNoAttack, $01
00095C2E E108                       	smpsAlterNote       $08
00095C30 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00095C3C E109                       	smpsAlterNote       $09
00095C3E C20D                       	dc.b	nF5, $0D
00095C40 E106                       	smpsAlterNote       $06
00095C42 E701                       	dc.b	smpsNoAttack, $01
00095C44 E102                       	smpsAlterNote       $02
00095C46 E701                       	dc.b	smpsNoAttack, $01
00095C48 E106                       	smpsAlterNote       $06
00095C4A E701                       	dc.b	smpsNoAttack, $01
00095C4C E109                       	smpsAlterNote       $09
00095C4E E701                       	dc.b	smpsNoAttack, $01
00095C50 E10D                       	smpsAlterNote       $0D
00095C52 E701                       	dc.b	smpsNoAttack, $01
00095C54 E109                       	smpsAlterNote       $09
00095C56 E701                       	dc.b	smpsNoAttack, $01
00095C58 E103                       	smpsAlterNote       $03
00095C5A E701                       	dc.b	smpsNoAttack, $01
00095C5C E102                       	smpsAlterNote       $02
00095C5E E701                       	dc.b	smpsNoAttack, $01
00095C60 E106                       	smpsAlterNote       $06
00095C62 E701                       	dc.b	smpsNoAttack, $01
00095C64 E10C                       	smpsAlterNote       $0C
00095C66 E701                       	dc.b	smpsNoAttack, $01
00095C68 E10D                       	smpsAlterNote       $0D
00095C6A 8001                       	dc.b	nRst, $01
00095C6C E112                       	smpsAlterNote       $12
00095C6E C401                       	dc.b	nG5, $01
00095C70 E1EB                       	smpsAlterNote       $EB
00095C72 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00095C75 E1FD                       	smpsAlterNote       $FD
00095C77 E701                       	dc.b	smpsNoAttack, $01
00095C79 E10F                       	smpsAlterNote       $0F
00095C7B E701                       	dc.b	smpsNoAttack, $01
00095C7D E118                       	smpsAlterNote       $18
00095C7F E701                       	dc.b	smpsNoAttack, $01
00095C81 E1ED                       	smpsAlterNote       $ED
00095C83 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00095C86 E1FF                       	smpsAlterNote       $FF
00095C88 E701                       	dc.b	smpsNoAttack, $01
00095C8A E10B                       	smpsAlterNote       $0B
00095C8C E703                       	dc.b	smpsNoAttack, $03
00095C8E E109                       	smpsAlterNote       $09
00095C90 C407                       	dc.b	nG5, $07
00095C92 E108                       	smpsAlterNote       $08
00095C94 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00095CA0 E109                       	smpsAlterNote       $09
00095CA2 C20D                       	dc.b	nF5, $0D
00095CA4 E103                       	smpsAlterNote       $03
00095CA6 E701                       	dc.b	smpsNoAttack, $01
00095CA8 E102                       	smpsAlterNote       $02
00095CAA E701                       	dc.b	smpsNoAttack, $01
00095CAC E106                       	smpsAlterNote       $06
00095CAE E701                       	dc.b	smpsNoAttack, $01
00095CB0 E10C                       	smpsAlterNote       $0C
00095CB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CB6 E109                       	smpsAlterNote       $09
00095CB8 E701                       	dc.b	smpsNoAttack, $01
00095CBA E103                       	smpsAlterNote       $03
00095CBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CC0 E109                       	smpsAlterNote       $09
00095CC2 E701                       	dc.b	smpsNoAttack, $01
00095CC4 E10C                       	smpsAlterNote       $0C
00095CC6 E701                       	dc.b	smpsNoAttack, $01
00095CC8 E10D                       	smpsAlterNote       $0D
00095CCA 8001                       	dc.b	nRst, $01
00095CCC E10B                       	smpsAlterNote       $0B
00095CCE C609 8001                  	dc.b	nA5, $09, nRst, $01
00095CD2 E109                       	smpsAlterNote       $09
00095CD4 B806 8001                  	dc.b	nG4, $06, nRst, $01
00095CD8 E108                       	smpsAlterNote       $08
00095CDA C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00095CE6 8001                       	dc.b	nRst, $01
00095CE8 E109                       	smpsAlterNote       $09
00095CEA C20D                       	dc.b	nF5, $0D
00095CEC E103                       	smpsAlterNote       $03
00095CEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CF2 E106                       	smpsAlterNote       $06
00095CF4 E701                       	dc.b	smpsNoAttack, $01
00095CF6 E10C                       	smpsAlterNote       $0C
00095CF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CFC E106                       	smpsAlterNote       $06
00095CFE E701                       	dc.b	smpsNoAttack, $01
00095D00 E103                       	smpsAlterNote       $03
00095D02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D06 E109                       	smpsAlterNote       $09
00095D08 E701                       	dc.b	smpsNoAttack, $01
00095D0A E10D                       	smpsAlterNote       $0D
00095D0C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095D12 E108                       	smpsAlterNote       $08
00095D14 E6FF                       	smpsAlterVol        $FF
00095D16 A806                       	dc.b	nEb3, $06
00095D18 E10C                       	smpsAlterNote       $0C
00095D1A A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095D1E E108                       	smpsAlterNote       $08
00095D20 A803                       	dc.b	nEb3, $03
00095D22 E109                       	smpsAlterNote       $09
00095D24 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00095D28 E10C                       	smpsAlterNote       $0C
00095D2A AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00095D34 E109                       	smpsAlterNote       $09
00095D36 E602                       	smpsAlterVol        $02
00095D38 B604                       	dc.b	nF4, $04
00095D3A E602                       	smpsAlterVol        $02
00095D3C F6F1 AA                    	smpsJump            music84_Jump02
00095D3F                            
00095D3F                            ; FM4 Data
00095D3F                            music84_FM4:
00095D41 E040                       	smpsPan             panRight, $00
00095D43 8003                       	dc.b	nRst, $03
00095D45 E10F                       	smpsAlterNote       $0F
00095D47 C603 8008                  	dc.b	nA5, $03, nRst, $08
00095D4B E10D                       	smpsAlterNote       $0D
00095D4D C403 800A                  	dc.b	nG5, $03, nRst, $0A
00095D51 E10C                       	smpsAlterNote       $0C
00095D53 C103 8004                  	dc.b	nE5, $03, nRst, $04
00095D59 E6FE                       	smpsAlterVol        $FE
00095D5B E110                       	smpsAlterNote       $10
00095D5D C703 8001                  	dc.b	nBb5, $03, nRst, $01
00095D61 E10F                       	smpsAlterNote       $0F
00095D63 C602 8001                  	dc.b	nA5, $02, nRst, $01
00095D67 E10D                       	smpsAlterNote       $0D
00095D69 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00095D72 E10C                       	smpsAlterNote       $0C
00095D74 C103                       	dc.b	nE5, $03
00095D76 E10A                       	smpsAlterNote       $0A
00095D78 BD03 8001                  	dc.b	nC5, $03, nRst, $01
00095D7E 03                         	dc.b	$03
00095D7F                            
00095D7F                            music84_Jump01:
00095D7F E10B                       	smpsAlterNote       $0B
00095D81 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095D85 E10C                       	smpsAlterNote       $0C
00095D87 C102 8001                  	dc.b	nE5, $02, nRst, $01
00095D8B E10D                       	smpsAlterNote       $0D
00095D8D C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095D97 E10B                       	smpsAlterNote       $0B
00095D99 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095D9D E107                       	smpsAlterNote       $07
00095D9F E701                       	dc.b	smpsNoAttack, $01
00095DA1 E103                       	smpsAlterNote       $03
00095DA3 E701                       	dc.b	smpsNoAttack, $01
00095DA5 E104                       	smpsAlterNote       $04
00095DA7 E701                       	dc.b	smpsNoAttack, $01
00095DA9 E10A                       	smpsAlterNote       $0A
00095DAB E701                       	dc.b	smpsNoAttack, $01
00095DAD E10E                       	smpsAlterNote       $0E
00095DAF E701                       	dc.b	smpsNoAttack, $01
00095DB1 E10A                       	smpsAlterNote       $0A
00095DB3 E701                       	dc.b	smpsNoAttack, $01
00095DB5 E107                       	smpsAlterNote       $07
00095DB7 E701                       	dc.b	smpsNoAttack, $01
00095DB9 E104                       	smpsAlterNote       $04
00095DBB 8001                       	dc.b	nRst, $01
00095DBD E110                       	smpsAlterNote       $10
00095DBF C703                       	dc.b	nBb5, $03
00095DC1 E10F                       	smpsAlterNote       $0F
00095DC3 C603 8001                  	dc.b	nA5, $03, nRst, $01
00095DC7 E10D                       	smpsAlterNote       $0D
00095DC9 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00095DCF E10C                       	smpsAlterNote       $0C
00095DD1 E701                       	dc.b	smpsNoAttack, $01
00095DD3 E108                       	smpsAlterNote       $08
00095DD5 E701                       	dc.b	smpsNoAttack, $01
00095DD7 E10C                       	smpsAlterNote       $0C
00095DD9 E701                       	dc.b	smpsNoAttack, $01
00095DDB E10F                       	smpsAlterNote       $0F
00095DDD E701                       	dc.b	smpsNoAttack, $01
00095DDF E113                       	smpsAlterNote       $13
00095DE1 E701                       	dc.b	smpsNoAttack, $01
00095DE3 E10F                       	smpsAlterNote       $0F
00095DE5 E701                       	dc.b	smpsNoAttack, $01
00095DE7 E109                       	smpsAlterNote       $09
00095DE9 E701                       	dc.b	smpsNoAttack, $01
00095DEB E108                       	smpsAlterNote       $08
00095DED E701                       	dc.b	smpsNoAttack, $01
00095DEF E10C                       	smpsAlterNote       $0C
00095DF1 E701                       	dc.b	smpsNoAttack, $01
00095DF3 E112                       	smpsAlterNote       $12
00095DF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DF9 E10C                       	smpsAlterNote       $0C
00095DFB E701                       	dc.b	smpsNoAttack, $01
00095DFD E109                       	smpsAlterNote       $09
00095DFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E03 E10F                       	smpsAlterNote       $0F
00095E05 E701                       	dc.b	smpsNoAttack, $01
00095E07 E113                       	smpsAlterNote       $13
00095E09 E701                       	dc.b	smpsNoAttack, $01
00095E0B E112                       	smpsAlterNote       $12
00095E0D E701                       	dc.b	smpsNoAttack, $01
00095E0F E10C                       	smpsAlterNote       $0C
00095E11 E701                       	dc.b	smpsNoAttack, $01
00095E13 E108                       	smpsAlterNote       $08
00095E15 E701                       	dc.b	smpsNoAttack, $01
00095E17 E10C                       	smpsAlterNote       $0C
00095E19 E701                       	dc.b	smpsNoAttack, $01
00095E1B E10F                       	smpsAlterNote       $0F
00095E1D E701                       	dc.b	smpsNoAttack, $01
00095E1F E113                       	smpsAlterNote       $13
00095E21 E701                       	dc.b	smpsNoAttack, $01
00095E23 E10F                       	smpsAlterNote       $0F
00095E25 E701                       	dc.b	smpsNoAttack, $01
00095E27 E109                       	smpsAlterNote       $09
00095E29 E701                       	dc.b	smpsNoAttack, $01
00095E2B E108                       	smpsAlterNote       $08
00095E2D E701                       	dc.b	smpsNoAttack, $01
00095E2F E10C                       	smpsAlterNote       $0C
00095E31 E701                       	dc.b	smpsNoAttack, $01
00095E33 E112                       	smpsAlterNote       $12
00095E35 E701                       	dc.b	smpsNoAttack, $01
00095E37 E113                       	smpsAlterNote       $13
00095E39 800F                       	dc.b	nRst, $0F
00095E3B E10B                       	smpsAlterNote       $0B
00095E3D BF03                       	dc.b	nD5, $03
00095E3F E10C                       	smpsAlterNote       $0C
00095E41 C103 8001                  	dc.b	nE5, $03, nRst, $01
00095E45 E10D                       	smpsAlterNote       $0D
00095E47 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00095E4F E10B                       	smpsAlterNote       $0B
00095E51 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00095E5B E110                       	smpsAlterNote       $10
00095E5D C704                       	dc.b	nBb5, $04
00095E5F E10F                       	smpsAlterNote       $0F
00095E61 C604 8001                  	dc.b	nA5, $04, nRst, $01
00095E65 E10D                       	smpsAlterNote       $0D
00095E67 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095E6D E109                       	smpsAlterNote       $09
00095E6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E73 E10F                       	smpsAlterNote       $0F
00095E75 E701                       	dc.b	smpsNoAttack, $01
00095E77 E112                       	smpsAlterNote       $12
00095E79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E7D E10C                       	smpsAlterNote       $0C
00095E7F E701                       	dc.b	smpsNoAttack, $01
00095E81 E108                       	smpsAlterNote       $08
00095E83 E701                       	dc.b	smpsNoAttack, $01
00095E85 E109                       	smpsAlterNote       $09
00095E87 E701                       	dc.b	smpsNoAttack, $01
00095E89 E10F                       	smpsAlterNote       $0F
00095E8B E701                       	dc.b	smpsNoAttack, $01
00095E8D E113                       	smpsAlterNote       $13
00095E8F E701                       	dc.b	smpsNoAttack, $01
00095E91 E10F                       	smpsAlterNote       $0F
00095E93 E701                       	dc.b	smpsNoAttack, $01
00095E95 E10C                       	smpsAlterNote       $0C
00095E97 E701                       	dc.b	smpsNoAttack, $01
00095E99 E108                       	smpsAlterNote       $08
00095E9B E701                       	dc.b	smpsNoAttack, $01
00095E9D E10C                       	smpsAlterNote       $0C
00095E9F E701                       	dc.b	smpsNoAttack, $01
00095EA1 E112                       	smpsAlterNote       $12
00095EA3 E701                       	dc.b	smpsNoAttack, $01
00095EA5 E113                       	smpsAlterNote       $13
00095EA7 E701                       	dc.b	smpsNoAttack, $01
00095EA9 E10F                       	smpsAlterNote       $0F
00095EAB E701                       	dc.b	smpsNoAttack, $01
00095EAD E109                       	smpsAlterNote       $09
00095EAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EB3 E10C                       	smpsAlterNote       $0C
00095EB5 E701                       	dc.b	smpsNoAttack, $01
00095EB7 E112                       	smpsAlterNote       $12
00095EB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EBD E10C                       	smpsAlterNote       $0C
00095EBF E701                       	dc.b	smpsNoAttack, $01
00095EC1 E109                       	smpsAlterNote       $09
00095EC3 E701                       	dc.b	smpsNoAttack, $01
00095EC5 E10D                       	smpsAlterNote       $0D
00095EC7 C401 8001                  	dc.b	nG5, $01, nRst, $01
00095ECB E10F                       	smpsAlterNote       $0F
00095ECD C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00095ED7 E10D                       	smpsAlterNote       $0D
00095ED9 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095EDF E10B                       	smpsAlterNote       $0B
00095EE1 BF0D                       	dc.b	nD5, $0D
00095EE3 E108                       	smpsAlterNote       $08
00095EE5 E701                       	dc.b	smpsNoAttack, $01
00095EE7 E104                       	smpsAlterNote       $04
00095EE9 E701                       	dc.b	smpsNoAttack, $01
00095EEB E108                       	smpsAlterNote       $08
00095EED E701                       	dc.b	smpsNoAttack, $01
00095EEF E10B                       	smpsAlterNote       $0B
00095EF1 E701                       	dc.b	smpsNoAttack, $01
00095EF3 E10F                       	smpsAlterNote       $0F
00095EF5 E701                       	dc.b	smpsNoAttack, $01
00095EF7 E10B                       	smpsAlterNote       $0B
00095EF9 E701                       	dc.b	smpsNoAttack, $01
00095EFB E105                       	smpsAlterNote       $05
00095EFD E701                       	dc.b	smpsNoAttack, $01
00095EFF E104                       	smpsAlterNote       $04
00095F01 E701                       	dc.b	smpsNoAttack, $01
00095F03 E108                       	smpsAlterNote       $08
00095F05 E701                       	dc.b	smpsNoAttack, $01
00095F07 E10E                       	smpsAlterNote       $0E
00095F09 E701                       	dc.b	smpsNoAttack, $01
00095F0B E10F                       	smpsAlterNote       $0F
00095F0D 8001                       	dc.b	nRst, $01
00095F0F E10C                       	smpsAlterNote       $0C
00095F11 C101                       	dc.b	nE5, $01
00095F13 E10D                       	smpsAlterNote       $0D
00095F15 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00095F1B E10F                       	smpsAlterNote       $0F
00095F1D C606 8001                  	dc.b	nA5, $06, nRst, $01
00095F21 E10C                       	smpsAlterNote       $0C
00095F23 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00095F27 E10D                       	smpsAlterNote       $0D
00095F29 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095F2D E10C                       	smpsAlterNote       $0C
00095F2F CD03                       	dc.b	nE6, $03
00095F31 E10A                       	smpsAlterNote       $0A
00095F33 C903 8001                  	dc.b	nC6, $03, nRst, $01
00095F37 E10D                       	smpsAlterNote       $0D
00095F39 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00095F41 E109                       	smpsAlterNote       $09
00095F43 E701                       	dc.b	smpsNoAttack, $01
00095F45 E10D                       	smpsAlterNote       $0D
00095F47 E701                       	dc.b	smpsNoAttack, $01
00095F49 E110                       	smpsAlterNote       $10
00095F4B E701                       	dc.b	smpsNoAttack, $01
00095F4D E114                       	smpsAlterNote       $14
00095F4F E701                       	dc.b	smpsNoAttack, $01
00095F51 E110                       	smpsAlterNote       $10
00095F53 E701                       	dc.b	smpsNoAttack, $01
00095F55 E10A                       	smpsAlterNote       $0A
00095F57 E701                       	dc.b	smpsNoAttack, $01
00095F59 E109                       	smpsAlterNote       $09
00095F5B E701                       	dc.b	smpsNoAttack, $01
00095F5D E10D                       	smpsAlterNote       $0D
00095F5F E701                       	dc.b	smpsNoAttack, $01
00095F61 E113                       	smpsAlterNote       $13
00095F63 E701                       	dc.b	smpsNoAttack, $01
00095F65 E114                       	smpsAlterNote       $14
00095F67 8001                       	dc.b	nRst, $01
00095F69 E10F                       	smpsAlterNote       $0F
00095F6B C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00095F71 E10C                       	smpsAlterNote       $0C
00095F73 E701                       	dc.b	smpsNoAttack, $01
00095F75 E108                       	smpsAlterNote       $08
00095F77 E701                       	dc.b	smpsNoAttack, $01
00095F79 E10C                       	smpsAlterNote       $0C
00095F7B E701                       	dc.b	smpsNoAttack, $01
00095F7D E112                       	smpsAlterNote       $12
00095F7F E701                       	dc.b	smpsNoAttack, $01
00095F81 E113                       	smpsAlterNote       $13
00095F83 E701                       	dc.b	smpsNoAttack, $01
00095F85 E10F                       	smpsAlterNote       $0F
00095F87 E701                       	dc.b	smpsNoAttack, $01
00095F89 E109                       	smpsAlterNote       $09
00095F8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F8F E10C                       	smpsAlterNote       $0C
00095F91 E701                       	dc.b	smpsNoAttack, $01
00095F93 E112                       	smpsAlterNote       $12
00095F95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F99 E10C                       	smpsAlterNote       $0C
00095F9B E701                       	dc.b	smpsNoAttack, $01
00095F9D E109                       	smpsAlterNote       $09
00095F9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FA3 E10F                       	smpsAlterNote       $0F
00095FA5 E701                       	dc.b	smpsNoAttack, $01
00095FA7 E113                       	smpsAlterNote       $13
00095FA9 E701                       	dc.b	smpsNoAttack, $01
00095FAB E112                       	smpsAlterNote       $12
00095FAD E701                       	dc.b	smpsNoAttack, $01
00095FAF E10C                       	smpsAlterNote       $0C
00095FB1 E701                       	dc.b	smpsNoAttack, $01
00095FB3 E108                       	smpsAlterNote       $08
00095FB5 E701                       	dc.b	smpsNoAttack, $01
00095FB7 E10C                       	smpsAlterNote       $0C
00095FB9 E701                       	dc.b	smpsNoAttack, $01
00095FBB E10F                       	smpsAlterNote       $0F
00095FBD E701                       	dc.b	smpsNoAttack, $01
00095FBF E113                       	smpsAlterNote       $13
00095FC1 E701                       	dc.b	smpsNoAttack, $01
00095FC3 E10F                       	smpsAlterNote       $0F
00095FC5 E701                       	dc.b	smpsNoAttack, $01
00095FC7 E109                       	smpsAlterNote       $09
00095FC9 E701                       	dc.b	smpsNoAttack, $01
00095FCB E108                       	smpsAlterNote       $08
00095FCD E701                       	dc.b	smpsNoAttack, $01
00095FCF E10C                       	smpsAlterNote       $0C
00095FD1 E701                       	dc.b	smpsNoAttack, $01
00095FD3 E112                       	smpsAlterNote       $12
00095FD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FD9 E10F                       	smpsAlterNote       $0F
00095FDB E701                       	dc.b	smpsNoAttack, $01
00095FDD E109                       	smpsAlterNote       $09
00095FDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FE3 E10F                       	smpsAlterNote       $0F
00095FE5 E701                       	dc.b	smpsNoAttack, $01
00095FE7 E113                       	smpsAlterNote       $13
00095FE9 E701                       	dc.b	smpsNoAttack, $01
00095FEB E112                       	smpsAlterNote       $12
00095FED E701                       	dc.b	smpsNoAttack, $01
00095FEF E10C                       	smpsAlterNote       $0C
00095FF1 E701                       	dc.b	smpsNoAttack, $01
00095FF3 E108                       	smpsAlterNote       $08
00095FF5 E701                       	dc.b	smpsNoAttack, $01
00095FF7 E10C                       	smpsAlterNote       $0C
00095FF9 E701                       	dc.b	smpsNoAttack, $01
00095FFB E10F                       	smpsAlterNote       $0F
00095FFD E701                       	dc.b	smpsNoAttack, $01
00095FFF E113                       	smpsAlterNote       $13
00096001 E701                       	dc.b	smpsNoAttack, $01
00096003 E10F                       	smpsAlterNote       $0F
00096005 E701                       	dc.b	smpsNoAttack, $01
00096007 E109                       	smpsAlterNote       $09
00096009 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009600D E10F                       	smpsAlterNote       $0F
0009600F C60D                       	dc.b	nA5, $0D
00096011 E109                       	smpsAlterNote       $09
00096013 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096017 E10C                       	smpsAlterNote       $0C
00096019 E701                       	dc.b	smpsNoAttack, $01
0009601B E112                       	smpsAlterNote       $12
0009601D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096021 E10C                       	smpsAlterNote       $0C
00096023 E701                       	dc.b	smpsNoAttack, $01
00096025 E109                       	smpsAlterNote       $09
00096027 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009602B E10F                       	smpsAlterNote       $0F
0009602D E701                       	dc.b	smpsNoAttack, $01
0009602F E113                       	smpsAlterNote       $13
00096031 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096037 E10D                       	smpsAlterNote       $0D
00096039 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00096041 E10C                       	smpsAlterNote       $0C
00096043 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00096049 E6FF                       	smpsAlterVol        $FF
0009604B E10B                       	smpsAlterNote       $0B
0009604D BF03 8001                  	dc.b	nD5, $03, nRst, $01
00096051 E10C                       	smpsAlterNote       $0C
00096053 C103                       	dc.b	nE5, $03
00096055 E10D                       	smpsAlterNote       $0D
00096057 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00096061 E10B                       	smpsAlterNote       $0B
00096063 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00096067 E107                       	smpsAlterNote       $07
00096069 E701                       	dc.b	smpsNoAttack, $01
0009606B E104                       	smpsAlterNote       $04
0009606D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096071 E10A                       	smpsAlterNote       $0A
00096073 E701                       	dc.b	smpsNoAttack, $01
00096075 E10D                       	smpsAlterNote       $0D
00096077 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009607B E107                       	smpsAlterNote       $07
0009607D E701                       	dc.b	smpsNoAttack, $01
0009607F E104                       	smpsAlterNote       $04
00096081 8001                       	dc.b	nRst, $01
00096083 E110                       	smpsAlterNote       $10
00096085 C703                       	dc.b	nBb5, $03
00096087 E10F                       	smpsAlterNote       $0F
00096089 C603 8001                  	dc.b	nA5, $03, nRst, $01
0009608D E10D                       	smpsAlterNote       $0D
0009608F C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00096093 E10C                       	smpsAlterNote       $0C
00096095 E701                       	dc.b	smpsNoAttack, $01
00096097 E108                       	smpsAlterNote       $08
00096099 E701                       	dc.b	smpsNoAttack, $01
0009609B E109                       	smpsAlterNote       $09
0009609D E701                       	dc.b	smpsNoAttack, $01
0009609F E10F                       	smpsAlterNote       $0F
000960A1 E701                       	dc.b	smpsNoAttack, $01
000960A3 E113                       	smpsAlterNote       $13
000960A5 E701                       	dc.b	smpsNoAttack, $01
000960A7 E10F                       	smpsAlterNote       $0F
000960A9 E701                       	dc.b	smpsNoAttack, $01
000960AB E10C                       	smpsAlterNote       $0C
000960AD E701                       	dc.b	smpsNoAttack, $01
000960AF E108                       	smpsAlterNote       $08
000960B1 E701                       	dc.b	smpsNoAttack, $01
000960B3 E10C                       	smpsAlterNote       $0C
000960B5 E701                       	dc.b	smpsNoAttack, $01
000960B7 E112                       	smpsAlterNote       $12
000960B9 E701                       	dc.b	smpsNoAttack, $01
000960BB E113                       	smpsAlterNote       $13
000960BD E701                       	dc.b	smpsNoAttack, $01
000960BF E10F                       	smpsAlterNote       $0F
000960C1 E701                       	dc.b	smpsNoAttack, $01
000960C3 E109                       	smpsAlterNote       $09
000960C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960C9 E10C                       	smpsAlterNote       $0C
000960CB E701                       	dc.b	smpsNoAttack, $01
000960CD E112                       	smpsAlterNote       $12
000960CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960D3 E10C                       	smpsAlterNote       $0C
000960D5 E701                       	dc.b	smpsNoAttack, $01
000960D7 E109                       	smpsAlterNote       $09
000960D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960DD E10F                       	smpsAlterNote       $0F
000960DF E701                       	dc.b	smpsNoAttack, $01
000960E1 E113                       	smpsAlterNote       $13
000960E3 E701                       	dc.b	smpsNoAttack, $01
000960E5 E112                       	smpsAlterNote       $12
000960E7 E701                       	dc.b	smpsNoAttack, $01
000960E9 E10C                       	smpsAlterNote       $0C
000960EB E701                       	dc.b	smpsNoAttack, $01
000960ED E108                       	smpsAlterNote       $08
000960EF E701                       	dc.b	smpsNoAttack, $01
000960F1 E10C                       	smpsAlterNote       $0C
000960F3 E701                       	dc.b	smpsNoAttack, $01
000960F5 E10F                       	smpsAlterNote       $0F
000960F7 E701                       	dc.b	smpsNoAttack, $01
000960F9 E113                       	smpsAlterNote       $13
000960FB E701                       	dc.b	smpsNoAttack, $01
000960FD E10F                       	smpsAlterNote       $0F
000960FF BA03 8001                  	dc.b	nA4, $03, nRst, $01
00096103 E110                       	smpsAlterNote       $10
00096105 BB03                       	dc.b	nBb4, $03
00096107 E10F                       	smpsAlterNote       $0F
00096109 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0009610D E10B                       	smpsAlterNote       $0B
0009610F BF03                       	dc.b	nD5, $03
00096111 E10C                       	smpsAlterNote       $0C
00096113 C103 8001                  	dc.b	nE5, $03, nRst, $01
00096117 E10D                       	smpsAlterNote       $0D
00096119 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00096123 E10B                       	smpsAlterNote       $0B
00096125 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00096131 E110                       	smpsAlterNote       $10
00096133 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00096137 E10F                       	smpsAlterNote       $0F
00096139 C604                       	dc.b	nA5, $04
0009613B E10D                       	smpsAlterNote       $0D
0009613D C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00096143 E109                       	smpsAlterNote       $09
00096145 E701                       	dc.b	smpsNoAttack, $01
00096147 E108                       	smpsAlterNote       $08
00096149 E701                       	dc.b	smpsNoAttack, $01
0009614B E10C                       	smpsAlterNote       $0C
0009614D E701                       	dc.b	smpsNoAttack, $01
0009614F E112                       	smpsAlterNote       $12
00096151 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096155 E10F                       	smpsAlterNote       $0F
00096157 E701                       	dc.b	smpsNoAttack, $01
00096159 E109                       	smpsAlterNote       $09
0009615B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009615F E10F                       	smpsAlterNote       $0F
00096161 E701                       	dc.b	smpsNoAttack, $01
00096163 E112                       	smpsAlterNote       $12
00096165 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096169 E10C                       	smpsAlterNote       $0C
0009616B E701                       	dc.b	smpsNoAttack, $01
0009616D E108                       	smpsAlterNote       $08
0009616F E701                       	dc.b	smpsNoAttack, $01
00096171 E109                       	smpsAlterNote       $09
00096173 E701                       	dc.b	smpsNoAttack, $01
00096175 E10F                       	smpsAlterNote       $0F
00096177 E701                       	dc.b	smpsNoAttack, $01
00096179 E113                       	smpsAlterNote       $13
0009617B E701                       	dc.b	smpsNoAttack, $01
0009617D E10F                       	smpsAlterNote       $0F
0009617F E701                       	dc.b	smpsNoAttack, $01
00096181 E10C                       	smpsAlterNote       $0C
00096183 E701                       	dc.b	smpsNoAttack, $01
00096185 E108                       	smpsAlterNote       $08
00096187 E701                       	dc.b	smpsNoAttack, $01
00096189 E10C                       	smpsAlterNote       $0C
0009618B E701                       	dc.b	smpsNoAttack, $01
0009618D E112                       	smpsAlterNote       $12
0009618F E701                       	dc.b	smpsNoAttack, $01
00096191 E113                       	smpsAlterNote       $13
00096193 E701                       	dc.b	smpsNoAttack, $01
00096195 E10F                       	smpsAlterNote       $0F
00096197 E701                       	dc.b	smpsNoAttack, $01
00096199 E109                       	smpsAlterNote       $09
0009619B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009619F E10C                       	smpsAlterNote       $0C
000961A1 E701                       	dc.b	smpsNoAttack, $01
000961A3 E112                       	smpsAlterNote       $12
000961A5 E701                       	dc.b	smpsNoAttack, $01
000961A7 E113                       	smpsAlterNote       $13
000961A9 8001                       	dc.b	nRst, $01
000961AB E10F                       	smpsAlterNote       $0F
000961AD C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000961B9 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000961C1 E10D                       	smpsAlterNote       $0D
000961C3 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000961C9 E10B                       	smpsAlterNote       $0B
000961CB BF0D                       	dc.b	nD5, $0D
000961CD E108                       	smpsAlterNote       $08
000961CF E701                       	dc.b	smpsNoAttack, $01
000961D1 E104                       	smpsAlterNote       $04
000961D3 E701                       	dc.b	smpsNoAttack, $01
000961D5 E105                       	smpsAlterNote       $05
000961D7 E701                       	dc.b	smpsNoAttack, $01
000961D9 E10B                       	smpsAlterNote       $0B
000961DB E701                       	dc.b	smpsNoAttack, $01
000961DD E10F                       	smpsAlterNote       $0F
000961DF E701                       	dc.b	smpsNoAttack, $01
000961E1 E10B                       	smpsAlterNote       $0B
000961E3 E701                       	dc.b	smpsNoAttack, $01
000961E5 E108                       	smpsAlterNote       $08
000961E7 E701                       	dc.b	smpsNoAttack, $01
000961E9 E104                       	smpsAlterNote       $04
000961EB E701                       	dc.b	smpsNoAttack, $01
000961ED E108                       	smpsAlterNote       $08
000961EF E701                       	dc.b	smpsNoAttack, $01
000961F1 E10E                       	smpsAlterNote       $0E
000961F3 E701                       	dc.b	smpsNoAttack, $01
000961F5 E10F                       	smpsAlterNote       $0F
000961F7 E701                       	dc.b	smpsNoAttack, $01
000961F9 E10C                       	smpsAlterNote       $0C
000961FB C101                       	dc.b	nE5, $01
000961FD E10D                       	smpsAlterNote       $0D
000961FF C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00096207 E10F                       	smpsAlterNote       $0F
00096209 C607                       	dc.b	nA5, $07
0009620B E10C                       	smpsAlterNote       $0C
0009620D CD07                       	dc.b	nE6, $07
0009620F E10D                       	smpsAlterNote       $0D
00096211 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00096215 E10C                       	smpsAlterNote       $0C
00096217 CD03                       	dc.b	nE6, $03
00096219 E10A                       	smpsAlterNote       $0A
0009621B C903 8001                  	dc.b	nC6, $03, nRst, $01
0009621F E10D                       	smpsAlterNote       $0D
00096221 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00096227 E10A                       	smpsAlterNote       $0A
00096229 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009622D E110                       	smpsAlterNote       $10
0009622F E701                       	dc.b	smpsNoAttack, $01
00096231 E114                       	smpsAlterNote       $14
00096233 E701                       	dc.b	smpsNoAttack, $01
00096235 E113                       	smpsAlterNote       $13
00096237 E701                       	dc.b	smpsNoAttack, $01
00096239 E10D                       	smpsAlterNote       $0D
0009623B E701                       	dc.b	smpsNoAttack, $01
0009623D E109                       	smpsAlterNote       $09
0009623F E701                       	dc.b	smpsNoAttack, $01
00096241 E10D                       	smpsAlterNote       $0D
00096243 E701                       	dc.b	smpsNoAttack, $01
00096245 E110                       	smpsAlterNote       $10
00096247 E701                       	dc.b	smpsNoAttack, $01
00096249 E114                       	smpsAlterNote       $14
0009624B E701                       	dc.b	smpsNoAttack, $01
0009624D E10F                       	smpsAlterNote       $0F
0009624F C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00096253 E10C                       	smpsAlterNote       $0C
00096255 E701                       	dc.b	smpsNoAttack, $01
00096257 E108                       	smpsAlterNote       $08
00096259 E701                       	dc.b	smpsNoAttack, $01
0009625B E10C                       	smpsAlterNote       $0C
0009625D E701                       	dc.b	smpsNoAttack, $01
0009625F E10F                       	smpsAlterNote       $0F
00096261 E701                       	dc.b	smpsNoAttack, $01
00096263 E113                       	smpsAlterNote       $13
00096265 E701                       	dc.b	smpsNoAttack, $01
00096267 E10F                       	smpsAlterNote       $0F
00096269 E701                       	dc.b	smpsNoAttack, $01
0009626B E109                       	smpsAlterNote       $09
0009626D E701                       	dc.b	smpsNoAttack, $01
0009626F E108                       	smpsAlterNote       $08
00096271 E701                       	dc.b	smpsNoAttack, $01
00096273 E10C                       	smpsAlterNote       $0C
00096275 E701                       	dc.b	smpsNoAttack, $01
00096277 E112                       	smpsAlterNote       $12
00096279 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009627D E10F                       	smpsAlterNote       $0F
0009627F E701                       	dc.b	smpsNoAttack, $01
00096281 E109                       	smpsAlterNote       $09
00096283 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096287 E10F                       	smpsAlterNote       $0F
00096289 E701                       	dc.b	smpsNoAttack, $01
0009628B E112                       	smpsAlterNote       $12
0009628D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096291 E10C                       	smpsAlterNote       $0C
00096293 E701                       	dc.b	smpsNoAttack, $01
00096295 E108                       	smpsAlterNote       $08
00096297 E701                       	dc.b	smpsNoAttack, $01
00096299 E109                       	smpsAlterNote       $09
0009629B E701                       	dc.b	smpsNoAttack, $01
0009629D E10F                       	smpsAlterNote       $0F
0009629F E701                       	dc.b	smpsNoAttack, $01
000962A1 E113                       	smpsAlterNote       $13
000962A3 E701                       	dc.b	smpsNoAttack, $01
000962A5 E10F                       	smpsAlterNote       $0F
000962A7 E701                       	dc.b	smpsNoAttack, $01
000962A9 E10C                       	smpsAlterNote       $0C
000962AB E701                       	dc.b	smpsNoAttack, $01
000962AD E108                       	smpsAlterNote       $08
000962AF E701                       	dc.b	smpsNoAttack, $01
000962B1 E10C                       	smpsAlterNote       $0C
000962B3 E701                       	dc.b	smpsNoAttack, $01
000962B5 E112                       	smpsAlterNote       $12
000962B7 E701                       	dc.b	smpsNoAttack, $01
000962B9 E113                       	smpsAlterNote       $13
000962BB E701                       	dc.b	smpsNoAttack, $01
000962BD E10F                       	smpsAlterNote       $0F
000962BF E701                       	dc.b	smpsNoAttack, $01
000962C1 E109                       	smpsAlterNote       $09
000962C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962C7 E10C                       	smpsAlterNote       $0C
000962C9 E701                       	dc.b	smpsNoAttack, $01
000962CB E112                       	smpsAlterNote       $12
000962CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962D1 E10C                       	smpsAlterNote       $0C
000962D3 E701                       	dc.b	smpsNoAttack, $01
000962D5 E109                       	smpsAlterNote       $09
000962D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962DB E10F                       	smpsAlterNote       $0F
000962DD E701                       	dc.b	smpsNoAttack, $01
000962DF E113                       	smpsAlterNote       $13
000962E1 E701                       	dc.b	smpsNoAttack, $01
000962E3 E112                       	smpsAlterNote       $12
000962E5 E701                       	dc.b	smpsNoAttack, $01
000962E7 E10C                       	smpsAlterNote       $0C
000962E9 E701                       	dc.b	smpsNoAttack, $01
000962EB E109                       	smpsAlterNote       $09
000962ED 8001                       	dc.b	nRst, $01
000962EF E10F                       	smpsAlterNote       $0F
000962F1 C60D                       	dc.b	nA5, $0D
000962F3 E10C                       	smpsAlterNote       $0C
000962F5 E701                       	dc.b	smpsNoAttack, $01
000962F7 E108                       	smpsAlterNote       $08
000962F9 E701                       	dc.b	smpsNoAttack, $01
000962FB E10C                       	smpsAlterNote       $0C
000962FD E701                       	dc.b	smpsNoAttack, $01
000962FF E112                       	smpsAlterNote       $12
00096301 E701                       	dc.b	smpsNoAttack, $01
00096303 E113                       	smpsAlterNote       $13
00096305 E701                       	dc.b	smpsNoAttack, $01
00096307 E10F                       	smpsAlterNote       $0F
00096309 E701                       	dc.b	smpsNoAttack, $01
0009630B E109                       	smpsAlterNote       $09
0009630D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096311 E10C                       	smpsAlterNote       $0C
00096313 E701                       	dc.b	smpsNoAttack, $01
00096315 E112                       	smpsAlterNote       $12
00096317 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009631B E10C                       	smpsAlterNote       $0C
0009631D E701                       	dc.b	smpsNoAttack, $01
0009631F E109                       	smpsAlterNote       $09
00096321 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096325 E10F                       	smpsAlterNote       $0F
00096327 E701                       	dc.b	smpsNoAttack, $01
00096329 E113                       	smpsAlterNote       $13
0009632B E701                       	dc.b	smpsNoAttack, $01
0009632D E112                       	smpsAlterNote       $12
0009632F E701                       	dc.b	smpsNoAttack, $01
00096331 E10C                       	smpsAlterNote       $0C
00096333 E701                       	dc.b	smpsNoAttack, $01
00096335 E108                       	smpsAlterNote       $08
00096337 E701                       	dc.b	smpsNoAttack, $01
00096339 E10C                       	smpsAlterNote       $0C
0009633B E701                       	dc.b	smpsNoAttack, $01
0009633D E10F                       	smpsAlterNote       $0F
0009633F E701                       	dc.b	smpsNoAttack, $01
00096341 E113                       	smpsAlterNote       $13
00096343 E701                       	dc.b	smpsNoAttack, $01
00096345 E10F                       	smpsAlterNote       $0F
00096347 E701                       	dc.b	smpsNoAttack, $01
00096349 E109                       	smpsAlterNote       $09
0009634B E701                       	dc.b	smpsNoAttack, $01
0009634D E108                       	smpsAlterNote       $08
0009634F E701                       	dc.b	smpsNoAttack, $01
00096351 E10C                       	smpsAlterNote       $0C
00096353 E701                       	dc.b	smpsNoAttack, $01
00096355 E112                       	smpsAlterNote       $12
00096357 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009635B E10F                       	smpsAlterNote       $0F
0009635D E701                       	dc.b	smpsNoAttack, $01
0009635F E109                       	smpsAlterNote       $09
00096361 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096365 E10F                       	smpsAlterNote       $0F
00096367 E701                       	dc.b	smpsNoAttack, $01
00096369 E112                       	smpsAlterNote       $12
0009636B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009636F E10C                       	smpsAlterNote       $0C
00096371 E701                       	dc.b	smpsNoAttack, $01
00096373 E108                       	smpsAlterNote       $08
00096375 E701                       	dc.b	smpsNoAttack, $01
00096377 E10C                       	smpsAlterNote       $0C
00096379 E701                       	dc.b	smpsNoAttack, $01
0009637B E10F                       	smpsAlterNote       $0F
0009637D E701                       	dc.b	smpsNoAttack, $01
0009637F E113                       	smpsAlterNote       $13
00096381 E701                       	dc.b	smpsNoAttack, $01
00096383 E10F                       	smpsAlterNote       $0F
00096385 E701                       	dc.b	smpsNoAttack, $01
00096387 E109                       	smpsAlterNote       $09
00096389 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009638F E601                       	smpsAlterVol        $01
00096391 E10F                       	smpsAlterNote       $0F
00096393 C604                       	dc.b	nA5, $04
00096395 E10D                       	smpsAlterNote       $0D
00096397 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0009639D E10B                       	smpsAlterNote       $0B
0009639F BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000963A7 E10F                       	smpsAlterNote       $0F
000963A9 C604 8001                  	dc.b	nA5, $04, nRst, $01
000963AD E10D                       	smpsAlterNote       $0D
000963AF C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000963B5 E10C                       	smpsAlterNote       $0C
000963B7 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000963BD E10A                       	smpsAlterNote       $0A
000963BF C904 8001                  	dc.b	nC6, $04, nRst, $01
000963C3 E110                       	smpsAlterNote       $10
000963C5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000963C9 E10F                       	smpsAlterNote       $0F
000963CB C604                       	dc.b	nA5, $04
000963CD E10D                       	smpsAlterNote       $0D
000963CF C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000963DB E109                       	smpsAlterNote       $09
000963DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963E1 E10F                       	smpsAlterNote       $0F
000963E3 E701                       	dc.b	smpsNoAttack, $01
000963E5 E112                       	smpsAlterNote       $12
000963E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963EB E10C                       	smpsAlterNote       $0C
000963ED E701                       	dc.b	smpsNoAttack, $01
000963EF E108                       	smpsAlterNote       $08
000963F1 E701                       	dc.b	smpsNoAttack, $01
000963F3 E10C                       	smpsAlterNote       $0C
000963F5 E701                       	dc.b	smpsNoAttack, $01
000963F7 E10F                       	smpsAlterNote       $0F
000963F9 E701                       	dc.b	smpsNoAttack, $01
000963FB E113                       	smpsAlterNote       $13
000963FD E701                       	dc.b	smpsNoAttack, $01
000963FF E10D                       	smpsAlterNote       $0D
00096401 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00096407 E10C                       	smpsAlterNote       $0C
00096409 C10D                       	dc.b	nE5, $0D
0009640B E109                       	smpsAlterNote       $09
0009640D E701                       	dc.b	smpsNoAttack, $01
0009640F E105                       	smpsAlterNote       $05
00096411 E701                       	dc.b	smpsNoAttack, $01
00096413 E106                       	smpsAlterNote       $06
00096415 E701                       	dc.b	smpsNoAttack, $01
00096417 E10C                       	smpsAlterNote       $0C
00096419 E701                       	dc.b	smpsNoAttack, $01
0009641B E110                       	smpsAlterNote       $10
0009641D E701                       	dc.b	smpsNoAttack, $01
0009641F E10C                       	smpsAlterNote       $0C
00096421 E701                       	dc.b	smpsNoAttack, $01
00096423 E109                       	smpsAlterNote       $09
00096425 E701                       	dc.b	smpsNoAttack, $01
00096427 E105                       	smpsAlterNote       $05
00096429 E701                       	dc.b	smpsNoAttack, $01
0009642B E109                       	smpsAlterNote       $09
0009642D E701                       	dc.b	smpsNoAttack, $01
0009642F E10F                       	smpsAlterNote       $0F
00096431 E701                       	dc.b	smpsNoAttack, $01
00096433 E110                       	smpsAlterNote       $10
00096435 E701                       	dc.b	smpsNoAttack, $01
00096437 E10C                       	smpsAlterNote       $0C
00096439 E701                       	dc.b	smpsNoAttack, $01
0009643B E106                       	smpsAlterNote       $06
0009643D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096441 E109                       	smpsAlterNote       $09
00096443 E701                       	dc.b	smpsNoAttack, $01
00096445 E10F                       	smpsAlterNote       $0F
00096447 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009644B E109                       	smpsAlterNote       $09
0009644D E701                       	dc.b	smpsNoAttack, $01
0009644F E106                       	smpsAlterNote       $06
00096451 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096455 E10C                       	smpsAlterNote       $0C
00096457 E701                       	dc.b	smpsNoAttack, $01
00096459 E110                       	smpsAlterNote       $10
0009645B E701                       	dc.b	smpsNoAttack, $01
0009645D E10F                       	smpsAlterNote       $0F
0009645F E701                       	dc.b	smpsNoAttack, $01
00096461 E109                       	smpsAlterNote       $09
00096463 E701                       	dc.b	smpsNoAttack, $01
00096465 E105                       	smpsAlterNote       $05
00096467 E701                       	dc.b	smpsNoAttack, $01
00096469 E109                       	smpsAlterNote       $09
0009646B E701                       	dc.b	smpsNoAttack, $01
0009646D E10C                       	smpsAlterNote       $0C
0009646F E701                       	dc.b	smpsNoAttack, $01
00096471 E110                       	smpsAlterNote       $10
00096473 E701                       	dc.b	smpsNoAttack, $01
00096475 E10C                       	smpsAlterNote       $0C
00096477 E701                       	dc.b	smpsNoAttack, $01
00096479 E106                       	smpsAlterNote       $06
0009647B E701                       	dc.b	smpsNoAttack, $01
0009647D E105                       	smpsAlterNote       $05
0009647F E701                       	dc.b	smpsNoAttack, $01
00096481 E109                       	smpsAlterNote       $09
00096483 E701                       	dc.b	smpsNoAttack, $01
00096485 E10F                       	smpsAlterNote       $0F
00096487 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009648B E10C                       	smpsAlterNote       $0C
0009648D E701                       	dc.b	smpsNoAttack, $01
0009648F E106                       	smpsAlterNote       $06
00096491 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096495 E10C                       	smpsAlterNote       $0C
00096497 E701                       	dc.b	smpsNoAttack, $01
00096499 E10F                       	smpsAlterNote       $0F
0009649B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009649F E109                       	smpsAlterNote       $09
000964A1 E701                       	dc.b	smpsNoAttack, $01
000964A3 E105                       	smpsAlterNote       $05
000964A5 E701                       	dc.b	smpsNoAttack, $01
000964A7 E106                       	smpsAlterNote       $06
000964A9 E701                       	dc.b	smpsNoAttack, $01
000964AB E10C                       	smpsAlterNote       $0C
000964AD E701                       	dc.b	smpsNoAttack, $01
000964AF E110                       	smpsAlterNote       $10
000964B1 E701                       	dc.b	smpsNoAttack, $01
000964B3 E10C                       	smpsAlterNote       $0C
000964B5 E701                       	dc.b	smpsNoAttack, $01
000964B7 E109                       	smpsAlterNote       $09
000964B9 E701                       	dc.b	smpsNoAttack, $01
000964BB E105                       	smpsAlterNote       $05
000964BD E701                       	dc.b	smpsNoAttack, $01
000964BF E109                       	smpsAlterNote       $09
000964C1 E701                       	dc.b	smpsNoAttack, $01
000964C3 E10F                       	smpsAlterNote       $0F
000964C5 E701                       	dc.b	smpsNoAttack, $01
000964C7 E110                       	smpsAlterNote       $10
000964C9 E701                       	dc.b	smpsNoAttack, $01
000964CB E10C                       	smpsAlterNote       $0C
000964CD E701                       	dc.b	smpsNoAttack, $01
000964CF E106                       	smpsAlterNote       $06
000964D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964D5 E109                       	smpsAlterNote       $09
000964D7 E701                       	dc.b	smpsNoAttack, $01
000964D9 E10F                       	smpsAlterNote       $0F
000964DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964DF E109                       	smpsAlterNote       $09
000964E1 E701                       	dc.b	smpsNoAttack, $01
000964E3 E106                       	smpsAlterNote       $06
000964E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964E9 E10C                       	smpsAlterNote       $0C
000964EB E701                       	dc.b	smpsNoAttack, $01
000964ED E110                       	smpsAlterNote       $10
000964EF E701                       	dc.b	smpsNoAttack, $01
000964F1 E10F                       	smpsAlterNote       $0F
000964F3 E701                       	dc.b	smpsNoAttack, $01
000964F5 E109                       	smpsAlterNote       $09
000964F7 E701                       	dc.b	smpsNoAttack, $01
000964F9 E105                       	smpsAlterNote       $05
000964FB E701                       	dc.b	smpsNoAttack, $01
000964FD E109                       	smpsAlterNote       $09
000964FF E701                       	dc.b	smpsNoAttack, $01
00096501 E10C                       	smpsAlterNote       $0C
00096503 E701                       	dc.b	smpsNoAttack, $01
00096505 E110                       	smpsAlterNote       $10
00096507 E701                       	dc.b	smpsNoAttack, $01
00096509 E10C                       	smpsAlterNote       $0C
0009650B E701                       	dc.b	smpsNoAttack, $01
0009650D E106                       	smpsAlterNote       $06
0009650F E701                       	dc.b	smpsNoAttack, $01
00096511 E105                       	smpsAlterNote       $05
00096513 E701                       	dc.b	smpsNoAttack, $01
00096515 E109                       	smpsAlterNote       $09
00096517 E701                       	dc.b	smpsNoAttack, $01
00096519 E10F                       	smpsAlterNote       $0F
0009651B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009651F E109                       	smpsAlterNote       $09
00096521 E701                       	dc.b	smpsNoAttack, $01
00096523 E106                       	smpsAlterNote       $06
00096525 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096529 E10C                       	smpsAlterNote       $0C
0009652B E701                       	dc.b	smpsNoAttack, $01
0009652D E110                       	smpsAlterNote       $10
0009652F E701                       	dc.b	smpsNoAttack, $01
00096531 E10F                       	smpsAlterNote       $0F
00096533 E701                       	dc.b	smpsNoAttack, $01
00096535 E109                       	smpsAlterNote       $09
00096537 E701                       	dc.b	smpsNoAttack, $01
00096539 E105                       	smpsAlterNote       $05
0009653B E701                       	dc.b	smpsNoAttack, $01
0009653D E109                       	smpsAlterNote       $09
0009653F E701                       	dc.b	smpsNoAttack, $01
00096541 E10C                       	smpsAlterNote       $0C
00096543 E701                       	dc.b	smpsNoAttack, $01
00096545 E110                       	smpsAlterNote       $10
00096547 E701                       	dc.b	smpsNoAttack, $01
00096549 E10C                       	smpsAlterNote       $0C
0009654B E701                       	dc.b	smpsNoAttack, $01
0009654D E106                       	smpsAlterNote       $06
0009654F E701                       	dc.b	smpsNoAttack, $01
00096551 E105                       	smpsAlterNote       $05
00096553 E701                       	dc.b	smpsNoAttack, $01
00096555 E109                       	smpsAlterNote       $09
00096557 E701                       	dc.b	smpsNoAttack, $01
00096559 E10F                       	smpsAlterNote       $0F
0009655B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009655F E10C                       	smpsAlterNote       $0C
00096561 E701                       	dc.b	smpsNoAttack, $01
00096563 E106                       	smpsAlterNote       $06
00096565 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096569 E10C                       	smpsAlterNote       $0C
0009656B E701                       	dc.b	smpsNoAttack, $01
0009656D E10F                       	smpsAlterNote       $0F
0009656F E701                       	dc.b	smpsNoAttack, $01
00096571 E110                       	smpsAlterNote       $10
00096573 8001                       	dc.b	nRst, $01
00096575 E10F                       	smpsAlterNote       $0F
00096577 C604                       	dc.b	nA5, $04
00096579 E10D                       	smpsAlterNote       $0D
0009657B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00096581 E10B                       	smpsAlterNote       $0B
00096583 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
00096589 E10F                       	smpsAlterNote       $0F
0009658B C604 8001                  	dc.b	nA5, $04, nRst, $01
0009658F E10D                       	smpsAlterNote       $0D
00096591 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00096597 E10C                       	smpsAlterNote       $0C
00096599 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0009659F E10A                       	smpsAlterNote       $0A
000965A1 C904                       	dc.b	nC6, $04
000965A3 E110                       	smpsAlterNote       $10
000965A5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000965A9 E10F                       	smpsAlterNote       $0F
000965AB C604                       	dc.b	nA5, $04
000965AD E10D                       	smpsAlterNote       $0D
000965AF C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000965BB E109                       	smpsAlterNote       $09
000965BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965C1 E10F                       	smpsAlterNote       $0F
000965C3 E701                       	dc.b	smpsNoAttack, $01
000965C5 E112                       	smpsAlterNote       $12
000965C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965CB E10C                       	smpsAlterNote       $0C
000965CD E701                       	dc.b	smpsNoAttack, $01
000965CF E108                       	smpsAlterNote       $08
000965D1 E701                       	dc.b	smpsNoAttack, $01
000965D3 E109                       	smpsAlterNote       $09
000965D5 E701                       	dc.b	smpsNoAttack, $01
000965D7 E10F                       	smpsAlterNote       $0F
000965D9 E701                       	dc.b	smpsNoAttack, $01
000965DB E113                       	smpsAlterNote       $13
000965DD E701                       	dc.b	smpsNoAttack, $01
000965DF E10D                       	smpsAlterNote       $0D
000965E1 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000965E7 E10C                       	smpsAlterNote       $0C
000965E9 C10D                       	dc.b	nE5, $0D
000965EB E109                       	smpsAlterNote       $09
000965ED E701                       	dc.b	smpsNoAttack, $01
000965EF E106                       	smpsAlterNote       $06
000965F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965F5 E10C                       	smpsAlterNote       $0C
000965F7 E701                       	dc.b	smpsNoAttack, $01
000965F9 E110                       	smpsAlterNote       $10
000965FB E701                       	dc.b	smpsNoAttack, $01
000965FD E10F                       	smpsAlterNote       $0F
000965FF E701                       	dc.b	smpsNoAttack, $01
00096601 E109                       	smpsAlterNote       $09
00096603 E701                       	dc.b	smpsNoAttack, $01
00096605 E105                       	smpsAlterNote       $05
00096607 E701                       	dc.b	smpsNoAttack, $01
00096609 E109                       	smpsAlterNote       $09
0009660B E701                       	dc.b	smpsNoAttack, $01
0009660D E10C                       	smpsAlterNote       $0C
0009660F E701                       	dc.b	smpsNoAttack, $01
00096611 E110                       	smpsAlterNote       $10
00096613 E701                       	dc.b	smpsNoAttack, $01
00096615 E10C                       	smpsAlterNote       $0C
00096617 E701                       	dc.b	smpsNoAttack, $01
00096619 E106                       	smpsAlterNote       $06
0009661B E701                       	dc.b	smpsNoAttack, $01
0009661D E105                       	smpsAlterNote       $05
0009661F E701                       	dc.b	smpsNoAttack, $01
00096621 E109                       	smpsAlterNote       $09
00096623 E701                       	dc.b	smpsNoAttack, $01
00096625 E10F                       	smpsAlterNote       $0F
00096627 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009662B E10C                       	smpsAlterNote       $0C
0009662D E701                       	dc.b	smpsNoAttack, $01
0009662F E106                       	smpsAlterNote       $06
00096631 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096635 E10C                       	smpsAlterNote       $0C
00096637 E701                       	dc.b	smpsNoAttack, $01
00096639 E10F                       	smpsAlterNote       $0F
0009663B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009663F E109                       	smpsAlterNote       $09
00096641 E701                       	dc.b	smpsNoAttack, $01
00096643 E105                       	smpsAlterNote       $05
00096645 E701                       	dc.b	smpsNoAttack, $01
00096647 E106                       	smpsAlterNote       $06
00096649 E701                       	dc.b	smpsNoAttack, $01
0009664B E10C                       	smpsAlterNote       $0C
0009664D E701                       	dc.b	smpsNoAttack, $01
0009664F E110                       	smpsAlterNote       $10
00096651 E701                       	dc.b	smpsNoAttack, $01
00096653 E10C                       	smpsAlterNote       $0C
00096655 E701                       	dc.b	smpsNoAttack, $01
00096657 E109                       	smpsAlterNote       $09
00096659 E701                       	dc.b	smpsNoAttack, $01
0009665B E105                       	smpsAlterNote       $05
0009665D E701                       	dc.b	smpsNoAttack, $01
0009665F E109                       	smpsAlterNote       $09
00096661 E701                       	dc.b	smpsNoAttack, $01
00096663 E10F                       	smpsAlterNote       $0F
00096665 E701                       	dc.b	smpsNoAttack, $01
00096667 E110                       	smpsAlterNote       $10
00096669 E701                       	dc.b	smpsNoAttack, $01
0009666B E10C                       	smpsAlterNote       $0C
0009666D E701                       	dc.b	smpsNoAttack, $01
0009666F E106                       	smpsAlterNote       $06
00096671 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096675 E109                       	smpsAlterNote       $09
00096677 E701                       	dc.b	smpsNoAttack, $01
00096679 E10F                       	smpsAlterNote       $0F
0009667B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009667F E109                       	smpsAlterNote       $09
00096681 E701                       	dc.b	smpsNoAttack, $01
00096683 E106                       	smpsAlterNote       $06
00096685 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096689 E10C                       	smpsAlterNote       $0C
0009668B E701                       	dc.b	smpsNoAttack, $01
0009668D E110                       	smpsAlterNote       $10
0009668F E701                       	dc.b	smpsNoAttack, $01
00096691 E10F                       	smpsAlterNote       $0F
00096693 E701                       	dc.b	smpsNoAttack, $01
00096695 E109                       	smpsAlterNote       $09
00096697 E701                       	dc.b	smpsNoAttack, $01
00096699 E105                       	smpsAlterNote       $05
0009669B E701                       	dc.b	smpsNoAttack, $01
0009669D E109                       	smpsAlterNote       $09
0009669F E701                       	dc.b	smpsNoAttack, $01
000966A1 E10F                       	smpsAlterNote       $0F
000966A3 E701                       	dc.b	smpsNoAttack, $01
000966A5 E110                       	smpsAlterNote       $10
000966A7 E701                       	dc.b	smpsNoAttack, $01
000966A9 E10C                       	smpsAlterNote       $0C
000966AB E701                       	dc.b	smpsNoAttack, $01
000966AD E106                       	smpsAlterNote       $06
000966AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966B3 E109                       	smpsAlterNote       $09
000966B5 E701                       	dc.b	smpsNoAttack, $01
000966B7 E10F                       	smpsAlterNote       $0F
000966B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966BD E109                       	smpsAlterNote       $09
000966BF E701                       	dc.b	smpsNoAttack, $01
000966C1 E106                       	smpsAlterNote       $06
000966C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966C7 E10C                       	smpsAlterNote       $0C
000966C9 E701                       	dc.b	smpsNoAttack, $01
000966CB E110                       	smpsAlterNote       $10
000966CD E701                       	dc.b	smpsNoAttack, $01
000966CF E10F                       	smpsAlterNote       $0F
000966D1 E701                       	dc.b	smpsNoAttack, $01
000966D3 E109                       	smpsAlterNote       $09
000966D5 E701                       	dc.b	smpsNoAttack, $01
000966D7 E105                       	smpsAlterNote       $05
000966D9 E701                       	dc.b	smpsNoAttack, $01
000966DB E109                       	smpsAlterNote       $09
000966DD E701                       	dc.b	smpsNoAttack, $01
000966DF E10C                       	smpsAlterNote       $0C
000966E1 E701                       	dc.b	smpsNoAttack, $01
000966E3 E110                       	smpsAlterNote       $10
000966E5 E701                       	dc.b	smpsNoAttack, $01
000966E7 E10C                       	smpsAlterNote       $0C
000966E9 E701                       	dc.b	smpsNoAttack, $01
000966EB E106                       	smpsAlterNote       $06
000966ED E701                       	dc.b	smpsNoAttack, $01
000966EF E105                       	smpsAlterNote       $05
000966F1 E701                       	dc.b	smpsNoAttack, $01
000966F3 E109                       	smpsAlterNote       $09
000966F5 E701                       	dc.b	smpsNoAttack, $01
000966F7 E10F                       	smpsAlterNote       $0F
000966F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966FD E10C                       	smpsAlterNote       $0C
000966FF E701                       	dc.b	smpsNoAttack, $01
00096701 E106                       	smpsAlterNote       $06
00096703 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096707 E10C                       	smpsAlterNote       $0C
00096709 E701                       	dc.b	smpsNoAttack, $01
0009670B E10F                       	smpsAlterNote       $0F
0009670D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096711 E109                       	smpsAlterNote       $09
00096713 E701                       	dc.b	smpsNoAttack, $01
00096715 E105                       	smpsAlterNote       $05
00096717 E701                       	dc.b	smpsNoAttack, $01
00096719 E106                       	smpsAlterNote       $06
0009671B E701                       	dc.b	smpsNoAttack, $01
0009671D E10C                       	smpsAlterNote       $0C
0009671F E701                       	dc.b	smpsNoAttack, $01
00096721 E110                       	smpsAlterNote       $10
00096723 E701                       	dc.b	smpsNoAttack, $01
00096725 E10C                       	smpsAlterNote       $0C
00096727 E701                       	dc.b	smpsNoAttack, $01
00096729 E109                       	smpsAlterNote       $09
0009672B E701                       	dc.b	smpsNoAttack, $01
0009672D E105                       	smpsAlterNote       $05
0009672F E701                       	dc.b	smpsNoAttack, $01
00096731 E109                       	smpsAlterNote       $09
00096733 E701                       	dc.b	smpsNoAttack, $01
00096735 E10F                       	smpsAlterNote       $0F
00096737 E701                       	dc.b	smpsNoAttack, $01
00096739 E110                       	smpsAlterNote       $10
0009673B E701                       	dc.b	smpsNoAttack, $01
0009673D E10C                       	smpsAlterNote       $0C
0009673F E701                       	dc.b	smpsNoAttack, $01
00096741 E106                       	smpsAlterNote       $06
00096743 E701                       	dc.b	smpsNoAttack, $01
00096745 E10B                       	smpsAlterNote       $0B
00096747 BF02                       	dc.b	nD5, $02
00096749 E10C                       	smpsAlterNote       $0C
0009674B C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00096751 E109                       	smpsAlterNote       $09
00096753 E701                       	dc.b	smpsNoAttack, $01
00096755 E105                       	smpsAlterNote       $05
00096757 E701                       	dc.b	smpsNoAttack, $01
00096759 E109                       	smpsAlterNote       $09
0009675B E701                       	dc.b	smpsNoAttack, $01
0009675D E10F                       	smpsAlterNote       $0F
0009675F E701                       	dc.b	smpsNoAttack, $01
00096761 E110                       	smpsAlterNote       $10
00096763 E701                       	dc.b	smpsNoAttack, $01
00096765 E10C                       	smpsAlterNote       $0C
00096767 E701                       	dc.b	smpsNoAttack, $01
00096769 E106                       	smpsAlterNote       $06
0009676B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009676F E109                       	smpsAlterNote       $09
00096771 E701                       	dc.b	smpsNoAttack, $01
00096773 E10F                       	smpsAlterNote       $0F
00096775 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096779 E109                       	smpsAlterNote       $09
0009677B E701                       	dc.b	smpsNoAttack, $01
0009677D E106                       	smpsAlterNote       $06
0009677F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096783 E10C                       	smpsAlterNote       $0C
00096785 E701                       	dc.b	smpsNoAttack, $01
00096787 E110                       	smpsAlterNote       $10
00096789 E701                       	dc.b	smpsNoAttack, $01
0009678B E10F                       	smpsAlterNote       $0F
0009678D E701                       	dc.b	smpsNoAttack, $01
0009678F E109                       	smpsAlterNote       $09
00096791 E701                       	dc.b	smpsNoAttack, $01
00096793 E105                       	smpsAlterNote       $05
00096795 E701                       	dc.b	smpsNoAttack, $01
00096797 E109                       	smpsAlterNote       $09
00096799 E701                       	dc.b	smpsNoAttack, $01
0009679B E10C                       	smpsAlterNote       $0C
0009679D E701                       	dc.b	smpsNoAttack, $01
0009679F E110                       	smpsAlterNote       $10
000967A1 E701                       	dc.b	smpsNoAttack, $01
000967A3 E10C                       	smpsAlterNote       $0C
000967A5 E701                       	dc.b	smpsNoAttack, $01
000967A7 E106                       	smpsAlterNote       $06
000967A9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000967AD E10D                       	smpsAlterNote       $0D
000967AF C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000967B7 E10C                       	smpsAlterNote       $0C
000967B9 C10D                       	dc.b	nE5, $0D
000967BB E106                       	smpsAlterNote       $06
000967BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967C1 E109                       	smpsAlterNote       $09
000967C3 E701                       	dc.b	smpsNoAttack, $01
000967C5 E10F                       	smpsAlterNote       $0F
000967C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967CB E109                       	smpsAlterNote       $09
000967CD E701                       	dc.b	smpsNoAttack, $01
000967CF E106                       	smpsAlterNote       $06
000967D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967D5 E10C                       	smpsAlterNote       $0C
000967D7 E701                       	dc.b	smpsNoAttack, $01
000967D9 E110                       	smpsAlterNote       $10
000967DB E701                       	dc.b	smpsNoAttack, $01
000967DD E10F                       	smpsAlterNote       $0F
000967DF E701                       	dc.b	smpsNoAttack, $01
000967E1 E109                       	smpsAlterNote       $09
000967E3 E701                       	dc.b	smpsNoAttack, $01
000967E5 E105                       	smpsAlterNote       $05
000967E7 E701                       	dc.b	smpsNoAttack, $01
000967E9 E106                       	smpsAlterNote       $06
000967EB 800F                       	dc.b	nRst, $0F
000967EF E6FF                       	smpsAlterVol        $FF
000967F1 E10F                       	smpsAlterNote       $0F
000967F3 BA01                       	dc.b	nA4, $01
000967F5 E110                       	smpsAlterNote       $10
000967F7 BB02                       	dc.b	nBb4, $02
000967F9 E10F                       	smpsAlterNote       $0F
000967FB BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00096801 E10B                       	smpsAlterNote       $0B
00096803 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00096807 E10C                       	smpsAlterNote       $0C
00096809 C103                       	dc.b	nE5, $03
0009680B E10D                       	smpsAlterNote       $0D
0009680D C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00096817 E10B                       	smpsAlterNote       $0B
00096819 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0009681D E104                       	smpsAlterNote       $04
0009681F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096823 E10A                       	smpsAlterNote       $0A
00096825 E701                       	dc.b	smpsNoAttack, $01
00096827 E10D                       	smpsAlterNote       $0D
00096829 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009682D E107                       	smpsAlterNote       $07
0009682F E701                       	dc.b	smpsNoAttack, $01
00096831 E104                       	smpsAlterNote       $04
00096833 8001                       	dc.b	nRst, $01
00096835 E110                       	smpsAlterNote       $10
00096837 C703                       	dc.b	nBb5, $03
00096839 E10F                       	smpsAlterNote       $0F
0009683B C603 8001                  	dc.b	nA5, $03, nRst, $01
0009683F E10D                       	smpsAlterNote       $0D
00096841 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00096845 E10C                       	smpsAlterNote       $0C
00096847 E701                       	dc.b	smpsNoAttack, $01
00096849 E108                       	smpsAlterNote       $08
0009684B E701                       	dc.b	smpsNoAttack, $01
0009684D E109                       	smpsAlterNote       $09
0009684F E701                       	dc.b	smpsNoAttack, $01
00096851 E10F                       	smpsAlterNote       $0F
00096853 E701                       	dc.b	smpsNoAttack, $01
00096855 E113                       	smpsAlterNote       $13
00096857 E701                       	dc.b	smpsNoAttack, $01
00096859 E10F                       	smpsAlterNote       $0F
0009685B E701                       	dc.b	smpsNoAttack, $01
0009685D E10C                       	smpsAlterNote       $0C
0009685F E701                       	dc.b	smpsNoAttack, $01
00096861 E108                       	smpsAlterNote       $08
00096863 E701                       	dc.b	smpsNoAttack, $01
00096865 E10C                       	smpsAlterNote       $0C
00096867 E701                       	dc.b	smpsNoAttack, $01
00096869 E112                       	smpsAlterNote       $12
0009686B E701                       	dc.b	smpsNoAttack, $01
0009686D E113                       	smpsAlterNote       $13
0009686F E701                       	dc.b	smpsNoAttack, $01
00096871 E10F                       	smpsAlterNote       $0F
00096873 E701                       	dc.b	smpsNoAttack, $01
00096875 E109                       	smpsAlterNote       $09
00096877 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009687B E10C                       	smpsAlterNote       $0C
0009687D E701                       	dc.b	smpsNoAttack, $01
0009687F E112                       	smpsAlterNote       $12
00096881 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096885 E10C                       	smpsAlterNote       $0C
00096887 E701                       	dc.b	smpsNoAttack, $01
00096889 E109                       	smpsAlterNote       $09
0009688B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009688F E10F                       	smpsAlterNote       $0F
00096891 E701                       	dc.b	smpsNoAttack, $01
00096893 E113                       	smpsAlterNote       $13
00096895 E701                       	dc.b	smpsNoAttack, $01
00096897 E112                       	smpsAlterNote       $12
00096899 E701                       	dc.b	smpsNoAttack, $01
0009689B E10C                       	smpsAlterNote       $0C
0009689D E701                       	dc.b	smpsNoAttack, $01
0009689F E108                       	smpsAlterNote       $08
000968A1 E701                       	dc.b	smpsNoAttack, $01
000968A3 E10C                       	smpsAlterNote       $0C
000968A5 E701                       	dc.b	smpsNoAttack, $01
000968A7 E10F                       	smpsAlterNote       $0F
000968A9 E701                       	dc.b	smpsNoAttack, $01
000968AB E113                       	smpsAlterNote       $13
000968AD E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000968B1 E10B                       	smpsAlterNote       $0B
000968B3 BF03                       	dc.b	nD5, $03
000968B5 E10C                       	smpsAlterNote       $0C
000968B7 C103 8001                  	dc.b	nE5, $03, nRst, $01
000968BB E10D                       	smpsAlterNote       $0D
000968BD C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000968C7 E10B                       	smpsAlterNote       $0B
000968C9 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000968D5 E110                       	smpsAlterNote       $10
000968D7 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000968DB E10F                       	smpsAlterNote       $0F
000968DD C604                       	dc.b	nA5, $04
000968DF E10D                       	smpsAlterNote       $0D
000968E1 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000968E7 E109                       	smpsAlterNote       $09
000968E9 E701                       	dc.b	smpsNoAttack, $01
000968EB E108                       	smpsAlterNote       $08
000968ED E701                       	dc.b	smpsNoAttack, $01
000968EF E10C                       	smpsAlterNote       $0C
000968F1 E701                       	dc.b	smpsNoAttack, $01
000968F3 E112                       	smpsAlterNote       $12
000968F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968F9 E10F                       	smpsAlterNote       $0F
000968FB E701                       	dc.b	smpsNoAttack, $01
000968FD E109                       	smpsAlterNote       $09
000968FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096903 E10F                       	smpsAlterNote       $0F
00096905 E701                       	dc.b	smpsNoAttack, $01
00096907 E112                       	smpsAlterNote       $12
00096909 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009690D E10C                       	smpsAlterNote       $0C
0009690F E701                       	dc.b	smpsNoAttack, $01
00096911 E108                       	smpsAlterNote       $08
00096913 E701                       	dc.b	smpsNoAttack, $01
00096915 E109                       	smpsAlterNote       $09
00096917 E701                       	dc.b	smpsNoAttack, $01
00096919 E10F                       	smpsAlterNote       $0F
0009691B E701                       	dc.b	smpsNoAttack, $01
0009691D E113                       	smpsAlterNote       $13
0009691F E701                       	dc.b	smpsNoAttack, $01
00096921 E10F                       	smpsAlterNote       $0F
00096923 E701                       	dc.b	smpsNoAttack, $01
00096925 E10C                       	smpsAlterNote       $0C
00096927 E701                       	dc.b	smpsNoAttack, $01
00096929 E108                       	smpsAlterNote       $08
0009692B E701                       	dc.b	smpsNoAttack, $01
0009692D E10C                       	smpsAlterNote       $0C
0009692F E701                       	dc.b	smpsNoAttack, $01
00096931 E112                       	smpsAlterNote       $12
00096933 E701                       	dc.b	smpsNoAttack, $01
00096935 E113                       	smpsAlterNote       $13
00096937 E701                       	dc.b	smpsNoAttack, $01
00096939 E10F                       	smpsAlterNote       $0F
0009693B E701                       	dc.b	smpsNoAttack, $01
0009693D E109                       	smpsAlterNote       $09
0009693F E701                       	dc.b	smpsNoAttack, $01
00096941 E10D                       	smpsAlterNote       $0D
00096943 C402                       	dc.b	nG5, $02
00096945 E10F                       	smpsAlterNote       $0F
00096947 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00096951 E10D                       	smpsAlterNote       $0D
00096953 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00096959 E10B                       	smpsAlterNote       $0B
0009695B BF0D                       	dc.b	nD5, $0D
0009695D E108                       	smpsAlterNote       $08
0009695F E701                       	dc.b	smpsNoAttack, $01
00096961 E104                       	smpsAlterNote       $04
00096963 E701                       	dc.b	smpsNoAttack, $01
00096965 E105                       	smpsAlterNote       $05
00096967 E701                       	dc.b	smpsNoAttack, $01
00096969 E10B                       	smpsAlterNote       $0B
0009696B E701                       	dc.b	smpsNoAttack, $01
0009696D E10F                       	smpsAlterNote       $0F
0009696F E701                       	dc.b	smpsNoAttack, $01
00096971 E10B                       	smpsAlterNote       $0B
00096973 E701                       	dc.b	smpsNoAttack, $01
00096975 E108                       	smpsAlterNote       $08
00096977 E701                       	dc.b	smpsNoAttack, $01
00096979 E104                       	smpsAlterNote       $04
0009697B E701                       	dc.b	smpsNoAttack, $01
0009697D E108                       	smpsAlterNote       $08
0009697F E701                       	dc.b	smpsNoAttack, $01
00096981 E10E                       	smpsAlterNote       $0E
00096983 E701                       	dc.b	smpsNoAttack, $01
00096985 E10F                       	smpsAlterNote       $0F
00096987 E701                       	dc.b	smpsNoAttack, $01
00096989 E10C                       	smpsAlterNote       $0C
0009698B C101                       	dc.b	nE5, $01
0009698D E10D                       	smpsAlterNote       $0D
0009698F C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00096997 E10F                       	smpsAlterNote       $0F
00096999 C607                       	dc.b	nA5, $07
0009699B E10C                       	smpsAlterNote       $0C
0009699D CD07                       	dc.b	nE6, $07
0009699F E10D                       	smpsAlterNote       $0D
000969A1 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000969A5 E10C                       	smpsAlterNote       $0C
000969A7 CD03                       	dc.b	nE6, $03
000969A9 E10A                       	smpsAlterNote       $0A
000969AB C903 8001                  	dc.b	nC6, $03, nRst, $01
000969AF E10D                       	smpsAlterNote       $0D
000969B1 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000969B7 E10A                       	smpsAlterNote       $0A
000969B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969BD E110                       	smpsAlterNote       $10
000969BF E701                       	dc.b	smpsNoAttack, $01
000969C1 E114                       	smpsAlterNote       $14
000969C3 E701                       	dc.b	smpsNoAttack, $01
000969C5 E113                       	smpsAlterNote       $13
000969C7 E701                       	dc.b	smpsNoAttack, $01
000969C9 E10D                       	smpsAlterNote       $0D
000969CB E701                       	dc.b	smpsNoAttack, $01
000969CD E109                       	smpsAlterNote       $09
000969CF E701                       	dc.b	smpsNoAttack, $01
000969D1 E10D                       	smpsAlterNote       $0D
000969D3 E701                       	dc.b	smpsNoAttack, $01
000969D5 E110                       	smpsAlterNote       $10
000969D7 E701                       	dc.b	smpsNoAttack, $01
000969D9 E114                       	smpsAlterNote       $14
000969DB E701                       	dc.b	smpsNoAttack, $01
000969DD E10F                       	smpsAlterNote       $0F
000969DF C607                       	dc.b	nA5, $07
000969E1 E10D                       	smpsAlterNote       $0D
000969E3 C40D                       	dc.b	nG5, $0D
000969E5 E10A                       	smpsAlterNote       $0A
000969E7 E701                       	dc.b	smpsNoAttack, $01
000969E9 E106                       	smpsAlterNote       $06
000969EB E701                       	dc.b	smpsNoAttack, $01
000969ED E10A                       	smpsAlterNote       $0A
000969EF E701                       	dc.b	smpsNoAttack, $01
000969F1 E10D                       	smpsAlterNote       $0D
000969F3 E701                       	dc.b	smpsNoAttack, $01
000969F5 E111                       	smpsAlterNote       $11
000969F7 E701                       	dc.b	smpsNoAttack, $01
000969F9 E10D                       	smpsAlterNote       $0D
000969FB E701                       	dc.b	smpsNoAttack, $01
000969FD E107                       	smpsAlterNote       $07
000969FF E701                       	dc.b	smpsNoAttack, $01
00096A01 E106                       	smpsAlterNote       $06
00096A03 E701                       	dc.b	smpsNoAttack, $01
00096A05 E10A                       	smpsAlterNote       $0A
00096A07 E701                       	dc.b	smpsNoAttack, $01
00096A09 E110                       	smpsAlterNote       $10
00096A0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A0F E10D                       	smpsAlterNote       $0D
00096A11 E701                       	dc.b	smpsNoAttack, $01
00096A13 E107                       	smpsAlterNote       $07
00096A15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A19 E10F                       	smpsAlterNote       $0F
00096A1B C60E                       	dc.b	nA5, $0E
00096A1D E109                       	smpsAlterNote       $09
00096A1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A23 E10F                       	smpsAlterNote       $0F
00096A25 E701                       	dc.b	smpsNoAttack, $01
00096A27 E112                       	smpsAlterNote       $12
00096A29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A2D E10C                       	smpsAlterNote       $0C
00096A2F E701                       	dc.b	smpsNoAttack, $01
00096A31 E108                       	smpsAlterNote       $08
00096A33 E701                       	dc.b	smpsNoAttack, $01
00096A35 E109                       	smpsAlterNote       $09
00096A37 E701                       	dc.b	smpsNoAttack, $01
00096A39 E10F                       	smpsAlterNote       $0F
00096A3B E701                       	dc.b	smpsNoAttack, $01
00096A3D E113                       	smpsAlterNote       $13
00096A3F E701                       	dc.b	smpsNoAttack, $01
00096A41 E10F                       	smpsAlterNote       $0F
00096A43 E701                       	dc.b	smpsNoAttack, $01
00096A45 E10C                       	smpsAlterNote       $0C
00096A47 E701                       	dc.b	smpsNoAttack, $01
00096A49 E108                       	smpsAlterNote       $08
00096A4B E701                       	dc.b	smpsNoAttack, $01
00096A4D E109                       	smpsAlterNote       $09
00096A4F 8001                       	dc.b	nRst, $01
00096A51 E110                       	smpsAlterNote       $10
00096A53 C70D                       	dc.b	nBb5, $0D
00096A55 E10D                       	smpsAlterNote       $0D
00096A57 E701                       	dc.b	smpsNoAttack, $01
00096A59 E109                       	smpsAlterNote       $09
00096A5B E701                       	dc.b	smpsNoAttack, $01
00096A5D E10D                       	smpsAlterNote       $0D
00096A5F E701                       	dc.b	smpsNoAttack, $01
00096A61 E113                       	smpsAlterNote       $13
00096A63 E701                       	dc.b	smpsNoAttack, $01
00096A65 E114                       	smpsAlterNote       $14
00096A67 E701                       	dc.b	smpsNoAttack, $01
00096A69 E110                       	smpsAlterNote       $10
00096A6B E701                       	dc.b	smpsNoAttack, $01
00096A6D E10A                       	smpsAlterNote       $0A
00096A6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A73 E10D                       	smpsAlterNote       $0D
00096A75 E701                       	dc.b	smpsNoAttack, $01
00096A77 E113                       	smpsAlterNote       $13
00096A79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A7D E10D                       	smpsAlterNote       $0D
00096A7F E701                       	dc.b	smpsNoAttack, $01
00096A81 E10A                       	smpsAlterNote       $0A
00096A83 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00096A8D E10B                       	smpsAlterNote       $0B
00096A8F 8001                       	dc.b	nRst, $01
00096A91 E10C                       	smpsAlterNote       $0C
00096A93 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00096A97 E10B                       	smpsAlterNote       $0B
00096A99 CB0D                       	dc.b	nD6, $0D
00096A9B E105                       	smpsAlterNote       $05
00096A9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AA1 E108                       	smpsAlterNote       $08
00096AA3 E701                       	dc.b	smpsNoAttack, $01
00096AA5 E10E                       	smpsAlterNote       $0E
00096AA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AAB E108                       	smpsAlterNote       $08
00096AAD E701                       	dc.b	smpsNoAttack, $01
00096AAF E105                       	smpsAlterNote       $05
00096AB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AB5 E10B                       	smpsAlterNote       $0B
00096AB7 E701                       	dc.b	smpsNoAttack, $01
00096AB9 E10F                       	smpsAlterNote       $0F
00096ABB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096ABF E10C                       	smpsAlterNote       $0C
00096AC1 CC0D                       	dc.b	nEb6, $0D
00096AC3 E106                       	smpsAlterNote       $06
00096AC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AC9 E109                       	smpsAlterNote       $09
00096ACB E701                       	dc.b	smpsNoAttack, $01
00096ACD E10C                       	smpsAlterNote       $0C
00096ACF 8001                       	dc.b	nRst, $01
00096AD1 E10A                       	smpsAlterNote       $0A
00096AD3 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00096ADF CB0E                       	dc.b	nD6, $0E
00096AE1 E105                       	smpsAlterNote       $05
00096AE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AE7 E10B                       	smpsAlterNote       $0B
00096AE9 E701                       	dc.b	smpsNoAttack, $01
00096AEB E10E                       	smpsAlterNote       $0E
00096AED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AF1 E108                       	smpsAlterNote       $08
00096AF3 E701                       	dc.b	smpsNoAttack, $01
00096AF5 E104                       	smpsAlterNote       $04
00096AF7 E701                       	dc.b	smpsNoAttack, $01
00096AF9 E105                       	smpsAlterNote       $05
00096AFB E701                       	dc.b	smpsNoAttack, $01
00096AFD E10B                       	smpsAlterNote       $0B
00096AFF E701                       	dc.b	smpsNoAttack, $01
00096B01 E10F                       	smpsAlterNote       $0F
00096B03 E701                       	dc.b	smpsNoAttack, $01
00096B05 E10D                       	smpsAlterNote       $0D
00096B07 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00096B0B E10C                       	smpsAlterNote       $0C
00096B0D CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00096B11 E10A                       	smpsAlterNote       $0A
00096B13 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00096B1F CB0D                       	dc.b	nD6, $0D
00096B21 E108                       	smpsAlterNote       $08
00096B23 E701                       	dc.b	smpsNoAttack, $01
00096B25 E104                       	smpsAlterNote       $04
00096B27 E701                       	dc.b	smpsNoAttack, $01
00096B29 E105                       	smpsAlterNote       $05
00096B2B E701                       	dc.b	smpsNoAttack, $01
00096B2D E10B                       	smpsAlterNote       $0B
00096B2F E701                       	dc.b	smpsNoAttack, $01
00096B31 E10F                       	smpsAlterNote       $0F
00096B33 E701                       	dc.b	smpsNoAttack, $01
00096B35 E10B                       	smpsAlterNote       $0B
00096B37 E701                       	dc.b	smpsNoAttack, $01
00096B39 E108                       	smpsAlterNote       $08
00096B3B E701                       	dc.b	smpsNoAttack, $01
00096B3D E104                       	smpsAlterNote       $04
00096B3F E701                       	dc.b	smpsNoAttack, $01
00096B41 E108                       	smpsAlterNote       $08
00096B43 E701                       	dc.b	smpsNoAttack, $01
00096B45 E10E                       	smpsAlterNote       $0E
00096B47 E701                       	dc.b	smpsNoAttack, $01
00096B49 E10F                       	smpsAlterNote       $0F
00096B4B E701                       	dc.b	smpsNoAttack, $01
00096B4D E10C                       	smpsAlterNote       $0C
00096B4F CC0D                       	dc.b	nEb6, $0D
00096B51 E109                       	smpsAlterNote       $09
00096B53 E701                       	dc.b	smpsNoAttack, $01
00096B55 E105                       	smpsAlterNote       $05
00096B57 E701                       	dc.b	smpsNoAttack, $01
00096B59 E106                       	smpsAlterNote       $06
00096B5B E701                       	dc.b	smpsNoAttack, $01
00096B5D E10C                       	smpsAlterNote       $0C
00096B5F E701                       	dc.b	smpsNoAttack, $01
00096B61 E10A                       	smpsAlterNote       $0A
00096B63 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00096B6F CB0D                       	dc.b	nD6, $0D
00096B71 E108                       	smpsAlterNote       $08
00096B73 E701                       	dc.b	smpsNoAttack, $01
00096B75 E104                       	smpsAlterNote       $04
00096B77 E701                       	dc.b	smpsNoAttack, $01
00096B79 E108                       	smpsAlterNote       $08
00096B7B E701                       	dc.b	smpsNoAttack, $01
00096B7D E10B                       	smpsAlterNote       $0B
00096B7F E701                       	dc.b	smpsNoAttack, $01
00096B81 E10F                       	smpsAlterNote       $0F
00096B83 E701                       	dc.b	smpsNoAttack, $01
00096B85 E10B                       	smpsAlterNote       $0B
00096B87 E701                       	dc.b	smpsNoAttack, $01
00096B89 E105                       	smpsAlterNote       $05
00096B8B E701                       	dc.b	smpsNoAttack, $01
00096B8D E104                       	smpsAlterNote       $04
00096B8F E701                       	dc.b	smpsNoAttack, $01
00096B91 E108                       	smpsAlterNote       $08
00096B93 E701                       	dc.b	smpsNoAttack, $01
00096B95 E10E                       	smpsAlterNote       $0E
00096B97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B9B E10B                       	smpsAlterNote       $0B
00096B9D E701                       	dc.b	smpsNoAttack, $01
00096B9F E105                       	smpsAlterNote       $05
00096BA1 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00096BA9 03                         	dc.b	$03
00096BAA E601                       	smpsAlterVol        $01
00096BAC F6F1 D1                    	smpsJump            music84_Jump01
00096BAF                            
00096BAF                            ; FM5 Data
00096BAF                            music84_FM5:
00096BB1 E080                       	smpsPan             panLeft, $00
00096BB3 8003                       	dc.b	nRst, $03
00096BB5 E10D                       	smpsAlterNote       $0D
00096BB7 C203 8008                  	dc.b	nF5, $03, nRst, $08
00096BBB E10C                       	smpsAlterNote       $0C
00096BBD C103 800A                  	dc.b	nE5, $03, nRst, $0A
00096BC1 E10F                       	smpsAlterNote       $0F
00096BC3 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00096BC9 E6FE                       	smpsAlterVol        $FE
00096BCB C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00096BD1 E10D                       	smpsAlterNote       $0D
00096BD3 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00096BD9 E10C                       	smpsAlterNote       $0C
00096BDB C102 8001                  	dc.b	nE5, $02, nRst, $01
00096BDF E10A                       	smpsAlterNote       $0A
00096BE1 BD01 8001                  	dc.b	nC5, $01, nRst, $01
00096BE7 03                         	dc.b	$03
00096BE8                            
00096BE8                            music84_Jump00:
00096BE8 8004                       	dc.b	nRst, $04
00096BEA E602                       	smpsAlterVol        $02
00096BEC E10D                       	smpsAlterNote       $0D
00096BEE B60D                       	dc.b	nF4, $0D
00096BF0 E107                       	smpsAlterNote       $07
00096BF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BF6 E10A                       	smpsAlterNote       $0A
00096BF8 E701                       	dc.b	smpsNoAttack, $01
00096BFA E110                       	smpsAlterNote       $10
00096BFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C00 E10A                       	smpsAlterNote       $0A
00096C02 E701                       	dc.b	smpsNoAttack, $01
00096C04 E107                       	smpsAlterNote       $07
00096C06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C0A E10D                       	smpsAlterNote       $0D
00096C0C E701                       	dc.b	smpsNoAttack, $01
00096C0E E111                       	smpsAlterNote       $11
00096C10 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096C14 E10D                       	smpsAlterNote       $0D
00096C16 B80D                       	dc.b	nG4, $0D
00096C18 E107                       	smpsAlterNote       $07
00096C1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C1E E10A                       	smpsAlterNote       $0A
00096C20 E701                       	dc.b	smpsNoAttack, $01
00096C22 E110                       	smpsAlterNote       $10
00096C24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C28 E10A                       	smpsAlterNote       $0A
00096C2A E701                       	dc.b	smpsNoAttack, $01
00096C2C E107                       	smpsAlterNote       $07
00096C2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C32 E10D                       	smpsAlterNote       $0D
00096C34 E701                       	dc.b	smpsNoAttack, $01
00096C36 E111                       	smpsAlterNote       $11
00096C38 E701                       	dc.b	smpsNoAttack, $01
00096C3A E110                       	smpsAlterNote       $10
00096C3C E701                       	dc.b	smpsNoAttack, $01
00096C3E E10A                       	smpsAlterNote       $0A
00096C40 E701                       	dc.b	smpsNoAttack, $01
00096C42 E106                       	smpsAlterNote       $06
00096C44 E701                       	dc.b	smpsNoAttack, $01
00096C46 E10A                       	smpsAlterNote       $0A
00096C48 E701                       	dc.b	smpsNoAttack, $01
00096C4A E10D                       	smpsAlterNote       $0D
00096C4C E701                       	dc.b	smpsNoAttack, $01
00096C4E E111                       	smpsAlterNote       $11
00096C50 E701                       	dc.b	smpsNoAttack, $01
00096C52 E10D                       	smpsAlterNote       $0D
00096C54 E701                       	dc.b	smpsNoAttack, $01
00096C56 E10F                       	smpsAlterNote       $0F
00096C58 BA0E                       	dc.b	nA4, $0E
00096C5A E109                       	smpsAlterNote       $09
00096C5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C60 E10F                       	smpsAlterNote       $0F
00096C62 E701                       	dc.b	smpsNoAttack, $01
00096C64 E112                       	smpsAlterNote       $12
00096C66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C6A E10C                       	smpsAlterNote       $0C
00096C6C E701                       	dc.b	smpsNoAttack, $01
00096C6E E108                       	smpsAlterNote       $08
00096C70 E701                       	dc.b	smpsNoAttack, $01
00096C72 E109                       	smpsAlterNote       $09
00096C74 E701                       	dc.b	smpsNoAttack, $01
00096C76 E10F                       	smpsAlterNote       $0F
00096C78 E701                       	dc.b	smpsNoAttack, $01
00096C7A E113                       	smpsAlterNote       $13
00096C7C E701                       	dc.b	smpsNoAttack, $01
00096C7E E10F                       	smpsAlterNote       $0F
00096C80 E701                       	dc.b	smpsNoAttack, $01
00096C82 E109                       	smpsAlterNote       $09
00096C84 E701                       	dc.b	smpsNoAttack, $01
00096C86 E108                       	smpsAlterNote       $08
00096C88 E701                       	dc.b	smpsNoAttack, $01
00096C8A E10C                       	smpsAlterNote       $0C
00096C8C E701                       	dc.b	smpsNoAttack, $01
00096C8E E112                       	smpsAlterNote       $12
00096C90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C94 E10F                       	smpsAlterNote       $0F
00096C96 E701                       	dc.b	smpsNoAttack, $01
00096C98 E109                       	smpsAlterNote       $09
00096C9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C9E E10F                       	smpsAlterNote       $0F
00096CA0 E701                       	dc.b	smpsNoAttack, $01
00096CA2 E112                       	smpsAlterNote       $12
00096CA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CA8 E10C                       	smpsAlterNote       $0C
00096CAA E701                       	dc.b	smpsNoAttack, $01
00096CAC E108                       	smpsAlterNote       $08
00096CAE E701                       	dc.b	smpsNoAttack, $01
00096CB0 E109                       	smpsAlterNote       $09
00096CB2 E701                       	dc.b	smpsNoAttack, $01
00096CB4 E10F                       	smpsAlterNote       $0F
00096CB6 E701                       	dc.b	smpsNoAttack, $01
00096CB8 E113                       	smpsAlterNote       $13
00096CBA E701                       	dc.b	smpsNoAttack, $01
00096CBC E10F                       	smpsAlterNote       $0F
00096CBE E701                       	dc.b	smpsNoAttack, $01
00096CC0 E10C                       	smpsAlterNote       $0C
00096CC2 E701                       	dc.b	smpsNoAttack, $01
00096CC4 E108                       	smpsAlterNote       $08
00096CC6 E701                       	dc.b	smpsNoAttack, $01
00096CC8 E109                       	smpsAlterNote       $09
00096CCA 8001                       	dc.b	nRst, $01
00096CCC E10C                       	smpsAlterNote       $0C
00096CCE B50A                       	dc.b	nE4, $0A
00096CD0 E10D                       	smpsAlterNote       $0D
00096CD2 B60D                       	dc.b	nF4, $0D
00096CD4 E10A                       	smpsAlterNote       $0A
00096CD6 E701                       	dc.b	smpsNoAttack, $01
00096CD8 E106                       	smpsAlterNote       $06
00096CDA E701                       	dc.b	smpsNoAttack, $01
00096CDC E107                       	smpsAlterNote       $07
00096CDE E701                       	dc.b	smpsNoAttack, $01
00096CE0 E10D                       	smpsAlterNote       $0D
00096CE2 E701                       	dc.b	smpsNoAttack, $01
00096CE4 E111                       	smpsAlterNote       $11
00096CE6 E701                       	dc.b	smpsNoAttack, $01
00096CE8 E10D                       	smpsAlterNote       $0D
00096CEA E701                       	dc.b	smpsNoAttack, $01
00096CEC E10A                       	smpsAlterNote       $0A
00096CEE E701                       	dc.b	smpsNoAttack, $01
00096CF0 E106                       	smpsAlterNote       $06
00096CF2 E701                       	dc.b	smpsNoAttack, $01
00096CF4 E10A                       	smpsAlterNote       $0A
00096CF6 E701                       	dc.b	smpsNoAttack, $01
00096CF8 E110                       	smpsAlterNote       $10
00096CFA E701                       	dc.b	smpsNoAttack, $01
00096CFC E111                       	smpsAlterNote       $11
00096CFE E701                       	dc.b	smpsNoAttack, $01
00096D00 E10D                       	smpsAlterNote       $0D
00096D02 B80D                       	dc.b	nG4, $0D
00096D04 E10A                       	smpsAlterNote       $0A
00096D06 E701                       	dc.b	smpsNoAttack, $01
00096D08 E106                       	smpsAlterNote       $06
00096D0A E701                       	dc.b	smpsNoAttack, $01
00096D0C E107                       	smpsAlterNote       $07
00096D0E E701                       	dc.b	smpsNoAttack, $01
00096D10 E10D                       	smpsAlterNote       $0D
00096D12 E701                       	dc.b	smpsNoAttack, $01
00096D14 E111                       	smpsAlterNote       $11
00096D16 E701                       	dc.b	smpsNoAttack, $01
00096D18 E10D                       	smpsAlterNote       $0D
00096D1A E701                       	dc.b	smpsNoAttack, $01
00096D1C E10A                       	smpsAlterNote       $0A
00096D1E E701                       	dc.b	smpsNoAttack, $01
00096D20 E106                       	smpsAlterNote       $06
00096D22 E701                       	dc.b	smpsNoAttack, $01
00096D24 E10A                       	smpsAlterNote       $0A
00096D26 E701                       	dc.b	smpsNoAttack, $01
00096D28 E110                       	smpsAlterNote       $10
00096D2A E701                       	dc.b	smpsNoAttack, $01
00096D2C E111                       	smpsAlterNote       $11
00096D2E E701                       	dc.b	smpsNoAttack, $01
00096D30 E10D                       	smpsAlterNote       $0D
00096D32 E701                       	dc.b	smpsNoAttack, $01
00096D34 E107                       	smpsAlterNote       $07
00096D36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D3A E10A                       	smpsAlterNote       $0A
00096D3C E701                       	dc.b	smpsNoAttack, $01
00096D3E E110                       	smpsAlterNote       $10
00096D40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D44 E10D                       	smpsAlterNote       $0D
00096D46 8001                       	dc.b	nRst, $01
00096D48 E10F                       	smpsAlterNote       $0F
00096D4A BA0D                       	dc.b	nA4, $0D
00096D4C E10C                       	smpsAlterNote       $0C
00096D4E E701                       	dc.b	smpsNoAttack, $01
00096D50 E108                       	smpsAlterNote       $08
00096D52 E701                       	dc.b	smpsNoAttack, $01
00096D54 E10C                       	smpsAlterNote       $0C
00096D56 E701                       	dc.b	smpsNoAttack, $01
00096D58 E112                       	smpsAlterNote       $12
00096D5A E701                       	dc.b	smpsNoAttack, $01
00096D5C E113                       	smpsAlterNote       $13
00096D5E E701                       	dc.b	smpsNoAttack, $01
00096D60 E10F                       	smpsAlterNote       $0F
00096D62 E701                       	dc.b	smpsNoAttack, $01
00096D64 E109                       	smpsAlterNote       $09
00096D66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D6A E10C                       	smpsAlterNote       $0C
00096D6C E701                       	dc.b	smpsNoAttack, $01
00096D6E E112                       	smpsAlterNote       $12
00096D70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D74 E10C                       	smpsAlterNote       $0C
00096D76 E701                       	dc.b	smpsNoAttack, $01
00096D78 E109                       	smpsAlterNote       $09
00096D7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D7E E10F                       	smpsAlterNote       $0F
00096D80 E701                       	dc.b	smpsNoAttack, $01
00096D82 E113                       	smpsAlterNote       $13
00096D84 E701                       	dc.b	smpsNoAttack, $01
00096D86 E112                       	smpsAlterNote       $12
00096D88 E701                       	dc.b	smpsNoAttack, $01
00096D8A E10C                       	smpsAlterNote       $0C
00096D8C E701                       	dc.b	smpsNoAttack, $01
00096D8E E108                       	smpsAlterNote       $08
00096D90 E701                       	dc.b	smpsNoAttack, $01
00096D92 E10C                       	smpsAlterNote       $0C
00096D94 E701                       	dc.b	smpsNoAttack, $01
00096D96 E10F                       	smpsAlterNote       $0F
00096D98 E701                       	dc.b	smpsNoAttack, $01
00096D9A E113                       	smpsAlterNote       $13
00096D9C E701                       	dc.b	smpsNoAttack, $01
00096D9E E10F                       	smpsAlterNote       $0F
00096DA0 E701                       	dc.b	smpsNoAttack, $01
00096DA2 E109                       	smpsAlterNote       $09
00096DA4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096DA8 E10D                       	smpsAlterNote       $0D
00096DAA B609 8001                  	dc.b	nF4, $09, nRst, $01
00096DAE E10C                       	smpsAlterNote       $0C
00096DB0 B506 8001                  	dc.b	nE4, $06, nRst, $01
00096DB4 E10B                       	smpsAlterNote       $0B
00096DB6 B30D                       	dc.b	nD4, $0D
00096DB8 E10C                       	smpsAlterNote       $0C
00096DBA B503 8001                  	dc.b	nE4, $03, nRst, $01
00096DBE E10D                       	smpsAlterNote       $0D
00096DC0 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00096DC8 E109                       	smpsAlterNote       $09
00096DCA E701                       	dc.b	smpsNoAttack, $01
00096DCC E108                       	smpsAlterNote       $08
00096DCE E701                       	dc.b	smpsNoAttack, $01
00096DD0 E10C                       	smpsAlterNote       $0C
00096DD2 E701                       	dc.b	smpsNoAttack, $01
00096DD4 E112                       	smpsAlterNote       $12
00096DD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DDA E10F                       	smpsAlterNote       $0F
00096DDC E701                       	dc.b	smpsNoAttack, $01
00096DDE E109                       	smpsAlterNote       $09
00096DE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DE4 E10F                       	smpsAlterNote       $0F
00096DE6 E701                       	dc.b	smpsNoAttack, $01
00096DE8 E112                       	smpsAlterNote       $12
00096DEA E701                       	dc.b	smpsNoAttack, $01
00096DEC E113                       	smpsAlterNote       $13
00096DEE 8001                       	dc.b	nRst, $01
00096DF0 E10D                       	smpsAlterNote       $0D
00096DF2 C20D                       	dc.b	nF5, $0D
00096DF4 E107                       	smpsAlterNote       $07
00096DF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DFA E10A                       	smpsAlterNote       $0A
00096DFC E701                       	dc.b	smpsNoAttack, $01
00096DFE E110                       	smpsAlterNote       $10
00096E00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E04 E10A                       	smpsAlterNote       $0A
00096E06 E701                       	dc.b	smpsNoAttack, $01
00096E08 E107                       	smpsAlterNote       $07
00096E0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E0E E10D                       	smpsAlterNote       $0D
00096E10 E701                       	dc.b	smpsNoAttack, $01
00096E12 E111                       	smpsAlterNote       $11
00096E14 E701                       	dc.b	smpsNoAttack, $01
00096E16 E110                       	smpsAlterNote       $10
00096E18 E701                       	dc.b	smpsNoAttack, $01
00096E1A E10A                       	smpsAlterNote       $0A
00096E1C E701                       	dc.b	smpsNoAttack, $01
00096E1E E106                       	smpsAlterNote       $06
00096E20 E701                       	dc.b	smpsNoAttack, $01
00096E22 E10A                       	smpsAlterNote       $0A
00096E24 E701                       	dc.b	smpsNoAttack, $01
00096E26 E10D                       	smpsAlterNote       $0D
00096E28 E701                       	dc.b	smpsNoAttack, $01
00096E2A E111                       	smpsAlterNote       $11
00096E2C E701                       	dc.b	smpsNoAttack, $01
00096E2E E10D                       	smpsAlterNote       $0D
00096E30 E701                       	dc.b	smpsNoAttack, $01
00096E32 E107                       	smpsAlterNote       $07
00096E34 E701                       	dc.b	smpsNoAttack, $01
00096E36 E106                       	smpsAlterNote       $06
00096E38 E701                       	dc.b	smpsNoAttack, $01
00096E3A E10A                       	smpsAlterNote       $0A
00096E3C E701                       	dc.b	smpsNoAttack, $01
00096E3E E110                       	smpsAlterNote       $10
00096E40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E44 E10D                       	smpsAlterNote       $0D
00096E46 E701                       	dc.b	smpsNoAttack, $01
00096E48 E107                       	smpsAlterNote       $07
00096E4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E4E E10D                       	smpsAlterNote       $0D
00096E50 E701                       	dc.b	smpsNoAttack, $01
00096E52 E110                       	smpsAlterNote       $10
00096E54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E58 E10A                       	smpsAlterNote       $0A
00096E5A E701                       	dc.b	smpsNoAttack, $01
00096E5C E106                       	smpsAlterNote       $06
00096E5E E701                       	dc.b	smpsNoAttack, $01
00096E60 E107                       	smpsAlterNote       $07
00096E62 E701                       	dc.b	smpsNoAttack, $01
00096E64 E10D                       	smpsAlterNote       $0D
00096E66 E701                       	dc.b	smpsNoAttack, $01
00096E68 E111                       	smpsAlterNote       $11
00096E6A E701                       	dc.b	smpsNoAttack, $01
00096E6C E10D                       	smpsAlterNote       $0D
00096E6E E701                       	dc.b	smpsNoAttack, $01
00096E70 E10A                       	smpsAlterNote       $0A
00096E72 E701                       	dc.b	smpsNoAttack, $01
00096E74 E106                       	smpsAlterNote       $06
00096E76 E701                       	dc.b	smpsNoAttack, $01
00096E78 E10A                       	smpsAlterNote       $0A
00096E7A E701                       	dc.b	smpsNoAttack, $01
00096E7C E110                       	smpsAlterNote       $10
00096E7E E701                       	dc.b	smpsNoAttack, $01
00096E80 E111                       	smpsAlterNote       $11
00096E82 E701                       	dc.b	smpsNoAttack, $01
00096E84 E10D                       	smpsAlterNote       $0D
00096E86 E701                       	dc.b	smpsNoAttack, $01
00096E88 E107                       	smpsAlterNote       $07
00096E8A E701                       	dc.b	smpsNoAttack, $01
00096E8C E10D                       	smpsAlterNote       $0D
00096E8E C207                       	dc.b	nF5, $07
00096E90 E10C                       	smpsAlterNote       $0C
00096E92 C10D                       	dc.b	nE5, $0D
00096E94 E109                       	smpsAlterNote       $09
00096E96 E701                       	dc.b	smpsNoAttack, $01
00096E98 E106                       	smpsAlterNote       $06
00096E9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E9E E10C                       	smpsAlterNote       $0C
00096EA0 E701                       	dc.b	smpsNoAttack, $01
00096EA2 E110                       	smpsAlterNote       $10
00096EA4 E701                       	dc.b	smpsNoAttack, $01
00096EA6 E10F                       	smpsAlterNote       $0F
00096EA8 E701                       	dc.b	smpsNoAttack, $01
00096EAA E109                       	smpsAlterNote       $09
00096EAC E701                       	dc.b	smpsNoAttack, $01
00096EAE E105                       	smpsAlterNote       $05
00096EB0 E701                       	dc.b	smpsNoAttack, $01
00096EB2 E109                       	smpsAlterNote       $09
00096EB4 E701                       	dc.b	smpsNoAttack, $01
00096EB6 E10C                       	smpsAlterNote       $0C
00096EB8 E701                       	dc.b	smpsNoAttack, $01
00096EBA E110                       	smpsAlterNote       $10
00096EBC E701                       	dc.b	smpsNoAttack, $01
00096EBE E10B                       	smpsAlterNote       $0B
00096EC0 BF0D                       	dc.b	nD5, $0D
00096EC2 E108                       	smpsAlterNote       $08
00096EC4 E701                       	dc.b	smpsNoAttack, $01
00096EC6 E105                       	smpsAlterNote       $05
00096EC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096ECC E10B                       	smpsAlterNote       $0B
00096ECE E701                       	dc.b	smpsNoAttack, $01
00096ED0 E10F                       	smpsAlterNote       $0F
00096ED2 E701                       	dc.b	smpsNoAttack, $01
00096ED4 E10E                       	smpsAlterNote       $0E
00096ED6 E701                       	dc.b	smpsNoAttack, $01
00096ED8 E108                       	smpsAlterNote       $08
00096EDA E701                       	dc.b	smpsNoAttack, $01
00096EDC E104                       	smpsAlterNote       $04
00096EDE E701                       	dc.b	smpsNoAttack, $01
00096EE0 E108                       	smpsAlterNote       $08
00096EE2 E701                       	dc.b	smpsNoAttack, $01
00096EE4 E10E                       	smpsAlterNote       $0E
00096EE6 E701                       	dc.b	smpsNoAttack, $01
00096EE8 E10F                       	smpsAlterNote       $0F
00096EEA E701                       	dc.b	smpsNoAttack, $01
00096EEC E10B                       	smpsAlterNote       $0B
00096EEE E701                       	dc.b	smpsNoAttack, $01
00096EF0 E105                       	smpsAlterNote       $05
00096EF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EF6 E108                       	smpsAlterNote       $08
00096EF8 E701                       	dc.b	smpsNoAttack, $01
00096EFA E10E                       	smpsAlterNote       $0E
00096EFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F00 E108                       	smpsAlterNote       $08
00096F02 E701                       	dc.b	smpsNoAttack, $01
00096F04 E105                       	smpsAlterNote       $05
00096F06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F0A E10B                       	smpsAlterNote       $0B
00096F0C E701                       	dc.b	smpsNoAttack, $01
00096F0E E10F                       	smpsAlterNote       $0F
00096F10 E701                       	dc.b	smpsNoAttack, $01
00096F12 E10E                       	smpsAlterNote       $0E
00096F14 E701                       	dc.b	smpsNoAttack, $01
00096F16 E108                       	smpsAlterNote       $08
00096F18 E701                       	dc.b	smpsNoAttack, $01
00096F1A E104                       	smpsAlterNote       $04
00096F1C E701                       	dc.b	smpsNoAttack, $01
00096F1E E108                       	smpsAlterNote       $08
00096F20 E701                       	dc.b	smpsNoAttack, $01
00096F22 E10B                       	smpsAlterNote       $0B
00096F24 E701                       	dc.b	smpsNoAttack, $01
00096F26 E10F                       	smpsAlterNote       $0F
00096F28 E701                       	dc.b	smpsNoAttack, $01
00096F2A E10B                       	smpsAlterNote       $0B
00096F2C E701                       	dc.b	smpsNoAttack, $01
00096F2E E105                       	smpsAlterNote       $05
00096F30 E701                       	dc.b	smpsNoAttack, $01
00096F32 E104                       	smpsAlterNote       $04
00096F34 E701                       	dc.b	smpsNoAttack, $01
00096F36 E108                       	smpsAlterNote       $08
00096F38 E701                       	dc.b	smpsNoAttack, $01
00096F3A E10E                       	smpsAlterNote       $0E
00096F3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F40 E10B                       	smpsAlterNote       $0B
00096F42 E701                       	dc.b	smpsNoAttack, $01
00096F44 E105                       	smpsAlterNote       $05
00096F46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F4A E10B                       	smpsAlterNote       $0B
00096F4C E701                       	dc.b	smpsNoAttack, $01
00096F4E E10E                       	smpsAlterNote       $0E
00096F50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F54 E108                       	smpsAlterNote       $08
00096F56 E701                       	dc.b	smpsNoAttack, $01
00096F58 E105                       	smpsAlterNote       $05
00096F5A 8001                       	dc.b	nRst, $01
00096F5E E601                       	smpsAlterVol        $01
00096F60 E10B                       	smpsAlterNote       $0B
00096F62 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00096F6E 8004                       	dc.b	nRst, $04
00096F72 E6FF                       	smpsAlterVol        $FF
00096F74 E10D                       	smpsAlterNote       $0D
00096F76 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00096F7E E10C                       	smpsAlterNote       $0C
00096F80 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00096F85 E10D                       	smpsAlterNote       $0D
00096F87 B60D                       	dc.b	nF4, $0D
00096F89 E10A                       	smpsAlterNote       $0A
00096F8B E701                       	dc.b	smpsNoAttack, $01
00096F8D E106                       	smpsAlterNote       $06
00096F8F E701                       	dc.b	smpsNoAttack, $01
00096F91 E10A                       	smpsAlterNote       $0A
00096F93 E701                       	dc.b	smpsNoAttack, $01
00096F95 E110                       	smpsAlterNote       $10
00096F97 E701                       	dc.b	smpsNoAttack, $01
00096F99 E111                       	smpsAlterNote       $11
00096F9B E701                       	dc.b	smpsNoAttack, $01
00096F9D E10D                       	smpsAlterNote       $0D
00096F9F E701                       	dc.b	smpsNoAttack, $01
00096FA1 E107                       	smpsAlterNote       $07
00096FA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FA7 E10A                       	smpsAlterNote       $0A
00096FA9 E701                       	dc.b	smpsNoAttack, $01
00096FAB E110                       	smpsAlterNote       $10
00096FAD E701                       	dc.b	smpsNoAttack, $01
00096FAF E111                       	smpsAlterNote       $11
00096FB1 8001                       	dc.b	nRst, $01
00096FB3 E10D                       	smpsAlterNote       $0D
00096FB5 B80D                       	dc.b	nG4, $0D
00096FB7 E10A                       	smpsAlterNote       $0A
00096FB9 E701                       	dc.b	smpsNoAttack, $01
00096FBB E106                       	smpsAlterNote       $06
00096FBD E701                       	dc.b	smpsNoAttack, $01
00096FBF E10A                       	smpsAlterNote       $0A
00096FC1 E701                       	dc.b	smpsNoAttack, $01
00096FC3 E110                       	smpsAlterNote       $10
00096FC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FC9 E10D                       	smpsAlterNote       $0D
00096FCB E701                       	dc.b	smpsNoAttack, $01
00096FCD E107                       	smpsAlterNote       $07
00096FCF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FD3 E10D                       	smpsAlterNote       $0D
00096FD5 E701                       	dc.b	smpsNoAttack, $01
00096FD7 E110                       	smpsAlterNote       $10
00096FD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FDD E10A                       	smpsAlterNote       $0A
00096FDF E701                       	dc.b	smpsNoAttack, $01
00096FE1 E106                       	smpsAlterNote       $06
00096FE3 E701                       	dc.b	smpsNoAttack, $01
00096FE5 E107                       	smpsAlterNote       $07
00096FE7 E701                       	dc.b	smpsNoAttack, $01
00096FE9 E10D                       	smpsAlterNote       $0D
00096FEB E701                       	dc.b	smpsNoAttack, $01
00096FED E111                       	smpsAlterNote       $11
00096FEF E701                       	dc.b	smpsNoAttack, $01
00096FF1 E10D                       	smpsAlterNote       $0D
00096FF3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096FF7 E10F                       	smpsAlterNote       $0F
00096FF9 BA02 8001                  	dc.b	nA4, $02, nRst, $01
00096FFD E110                       	smpsAlterNote       $10
00096FFF BB03                       	dc.b	nBb4, $03
00097001 E10F                       	smpsAlterNote       $0F
00097003 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00097009 E110                       	smpsAlterNote       $10
0009700B C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009700F E10F                       	smpsAlterNote       $0F
00097011 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00097017 E110                       	smpsAlterNote       $10
00097019 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0009701D E10F                       	smpsAlterNote       $0F
0009701F D20D                       	dc.b	nA6, $0D
00097021 E10C                       	smpsAlterNote       $0C
00097023 E701                       	dc.b	smpsNoAttack, $01
00097025 E108                       	smpsAlterNote       $08
00097027 E701                       	dc.b	smpsNoAttack, $01
00097029 E10C                       	smpsAlterNote       $0C
0009702B E701                       	dc.b	smpsNoAttack, $01
0009702D E10F                       	smpsAlterNote       $0F
0009702F E701                       	dc.b	smpsNoAttack, $01
00097031 E113                       	smpsAlterNote       $13
00097033 E701                       	dc.b	smpsNoAttack, $01
00097035 E10F                       	smpsAlterNote       $0F
00097037 E701                       	dc.b	smpsNoAttack, $01
00097039 E109                       	smpsAlterNote       $09
0009703B E701                       	dc.b	smpsNoAttack, $01
0009703D E108                       	smpsAlterNote       $08
0009703F E701                       	dc.b	smpsNoAttack, $01
00097041 E10C                       	smpsAlterNote       $0C
00097043 E701                       	dc.b	smpsNoAttack, $01
00097045 E112                       	smpsAlterNote       $12
00097047 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009704B E10F                       	smpsAlterNote       $0F
0009704D E701                       	dc.b	smpsNoAttack, $01
0009704F E109                       	smpsAlterNote       $09
00097051 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00097057 E10D                       	smpsAlterNote       $0D
00097059 CE07                       	dc.b	nF6, $07
0009705B E10C                       	smpsAlterNote       $0C
0009705D CD06 8001                  	dc.b	nE6, $06, nRst, $01
00097061 E10D                       	smpsAlterNote       $0D
00097063 CE03                       	dc.b	nF6, $03
00097065 E10C                       	smpsAlterNote       $0C
00097067 CC0D                       	dc.b	nEb6, $0D
00097069 E109                       	smpsAlterNote       $09
0009706B E701                       	dc.b	smpsNoAttack, $01
0009706D E106                       	smpsAlterNote       $06
0009706F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097073 E10C                       	smpsAlterNote       $0C
00097075 E701                       	dc.b	smpsNoAttack, $01
00097077 E110                       	smpsAlterNote       $10
00097079 E701                       	dc.b	smpsNoAttack, $01
0009707B E10F                       	smpsAlterNote       $0F
0009707D E701                       	dc.b	smpsNoAttack, $01
0009707F E109                       	smpsAlterNote       $09
00097081 E701                       	dc.b	smpsNoAttack, $01
00097083 E105                       	smpsAlterNote       $05
00097085 E701                       	dc.b	smpsNoAttack, $01
00097087 E109                       	smpsAlterNote       $09
00097089 E701                       	dc.b	smpsNoAttack, $01
0009708B E10C                       	smpsAlterNote       $0C
0009708D E701                       	dc.b	smpsNoAttack, $01
0009708F E110                       	smpsAlterNote       $10
00097091 E701                       	dc.b	smpsNoAttack, $01
00097093 E10C                       	smpsAlterNote       $0C
00097095 E701                       	dc.b	smpsNoAttack, $01
00097097 E106                       	smpsAlterNote       $06
00097099 E701                       	dc.b	smpsNoAttack, $01
0009709B E105                       	smpsAlterNote       $05
0009709D E701                       	dc.b	smpsNoAttack, $01
0009709F E109                       	smpsAlterNote       $09
000970A1 E701                       	dc.b	smpsNoAttack, $01
000970A3 E10F                       	smpsAlterNote       $0F
000970A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970A9 E10C                       	smpsAlterNote       $0C
000970AB E701                       	dc.b	smpsNoAttack, $01
000970AD E10B                       	smpsAlterNote       $0B
000970AF CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
000970B9 E10F                       	smpsAlterNote       $0F
000970BB C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000970C5 E10D                       	smpsAlterNote       $0D
000970C7 C203                       	dc.b	nF5, $03
000970C9 E10C                       	smpsAlterNote       $0C
000970CB C103 8001                  	dc.b	nE5, $03, nRst, $01
000970CF E10D                       	smpsAlterNote       $0D
000970D1 C20D                       	dc.b	nF5, $0D
000970D3 E10C                       	smpsAlterNote       $0C
000970D5 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
000970D9 E10B                       	smpsAlterNote       $0B
000970DB BF0D                       	dc.b	nD5, $0D
000970DD E108                       	smpsAlterNote       $08
000970DF E701                       	dc.b	smpsNoAttack, $01
000970E1 E104                       	smpsAlterNote       $04
000970E3 E701                       	dc.b	smpsNoAttack, $01
000970E5 E108                       	smpsAlterNote       $08
000970E7 E701                       	dc.b	smpsNoAttack, $01
000970E9 E10E                       	smpsAlterNote       $0E
000970EB E701                       	dc.b	smpsNoAttack, $01
000970ED E10F                       	smpsAlterNote       $0F
000970EF E701                       	dc.b	smpsNoAttack, $01
000970F1 E10B                       	smpsAlterNote       $0B
000970F3 E701                       	dc.b	smpsNoAttack, $01
000970F5 E105                       	smpsAlterNote       $05
000970F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970FB E108                       	smpsAlterNote       $08
000970FD E701                       	dc.b	smpsNoAttack, $01
000970FF E10E                       	smpsAlterNote       $0E
00097101 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097105 E108                       	smpsAlterNote       $08
00097107 E701                       	dc.b	smpsNoAttack, $01
00097109 E105                       	smpsAlterNote       $05
0009710B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009710F E10B                       	smpsAlterNote       $0B
00097111 E701                       	dc.b	smpsNoAttack, $01
00097113 E10F                       	smpsAlterNote       $0F
00097115 E701                       	dc.b	smpsNoAttack, $01
00097117 E10E                       	smpsAlterNote       $0E
00097119 E701                       	dc.b	smpsNoAttack, $01
0009711B E108                       	smpsAlterNote       $08
0009711D E701                       	dc.b	smpsNoAttack, $01
0009711F E104                       	smpsAlterNote       $04
00097121 E701                       	dc.b	smpsNoAttack, $01
00097123 E108                       	smpsAlterNote       $08
00097125 E701                       	dc.b	smpsNoAttack, $01
00097127 E10B                       	smpsAlterNote       $0B
00097129 E701                       	dc.b	smpsNoAttack, $01
0009712B E10F                       	smpsAlterNote       $0F
0009712D E701                       	dc.b	smpsNoAttack, $01
0009712F E10B                       	smpsAlterNote       $0B
00097131 E701                       	dc.b	smpsNoAttack, $01
00097133 E105                       	smpsAlterNote       $05
00097135 E701                       	dc.b	smpsNoAttack, $01
00097137 E104                       	smpsAlterNote       $04
00097139 E701                       	dc.b	smpsNoAttack, $01
0009713B E108                       	smpsAlterNote       $08
0009713D E701                       	dc.b	smpsNoAttack, $01
0009713F E10E                       	smpsAlterNote       $0E
00097141 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097145 E10B                       	smpsAlterNote       $0B
00097147 E701                       	dc.b	smpsNoAttack, $01
00097149 E105                       	smpsAlterNote       $05
0009714B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009714F E10B                       	smpsAlterNote       $0B
00097151 E701                       	dc.b	smpsNoAttack, $01
00097153 E10E                       	smpsAlterNote       $0E
00097155 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097159 E108                       	smpsAlterNote       $08
0009715B E701                       	dc.b	smpsNoAttack, $01
0009715D E104                       	smpsAlterNote       $04
0009715F E701                       	dc.b	smpsNoAttack, $01
00097161 E105                       	smpsAlterNote       $05
00097163 E701                       	dc.b	smpsNoAttack, $01
00097165 E10B                       	smpsAlterNote       $0B
00097167 E701                       	dc.b	smpsNoAttack, $01
00097169 E10F                       	smpsAlterNote       $0F
0009716B E701                       	dc.b	smpsNoAttack, $01
0009716D E10B                       	smpsAlterNote       $0B
0009716F E701                       	dc.b	smpsNoAttack, $01
00097171 E108                       	smpsAlterNote       $08
00097173 E701                       	dc.b	smpsNoAttack, $01
00097175 E104                       	smpsAlterNote       $04
00097177 E701                       	dc.b	smpsNoAttack, $01
00097179 E108                       	smpsAlterNote       $08
0009717B E701                       	dc.b	smpsNoAttack, $01
0009717D E10E                       	smpsAlterNote       $0E
0009717F E701                       	dc.b	smpsNoAttack, $01
00097181 E10F                       	smpsAlterNote       $0F
00097183 E701                       	dc.b	smpsNoAttack, $01
00097185 E10B                       	smpsAlterNote       $0B
00097187 E701                       	dc.b	smpsNoAttack, $01
00097189 E105                       	smpsAlterNote       $05
0009718B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009718F E108                       	smpsAlterNote       $08
00097191 E701                       	dc.b	smpsNoAttack, $01
00097193 E10E                       	smpsAlterNote       $0E
00097195 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097199 E108                       	smpsAlterNote       $08
0009719B E701                       	dc.b	smpsNoAttack, $01
0009719D E105                       	smpsAlterNote       $05
0009719F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971A3 E10B                       	smpsAlterNote       $0B
000971A5 E701                       	dc.b	smpsNoAttack, $01
000971A7 E10F                       	smpsAlterNote       $0F
000971A9 E701                       	dc.b	smpsNoAttack, $01
000971AB E10E                       	smpsAlterNote       $0E
000971AD E701                       	dc.b	smpsNoAttack, $01
000971AF E108                       	smpsAlterNote       $08
000971B1 E701                       	dc.b	smpsNoAttack, $01
000971B3 E104                       	smpsAlterNote       $04
000971B5 E701                       	dc.b	smpsNoAttack, $01
000971B7 E108                       	smpsAlterNote       $08
000971B9 E701                       	dc.b	smpsNoAttack, $01
000971BB E10B                       	smpsAlterNote       $0B
000971BD E701                       	dc.b	smpsNoAttack, $01
000971BF E10F                       	smpsAlterNote       $0F
000971C1 E701                       	dc.b	smpsNoAttack, $01
000971C3 E10B                       	smpsAlterNote       $0B
000971C5 E701                       	dc.b	smpsNoAttack, $01
000971C7 E105                       	smpsAlterNote       $05
000971C9 E701                       	dc.b	smpsNoAttack, $01
000971CB E104                       	smpsAlterNote       $04
000971CD E701                       	dc.b	smpsNoAttack, $01
000971CF E105                       	smpsAlterNote       $05
000971D1 8001                       	dc.b	nRst, $01
000971D3 E10D                       	smpsAlterNote       $0D
000971D5 C20D                       	dc.b	nF5, $0D
000971D7 E107                       	smpsAlterNote       $07
000971D9 E701                       	dc.b	smpsNoAttack, $01
000971DB E106                       	smpsAlterNote       $06
000971DD E701                       	dc.b	smpsNoAttack, $01
000971DF E10A                       	smpsAlterNote       $0A
000971E1 E701                       	dc.b	smpsNoAttack, $01
000971E3 E110                       	smpsAlterNote       $10
000971E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971E9 E10D                       	smpsAlterNote       $0D
000971EB E701                       	dc.b	smpsNoAttack, $01
000971ED E107                       	smpsAlterNote       $07
000971EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971F3 E10D                       	smpsAlterNote       $0D
000971F5 E701                       	dc.b	smpsNoAttack, $01
000971F7 E110                       	smpsAlterNote       $10
000971F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971FD E10A                       	smpsAlterNote       $0A
000971FF E701                       	dc.b	smpsNoAttack, $01
00097201 E106                       	smpsAlterNote       $06
00097203 E701                       	dc.b	smpsNoAttack, $01
00097205 E107                       	smpsAlterNote       $07
00097207 E701                       	dc.b	smpsNoAttack, $01
00097209 E10D                       	smpsAlterNote       $0D
0009720B E701                       	dc.b	smpsNoAttack, $01
0009720D E111                       	smpsAlterNote       $11
0009720F E701                       	dc.b	smpsNoAttack, $01
00097211 E10D                       	smpsAlterNote       $0D
00097213 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097217 E10C                       	smpsAlterNote       $0C
00097219 C10D                       	dc.b	nE5, $0D
0009721B E10D                       	smpsAlterNote       $0D
0009721D C20A                       	dc.b	nF5, $0A
0009721F E10C                       	smpsAlterNote       $0C
00097221 C10E                       	dc.b	nE5, $0E
00097223 E106                       	smpsAlterNote       $06
00097225 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097229 E10C                       	smpsAlterNote       $0C
0009722B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009722F E10B                       	smpsAlterNote       $0B
00097231 BF0D                       	dc.b	nD5, $0D
00097233 E10C                       	smpsAlterNote       $0C
00097235 C107                       	dc.b	nE5, $07
00097237 E10D                       	smpsAlterNote       $0D
00097239 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00097243 E110                       	smpsAlterNote       $10
00097245 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0009724B E10F                       	smpsAlterNote       $0F
0009724D C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00097255 E10D                       	smpsAlterNote       $0D
00097257 D003                       	dc.b	nG6, $03
0009725B E0C0                       	smpsPan             panCenter, $00
0009725D E6FF                       	smpsAlterVol        $FF
0009725F AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0009726B 8001                       	dc.b	nRst, $01
0009726D E10C                       	smpsAlterNote       $0C
0009726F A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00097279 E604                       	smpsAlterVol        $04
0009727B E10B                       	smpsAlterNote       $0B
0009727D B306 8001                  	dc.b	nD4, $06, nRst, $01
00097281 E10F                       	smpsAlterNote       $0F
00097283 AE03                       	dc.b	nA3, $03
00097285 E10D                       	smpsAlterNote       $0D
00097287 B603 8001                  	dc.b	nF4, $03, nRst, $01
0009728B E10C                       	smpsAlterNote       $0C
0009728D B506 8001                  	dc.b	nE4, $06, nRst, $01
00097291 E10B                       	smpsAlterNote       $0B
00097293 B302 8001                  	dc.b	nD4, $02, nRst, $01
00097297 E10A                       	smpsAlterNote       $0A
00097299 B103                       	dc.b	nC4, $03
0009729B E110                       	smpsAlterNote       $10
0009729D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000972A1 E10F                       	smpsAlterNote       $0F
000972A3 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
000972A7 E080                       	smpsPan             panLeft, $00
000972A9 01                         	dc.b	$01
000972AC E6FB                       	smpsAlterVol        $FB
000972AE E1E4                       	smpsAlterNote       $E4
000972B0 C501                       	dc.b	nAb5, $01
000972B2 E1F4                       	smpsAlterNote       $F4
000972B4 E701                       	dc.b	smpsNoAttack, $01
000972B6 E104                       	smpsAlterNote       $04
000972B8 E701                       	dc.b	smpsNoAttack, $01
000972BA E114                       	smpsAlterNote       $14
000972BC E701                       	dc.b	smpsNoAttack, $01
000972BE E11C                       	smpsAlterNote       $1C
000972C0 E701                       	dc.b	smpsNoAttack, $01
000972C2 E1EF                       	smpsAlterNote       $EF
000972C4 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000972C7 E1FF                       	smpsAlterNote       $FF
000972C9 E701                       	dc.b	smpsNoAttack, $01
000972CB E10F                       	smpsAlterNote       $0F
000972CD C606                       	dc.b	nA5, $06
000972CF E109                       	smpsAlterNote       $09
000972D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972D5 E10F                       	smpsAlterNote       $0F
000972D7 E701                       	dc.b	smpsNoAttack, $01
000972D9 E112                       	smpsAlterNote       $12
000972DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972DF E10C                       	smpsAlterNote       $0C
000972E1 E701                       	dc.b	smpsNoAttack, $01
000972E3 E108                       	smpsAlterNote       $08
000972E5 E701                       	dc.b	smpsNoAttack, $01
000972E7 E109                       	smpsAlterNote       $09
000972E9 E701                       	dc.b	smpsNoAttack, $01
000972EB E10F                       	smpsAlterNote       $0F
000972ED E701                       	dc.b	smpsNoAttack, $01
000972EF E113                       	smpsAlterNote       $13
000972F1 E701                       	dc.b	smpsNoAttack, $01
000972F3 E10F                       	smpsAlterNote       $0F
000972F5 E701                       	dc.b	smpsNoAttack, $01
000972F7 E10C                       	smpsAlterNote       $0C
000972F9 E701                       	dc.b	smpsNoAttack, $01
000972FB E108                       	smpsAlterNote       $08
000972FD E701                       	dc.b	smpsNoAttack, $01
000972FF E10C                       	smpsAlterNote       $0C
00097301 E701                       	dc.b	smpsNoAttack, $01
00097303 E112                       	smpsAlterNote       $12
00097305 E701                       	dc.b	smpsNoAttack, $01
00097307 E113                       	smpsAlterNote       $13
00097309 E701                       	dc.b	smpsNoAttack, $01
0009730B E10F                       	smpsAlterNote       $0F
0009730D E701                       	dc.b	smpsNoAttack, $01
0009730F E109                       	smpsAlterNote       $09
00097311 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097315 E10C                       	smpsAlterNote       $0C
00097317 E701                       	dc.b	smpsNoAttack, $01
00097319 E112                       	smpsAlterNote       $12
0009731B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009731F E10C                       	smpsAlterNote       $0C
00097321 E701                       	dc.b	smpsNoAttack, $01
00097323 E109                       	smpsAlterNote       $09
00097325 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097329 E10F                       	smpsAlterNote       $0F
0009732B E701                       	dc.b	smpsNoAttack, $01
0009732D E113                       	smpsAlterNote       $13
0009732F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097333 E10D                       	smpsAlterNote       $0D
00097335 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0009733B E10C                       	smpsAlterNote       $0C
0009733D C102 8001                  	dc.b	nE5, $02, nRst, $01
00097341 E10D                       	smpsAlterNote       $0D
00097343 C201 8001                  	dc.b	nF5, $01, nRst, $01
00097347 E10C                       	smpsAlterNote       $0C
00097349 C102                       	dc.b	nE5, $02
0009734B E10B                       	smpsAlterNote       $0B
0009734D BF02 8001                  	dc.b	nD5, $02, nRst, $01
00097351 E10C                       	smpsAlterNote       $0C
00097353 C101 8001                  	dc.b	nE5, $01, nRst, $01
00097357 E10B                       	smpsAlterNote       $0B
00097359 BF02                       	dc.b	nD5, $02
0009735B E10A                       	smpsAlterNote       $0A
0009735D BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00097367 E110                       	smpsAlterNote       $10
00097369 BB02                       	dc.b	nBb4, $02
0009736B E10A                       	smpsAlterNote       $0A
0009736D BD02 8001                  	dc.b	nC5, $02, nRst, $01
00097371 E110                       	smpsAlterNote       $10
00097373 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00097377 E10F                       	smpsAlterNote       $0F
00097379 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0009737D E110                       	smpsAlterNote       $10
0009737F BB02                       	dc.b	nBb4, $02
00097381 E10F                       	smpsAlterNote       $0F
00097383 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0009738D E10C                       	smpsAlterNote       $0C
0009738F B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
00097397 E10B                       	smpsAlterNote       $0B
00097399 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0009739D E10F                       	smpsAlterNote       $0F
0009739F BA02                       	dc.b	nA4, $02
000973A3 E0C0                       	smpsPan             panCenter, $00
000973A5 E601                       	smpsAlterVol        $01
000973A7 E109                       	smpsAlterNote       $09
000973A9 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000973B5 E108                       	smpsAlterNote       $08
000973B7 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000973BD E107                       	smpsAlterNote       $07
000973BF B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000973C5 E109                       	smpsAlterNote       $09
000973C7 B603 8001                  	dc.b	nF4, $03, nRst, $01
000973CB E108                       	smpsAlterNote       $08
000973CD B506 8001                  	dc.b	nE4, $06, nRst, $01
000973D1 E107                       	smpsAlterNote       $07
000973D3 B302 8001                  	dc.b	nD4, $02, nRst, $01
000973D7 E106                       	smpsAlterNote       $06
000973D9 B103                       	dc.b	nC4, $03
000973DB E10C                       	smpsAlterNote       $0C
000973DD AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000973E3 E080                       	smpsPan             panLeft, $00
000973E5 07                         	dc.b	$07
000973E6 E6FE                       	smpsAlterVol        $FE
000973E8 E10B                       	smpsAlterNote       $0B
000973EA B20D                       	dc.b	nCs4, $0D
000973EC E105                       	smpsAlterNote       $05
000973EE E701                       	dc.b	smpsNoAttack, $01
000973F0 E104                       	smpsAlterNote       $04
000973F2 E701                       	dc.b	smpsNoAttack, $01
000973F4 E108                       	smpsAlterNote       $08
000973F6 E701                       	dc.b	smpsNoAttack, $01
000973F8 E10E                       	smpsAlterNote       $0E
000973FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973FE E10B                       	smpsAlterNote       $0B
00097400 E701                       	dc.b	smpsNoAttack, $01
00097402 E105                       	smpsAlterNote       $05
00097404 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097408 E10B                       	smpsAlterNote       $0B
0009740A E701                       	dc.b	smpsNoAttack, $01
0009740C E10E                       	smpsAlterNote       $0E
0009740E E701                       	dc.b	smpsNoAttack, $01
00097410 E10F                       	smpsAlterNote       $0F
00097412 8001                       	dc.b	nRst, $01
00097414 E10B                       	smpsAlterNote       $0B
00097416 B30D                       	dc.b	nD4, $0D
00097418 E105                       	smpsAlterNote       $05
0009741A E701                       	dc.b	smpsNoAttack, $01
0009741C E104                       	smpsAlterNote       $04
0009741E E701                       	dc.b	smpsNoAttack, $01
00097420 E108                       	smpsAlterNote       $08
00097422 E701                       	dc.b	smpsNoAttack, $01
00097424 E10E                       	smpsAlterNote       $0E
00097426 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009742A E10B                       	smpsAlterNote       $0B
0009742C E701                       	dc.b	smpsNoAttack, $01
0009742E E105                       	smpsAlterNote       $05
00097430 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097434 E10B                       	smpsAlterNote       $0B
00097436 E701                       	dc.b	smpsNoAttack, $01
00097438 E10E                       	smpsAlterNote       $0E
0009743A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009743E E108                       	smpsAlterNote       $08
00097440 E701                       	dc.b	smpsNoAttack, $01
00097442 E104                       	smpsAlterNote       $04
00097444 E701                       	dc.b	smpsNoAttack, $01
00097446 E105                       	smpsAlterNote       $05
00097448 E701                       	dc.b	smpsNoAttack, $01
0009744A E10B                       	smpsAlterNote       $0B
0009744C E701                       	dc.b	smpsNoAttack, $01
0009744E E10F                       	smpsAlterNote       $0F
00097450 E701                       	dc.b	smpsNoAttack, $01
00097452 E10B                       	smpsAlterNote       $0B
00097454 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097458 E10C                       	smpsAlterNote       $0C
0009745A B50D                       	dc.b	nE4, $0D
0009745C E106                       	smpsAlterNote       $06
0009745E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097462 E10C                       	smpsAlterNote       $0C
00097464 E701                       	dc.b	smpsNoAttack, $01
00097466 E10F                       	smpsAlterNote       $0F
00097468 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009746C E109                       	smpsAlterNote       $09
0009746E E701                       	dc.b	smpsNoAttack, $01
00097470 E105                       	smpsAlterNote       $05
00097472 E701                       	dc.b	smpsNoAttack, $01
00097474 E106                       	smpsAlterNote       $06
00097476 E701                       	dc.b	smpsNoAttack, $01
00097478 E10C                       	smpsAlterNote       $0C
0009747A E701                       	dc.b	smpsNoAttack, $01
0009747C E110                       	smpsAlterNote       $10
0009747E E701                       	dc.b	smpsNoAttack, $01
00097480 E10B                       	smpsAlterNote       $0B
00097482 B30E                       	dc.b	nD4, $0E
00097484 E105                       	smpsAlterNote       $05
00097486 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009748A E10B                       	smpsAlterNote       $0B
0009748C E701                       	dc.b	smpsNoAttack, $01
0009748E E10E                       	smpsAlterNote       $0E
00097490 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097494 E108                       	smpsAlterNote       $08
00097496 E701                       	dc.b	smpsNoAttack, $01
00097498 E104                       	smpsAlterNote       $04
0009749A E701                       	dc.b	smpsNoAttack, $01
0009749C E105                       	smpsAlterNote       $05
0009749E E701                       	dc.b	smpsNoAttack, $01
000974A0 E10B                       	smpsAlterNote       $0B
000974A2 E701                       	dc.b	smpsNoAttack, $01
000974A4 E10F                       	smpsAlterNote       $0F
000974A6 E701                       	dc.b	smpsNoAttack, $01
000974A8 E10B                       	smpsAlterNote       $0B
000974AA E701                       	dc.b	smpsNoAttack, $01
000974AC E108                       	smpsAlterNote       $08
000974AE E701                       	dc.b	smpsNoAttack, $01
000974B0 E104                       	smpsAlterNote       $04
000974B2 E701                       	dc.b	smpsNoAttack, $01
000974B4 E108                       	smpsAlterNote       $08
000974B6 E701                       	dc.b	smpsNoAttack, $01
000974B8 E10E                       	smpsAlterNote       $0E
000974BA E701                       	dc.b	smpsNoAttack, $01
000974BC E10F                       	smpsAlterNote       $0F
000974BE E701                       	dc.b	smpsNoAttack, $01
000974C0 E10B                       	smpsAlterNote       $0B
000974C2 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000974C6 E108                       	smpsAlterNote       $08
000974C8 E701                       	dc.b	smpsNoAttack, $01
000974CA E105                       	smpsAlterNote       $05
000974CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974D0 E10B                       	smpsAlterNote       $0B
000974D2 E701                       	dc.b	smpsNoAttack, $01
000974D4 E10F                       	smpsAlterNote       $0F
000974D6 E701                       	dc.b	smpsNoAttack, $01
000974D8 E10E                       	smpsAlterNote       $0E
000974DA E701                       	dc.b	smpsNoAttack, $01
000974DC E108                       	smpsAlterNote       $08
000974DE E701                       	dc.b	smpsNoAttack, $01
000974E0 E104                       	smpsAlterNote       $04
000974E2 E701                       	dc.b	smpsNoAttack, $01
000974E4 E108                       	smpsAlterNote       $08
000974E6 E701                       	dc.b	smpsNoAttack, $01
000974E8 E10B                       	smpsAlterNote       $0B
000974EA E701                       	dc.b	smpsNoAttack, $01
000974EC E10F                       	smpsAlterNote       $0F
000974EE E701                       	dc.b	smpsNoAttack, $01
000974F0 E10B                       	smpsAlterNote       $0B
000974F2 B30D                       	dc.b	nD4, $0D
000974F4 E108                       	smpsAlterNote       $08
000974F6 E701                       	dc.b	smpsNoAttack, $01
000974F8 E105                       	smpsAlterNote       $05
000974FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974FE E10B                       	smpsAlterNote       $0B
00097500 E701                       	dc.b	smpsNoAttack, $01
00097502 E10F                       	smpsAlterNote       $0F
00097504 E701                       	dc.b	smpsNoAttack, $01
00097506 E10E                       	smpsAlterNote       $0E
00097508 E701                       	dc.b	smpsNoAttack, $01
0009750A E108                       	smpsAlterNote       $08
0009750C E701                       	dc.b	smpsNoAttack, $01
0009750E E104                       	smpsAlterNote       $04
00097510 E701                       	dc.b	smpsNoAttack, $01
00097512 E108                       	smpsAlterNote       $08
00097514 E701                       	dc.b	smpsNoAttack, $01
00097516 E10B                       	smpsAlterNote       $0B
00097518 E701                       	dc.b	smpsNoAttack, $01
0009751A E10F                       	smpsAlterNote       $0F
0009751C E701                       	dc.b	smpsNoAttack, $01
0009751E E10B                       	smpsAlterNote       $0B
00097520 E701                       	dc.b	smpsNoAttack, $01
00097522 E105                       	smpsAlterNote       $05
00097524 E701                       	dc.b	smpsNoAttack, $01
00097526 E104                       	smpsAlterNote       $04
00097528 E701                       	dc.b	smpsNoAttack, $01
0009752A E108                       	smpsAlterNote       $08
0009752C E701                       	dc.b	smpsNoAttack, $01
0009752E E10E                       	smpsAlterNote       $0E
00097530 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097534 E10B                       	smpsAlterNote       $0B
00097536 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0009753A E108                       	smpsAlterNote       $08
0009753C E701                       	dc.b	smpsNoAttack, $01
0009753E E104                       	smpsAlterNote       $04
00097540 E701                       	dc.b	smpsNoAttack, $01
00097542 E108                       	smpsAlterNote       $08
00097544 E701                       	dc.b	smpsNoAttack, $01
00097546 E10B                       	smpsAlterNote       $0B
00097548 E701                       	dc.b	smpsNoAttack, $01
0009754C E0C0                       	smpsPan             panCenter, $00
0009754E E601                       	smpsAlterVol        $01
00097550 E108                       	smpsAlterNote       $08
00097552 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0009755E 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00097566 E080                       	smpsPan             panLeft, $00
00097568 07                         	dc.b	$07
00097569 E6FF                       	smpsAlterVol        $FF
0009756B E10D                       	smpsAlterNote       $0D
0009756D B60D                       	dc.b	nF4, $0D
0009756F E10A                       	smpsAlterNote       $0A
00097571 E701                       	dc.b	smpsNoAttack, $01
00097573 E106                       	smpsAlterNote       $06
00097575 E701                       	dc.b	smpsNoAttack, $01
00097577 E10A                       	smpsAlterNote       $0A
00097579 E701                       	dc.b	smpsNoAttack, $01
0009757B E110                       	smpsAlterNote       $10
0009757D E701                       	dc.b	smpsNoAttack, $01
0009757F E111                       	smpsAlterNote       $11
00097581 E701                       	dc.b	smpsNoAttack, $01
00097583 E10D                       	smpsAlterNote       $0D
00097585 E701                       	dc.b	smpsNoAttack, $01
00097587 E107                       	smpsAlterNote       $07
00097589 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009758D E10A                       	smpsAlterNote       $0A
0009758F E701                       	dc.b	smpsNoAttack, $01
00097591 E110                       	smpsAlterNote       $10
00097593 E701                       	dc.b	smpsNoAttack, $01
00097595 E111                       	smpsAlterNote       $11
00097597 8001                       	dc.b	nRst, $01
00097599 E10D                       	smpsAlterNote       $0D
0009759B B80D                       	dc.b	nG4, $0D
0009759D E10A                       	smpsAlterNote       $0A
0009759F E701                       	dc.b	smpsNoAttack, $01
000975A1 E106                       	smpsAlterNote       $06
000975A3 E701                       	dc.b	smpsNoAttack, $01
000975A5 E10A                       	smpsAlterNote       $0A
000975A7 E701                       	dc.b	smpsNoAttack, $01
000975A9 E110                       	smpsAlterNote       $10
000975AB E701                       	dc.b	smpsNoAttack, $01
000975AD E111                       	smpsAlterNote       $11
000975AF E701                       	dc.b	smpsNoAttack, $01
000975B1 E10D                       	smpsAlterNote       $0D
000975B3 E701                       	dc.b	smpsNoAttack, $01
000975B5 E107                       	smpsAlterNote       $07
000975B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975BB E10D                       	smpsAlterNote       $0D
000975BD E701                       	dc.b	smpsNoAttack, $01
000975BF E110                       	smpsAlterNote       $10
000975C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975C5 E10A                       	smpsAlterNote       $0A
000975C7 E701                       	dc.b	smpsNoAttack, $01
000975C9 E106                       	smpsAlterNote       $06
000975CB E701                       	dc.b	smpsNoAttack, $01
000975CD E107                       	smpsAlterNote       $07
000975CF E701                       	dc.b	smpsNoAttack, $01
000975D1 E10D                       	smpsAlterNote       $0D
000975D3 E701                       	dc.b	smpsNoAttack, $01
000975D5 E111                       	smpsAlterNote       $11
000975D7 E701                       	dc.b	smpsNoAttack, $01
000975D9 E10D                       	smpsAlterNote       $0D
000975DB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000975DF E10F                       	smpsAlterNote       $0F
000975E1 BA0D                       	dc.b	nA4, $0D
000975E3 E109                       	smpsAlterNote       $09
000975E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975E9 E10C                       	smpsAlterNote       $0C
000975EB E701                       	dc.b	smpsNoAttack, $01
000975ED E112                       	smpsAlterNote       $12
000975EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975F3 E10C                       	smpsAlterNote       $0C
000975F5 E701                       	dc.b	smpsNoAttack, $01
000975F7 E109                       	smpsAlterNote       $09
000975F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975FD E10F                       	smpsAlterNote       $0F
000975FF E701                       	dc.b	smpsNoAttack, $01
00097601 E113                       	smpsAlterNote       $13
00097603 E701                       	dc.b	smpsNoAttack, $01
00097605 E112                       	smpsAlterNote       $12
00097607 E701                       	dc.b	smpsNoAttack, $01
00097609 E10C                       	smpsAlterNote       $0C
0009760B E701                       	dc.b	smpsNoAttack, $01
0009760D E108                       	smpsAlterNote       $08
0009760F E701                       	dc.b	smpsNoAttack, $01
00097611 E10C                       	smpsAlterNote       $0C
00097613 E701                       	dc.b	smpsNoAttack, $01
00097615 E10F                       	smpsAlterNote       $0F
00097617 E701                       	dc.b	smpsNoAttack, $01
00097619 E113                       	smpsAlterNote       $13
0009761B E701                       	dc.b	smpsNoAttack, $01
0009761D E10F                       	smpsAlterNote       $0F
0009761F E701                       	dc.b	smpsNoAttack, $01
00097621 E109                       	smpsAlterNote       $09
00097623 E701                       	dc.b	smpsNoAttack, $01
00097625 E108                       	smpsAlterNote       $08
00097627 E701                       	dc.b	smpsNoAttack, $01
00097629 E10C                       	smpsAlterNote       $0C
0009762B E701                       	dc.b	smpsNoAttack, $01
0009762D E112                       	smpsAlterNote       $12
0009762F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097633 E10F                       	smpsAlterNote       $0F
00097635 E701                       	dc.b	smpsNoAttack, $01
00097637 E109                       	smpsAlterNote       $09
00097639 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009763D E10F                       	smpsAlterNote       $0F
0009763F E701                       	dc.b	smpsNoAttack, $01
00097641 E112                       	smpsAlterNote       $12
00097643 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097647 E10C                       	smpsAlterNote       $0C
00097649 E701                       	dc.b	smpsNoAttack, $01
0009764B E108                       	smpsAlterNote       $08
0009764D E701                       	dc.b	smpsNoAttack, $01
0009764F E109                       	smpsAlterNote       $09
00097651 E701                       	dc.b	smpsNoAttack, $01
00097653 E10C                       	smpsAlterNote       $0C
00097655 B50A                       	dc.b	nE4, $0A
00097657 E10D                       	smpsAlterNote       $0D
00097659 B60E                       	dc.b	nF4, $0E
0009765B E107                       	smpsAlterNote       $07
0009765D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097661 E10D                       	smpsAlterNote       $0D
00097663 E701                       	dc.b	smpsNoAttack, $01
00097665 E110                       	smpsAlterNote       $10
00097667 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009766B E10A                       	smpsAlterNote       $0A
0009766D E701                       	dc.b	smpsNoAttack, $01
0009766F E106                       	smpsAlterNote       $06
00097671 E701                       	dc.b	smpsNoAttack, $01
00097673 E107                       	smpsAlterNote       $07
00097675 E701                       	dc.b	smpsNoAttack, $01
00097677 E10D                       	smpsAlterNote       $0D
00097679 E701                       	dc.b	smpsNoAttack, $01
0009767B E111                       	smpsAlterNote       $11
0009767D E701                       	dc.b	smpsNoAttack, $01
0009767F E10D                       	smpsAlterNote       $0D
00097681 B80D                       	dc.b	nG4, $0D
00097683 E10A                       	smpsAlterNote       $0A
00097685 E701                       	dc.b	smpsNoAttack, $01
00097687 E107                       	smpsAlterNote       $07
00097689 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009768D E10D                       	smpsAlterNote       $0D
0009768F E701                       	dc.b	smpsNoAttack, $01
00097691 E111                       	smpsAlterNote       $11
00097693 E701                       	dc.b	smpsNoAttack, $01
00097695 E110                       	smpsAlterNote       $10
00097697 E701                       	dc.b	smpsNoAttack, $01
00097699 E10A                       	smpsAlterNote       $0A
0009769B E701                       	dc.b	smpsNoAttack, $01
0009769D E106                       	smpsAlterNote       $06
0009769F E701                       	dc.b	smpsNoAttack, $01
000976A1 E10A                       	smpsAlterNote       $0A
000976A3 E701                       	dc.b	smpsNoAttack, $01
000976A5 E10D                       	smpsAlterNote       $0D
000976A7 E701                       	dc.b	smpsNoAttack, $01
000976A9 E111                       	smpsAlterNote       $11
000976AB E701                       	dc.b	smpsNoAttack, $01
000976AD E10D                       	smpsAlterNote       $0D
000976AF E701                       	dc.b	smpsNoAttack, $01
000976B1 E107                       	smpsAlterNote       $07
000976B3 E701                       	dc.b	smpsNoAttack, $01
000976B5 E106                       	smpsAlterNote       $06
000976B7 E701                       	dc.b	smpsNoAttack, $01
000976B9 E10A                       	smpsAlterNote       $0A
000976BB E701                       	dc.b	smpsNoAttack, $01
000976BD E110                       	smpsAlterNote       $10
000976BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976C3 E10D                       	smpsAlterNote       $0D
000976C5 E701                       	dc.b	smpsNoAttack, $01
000976C7 E10F                       	smpsAlterNote       $0F
000976C9 BA0D                       	dc.b	nA4, $0D
000976CB E10C                       	smpsAlterNote       $0C
000976CD E701                       	dc.b	smpsNoAttack, $01
000976CF E108                       	smpsAlterNote       $08
000976D1 E701                       	dc.b	smpsNoAttack, $01
000976D3 E109                       	smpsAlterNote       $09
000976D5 E701                       	dc.b	smpsNoAttack, $01
000976D7 E10F                       	smpsAlterNote       $0F
000976D9 E701                       	dc.b	smpsNoAttack, $01
000976DB E113                       	smpsAlterNote       $13
000976DD E701                       	dc.b	smpsNoAttack, $01
000976DF E10F                       	smpsAlterNote       $0F
000976E1 E701                       	dc.b	smpsNoAttack, $01
000976E3 E10C                       	smpsAlterNote       $0C
000976E5 E701                       	dc.b	smpsNoAttack, $01
000976E7 E108                       	smpsAlterNote       $08
000976E9 E701                       	dc.b	smpsNoAttack, $01
000976EB E10C                       	smpsAlterNote       $0C
000976ED E701                       	dc.b	smpsNoAttack, $01
000976EF E112                       	smpsAlterNote       $12
000976F1 E701                       	dc.b	smpsNoAttack, $01
000976F3 E113                       	smpsAlterNote       $13
000976F5 E701                       	dc.b	smpsNoAttack, $01
000976F7 E10F                       	smpsAlterNote       $0F
000976F9 E701                       	dc.b	smpsNoAttack, $01
000976FB E109                       	smpsAlterNote       $09
000976FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097701 E10C                       	smpsAlterNote       $0C
00097703 E701                       	dc.b	smpsNoAttack, $01
00097705 E112                       	smpsAlterNote       $12
00097707 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009770B E10C                       	smpsAlterNote       $0C
0009770D E701                       	dc.b	smpsNoAttack, $01
0009770F E109                       	smpsAlterNote       $09
00097711 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097715 E10F                       	smpsAlterNote       $0F
00097717 E701                       	dc.b	smpsNoAttack, $01
00097719 E113                       	smpsAlterNote       $13
0009771B E701                       	dc.b	smpsNoAttack, $01
0009771D E112                       	smpsAlterNote       $12
0009771F E701                       	dc.b	smpsNoAttack, $01
00097721 E10C                       	smpsAlterNote       $0C
00097723 E701                       	dc.b	smpsNoAttack, $01
00097725 E109                       	smpsAlterNote       $09
00097727 8001                       	dc.b	nRst, $01
00097729 E10D                       	smpsAlterNote       $0D
0009772B B60A                       	dc.b	nF4, $0A
0009772D E10C                       	smpsAlterNote       $0C
0009772F B506 8001                  	dc.b	nE4, $06, nRst, $01
00097733 E10B                       	smpsAlterNote       $0B
00097735 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00097739 E10C                       	smpsAlterNote       $0C
0009773B B503                       	dc.b	nE4, $03
0009773D E10D                       	smpsAlterNote       $0D
0009773F B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
00097749 E10C                       	smpsAlterNote       $0C
0009774B E701                       	dc.b	smpsNoAttack, $01
0009774D E108                       	smpsAlterNote       $08
0009774F E701                       	dc.b	smpsNoAttack, $01
00097751 E10C                       	smpsAlterNote       $0C
00097753 E701                       	dc.b	smpsNoAttack, $01
00097755 E112                       	smpsAlterNote       $12
00097757 E701                       	dc.b	smpsNoAttack, $01
00097759 E113                       	smpsAlterNote       $13
0009775B E701                       	dc.b	smpsNoAttack, $01
0009775D E10F                       	smpsAlterNote       $0F
0009775F E701                       	dc.b	smpsNoAttack, $01
00097761 E109                       	smpsAlterNote       $09
00097763 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097767 E10C                       	smpsAlterNote       $0C
00097769 E701                       	dc.b	smpsNoAttack, $01
0009776B E112                       	smpsAlterNote       $12
0009776D E701                       	dc.b	smpsNoAttack, $01
0009776F E113                       	smpsAlterNote       $13
00097771 8001                       	dc.b	nRst, $01
00097773 E10D                       	smpsAlterNote       $0D
00097775 C20D                       	dc.b	nF5, $0D
00097777 E10A                       	smpsAlterNote       $0A
00097779 E701                       	dc.b	smpsNoAttack, $01
0009777B E106                       	smpsAlterNote       $06
0009777D E701                       	dc.b	smpsNoAttack, $01
0009777F E10A                       	smpsAlterNote       $0A
00097781 E701                       	dc.b	smpsNoAttack, $01
00097783 E110                       	smpsAlterNote       $10
00097785 E701                       	dc.b	smpsNoAttack, $01
00097787 E111                       	smpsAlterNote       $11
00097789 E701                       	dc.b	smpsNoAttack, $01
0009778B E10D                       	smpsAlterNote       $0D
0009778D E701                       	dc.b	smpsNoAttack, $01
0009778F E107                       	smpsAlterNote       $07
00097791 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097795 E10A                       	smpsAlterNote       $0A
00097797 E701                       	dc.b	smpsNoAttack, $01
00097799 E110                       	smpsAlterNote       $10
0009779B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009779F E10A                       	smpsAlterNote       $0A
000977A1 E701                       	dc.b	smpsNoAttack, $01
000977A3 E107                       	smpsAlterNote       $07
000977A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977A9 E10D                       	smpsAlterNote       $0D
000977AB E701                       	dc.b	smpsNoAttack, $01
000977AD E111                       	smpsAlterNote       $11
000977AF E701                       	dc.b	smpsNoAttack, $01
000977B1 E110                       	smpsAlterNote       $10
000977B3 E701                       	dc.b	smpsNoAttack, $01
000977B5 E10A                       	smpsAlterNote       $0A
000977B7 E701                       	dc.b	smpsNoAttack, $01
000977B9 E106                       	smpsAlterNote       $06
000977BB E701                       	dc.b	smpsNoAttack, $01
000977BD E10A                       	smpsAlterNote       $0A
000977BF E701                       	dc.b	smpsNoAttack, $01
000977C1 E10D                       	smpsAlterNote       $0D
000977C3 E701                       	dc.b	smpsNoAttack, $01
000977C5 E111                       	smpsAlterNote       $11
000977C7 E701                       	dc.b	smpsNoAttack, $01
000977C9 E10D                       	smpsAlterNote       $0D
000977CB E701                       	dc.b	smpsNoAttack, $01
000977CD E107                       	smpsAlterNote       $07
000977CF E701                       	dc.b	smpsNoAttack, $01
000977D1 E106                       	smpsAlterNote       $06
000977D3 E701                       	dc.b	smpsNoAttack, $01
000977D5 E10A                       	smpsAlterNote       $0A
000977D7 E701                       	dc.b	smpsNoAttack, $01
000977D9 E110                       	smpsAlterNote       $10
000977DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977DF E10D                       	smpsAlterNote       $0D
000977E1 E701                       	dc.b	smpsNoAttack, $01
000977E3 E107                       	smpsAlterNote       $07
000977E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977E9 E10D                       	smpsAlterNote       $0D
000977EB E701                       	dc.b	smpsNoAttack, $01
000977ED E110                       	smpsAlterNote       $10
000977EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977F3 E10A                       	smpsAlterNote       $0A
000977F5 E701                       	dc.b	smpsNoAttack, $01
000977F7 E106                       	smpsAlterNote       $06
000977F9 E701                       	dc.b	smpsNoAttack, $01
000977FB E107                       	smpsAlterNote       $07
000977FD E701                       	dc.b	smpsNoAttack, $01
000977FF E10D                       	smpsAlterNote       $0D
00097801 E701                       	dc.b	smpsNoAttack, $01
00097803 E111                       	smpsAlterNote       $11
00097805 E701                       	dc.b	smpsNoAttack, $01
00097807 E10D                       	smpsAlterNote       $0D
00097809 E701                       	dc.b	smpsNoAttack, $01
0009780B E10A                       	smpsAlterNote       $0A
0009780D E701                       	dc.b	smpsNoAttack, $01
0009780F E107                       	smpsAlterNote       $07
00097811 8001                       	dc.b	nRst, $01
00097813 E10D                       	smpsAlterNote       $0D
00097815 C206 8001                  	dc.b	nF5, $06, nRst, $01
0009781B E601                       	smpsAlterVol        $01
0009781D E110                       	smpsAlterNote       $10
0009781F BB0D                       	dc.b	nBb4, $0D
00097821 E10A                       	smpsAlterNote       $0A
00097823 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097827 E110                       	smpsAlterNote       $10
00097829 E701                       	dc.b	smpsNoAttack, $01
0009782B E113                       	smpsAlterNote       $13
0009782D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097831 E10D                       	smpsAlterNote       $0D
00097833 E701                       	dc.b	smpsNoAttack, $01
00097835 E109                       	smpsAlterNote       $09
00097837 E701                       	dc.b	smpsNoAttack, $01
00097839 E10A                       	smpsAlterNote       $0A
0009783B E701                       	dc.b	smpsNoAttack, $01
0009783D E110                       	smpsAlterNote       $10
0009783F E701                       	dc.b	smpsNoAttack, $01
00097841 E114                       	smpsAlterNote       $14
00097843 E701                       	dc.b	smpsNoAttack, $01
00097845 E110                       	smpsAlterNote       $10
00097847 E701                       	dc.b	smpsNoAttack, $01
00097849 E10D                       	smpsAlterNote       $0D
0009784B E701                       	dc.b	smpsNoAttack, $01
0009784D E109                       	smpsAlterNote       $09
0009784F E701                       	dc.b	smpsNoAttack, $01
00097851 E10A                       	smpsAlterNote       $0A
00097853 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00097857 E107                       	smpsAlterNote       $07
00097859 E701                       	dc.b	smpsNoAttack, $01
0009785B E103                       	smpsAlterNote       $03
0009785D E701                       	dc.b	smpsNoAttack, $01
0009785F E107                       	smpsAlterNote       $07
00097861 E701                       	dc.b	smpsNoAttack, $01
00097863 E10D                       	smpsAlterNote       $0D
00097865 E701                       	dc.b	smpsNoAttack, $01
00097867 E10E                       	smpsAlterNote       $0E
00097869 E701                       	dc.b	smpsNoAttack, $01
0009786B E10A                       	smpsAlterNote       $0A
0009786D E701                       	dc.b	smpsNoAttack, $01
0009786F E104                       	smpsAlterNote       $04
00097871 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097875 E107                       	smpsAlterNote       $07
00097877 E701                       	dc.b	smpsNoAttack, $01
00097879 E10D                       	smpsAlterNote       $0D
0009787B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009787F E107                       	smpsAlterNote       $07
00097881 E701                       	dc.b	smpsNoAttack, $01
00097883 E104                       	smpsAlterNote       $04
00097885 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097889 E10B                       	smpsAlterNote       $0B
0009788B BF0D                       	dc.b	nD5, $0D
0009788D E108                       	smpsAlterNote       $08
0009788F E701                       	dc.b	smpsNoAttack, $01
00097891 E105                       	smpsAlterNote       $05
00097893 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097897 E10B                       	smpsAlterNote       $0B
00097899 E701                       	dc.b	smpsNoAttack, $01
0009789B E10F                       	smpsAlterNote       $0F
0009789D E701                       	dc.b	smpsNoAttack, $01
0009789F E10E                       	smpsAlterNote       $0E
000978A1 E701                       	dc.b	smpsNoAttack, $01
000978A3 E108                       	smpsAlterNote       $08
000978A5 E701                       	dc.b	smpsNoAttack, $01
000978A7 E104                       	smpsAlterNote       $04
000978A9 E701                       	dc.b	smpsNoAttack, $01
000978AB E108                       	smpsAlterNote       $08
000978AD E701                       	dc.b	smpsNoAttack, $01
000978AF E10B                       	smpsAlterNote       $0B
000978B1 E701                       	dc.b	smpsNoAttack, $01
000978B3 E10F                       	smpsAlterNote       $0F
000978B5 E701                       	dc.b	smpsNoAttack, $01
000978B7 E10B                       	smpsAlterNote       $0B
000978B9 E701                       	dc.b	smpsNoAttack, $01
000978BB E105                       	smpsAlterNote       $05
000978BD E701                       	dc.b	smpsNoAttack, $01
000978BF E104                       	smpsAlterNote       $04
000978C1 E701                       	dc.b	smpsNoAttack, $01
000978C3 E105                       	smpsAlterNote       $05
000978C5 8001                       	dc.b	nRst, $01
000978C7 E10C                       	smpsAlterNote       $0C
000978C9 C10C                       	dc.b	nE5, $0C
000978CB E10D                       	smpsAlterNote       $0D
000978CD C201                       	dc.b	nF5, $01
000978CF E10E                       	smpsAlterNote       $0E
000978D1 C301 8001                  	dc.b	nFs5, $01, nRst, $01
000978D5 E10D                       	smpsAlterNote       $0D
000978D7 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000978DB E10A                       	smpsAlterNote       $0A
000978DD E701                       	dc.b	smpsNoAttack, $01
000978DF E106                       	smpsAlterNote       $06
000978E1 E701                       	dc.b	smpsNoAttack, $01
000978E3 E10A                       	smpsAlterNote       $0A
000978E5 E701                       	dc.b	smpsNoAttack, $01
000978E7 E10D                       	smpsAlterNote       $0D
000978E9 E701                       	dc.b	smpsNoAttack, $01
000978EB E111                       	smpsAlterNote       $11
000978ED E701                       	dc.b	smpsNoAttack, $01
000978EF E10D                       	smpsAlterNote       $0D
000978F1 E701                       	dc.b	smpsNoAttack, $01
000978F3 E107                       	smpsAlterNote       $07
000978F5 E701                       	dc.b	smpsNoAttack, $01
000978F7 E106                       	smpsAlterNote       $06
000978F9 E701                       	dc.b	smpsNoAttack, $01
000978FB E10A                       	smpsAlterNote       $0A
000978FD E701                       	dc.b	smpsNoAttack, $01
000978FF E110                       	smpsAlterNote       $10
00097901 E701                       	dc.b	smpsNoAttack, $01
00097903 E111                       	smpsAlterNote       $11
00097905 8001                       	dc.b	nRst, $01
00097907 E10D                       	smpsAlterNote       $0D
00097909 C40D                       	dc.b	nG5, $0D
0009790B E10A                       	smpsAlterNote       $0A
0009790D E701                       	dc.b	smpsNoAttack, $01
0009790F E106                       	smpsAlterNote       $06
00097911 E701                       	dc.b	smpsNoAttack, $01
00097913 E10A                       	smpsAlterNote       $0A
00097915 E701                       	dc.b	smpsNoAttack, $01
00097917 E10D                       	smpsAlterNote       $0D
00097919 E701                       	dc.b	smpsNoAttack, $01
0009791B E10C                       	smpsAlterNote       $0C
0009791D C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00097929 8001                       	dc.b	nRst, $01
0009792B E10D                       	smpsAlterNote       $0D
0009792D C20D                       	dc.b	nF5, $0D
0009792F E10A                       	smpsAlterNote       $0A
00097931 E701                       	dc.b	smpsNoAttack, $01
00097933 E106                       	smpsAlterNote       $06
00097935 E701                       	dc.b	smpsNoAttack, $01
00097937 E10A                       	smpsAlterNote       $0A
00097939 E701                       	dc.b	smpsNoAttack, $01
0009793B E110                       	smpsAlterNote       $10
0009793D E701                       	dc.b	smpsNoAttack, $01
0009793F E111                       	smpsAlterNote       $11
00097941 E701                       	dc.b	smpsNoAttack, $01
00097943 E10D                       	smpsAlterNote       $0D
00097945 E701                       	dc.b	smpsNoAttack, $01
00097947 E107                       	smpsAlterNote       $07
00097949 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009794D E10A                       	smpsAlterNote       $0A
0009794F E701                       	dc.b	smpsNoAttack, $01
00097951 E110                       	smpsAlterNote       $10
00097953 E701                       	dc.b	smpsNoAttack, $01
00097955 E111                       	smpsAlterNote       $11
00097957 8001                       	dc.b	nRst, $01
00097959 E10F                       	smpsAlterNote       $0F
0009795B C60A                       	dc.b	nA5, $0A
0009795D E10D                       	smpsAlterNote       $0D
0009795F C406 8001                  	dc.b	nG5, $06, nRst, $01
00097963 E10C                       	smpsAlterNote       $0C
00097965 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00097971 8001                       	dc.b	nRst, $01
00097973 E10D                       	smpsAlterNote       $0D
00097975 C20D                       	dc.b	nF5, $0D
00097977 E107                       	smpsAlterNote       $07
00097979 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009797D E10A                       	smpsAlterNote       $0A
0009797F E701                       	dc.b	smpsNoAttack, $01
00097981 E110                       	smpsAlterNote       $10
00097983 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097987 E10A                       	smpsAlterNote       $0A
00097989 E701                       	dc.b	smpsNoAttack, $01
0009798B E107                       	smpsAlterNote       $07
0009798D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097991 E10D                       	smpsAlterNote       $0D
00097993 E701                       	dc.b	smpsNoAttack, $01
00097995 E111                       	smpsAlterNote       $11
00097997 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009799B E10D                       	smpsAlterNote       $0D
0009799D C40D                       	dc.b	nG5, $0D
0009799F E107                       	smpsAlterNote       $07
000979A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000979A5 E10A                       	smpsAlterNote       $0A
000979A7 E701                       	dc.b	smpsNoAttack, $01
000979A9 E10D                       	smpsAlterNote       $0D
000979AB 8001                       	dc.b	nRst, $01
000979AD E10C                       	smpsAlterNote       $0C
000979AF C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000979BB E10D                       	smpsAlterNote       $0D
000979BD C20E                       	dc.b	nF5, $0E
000979BF E107                       	smpsAlterNote       $07
000979C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000979C5 E10D                       	smpsAlterNote       $0D
000979C7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000979CD E0C0                       	smpsPan             panCenter, $00
000979CF E603                       	smpsAlterVol        $03
000979D1 E108                       	smpsAlterNote       $08
000979D3 B406                       	dc.b	nEb4, $06
000979D5 E10C                       	smpsAlterNote       $0C
000979D7 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000979DB E108                       	smpsAlterNote       $08
000979DD B403                       	dc.b	nEb4, $03
000979DF E109                       	smpsAlterNote       $09
000979E1 B803 8001                  	dc.b	nG4, $03, nRst, $01
000979E5 E10C                       	smpsAlterNote       $0C
000979E7 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
000979EF 03                         	dc.b	$03
000979F0 E6FD                       	smpsAlterVol        $FD
000979F2 F6F1 F4                    	smpsJump            music84_Jump00
000979F5                            
000979F5                            ; PSG1 Data
000979F5                            music84_PSG1:
000979F5 E1FD                       	smpsAlterNote       $FD
000979F7 EC04                       	smpsPSGAlterVol     $04
000979F9 9203                       	dc.b	nF1, $03
000979FB E1FE                       	smpsAlterNote       $FE
000979FD 9603                       	dc.b	nA1, $03
000979FF EC04                       	smpsPSGAlterVol     $04
00097A01 E701                       	dc.b	smpsNoAttack, $01
00097A03 E1FF                       	smpsAlterNote       $FF
00097A05 ECFC                       	smpsPSGAlterVol     $FC
00097A07 9B03                       	dc.b	nD2, $03
00097A09 E1FD                       	smpsAlterNote       $FD
00097A0B 9403                       	dc.b	nG1, $03
00097A0D EC04                       	smpsPSGAlterVol     $04
00097A0F E701                       	dc.b	smpsNoAttack, $01
00097A11 E1FE                       	smpsAlterNote       $FE
00097A13 ECFC                       	smpsPSGAlterVol     $FC
00097A15 9703                       	dc.b	nBb1, $03
00097A17 E1FF                       	smpsAlterNote       $FF
00097A19 9B03                       	dc.b	nD2, $03
00097A1B EC04                       	smpsPSGAlterVol     $04
00097A1D E701                       	dc.b	smpsNoAttack, $01
00097A1F E1FE                       	smpsAlterNote       $FE
00097A21 ECFC                       	smpsPSGAlterVol     $FC
00097A23 A002                       	dc.b	nG2, $02
00097A25 EC04                       	smpsPSGAlterVol     $04
00097A27 E701                       	dc.b	smpsNoAttack, $01
00097A29 E1FF                       	smpsAlterNote       $FF
00097A2B ECFC                       	smpsPSGAlterVol     $FC
00097A2D A203                       	dc.b	nA2, $03
00097A2F EC0B                       	smpsPSGAlterVol     $0B
00097A31 800A                       	dc.b	nRst, $0A
00097A33 E105                       	smpsAlterNote       $05
00097A35 01                         	dc.b	$01
00097A36 E1FC                       	smpsAlterNote       $FC
00097A38 01                         	dc.b	$01
00097A39 E105                       	smpsAlterNote       $05
00097A3B 01                         	dc.b	$01
00097A3C E1FD                       	smpsAlterNote       $FD
00097A3E 01                         	dc.b	$01
00097A3F E105                       	smpsAlterNote       $05
00097A41 01                         	dc.b	$01
00097A42 E1FD                       	smpsAlterNote       $FD
00097A44 01                         	dc.b	$01
00097A45 E1FA                       	smpsAlterNote       $FA
00097A47 01                         	dc.b	$01
00097A48 E1FC                       	smpsAlterNote       $FC
00097A4A 01                         	dc.b	$01
00097A4B E105                       	smpsAlterNote       $05
00097A4D 01                         	dc.b	$01
00097A4E E108                       	smpsAlterNote       $08
00097A50 0101                       	dc.b	$01, $01
00097A52 E105                       	smpsAlterNote       $05
00097A54 01                         	dc.b	$01
00097A55 E1FA                       	smpsAlterNote       $FA
00097A57 0101                       	dc.b	$01, $01
00097A59 E1FD                       	smpsAlterNote       $FD
00097A5B 01                         	dc.b	$01
00097A5C E105                       	smpsAlterNote       $05
00097A5E 01                         	dc.b	$01
00097A5F E108                       	smpsAlterNote       $08
00097A61 01                         	dc.b	$01
00097A62 E105                       	smpsAlterNote       $05
00097A64 01                         	dc.b	$01
00097A65 E1FC                       	smpsAlterNote       $FC
00097A67 01                         	dc.b	$01
00097A68 E105                       	smpsAlterNote       $05
00097A6A 01                         	dc.b	$01
00097A6B E1FD                       	smpsAlterNote       $FD
00097A6D 01                         	dc.b	$01
00097A6E                            
00097A6E                            music84_Jump07:
00097A6E E105                       	smpsAlterNote       $05
00097A70 8001                       	dc.b	nRst, $01
00097A72 E1FD                       	smpsAlterNote       $FD
00097A74 01                         	dc.b	$01
00097A75 E1FA                       	smpsAlterNote       $FA
00097A77 01                         	dc.b	$01
00097A78 E1FC                       	smpsAlterNote       $FC
00097A7A 01                         	dc.b	$01
00097A7B E1FD                       	smpsAlterNote       $FD
00097A7D ECF5                       	smpsPSGAlterVol     $F5
00097A7F 9206                       	dc.b	nF1, $06
00097A81 EC04                       	smpsPSGAlterVol     $04
00097A83 E701                       	dc.b	smpsNoAttack, $01
00097A85 EC07                       	smpsPSGAlterVol     $07
00097A87 8003                       	dc.b	nRst, $03
00097A89 ECF5                       	smpsPSGAlterVol     $F5
00097A8B 9206                       	dc.b	nF1, $06
00097A8D EC04                       	smpsPSGAlterVol     $04
00097A8F E701                       	dc.b	smpsNoAttack, $01
00097A91 EC07                       	smpsPSGAlterVol     $07
00097A93 8006                       	dc.b	nRst, $06
00097A95 E100                       	smpsAlterNote       $00
00097A97 01                         	dc.b	$01
00097A98 E104                       	smpsAlterNote       $04
00097A9A 01                         	dc.b	$01
00097A9B E100                       	smpsAlterNote       $00
00097A9D 01                         	dc.b	$01
00097A9E E1FB                       	smpsAlterNote       $FB
00097AA0 01                         	dc.b	$01
00097AA1 E1FD                       	smpsAlterNote       $FD
00097AA3 ECF5                       	smpsPSGAlterVol     $F5
00097AA5 9406                       	dc.b	nG1, $06
00097AA7 EC04                       	smpsPSGAlterVol     $04
00097AA9 E701                       	dc.b	smpsNoAttack, $01
00097AAB EC07                       	smpsPSGAlterVol     $07
00097AAD 8003                       	dc.b	nRst, $03
00097AAF ECF5                       	smpsPSGAlterVol     $F5
00097AB1 9407                       	dc.b	nG1, $07
00097AB3 EC0B                       	smpsPSGAlterVol     $0B
00097AB5 8006                       	dc.b	nRst, $06
00097AB7 E100                       	smpsAlterNote       $00
00097AB9 01                         	dc.b	$01
00097ABA E103                       	smpsAlterNote       $03
00097ABC 0101                       	dc.b	$01, $01
00097ABE E1FD                       	smpsAlterNote       $FD
00097AC0 01                         	dc.b	$01
00097AC1 ECF5                       	smpsPSGAlterVol     $F5
00097AC3 9207                       	dc.b	nF1, $07
00097AC5 EC0B                       	smpsPSGAlterVol     $0B
00097AC7 8004                       	dc.b	nRst, $04
00097AC9 ECF5                       	smpsPSGAlterVol     $F5
00097ACB 9206                       	dc.b	nF1, $06
00097ACD EC04                       	smpsPSGAlterVol     $04
00097ACF E701                       	dc.b	smpsNoAttack, $01
00097AD1 EC07                       	smpsPSGAlterVol     $07
00097AD3 8006                       	dc.b	nRst, $06
00097AD5 E103                       	smpsAlterNote       $03
00097AD7 01                         	dc.b	$01
00097AD8 E104                       	smpsAlterNote       $04
00097ADA 01                         	dc.b	$01
00097ADB E100                       	smpsAlterNote       $00
00097ADD 01                         	dc.b	$01
00097ADE E1FA                       	smpsAlterNote       $FA
00097AE0 01                         	dc.b	$01
00097AE1 E1FD                       	smpsAlterNote       $FD
00097AE3 ECF5                       	smpsPSGAlterVol     $F5
00097AE5 9206                       	dc.b	nF1, $06
00097AE7 EC04                       	smpsPSGAlterVol     $04
00097AE9 E701                       	dc.b	smpsNoAttack, $01
00097AEB EC07                       	smpsPSGAlterVol     $07
00097AED 8003                       	dc.b	nRst, $03
00097AEF ECF5                       	smpsPSGAlterVol     $F5
00097AF1 9106                       	dc.b	nE1, $06
00097AF3 EC04                       	smpsPSGAlterVol     $04
00097AF5 E701                       	dc.b	smpsNoAttack, $01
00097AF7 EC07                       	smpsPSGAlterVol     $07
00097AF9 8006                       	dc.b	nRst, $06
00097AFB E100                       	smpsAlterNote       $00
00097AFD 01                         	dc.b	$01
00097AFE E104                       	smpsAlterNote       $04
00097B00 01                         	dc.b	$01
00097B01 E100                       	smpsAlterNote       $00
00097B03 01                         	dc.b	$01
00097B04 E1FD                       	smpsAlterNote       $FD
00097B06 01                         	dc.b	$01
00097B07 ECF5                       	smpsPSGAlterVol     $F5
00097B09 9206                       	dc.b	nF1, $06
00097B0B EC04                       	smpsPSGAlterVol     $04
00097B0D E701                       	dc.b	smpsNoAttack, $01
00097B0F EC07                       	smpsPSGAlterVol     $07
00097B11 8003                       	dc.b	nRst, $03
00097B13 ECF5                       	smpsPSGAlterVol     $F5
00097B15 9207                       	dc.b	nF1, $07
00097B17 EC0B                       	smpsPSGAlterVol     $0B
00097B19 8007                       	dc.b	nRst, $07
00097B1B E103                       	smpsAlterNote       $03
00097B1D 0101                       	dc.b	$01, $01
00097B1F E1FD                       	smpsAlterNote       $FD
00097B21 01                         	dc.b	$01
00097B22 E1FB                       	smpsAlterNote       $FB
00097B24 01                         	dc.b	$01
00097B25 E1FD                       	smpsAlterNote       $FD
00097B27 ECF5                       	smpsPSGAlterVol     $F5
00097B29 9406                       	dc.b	nG1, $06
00097B2B EC0B                       	smpsPSGAlterVol     $0B
00097B2D 8004                       	dc.b	nRst, $04
00097B2F ECF5                       	smpsPSGAlterVol     $F5
00097B31 9406                       	dc.b	nG1, $06
00097B33 EC04                       	smpsPSGAlterVol     $04
00097B35 E701                       	dc.b	smpsNoAttack, $01
00097B37 EC07                       	smpsPSGAlterVol     $07
00097B39 8006                       	dc.b	nRst, $06
00097B3B E100                       	smpsAlterNote       $00
00097B3D 01                         	dc.b	$01
00097B3E E104                       	smpsAlterNote       $04
00097B40 01                         	dc.b	$01
00097B41 E100                       	smpsAlterNote       $00
00097B43 01                         	dc.b	$01
00097B44 E1F9                       	smpsAlterNote       $F9
00097B46 01                         	dc.b	$01
00097B47 E1FD                       	smpsAlterNote       $FD
00097B49 ECF5                       	smpsPSGAlterVol     $F5
00097B4B 9206                       	dc.b	nF1, $06
00097B4D EC04                       	smpsPSGAlterVol     $04
00097B4F E701                       	dc.b	smpsNoAttack, $01
00097B51 EC07                       	smpsPSGAlterVol     $07
00097B53 8003                       	dc.b	nRst, $03
00097B55 ECF5                       	smpsPSGAlterVol     $F5
00097B57 9207                       	dc.b	nF1, $07
00097B59 EC0B                       	smpsPSGAlterVol     $0B
00097B5B 8006                       	dc.b	nRst, $06
00097B5D E100                       	smpsAlterNote       $00
00097B5F 01                         	dc.b	$01
00097B60 E104                       	smpsAlterNote       $04
00097B62 01                         	dc.b	$01
00097B63 E103                       	smpsAlterNote       $03
00097B65 01                         	dc.b	$01
00097B66 E1FD                       	smpsAlterNote       $FD
00097B68 01                         	dc.b	$01
00097B69 ECF5                       	smpsPSGAlterVol     $F5
00097B6B 9207                       	dc.b	nF1, $07
00097B6D EC0B                       	smpsPSGAlterVol     $0B
00097B6F 8004                       	dc.b	nRst, $04
00097B71 ECF5                       	smpsPSGAlterVol     $F5
00097B73 9206                       	dc.b	nF1, $06
00097B75 EC0B                       	smpsPSGAlterVol     $0B
00097B77 8007                       	dc.b	nRst, $07
00097B79 E103                       	smpsAlterNote       $03
00097B7B 0101                       	dc.b	$01, $01
00097B7D E100                       	smpsAlterNote       $00
00097B7F 01                         	dc.b	$01
00097B80 E1FA                       	smpsAlterNote       $FA
00097B82 01                         	dc.b	$01
00097B83 E1FD                       	smpsAlterNote       $FD
00097B85 ECF5                       	smpsPSGAlterVol     $F5
00097B87 9206                       	dc.b	nF1, $06
00097B89 EC04                       	smpsPSGAlterVol     $04
00097B8B E701                       	dc.b	smpsNoAttack, $01
00097B8D EC07                       	smpsPSGAlterVol     $07
00097B8F 8003                       	dc.b	nRst, $03
00097B91 ECF5                       	smpsPSGAlterVol     $F5
00097B93 9206                       	dc.b	nF1, $06
00097B95 EC04                       	smpsPSGAlterVol     $04
00097B97 E701                       	dc.b	smpsNoAttack, $01
00097B99 EC07                       	smpsPSGAlterVol     $07
00097B9B 8006                       	dc.b	nRst, $06
00097B9D E100                       	smpsAlterNote       $00
00097B9F 01                         	dc.b	$01
00097BA0 E104                       	smpsAlterNote       $04
00097BA2 01                         	dc.b	$01
00097BA3 E100                       	smpsAlterNote       $00
00097BA5 01                         	dc.b	$01
00097BA6 E1FD                       	smpsAlterNote       $FD
00097BA8 01                         	dc.b	$01
00097BA9 ECF5                       	smpsPSGAlterVol     $F5
00097BAB 9206                       	dc.b	nF1, $06
00097BAD EC04                       	smpsPSGAlterVol     $04
00097BAF E701                       	dc.b	smpsNoAttack, $01
00097BB1 EC07                       	smpsPSGAlterVol     $07
00097BB3 8003                       	dc.b	nRst, $03
00097BB5 ECF5                       	smpsPSGAlterVol     $F5
00097BB7 9207                       	dc.b	nF1, $07
00097BB9 EC0B                       	smpsPSGAlterVol     $0B
00097BBB 8007                       	dc.b	nRst, $07
00097BBD E103                       	smpsAlterNote       $03
00097BBF 0101                       	dc.b	$01, $01
00097BC1 E1FD                       	smpsAlterNote       $FD
00097BC3 01                         	dc.b	$01
00097BC4 E1FA                       	smpsAlterNote       $FA
00097BC6 01                         	dc.b	$01
00097BC7 E1FD                       	smpsAlterNote       $FD
00097BC9 ECF5                       	smpsPSGAlterVol     $F5
00097BCB 9206                       	dc.b	nF1, $06
00097BCD EC0B                       	smpsPSGAlterVol     $0B
00097BCF 8004                       	dc.b	nRst, $04
00097BD1 ECF5                       	smpsPSGAlterVol     $F5
00097BD3 9206                       	dc.b	nF1, $06
00097BD5 EC04                       	smpsPSGAlterVol     $04
00097BD7 E701                       	dc.b	smpsNoAttack, $01
00097BD9 EC07                       	smpsPSGAlterVol     $07
00097BDB 8006                       	dc.b	nRst, $06
00097BDD E103                       	smpsAlterNote       $03
00097BDF 01                         	dc.b	$01
00097BE0 E104                       	smpsAlterNote       $04
00097BE2 01                         	dc.b	$01
00097BE3 E100                       	smpsAlterNote       $00
00097BE5 01                         	dc.b	$01
00097BE6 E1FA                       	smpsAlterNote       $FA
00097BE8 01                         	dc.b	$01
00097BE9 E1FD                       	smpsAlterNote       $FD
00097BEB ECF5                       	smpsPSGAlterVol     $F5
00097BED 9206                       	dc.b	nF1, $06
00097BEF EC04                       	smpsPSGAlterVol     $04
00097BF1 E701                       	dc.b	smpsNoAttack, $01
00097BF3 EC07                       	smpsPSGAlterVol     $07
00097BF5 8003                       	dc.b	nRst, $03
00097BF7 ECF5                       	smpsPSGAlterVol     $F5
00097BF9 9206                       	dc.b	nF1, $06
00097BFB EC04                       	smpsPSGAlterVol     $04
00097BFD E701                       	dc.b	smpsNoAttack, $01
00097BFF EC07                       	smpsPSGAlterVol     $07
00097C01 8006                       	dc.b	nRst, $06
00097C03 E100                       	smpsAlterNote       $00
00097C05 01                         	dc.b	$01
00097C06 E104                       	smpsAlterNote       $04
00097C08 01                         	dc.b	$01
00097C09 E103                       	smpsAlterNote       $03
00097C0B 01                         	dc.b	$01
00097C0C E1FD                       	smpsAlterNote       $FD
00097C0E 01                         	dc.b	$01
00097C0F ECF5                       	smpsPSGAlterVol     $F5
00097C11 9107                       	dc.b	nE1, $07
00097C13 EC0B                       	smpsPSGAlterVol     $0B
00097C15 8004                       	dc.b	nRst, $04
00097C17 ECF5                       	smpsPSGAlterVol     $F5
00097C19 9106                       	dc.b	nE1, $06
00097C1B EC0B                       	smpsPSGAlterVol     $0B
00097C1D 8007                       	dc.b	nRst, $07
00097C1F E103                       	smpsAlterNote       $03
00097C21 0101                       	dc.b	$01, $01
00097C23 E100                       	smpsAlterNote       $00
00097C25 01                         	dc.b	$01
00097C26 E1FA                       	smpsAlterNote       $FA
00097C28 01                         	dc.b	$01
00097C29 E1FD                       	smpsAlterNote       $FD
00097C2B ECF5                       	smpsPSGAlterVol     $F5
00097C2D 9106                       	dc.b	nE1, $06
00097C2F EC04                       	smpsPSGAlterVol     $04
00097C31 E701                       	dc.b	smpsNoAttack, $01
00097C33 EC07                       	smpsPSGAlterVol     $07
00097C35 8003                       	dc.b	nRst, $03
00097C37 ECF5                       	smpsPSGAlterVol     $F5
00097C39 9106                       	dc.b	nE1, $06
00097C3B EC04                       	smpsPSGAlterVol     $04
00097C3D E701                       	dc.b	smpsNoAttack, $01
00097C3F EC07                       	smpsPSGAlterVol     $07
00097C41 8006                       	dc.b	nRst, $06
00097C43 E100                       	smpsAlterNote       $00
00097C45 01                         	dc.b	$01
00097C46 E104                       	smpsAlterNote       $04
00097C48 01                         	dc.b	$01
00097C49 E100                       	smpsAlterNote       $00
00097C4B 01                         	dc.b	$01
00097C4C E1FA                       	smpsAlterNote       $FA
00097C4E 01                         	dc.b	$01
00097C4F E1FD                       	smpsAlterNote       $FD
00097C51 ECF5                       	smpsPSGAlterVol     $F5
00097C53 9106                       	dc.b	nE1, $06
00097C55 EC04                       	smpsPSGAlterVol     $04
00097C57 E701                       	dc.b	smpsNoAttack, $01
00097C59 EC07                       	smpsPSGAlterVol     $07
00097C5B 8003                       	dc.b	nRst, $03
00097C5D ECF5                       	smpsPSGAlterVol     $F5
00097C5F 9107 9106                  	dc.b	nE1, $07, nE1, $06
00097C63 EC04                       	smpsPSGAlterVol     $04
00097C65 E701                       	dc.b	smpsNoAttack, $01
00097C67 ECFC                       	smpsPSGAlterVol     $FC
00097C69 9103 9103                  	dc.b	nE1, $03, nE1, $03
00097C6D EC04                       	smpsPSGAlterVol     $04
00097C6F E701                       	dc.b	smpsNoAttack, $01
00097C71 ECFC                       	smpsPSGAlterVol     $FC
00097C73 9106                       	dc.b	nE1, $06
00097C75 EC04                       	smpsPSGAlterVol     $04
00097C77 E701                       	dc.b	smpsNoAttack, $01
00097C79 EC07                       	smpsPSGAlterVol     $07
00097C7B 8006                       	dc.b	nRst, $06
00097C7D E100                       	smpsAlterNote       $00
00097C7F 01                         	dc.b	$01
00097C80 E104                       	smpsAlterNote       $04
00097C82 01                         	dc.b	$01
00097C83 E100                       	smpsAlterNote       $00
00097C85 01                         	dc.b	$01
00097C86 E1FA                       	smpsAlterNote       $FA
00097C88 01                         	dc.b	$01
00097C89 E1F9                       	smpsAlterNote       $F9
00097C8B 01                         	dc.b	$01
00097C8C E1FD                       	smpsAlterNote       $FD
00097C8E 01                         	dc.b	$01
00097C8F E103                       	smpsAlterNote       $03
00097C91 01                         	dc.b	$01
00097C92 E104                       	smpsAlterNote       $04
00097C94 01                         	dc.b	$01
00097C95 E100                       	smpsAlterNote       $00
00097C97 01                         	dc.b	$01
00097C98 E1FA                       	smpsAlterNote       $FA
00097C9A 0101                       	dc.b	$01, $01
00097C9C E1FD                       	smpsAlterNote       $FD
00097C9E ECF5                       	smpsPSGAlterVol     $F5
00097CA0 9206                       	dc.b	nF1, $06
00097CA2 EC04                       	smpsPSGAlterVol     $04
00097CA4 E701                       	dc.b	smpsNoAttack, $01
00097CA6 EC07                       	smpsPSGAlterVol     $07
00097CA8 8003                       	dc.b	nRst, $03
00097CAA ECF5                       	smpsPSGAlterVol     $F5
00097CAC 9206                       	dc.b	nF1, $06
00097CAE EC04                       	smpsPSGAlterVol     $04
00097CB0 E701                       	dc.b	smpsNoAttack, $01
00097CB2 EC07                       	smpsPSGAlterVol     $07
00097CB4 8006                       	dc.b	nRst, $06
00097CB6 E100                       	smpsAlterNote       $00
00097CB8 01                         	dc.b	$01
00097CB9 E104                       	smpsAlterNote       $04
00097CBB 01                         	dc.b	$01
00097CBC E103                       	smpsAlterNote       $03
00097CBE 01                         	dc.b	$01
00097CBF E1FD                       	smpsAlterNote       $FD
00097CC1 01                         	dc.b	$01
00097CC2 ECF5                       	smpsPSGAlterVol     $F5
00097CC4 9407                       	dc.b	nG1, $07
00097CC6 EC0B                       	smpsPSGAlterVol     $0B
00097CC8 8004                       	dc.b	nRst, $04
00097CCA ECF5                       	smpsPSGAlterVol     $F5
00097CCC 9406                       	dc.b	nG1, $06
00097CCE EC0B                       	smpsPSGAlterVol     $0B
00097CD0 8007                       	dc.b	nRst, $07
00097CD2 E103                       	smpsAlterNote       $03
00097CD4 0101                       	dc.b	$01, $01
00097CD6 E1FD                       	smpsAlterNote       $FD
00097CD8 01                         	dc.b	$01
00097CD9 E1F9                       	smpsAlterNote       $F9
00097CDB 01                         	dc.b	$01
00097CDC E1FD                       	smpsAlterNote       $FD
00097CDE ECF5                       	smpsPSGAlterVol     $F5
00097CE0 9206                       	dc.b	nF1, $06
00097CE2 EC04                       	smpsPSGAlterVol     $04
00097CE4 E701                       	dc.b	smpsNoAttack, $01
00097CE6 EC07                       	smpsPSGAlterVol     $07
00097CE8 8003                       	dc.b	nRst, $03
00097CEA ECF5                       	smpsPSGAlterVol     $F5
00097CEC 9206                       	dc.b	nF1, $06
00097CEE EC04                       	smpsPSGAlterVol     $04
00097CF0 E701                       	dc.b	smpsNoAttack, $01
00097CF2 EC07                       	smpsPSGAlterVol     $07
00097CF4 8006                       	dc.b	nRst, $06
00097CF6 E100                       	smpsAlterNote       $00
00097CF8 01                         	dc.b	$01
00097CF9 E104                       	smpsAlterNote       $04
00097CFB 01                         	dc.b	$01
00097CFC E100                       	smpsAlterNote       $00
00097CFE 01                         	dc.b	$01
00097CFF E1FA                       	smpsAlterNote       $FA
00097D01 01                         	dc.b	$01
00097D02 E1FD                       	smpsAlterNote       $FD
00097D04 ECF5                       	smpsPSGAlterVol     $F5
00097D06 9206                       	dc.b	nF1, $06
00097D08 EC04                       	smpsPSGAlterVol     $04
00097D0A E701                       	dc.b	smpsNoAttack, $01
00097D0C EC07                       	smpsPSGAlterVol     $07
00097D0E 8003                       	dc.b	nRst, $03
00097D10 ECF5                       	smpsPSGAlterVol     $F5
00097D12 9107                       	dc.b	nE1, $07
00097D14 EC0B                       	smpsPSGAlterVol     $0B
00097D16 8006                       	dc.b	nRst, $06
00097D18 E100                       	smpsAlterNote       $00
00097D1A 01                         	dc.b	$01
00097D1B E103                       	smpsAlterNote       $03
00097D1D 0101                       	dc.b	$01, $01
00097D1F E1FD                       	smpsAlterNote       $FD
00097D21 01                         	dc.b	$01
00097D22 ECF5                       	smpsPSGAlterVol     $F5
00097D24 9207                       	dc.b	nF1, $07
00097D26 EC0B                       	smpsPSGAlterVol     $0B
00097D28 8004                       	dc.b	nRst, $04
00097D2A ECF5                       	smpsPSGAlterVol     $F5
00097D2C 9206                       	dc.b	nF1, $06
00097D2E EC04                       	smpsPSGAlterVol     $04
00097D30 E701                       	dc.b	smpsNoAttack, $01
00097D32 EC07                       	smpsPSGAlterVol     $07
00097D34 8006                       	dc.b	nRst, $06
00097D36 E103                       	smpsAlterNote       $03
00097D38 01                         	dc.b	$01
00097D39 E104                       	smpsAlterNote       $04
00097D3B 01                         	dc.b	$01
00097D3C E100                       	smpsAlterNote       $00
00097D3E 01                         	dc.b	$01
00097D3F E1FB                       	smpsAlterNote       $FB
00097D41 01                         	dc.b	$01
00097D42 E1FD                       	smpsAlterNote       $FD
00097D44 ECF5                       	smpsPSGAlterVol     $F5
00097D46 9406                       	dc.b	nG1, $06
00097D48 EC04                       	smpsPSGAlterVol     $04
00097D4A E701                       	dc.b	smpsNoAttack, $01
00097D4C EC07                       	smpsPSGAlterVol     $07
00097D4E 8003                       	dc.b	nRst, $03
00097D50 ECF5                       	smpsPSGAlterVol     $F5
00097D52 9406                       	dc.b	nG1, $06
00097D54 EC04                       	smpsPSGAlterVol     $04
00097D56 E701                       	dc.b	smpsNoAttack, $01
00097D58 EC07                       	smpsPSGAlterVol     $07
00097D5A 8006                       	dc.b	nRst, $06
00097D5C E100                       	smpsAlterNote       $00
00097D5E 01                         	dc.b	$01
00097D5F E104                       	smpsAlterNote       $04
00097D61 01                         	dc.b	$01
00097D62 E100                       	smpsAlterNote       $00
00097D64 01                         	dc.b	$01
00097D65 E1FD                       	smpsAlterNote       $FD
00097D67 01                         	dc.b	$01
00097D68 ECF5                       	smpsPSGAlterVol     $F5
00097D6A 9206                       	dc.b	nF1, $06
00097D6C EC04                       	smpsPSGAlterVol     $04
00097D6E E701                       	dc.b	smpsNoAttack, $01
00097D70 EC07                       	smpsPSGAlterVol     $07
00097D72 8003                       	dc.b	nRst, $03
00097D74 ECF5                       	smpsPSGAlterVol     $F5
00097D76 9207                       	dc.b	nF1, $07
00097D78 EC0B                       	smpsPSGAlterVol     $0B
00097D7A 8007                       	dc.b	nRst, $07
00097D7C E103                       	smpsAlterNote       $03
00097D7E 0101                       	dc.b	$01, $01
00097D80 E1FD                       	smpsAlterNote       $FD
00097D82 01                         	dc.b	$01
00097D83 E1FA                       	smpsAlterNote       $FA
00097D85 01                         	dc.b	$01
00097D86 E1FD                       	smpsAlterNote       $FD
00097D88 ECF5                       	smpsPSGAlterVol     $F5
00097D8A 9206                       	dc.b	nF1, $06
00097D8C EC0B                       	smpsPSGAlterVol     $0B
00097D8E 8004                       	dc.b	nRst, $04
00097D90 ECF5                       	smpsPSGAlterVol     $F5
00097D92 9206                       	dc.b	nF1, $06
00097D94 EC04                       	smpsPSGAlterVol     $04
00097D96 E701                       	dc.b	smpsNoAttack, $01
00097D98 EC07                       	smpsPSGAlterVol     $07
00097D9A 8006                       	dc.b	nRst, $06
00097D9C E100                       	smpsAlterNote       $00
00097D9E 01                         	dc.b	$01
00097D9F E104                       	smpsAlterNote       $04
00097DA1 01                         	dc.b	$01
00097DA2 E100                       	smpsAlterNote       $00
00097DA4 01                         	dc.b	$01
00097DA5 E1FA                       	smpsAlterNote       $FA
00097DA7 01                         	dc.b	$01
00097DA8 E1FD                       	smpsAlterNote       $FD
00097DAA ECF5                       	smpsPSGAlterVol     $F5
00097DAC 9206                       	dc.b	nF1, $06
00097DAE EC04                       	smpsPSGAlterVol     $04
00097DB0 E704                       	dc.b	smpsNoAttack, $04
00097DB2 ECFC                       	smpsPSGAlterVol     $FC
00097DB4 9207                       	dc.b	nF1, $07
00097DB6 EC0B                       	smpsPSGAlterVol     $0B
00097DB8 8006                       	dc.b	nRst, $06
00097DBA E100                       	smpsAlterNote       $00
00097DBC 01                         	dc.b	$01
00097DBD E104                       	smpsAlterNote       $04
00097DBF 01                         	dc.b	$01
00097DC0 E103                       	smpsAlterNote       $03
00097DC2 01                         	dc.b	$01
00097DC3 E1FD                       	smpsAlterNote       $FD
00097DC5 01                         	dc.b	$01
00097DC6 ECF5                       	smpsPSGAlterVol     $F5
00097DC8 9207                       	dc.b	nF1, $07
00097DCA EC0B                       	smpsPSGAlterVol     $0B
00097DCC 8004                       	dc.b	nRst, $04
00097DCE ECF5                       	smpsPSGAlterVol     $F5
00097DD0 9206                       	dc.b	nF1, $06
00097DD2 EC0B                       	smpsPSGAlterVol     $0B
00097DD4 8007                       	dc.b	nRst, $07
00097DD6 E103                       	smpsAlterNote       $03
00097DD8 0101                       	dc.b	$01, $01
00097DDA E100                       	smpsAlterNote       $00
00097DDC 01                         	dc.b	$01
00097DDD E1FA                       	smpsAlterNote       $FA
00097DDF 01                         	dc.b	$01
00097DE0 E1FD                       	smpsAlterNote       $FD
00097DE2 ECF5                       	smpsPSGAlterVol     $F5
00097DE4 9206                       	dc.b	nF1, $06
00097DE6 EC04                       	smpsPSGAlterVol     $04
00097DE8 E704                       	dc.b	smpsNoAttack, $04
00097DEA ECFC                       	smpsPSGAlterVol     $FC
00097DEC 9206                       	dc.b	nF1, $06
00097DEE EC04                       	smpsPSGAlterVol     $04
00097DF0 E701                       	dc.b	smpsNoAttack, $01
00097DF2 EC07                       	smpsPSGAlterVol     $07
00097DF4 8006                       	dc.b	nRst, $06
00097DF6 E100                       	smpsAlterNote       $00
00097DF8 01                         	dc.b	$01
00097DF9 E104                       	smpsAlterNote       $04
00097DFB 01                         	dc.b	$01
00097DFC E100                       	smpsAlterNote       $00
00097DFE 01                         	dc.b	$01
00097DFF E1FD                       	smpsAlterNote       $FD
00097E01 01                         	dc.b	$01
00097E02 ECF5                       	smpsPSGAlterVol     $F5
00097E04 9206                       	dc.b	nF1, $06
00097E06 EC04                       	smpsPSGAlterVol     $04
00097E08 E701                       	dc.b	smpsNoAttack, $01
00097E0A EC07                       	smpsPSGAlterVol     $07
00097E0C 8003                       	dc.b	nRst, $03
00097E0E ECF5                       	smpsPSGAlterVol     $F5
00097E10 9207                       	dc.b	nF1, $07
00097E12 EC0B                       	smpsPSGAlterVol     $0B
00097E14 8007                       	dc.b	nRst, $07
00097E16 E103                       	smpsAlterNote       $03
00097E18 0101                       	dc.b	$01, $01
00097E1A E1FD                       	smpsAlterNote       $FD
00097E1C 01                         	dc.b	$01
00097E1D E1FA                       	smpsAlterNote       $FA
00097E1F 01                         	dc.b	$01
00097E20 E1FD                       	smpsAlterNote       $FD
00097E22 ECF5                       	smpsPSGAlterVol     $F5
00097E24 9106                       	dc.b	nE1, $06
00097E26 EC0B                       	smpsPSGAlterVol     $0B
00097E28 8004                       	dc.b	nRst, $04
00097E2A ECF5                       	smpsPSGAlterVol     $F5
00097E2C 9106                       	dc.b	nE1, $06
00097E2E EC04                       	smpsPSGAlterVol     $04
00097E30 E701                       	dc.b	smpsNoAttack, $01
00097E32 EC07                       	smpsPSGAlterVol     $07
00097E34 8006                       	dc.b	nRst, $06
00097E36 E100                       	smpsAlterNote       $00
00097E38 01                         	dc.b	$01
00097E39 E104                       	smpsAlterNote       $04
00097E3B 01                         	dc.b	$01
00097E3C E100                       	smpsAlterNote       $00
00097E3E 01                         	dc.b	$01
00097E3F E1FA                       	smpsAlterNote       $FA
00097E41 01                         	dc.b	$01
00097E42 E1FD                       	smpsAlterNote       $FD
00097E44 ECF5                       	smpsPSGAlterVol     $F5
00097E46 9106                       	dc.b	nE1, $06
00097E48 EC04                       	smpsPSGAlterVol     $04
00097E4A E701                       	dc.b	smpsNoAttack, $01
00097E4C EC07                       	smpsPSGAlterVol     $07
00097E4E 8003                       	dc.b	nRst, $03
00097E50 ECF5                       	smpsPSGAlterVol     $F5
00097E52 9106                       	dc.b	nE1, $06
00097E54 EC04                       	smpsPSGAlterVol     $04
00097E56 E701                       	dc.b	smpsNoAttack, $01
00097E58 EC07                       	smpsPSGAlterVol     $07
00097E5A 8006                       	dc.b	nRst, $06
00097E5C E100                       	smpsAlterNote       $00
00097E5E 01                         	dc.b	$01
00097E5F E104                       	smpsAlterNote       $04
00097E61 01                         	dc.b	$01
00097E62 E103                       	smpsAlterNote       $03
00097E64 01                         	dc.b	$01
00097E65 E1FD                       	smpsAlterNote       $FD
00097E67 01                         	dc.b	$01
00097E68 ECF5                       	smpsPSGAlterVol     $F5
00097E6A 9107                       	dc.b	nE1, $07
00097E6C EC0B                       	smpsPSGAlterVol     $0B
00097E6E 8004                       	dc.b	nRst, $04
00097E70 ECF5                       	smpsPSGAlterVol     $F5
00097E72 9106                       	dc.b	nE1, $06
00097E74 EC0B                       	smpsPSGAlterVol     $0B
00097E76 8007                       	dc.b	nRst, $07
00097E78 E103                       	smpsAlterNote       $03
00097E7A 0101                       	dc.b	$01, $01
00097E7C E100                       	smpsAlterNote       $00
00097E7E 01                         	dc.b	$01
00097E7F E1FA                       	smpsAlterNote       $FA
00097E81 01                         	dc.b	$01
00097E82 E1FD                       	smpsAlterNote       $FD
00097E84 ECF5                       	smpsPSGAlterVol     $F5
00097E86 9106                       	dc.b	nE1, $06
00097E88 EC04                       	smpsPSGAlterVol     $04
00097E8A E701                       	dc.b	smpsNoAttack, $01
00097E8C EC07                       	smpsPSGAlterVol     $07
00097E8E 8003                       	dc.b	nRst, $03
00097E90 ECF5                       	smpsPSGAlterVol     $F5
00097E92 9106                       	dc.b	nE1, $06
00097E94 EC04                       	smpsPSGAlterVol     $04
00097E96 E701                       	dc.b	smpsNoAttack, $01
00097E98 EC07                       	smpsPSGAlterVol     $07
00097E9A 8003                       	dc.b	nRst, $03
00097E9C ECF5                       	smpsPSGAlterVol     $F5
00097E9E 9207                       	dc.b	nF1, $07
00097EA0 EC0B                       	smpsPSGAlterVol     $0B
00097EA2 8006                       	dc.b	nRst, $06
00097EA4 E100                       	smpsAlterNote       $00
00097EA6 01                         	dc.b	$01
00097EA7 E104                       	smpsAlterNote       $04
00097EA9 01                         	dc.b	$01
00097EAA E103                       	smpsAlterNote       $03
00097EAC 01                         	dc.b	$01
00097EAD E1FD                       	smpsAlterNote       $FD
00097EAF 01                         	dc.b	$01
00097EB0 E1F9                       	smpsAlterNote       $F9
00097EB2 01                         	dc.b	$01
00097EB3 E1FD                       	smpsAlterNote       $FD
00097EB5 01                         	dc.b	$01
00097EB6 E100                       	smpsAlterNote       $00
00097EB8 01                         	dc.b	$01
00097EB9 E104                       	smpsAlterNote       $04
00097EBB 01                         	dc.b	$01
00097EBC E1FD                       	smpsAlterNote       $FD
00097EBE ECF5                       	smpsPSGAlterVol     $F5
00097EC0 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097EC4 EC04                       	smpsPSGAlterVol     $04
00097EC6 E701                       	dc.b	smpsNoAttack, $01
00097EC8 EC07                       	smpsPSGAlterVol     $07
00097ECA 8009                       	dc.b	nRst, $09
00097ECC E100                       	smpsAlterNote       $00
00097ECE 01                         	dc.b	$01
00097ECF E104                       	smpsAlterNote       $04
00097ED1 01                         	dc.b	$01
00097ED2 E103                       	smpsAlterNote       $03
00097ED4 01                         	dc.b	$01
00097ED5 E1FD                       	smpsAlterNote       $FD
00097ED7 01                         	dc.b	$01
00097ED8 E1F9                       	smpsAlterNote       $F9
00097EDA 01                         	dc.b	$01
00097EDB E1FD                       	smpsAlterNote       $FD
00097EDD 01                         	dc.b	$01
00097EDE E100                       	smpsAlterNote       $00
00097EE0 01                         	dc.b	$01
00097EE1 E104                       	smpsAlterNote       $04
00097EE3 01                         	dc.b	$01
00097EE4 E100                       	smpsAlterNote       $00
00097EE6 01                         	dc.b	$01
00097EE7 E1FA                       	smpsAlterNote       $FA
00097EE9 01                         	dc.b	$01
00097EEA E1F9                       	smpsAlterNote       $F9
00097EEC 01                         	dc.b	$01
00097EED E1FD                       	smpsAlterNote       $FD
00097EEF 01                         	dc.b	$01
00097EF0 E103                       	smpsAlterNote       $03
00097EF2 0101                       	dc.b	$01, $01
00097EF4 E100                       	smpsAlterNote       $00
00097EF6 01                         	dc.b	$01
00097EF7 E1FD                       	smpsAlterNote       $FD
00097EF9 ECF5                       	smpsPSGAlterVol     $F5
00097EFB 9202                       	dc.b	nF1, $02
00097EFD EC04                       	smpsPSGAlterVol     $04
00097EFF E701                       	dc.b	smpsNoAttack, $01
00097F01 ECFC                       	smpsPSGAlterVol     $FC
00097F03 9106                       	dc.b	nE1, $06
00097F05 EC04                       	smpsPSGAlterVol     $04
00097F07 E701                       	dc.b	smpsNoAttack, $01
00097F09 EC07                       	smpsPSGAlterVol     $07
00097F0B 8006                       	dc.b	nRst, $06
00097F0D E100                       	smpsAlterNote       $00
00097F0F 01                         	dc.b	$01
00097F10 E104                       	smpsAlterNote       $04
00097F12 01                         	dc.b	$01
00097F13 E100                       	smpsAlterNote       $00
00097F15 01                         	dc.b	$01
00097F16 E1FD                       	smpsAlterNote       $FD
00097F18 01                         	dc.b	$01
00097F19 E1F9                       	smpsAlterNote       $F9
00097F1B 01                         	dc.b	$01
00097F1C E1FD                       	smpsAlterNote       $FD
00097F1E 01                         	dc.b	$01
00097F1F E103                       	smpsAlterNote       $03
00097F21 01                         	dc.b	$01
00097F22 E104                       	smpsAlterNote       $04
00097F24 01                         	dc.b	$01
00097F25 E1FD                       	smpsAlterNote       $FD
00097F27 ECF5                       	smpsPSGAlterVol     $F5
00097F29 9102                       	dc.b	nE1, $02
00097F2B EC04                       	smpsPSGAlterVol     $04
00097F2D E701                       	dc.b	smpsNoAttack, $01
00097F2F ECFC                       	smpsPSGAlterVol     $FC
00097F31 920D                       	dc.b	nF1, $0D
00097F33 E100                       	smpsAlterNote       $00
00097F35 E701                       	dc.b	smpsNoAttack, $01
00097F37 E104                       	smpsAlterNote       $04
00097F39 E701                       	dc.b	smpsNoAttack, $01
00097F3B E100                       	smpsAlterNote       $00
00097F3D E701                       	dc.b	smpsNoAttack, $01
00097F3F E1FD                       	smpsAlterNote       $FD
00097F41 E701                       	dc.b	smpsNoAttack, $01
00097F43 E1F9                       	smpsAlterNote       $F9
00097F45 E701                       	dc.b	smpsNoAttack, $01
00097F47 E1FD                       	smpsAlterNote       $FD
00097F49 E701                       	dc.b	smpsNoAttack, $01
00097F4B E103                       	smpsAlterNote       $03
00097F4D E701                       	dc.b	smpsNoAttack, $01
00097F4F E104                       	smpsAlterNote       $04
00097F51 E701                       	dc.b	smpsNoAttack, $01
00097F53 E100                       	smpsAlterNote       $00
00097F55 E701                       	dc.b	smpsNoAttack, $01
00097F57 E1FA                       	smpsAlterNote       $FA
00097F59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097F5D E1FD                       	smpsAlterNote       $FD
00097F5F E701                       	dc.b	smpsNoAttack, $01
00097F61 E103                       	smpsAlterNote       $03
00097F63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097F67 E1FD                       	smpsAlterNote       $FD
00097F69 E701                       	dc.b	smpsNoAttack, $01
00097F6B E1F9                       	smpsAlterNote       $F9
00097F6D E701                       	dc.b	smpsNoAttack, $01
00097F6F E1FA                       	smpsAlterNote       $FA
00097F71 E701                       	dc.b	smpsNoAttack, $01
00097F73 E100                       	smpsAlterNote       $00
00097F75 EC04                       	smpsPSGAlterVol     $04
00097F77 E701                       	dc.b	smpsNoAttack, $01
00097F79 EC07                       	smpsPSGAlterVol     $07
00097F7B E104                       	smpsAlterNote       $04
00097F7D 8001                       	dc.b	nRst, $01
00097F7F E100                       	smpsAlterNote       $00
00097F81 01                         	dc.b	$01
00097F82 E1FD                       	smpsAlterNote       $FD
00097F84 01                         	dc.b	$01
00097F85 E1F9                       	smpsAlterNote       $F9
00097F87 01                         	dc.b	$01
00097F88 E1FD                       	smpsAlterNote       $FD
00097F8A 01                         	dc.b	$01
00097F8B E103                       	smpsAlterNote       $03
00097F8D 01                         	dc.b	$01
00097F8E E104                       	smpsAlterNote       $04
00097F90 01                         	dc.b	$01
00097F91 E1FD                       	smpsAlterNote       $FD
00097F93 ECF5                       	smpsPSGAlterVol     $F5
00097F95 9106                       	dc.b	nE1, $06
00097F97 EC04                       	smpsPSGAlterVol     $04
00097F99 E701                       	dc.b	smpsNoAttack, $01
00097F9B EC07                       	smpsPSGAlterVol     $07
00097F9D 8003                       	dc.b	nRst, $03
00097F9F ECF5                       	smpsPSGAlterVol     $F5
00097FA1 9106                       	dc.b	nE1, $06
00097FA3 EC04                       	smpsPSGAlterVol     $04
00097FA5 E701                       	dc.b	smpsNoAttack, $01
00097FA7 EC07                       	smpsPSGAlterVol     $07
00097FA9 8006                       	dc.b	nRst, $06
00097FAB E100                       	smpsAlterNote       $00
00097FAD 01                         	dc.b	$01
00097FAE E104                       	smpsAlterNote       $04
00097FB0 01                         	dc.b	$01
00097FB1 E100                       	smpsAlterNote       $00
00097FB3 01                         	dc.b	$01
00097FB4 E1FA                       	smpsAlterNote       $FA
00097FB6 01                         	dc.b	$01
00097FB7 E1FD                       	smpsAlterNote       $FD
00097FB9 ECF5                       	smpsPSGAlterVol     $F5
00097FBB 9206                       	dc.b	nF1, $06
00097FBD EC04                       	smpsPSGAlterVol     $04
00097FBF E701                       	dc.b	smpsNoAttack, $01
00097FC1 EC07                       	smpsPSGAlterVol     $07
00097FC3 8003                       	dc.b	nRst, $03
00097FC5 ECF5                       	smpsPSGAlterVol     $F5
00097FC7 9207                       	dc.b	nF1, $07
00097FC9 EC0B                       	smpsPSGAlterVol     $0B
00097FCB 8006                       	dc.b	nRst, $06
00097FCD E100                       	smpsAlterNote       $00
00097FCF 01                         	dc.b	$01
00097FD0 E103                       	smpsAlterNote       $03
00097FD2 0101                       	dc.b	$01, $01
00097FD4 E1FD                       	smpsAlterNote       $FD
00097FD6 01                         	dc.b	$01
00097FD7 ECF5                       	smpsPSGAlterVol     $F5
00097FD9 9107                       	dc.b	nE1, $07
00097FDB EC0B                       	smpsPSGAlterVol     $0B
00097FDD 8004                       	dc.b	nRst, $04
00097FDF ECF5                       	smpsPSGAlterVol     $F5
00097FE1 9106                       	dc.b	nE1, $06
00097FE3 EC04                       	smpsPSGAlterVol     $04
00097FE5 E701                       	dc.b	smpsNoAttack, $01
00097FE7 EC07                       	smpsPSGAlterVol     $07
00097FE9 8006                       	dc.b	nRst, $06
00097FEB E103                       	smpsAlterNote       $03
00097FED 01                         	dc.b	$01
00097FEE E104                       	smpsAlterNote       $04
00097FF0 01                         	dc.b	$01
00097FF1 E100                       	smpsAlterNote       $00
00097FF3 01                         	dc.b	$01
00097FF4 E1FA                       	smpsAlterNote       $FA
00097FF6 01                         	dc.b	$01
00097FF7 E1FD                       	smpsAlterNote       $FD
00097FF9 ECF5                       	smpsPSGAlterVol     $F5
00097FFB 9106                       	dc.b	nE1, $06
00097FFD EC04                       	smpsPSGAlterVol     $04
00097FFF E701                       	dc.b	smpsNoAttack, $01
00098001 EC07                       	smpsPSGAlterVol     $07
00098003 8003                       	dc.b	nRst, $03
00098005 ECF5                       	smpsPSGAlterVol     $F5
00098007 9106                       	dc.b	nE1, $06
00098009 EC04                       	smpsPSGAlterVol     $04
0009800B E701                       	dc.b	smpsNoAttack, $01
0009800D EC07                       	smpsPSGAlterVol     $07
0009800F 8003                       	dc.b	nRst, $03
00098011 ECF5                       	smpsPSGAlterVol     $F5
00098013 9207                       	dc.b	nF1, $07
00098015 EC0B                       	smpsPSGAlterVol     $0B
00098017 8006                       	dc.b	nRst, $06
00098019 E100                       	smpsAlterNote       $00
0009801B 01                         	dc.b	$01
0009801C E103                       	smpsAlterNote       $03
0009801E 0101                       	dc.b	$01, $01
00098020 E1FD                       	smpsAlterNote       $FD
00098022 01                         	dc.b	$01
00098023 E1F9                       	smpsAlterNote       $F9
00098025 01                         	dc.b	$01
00098026 E1FA                       	smpsAlterNote       $FA
00098028 01                         	dc.b	$01
00098029 E100                       	smpsAlterNote       $00
0009802B 01                         	dc.b	$01
0009802C E104                       	smpsAlterNote       $04
0009802E 01                         	dc.b	$01
0009802F E1FD                       	smpsAlterNote       $FD
00098031 ECF5                       	smpsPSGAlterVol     $F5
00098033 9203 9203                  	dc.b	nF1, $03, nF1, $03
00098037 EC04                       	smpsPSGAlterVol     $04
00098039 E701                       	dc.b	smpsNoAttack, $01
0009803B EC07                       	smpsPSGAlterVol     $07
0009803D 8009                       	dc.b	nRst, $09
0009803F E100                       	smpsAlterNote       $00
00098041 01                         	dc.b	$01
00098042 E103                       	smpsAlterNote       $03
00098044 0101                       	dc.b	$01, $01
00098046 E1FD                       	smpsAlterNote       $FD
00098048 01                         	dc.b	$01
00098049 E1F9                       	smpsAlterNote       $F9
0009804B 01                         	dc.b	$01
0009804C E1FA                       	smpsAlterNote       $FA
0009804E 01                         	dc.b	$01
0009804F E100                       	smpsAlterNote       $00
00098051 01                         	dc.b	$01
00098052 E104                       	smpsAlterNote       $04
00098054 01                         	dc.b	$01
00098055 E100                       	smpsAlterNote       $00
00098057 01                         	dc.b	$01
00098058 E1FD                       	smpsAlterNote       $FD
0009805A 01                         	dc.b	$01
0009805B E1F9                       	smpsAlterNote       $F9
0009805D 01                         	dc.b	$01
0009805E E1FD                       	smpsAlterNote       $FD
00098060 01                         	dc.b	$01
00098061 E103                       	smpsAlterNote       $03
00098063 01                         	dc.b	$01
00098064 E104                       	smpsAlterNote       $04
00098066 01                         	dc.b	$01
00098067 E100                       	smpsAlterNote       $00
00098069 01                         	dc.b	$01
0009806A E1FD                       	smpsAlterNote       $FD
0009806C ECF5                       	smpsPSGAlterVol     $F5
0009806E 9203 9106                  	dc.b	nF1, $03, nE1, $06
00098072 EC04                       	smpsPSGAlterVol     $04
00098074 E701                       	dc.b	smpsNoAttack, $01
00098076 EC07                       	smpsPSGAlterVol     $07
00098078 8006                       	dc.b	nRst, $06
0009807A E100                       	smpsAlterNote       $00
0009807C 01                         	dc.b	$01
0009807D E104                       	smpsAlterNote       $04
0009807F 01                         	dc.b	$01
00098080 E103                       	smpsAlterNote       $03
00098082 01                         	dc.b	$01
00098083 E1FD                       	smpsAlterNote       $FD
00098085 01                         	dc.b	$01
00098086 E1F9                       	smpsAlterNote       $F9
00098088 01                         	dc.b	$01
00098089 E1FD                       	smpsAlterNote       $FD
0009808B 01                         	dc.b	$01
0009808C E100                       	smpsAlterNote       $00
0009808E 01                         	dc.b	$01
0009808F E104                       	smpsAlterNote       $04
00098091 01                         	dc.b	$01
00098092 E1FD                       	smpsAlterNote       $FD
00098094 ECF5                       	smpsPSGAlterVol     $F5
00098096 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0009809A E100                       	smpsAlterNote       $00
0009809C E701                       	dc.b	smpsNoAttack, $01
0009809E E104                       	smpsAlterNote       $04
000980A0 E701                       	dc.b	smpsNoAttack, $01
000980A2 E100                       	smpsAlterNote       $00
000980A4 E701                       	dc.b	smpsNoAttack, $01
000980A6 E1FD                       	smpsAlterNote       $FD
000980A8 E701                       	dc.b	smpsNoAttack, $01
000980AA E1F9                       	smpsAlterNote       $F9
000980AC E701                       	dc.b	smpsNoAttack, $01
000980AE E1FD                       	smpsAlterNote       $FD
000980B0 E701                       	dc.b	smpsNoAttack, $01
000980B2 E103                       	smpsAlterNote       $03
000980B4 E701                       	dc.b	smpsNoAttack, $01
000980B6 E104                       	smpsAlterNote       $04
000980B8 E701                       	dc.b	smpsNoAttack, $01
000980BA E100                       	smpsAlterNote       $00
000980BC E701                       	dc.b	smpsNoAttack, $01
000980BE E1FA                       	smpsAlterNote       $FA
000980C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000980C4 E1FD                       	smpsAlterNote       $FD
000980C6 E701                       	dc.b	smpsNoAttack, $01
000980C8 E103                       	smpsAlterNote       $03
000980CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000980CE E100                       	smpsAlterNote       $00
000980D0 E701                       	dc.b	smpsNoAttack, $01
000980D2 E1FA                       	smpsAlterNote       $FA
000980D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000980D8 E100                       	smpsAlterNote       $00
000980DA EC04                       	smpsPSGAlterVol     $04
000980DC E701                       	dc.b	smpsNoAttack, $01
000980DE EC07                       	smpsPSGAlterVol     $07
000980E0 E104                       	smpsAlterNote       $04
000980E2 8001                       	dc.b	nRst, $01
000980E4 E103                       	smpsAlterNote       $03
000980E6 01                         	dc.b	$01
000980E7 E1FD                       	smpsAlterNote       $FD
000980E9 01                         	dc.b	$01
000980EA E1F9                       	smpsAlterNote       $F9
000980EC 01                         	dc.b	$01
000980ED E1FD                       	smpsAlterNote       $FD
000980EF 01                         	dc.b	$01
000980F0 E100                       	smpsAlterNote       $00
000980F2 01                         	dc.b	$01
000980F3 E104                       	smpsAlterNote       $04
000980F5 01                         	dc.b	$01
000980F6 E1FD                       	smpsAlterNote       $FD
000980F8 ECF5                       	smpsPSGAlterVol     $F5
000980FA 9106                       	dc.b	nE1, $06
000980FC EC04                       	smpsPSGAlterVol     $04
000980FE E701                       	dc.b	smpsNoAttack, $01
00098100 EC07                       	smpsPSGAlterVol     $07
00098102 8003                       	dc.b	nRst, $03
00098104 ECF5                       	smpsPSGAlterVol     $F5
00098106 9106                       	dc.b	nE1, $06
00098108 EC04                       	smpsPSGAlterVol     $04
0009810A E701                       	dc.b	smpsNoAttack, $01
0009810C EC07                       	smpsPSGAlterVol     $07
0009810E 8006                       	dc.b	nRst, $06
00098110 E100                       	smpsAlterNote       $00
00098112 01                         	dc.b	$01
00098113 E104                       	smpsAlterNote       $04
00098115 01                         	dc.b	$01
00098116 E100                       	smpsAlterNote       $00
00098118 01                         	dc.b	$01
00098119 E1FD                       	smpsAlterNote       $FD
0009811B 01                         	dc.b	$01
0009811C ECF5                       	smpsPSGAlterVol     $F5
0009811E 9206                       	dc.b	nF1, $06
00098120 EC04                       	smpsPSGAlterVol     $04
00098122 E701                       	dc.b	smpsNoAttack, $01
00098124 EC07                       	smpsPSGAlterVol     $07
00098126 8003                       	dc.b	nRst, $03
00098128 ECF5                       	smpsPSGAlterVol     $F5
0009812A 9207                       	dc.b	nF1, $07
0009812C EC0B                       	smpsPSGAlterVol     $0B
0009812E 8007                       	dc.b	nRst, $07
00098130 E103                       	smpsAlterNote       $03
00098132 0101                       	dc.b	$01, $01
00098134 E1FD                       	smpsAlterNote       $FD
00098136 01                         	dc.b	$01
00098137 E1FA                       	smpsAlterNote       $FA
00098139 01                         	dc.b	$01
0009813A E1FD                       	smpsAlterNote       $FD
0009813C ECF5                       	smpsPSGAlterVol     $F5
0009813E 9106                       	dc.b	nE1, $06
00098140 EC0B                       	smpsPSGAlterVol     $0B
00098142 8004                       	dc.b	nRst, $04
00098144 ECF5                       	smpsPSGAlterVol     $F5
00098146 9106                       	dc.b	nE1, $06
00098148 EC04                       	smpsPSGAlterVol     $04
0009814A E701                       	dc.b	smpsNoAttack, $01
0009814C EC07                       	smpsPSGAlterVol     $07
0009814E 8006                       	dc.b	nRst, $06
00098150 E100                       	smpsAlterNote       $00
00098152 01                         	dc.b	$01
00098153 E104                       	smpsAlterNote       $04
00098155 01                         	dc.b	$01
00098156 E100                       	smpsAlterNote       $00
00098158 01                         	dc.b	$01
00098159 E1FA                       	smpsAlterNote       $FA
0009815B 01                         	dc.b	$01
0009815C E1FD                       	smpsAlterNote       $FD
0009815E ECF5                       	smpsPSGAlterVol     $F5
00098160 9206                       	dc.b	nF1, $06
00098162 EC04                       	smpsPSGAlterVol     $04
00098164 E701                       	dc.b	smpsNoAttack, $01
00098166 EC07                       	smpsPSGAlterVol     $07
00098168 8003                       	dc.b	nRst, $03
0009816A ECF5                       	smpsPSGAlterVol     $F5
0009816C 9206                       	dc.b	nF1, $06
0009816E EC04                       	smpsPSGAlterVol     $04
00098170 E701                       	dc.b	smpsNoAttack, $01
00098172 EC07                       	smpsPSGAlterVol     $07
00098174 8006                       	dc.b	nRst, $06
00098176 E100                       	smpsAlterNote       $00
00098178 01                         	dc.b	$01
00098179 E104                       	smpsAlterNote       $04
0009817B 01                         	dc.b	$01
0009817C E103                       	smpsAlterNote       $03
0009817E 01                         	dc.b	$01
0009817F E1FD                       	smpsAlterNote       $FD
00098181 01                         	dc.b	$01
00098182 ECF5                       	smpsPSGAlterVol     $F5
00098184 9107                       	dc.b	nE1, $07
00098186 EC0B                       	smpsPSGAlterVol     $0B
00098188 8004                       	dc.b	nRst, $04
0009818A ECF5                       	smpsPSGAlterVol     $F5
0009818C 9106                       	dc.b	nE1, $06
0009818E EC0B                       	smpsPSGAlterVol     $0B
00098190 8007                       	dc.b	nRst, $07
00098192 E103                       	smpsAlterNote       $03
00098194 0101                       	dc.b	$01, $01
00098196 E100                       	smpsAlterNote       $00
00098198 01                         	dc.b	$01
00098199 E1FA                       	smpsAlterNote       $FA
0009819B 01                         	dc.b	$01
0009819C E1FD                       	smpsAlterNote       $FD
0009819E ECF5                       	smpsPSGAlterVol     $F5
000981A0 9206                       	dc.b	nF1, $06
000981A2 EC04                       	smpsPSGAlterVol     $04
000981A4 E701                       	dc.b	smpsNoAttack, $01
000981A6 EC07                       	smpsPSGAlterVol     $07
000981A8 8003                       	dc.b	nRst, $03
000981AA ECF5                       	smpsPSGAlterVol     $F5
000981AC 9206                       	dc.b	nF1, $06
000981AE EC04                       	smpsPSGAlterVol     $04
000981B0 E701                       	dc.b	smpsNoAttack, $01
000981B2 EC07                       	smpsPSGAlterVol     $07
000981B4 8006                       	dc.b	nRst, $06
000981B6 E100                       	smpsAlterNote       $00
000981B8 01                         	dc.b	$01
000981B9 E104                       	smpsAlterNote       $04
000981BB 01                         	dc.b	$01
000981BC E100                       	smpsAlterNote       $00
000981BE 01                         	dc.b	$01
000981BF E1FD                       	smpsAlterNote       $FD
000981C1 01                         	dc.b	$01
000981C2 ECF5                       	smpsPSGAlterVol     $F5
000981C4 9106                       	dc.b	nE1, $06
000981C6 EC04                       	smpsPSGAlterVol     $04
000981C8 E701                       	dc.b	smpsNoAttack, $01
000981CA EC07                       	smpsPSGAlterVol     $07
000981CC 8003                       	dc.b	nRst, $03
000981CE ECF5                       	smpsPSGAlterVol     $F5
000981D0 9107 9106                  	dc.b	nE1, $07, nE1, $06
000981D4 EC04                       	smpsPSGAlterVol     $04
000981D6 E701                       	dc.b	smpsNoAttack, $01
000981D8 ECFC                       	smpsPSGAlterVol     $FC
000981DA 9103                       	dc.b	nE1, $03
000981DC EC04                       	smpsPSGAlterVol     $04
000981DE E701                       	dc.b	smpsNoAttack, $01
000981E0 ECFC                       	smpsPSGAlterVol     $FC
000981E2 9102                       	dc.b	nE1, $02
000981E4 EC04                       	smpsPSGAlterVol     $04
000981E6 E701                       	dc.b	smpsNoAttack, $01
000981E8 ECFC                       	smpsPSGAlterVol     $FC
000981EA 9103                       	dc.b	nE1, $03
000981EC EC0B                       	smpsPSGAlterVol     $0B
000981EE 800A                       	dc.b	nRst, $0A
000981F0 E100                       	smpsAlterNote       $00
000981F2 01                         	dc.b	$01
000981F3 E104                       	smpsAlterNote       $04
000981F5 01                         	dc.b	$01
000981F6 E100                       	smpsAlterNote       $00
000981F8 01                         	dc.b	$01
000981F9 E1FA                       	smpsAlterNote       $FA
000981FB 01                         	dc.b	$01
000981FC E1F9                       	smpsAlterNote       $F9
000981FE 01                         	dc.b	$01
000981FF E1FD                       	smpsAlterNote       $FD
00098201 01                         	dc.b	$01
00098202 E103                       	smpsAlterNote       $03
00098204 0101                       	dc.b	$01, $01
00098206 E100                       	smpsAlterNote       $00
00098208 01                         	dc.b	$01
00098209 E1FA                       	smpsAlterNote       $FA
0009820B 0101                       	dc.b	$01, $01
0009820D E1FD                       	smpsAlterNote       $FD
0009820F ECF5                       	smpsPSGAlterVol     $F5
00098211 9206                       	dc.b	nF1, $06
00098213 EC04                       	smpsPSGAlterVol     $04
00098215 E704                       	dc.b	smpsNoAttack, $04
00098217 ECFC                       	smpsPSGAlterVol     $FC
00098219 9206                       	dc.b	nF1, $06
0009821B EC04                       	smpsPSGAlterVol     $04
0009821D E701                       	dc.b	smpsNoAttack, $01
0009821F EC07                       	smpsPSGAlterVol     $07
00098221 8006                       	dc.b	nRst, $06
00098223 E100                       	smpsAlterNote       $00
00098225 01                         	dc.b	$01
00098226 E104                       	smpsAlterNote       $04
00098228 01                         	dc.b	$01
00098229 E103                       	smpsAlterNote       $03
0009822B 01                         	dc.b	$01
0009822C E1FD                       	smpsAlterNote       $FD
0009822E 01                         	dc.b	$01
0009822F ECF5                       	smpsPSGAlterVol     $F5
00098231 9407                       	dc.b	nG1, $07
00098233 EC0B                       	smpsPSGAlterVol     $0B
00098235 8004                       	dc.b	nRst, $04
00098237 ECF5                       	smpsPSGAlterVol     $F5
00098239 9406                       	dc.b	nG1, $06
0009823B EC0B                       	smpsPSGAlterVol     $0B
0009823D 8007                       	dc.b	nRst, $07
0009823F E103                       	smpsAlterNote       $03
00098241 0101                       	dc.b	$01, $01
00098243 E1FD                       	smpsAlterNote       $FD
00098245 01                         	dc.b	$01
00098246 E1F9                       	smpsAlterNote       $F9
00098248 01                         	dc.b	$01
00098249 E1FD                       	smpsAlterNote       $FD
0009824B ECF5                       	smpsPSGAlterVol     $F5
0009824D 9206                       	dc.b	nF1, $06
0009824F EC04                       	smpsPSGAlterVol     $04
00098251 E701                       	dc.b	smpsNoAttack, $01
00098253 EC07                       	smpsPSGAlterVol     $07
00098255 8003                       	dc.b	nRst, $03
00098257 ECF5                       	smpsPSGAlterVol     $F5
00098259 9206                       	dc.b	nF1, $06
0009825B EC04                       	smpsPSGAlterVol     $04
0009825D E701                       	dc.b	smpsNoAttack, $01
0009825F EC07                       	smpsPSGAlterVol     $07
00098261 8006                       	dc.b	nRst, $06
00098263 E100                       	smpsAlterNote       $00
00098265 01                         	dc.b	$01
00098266 E104                       	smpsAlterNote       $04
00098268 01                         	dc.b	$01
00098269 E100                       	smpsAlterNote       $00
0009826B 01                         	dc.b	$01
0009826C E1FA                       	smpsAlterNote       $FA
0009826E 01                         	dc.b	$01
0009826F E1FD                       	smpsAlterNote       $FD
00098271 ECF5                       	smpsPSGAlterVol     $F5
00098273 9206                       	dc.b	nF1, $06
00098275 EC04                       	smpsPSGAlterVol     $04
00098277 E701                       	dc.b	smpsNoAttack, $01
00098279 EC07                       	smpsPSGAlterVol     $07
0009827B 8003                       	dc.b	nRst, $03
0009827D ECF5                       	smpsPSGAlterVol     $F5
0009827F 9107                       	dc.b	nE1, $07
00098281 EC0B                       	smpsPSGAlterVol     $0B
00098283 8006                       	dc.b	nRst, $06
00098285 E100                       	smpsAlterNote       $00
00098287 01                         	dc.b	$01
00098288 E103                       	smpsAlterNote       $03
0009828A 0101                       	dc.b	$01, $01
0009828C E1FD                       	smpsAlterNote       $FD
0009828E 01                         	dc.b	$01
0009828F ECF5                       	smpsPSGAlterVol     $F5
00098291 9207                       	dc.b	nF1, $07
00098293 EC0B                       	smpsPSGAlterVol     $0B
00098295 8004                       	dc.b	nRst, $04
00098297 ECF5                       	smpsPSGAlterVol     $F5
00098299 9206                       	dc.b	nF1, $06
0009829B EC04                       	smpsPSGAlterVol     $04
0009829D E701                       	dc.b	smpsNoAttack, $01
0009829F EC07                       	smpsPSGAlterVol     $07
000982A1 8006                       	dc.b	nRst, $06
000982A3 E103                       	smpsAlterNote       $03
000982A5 01                         	dc.b	$01
000982A6 E104                       	smpsAlterNote       $04
000982A8 01                         	dc.b	$01
000982A9 E100                       	smpsAlterNote       $00
000982AB 01                         	dc.b	$01
000982AC E1FB                       	smpsAlterNote       $FB
000982AE 01                         	dc.b	$01
000982AF E1FD                       	smpsAlterNote       $FD
000982B1 ECF5                       	smpsPSGAlterVol     $F5
000982B3 9406                       	dc.b	nG1, $06
000982B5 EC04                       	smpsPSGAlterVol     $04
000982B7 E701                       	dc.b	smpsNoAttack, $01
000982B9 EC07                       	smpsPSGAlterVol     $07
000982BB 8003                       	dc.b	nRst, $03
000982BD ECF5                       	smpsPSGAlterVol     $F5
000982BF 9406                       	dc.b	nG1, $06
000982C1 EC04                       	smpsPSGAlterVol     $04
000982C3 E701                       	dc.b	smpsNoAttack, $01
000982C5 EC07                       	smpsPSGAlterVol     $07
000982C7 8006                       	dc.b	nRst, $06
000982C9 E100                       	smpsAlterNote       $00
000982CB 01                         	dc.b	$01
000982CC E104                       	smpsAlterNote       $04
000982CE 01                         	dc.b	$01
000982CF E100                       	smpsAlterNote       $00
000982D1 01                         	dc.b	$01
000982D2 E1FD                       	smpsAlterNote       $FD
000982D4 01                         	dc.b	$01
000982D5 ECF5                       	smpsPSGAlterVol     $F5
000982D7 9206                       	dc.b	nF1, $06
000982D9 EC04                       	smpsPSGAlterVol     $04
000982DB E701                       	dc.b	smpsNoAttack, $01
000982DD EC07                       	smpsPSGAlterVol     $07
000982DF 8003                       	dc.b	nRst, $03
000982E1 ECF5                       	smpsPSGAlterVol     $F5
000982E3 9207                       	dc.b	nF1, $07
000982E5 EC0B                       	smpsPSGAlterVol     $0B
000982E7 8007                       	dc.b	nRst, $07
000982E9 E103                       	smpsAlterNote       $03
000982EB 0101                       	dc.b	$01, $01
000982ED E1FD                       	smpsAlterNote       $FD
000982EF 01                         	dc.b	$01
000982F0 E1FA                       	smpsAlterNote       $FA
000982F2 01                         	dc.b	$01
000982F3 E1FD                       	smpsAlterNote       $FD
000982F5 ECF5                       	smpsPSGAlterVol     $F5
000982F7 9206                       	dc.b	nF1, $06
000982F9 EC0B                       	smpsPSGAlterVol     $0B
000982FB 8004                       	dc.b	nRst, $04
000982FD ECF5                       	smpsPSGAlterVol     $F5
000982FF 9206                       	dc.b	nF1, $06
00098301 EC04                       	smpsPSGAlterVol     $04
00098303 E701                       	dc.b	smpsNoAttack, $01
00098305 EC07                       	smpsPSGAlterVol     $07
00098307 8006                       	dc.b	nRst, $06
00098309 E100                       	smpsAlterNote       $00
0009830B 01                         	dc.b	$01
0009830C E104                       	smpsAlterNote       $04
0009830E 01                         	dc.b	$01
0009830F E100                       	smpsAlterNote       $00
00098311 01                         	dc.b	$01
00098312 E1FA                       	smpsAlterNote       $FA
00098314 01                         	dc.b	$01
00098315 E1FD                       	smpsAlterNote       $FD
00098317 ECF5                       	smpsPSGAlterVol     $F5
00098319 9206                       	dc.b	nF1, $06
0009831B EC04                       	smpsPSGAlterVol     $04
0009831D E701                       	dc.b	smpsNoAttack, $01
0009831F EC07                       	smpsPSGAlterVol     $07
00098321 8003                       	dc.b	nRst, $03
00098323 ECF5                       	smpsPSGAlterVol     $F5
00098325 9207                       	dc.b	nF1, $07
00098327 EC0B                       	smpsPSGAlterVol     $0B
00098329 8006                       	dc.b	nRst, $06
0009832B E100                       	smpsAlterNote       $00
0009832D 01                         	dc.b	$01
0009832E E103                       	smpsAlterNote       $03
00098330 0101                       	dc.b	$01, $01
00098332 E1FD                       	smpsAlterNote       $FD
00098334 01                         	dc.b	$01
00098335 ECF5                       	smpsPSGAlterVol     $F5
00098337 9207                       	dc.b	nF1, $07
00098339 EC0B                       	smpsPSGAlterVol     $0B
0009833B 8004                       	dc.b	nRst, $04
0009833D ECF5                       	smpsPSGAlterVol     $F5
0009833F 9206                       	dc.b	nF1, $06
00098341 EC0B                       	smpsPSGAlterVol     $0B
00098343 8007                       	dc.b	nRst, $07
00098345 E103                       	smpsAlterNote       $03
00098347 0101                       	dc.b	$01, $01
00098349 E100                       	smpsAlterNote       $00
0009834B 01                         	dc.b	$01
0009834C E1FA                       	smpsAlterNote       $FA
0009834E 01                         	dc.b	$01
0009834F E1FD                       	smpsAlterNote       $FD
00098351 ECF5                       	smpsPSGAlterVol     $F5
00098353 9206                       	dc.b	nF1, $06
00098355 EC04                       	smpsPSGAlterVol     $04
00098357 E701                       	dc.b	smpsNoAttack, $01
00098359 EC07                       	smpsPSGAlterVol     $07
0009835B 8003                       	dc.b	nRst, $03
0009835D ECF5                       	smpsPSGAlterVol     $F5
0009835F 9206                       	dc.b	nF1, $06
00098361 EC04                       	smpsPSGAlterVol     $04
00098363 E701                       	dc.b	smpsNoAttack, $01
00098365 EC07                       	smpsPSGAlterVol     $07
00098367 8006                       	dc.b	nRst, $06
00098369 E100                       	smpsAlterNote       $00
0009836B 01                         	dc.b	$01
0009836C E104                       	smpsAlterNote       $04
0009836E 01                         	dc.b	$01
0009836F E100                       	smpsAlterNote       $00
00098371 01                         	dc.b	$01
00098372 E1FD                       	smpsAlterNote       $FD
00098374 01                         	dc.b	$01
00098375 ECF5                       	smpsPSGAlterVol     $F5
00098377 9206                       	dc.b	nF1, $06
00098379 EC04                       	smpsPSGAlterVol     $04
0009837B E701                       	dc.b	smpsNoAttack, $01
0009837D EC07                       	smpsPSGAlterVol     $07
0009837F 8003                       	dc.b	nRst, $03
00098381 ECF5                       	smpsPSGAlterVol     $F5
00098383 9207                       	dc.b	nF1, $07
00098385 EC0B                       	smpsPSGAlterVol     $0B
00098387 8007                       	dc.b	nRst, $07
00098389 E104                       	smpsAlterNote       $04
0009838B 0101                       	dc.b	$01, $01
0009838D E1FB                       	smpsAlterNote       $FB
0009838F 01                         	dc.b	$01
00098390 E1F6                       	smpsAlterNote       $F6
00098392 0101                       	dc.b	$01, $01
00098394 E1FF                       	smpsAlterNote       $FF
00098396 01                         	dc.b	$01
00098397 E105                       	smpsAlterNote       $05
00098399 01                         	dc.b	$01
0009839A E104                       	smpsAlterNote       $04
0009839C 01                         	dc.b	$01
0009839D E1FB                       	smpsAlterNote       $FB
0009839F 01                         	dc.b	$01
000983A0 E1F5                       	smpsAlterNote       $F5
000983A2 01                         	dc.b	$01
000983A3 E1FC                       	smpsAlterNote       $FC
000983A5 ECF5                       	smpsPSGAlterVol     $F5
000983A7 8B0E                       	dc.b	nBb0, $0E
000983A9 E102                       	smpsAlterNote       $02
000983AB EC0B                       	smpsPSGAlterVol     $0B
000983AD 8001                       	dc.b	nRst, $01
000983AF E101                       	smpsAlterNote       $01
000983B1 01                         	dc.b	$01
000983B2 E1FC                       	smpsAlterNote       $FC
000983B4 01                         	dc.b	$01
000983B5 E1F9                       	smpsAlterNote       $F9
000983B7 0101                       	dc.b	$01, $01
000983B9 E1FF                       	smpsAlterNote       $FF
000983BB 01                         	dc.b	$01
000983BC E102                       	smpsAlterNote       $02
000983BE 01                         	dc.b	$01
000983BF E1FF                       	smpsAlterNote       $FF
000983C1 01                         	dc.b	$01
000983C2 E1FC                       	smpsAlterNote       $FC
000983C4 01                         	dc.b	$01
000983C5 E1F8                       	smpsAlterNote       $F8
000983C7 01                         	dc.b	$01
000983C8 E1FC                       	smpsAlterNote       $FC
000983CA 01                         	dc.b	$01
000983CB E101                       	smpsAlterNote       $01
000983CD 01                         	dc.b	$01
000983CE E102                       	smpsAlterNote       $02
000983D0 01                         	dc.b	$01
000983D1 E1FF                       	smpsAlterNote       $FF
000983D3 01                         	dc.b	$01
000983D4 E1FB                       	smpsAlterNote       $FB
000983D6 ECF5                       	smpsPSGAlterVol     $F5
000983D8 8D0D                       	dc.b	nC1, $0D
000983DA E101                       	smpsAlterNote       $01
000983DC EC0B                       	smpsPSGAlterVol     $0B
000983DE 8001                       	dc.b	nRst, $01
000983E0 E102                       	smpsAlterNote       $02
000983E2 01                         	dc.b	$01
000983E3 E1FF                       	smpsAlterNote       $FF
000983E5 01                         	dc.b	$01
000983E6 E1F9                       	smpsAlterNote       $F9
000983E8 0101                       	dc.b	$01, $01
000983EA E1FC                       	smpsAlterNote       $FC
000983EC 01                         	dc.b	$01
000983ED E101                       	smpsAlterNote       $01
000983EF 0101                       	dc.b	$01, $01
000983F1 E1FC                       	smpsAlterNote       $FC
000983F3 01                         	dc.b	$01
000983F4 E1F9                       	smpsAlterNote       $F9
000983F6 0101                       	dc.b	$01, $01
000983F8 E1FF                       	smpsAlterNote       $FF
000983FA 01                         	dc.b	$01
000983FB E102                       	smpsAlterNote       $02
000983FD 01                         	dc.b	$01
000983FE E101                       	smpsAlterNote       $01
00098400 01                         	dc.b	$01
00098401 E1FC                       	smpsAlterNote       $FC
00098403 ECF5                       	smpsPSGAlterVol     $F5
00098405 8F0D                       	dc.b	nD1, $0D
00098407 E1FF                       	smpsAlterNote       $FF
00098409 EC04                       	smpsPSGAlterVol     $04
0009840B E701                       	dc.b	smpsNoAttack, $01
0009840D EC07                       	smpsPSGAlterVol     $07
0009840F E103                       	smpsAlterNote       $03
00098411 8001                       	dc.b	nRst, $01
00098413 E102                       	smpsAlterNote       $02
00098415 01                         	dc.b	$01
00098416 E1FD                       	smpsAlterNote       $FD
00098418 01                         	dc.b	$01
00098419 E1F9                       	smpsAlterNote       $F9
0009841B 01                         	dc.b	$01
0009841C E1FD                       	smpsAlterNote       $FD
0009841E 01                         	dc.b	$01
0009841F E100                       	smpsAlterNote       $00
00098421 01                         	dc.b	$01
00098422 E103                       	smpsAlterNote       $03
00098424 01                         	dc.b	$01
00098425 E100                       	smpsAlterNote       $00
00098427 01                         	dc.b	$01
00098428 E1FA                       	smpsAlterNote       $FA
0009842A 01                         	dc.b	$01
0009842B E1F9                       	smpsAlterNote       $F9
0009842D 01                         	dc.b	$01
0009842E E1FD                       	smpsAlterNote       $FD
00098430 01                         	dc.b	$01
00098431 E102                       	smpsAlterNote       $02
00098433 0101                       	dc.b	$01, $01
00098435 E100                       	smpsAlterNote       $00
00098437 01                         	dc.b	$01
00098438 E1FD                       	smpsAlterNote       $FD
0009843A ECF5                       	smpsPSGAlterVol     $F5
0009843C 910D                       	dc.b	nE1, $0D
0009843E E103                       	smpsAlterNote       $03
00098440 EC0B                       	smpsPSGAlterVol     $0B
00098442 8001 01                    	dc.b	nRst, $01, $01
00098445 E100                       	smpsAlterNote       $00
00098447 01                         	dc.b	$01
00098448 E1FA                       	smpsAlterNote       $FA
0009844A 0101                       	dc.b	$01, $01
0009844C E100                       	smpsAlterNote       $00
0009844E 01                         	dc.b	$01
0009844F E103                       	smpsAlterNote       $03
00098451 01                         	dc.b	$01
00098452 E1FD                       	smpsAlterNote       $FD
00098454 ECF5                       	smpsPSGAlterVol     $F5
00098456 9206                       	dc.b	nF1, $06
00098458 EC04                       	smpsPSGAlterVol     $04
0009845A E701                       	dc.b	smpsNoAttack, $01
0009845C EC07                       	smpsPSGAlterVol     $07
0009845E 8003                       	dc.b	nRst, $03
00098460 ECF5                       	smpsPSGAlterVol     $F5
00098462 9207                       	dc.b	nF1, $07
00098464 EC0B                       	smpsPSGAlterVol     $0B
00098466 8006                       	dc.b	nRst, $06
00098468 E100                       	smpsAlterNote       $00
0009846A 01                         	dc.b	$01
0009846B E103                       	smpsAlterNote       $03
0009846D 0101                       	dc.b	$01, $01
0009846F E1FD                       	smpsAlterNote       $FD
00098471 01                         	dc.b	$01
00098472 ECF5                       	smpsPSGAlterVol     $F5
00098474 9407                       	dc.b	nG1, $07
00098476 EC0B                       	smpsPSGAlterVol     $0B
00098478 8004                       	dc.b	nRst, $04
0009847A ECF5                       	smpsPSGAlterVol     $F5
0009847C 9406                       	dc.b	nG1, $06
0009847E EC04                       	smpsPSGAlterVol     $04
00098480 E701                       	dc.b	smpsNoAttack, $01
00098482 EC07                       	smpsPSGAlterVol     $07
00098484 8006                       	dc.b	nRst, $06
00098486 E103                       	smpsAlterNote       $03
00098488 01                         	dc.b	$01
00098489 E104                       	smpsAlterNote       $04
0009848B 01                         	dc.b	$01
0009848C E100                       	smpsAlterNote       $00
0009848E 01                         	dc.b	$01
0009848F E1F9                       	smpsAlterNote       $F9
00098491 01                         	dc.b	$01
00098492 E1FD                       	smpsAlterNote       $FD
00098494 ECF5                       	smpsPSGAlterVol     $F5
00098496 9206                       	dc.b	nF1, $06
00098498 EC04                       	smpsPSGAlterVol     $04
0009849A E701                       	dc.b	smpsNoAttack, $01
0009849C EC07                       	smpsPSGAlterVol     $07
0009849E 8003                       	dc.b	nRst, $03
000984A0 ECF5                       	smpsPSGAlterVol     $F5
000984A2 9206                       	dc.b	nF1, $06
000984A4 EC04                       	smpsPSGAlterVol     $04
000984A6 E701                       	dc.b	smpsNoAttack, $01
000984A8 EC07                       	smpsPSGAlterVol     $07
000984AA 8006                       	dc.b	nRst, $06
000984AC E100                       	smpsAlterNote       $00
000984AE 01                         	dc.b	$01
000984AF E104                       	smpsAlterNote       $04
000984B1 01                         	dc.b	$01
000984B2 E103                       	smpsAlterNote       $03
000984B4 01                         	dc.b	$01
000984B5 E1FD                       	smpsAlterNote       $FD
000984B7 01                         	dc.b	$01
000984B8 ECF5                       	smpsPSGAlterVol     $F5
000984BA 9407                       	dc.b	nG1, $07
000984BC EC0B                       	smpsPSGAlterVol     $0B
000984BE 8004                       	dc.b	nRst, $04
000984C0 ECF5                       	smpsPSGAlterVol     $F5
000984C2 9406                       	dc.b	nG1, $06
000984C4 EC0B                       	smpsPSGAlterVol     $0B
000984C6 8007                       	dc.b	nRst, $07
000984C8 E103                       	smpsAlterNote       $03
000984CA 0101                       	dc.b	$01, $01
000984CC E100                       	smpsAlterNote       $00
000984CE 01                         	dc.b	$01
000984CF E1F9                       	smpsAlterNote       $F9
000984D1 01                         	dc.b	$01
000984D2 E1FD                       	smpsAlterNote       $FD
000984D4 ECF5                       	smpsPSGAlterVol     $F5
000984D6 9206                       	dc.b	nF1, $06
000984D8 EC04                       	smpsPSGAlterVol     $04
000984DA E701                       	dc.b	smpsNoAttack, $01
000984DC EC07                       	smpsPSGAlterVol     $07
000984DE 8003                       	dc.b	nRst, $03
000984E0 ECF5                       	smpsPSGAlterVol     $F5
000984E2 9206                       	dc.b	nF1, $06
000984E4 EC04                       	smpsPSGAlterVol     $04
000984E6 E701                       	dc.b	smpsNoAttack, $01
000984E8 EC07                       	smpsPSGAlterVol     $07
000984EA 8006                       	dc.b	nRst, $06
000984EC E100                       	smpsAlterNote       $00
000984EE 01                         	dc.b	$01
000984EF E104                       	smpsAlterNote       $04
000984F1 01                         	dc.b	$01
000984F2 E100                       	smpsAlterNote       $00
000984F4 01                         	dc.b	$01
000984F5 E1FB                       	smpsAlterNote       $FB
000984F7 01                         	dc.b	$01
000984F8 E1FD                       	smpsAlterNote       $FD
000984FA ECF5                       	smpsPSGAlterVol     $F5
000984FC 9406                       	dc.b	nG1, $06
000984FE EC04                       	smpsPSGAlterVol     $04
00098500 E701                       	dc.b	smpsNoAttack, $01
00098502 EC07                       	smpsPSGAlterVol     $07
00098504 8003                       	dc.b	nRst, $03
00098506 ECF5                       	smpsPSGAlterVol     $F5
00098508 9407                       	dc.b	nG1, $07
0009850A EC0B                       	smpsPSGAlterVol     $0B
0009850C 8006                       	dc.b	nRst, $06
0009850E E100                       	smpsAlterNote       $00
00098510 01                         	dc.b	$01
00098511 E103                       	smpsAlterNote       $03
00098513 0101                       	dc.b	$01, $01
00098515 E1FD                       	smpsAlterNote       $FD
00098517 01                         	dc.b	$01
00098518 ECF5                       	smpsPSGAlterVol     $F5
0009851A 9207                       	dc.b	nF1, $07
0009851C EC0B                       	smpsPSGAlterVol     $0B
0009851E 8004                       	dc.b	nRst, $04
00098520 ECF5                       	smpsPSGAlterVol     $F5
00098522 9206                       	dc.b	nF1, $06
00098524 EC04                       	smpsPSGAlterVol     $04
00098526 E701                       	dc.b	smpsNoAttack, $01
00098528 ECFC                       	smpsPSGAlterVol     $FC
0009852A E1FC                       	smpsAlterNote       $FC
0009852C 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00098530 EC04                       	smpsPSGAlterVol     $04
00098532 E701                       	dc.b	smpsNoAttack, $01
00098534 ECFC                       	smpsPSGAlterVol     $FC
00098536 9003                       	dc.b	nEb1, $03
00098538 E1FD                       	smpsAlterNote       $FD
0009853A 9403                       	dc.b	nG1, $03
0009853C EC04                       	smpsPSGAlterVol     $04
0009853E E701                       	dc.b	smpsNoAttack, $01
00098540 E1FE                       	smpsAlterNote       $FE
00098542 ECFC                       	smpsPSGAlterVol     $FC
00098544 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00098548 EC04                       	smpsPSGAlterVol     $04
0009854A E701                       	dc.b	smpsNoAttack, $01
0009854C EC07                       	smpsPSGAlterVol     $07
0009854E 8009                       	dc.b	nRst, $09
00098550 E100                       	smpsAlterNote       $00
00098552 01                         	dc.b	$01
00098553 F6F5 19                    	smpsJump            music84_Jump07
00098556                            
00098556                            ; PSG2 Data
00098556                            music84_PSG2:
00098556 E1FC                       	smpsAlterNote       $FC
00098558 EC04                       	smpsPSGAlterVol     $04
0009855A 8F03                       	dc.b	nD1, $03
0009855C E1FD                       	smpsAlterNote       $FD
0009855E 9203                       	dc.b	nF1, $03
00098560 EC04                       	smpsPSGAlterVol     $04
00098562 E701                       	dc.b	smpsNoAttack, $01
00098564 E1FE                       	smpsAlterNote       $FE
00098566 ECFC                       	smpsPSGAlterVol     $FC
00098568 9603                       	dc.b	nA1, $03
0009856A E1FD                       	smpsAlterNote       $FD
0009856C 9103                       	dc.b	nE1, $03
0009856E EC04                       	smpsPSGAlterVol     $04
00098570 E701                       	dc.b	smpsNoAttack, $01
00098572 ECFC                       	smpsPSGAlterVol     $FC
00098574 9403                       	dc.b	nG1, $03
00098576 E1FE                       	smpsAlterNote       $FE
00098578 9703                       	dc.b	nBb1, $03
0009857A EC04                       	smpsPSGAlterVol     $04
0009857C E701                       	dc.b	smpsNoAttack, $01
0009857E E1FF                       	smpsAlterNote       $FF
00098580 ECFC                       	smpsPSGAlterVol     $FC
00098582 9B02                       	dc.b	nD2, $02
00098584 EC04                       	smpsPSGAlterVol     $04
00098586 E701                       	dc.b	smpsNoAttack, $01
00098588 ECFC                       	smpsPSGAlterVol     $FC
0009858A E1FE                       	smpsAlterNote       $FE
0009858C 9A03                       	dc.b	nCs2, $03
0009858E EC0B                       	smpsPSGAlterVol     $0B
00098590 800A                       	dc.b	nRst, $0A
00098592 E102                       	smpsAlterNote       $02
00098594 01                         	dc.b	$01
00098595 E10A                       	smpsAlterNote       $0A
00098597 01                         	dc.b	$01
00098598 E102                       	smpsAlterNote       $02
0009859A 01                         	dc.b	$01
0009859B E1FC                       	smpsAlterNote       $FC
0009859D 01                         	dc.b	$01
0009859E E10A                       	smpsAlterNote       $0A
000985A0 01                         	dc.b	$01
000985A1 E1FC                       	smpsAlterNote       $FC
000985A3 01                         	dc.b	$01
000985A4 E108                       	smpsAlterNote       $08
000985A6 01                         	dc.b	$01
000985A7 E10A                       	smpsAlterNote       $0A
000985A9 01                         	dc.b	$01
000985AA E102                       	smpsAlterNote       $02
000985AC 01                         	dc.b	$01
000985AD E1F7                       	smpsAlterNote       $F7
000985AF 0101                       	dc.b	$01, $01
000985B1 E102                       	smpsAlterNote       $02
000985B3 01                         	dc.b	$01
000985B4 E108                       	smpsAlterNote       $08
000985B6 0101                       	dc.b	$01, $01
000985B8 E1FC                       	smpsAlterNote       $FC
000985BA 01                         	dc.b	$01
000985BB E10A                       	smpsAlterNote       $0A
000985BD 01                         	dc.b	$01
000985BE E1F7                       	smpsAlterNote       $F7
000985C0 01                         	dc.b	$01
000985C1 E102                       	smpsAlterNote       $02
000985C3 01                         	dc.b	$01
000985C4 E10A                       	smpsAlterNote       $0A
000985C6 01                         	dc.b	$01
000985C7 E102                       	smpsAlterNote       $02
000985C9 01                         	dc.b	$01
000985CA E1FC                       	smpsAlterNote       $FC
000985CC 01                         	dc.b	$01
000985CD                            
000985CD                            music84_Jump06:
000985CD E10A                       	smpsAlterNote       $0A
000985CF 8001                       	dc.b	nRst, $01
000985D1 E1FC                       	smpsAlterNote       $FC
000985D3 01                         	dc.b	$01
000985D4 E108                       	smpsAlterNote       $08
000985D6 01                         	dc.b	$01
000985D7 E10A                       	smpsAlterNote       $0A
000985D9 01                         	dc.b	$01
000985DA E1FC                       	smpsAlterNote       $FC
000985DC ECF5                       	smpsPSGAlterVol     $F5
000985DE 8F06                       	dc.b	nD1, $06
000985E0 EC04                       	smpsPSGAlterVol     $04
000985E2 E701                       	dc.b	smpsNoAttack, $01
000985E4 EC07                       	smpsPSGAlterVol     $07
000985E6 8003                       	dc.b	nRst, $03
000985E8 ECF5                       	smpsPSGAlterVol     $F5
000985EA 8F06                       	dc.b	nD1, $06
000985EC EC04                       	smpsPSGAlterVol     $04
000985EE E701                       	dc.b	smpsNoAttack, $01
000985F0 EC07                       	smpsPSGAlterVol     $07
000985F2 8006                       	dc.b	nRst, $06
000985F4 E1FF                       	smpsAlterNote       $FF
000985F6 01                         	dc.b	$01
000985F7 E102                       	smpsAlterNote       $02
000985F9 01                         	dc.b	$01
000985FA E1FF                       	smpsAlterNote       $FF
000985FC 01                         	dc.b	$01
000985FD E1F9                       	smpsAlterNote       $F9
000985FF 01                         	dc.b	$01
00098600 E1FC                       	smpsAlterNote       $FC
00098602 ECF5                       	smpsPSGAlterVol     $F5
00098604 9006                       	dc.b	nEb1, $06
00098606 EC04                       	smpsPSGAlterVol     $04
00098608 E701                       	dc.b	smpsNoAttack, $01
0009860A EC07                       	smpsPSGAlterVol     $07
0009860C 8003                       	dc.b	nRst, $03
0009860E ECF5                       	smpsPSGAlterVol     $F5
00098610 9007                       	dc.b	nEb1, $07
00098612 EC0B                       	smpsPSGAlterVol     $0B
00098614 8006                       	dc.b	nRst, $06
00098616 E1FF                       	smpsAlterNote       $FF
00098618 01                         	dc.b	$01
00098619 E103                       	smpsAlterNote       $03
0009861B 0101                       	dc.b	$01, $01
0009861D E1FC                       	smpsAlterNote       $FC
0009861F 01                         	dc.b	$01
00098620 ECF5                       	smpsPSGAlterVol     $F5
00098622 8F07                       	dc.b	nD1, $07
00098624 EC0B                       	smpsPSGAlterVol     $0B
00098626 8004                       	dc.b	nRst, $04
00098628 ECF5                       	smpsPSGAlterVol     $F5
0009862A 8F06                       	dc.b	nD1, $06
0009862C EC04                       	smpsPSGAlterVol     $04
0009862E E701                       	dc.b	smpsNoAttack, $01
00098630 EC07                       	smpsPSGAlterVol     $07
00098632 8006                       	dc.b	nRst, $06
00098634 E102                       	smpsAlterNote       $02
00098636 01                         	dc.b	$01
00098637 E103                       	smpsAlterNote       $03
00098639 01                         	dc.b	$01
0009863A E1FF                       	smpsAlterNote       $FF
0009863C 01                         	dc.b	$01
0009863D E1F9                       	smpsAlterNote       $F9
0009863F 01                         	dc.b	$01
00098640 E1FC                       	smpsAlterNote       $FC
00098642 ECF5                       	smpsPSGAlterVol     $F5
00098644 8F06                       	dc.b	nD1, $06
00098646 EC04                       	smpsPSGAlterVol     $04
00098648 E701                       	dc.b	smpsNoAttack, $01
0009864A EC07                       	smpsPSGAlterVol     $07
0009864C 8003                       	dc.b	nRst, $03
0009864E ECF5                       	smpsPSGAlterVol     $F5
00098650 8F06                       	dc.b	nD1, $06
00098652 EC04                       	smpsPSGAlterVol     $04
00098654 E701                       	dc.b	smpsNoAttack, $01
00098656 EC07                       	smpsPSGAlterVol     $07
00098658 8006                       	dc.b	nRst, $06
0009865A E1FF                       	smpsAlterNote       $FF
0009865C 01                         	dc.b	$01
0009865D E103                       	smpsAlterNote       $03
0009865F 01                         	dc.b	$01
00098660 E1FF                       	smpsAlterNote       $FF
00098662 01                         	dc.b	$01
00098663 E1FC                       	smpsAlterNote       $FC
00098665 01                         	dc.b	$01
00098666 ECF5                       	smpsPSGAlterVol     $F5
00098668 8F06                       	dc.b	nD1, $06
0009866A EC04                       	smpsPSGAlterVol     $04
0009866C E701                       	dc.b	smpsNoAttack, $01
0009866E EC07                       	smpsPSGAlterVol     $07
00098670 8003                       	dc.b	nRst, $03
00098672 ECF5                       	smpsPSGAlterVol     $F5
00098674 8F07                       	dc.b	nD1, $07
00098676 EC0B                       	smpsPSGAlterVol     $0B
00098678 8007                       	dc.b	nRst, $07
0009867A E101                       	smpsAlterNote       $01
0009867C 0101                       	dc.b	$01, $01
0009867E E1FC                       	smpsAlterNote       $FC
00098680 01                         	dc.b	$01
00098681 E1F9                       	smpsAlterNote       $F9
00098683 01                         	dc.b	$01
00098684 E1FC                       	smpsAlterNote       $FC
00098686 ECF5                       	smpsPSGAlterVol     $F5
00098688 9006                       	dc.b	nEb1, $06
0009868A EC0B                       	smpsPSGAlterVol     $0B
0009868C 8004                       	dc.b	nRst, $04
0009868E ECF5                       	smpsPSGAlterVol     $F5
00098690 9006                       	dc.b	nEb1, $06
00098692 EC04                       	smpsPSGAlterVol     $04
00098694 E701                       	dc.b	smpsNoAttack, $01
00098696 EC07                       	smpsPSGAlterVol     $07
00098698 8006                       	dc.b	nRst, $06
0009869A E100                       	smpsAlterNote       $00
0009869C 01                         	dc.b	$01
0009869D E102                       	smpsAlterNote       $02
0009869F 01                         	dc.b	$01
000986A0 E100                       	smpsAlterNote       $00
000986A2 01                         	dc.b	$01
000986A3 E1FD                       	smpsAlterNote       $FD
000986A5 01                         	dc.b	$01
000986A6 E1FF                       	smpsAlterNote       $FF
000986A8 ECF5                       	smpsPSGAlterVol     $F5
000986AA 9B06                       	dc.b	nD2, $06
000986AC EC04                       	smpsPSGAlterVol     $04
000986AE E701                       	dc.b	smpsNoAttack, $01
000986B0 EC07                       	smpsPSGAlterVol     $07
000986B2 8003                       	dc.b	nRst, $03
000986B4 ECF5                       	smpsPSGAlterVol     $F5
000986B6 9B07                       	dc.b	nD2, $07
000986B8 EC0B                       	smpsPSGAlterVol     $0B
000986BA 8006                       	dc.b	nRst, $06
000986BC E102                       	smpsAlterNote       $02
000986BE 01                         	dc.b	$01
000986BF E106                       	smpsAlterNote       $06
000986C1 01                         	dc.b	$01
000986C2 E105                       	smpsAlterNote       $05
000986C4 01                         	dc.b	$01
000986C5 E1FF                       	smpsAlterNote       $FF
000986C7 01                         	dc.b	$01
000986C8 ECF5                       	smpsPSGAlterVol     $F5
000986CA 9B07                       	dc.b	nD2, $07
000986CC EC0B                       	smpsPSGAlterVol     $0B
000986CE 8004                       	dc.b	nRst, $04
000986D0 ECF5                       	smpsPSGAlterVol     $F5
000986D2 9B06                       	dc.b	nD2, $06
000986D4 EC0B                       	smpsPSGAlterVol     $0B
000986D6 8007                       	dc.b	nRst, $07
000986D8 E105                       	smpsAlterNote       $05
000986DA 0101                       	dc.b	$01, $01
000986DC E102                       	smpsAlterNote       $02
000986DE 01                         	dc.b	$01
000986DF E1FC                       	smpsAlterNote       $FC
000986E1 01                         	dc.b	$01
000986E2 E1FF                       	smpsAlterNote       $FF
000986E4 ECF5                       	smpsPSGAlterVol     $F5
000986E6 9B06                       	dc.b	nD2, $06
000986E8 EC04                       	smpsPSGAlterVol     $04
000986EA E701                       	dc.b	smpsNoAttack, $01
000986EC EC07                       	smpsPSGAlterVol     $07
000986EE 8003                       	dc.b	nRst, $03
000986F0 ECF5                       	smpsPSGAlterVol     $F5
000986F2 9B06                       	dc.b	nD2, $06
000986F4 EC04                       	smpsPSGAlterVol     $04
000986F6 E701                       	dc.b	smpsNoAttack, $01
000986F8 EC07                       	smpsPSGAlterVol     $07
000986FA 8006                       	dc.b	nRst, $06
000986FC E102                       	smpsAlterNote       $02
000986FE 01                         	dc.b	$01
000986FF E106                       	smpsAlterNote       $06
00098701 01                         	dc.b	$01
00098702 E102                       	smpsAlterNote       $02
00098704 01                         	dc.b	$01
00098705 E1FF                       	smpsAlterNote       $FF
00098707 01                         	dc.b	$01
00098708 ECF5                       	smpsPSGAlterVol     $F5
0009870A 9B06                       	dc.b	nD2, $06
0009870C EC04                       	smpsPSGAlterVol     $04
0009870E E701                       	dc.b	smpsNoAttack, $01
00098710 EC07                       	smpsPSGAlterVol     $07
00098712 8003                       	dc.b	nRst, $03
00098714 ECF5                       	smpsPSGAlterVol     $F5
00098716 9B07                       	dc.b	nD2, $07
00098718 EC0B                       	smpsPSGAlterVol     $0B
0009871A 8007                       	dc.b	nRst, $07
0009871C E105                       	smpsAlterNote       $05
0009871E 0101                       	dc.b	$01, $01
00098720 E1FF                       	smpsAlterNote       $FF
00098722 01                         	dc.b	$01
00098723 E1FC                       	smpsAlterNote       $FC
00098725 01                         	dc.b	$01
00098726 E1FF                       	smpsAlterNote       $FF
00098728 ECF5                       	smpsPSGAlterVol     $F5
0009872A 9B06                       	dc.b	nD2, $06
0009872C EC0B                       	smpsPSGAlterVol     $0B
0009872E 8004                       	dc.b	nRst, $04
00098730 ECF5                       	smpsPSGAlterVol     $F5
00098732 9B06                       	dc.b	nD2, $06
00098734 EC04                       	smpsPSGAlterVol     $04
00098736 E701                       	dc.b	smpsNoAttack, $01
00098738 EC07                       	smpsPSGAlterVol     $07
0009873A 8006                       	dc.b	nRst, $06
0009873C E105                       	smpsAlterNote       $05
0009873E 01                         	dc.b	$01
0009873F E106                       	smpsAlterNote       $06
00098741 01                         	dc.b	$01
00098742 E102                       	smpsAlterNote       $02
00098744 01                         	dc.b	$01
00098745 E1FC                       	smpsAlterNote       $FC
00098747 01                         	dc.b	$01
00098748 E1FF                       	smpsAlterNote       $FF
0009874A ECF5                       	smpsPSGAlterVol     $F5
0009874C 9B06                       	dc.b	nD2, $06
0009874E EC04                       	smpsPSGAlterVol     $04
00098750 E701                       	dc.b	smpsNoAttack, $01
00098752 EC07                       	smpsPSGAlterVol     $07
00098754 8003                       	dc.b	nRst, $03
00098756 ECF5                       	smpsPSGAlterVol     $F5
00098758 9B06                       	dc.b	nD2, $06
0009875A EC04                       	smpsPSGAlterVol     $04
0009875C E701                       	dc.b	smpsNoAttack, $01
0009875E EC07                       	smpsPSGAlterVol     $07
00098760 8006                       	dc.b	nRst, $06
00098762 E102                       	smpsAlterNote       $02
00098764 01                         	dc.b	$01
00098765 E106                       	smpsAlterNote       $06
00098767 01                         	dc.b	$01
00098768 E105                       	smpsAlterNote       $05
0009876A 01                         	dc.b	$01
0009876B E1FF                       	smpsAlterNote       $FF
0009876D 01                         	dc.b	$01
0009876E ECF5                       	smpsPSGAlterVol     $F5
00098770 9B07                       	dc.b	nD2, $07
00098772 EC0B                       	smpsPSGAlterVol     $0B
00098774 8004                       	dc.b	nRst, $04
00098776 ECF5                       	smpsPSGAlterVol     $F5
00098778 9B06                       	dc.b	nD2, $06
0009877A EC0B                       	smpsPSGAlterVol     $0B
0009877C 8007                       	dc.b	nRst, $07
0009877E E105                       	smpsAlterNote       $05
00098780 0101                       	dc.b	$01, $01
00098782 E102                       	smpsAlterNote       $02
00098784 01                         	dc.b	$01
00098785 E1FC                       	smpsAlterNote       $FC
00098787 01                         	dc.b	$01
00098788 E1FF                       	smpsAlterNote       $FF
0009878A ECF5                       	smpsPSGAlterVol     $F5
0009878C 9B06                       	dc.b	nD2, $06
0009878E EC04                       	smpsPSGAlterVol     $04
00098790 E701                       	dc.b	smpsNoAttack, $01
00098792 EC07                       	smpsPSGAlterVol     $07
00098794 8003                       	dc.b	nRst, $03
00098796 ECF5                       	smpsPSGAlterVol     $F5
00098798 9B06                       	dc.b	nD2, $06
0009879A EC04                       	smpsPSGAlterVol     $04
0009879C E701                       	dc.b	smpsNoAttack, $01
0009879E EC07                       	smpsPSGAlterVol     $07
000987A0 8006                       	dc.b	nRst, $06
000987A2 E102                       	smpsAlterNote       $02
000987A4 01                         	dc.b	$01
000987A5 E106                       	smpsAlterNote       $06
000987A7 01                         	dc.b	$01
000987A8 E102                       	smpsAlterNote       $02
000987AA 01                         	dc.b	$01
000987AB E1FF                       	smpsAlterNote       $FF
000987AD 01                         	dc.b	$01
000987AE ECF5                       	smpsPSGAlterVol     $F5
000987B0 9B06                       	dc.b	nD2, $06
000987B2 EC04                       	smpsPSGAlterVol     $04
000987B4 E701                       	dc.b	smpsNoAttack, $01
000987B6 EC07                       	smpsPSGAlterVol     $07
000987B8 8003                       	dc.b	nRst, $03
000987BA ECF5                       	smpsPSGAlterVol     $F5
000987BC 9B07                       	dc.b	nD2, $07
000987BE E1FE                       	smpsAlterNote       $FE
000987C0 9706                       	dc.b	nBb1, $06
000987C2 EC04                       	smpsPSGAlterVol     $04
000987C4 E701                       	dc.b	smpsNoAttack, $01
000987C6 ECFC                       	smpsPSGAlterVol     $FC
000987C8 9703                       	dc.b	nBb1, $03
000987CA EC04                       	smpsPSGAlterVol     $04
000987CC E701                       	dc.b	smpsNoAttack, $01
000987CE ECFC                       	smpsPSGAlterVol     $FC
000987D0 9702                       	dc.b	nBb1, $02
000987D2 EC04                       	smpsPSGAlterVol     $04
000987D4 E701                       	dc.b	smpsNoAttack, $01
000987D6 ECFC                       	smpsPSGAlterVol     $FC
000987D8 9606                       	dc.b	nA1, $06
000987DA EC04                       	smpsPSGAlterVol     $04
000987DC E701                       	dc.b	smpsNoAttack, $01
000987DE EC07                       	smpsPSGAlterVol     $07
000987E0 8006                       	dc.b	nRst, $06
000987E2 E101                       	smpsAlterNote       $01
000987E4 01                         	dc.b	$01
000987E5 E107                       	smpsAlterNote       $07
000987E7 01                         	dc.b	$01
000987E8 E101                       	smpsAlterNote       $01
000987EA 01                         	dc.b	$01
000987EB E1F8                       	smpsAlterNote       $F8
000987ED 01                         	dc.b	$01
000987EE E1F7                       	smpsAlterNote       $F7
000987F0 01                         	dc.b	$01
000987F1 E1FC                       	smpsAlterNote       $FC
000987F3 01                         	dc.b	$01
000987F4 E106                       	smpsAlterNote       $06
000987F6 01                         	dc.b	$01
000987F7 E107                       	smpsAlterNote       $07
000987F9 01                         	dc.b	$01
000987FA E101                       	smpsAlterNote       $01
000987FC 01                         	dc.b	$01
000987FD E1F8                       	smpsAlterNote       $F8
000987FF 0101                       	dc.b	$01, $01
00098801 E1FC                       	smpsAlterNote       $FC
00098803 ECF5                       	smpsPSGAlterVol     $F5
00098805 8F06                       	dc.b	nD1, $06
00098807 EC04                       	smpsPSGAlterVol     $04
00098809 E701                       	dc.b	smpsNoAttack, $01
0009880B EC07                       	smpsPSGAlterVol     $07
0009880D 8003                       	dc.b	nRst, $03
0009880F ECF5                       	smpsPSGAlterVol     $F5
00098811 8F06                       	dc.b	nD1, $06
00098813 EC04                       	smpsPSGAlterVol     $04
00098815 E701                       	dc.b	smpsNoAttack, $01
00098817 EC07                       	smpsPSGAlterVol     $07
00098819 8006                       	dc.b	nRst, $06
0009881B E1FF                       	smpsAlterNote       $FF
0009881D 01                         	dc.b	$01
0009881E E102                       	smpsAlterNote       $02
00098820 01                         	dc.b	$01
00098821 E101                       	smpsAlterNote       $01
00098823 01                         	dc.b	$01
00098824 E1FC                       	smpsAlterNote       $FC
00098826 01                         	dc.b	$01
00098827 ECF5                       	smpsPSGAlterVol     $F5
00098829 9007                       	dc.b	nEb1, $07
0009882B EC0B                       	smpsPSGAlterVol     $0B
0009882D 8004                       	dc.b	nRst, $04
0009882F ECF5                       	smpsPSGAlterVol     $F5
00098831 9006                       	dc.b	nEb1, $06
00098833 EC0B                       	smpsPSGAlterVol     $0B
00098835 8007                       	dc.b	nRst, $07
00098837 E103                       	smpsAlterNote       $03
00098839 0101                       	dc.b	$01, $01
0009883B E1FC                       	smpsAlterNote       $FC
0009883D 01                         	dc.b	$01
0009883E E1F9                       	smpsAlterNote       $F9
00098840 01                         	dc.b	$01
00098841 E1FC                       	smpsAlterNote       $FC
00098843 ECF5                       	smpsPSGAlterVol     $F5
00098845 8F06                       	dc.b	nD1, $06
00098847 EC04                       	smpsPSGAlterVol     $04
00098849 E701                       	dc.b	smpsNoAttack, $01
0009884B EC07                       	smpsPSGAlterVol     $07
0009884D 8003                       	dc.b	nRst, $03
0009884F ECF5                       	smpsPSGAlterVol     $F5
00098851 8F06                       	dc.b	nD1, $06
00098853 EC04                       	smpsPSGAlterVol     $04
00098855 E701                       	dc.b	smpsNoAttack, $01
00098857 EC07                       	smpsPSGAlterVol     $07
00098859 8006                       	dc.b	nRst, $06
0009885B E1FF                       	smpsAlterNote       $FF
0009885D 01                         	dc.b	$01
0009885E E103                       	smpsAlterNote       $03
00098860 01                         	dc.b	$01
00098861 E1FF                       	smpsAlterNote       $FF
00098863 01                         	dc.b	$01
00098864 E1F9                       	smpsAlterNote       $F9
00098866 01                         	dc.b	$01
00098867 E1FC                       	smpsAlterNote       $FC
00098869 ECF5                       	smpsPSGAlterVol     $F5
0009886B 8F06                       	dc.b	nD1, $06
0009886D EC04                       	smpsPSGAlterVol     $04
0009886F E701                       	dc.b	smpsNoAttack, $01
00098871 EC07                       	smpsPSGAlterVol     $07
00098873 8003                       	dc.b	nRst, $03
00098875 ECF5                       	smpsPSGAlterVol     $F5
00098877 8F07                       	dc.b	nD1, $07
00098879 EC0B                       	smpsPSGAlterVol     $0B
0009887B 8006                       	dc.b	nRst, $06
0009887D E1FF                       	smpsAlterNote       $FF
0009887F 01                         	dc.b	$01
00098880 E102                       	smpsAlterNote       $02
00098882 0101                       	dc.b	$01, $01
00098884 E1FC                       	smpsAlterNote       $FC
00098886 01                         	dc.b	$01
00098887 ECF5                       	smpsPSGAlterVol     $F5
00098889 8F07                       	dc.b	nD1, $07
0009888B EC0B                       	smpsPSGAlterVol     $0B
0009888D 8004                       	dc.b	nRst, $04
0009888F ECF5                       	smpsPSGAlterVol     $F5
00098891 8F06                       	dc.b	nD1, $06
00098893 EC04                       	smpsPSGAlterVol     $04
00098895 E701                       	dc.b	smpsNoAttack, $01
00098897 EC07                       	smpsPSGAlterVol     $07
00098899 8006                       	dc.b	nRst, $06
0009889B E101                       	smpsAlterNote       $01
0009889D 01                         	dc.b	$01
0009889E E102                       	smpsAlterNote       $02
000988A0 01                         	dc.b	$01
000988A1 E1FF                       	smpsAlterNote       $FF
000988A3 01                         	dc.b	$01
000988A4 E1F9                       	smpsAlterNote       $F9
000988A6 01                         	dc.b	$01
000988A7 E1FC                       	smpsAlterNote       $FC
000988A9 ECF5                       	smpsPSGAlterVol     $F5
000988AB 9006                       	dc.b	nEb1, $06
000988AD EC04                       	smpsPSGAlterVol     $04
000988AF E701                       	dc.b	smpsNoAttack, $01
000988B1 EC07                       	smpsPSGAlterVol     $07
000988B3 8003                       	dc.b	nRst, $03
000988B5 ECF5                       	smpsPSGAlterVol     $F5
000988B7 9006                       	dc.b	nEb1, $06
000988B9 EC04                       	smpsPSGAlterVol     $04
000988BB E701                       	dc.b	smpsNoAttack, $01
000988BD EC07                       	smpsPSGAlterVol     $07
000988BF 8006                       	dc.b	nRst, $06
000988C1 E100                       	smpsAlterNote       $00
000988C3 01                         	dc.b	$01
000988C4 E102                       	smpsAlterNote       $02
000988C6 01                         	dc.b	$01
000988C7 E100                       	smpsAlterNote       $00
000988C9 01                         	dc.b	$01
000988CA E1FF                       	smpsAlterNote       $FF
000988CC 01                         	dc.b	$01
000988CD ECF5                       	smpsPSGAlterVol     $F5
000988CF 9B06                       	dc.b	nD2, $06
000988D1 EC04                       	smpsPSGAlterVol     $04
000988D3 E701                       	dc.b	smpsNoAttack, $01
000988D5 EC07                       	smpsPSGAlterVol     $07
000988D7 8003                       	dc.b	nRst, $03
000988D9 ECF5                       	smpsPSGAlterVol     $F5
000988DB 9B07                       	dc.b	nD2, $07
000988DD EC0B                       	smpsPSGAlterVol     $0B
000988DF 8007                       	dc.b	nRst, $07
000988E1 E105                       	smpsAlterNote       $05
000988E3 0101                       	dc.b	$01, $01
000988E5 E1FF                       	smpsAlterNote       $FF
000988E7 01                         	dc.b	$01
000988E8 E1FC                       	smpsAlterNote       $FC
000988EA 01                         	dc.b	$01
000988EB E1FF                       	smpsAlterNote       $FF
000988ED ECF5                       	smpsPSGAlterVol     $F5
000988EF 9B06                       	dc.b	nD2, $06
000988F1 EC0B                       	smpsPSGAlterVol     $0B
000988F3 8004                       	dc.b	nRst, $04
000988F5 ECF5                       	smpsPSGAlterVol     $F5
000988F7 9B06                       	dc.b	nD2, $06
000988F9 EC04                       	smpsPSGAlterVol     $04
000988FB E701                       	dc.b	smpsNoAttack, $01
000988FD EC07                       	smpsPSGAlterVol     $07
000988FF 8006                       	dc.b	nRst, $06
00098901 E102                       	smpsAlterNote       $02
00098903 01                         	dc.b	$01
00098904 E106                       	smpsAlterNote       $06
00098906 01                         	dc.b	$01
00098907 E102                       	smpsAlterNote       $02
00098909 01                         	dc.b	$01
0009890A E1FC                       	smpsAlterNote       $FC
0009890C 01                         	dc.b	$01
0009890D E1FF                       	smpsAlterNote       $FF
0009890F ECF5                       	smpsPSGAlterVol     $F5
00098911 9B06                       	dc.b	nD2, $06
00098913 EC04                       	smpsPSGAlterVol     $04
00098915 E701                       	dc.b	smpsNoAttack, $01
00098917 EC07                       	smpsPSGAlterVol     $07
00098919 8003                       	dc.b	nRst, $03
0009891B ECF5                       	smpsPSGAlterVol     $F5
0009891D 9B07                       	dc.b	nD2, $07
0009891F EC0B                       	smpsPSGAlterVol     $0B
00098921 8006                       	dc.b	nRst, $06
00098923 E102                       	smpsAlterNote       $02
00098925 01                         	dc.b	$01
00098926 E105                       	smpsAlterNote       $05
00098928 0101                       	dc.b	$01, $01
0009892A E1FF                       	smpsAlterNote       $FF
0009892C 01                         	dc.b	$01
0009892D ECF5                       	smpsPSGAlterVol     $F5
0009892F 9B07                       	dc.b	nD2, $07
00098931 EC0B                       	smpsPSGAlterVol     $0B
00098933 8004                       	dc.b	nRst, $04
00098935 ECF5                       	smpsPSGAlterVol     $F5
00098937 9B06                       	dc.b	nD2, $06
00098939 EC0B                       	smpsPSGAlterVol     $0B
0009893B 8007                       	dc.b	nRst, $07
0009893D E105                       	smpsAlterNote       $05
0009893F 0101                       	dc.b	$01, $01
00098941 E102                       	smpsAlterNote       $02
00098943 01                         	dc.b	$01
00098944 E1FC                       	smpsAlterNote       $FC
00098946 01                         	dc.b	$01
00098947 E1FF                       	smpsAlterNote       $FF
00098949 ECF5                       	smpsPSGAlterVol     $F5
0009894B 9B06                       	dc.b	nD2, $06
0009894D EC04                       	smpsPSGAlterVol     $04
0009894F E701                       	dc.b	smpsNoAttack, $01
00098951 EC07                       	smpsPSGAlterVol     $07
00098953 8003                       	dc.b	nRst, $03
00098955 ECF5                       	smpsPSGAlterVol     $F5
00098957 9B06                       	dc.b	nD2, $06
00098959 EC04                       	smpsPSGAlterVol     $04
0009895B E701                       	dc.b	smpsNoAttack, $01
0009895D EC07                       	smpsPSGAlterVol     $07
0009895F 8006                       	dc.b	nRst, $06
00098961 E102                       	smpsAlterNote       $02
00098963 01                         	dc.b	$01
00098964 E106                       	smpsAlterNote       $06
00098966 01                         	dc.b	$01
00098967 E102                       	smpsAlterNote       $02
00098969 01                         	dc.b	$01
0009896A E1FF                       	smpsAlterNote       $FF
0009896C 01                         	dc.b	$01
0009896D ECF5                       	smpsPSGAlterVol     $F5
0009896F 9B06                       	dc.b	nD2, $06
00098971 EC04                       	smpsPSGAlterVol     $04
00098973 E701                       	dc.b	smpsNoAttack, $01
00098975 EC07                       	smpsPSGAlterVol     $07
00098977 8003                       	dc.b	nRst, $03
00098979 ECF5                       	smpsPSGAlterVol     $F5
0009897B 9B07                       	dc.b	nD2, $07
0009897D EC0B                       	smpsPSGAlterVol     $0B
0009897F 8007                       	dc.b	nRst, $07
00098981 E105                       	smpsAlterNote       $05
00098983 0101                       	dc.b	$01, $01
00098985 E1FF                       	smpsAlterNote       $FF
00098987 01                         	dc.b	$01
00098988 E1FC                       	smpsAlterNote       $FC
0009898A 01                         	dc.b	$01
0009898B E1FF                       	smpsAlterNote       $FF
0009898D ECF5                       	smpsPSGAlterVol     $F5
0009898F 9B06                       	dc.b	nD2, $06
00098991 EC0B                       	smpsPSGAlterVol     $0B
00098993 8004                       	dc.b	nRst, $04
00098995 ECF5                       	smpsPSGAlterVol     $F5
00098997 9B06                       	dc.b	nD2, $06
00098999 EC04                       	smpsPSGAlterVol     $04
0009899B E701                       	dc.b	smpsNoAttack, $01
0009899D EC07                       	smpsPSGAlterVol     $07
0009899F 8006                       	dc.b	nRst, $06
000989A1 E102                       	smpsAlterNote       $02
000989A3 01                         	dc.b	$01
000989A4 E106                       	smpsAlterNote       $06
000989A6 01                         	dc.b	$01
000989A7 E102                       	smpsAlterNote       $02
000989A9 01                         	dc.b	$01
000989AA E1FC                       	smpsAlterNote       $FC
000989AC 01                         	dc.b	$01
000989AD E1FF                       	smpsAlterNote       $FF
000989AF ECF5                       	smpsPSGAlterVol     $F5
000989B1 9B06                       	dc.b	nD2, $06
000989B3 EC04                       	smpsPSGAlterVol     $04
000989B5 E701                       	dc.b	smpsNoAttack, $01
000989B7 EC07                       	smpsPSGAlterVol     $07
000989B9 8003                       	dc.b	nRst, $03
000989BB ECF5                       	smpsPSGAlterVol     $F5
000989BD 9B06                       	dc.b	nD2, $06
000989BF EC04                       	smpsPSGAlterVol     $04
000989C1 E701                       	dc.b	smpsNoAttack, $01
000989C3 EC07                       	smpsPSGAlterVol     $07
000989C5 8006                       	dc.b	nRst, $06
000989C7 E102                       	smpsAlterNote       $02
000989C9 01                         	dc.b	$01
000989CA E106                       	smpsAlterNote       $06
000989CC 01                         	dc.b	$01
000989CD E105                       	smpsAlterNote       $05
000989CF 01                         	dc.b	$01
000989D0 E1FF                       	smpsAlterNote       $FF
000989D2 01                         	dc.b	$01
000989D3 ECF5                       	smpsPSGAlterVol     $F5
000989D5 9B07                       	dc.b	nD2, $07
000989D7 EC0B                       	smpsPSGAlterVol     $0B
000989D9 8004                       	dc.b	nRst, $04
000989DB ECF5                       	smpsPSGAlterVol     $F5
000989DD 9B06                       	dc.b	nD2, $06
000989DF EC0B                       	smpsPSGAlterVol     $0B
000989E1 8007                       	dc.b	nRst, $07
000989E3 E105                       	smpsAlterNote       $05
000989E5 0101                       	dc.b	$01, $01
000989E7 E101                       	smpsAlterNote       $01
000989E9 01                         	dc.b	$01
000989EA E1FB                       	smpsAlterNote       $FB
000989EC 01                         	dc.b	$01
000989ED E1FE                       	smpsAlterNote       $FE
000989EF ECF5                       	smpsPSGAlterVol     $F5
000989F1 9A06                       	dc.b	nCs2, $06
000989F3 EC04                       	smpsPSGAlterVol     $04
000989F5 E701                       	dc.b	smpsNoAttack, $01
000989F7 EC07                       	smpsPSGAlterVol     $07
000989F9 8003                       	dc.b	nRst, $03
000989FB ECF5                       	smpsPSGAlterVol     $F5
000989FD 9A06                       	dc.b	nCs2, $06
000989FF EC04                       	smpsPSGAlterVol     $04
00098A01 E701                       	dc.b	smpsNoAttack, $01
00098A03 EC07                       	smpsPSGAlterVol     $07
00098A05 8003                       	dc.b	nRst, $03
00098A07 E1FC                       	smpsAlterNote       $FC
00098A09 ECF5                       	smpsPSGAlterVol     $F5
00098A0B 8F07                       	dc.b	nD1, $07
00098A0D EC0B                       	smpsPSGAlterVol     $0B
00098A0F 8006                       	dc.b	nRst, $06
00098A11 E1FF                       	smpsAlterNote       $FF
00098A13 01                         	dc.b	$01
00098A14 E103                       	smpsAlterNote       $03
00098A16 01                         	dc.b	$01
00098A17 E102                       	smpsAlterNote       $02
00098A19 01                         	dc.b	$01
00098A1A E1FC                       	smpsAlterNote       $FC
00098A1C 01                         	dc.b	$01
00098A1D E1F8                       	smpsAlterNote       $F8
00098A1F 01                         	dc.b	$01
00098A20 E1FC                       	smpsAlterNote       $FC
00098A22 01                         	dc.b	$01
00098A23 E1FF                       	smpsAlterNote       $FF
00098A25 01                         	dc.b	$01
00098A26 E103                       	smpsAlterNote       $03
00098A28 01                         	dc.b	$01
00098A29 E1FC                       	smpsAlterNote       $FC
00098A2B ECF5                       	smpsPSGAlterVol     $F5
00098A2D 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098A31 EC04                       	smpsPSGAlterVol     $04
00098A33 E701                       	dc.b	smpsNoAttack, $01
00098A35 EC07                       	smpsPSGAlterVol     $07
00098A37 8009                       	dc.b	nRst, $09
00098A39 E1FF                       	smpsAlterNote       $FF
00098A3B 01                         	dc.b	$01
00098A3C E103                       	smpsAlterNote       $03
00098A3E 01                         	dc.b	$01
00098A3F E102                       	smpsAlterNote       $02
00098A41 01                         	dc.b	$01
00098A42 E1FC                       	smpsAlterNote       $FC
00098A44 01                         	dc.b	$01
00098A45 E1F8                       	smpsAlterNote       $F8
00098A47 01                         	dc.b	$01
00098A48 E1FC                       	smpsAlterNote       $FC
00098A4A 01                         	dc.b	$01
00098A4B E1FF                       	smpsAlterNote       $FF
00098A4D 01                         	dc.b	$01
00098A4E E103                       	smpsAlterNote       $03
00098A50 01                         	dc.b	$01
00098A51 E1FF                       	smpsAlterNote       $FF
00098A53 01                         	dc.b	$01
00098A54 E1F9                       	smpsAlterNote       $F9
00098A56 01                         	dc.b	$01
00098A57 E1F8                       	smpsAlterNote       $F8
00098A59 01                         	dc.b	$01
00098A5A E1FC                       	smpsAlterNote       $FC
00098A5C 01                         	dc.b	$01
00098A5D E102                       	smpsAlterNote       $02
00098A5F 0101                       	dc.b	$01, $01
00098A61 E1FF                       	smpsAlterNote       $FF
00098A63 01                         	dc.b	$01
00098A64 E1FC                       	smpsAlterNote       $FC
00098A66 ECF5                       	smpsPSGAlterVol     $F5
00098A68 8F02                       	dc.b	nD1, $02
00098A6A EC04                       	smpsPSGAlterVol     $04
00098A6C E701                       	dc.b	smpsNoAttack, $01
00098A6E ECFC                       	smpsPSGAlterVol     $FC
00098A70 E1FB                       	smpsAlterNote       $FB
00098A72 8D06                       	dc.b	nC1, $06
00098A74 EC04                       	smpsPSGAlterVol     $04
00098A76 E701                       	dc.b	smpsNoAttack, $01
00098A78 EC07                       	smpsPSGAlterVol     $07
00098A7A 8006                       	dc.b	nRst, $06
00098A7C E1FE                       	smpsAlterNote       $FE
00098A7E 01                         	dc.b	$01
00098A7F E102                       	smpsAlterNote       $02
00098A81 01                         	dc.b	$01
00098A82 E1FE                       	smpsAlterNote       $FE
00098A84 01                         	dc.b	$01
00098A85 E1FB                       	smpsAlterNote       $FB
00098A87 01                         	dc.b	$01
00098A88 E1F7                       	smpsAlterNote       $F7
00098A8A 01                         	dc.b	$01
00098A8B E1FB                       	smpsAlterNote       $FB
00098A8D 01                         	dc.b	$01
00098A8E E101                       	smpsAlterNote       $01
00098A90 01                         	dc.b	$01
00098A91 E102                       	smpsAlterNote       $02
00098A93 01                         	dc.b	$01
00098A94 E1FB                       	smpsAlterNote       $FB
00098A96 ECF5                       	smpsPSGAlterVol     $F5
00098A98 8D02                       	dc.b	nC1, $02
00098A9A EC04                       	smpsPSGAlterVol     $04
00098A9C E701                       	dc.b	smpsNoAttack, $01
00098A9E E1FC                       	smpsAlterNote       $FC
00098AA0 ECFC                       	smpsPSGAlterVol     $FC
00098AA2 8F0D                       	dc.b	nD1, $0D
00098AA4 E1FF                       	smpsAlterNote       $FF
00098AA6 E701                       	dc.b	smpsNoAttack, $01
00098AA8 E103                       	smpsAlterNote       $03
00098AAA E701                       	dc.b	smpsNoAttack, $01
00098AAC E1FF                       	smpsAlterNote       $FF
00098AAE E701                       	dc.b	smpsNoAttack, $01
00098AB0 E1FC                       	smpsAlterNote       $FC
00098AB2 E701                       	dc.b	smpsNoAttack, $01
00098AB4 E1F8                       	smpsAlterNote       $F8
00098AB6 E701                       	dc.b	smpsNoAttack, $01
00098AB8 E1FC                       	smpsAlterNote       $FC
00098ABA E701                       	dc.b	smpsNoAttack, $01
00098ABC E102                       	smpsAlterNote       $02
00098ABE E701                       	dc.b	smpsNoAttack, $01
00098AC0 E103                       	smpsAlterNote       $03
00098AC2 E701                       	dc.b	smpsNoAttack, $01
00098AC4 E1FF                       	smpsAlterNote       $FF
00098AC6 E701                       	dc.b	smpsNoAttack, $01
00098AC8 E1F9                       	smpsAlterNote       $F9
00098ACA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098ACE E1FC                       	smpsAlterNote       $FC
00098AD0 E701                       	dc.b	smpsNoAttack, $01
00098AD2 E102                       	smpsAlterNote       $02
00098AD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098AD8 E1FC                       	smpsAlterNote       $FC
00098ADA E701                       	dc.b	smpsNoAttack, $01
00098ADC E1F9                       	smpsAlterNote       $F9
00098ADE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098AE2 E1FF                       	smpsAlterNote       $FF
00098AE4 EC04                       	smpsPSGAlterVol     $04
00098AE6 E701                       	dc.b	smpsNoAttack, $01
00098AE8 EC07                       	smpsPSGAlterVol     $07
00098AEA E103                       	smpsAlterNote       $03
00098AEC 8001                       	dc.b	nRst, $01
00098AEE E102                       	smpsAlterNote       $02
00098AF0 01                         	dc.b	$01
00098AF1 E1FB                       	smpsAlterNote       $FB
00098AF3 01                         	dc.b	$01
00098AF4 E1F7                       	smpsAlterNote       $F7
00098AF6 01                         	dc.b	$01
00098AF7 E1FB                       	smpsAlterNote       $FB
00098AF9 01                         	dc.b	$01
00098AFA E102                       	smpsAlterNote       $02
00098AFC 01                         	dc.b	$01
00098AFD E103                       	smpsAlterNote       $03
00098AFF 01                         	dc.b	$01
00098B00 E1FB                       	smpsAlterNote       $FB
00098B02 ECF5                       	smpsPSGAlterVol     $F5
00098B04 8E06                       	dc.b	nCs1, $06
00098B06 EC04                       	smpsPSGAlterVol     $04
00098B08 E701                       	dc.b	smpsNoAttack, $01
00098B0A EC07                       	smpsPSGAlterVol     $07
00098B0C 8003                       	dc.b	nRst, $03
00098B0E ECF5                       	smpsPSGAlterVol     $F5
00098B10 8E06                       	dc.b	nCs1, $06
00098B12 EC04                       	smpsPSGAlterVol     $04
00098B14 E701                       	dc.b	smpsNoAttack, $01
00098B16 EC07                       	smpsPSGAlterVol     $07
00098B18 8006                       	dc.b	nRst, $06
00098B1A E1FE                       	smpsAlterNote       $FE
00098B1C 01                         	dc.b	$01
00098B1D E102                       	smpsAlterNote       $02
00098B1F 01                         	dc.b	$01
00098B20 E1FE                       	smpsAlterNote       $FE
00098B22 01                         	dc.b	$01
00098B23 E1F9                       	smpsAlterNote       $F9
00098B25 01                         	dc.b	$01
00098B26 E1FC                       	smpsAlterNote       $FC
00098B28 ECF5                       	smpsPSGAlterVol     $F5
00098B2A 8F06                       	dc.b	nD1, $06
00098B2C EC04                       	smpsPSGAlterVol     $04
00098B2E E701                       	dc.b	smpsNoAttack, $01
00098B30 EC07                       	smpsPSGAlterVol     $07
00098B32 8003                       	dc.b	nRst, $03
00098B34 ECF5                       	smpsPSGAlterVol     $F5
00098B36 8F07                       	dc.b	nD1, $07
00098B38 EC0B                       	smpsPSGAlterVol     $0B
00098B3A 8006                       	dc.b	nRst, $06
00098B3C E1FF                       	smpsAlterNote       $FF
00098B3E 01                         	dc.b	$01
00098B3F E102                       	smpsAlterNote       $02
00098B41 0101                       	dc.b	$01, $01
00098B43 E1FB                       	smpsAlterNote       $FB
00098B45 01                         	dc.b	$01
00098B46 ECF5                       	smpsPSGAlterVol     $F5
00098B48 8E07                       	dc.b	nCs1, $07
00098B4A EC0B                       	smpsPSGAlterVol     $0B
00098B4C 8004                       	dc.b	nRst, $04
00098B4E ECF5                       	smpsPSGAlterVol     $F5
00098B50 8E06                       	dc.b	nCs1, $06
00098B52 EC04                       	smpsPSGAlterVol     $04
00098B54 E701                       	dc.b	smpsNoAttack, $01
00098B56 EC07                       	smpsPSGAlterVol     $07
00098B58 8006                       	dc.b	nRst, $06
00098B5A E101                       	smpsAlterNote       $01
00098B5C 01                         	dc.b	$01
00098B5D E102                       	smpsAlterNote       $02
00098B5F 01                         	dc.b	$01
00098B60 E1FE                       	smpsAlterNote       $FE
00098B62 01                         	dc.b	$01
00098B63 E1F8                       	smpsAlterNote       $F8
00098B65 01                         	dc.b	$01
00098B66 E1FB                       	smpsAlterNote       $FB
00098B68 ECF5                       	smpsPSGAlterVol     $F5
00098B6A 8E06                       	dc.b	nCs1, $06
00098B6C EC04                       	smpsPSGAlterVol     $04
00098B6E E701                       	dc.b	smpsNoAttack, $01
00098B70 EC07                       	smpsPSGAlterVol     $07
00098B72 8003                       	dc.b	nRst, $03
00098B74 ECF5                       	smpsPSGAlterVol     $F5
00098B76 8E06                       	dc.b	nCs1, $06
00098B78 EC04                       	smpsPSGAlterVol     $04
00098B7A E701                       	dc.b	smpsNoAttack, $01
00098B7C EC07                       	smpsPSGAlterVol     $07
00098B7E 8004                       	dc.b	nRst, $04
00098B80 E1FC                       	smpsAlterNote       $FC
00098B82 ECF5                       	smpsPSGAlterVol     $F5
00098B84 8F06                       	dc.b	nD1, $06
00098B86 EC0B                       	smpsPSGAlterVol     $0B
00098B88 8006                       	dc.b	nRst, $06
00098B8A E1FF                       	smpsAlterNote       $FF
00098B8C 01                         	dc.b	$01
00098B8D E102                       	smpsAlterNote       $02
00098B8F 0101                       	dc.b	$01, $01
00098B91 E1FC                       	smpsAlterNote       $FC
00098B93 01                         	dc.b	$01
00098B94 E1F8                       	smpsAlterNote       $F8
00098B96 01                         	dc.b	$01
00098B97 E1F9                       	smpsAlterNote       $F9
00098B99 01                         	dc.b	$01
00098B9A E1FF                       	smpsAlterNote       $FF
00098B9C 01                         	dc.b	$01
00098B9D E103                       	smpsAlterNote       $03
00098B9F 01                         	dc.b	$01
00098BA0 E1FC                       	smpsAlterNote       $FC
00098BA2 ECF5                       	smpsPSGAlterVol     $F5
00098BA4 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098BA8 EC04                       	smpsPSGAlterVol     $04
00098BAA E701                       	dc.b	smpsNoAttack, $01
00098BAC EC07                       	smpsPSGAlterVol     $07
00098BAE 8009                       	dc.b	nRst, $09
00098BB0 E1FF                       	smpsAlterNote       $FF
00098BB2 01                         	dc.b	$01
00098BB3 E102                       	smpsAlterNote       $02
00098BB5 0101                       	dc.b	$01, $01
00098BB7 E1FC                       	smpsAlterNote       $FC
00098BB9 01                         	dc.b	$01
00098BBA E1F8                       	smpsAlterNote       $F8
00098BBC 01                         	dc.b	$01
00098BBD E1F9                       	smpsAlterNote       $F9
00098BBF 01                         	dc.b	$01
00098BC0 E1FF                       	smpsAlterNote       $FF
00098BC2 01                         	dc.b	$01
00098BC3 E103                       	smpsAlterNote       $03
00098BC5 01                         	dc.b	$01
00098BC6 E1FF                       	smpsAlterNote       $FF
00098BC8 01                         	dc.b	$01
00098BC9 E1FC                       	smpsAlterNote       $FC
00098BCB 01                         	dc.b	$01
00098BCC E1F8                       	smpsAlterNote       $F8
00098BCE 01                         	dc.b	$01
00098BCF E1FC                       	smpsAlterNote       $FC
00098BD1 01                         	dc.b	$01
00098BD2 E102                       	smpsAlterNote       $02
00098BD4 01                         	dc.b	$01
00098BD5 E103                       	smpsAlterNote       $03
00098BD7 01                         	dc.b	$01
00098BD8 E1FF                       	smpsAlterNote       $FF
00098BDA 01                         	dc.b	$01
00098BDB E1FC                       	smpsAlterNote       $FC
00098BDD ECF5                       	smpsPSGAlterVol     $F5
00098BDF 8F03                       	dc.b	nD1, $03
00098BE1 E1FB                       	smpsAlterNote       $FB
00098BE3 8D06                       	dc.b	nC1, $06
00098BE5 EC04                       	smpsPSGAlterVol     $04
00098BE7 E701                       	dc.b	smpsNoAttack, $01
00098BE9 EC07                       	smpsPSGAlterVol     $07
00098BEB 8006                       	dc.b	nRst, $06
00098BED E1FE                       	smpsAlterNote       $FE
00098BEF 01                         	dc.b	$01
00098BF0 E102                       	smpsAlterNote       $02
00098BF2 01                         	dc.b	$01
00098BF3 E101                       	smpsAlterNote       $01
00098BF5 01                         	dc.b	$01
00098BF6 E1FB                       	smpsAlterNote       $FB
00098BF8 01                         	dc.b	$01
00098BF9 E1F7                       	smpsAlterNote       $F7
00098BFB 01                         	dc.b	$01
00098BFC E1FB                       	smpsAlterNote       $FB
00098BFE 01                         	dc.b	$01
00098BFF E1FE                       	smpsAlterNote       $FE
00098C01 01                         	dc.b	$01
00098C02 E102                       	smpsAlterNote       $02
00098C04 01                         	dc.b	$01
00098C05 E1FB                       	smpsAlterNote       $FB
00098C07 ECF5                       	smpsPSGAlterVol     $F5
00098C09 8D03                       	dc.b	nC1, $03
00098C0B E1FC                       	smpsAlterNote       $FC
00098C0D 8F0D                       	dc.b	nD1, $0D
00098C0F E1FF                       	smpsAlterNote       $FF
00098C11 E701                       	dc.b	smpsNoAttack, $01
00098C13 E103                       	smpsAlterNote       $03
00098C15 E701                       	dc.b	smpsNoAttack, $01
00098C17 E1FF                       	smpsAlterNote       $FF
00098C19 E701                       	dc.b	smpsNoAttack, $01
00098C1B E1FC                       	smpsAlterNote       $FC
00098C1D E701                       	dc.b	smpsNoAttack, $01
00098C1F E1F8                       	smpsAlterNote       $F8
00098C21 E701                       	dc.b	smpsNoAttack, $01
00098C23 E1FC                       	smpsAlterNote       $FC
00098C25 E701                       	dc.b	smpsNoAttack, $01
00098C27 E102                       	smpsAlterNote       $02
00098C29 E701                       	dc.b	smpsNoAttack, $01
00098C2B E103                       	smpsAlterNote       $03
00098C2D E701                       	dc.b	smpsNoAttack, $01
00098C2F E1FF                       	smpsAlterNote       $FF
00098C31 E701                       	dc.b	smpsNoAttack, $01
00098C33 E1F9                       	smpsAlterNote       $F9
00098C35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C39 E1FC                       	smpsAlterNote       $FC
00098C3B E701                       	dc.b	smpsNoAttack, $01
00098C3D E102                       	smpsAlterNote       $02
00098C3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C43 E1FF                       	smpsAlterNote       $FF
00098C45 E701                       	dc.b	smpsNoAttack, $01
00098C47 E1F9                       	smpsAlterNote       $F9
00098C49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C4D E1FF                       	smpsAlterNote       $FF
00098C4F EC04                       	smpsPSGAlterVol     $04
00098C51 E701                       	dc.b	smpsNoAttack, $01
00098C53 EC07                       	smpsPSGAlterVol     $07
00098C55 E103                       	smpsAlterNote       $03
00098C57 8001                       	dc.b	nRst, $01
00098C59 E102                       	smpsAlterNote       $02
00098C5B 01                         	dc.b	$01
00098C5C E1FB                       	smpsAlterNote       $FB
00098C5E 01                         	dc.b	$01
00098C5F E1F7                       	smpsAlterNote       $F7
00098C61 01                         	dc.b	$01
00098C62 E1FB                       	smpsAlterNote       $FB
00098C64 01                         	dc.b	$01
00098C65 E1FF                       	smpsAlterNote       $FF
00098C67 01                         	dc.b	$01
00098C68 E103                       	smpsAlterNote       $03
00098C6A 01                         	dc.b	$01
00098C6B E1FB                       	smpsAlterNote       $FB
00098C6D ECF5                       	smpsPSGAlterVol     $F5
00098C6F 8E06                       	dc.b	nCs1, $06
00098C71 EC04                       	smpsPSGAlterVol     $04
00098C73 E701                       	dc.b	smpsNoAttack, $01
00098C75 EC07                       	smpsPSGAlterVol     $07
00098C77 8003                       	dc.b	nRst, $03
00098C79 ECF5                       	smpsPSGAlterVol     $F5
00098C7B 8E06                       	dc.b	nCs1, $06
00098C7D EC04                       	smpsPSGAlterVol     $04
00098C7F E701                       	dc.b	smpsNoAttack, $01
00098C81 EC07                       	smpsPSGAlterVol     $07
00098C83 8006                       	dc.b	nRst, $06
00098C85 E1FE                       	smpsAlterNote       $FE
00098C87 01                         	dc.b	$01
00098C88 E102                       	smpsAlterNote       $02
00098C8A 01                         	dc.b	$01
00098C8B E1FE                       	smpsAlterNote       $FE
00098C8D 01                         	dc.b	$01
00098C8E E1FC                       	smpsAlterNote       $FC
00098C90 01                         	dc.b	$01
00098C91 ECF5                       	smpsPSGAlterVol     $F5
00098C93 8F06                       	dc.b	nD1, $06
00098C95 EC04                       	smpsPSGAlterVol     $04
00098C97 E701                       	dc.b	smpsNoAttack, $01
00098C99 EC07                       	smpsPSGAlterVol     $07
00098C9B 8003                       	dc.b	nRst, $03
00098C9D ECF5                       	smpsPSGAlterVol     $F5
00098C9F 8F07                       	dc.b	nD1, $07
00098CA1 EC0B                       	smpsPSGAlterVol     $0B
00098CA3 8007                       	dc.b	nRst, $07
00098CA5 E102                       	smpsAlterNote       $02
00098CA7 0101                       	dc.b	$01, $01
00098CA9 E1FB                       	smpsAlterNote       $FB
00098CAB 01                         	dc.b	$01
00098CAC E1F8                       	smpsAlterNote       $F8
00098CAE 01                         	dc.b	$01
00098CAF E1FB                       	smpsAlterNote       $FB
00098CB1 ECF5                       	smpsPSGAlterVol     $F5
00098CB3 8E06                       	dc.b	nCs1, $06
00098CB5 EC0B                       	smpsPSGAlterVol     $0B
00098CB7 8004                       	dc.b	nRst, $04
00098CB9 ECF5                       	smpsPSGAlterVol     $F5
00098CBB 8E06                       	dc.b	nCs1, $06
00098CBD EC04                       	smpsPSGAlterVol     $04
00098CBF E701                       	dc.b	smpsNoAttack, $01
00098CC1 EC07                       	smpsPSGAlterVol     $07
00098CC3 8006                       	dc.b	nRst, $06
00098CC5 E1FE                       	smpsAlterNote       $FE
00098CC7 01                         	dc.b	$01
00098CC8 E102                       	smpsAlterNote       $02
00098CCA 01                         	dc.b	$01
00098CCB E1FE                       	smpsAlterNote       $FE
00098CCD 01                         	dc.b	$01
00098CCE E1F9                       	smpsAlterNote       $F9
00098CD0 01                         	dc.b	$01
00098CD1 E1FC                       	smpsAlterNote       $FC
00098CD3 ECF5                       	smpsPSGAlterVol     $F5
00098CD5 8F06                       	dc.b	nD1, $06
00098CD7 EC04                       	smpsPSGAlterVol     $04
00098CD9 E701                       	dc.b	smpsNoAttack, $01
00098CDB EC07                       	smpsPSGAlterVol     $07
00098CDD 8003                       	dc.b	nRst, $03
00098CDF ECF5                       	smpsPSGAlterVol     $F5
00098CE1 8F06                       	dc.b	nD1, $06
00098CE3 EC04                       	smpsPSGAlterVol     $04
00098CE5 E701                       	dc.b	smpsNoAttack, $01
00098CE7 EC07                       	smpsPSGAlterVol     $07
00098CE9 8006                       	dc.b	nRst, $06
00098CEB E1FF                       	smpsAlterNote       $FF
00098CED 01                         	dc.b	$01
00098CEE E103                       	smpsAlterNote       $03
00098CF0 01                         	dc.b	$01
00098CF1 E102                       	smpsAlterNote       $02
00098CF3 01                         	dc.b	$01
00098CF4 E1FB                       	smpsAlterNote       $FB
00098CF6 01                         	dc.b	$01
00098CF7 ECF5                       	smpsPSGAlterVol     $F5
00098CF9 8E07                       	dc.b	nCs1, $07
00098CFB EC0B                       	smpsPSGAlterVol     $0B
00098CFD 8004                       	dc.b	nRst, $04
00098CFF ECF5                       	smpsPSGAlterVol     $F5
00098D01 8E06                       	dc.b	nCs1, $06
00098D03 EC0B                       	smpsPSGAlterVol     $0B
00098D05 8007                       	dc.b	nRst, $07
00098D07 E101                       	smpsAlterNote       $01
00098D09 0101                       	dc.b	$01, $01
00098D0B E1FE                       	smpsAlterNote       $FE
00098D0D 01                         	dc.b	$01
00098D0E E1F9                       	smpsAlterNote       $F9
00098D10 01                         	dc.b	$01
00098D11 E1FC                       	smpsAlterNote       $FC
00098D13 ECF5                       	smpsPSGAlterVol     $F5
00098D15 8F06                       	dc.b	nD1, $06
00098D17 EC04                       	smpsPSGAlterVol     $04
00098D19 E701                       	dc.b	smpsNoAttack, $01
00098D1B EC07                       	smpsPSGAlterVol     $07
00098D1D 8003                       	dc.b	nRst, $03
00098D1F ECF5                       	smpsPSGAlterVol     $F5
00098D21 8F06                       	dc.b	nD1, $06
00098D23 EC04                       	smpsPSGAlterVol     $04
00098D25 E701                       	dc.b	smpsNoAttack, $01
00098D27 EC07                       	smpsPSGAlterVol     $07
00098D29 8006                       	dc.b	nRst, $06
00098D2B E1FF                       	smpsAlterNote       $FF
00098D2D 01                         	dc.b	$01
00098D2E E103                       	smpsAlterNote       $03
00098D30 01                         	dc.b	$01
00098D31 E1FF                       	smpsAlterNote       $FF
00098D33 01                         	dc.b	$01
00098D34 E1FB                       	smpsAlterNote       $FB
00098D36 01                         	dc.b	$01
00098D37 ECF5                       	smpsPSGAlterVol     $F5
00098D39 8E06                       	dc.b	nCs1, $06
00098D3B EC04                       	smpsPSGAlterVol     $04
00098D3D E701                       	dc.b	smpsNoAttack, $01
00098D3F EC07                       	smpsPSGAlterVol     $07
00098D41 8003                       	dc.b	nRst, $03
00098D43 ECF5                       	smpsPSGAlterVol     $F5
00098D45 8E07                       	dc.b	nCs1, $07
00098D47 E1FF                       	smpsAlterNote       $FF
00098D49 9B06                       	dc.b	nD2, $06
00098D4B EC04                       	smpsPSGAlterVol     $04
00098D4D E701                       	dc.b	smpsNoAttack, $01
00098D4F ECFC                       	smpsPSGAlterVol     $FC
00098D51 9B03                       	dc.b	nD2, $03
00098D53 EC04                       	smpsPSGAlterVol     $04
00098D55 E701                       	dc.b	smpsNoAttack, $01
00098D57 ECFC                       	smpsPSGAlterVol     $FC
00098D59 9B02                       	dc.b	nD2, $02
00098D5B EC04                       	smpsPSGAlterVol     $04
00098D5D E701                       	dc.b	smpsNoAttack, $01
00098D5F ECFC                       	smpsPSGAlterVol     $FC
00098D61 E1FE                       	smpsAlterNote       $FE
00098D63 9A03                       	dc.b	nCs2, $03
00098D65 EC0B                       	smpsPSGAlterVol     $0B
00098D67 800A                       	dc.b	nRst, $0A
00098D69 E102                       	smpsAlterNote       $02
00098D6B 01                         	dc.b	$01
00098D6C E10A                       	smpsAlterNote       $0A
00098D6E 01                         	dc.b	$01
00098D6F E102                       	smpsAlterNote       $02
00098D71 01                         	dc.b	$01
00098D72 E1F7                       	smpsAlterNote       $F7
00098D74 01                         	dc.b	$01
00098D75 E10A                       	smpsAlterNote       $0A
00098D77 01                         	dc.b	$01
00098D78 E1FC                       	smpsAlterNote       $FC
00098D7A 01                         	dc.b	$01
00098D7B E108                       	smpsAlterNote       $08
00098D7D 0101                       	dc.b	$01, $01
00098D7F E102                       	smpsAlterNote       $02
00098D81 01                         	dc.b	$01
00098D82 E1F7                       	smpsAlterNote       $F7
00098D84 0101                       	dc.b	$01, $01
00098D86 E1FC                       	smpsAlterNote       $FC
00098D88 ECF5                       	smpsPSGAlterVol     $F5
00098D8A 8F06                       	dc.b	nD1, $06
00098D8C EC04                       	smpsPSGAlterVol     $04
00098D8E E701                       	dc.b	smpsNoAttack, $01
00098D90 EC07                       	smpsPSGAlterVol     $07
00098D92 8003                       	dc.b	nRst, $03
00098D94 ECF5                       	smpsPSGAlterVol     $F5
00098D96 8F06                       	dc.b	nD1, $06
00098D98 EC04                       	smpsPSGAlterVol     $04
00098D9A E701                       	dc.b	smpsNoAttack, $01
00098D9C EC07                       	smpsPSGAlterVol     $07
00098D9E 8006                       	dc.b	nRst, $06
00098DA0 E1FF                       	smpsAlterNote       $FF
00098DA2 01                         	dc.b	$01
00098DA3 E102                       	smpsAlterNote       $02
00098DA5 01                         	dc.b	$01
00098DA6 E101                       	smpsAlterNote       $01
00098DA8 01                         	dc.b	$01
00098DA9 E1FC                       	smpsAlterNote       $FC
00098DAB 01                         	dc.b	$01
00098DAC ECF5                       	smpsPSGAlterVol     $F5
00098DAE 9007                       	dc.b	nEb1, $07
00098DB0 EC0B                       	smpsPSGAlterVol     $0B
00098DB2 8004                       	dc.b	nRst, $04
00098DB4 ECF5                       	smpsPSGAlterVol     $F5
00098DB6 9006                       	dc.b	nEb1, $06
00098DB8 EC0B                       	smpsPSGAlterVol     $0B
00098DBA 8007                       	dc.b	nRst, $07
00098DBC E103                       	smpsAlterNote       $03
00098DBE 0101                       	dc.b	$01, $01
00098DC0 E1FF                       	smpsAlterNote       $FF
00098DC2 01                         	dc.b	$01
00098DC3 E1F9                       	smpsAlterNote       $F9
00098DC5 01                         	dc.b	$01
00098DC6 E1FC                       	smpsAlterNote       $FC
00098DC8 ECF5                       	smpsPSGAlterVol     $F5
00098DCA 8F06                       	dc.b	nD1, $06
00098DCC EC04                       	smpsPSGAlterVol     $04
00098DCE E701                       	dc.b	smpsNoAttack, $01
00098DD0 EC07                       	smpsPSGAlterVol     $07
00098DD2 8003                       	dc.b	nRst, $03
00098DD4 ECF5                       	smpsPSGAlterVol     $F5
00098DD6 8F06                       	dc.b	nD1, $06
00098DD8 EC04                       	smpsPSGAlterVol     $04
00098DDA E701                       	dc.b	smpsNoAttack, $01
00098DDC EC07                       	smpsPSGAlterVol     $07
00098DDE 8006                       	dc.b	nRst, $06
00098DE0 E1FF                       	smpsAlterNote       $FF
00098DE2 01                         	dc.b	$01
00098DE3 E103                       	smpsAlterNote       $03
00098DE5 01                         	dc.b	$01
00098DE6 E1FF                       	smpsAlterNote       $FF
00098DE8 01                         	dc.b	$01
00098DE9 E1F9                       	smpsAlterNote       $F9
00098DEB 01                         	dc.b	$01
00098DEC E1FC                       	smpsAlterNote       $FC
00098DEE ECF5                       	smpsPSGAlterVol     $F5
00098DF0 8F06                       	dc.b	nD1, $06
00098DF2 EC04                       	smpsPSGAlterVol     $04
00098DF4 E701                       	dc.b	smpsNoAttack, $01
00098DF6 EC07                       	smpsPSGAlterVol     $07
00098DF8 8003                       	dc.b	nRst, $03
00098DFA ECF5                       	smpsPSGAlterVol     $F5
00098DFC 8F07                       	dc.b	nD1, $07
00098DFE EC0B                       	smpsPSGAlterVol     $0B
00098E00 8006                       	dc.b	nRst, $06
00098E02 E1FF                       	smpsAlterNote       $FF
00098E04 01                         	dc.b	$01
00098E05 E102                       	smpsAlterNote       $02
00098E07 0101                       	dc.b	$01, $01
00098E09 E1FC                       	smpsAlterNote       $FC
00098E0B 01                         	dc.b	$01
00098E0C ECF5                       	smpsPSGAlterVol     $F5
00098E0E 8F07                       	dc.b	nD1, $07
00098E10 EC0B                       	smpsPSGAlterVol     $0B
00098E12 8004                       	dc.b	nRst, $04
00098E14 ECF5                       	smpsPSGAlterVol     $F5
00098E16 8F06                       	dc.b	nD1, $06
00098E18 EC04                       	smpsPSGAlterVol     $04
00098E1A E701                       	dc.b	smpsNoAttack, $01
00098E1C EC07                       	smpsPSGAlterVol     $07
00098E1E 8006                       	dc.b	nRst, $06
00098E20 E101                       	smpsAlterNote       $01
00098E22 01                         	dc.b	$01
00098E23 E102                       	smpsAlterNote       $02
00098E25 01                         	dc.b	$01
00098E26 E1FF                       	smpsAlterNote       $FF
00098E28 01                         	dc.b	$01
00098E29 E1F9                       	smpsAlterNote       $F9
00098E2B 01                         	dc.b	$01
00098E2C E1FC                       	smpsAlterNote       $FC
00098E2E ECF5                       	smpsPSGAlterVol     $F5
00098E30 9006                       	dc.b	nEb1, $06
00098E32 EC04                       	smpsPSGAlterVol     $04
00098E34 E701                       	dc.b	smpsNoAttack, $01
00098E36 EC07                       	smpsPSGAlterVol     $07
00098E38 8003                       	dc.b	nRst, $03
00098E3A ECF5                       	smpsPSGAlterVol     $F5
00098E3C 9006                       	dc.b	nEb1, $06
00098E3E EC04                       	smpsPSGAlterVol     $04
00098E40 E701                       	dc.b	smpsNoAttack, $01
00098E42 EC07                       	smpsPSGAlterVol     $07
00098E44 8006                       	dc.b	nRst, $06
00098E46 E100                       	smpsAlterNote       $00
00098E48 01                         	dc.b	$01
00098E49 E102                       	smpsAlterNote       $02
00098E4B 01                         	dc.b	$01
00098E4C E100                       	smpsAlterNote       $00
00098E4E 01                         	dc.b	$01
00098E4F E1FF                       	smpsAlterNote       $FF
00098E51 01                         	dc.b	$01
00098E52 ECF5                       	smpsPSGAlterVol     $F5
00098E54 9B06                       	dc.b	nD2, $06
00098E56 EC04                       	smpsPSGAlterVol     $04
00098E58 E701                       	dc.b	smpsNoAttack, $01
00098E5A EC07                       	smpsPSGAlterVol     $07
00098E5C 8003                       	dc.b	nRst, $03
00098E5E ECF5                       	smpsPSGAlterVol     $F5
00098E60 9B07                       	dc.b	nD2, $07
00098E62 EC0B                       	smpsPSGAlterVol     $0B
00098E64 8007                       	dc.b	nRst, $07
00098E66 E105                       	smpsAlterNote       $05
00098E68 0101                       	dc.b	$01, $01
00098E6A E1FF                       	smpsAlterNote       $FF
00098E6C 01                         	dc.b	$01
00098E6D E1FC                       	smpsAlterNote       $FC
00098E6F 01                         	dc.b	$01
00098E70 E1FF                       	smpsAlterNote       $FF
00098E72 ECF5                       	smpsPSGAlterVol     $F5
00098E74 9B06                       	dc.b	nD2, $06
00098E76 EC0B                       	smpsPSGAlterVol     $0B
00098E78 8004                       	dc.b	nRst, $04
00098E7A ECF5                       	smpsPSGAlterVol     $F5
00098E7C 9B06                       	dc.b	nD2, $06
00098E7E EC04                       	smpsPSGAlterVol     $04
00098E80 E701                       	dc.b	smpsNoAttack, $01
00098E82 EC07                       	smpsPSGAlterVol     $07
00098E84 8006                       	dc.b	nRst, $06
00098E86 E102                       	smpsAlterNote       $02
00098E88 01                         	dc.b	$01
00098E89 E106                       	smpsAlterNote       $06
00098E8B 01                         	dc.b	$01
00098E8C E102                       	smpsAlterNote       $02
00098E8E 01                         	dc.b	$01
00098E8F E1FC                       	smpsAlterNote       $FC
00098E91 01                         	dc.b	$01
00098E92 E1FF                       	smpsAlterNote       $FF
00098E94 ECF5                       	smpsPSGAlterVol     $F5
00098E96 9B06                       	dc.b	nD2, $06
00098E98 EC04                       	smpsPSGAlterVol     $04
00098E9A E701                       	dc.b	smpsNoAttack, $01
00098E9C EC07                       	smpsPSGAlterVol     $07
00098E9E 8003                       	dc.b	nRst, $03
00098EA0 ECF5                       	smpsPSGAlterVol     $F5
00098EA2 9B07                       	dc.b	nD2, $07
00098EA4 EC0B                       	smpsPSGAlterVol     $0B
00098EA6 8006                       	dc.b	nRst, $06
00098EA8 E102                       	smpsAlterNote       $02
00098EAA 01                         	dc.b	$01
00098EAB E105                       	smpsAlterNote       $05
00098EAD 0101                       	dc.b	$01, $01
00098EAF E1FF                       	smpsAlterNote       $FF
00098EB1 01                         	dc.b	$01
00098EB2 ECF5                       	smpsPSGAlterVol     $F5
00098EB4 9B07                       	dc.b	nD2, $07
00098EB6 EC0B                       	smpsPSGAlterVol     $0B
00098EB8 8004                       	dc.b	nRst, $04
00098EBA ECF5                       	smpsPSGAlterVol     $F5
00098EBC 9B06                       	dc.b	nD2, $06
00098EBE EC04                       	smpsPSGAlterVol     $04
00098EC0 E701                       	dc.b	smpsNoAttack, $01
00098EC2 EC07                       	smpsPSGAlterVol     $07
00098EC4 8006                       	dc.b	nRst, $06
00098EC6 E105                       	smpsAlterNote       $05
00098EC8 0101                       	dc.b	$01, $01
00098ECA E102                       	smpsAlterNote       $02
00098ECC 01                         	dc.b	$01
00098ECD E1FC                       	smpsAlterNote       $FC
00098ECF 01                         	dc.b	$01
00098ED0 E1FF                       	smpsAlterNote       $FF
00098ED2 ECF5                       	smpsPSGAlterVol     $F5
00098ED4 9B06                       	dc.b	nD2, $06
00098ED6 EC04                       	smpsPSGAlterVol     $04
00098ED8 E701                       	dc.b	smpsNoAttack, $01
00098EDA EC07                       	smpsPSGAlterVol     $07
00098EDC 8003                       	dc.b	nRst, $03
00098EDE ECF5                       	smpsPSGAlterVol     $F5
00098EE0 9B06                       	dc.b	nD2, $06
00098EE2 EC04                       	smpsPSGAlterVol     $04
00098EE4 E701                       	dc.b	smpsNoAttack, $01
00098EE6 EC07                       	smpsPSGAlterVol     $07
00098EE8 8006                       	dc.b	nRst, $06
00098EEA E102                       	smpsAlterNote       $02
00098EEC 01                         	dc.b	$01
00098EED E106                       	smpsAlterNote       $06
00098EEF 01                         	dc.b	$01
00098EF0 E102                       	smpsAlterNote       $02
00098EF2 01                         	dc.b	$01
00098EF3 E1FF                       	smpsAlterNote       $FF
00098EF5 01                         	dc.b	$01
00098EF6 ECF5                       	smpsPSGAlterVol     $F5
00098EF8 9B06                       	dc.b	nD2, $06
00098EFA EC04                       	smpsPSGAlterVol     $04
00098EFC E701                       	dc.b	smpsNoAttack, $01
00098EFE EC07                       	smpsPSGAlterVol     $07
00098F00 8003                       	dc.b	nRst, $03
00098F02 ECF5                       	smpsPSGAlterVol     $F5
00098F04 9B07                       	dc.b	nD2, $07
00098F06 EC0B                       	smpsPSGAlterVol     $0B
00098F08 8007                       	dc.b	nRst, $07
00098F0A E107                       	smpsAlterNote       $07
00098F0C 0101                       	dc.b	$01, $01
00098F0E E1FE                       	smpsAlterNote       $FE
00098F10 01                         	dc.b	$01
00098F11 E1FA                       	smpsAlterNote       $FA
00098F13 0101                       	dc.b	$01, $01
00098F15 E103                       	smpsAlterNote       $03
00098F17 01                         	dc.b	$01
00098F18 E109                       	smpsAlterNote       $09
00098F1A 01                         	dc.b	$01
00098F1B E107                       	smpsAlterNote       $07
00098F1D 01                         	dc.b	$01
00098F1E E1FE                       	smpsAlterNote       $FE
00098F20 01                         	dc.b	$01
00098F21 E108                       	smpsAlterNote       $08
00098F23 01                         	dc.b	$01
00098F24 E1FD                       	smpsAlterNote       $FD
00098F26 ECF5                       	smpsPSGAlterVol     $F5
00098F28 940E                       	dc.b	nG1, $0E
00098F2A E103                       	smpsAlterNote       $03
00098F2C EC0B                       	smpsPSGAlterVol     $0B
00098F2E 8001 01                    	dc.b	nRst, $01, $01
00098F31 E1FD                       	smpsAlterNote       $FD
00098F33 01                         	dc.b	$01
00098F34 E1FB                       	smpsAlterNote       $FB
00098F36 0101                       	dc.b	$01, $01
00098F38 E100                       	smpsAlterNote       $00
00098F3A 01                         	dc.b	$01
00098F3B E103                       	smpsAlterNote       $03
00098F3D 01                         	dc.b	$01
00098F3E E100                       	smpsAlterNote       $00
00098F40 01                         	dc.b	$01
00098F41 E1FD                       	smpsAlterNote       $FD
00098F43 01                         	dc.b	$01
00098F44 E1FA                       	smpsAlterNote       $FA
00098F46 01                         	dc.b	$01
00098F47 E1FD                       	smpsAlterNote       $FD
00098F49 01                         	dc.b	$01
00098F4A E103                       	smpsAlterNote       $03
00098F4C 0101                       	dc.b	$01, $01
00098F4E E100                       	smpsAlterNote       $00
00098F50 01                         	dc.b	$01
00098F51 E1FE                       	smpsAlterNote       $FE
00098F53 ECF5                       	smpsPSGAlterVol     $F5
00098F55 960D                       	dc.b	nA1, $0D
00098F57 E104                       	smpsAlterNote       $04
00098F59 EC0B                       	smpsPSGAlterVol     $0B
00098F5B 8001 01                    	dc.b	nRst, $01, $01
00098F5E E101                       	smpsAlterNote       $01
00098F60 01                         	dc.b	$01
00098F61 E1FB                       	smpsAlterNote       $FB
00098F63 0101                       	dc.b	$01, $01
00098F65 E1FE                       	smpsAlterNote       $FE
00098F67 01                         	dc.b	$01
00098F68 E104                       	smpsAlterNote       $04
00098F6A 0101                       	dc.b	$01, $01
00098F6C E1FE                       	smpsAlterNote       $FE
00098F6E 01                         	dc.b	$01
00098F6F E1FB                       	smpsAlterNote       $FB
00098F71 0101                       	dc.b	$01, $01
00098F73 E101                       	smpsAlterNote       $01
00098F75 01                         	dc.b	$01
00098F76 E104                       	smpsAlterNote       $04
00098F78 0101                       	dc.b	$01, $01
00098F7A E1FE                       	smpsAlterNote       $FE
00098F7C ECF5                       	smpsPSGAlterVol     $F5
00098F7E 970D                       	dc.b	nBb1, $0D
00098F80 E101                       	smpsAlterNote       $01
00098F82 EC04                       	smpsPSGAlterVol     $04
00098F84 E701                       	dc.b	smpsNoAttack, $01
00098F86 EC07                       	smpsPSGAlterVol     $07
00098F88 E104                       	smpsAlterNote       $04
00098F8A 8001                       	dc.b	nRst, $01
00098F8C E103                       	smpsAlterNote       $03
00098F8E 01                         	dc.b	$01
00098F8F E1FE                       	smpsAlterNote       $FE
00098F91 01                         	dc.b	$01
00098F92 E1FA                       	smpsAlterNote       $FA
00098F94 01                         	dc.b	$01
00098F95 E1FE                       	smpsAlterNote       $FE
00098F97 01                         	dc.b	$01
00098F98 E101                       	smpsAlterNote       $01
00098F9A 01                         	dc.b	$01
00098F9B E104                       	smpsAlterNote       $04
00098F9D 01                         	dc.b	$01
00098F9E E101                       	smpsAlterNote       $01
00098FA0 01                         	dc.b	$01
00098FA1 E1FB                       	smpsAlterNote       $FB
00098FA3 01                         	dc.b	$01
00098FA4 E1FA                       	smpsAlterNote       $FA
00098FA6 01                         	dc.b	$01
00098FA7 E1FE                       	smpsAlterNote       $FE
00098FA9 01                         	dc.b	$01
00098FAA E103                       	smpsAlterNote       $03
00098FAC 0101                       	dc.b	$01, $01
00098FAE E101                       	smpsAlterNote       $01
00098FB0 01                         	dc.b	$01
00098FB1 E1FE                       	smpsAlterNote       $FE
00098FB3 ECF5                       	smpsPSGAlterVol     $F5
00098FB5 990D                       	dc.b	nC2, $0D
00098FB7 E104                       	smpsAlterNote       $04
00098FB9 EC0B                       	smpsPSGAlterVol     $0B
00098FBB 8001 01                    	dc.b	nRst, $01, $01
00098FBE E102                       	smpsAlterNote       $02
00098FC0 01                         	dc.b	$01
00098FC1 E1FC                       	smpsAlterNote       $FC
00098FC3 0101                       	dc.b	$01, $01
00098FC5 E102                       	smpsAlterNote       $02
00098FC7 01                         	dc.b	$01
00098FC8 E104                       	smpsAlterNote       $04
00098FCA 01                         	dc.b	$01
00098FCB E1FF                       	smpsAlterNote       $FF
00098FCD ECF5                       	smpsPSGAlterVol     $F5
00098FCF 9B06                       	dc.b	nD2, $06
00098FD1 EC04                       	smpsPSGAlterVol     $04
00098FD3 E701                       	dc.b	smpsNoAttack, $01
00098FD5 EC07                       	smpsPSGAlterVol     $07
00098FD7 8003                       	dc.b	nRst, $03
00098FD9 ECF5                       	smpsPSGAlterVol     $F5
00098FDB 9B07                       	dc.b	nD2, $07
00098FDD EC0B                       	smpsPSGAlterVol     $0B
00098FDF 8006                       	dc.b	nRst, $06
00098FE1 E101                       	smpsAlterNote       $01
00098FE3 01                         	dc.b	$01
00098FE4 E104                       	smpsAlterNote       $04
00098FE6 0101                       	dc.b	$01, $01
00098FE8 E1FE                       	smpsAlterNote       $FE
00098FEA 01                         	dc.b	$01
00098FEB E1FC                       	smpsAlterNote       $FC
00098FED 01                         	dc.b	$01
00098FEE E1FE                       	smpsAlterNote       $FE
00098FF0 ECF5                       	smpsPSGAlterVol     $F5
00098FF2 9C06                       	dc.b	nEb2, $06
00098FF4 EC0B                       	smpsPSGAlterVol     $0B
00098FF6 8004                       	dc.b	nRst, $04
00098FF8 ECF5                       	smpsPSGAlterVol     $F5
00098FFA 9C06                       	dc.b	nEb2, $06
00098FFC EC04                       	smpsPSGAlterVol     $04
00098FFE E701                       	dc.b	smpsNoAttack, $01
00099000 EC07                       	smpsPSGAlterVol     $07
00099002 8006                       	dc.b	nRst, $06
00099004 E105                       	smpsAlterNote       $05
00099006 01                         	dc.b	$01
00099007 E106                       	smpsAlterNote       $06
00099009 01                         	dc.b	$01
0009900A E102                       	smpsAlterNote       $02
0009900C 01                         	dc.b	$01
0009900D E1FB                       	smpsAlterNote       $FB
0009900F 01                         	dc.b	$01
00099010 E1FF                       	smpsAlterNote       $FF
00099012 ECF5                       	smpsPSGAlterVol     $F5
00099014 9B06                       	dc.b	nD2, $06
00099016 EC04                       	smpsPSGAlterVol     $04
00099018 E701                       	dc.b	smpsNoAttack, $01
0009901A EC07                       	smpsPSGAlterVol     $07
0009901C 8003                       	dc.b	nRst, $03
0009901E ECF5                       	smpsPSGAlterVol     $F5
00099020 9B06                       	dc.b	nD2, $06
00099022 EC04                       	smpsPSGAlterVol     $04
00099024 E701                       	dc.b	smpsNoAttack, $01
00099026 EC07                       	smpsPSGAlterVol     $07
00099028 8006                       	dc.b	nRst, $06
0009902A E101                       	smpsAlterNote       $01
0009902C 01                         	dc.b	$01
0009902D E105                       	smpsAlterNote       $05
0009902F 01                         	dc.b	$01
00099030 E104                       	smpsAlterNote       $04
00099032 01                         	dc.b	$01
00099033 E1FE                       	smpsAlterNote       $FE
00099035 01                         	dc.b	$01
00099036 ECF5                       	smpsPSGAlterVol     $F5
00099038 9C07                       	dc.b	nEb2, $07
0009903A EC0B                       	smpsPSGAlterVol     $0B
0009903C 8004                       	dc.b	nRst, $04
0009903E ECF5                       	smpsPSGAlterVol     $F5
00099040 9C06                       	dc.b	nEb2, $06
00099042 EC0B                       	smpsPSGAlterVol     $0B
00099044 8007                       	dc.b	nRst, $07
00099046 E105                       	smpsAlterNote       $05
00099048 0101                       	dc.b	$01, $01
0009904A E102                       	smpsAlterNote       $02
0009904C 01                         	dc.b	$01
0009904D E1FB                       	smpsAlterNote       $FB
0009904F 01                         	dc.b	$01
00099050 E1FF                       	smpsAlterNote       $FF
00099052 ECF5                       	smpsPSGAlterVol     $F5
00099054 9B06                       	dc.b	nD2, $06
00099056 EC04                       	smpsPSGAlterVol     $04
00099058 E701                       	dc.b	smpsNoAttack, $01
0009905A EC07                       	smpsPSGAlterVol     $07
0009905C 8003                       	dc.b	nRst, $03
0009905E ECF5                       	smpsPSGAlterVol     $F5
00099060 9B06                       	dc.b	nD2, $06
00099062 EC04                       	smpsPSGAlterVol     $04
00099064 E701                       	dc.b	smpsNoAttack, $01
00099066 EC07                       	smpsPSGAlterVol     $07
00099068 8006                       	dc.b	nRst, $06
0009906A E101                       	smpsAlterNote       $01
0009906C 01                         	dc.b	$01
0009906D E105                       	smpsAlterNote       $05
0009906F 01                         	dc.b	$01
00099070 E101                       	smpsAlterNote       $01
00099072 01                         	dc.b	$01
00099073 E1FC                       	smpsAlterNote       $FC
00099075 01                         	dc.b	$01
00099076 E1FE                       	smpsAlterNote       $FE
00099078 ECF5                       	smpsPSGAlterVol     $F5
0009907A 9C06                       	dc.b	nEb2, $06
0009907C EC04                       	smpsPSGAlterVol     $04
0009907E E701                       	dc.b	smpsNoAttack, $01
00099080 EC07                       	smpsPSGAlterVol     $07
00099082 8003                       	dc.b	nRst, $03
00099084 ECF5                       	smpsPSGAlterVol     $F5
00099086 9C07                       	dc.b	nEb2, $07
00099088 EC0B                       	smpsPSGAlterVol     $0B
0009908A 8006                       	dc.b	nRst, $06
0009908C E102                       	smpsAlterNote       $02
0009908E 01                         	dc.b	$01
0009908F E105                       	smpsAlterNote       $05
00099091 0101                       	dc.b	$01, $01
00099093 E1FF                       	smpsAlterNote       $FF
00099095 01                         	dc.b	$01
00099096 ECF5                       	smpsPSGAlterVol     $F5
00099098 9B07                       	dc.b	nD2, $07
0009909A EC0B                       	smpsPSGAlterVol     $0B
0009909C 8004                       	dc.b	nRst, $04
0009909E ECF5                       	smpsPSGAlterVol     $F5
000990A0 9B06                       	dc.b	nD2, $06
000990A2 EC04                       	smpsPSGAlterVol     $04
000990A4 E701                       	dc.b	smpsNoAttack, $01
000990A6 EC07                       	smpsPSGAlterVol     $07
000990A8 8002                       	dc.b	nRst, $02
000990AA E1FC                       	smpsAlterNote       $FC
000990AC ECF5                       	smpsPSGAlterVol     $F5
000990AE 9006                       	dc.b	nEb1, $06
000990B0 EC04                       	smpsPSGAlterVol     $04
000990B2 E701                       	dc.b	smpsNoAttack, $01
000990B4 ECFC                       	smpsPSGAlterVol     $FC
000990B6 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
000990BA EC04                       	smpsPSGAlterVol     $04
000990BC E701                       	dc.b	smpsNoAttack, $01
000990BE E1FD                       	smpsAlterNote       $FD
000990C0 ECFC                       	smpsPSGAlterVol     $FC
000990C2 9402                       	dc.b	nG1, $02
000990C4 EC04                       	smpsPSGAlterVol     $04
000990C6 E701                       	dc.b	smpsNoAttack, $01
000990C8 E1FE                       	smpsAlterNote       $FE
000990CA ECFC                       	smpsPSGAlterVol     $FC
000990CC 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000990D0 EC04                       	smpsPSGAlterVol     $04
000990D2 E701                       	dc.b	smpsNoAttack, $01
000990D4 EC07                       	smpsPSGAlterVol     $07
000990D6 8008                       	dc.b	nRst, $08
000990D8 F6F4 F3                    	smpsJump            music84_Jump06
000990DB                            
000990DB                            ; PSG3 Data
000990DB                            music84_PSG3:
000990DB F500                       	smpsPSGvoice        $00
000990DD E1FF                       	smpsAlterNote       $FF
000990DF EC0F                       	smpsPSGAlterVol     $0F
000990E1 803A                       	dc.b	nRst, $3A
000990E3                            
000990E3                            music84_Jump05:
000990E3 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
000990EF 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
000990F9 F6FF E8                    	smpsJump            music84_Jump05
000990FC                            
000990FC                            ; DAC Data
000990FC                            music84_DAC:
000990FC E0C0                       	smpsPan             panCenter, $00
000990FE 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0009910A 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00099116 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00099122 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0009912E 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0009913A 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00099146 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00099152 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0009915E 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0009916A 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00099176 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00099182 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0009918E 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0009919A 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000991A6 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
000991B2 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
000991BE 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
000991CA 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
000991D6 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
000991E2 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000991EE 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000991FA 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00099206 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00099212 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0009921E 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0009922A 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00099236 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00099242 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009924E 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0009925A 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00099266 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00099272 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009927E 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0009928A 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00099296 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
000992A2 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000992AE 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
000992BA 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
000992C6 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000992D2 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
000992DE 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
000992EA 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
000992F6 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00099302 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0009930E 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0009931A 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00099326 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00099332 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0009933E 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0009934A 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00099356 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00099362 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0009936E 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0009937A 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00099386 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00099392 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0009939E 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
000993AA 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000993B6 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000993C2 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000993CE 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
000993DA 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
000993E6 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
000993F2 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
000993FE 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0009940A 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00099416 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00099422 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0009942E 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0009943A 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00099446 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00099452 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009945E 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0009946A 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00099476 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00099482 E0C0                       	smpsPan             panCenter, $00
00099484 F2                         	smpsStop
00099485                            
00099485                            music84_Voices:
00099485                            ;	Voice $00
00099485                            ;	$3D
00099485                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00099485                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00099485                            	smpsVcAlgorithm     $05
00099485                            	smpsVcFeedback      $07
00099485                            	smpsVcUnusedBits    $00
00099485                            	smpsVcDetune        $05, $04, $03, $04
00099485                            	smpsVcCoarseFreq    $01, $01, $01, $01
00099485                            	smpsVcRateScale     $00, $00, $00, $00
00099485                            	smpsVcAttackRate    $11, $11, $11, $11
00099485                            	smpsVcAmpMod        $00, $00, $00, $00
00099485                            	smpsVcDecayRate1    $00, $00, $00, $0A
00099485                            	smpsVcDecayRate2    $00, $00, $00, $0B
00099485                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00099485                            	smpsVcReleaseRate   $08, $08, $08, $07
00099485 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0009949E                            
0009949E                            ;	Voice $01
0009949E                            ;	$04
0009949E                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0009949E                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0009949E                            	smpsVcAlgorithm     $04
0009949E                            	smpsVcFeedback      $00
0009949E                            	smpsVcUnusedBits    $00
0009949E                            	smpsVcDetune        $04, $03, $04, $05
0009949E                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0009949E                            	smpsVcRateScale     $00, $01, $00, $01
0009949E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009949E                            	smpsVcAmpMod        $00, $00, $00, $00
0009949E                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0009949E                            	smpsVcDecayRate2    $05, $00, $05, $00
0009949E                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0009949E                            	smpsVcReleaseRate   $06, $06, $06, $06
0009949E 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
000994B7                            
000994B7                            ;	Voice $02
000994B7                            ;	$30
000994B7                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
000994B7                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
000994B7                            	smpsVcAlgorithm     $00
000994B7                            	smpsVcFeedback      $06
000994B7                            	smpsVcUnusedBits    $00
000994B7                            	smpsVcDetune        $04, $02, $00, $06
000994B7                            	smpsVcCoarseFreq    $01, $01, $03, $0C
000994B7                            	smpsVcRateScale     $00, $00, $00, $00
000994B7                            	smpsVcAttackRate    $1F, $1F, $1F, $14
000994B7                            	smpsVcAmpMod        $00, $00, $00, $00
000994B7                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
000994B7                            	smpsVcDecayRate2    $01, $01, $01, $01
000994B7                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
000994B7                            	smpsVcReleaseRate   $09, $0B, $08, $0F
000994B7 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000994D0                            
000994D0                            ;	Voice $03
000994D0                            ;	$3A
000994D0                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000994D0                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000994D0                            	smpsVcAlgorithm     $02
000994D0                            	smpsVcFeedback      $07
000994D0                            	smpsVcUnusedBits    $00
000994D0                            	smpsVcDetune        $04, $06, $02, $00
000994D0                            	smpsVcCoarseFreq    $01, $01, $01, $01
000994D0                            	smpsVcRateScale     $00, $00, $00, $00
000994D0                            	smpsVcAttackRate    $18, $19, $14, $14
000994D0                            	smpsVcAmpMod        $00, $00, $00, $00
000994D0                            	smpsVcDecayRate1    $09, $0D, $09, $09
000994D0                            	smpsVcDecayRate2    $00, $00, $00, $00
000994D0                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000994D0                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000994D0 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
000994E9                            
000994E9                            ;	Voice $04
000994E9                            ;	$3C
000994E9                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
000994E9                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
000994E9                            	smpsVcAlgorithm     $04
000994E9                            	smpsVcFeedback      $07
000994E9                            	smpsVcUnusedBits    $00
000994E9                            	smpsVcDetune        $07, $00, $00, $03
000994E9                            	smpsVcCoarseFreq    $00, $00, $02, $0A
000994E9                            	smpsVcRateScale     $00, $00, $00, $00
000994E9                            	smpsVcAttackRate    $10, $1F, $10, $1F
000994E9                            	smpsVcAmpMod        $00, $00, $00, $00
000994E9                            	smpsVcDecayRate1    $00, $00, $00, $00
000994E9                            	smpsVcDecayRate2    $00, $00, $00, $00
000994E9                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000994E9                            	smpsVcReleaseRate   $0A, $02, $0A, $02
000994E9 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00099502                            
00099502                            ;	Voice $05
00099502                            ;	$38
00099502                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00099502                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00099502                            	smpsVcAlgorithm     $00
00099502                            	smpsVcFeedback      $07
00099502                            	smpsVcUnusedBits    $00
00099502                            	smpsVcDetune        $04, $06, $02, $00
00099502                            	smpsVcCoarseFreq    $01, $01, $01, $00
00099502                            	smpsVcRateScale     $00, $00, $00, $00
00099502                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00099502                            	smpsVcAmpMod        $00, $00, $00, $00
00099502                            	smpsVcDecayRate1    $00, $03, $00, $17
00099502                            	smpsVcDecayRate2    $00, $08, $08, $0B
00099502                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00099502                            	smpsVcReleaseRate   $08, $05, $05, $05
00099502 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0009951B                            
0009951B                            
0009951C 00                         		even
0009951C                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009D72C                            		even
0009D72C                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A1284 00                         		even
000A1284                            Music87:	include	sound\music87.asm; Invincibility
000A1284                            triple_Header:
000A1284 =00000001                  smpsHeaderStartSong = 1
000A1284 0000                       	smpsHeaderVoice     triple_Voices
000A1286 0501                       	smpsHeaderChan      $05, $01
000A1288 0200                       	smpsHeaderTempo     $02, $00
000A128A                            
000A128E 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A1292 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A1296 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A129A 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A129E 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A12A4                            
000A12A4                            ; DAC Data
000A12A4                            triple_DAC:
000A12A4 E0C0                       	smpsPan             panCenter, $00
000A12A6 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A12AC                            
000A12AC                            triple_Loop01:
000A12AC 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A12AF                            
000A12AF                            triple_Loop00:
000A12AF 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A12BB 06                         	dc.b	$06
000A12BC F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A12C1 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A12CD 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A12D4 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A12D9 0303 1B                    	dc.b	$03, $03, $1B
000A12DC E0C0                       	smpsPan             panCenter, $00
000A12DE F6FF C4                    	smpsJump triple_DAC
000A12E1                            
000A12E1                            ; FM1 Data
000A12E1                            triple_FM1:
000A12E1 E0C0                       	smpsPan             panCenter, $00
000A12E5 8018                       	dc.b	nRst, $18
000A12E7                            
000A12E7                            triple_Loop0B:
000A12E7 AC06 B8                    	dc.b	nG3, $06, nG4
000A12EA F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A12EF                            
000A12EF                            triple_Loop0C:
000A12EF A7B3                       	dc.b	nD3, nD4
000A12F1 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A12F6                            
000A12F6                            triple_Loop0D:
000A12F6 A9B5                       	dc.b	nE3, nE4
000A12F8 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A12FD A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A1305 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A130A A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A1316 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A1322 AD                         	dc.b	nAb3
000A1323 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A1328 8018                       	dc.b	nRst, $18
000A132A E0C0                       	smpsPan             panCenter, $00
000A132E F6FF B1                    	smpsJump triple_FM1
000A1331                            
000A1331                            ; FM2 Data
000A1331                            triple_FM2:
000A1331 E0C0                       	smpsPan             panCenter, $00
000A1335 8018                       	dc.b	nRst, $18
000A1337                            
000A1337                            triple_Loop07:
000A1337 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1343 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A134F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A1354 8003                       	dc.b	nRst, $03
000A1356                            
000A1356                            triple_Loop08:
000A1356 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A135C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A1361 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A1367                            
000A1367                            triple_Loop09:
000A1367 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1373 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A137F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A1384 8003                       	dc.b	nRst, $03
000A1386                            
000A1386                            triple_Loop0A:
000A1386 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A138C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A1391 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A1397 E0C0                       	smpsPan             panCenter, $00
000A139B F6FF 94                    	smpsJump triple_FM2
000A139E                            
000A139E                            ; FM3 Data
000A139E                            triple_FM3:
000A139E E0C0                       	smpsPan             panCenter, $00
000A13A2 8018                       	dc.b	nRst, $18
000A13A4                            
000A13A4                            triple_Loop06:
000A13A4 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A13AB F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A13B0 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A13BC BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A13C8 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A13CB F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A13D0 8018                       	dc.b	nRst, $18
000A13D2 E0C0                       	smpsPan             panCenter, $00
000A13D6 F6FF C6                    	smpsJump triple_FM3
000A13D9                            
000A13D9                            ; FM4 Data
000A13D9                            triple_FM4:
000A13D9 E103                       	smpsAlterNote       $03
000A13DD E0C0                       	smpsPan             panCenter, $00
000A13DF 8018                       	dc.b	nRst, $18
000A13E1                            
000A13E1                            triple_Loop02:
000A13E1 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A13ED C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A13F9 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A13FE 8003                       	dc.b	nRst, $03
000A1400                            
000A1400                            triple_Loop03:
000A1400 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1406 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A140B B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A1411                            
000A1411                            triple_Loop04:
000A1411 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A141D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A1429 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A142E 8003                       	dc.b	nRst, $03
000A1430                            
000A1430                            triple_Loop05:
000A1430 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1436 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A143B B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A1441 E0C0                       	smpsPan             panCenter, $00
000A1443 F6FF 94                    	smpsJump triple_FM4
000A1446                            
000A1446                            ; PSG1 Data
000A1446                            triple_PSG1:
000A1446 8018                       	dc.b	nRst, $18
000A1448                            
000A1448                            triple_Loop0E:
000A1448 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1454 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1460 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A146C 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A1470 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A1475 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1481 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A148D 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1499 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A149D                            
000A149D                            triple_Loop0F:
000A149D 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A14A3 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A14A8 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A14AE                            
000A14AE                            triple_Loop10:
000A14AE A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A14BA 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A14C6 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A14D2 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A14D6 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A14DB A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A14E7 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A14F3 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A14FF 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A1503                            
000A1503                            triple_Loop11:
000A1503 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A1509 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A150E 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A1514 F500                       	smpsPSGvoice        $00
000A1516 F6FF 2E                    	smpsJump triple_PSG1
000A1519                            
000A1519                            triple_Voices:
000A1519                            ;	Voice $00
000A1519                            ;	$3A
000A1519                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A1519                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A1519                            	smpsVcAlgorithm     $02
000A1519                            	smpsVcFeedback      $07
000A1519                            	smpsVcUnusedBits    $00
000A1519                            	smpsVcDetune        $00, $00, $00, $00
000A1519                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A1519                            	smpsVcRateScale     $01, $02, $02, $02
000A1519                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A1519                            	smpsVcAmpMod        $00, $00, $00, $00
000A1519                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A1519                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1519                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A1519                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1519 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A1532                            
000A1532                            ;	Voice $01
000A1532                            ;	$20
000A1532                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A1532                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A1532                            	smpsVcAlgorithm     $00
000A1532                            	smpsVcFeedback      $04
000A1532                            	smpsVcUnusedBits    $00
000A1532                            	smpsVcDetune        $00, $00, $03, $07
000A1532                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A1532                            	smpsVcRateScale     $03, $03, $03, $02
000A1532                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A1532                            	smpsVcAmpMod        $00, $00, $00, $00
000A1532                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A1532                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A1532                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A1532                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1532 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A1532 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A154C 00                         		even
000A154C                            Music88:	incbin	sound\music88.bin; Extra Life
000A163A                            		even
000A163A                            Music89:	incbin	sound\music89.bin; Special Stage
000A5502 00                         		even
000A5502                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A56CC                            		even
000A56CC                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A5966                            		even
000A5966                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A5C04                            		even
000A5C04                            Music8D:	incbin	sound\music8D.bin; Final Zone
000A5E20                            		even
000A5E20                            Music8E:	include	sound\merry.asm ; Act Clear
000A5E20 =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000A5E20 =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000A5E20 =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000A5E20 =0000008A                  dMerryClap = dLowTimpani
000A5E20                            
000A5E20                            MerrysLittleLamb_Header:
000A5E20 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000A5E22 0603                       	smpsHeaderChan      $06, $03
000A5E24 0100                       	smpsHeaderTempo     $01, $00
000A5E26                            
000A5E2A 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000A5E2E 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000A5E32 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000A5E36 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000A5E3A 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000A5E3E 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000A5E44 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000A5E4A 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000A5E50                            
000A5E50                            MerrysLittleLamb_FM1:
000A5E50 E0C0                       	smpsPan             panCenter, $00
000A5E52 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000A5E59 E60F                       	smpsAlterVol        $0F
000A5E5B A704                       	dc.b	nD3, $04
000A5E5D E606                       	smpsAlterVol        $06
000A5E5F A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5E64 E6FA                       	smpsAlterVol        $FA
000A5E66 A705                       	dc.b	nD3, $05
000A5E68 E606                       	smpsAlterVol        $06
000A5E6A A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5E6F E6FA                       	smpsAlterVol        $FA
000A5E71 A704                       	dc.b	nD3, $04
000A5E73 E606                       	smpsAlterVol        $06
000A5E75 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5E7B E6FA                       	smpsAlterVol        $FA
000A5E7D A7                         	dc.b	nD3
000A5E7E E606                       	smpsAlterVol        $06
000A5E80 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5E85 E6FA                       	smpsAlterVol        $FA
000A5E87 A704                       	dc.b	nD3, $04
000A5E89 E606                       	smpsAlterVol        $06
000A5E8B A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5E91 E6FA                       	smpsAlterVol        $FA
000A5E93 A7                         	dc.b	nD3
000A5E94 E606                       	smpsAlterVol        $06
000A5E96 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5E9C E6FA                       	smpsAlterVol        $FA
000A5E9E A705                       	dc.b	nD3, $05
000A5EA0 E606                       	smpsAlterVol        $06
000A5EA2 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5EA7 E6FA                       	smpsAlterVol        $FA
000A5EA9 A7                         	dc.b	nD3
000A5EAA E606                       	smpsAlterVol        $06
000A5EAC A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5EB2 E6FA                       	smpsAlterVol        $FA
000A5EB4 A705                       	dc.b	nD3, $05
000A5EB6 E606                       	smpsAlterVol        $06
000A5EB8 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5EBD E6FA                       	smpsAlterVol        $FA
000A5EBF A704                       	dc.b	nD3, $04
000A5EC1 E606                       	smpsAlterVol        $06
000A5EC3 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5EC8 E6FA                       	smpsAlterVol        $FA
000A5ECA A705                       	dc.b	nD3, $05
000A5ECC E606                       	smpsAlterVol        $06
000A5ECE A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5ED3 E6FA                       	smpsAlterVol        $FA
000A5ED5 A704                       	dc.b	nD3, $04
000A5ED7 E606                       	smpsAlterVol        $06
000A5ED9 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5EDE E6FA                       	smpsAlterVol        $FA
000A5EE0 A705                       	dc.b	nD3, $05
000A5EE2 E606                       	smpsAlterVol        $06
000A5EE4 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5EE9 E6FA                       	smpsAlterVol        $FA
000A5EEB A704                       	dc.b	nD3, $04
000A5EED E606                       	smpsAlterVol        $06
000A5EEF A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5EF5 E6FA                       	smpsAlterVol        $FA
000A5EF7 A7                         	dc.b	nD3
000A5EF8 E606                       	smpsAlterVol        $06
000A5EFA A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5F00 E6FA                       	smpsAlterVol        $FA
000A5F02 A705                       	dc.b	nD3, $05
000A5F04 E606                       	smpsAlterVol        $06
000A5F06 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5F0B E6FA                       	smpsAlterVol        $FA
000A5F0D A7                         	dc.b	nD3
000A5F0E E606                       	smpsAlterVol        $06
000A5F10 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5F16 E6FA                       	smpsAlterVol        $FA
000A5F18 A705                       	dc.b	nD3, $05
000A5F1A E606                       	smpsAlterVol        $06
000A5F1C A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5F21 E6FA                       	smpsAlterVol        $FA
000A5F23 A704                       	dc.b	nD3, $04
000A5F25 E606                       	smpsAlterVol        $06
000A5F27 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5F2C E6FA                       	smpsAlterVol        $FA
000A5F2E A705                       	dc.b	nD3, $05
000A5F30 E606                       	smpsAlterVol        $06
000A5F32 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5F37 E6FA                       	smpsAlterVol        $FA
000A5F39 A704                       	dc.b	nD3, $04
000A5F3B E606                       	smpsAlterVol        $06
000A5F3D A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5F42 E6FA                       	smpsAlterVol        $FA
000A5F44 A705                       	dc.b	nD3, $05
000A5F46 E606                       	smpsAlterVol        $06
000A5F48 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5F4D E6FA                       	smpsAlterVol        $FA
000A5F4F A704                       	dc.b	nD3, $04
000A5F51 E606                       	smpsAlterVol        $06
000A5F53 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5F59 E6FA                       	smpsAlterVol        $FA
000A5F5B A7                         	dc.b	nD3
000A5F5C E606                       	smpsAlterVol        $06
000A5F5E A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5F63 E6FA                       	smpsAlterVol        $FA
000A5F65 A704                       	dc.b	nD3, $04
000A5F67 E606                       	smpsAlterVol        $06
000A5F69 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5F6F E6FA                       	smpsAlterVol        $FA
000A5F71 A7                         	dc.b	nD3
000A5F72 E606                       	smpsAlterVol        $06
000A5F74 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5F7A E6FA                       	smpsAlterVol        $FA
000A5F7C A705                       	dc.b	nD3, $05
000A5F7E E606                       	smpsAlterVol        $06
000A5F80 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5F85 E6FA                       	smpsAlterVol        $FA
000A5F87 A704                       	dc.b	nD3, $04
000A5F89 E606                       	smpsAlterVol        $06
000A5F8B A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5F90 E6FA                       	smpsAlterVol        $FA
000A5F92 A705                       	dc.b	nD3, $05
000A5F94 E606                       	smpsAlterVol        $06
000A5F96 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5F9B E6FA                       	smpsAlterVol        $FA
000A5F9D A704                       	dc.b	nD3, $04
000A5F9F E606                       	smpsAlterVol        $06
000A5FA1 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5FA6 E6FA                       	smpsAlterVol        $FA
000A5FA8 A705                       	dc.b	nD3, $05
000A5FAA E606                       	smpsAlterVol        $06
000A5FAC A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5FB1 E6FA                       	smpsAlterVol        $FA
000A5FB3 A704                       	dc.b	nD3, $04
000A5FB5 E606                       	smpsAlterVol        $06
000A5FB7 A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000A5FBE F2                         	smpsStop
000A5FBF                            
000A5FBF                            MerrysLittleLamb_FM2:
000A5FBF E0C0                       	smpsPan             panCenter, $00
000A5FC1 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000A5FC9 E610                       	smpsAlterVol        $10
000A5FCB A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000A5FD4                            
000A5FD4                            MerrysLittleLamb_FM3:
000A5FD4                            MerrysLittleLamb_FM4:
000A5FD4                            MerrysLittleLamb_FM5:
000A5FD4 F2                         	smpsStop
000A5FD5                            
000A5FD5                            MerrysLittleLamb_PSG1:
000A5FD5 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000A5FDD EC02                       	smpsPSGAlterVol     $02
000A5FDF B7                         	dc.b	nFs4
000A5FE0 EC03                       	smpsPSGAlterVol     $03
000A5FE2 B7                         	dc.b	nFs4
000A5FE3 EC03                       	smpsPSGAlterVol     $03
000A5FE5 B7                         	dc.b	nFs4
000A5FE6 EC03                       	smpsPSGAlterVol     $03
000A5FE8 B7                         	dc.b	nFs4
000A5FE9 ECF5                       	smpsPSGAlterVol     $F5
000A5FEB B7                         	dc.b	nFs4
000A5FEC EC02                       	smpsPSGAlterVol     $02
000A5FEE B7                         	dc.b	nFs4
000A5FEF EC03                       	smpsPSGAlterVol     $03
000A5FF1 B7                         	dc.b	nFs4
000A5FF2 EC03                       	smpsPSGAlterVol     $03
000A5FF4 B7                         	dc.b	nFs4
000A5FF5 ECF8                       	smpsPSGAlterVol     $F8
000A5FF7 B7                         	dc.b	nFs4
000A5FF8 EC02                       	smpsPSGAlterVol     $02
000A5FFA B7                         	dc.b	nFs4
000A5FFB EC03                       	smpsPSGAlterVol     $03
000A5FFD B7                         	dc.b	nFs4
000A5FFE EC03                       	smpsPSGAlterVol     $03
000A6000 B7                         	dc.b	nFs4
000A6001 EC03                       	smpsPSGAlterVol     $03
000A6003 B7                         	dc.b	nFs4
000A6004 ECF5                       	smpsPSGAlterVol     $F5
000A6006 B7                         	dc.b	nFs4
000A6007 EC02                       	smpsPSGAlterVol     $02
000A6009 B7                         	dc.b	nFs4
000A600A EC03                       	smpsPSGAlterVol     $03
000A600C B7                         	dc.b	nFs4
000A600D EC03                       	smpsPSGAlterVol     $03
000A600F B7                         	dc.b	nFs4
000A6010 EC03                       	smpsPSGAlterVol     $03
000A6012 B7                         	dc.b	nFs4
000A6013 ECF5                       	smpsPSGAlterVol     $F5
000A6015 B7                         	dc.b	nFs4
000A6016 EC02                       	smpsPSGAlterVol     $02
000A6018 B7                         	dc.b	nFs4
000A6019 EC06                       	smpsPSGAlterVol     $06
000A601B B7                         	dc.b	nFs4
000A601C EC03                       	smpsPSGAlterVol     $03
000A601E B7                         	dc.b	nFs4
000A601F ECF5                       	smpsPSGAlterVol     $F5
000A6021 B7                         	dc.b	nFs4
000A6022 EC02                       	smpsPSGAlterVol     $02
000A6024 B7                         	dc.b	nFs4
000A6025 EC03                       	smpsPSGAlterVol     $03
000A6027 B7                         	dc.b	nFs4
000A6028 EC03                       	smpsPSGAlterVol     $03
000A602A B7                         	dc.b	nFs4
000A602B EC03                       	smpsPSGAlterVol     $03
000A602D B7                         	dc.b	nFs4
000A602E ECF5                       	smpsPSGAlterVol     $F5
000A6030 B7                         	dc.b	nFs4
000A6031 EC02                       	smpsPSGAlterVol     $02
000A6033 B7                         	dc.b	nFs4
000A6034 EC03                       	smpsPSGAlterVol     $03
000A6036 B7                         	dc.b	nFs4
000A6037 EC03                       	smpsPSGAlterVol     $03
000A6039 B7                         	dc.b	nFs4
000A603A EC03                       	smpsPSGAlterVol     $03
000A603C B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000A6040 ECF7                       	smpsPSGAlterVol     $F7
000A6042 A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000A604E A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000A605A A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000A6066 A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000A6072 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000A607E F2                         	smpsStop
000A607F                            
000A607F                            MerrysLittleLamb_PSG2:
000A607F 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000A6086 EC02                       	smpsPSGAlterVol     $02
000A6088 A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000A6094 E101                       	smpsAlterNote       $01
000A6096 AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000A609A E101                       	smpsAlterNote       $01
000A609C AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A60A0 E101                       	smpsAlterNote       $01
000A60A2 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A60A6 E101                       	smpsAlterNote       $01
000A60A8 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A60AC E101                       	smpsAlterNote       $01
000A60AE AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000A60B2 E101                       	smpsAlterNote       $01
000A60B4 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A60B8 E101                       	smpsAlterNote       $01
000A60BA AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000A60BE E101                       	smpsAlterNote       $01
000A60C0 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A60C4 E101                       	smpsAlterNote       $01
000A60C6 AB04 80                    	dc.b	nFs3, $04, nRst
000A60C9 E101                       	smpsAlterNote       $01
000A60CB AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A60CF E101                       	smpsAlterNote       $01
000A60D1 AB04 80                    	dc.b	nFs3, $04, nRst
000A60D4 E101                       	smpsAlterNote       $01
000A60D6 AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000A60DC F2                         	smpsStop
000A60DD                            
000A60DD                            MerrysLittleLamb_PSG3:
000A60DD 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000A60E3 F3E7                       	smpsPSGform         $E7
000A60E5 E108                       	smpsAlterNote       $08
000A60E7 0002                       	dc.b	nMaxPSG, $02
000A60E9 EC01                       	smpsPSGAlterVol     $01
000A60EB E108                       	smpsAlterNote       $08
000A60ED 0005                       	dc.b	nMaxPSG, $05
000A60EF EC01                       	smpsPSGAlterVol     $01
000A60F1 E108                       	smpsAlterNote       $08
000A60F3 0008                       	dc.b	nMaxPSG, $08
000A60F5 EC01                       	smpsPSGAlterVol     $01
000A60F7 E108                       	smpsAlterNote       $08
000A60F9 00                         	dc.b	nMaxPSG
000A60FA EC01                       	smpsPSGAlterVol     $01
000A60FC E108                       	smpsAlterNote       $08
000A60FE 00                         	dc.b	nMaxPSG
000A60FF EC01                       	smpsPSGAlterVol     $01
000A6101 E108                       	smpsAlterNote       $08
000A6103 0007                       	dc.b	nMaxPSG, $07
000A6105 EC01                       	smpsPSGAlterVol     $01
000A6107 E108                       	smpsAlterNote       $08
000A6109 0005                       	dc.b	nMaxPSG, $05
000A610B EC01                       	smpsPSGAlterVol     $01
000A610D E108                       	smpsAlterNote       $08
000A610F 0007                       	dc.b	nMaxPSG, $07
000A6111 EC01                       	smpsPSGAlterVol     $01
000A6113 E108                       	smpsAlterNote       $08
000A6115 0004                       	dc.b	nMaxPSG, $04
000A6117 EC01                       	smpsPSGAlterVol     $01
000A6119 E108                       	smpsAlterNote       $08
000A611B 0007                       	dc.b	nMaxPSG, $07
000A611D EC01                       	smpsPSGAlterVol     $01
000A611F E108                       	smpsAlterNote       $08
000A6121 0006                       	dc.b	nMaxPSG, $06
000A6123 EC01                       	smpsPSGAlterVol     $01
000A6125 E108                       	smpsAlterNote       $08
000A6127 0009                       	dc.b	nMaxPSG, $09
000A6129 EC01                       	smpsPSGAlterVol     $01
000A612B E108                       	smpsAlterNote       $08
000A612D 0007                       	dc.b	nMaxPSG, $07
000A612F EC01                       	smpsPSGAlterVol     $01
000A6131 E108                       	smpsAlterNote       $08
000A6133 0001                       	dc.b	nMaxPSG, $01
000A6135 ECFF                       	smpsPSGAlterVol     $FF
000A6137 E108                       	smpsAlterNote       $08
000A6139 00                         	dc.b	nMaxPSG
000A613A EC01                       	smpsPSGAlterVol     $01
000A613C E108                       	smpsAlterNote       $08
000A613E 0009                       	dc.b	nMaxPSG, $09
000A6140 EC01                       	smpsPSGAlterVol     $01
000A6142 E108                       	smpsAlterNote       $08
000A6144 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000A614B F2                         	smpsStop
000A614C                            
000A614C                            MerrysLittleLamb_DAC:
000A614C 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000A6158 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000A6164 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000A6170 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000A617C 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000A6188 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000A6194 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000A61A0 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000A61AC 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000A61B8 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000A61C4 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000A61D0 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000A61DC 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000A61E8 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000A61F4 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000A6200 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000A620C 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000A6218 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000A6224 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000A6230 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000A623C 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000A6248 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000A6254 F2                         	smpsStop
000A6255                            
000A6255                            MerrysLittleLamb_Voices:
000A6255                            ;	Voice $00
000A6255                            ;	$00
000A6255                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000A6255                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000A6255                            	smpsVcAlgorithm     $00
000A6255                            	smpsVcFeedback      $00
000A6255                            	smpsVcUnusedBits    $00
000A6255                            	smpsVcDetune        $07, $07, $07, $07
000A6255                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A6255                            	smpsVcRateScale     $00, $00, $00, $00
000A6255                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A6255                            	smpsVcAmpMod        $00, $00, $00, $00
000A6255                            	smpsVcDecayRate1    $1F, $00, $00, $00
000A6255                            	smpsVcDecayRate2    $12, $00, $00, $00
000A6255                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000A6255                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A6255 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A626E                            
000A626E                            ;	Voice $01
000A626E                            ;	$25
000A626E                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000A626E                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000A626E                            	smpsVcAlgorithm     $05
000A626E                            	smpsVcFeedback      $04
000A626E                            	smpsVcUnusedBits    $00
000A626E                            	smpsVcDetune        $07, $00, $00, $00
000A626E                            	smpsVcCoarseFreq    $01, $01, $01, $01
000A626E                            	smpsVcRateScale     $00, $00, $00, $00
000A626E                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000A626E                            	smpsVcAmpMod        $00, $00, $00, $00
000A626E                            	smpsVcDecayRate1    $03, $0B, $06, $08
000A626E                            	smpsVcDecayRate2    $00, $00, $00, $00
000A626E                            	smpsVcDecayLevel    $00, $0A, $04, $04
000A626E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A626E 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000A6287                            
000A6287                            
000A6288 00                         		even
000A6288                            Music8F:	incbin	sound\music8F.bin ; Game Over
000A68C8 00                         		even
000A68C8                            Music90:	incbin	sound\music90.bin ; Continue
000A6C62 00                         		even
000A6C62                            Music91:	incbin	sound\music91.bin ; Credits
000A7F30                            		even
000A7F30                            Music92:	incbin	sound\music92.bin ; Drowning
000A8272 00                         		even
000A8272                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A8342                            		even
000A8342                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A9018 00                         		even
000A9018                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A9168 00                         		even
000A9168                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A91A2 00                         		even
000A91A2                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A950A                            		even
000A950A                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A9544 00                         		even
000A9544                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A957E 00                         		even
000A957E                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A95B8 00                         		even
000A95B8                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A95F2 00                         		even
000A95F2                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A962C 00                         		even
000A962C                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A9666 00                         		even
000A9666                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A9B56                            		even
000A9B56                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A9B56                            GentleBreeze_Header:
000A9B56 =00000001                  smpsHeaderStartSong = 1
000A9B56 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A9B58 0603                       	smpsHeaderChan      $06, $03
000A9B5A 0100                       	smpsHeaderTempo     $01, $00
000A9B5C                            
000A9B60 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A9B64 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A9B68 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A9B6C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A9B70 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A9B74 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A9B7A 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A9B80 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A9B86                            
000A9B86                            ; PSG3 Data
000A9B86                            GentleBreeze_PSG3:
000A9B86 F2                         	smpsStop
000A9B87                            
000A9B87                            ; FM1 Data
000A9B87                            GentleBreeze_FM1:
000A9B89 E0C0                       	smpsPan             panCenter, $00
000A9B8B E1FF                       	smpsAlterNote       $FF
000A9B8D C410                       	dc.b	nG5, $10
000A9B8F E60F                       	smpsAlterVol        $0F
000A9B91 C4                         	dc.b	nG5
000A9B92 E6F1                       	smpsAlterVol        $F1
000A9B94 E100                       	smpsAlterNote       $00
000A9B96 C2                         	dc.b	nF5
000A9B97 E60F                       	smpsAlterVol        $0F
000A9B99 08                         	dc.b	$08
000A9B9A E6F1                       	smpsAlterVol        $F1
000A9B9C C010                       	dc.b	nEb5, $10
000A9B9E E60F                       	smpsAlterVol        $0F
000A9BA0 C0                         	dc.b	nEb5
000A9BA1 E6F1                       	smpsAlterVol        $F1
000A9BA3 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9BA9 E60F                       	smpsAlterVol        $0F
000A9BAB C9                         	dc.b	nC6
000A9BAC E6F1                       	smpsAlterVol        $F1
000A9BAE C5                         	dc.b	nAb5
000A9BAF E60F                       	smpsAlterVol        $0F
000A9BB1 08                         	dc.b	$08
000A9BB2 E6F1                       	smpsAlterVol        $F1
000A9BB4 C010                       	dc.b	nEb5, $10
000A9BB6 E60F                       	smpsAlterVol        $0F
000A9BB8 C0                         	dc.b	nEb5
000A9BB9 E6F1                       	smpsAlterVol        $F1
000A9BBB C208                       	dc.b	nF5, $08
000A9BBD E1FF                       	smpsAlterNote       $FF
000A9BBF C410                       	dc.b	nG5, $10
000A9BC1 E100                       	smpsAlterNote       $00
000A9BC3 C5C7                       	dc.b	nAb5, nBb5
000A9BC5 E60F                       	smpsAlterVol        $0F
000A9BC7 C7                         	dc.b	nBb5
000A9BC8 E6F1                       	smpsAlterVol        $F1
000A9BCA C5                         	dc.b	nAb5
000A9BCB E60F                       	smpsAlterVol        $0F
000A9BCD 08                         	dc.b	$08
000A9BCE E6F1                       	smpsAlterVol        $F1
000A9BD0 E1FF                       	smpsAlterNote       $FF
000A9BD2 C410                       	dc.b	nG5, $10
000A9BD4 E60F                       	smpsAlterVol        $0F
000A9BD6 C4                         	dc.b	nG5
000A9BD7 E6F1                       	smpsAlterVol        $F1
000A9BD9 C4                         	dc.b	nG5
000A9BDA E100                       	smpsAlterNote       $00
000A9BDC C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9BE1 E60F                       	smpsAlterVol        $0F
000A9BE3 C2                         	dc.b	nF5
000A9BE4 E6F1                       	smpsAlterVol        $F1
000A9BE6 E1FF                       	smpsAlterNote       $FF
000A9BE8 C4                         	dc.b	nG5
000A9BE9 E60F                       	smpsAlterVol        $0F
000A9BEB 08                         	dc.b	$08
000A9BEC E6F1                       	smpsAlterVol        $F1
000A9BEE 10                         	dc.b	$10
000A9BEF E60F                       	smpsAlterVol        $0F
000A9BF1 38                         	dc.b	$38
000A9BF2 E6F1                       	smpsAlterVol        $F1
000A9BF4 10                         	dc.b	$10
000A9BF5 E60F                       	smpsAlterVol        $0F
000A9BF7 C4                         	dc.b	nG5
000A9BF8 E6F1                       	smpsAlterVol        $F1
000A9BFA E100                       	smpsAlterNote       $00
000A9BFC C2                         	dc.b	nF5
000A9BFD E60F                       	smpsAlterVol        $0F
000A9BFF 08                         	dc.b	$08
000A9C00 E6F1                       	smpsAlterVol        $F1
000A9C02 C010                       	dc.b	nEb5, $10
000A9C04 E60F                       	smpsAlterVol        $0F
000A9C06 C0                         	dc.b	nEb5
000A9C07 E6F1                       	smpsAlterVol        $F1
000A9C09 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9C0F E60F                       	smpsAlterVol        $0F
000A9C11 C9                         	dc.b	nC6
000A9C12 E6F1                       	smpsAlterVol        $F1
000A9C14 C5                         	dc.b	nAb5
000A9C15 E60F                       	smpsAlterVol        $0F
000A9C17 08                         	dc.b	$08
000A9C18 E6F1                       	smpsAlterVol        $F1
000A9C1A C010                       	dc.b	nEb5, $10
000A9C1C E60F                       	smpsAlterVol        $0F
000A9C1E C0                         	dc.b	nEb5
000A9C1F E6F1                       	smpsAlterVol        $F1
000A9C21 C208                       	dc.b	nF5, $08
000A9C23 E1FF                       	smpsAlterNote       $FF
000A9C25 C410                       	dc.b	nG5, $10
000A9C27 E100                       	smpsAlterNote       $00
000A9C29 C5C7                       	dc.b	nAb5, nBb5
000A9C2B E60F                       	smpsAlterVol        $0F
000A9C2D C7                         	dc.b	nBb5
000A9C2E E6F1                       	smpsAlterVol        $F1
000A9C30 C5                         	dc.b	nAb5
000A9C31 E60F                       	smpsAlterVol        $0F
000A9C33 08                         	dc.b	$08
000A9C34 E6F1                       	smpsAlterVol        $F1
000A9C36 E1FF                       	smpsAlterNote       $FF
000A9C38 C410                       	dc.b	nG5, $10
000A9C3A E60F                       	smpsAlterVol        $0F
000A9C3C C4                         	dc.b	nG5
000A9C3D E6F1                       	smpsAlterVol        $F1
000A9C3F C4                         	dc.b	nG5
000A9C40 E100                       	smpsAlterNote       $00
000A9C42 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9C47 E60F                       	smpsAlterVol        $0F
000A9C49 28                         	dc.b	$28
000A9C4A E6F1                       	smpsAlterVol        $F1
000A9C4C C008 10                    	dc.b	nEb5, $08, $10
000A9C4F E60F                       	smpsAlterVol        $0F
000A9C51 21                         	dc.b	$21
000A9C52                            
000A9C52                            GentleBreeze_Loop12:
000A9C52 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A9C55 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A9C5A E717                       	dc.b	smpsNoAttack, $17
000A9C5C E6F1                       	smpsAlterVol        $F1
000A9C5E E1FF                       	smpsAlterNote       $FF
000A9C60 C410                       	dc.b	nG5, $10
000A9C62 E60F                       	smpsAlterVol        $0F
000A9C64 C4                         	dc.b	nG5
000A9C65 E6F1                       	smpsAlterVol        $F1
000A9C67 E100                       	smpsAlterNote       $00
000A9C69 C2                         	dc.b	nF5
000A9C6A E60F                       	smpsAlterVol        $0F
000A9C6C 08                         	dc.b	$08
000A9C6D E6F1                       	smpsAlterVol        $F1
000A9C6F C010                       	dc.b	nEb5, $10
000A9C71 E60F                       	smpsAlterVol        $0F
000A9C73 C0                         	dc.b	nEb5
000A9C74 E6F1                       	smpsAlterVol        $F1
000A9C76 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9C7C E60F                       	smpsAlterVol        $0F
000A9C7E C9                         	dc.b	nC6
000A9C7F E6F1                       	smpsAlterVol        $F1
000A9C81 C5                         	dc.b	nAb5
000A9C82 E60F                       	smpsAlterVol        $0F
000A9C84 08                         	dc.b	$08
000A9C85 E6F1                       	smpsAlterVol        $F1
000A9C87 C010                       	dc.b	nEb5, $10
000A9C89 E60F                       	smpsAlterVol        $0F
000A9C8B C0                         	dc.b	nEb5
000A9C8C E6F1                       	smpsAlterVol        $F1
000A9C8E C208                       	dc.b	nF5, $08
000A9C90 E1FF                       	smpsAlterNote       $FF
000A9C92 C410                       	dc.b	nG5, $10
000A9C94 E100                       	smpsAlterNote       $00
000A9C96 C5C7                       	dc.b	nAb5, nBb5
000A9C98 E60F                       	smpsAlterVol        $0F
000A9C9A C7                         	dc.b	nBb5
000A9C9B E6F1                       	smpsAlterVol        $F1
000A9C9D C5                         	dc.b	nAb5
000A9C9E E60F                       	smpsAlterVol        $0F
000A9CA0 08                         	dc.b	$08
000A9CA1 E6F1                       	smpsAlterVol        $F1
000A9CA3 E1FF                       	smpsAlterNote       $FF
000A9CA5 C410                       	dc.b	nG5, $10
000A9CA7 E60F                       	smpsAlterVol        $0F
000A9CA9 C4                         	dc.b	nG5
000A9CAA E6F1                       	smpsAlterVol        $F1
000A9CAC C4                         	dc.b	nG5
000A9CAD E100                       	smpsAlterNote       $00
000A9CAF C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9CB4 E60F                       	smpsAlterVol        $0F
000A9CB6 C2                         	dc.b	nF5
000A9CB7 E6F1                       	smpsAlterVol        $F1
000A9CB9 E1FF                       	smpsAlterNote       $FF
000A9CBB C4                         	dc.b	nG5
000A9CBC E60F                       	smpsAlterVol        $0F
000A9CBE 08                         	dc.b	$08
000A9CBF E6F1                       	smpsAlterVol        $F1
000A9CC1 10                         	dc.b	$10
000A9CC2 E60F                       	smpsAlterVol        $0F
000A9CC4 38                         	dc.b	$38
000A9CC5 E6F1                       	smpsAlterVol        $F1
000A9CC7 10                         	dc.b	$10
000A9CC8 E60F                       	smpsAlterVol        $0F
000A9CCA C4                         	dc.b	nG5
000A9CCB E6F1                       	smpsAlterVol        $F1
000A9CCD E100                       	smpsAlterNote       $00
000A9CCF C2                         	dc.b	nF5
000A9CD0 E60F                       	smpsAlterVol        $0F
000A9CD2 08                         	dc.b	$08
000A9CD3 E6F1                       	smpsAlterVol        $F1
000A9CD5 C010                       	dc.b	nEb5, $10
000A9CD7 E60F                       	smpsAlterVol        $0F
000A9CD9 C0                         	dc.b	nEb5
000A9CDA E6F1                       	smpsAlterVol        $F1
000A9CDC BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9CE2 E60F                       	smpsAlterVol        $0F
000A9CE4 C9                         	dc.b	nC6
000A9CE5 E6F1                       	smpsAlterVol        $F1
000A9CE7 C5                         	dc.b	nAb5
000A9CE8 E60F                       	smpsAlterVol        $0F
000A9CEA 08                         	dc.b	$08
000A9CEB E6F1                       	smpsAlterVol        $F1
000A9CED C010                       	dc.b	nEb5, $10
000A9CEF E60F                       	smpsAlterVol        $0F
000A9CF1 C0                         	dc.b	nEb5
000A9CF2 E6F1                       	smpsAlterVol        $F1
000A9CF4 C208                       	dc.b	nF5, $08
000A9CF6 E1FF                       	smpsAlterNote       $FF
000A9CF8 C410                       	dc.b	nG5, $10
000A9CFA E100                       	smpsAlterNote       $00
000A9CFC C5C7                       	dc.b	nAb5, nBb5
000A9CFE E60F                       	smpsAlterVol        $0F
000A9D00 C7                         	dc.b	nBb5
000A9D01 E6F1                       	smpsAlterVol        $F1
000A9D03 C5                         	dc.b	nAb5
000A9D04 E60F                       	smpsAlterVol        $0F
000A9D06 08                         	dc.b	$08
000A9D07 E6F1                       	smpsAlterVol        $F1
000A9D09 E1FF                       	smpsAlterNote       $FF
000A9D0B C410                       	dc.b	nG5, $10
000A9D0D E60F                       	smpsAlterVol        $0F
000A9D0F C4                         	dc.b	nG5
000A9D10 E6F1                       	smpsAlterVol        $F1
000A9D12 C4                         	dc.b	nG5
000A9D13 E100                       	smpsAlterNote       $00
000A9D15 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9D1A E60F                       	smpsAlterVol        $0F
000A9D1C 28                         	dc.b	$28
000A9D1D E6F1                       	smpsAlterVol        $F1
000A9D1F C008 10                    	dc.b	nEb5, $08, $10
000A9D22 E60F                       	smpsAlterVol        $0F
000A9D24 21                         	dc.b	$21
000A9D25 E0C0                       	smpsPan             panCenter, $00
000A9D27 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A9D2A                            
000A9D2A                            ; FM2 Data
000A9D2A                            GentleBreeze_FM2:
000A9D2C E60C                       	smpsAlterVol        $0C
000A9D2E E0C0                       	smpsPan             panCenter, $00
000A9D30 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A9D3C A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A9D48 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A9D54 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A9D60 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A9D6C A039                       	dc.b	nG2, $39
000A9D6E                            
000A9D6E                            GentleBreeze_Jump04:
000A9D6E E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A9D71                            
000A9D71                            GentleBreeze_Loop11:
000A9D71 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A9D7D A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A9D89 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A9D95 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A9DA1 A3                         	dc.b	nBb2
000A9DA2 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A9DA7 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A9DB3 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A9DBF 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A9DCB 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A9DD7 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A9DE3 A039                       	dc.b	nG2, $39
000A9DE5 E0C0                       	smpsPan             panCenter, $00
000A9DE7 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A9DEA                            
000A9DEA                            ; FM3 Data
000A9DEA                            GentleBreeze_FM3:
000A9DEC E0C0                       	smpsPan             panCenter, $00
000A9DEE 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A9DF6 E616                       	smpsAlterVol        $16
000A9DF8 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A9DFD                            
000A9DFD                            GentleBreeze_Loop0F:
000A9DFD C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A9E01 E1FF                       	smpsAlterNote       $FF
000A9E03 C4                         	dc.b	nG5
000A9E04 E100                       	smpsAlterNote       $00
000A9E06 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9E0B E608                       	smpsAlterVol        $08
000A9E0D C080 08                    	dc.b	nEb5, nRst, $08
000A9E10 E6F8                       	smpsAlterVol        $F8
000A9E12 C7                         	dc.b	nBb5
000A9E13 E1FF                       	smpsAlterNote       $FF
000A9E15 C4                         	dc.b	nG5
000A9E16 E100                       	smpsAlterNote       $00
000A9E18 C0BB                       	dc.b	nEb5, nBb4
000A9E1A F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A9E1F C0BD C9                    	dc.b	nEb5, nC5, nC6
000A9E22 E1FF                       	smpsAlterNote       $FF
000A9E24 C4                         	dc.b	nG5
000A9E25 E100                       	smpsAlterNote       $00
000A9E27 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9E2C E608                       	smpsAlterVol        $08
000A9E2E C080 08                    	dc.b	nEb5, nRst, $08
000A9E31 E6F8                       	smpsAlterVol        $F8
000A9E33 E1FF                       	smpsAlterNote       $FF
000A9E35 C4                         	dc.b	nG5
000A9E36 E100                       	smpsAlterNote       $00
000A9E38 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A9E3F E1FF                       	smpsAlterNote       $FF
000A9E41 C4                         	dc.b	nG5
000A9E42 E100                       	smpsAlterNote       $00
000A9E44 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A9E49 E1FF                       	smpsAlterNote       $FF
000A9E4B C4                         	dc.b	nG5
000A9E4C E100                       	smpsAlterNote       $00
000A9E4E C7                         	dc.b	nBb5
000A9E4F E1FF                       	smpsAlterNote       $FF
000A9E51 C4                         	dc.b	nG5
000A9E52 E100                       	smpsAlterNote       $00
000A9E54 C2C0 01                    	dc.b	nF5, nEb5, $01
000A9E57                            
000A9E57                            GentleBreeze_Jump03:
000A9E57 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A9E5E E6FA                       	smpsAlterVol        $FA
000A9E60 F4                         	smpsModOff
000A9E61 E1FF                       	smpsAlterNote       $FF
000A9E63 B850                       	dc.b	nG4, $50
000A9E65 E100                       	smpsAlterNote       $00
000A9E67 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A9E73 E1FF                       	smpsAlterNote       $FF
000A9E75 B810                       	dc.b	nG4, $10
000A9E77 E100                       	smpsAlterNote       $00
000A9E79 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A9E7E E1FF                       	smpsAlterNote       $FF
000A9E80 B8                         	dc.b	nG4
000A9E81 E100                       	smpsAlterNote       $00
000A9E83 B610                       	dc.b	nF4, $10
000A9E85 E1FF                       	smpsAlterNote       $FF
000A9E87 B850                       	dc.b	nG4, $50
000A9E89 E100                       	smpsAlterNote       $00
000A9E8B B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A9E93 E1FF                       	smpsAlterNote       $FF
000A9E95 AC08                       	dc.b	nG3, $08
000A9E97 E100                       	smpsAlterNote       $00
000A9E99 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A9E9E E1FF                       	smpsAlterNote       $FF
000A9EA0 B850                       	dc.b	nG4, $50
000A9EA2 E100                       	smpsAlterNote       $00
000A9EA4 BB08                       	dc.b	nBb4, $08
000A9EA6 E1FF                       	smpsAlterNote       $FF
000A9EA8 B8                         	dc.b	nG4
000A9EA9 E100                       	smpsAlterNote       $00
000A9EAB BDBB B6                    	dc.b	nC5, nBb4, nF4
000A9EAE E1FF                       	smpsAlterNote       $FF
000A9EB0 B810 08                    	dc.b	nG4, $10, $08
000A9EB3 E100                       	smpsAlterNote       $00
000A9EB5 B6                         	dc.b	nF4
000A9EB6 E1FF                       	smpsAlterNote       $FF
000A9EB8 B880                       	dc.b	nG4, nRst
000A9EBA E100                       	smpsAlterNote       $00
000A9EBC BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A9EBF E1FF                       	smpsAlterNote       $FF
000A9EC1 B810                       	dc.b	nG4, $10
000A9EC3 E100                       	smpsAlterNote       $00
000A9EC5 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A9ECC E1FF                       	smpsAlterNote       $FF
000A9ECE B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A9EDC E606                       	smpsAlterVol        $06
000A9EDE F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A9EE3 E100                       	smpsAlterNote       $00
000A9EE5                            
000A9EE5                            GentleBreeze_Loop10:
000A9EE5 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A9EE9 E1FF                       	smpsAlterNote       $FF
000A9EEB C4                         	dc.b	nG5
000A9EEC E100                       	smpsAlterNote       $00
000A9EEE C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9EF3 E608                       	smpsAlterVol        $08
000A9EF5 C080 08                    	dc.b	nEb5, nRst, $08
000A9EF8 E6F8                       	smpsAlterVol        $F8
000A9EFA C7                         	dc.b	nBb5
000A9EFB E1FF                       	smpsAlterNote       $FF
000A9EFD C4                         	dc.b	nG5
000A9EFE E100                       	smpsAlterNote       $00
000A9F00 C0BB                       	dc.b	nEb5, nBb4
000A9F02 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A9F07 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A9F0A E1FF                       	smpsAlterNote       $FF
000A9F0C C4                         	dc.b	nG5
000A9F0D E100                       	smpsAlterNote       $00
000A9F0F C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9F14 E608                       	smpsAlterVol        $08
000A9F16 C080 08                    	dc.b	nEb5, nRst, $08
000A9F19 E6F8                       	smpsAlterVol        $F8
000A9F1B E1FF                       	smpsAlterNote       $FF
000A9F1D C4                         	dc.b	nG5
000A9F1E E100                       	smpsAlterNote       $00
000A9F20 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A9F27 E1FF                       	smpsAlterNote       $FF
000A9F29 C4                         	dc.b	nG5
000A9F2A E100                       	smpsAlterNote       $00
000A9F2C C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A9F31 E1FF                       	smpsAlterNote       $FF
000A9F33 C4                         	dc.b	nG5
000A9F34 E100                       	smpsAlterNote       $00
000A9F36 C7                         	dc.b	nBb5
000A9F37 E1FF                       	smpsAlterNote       $FF
000A9F39 C4                         	dc.b	nG5
000A9F3A E100                       	smpsAlterNote       $00
000A9F3C C2C0 01                    	dc.b	nF5, nEb5, $01
000A9F3F E0C0                       	smpsPan             panCenter, $00
000A9F41 F1                         	smpsModOn
000A9F42 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A9F45                            
000A9F45                            ; FM4 Data
000A9F45                            GentleBreeze_FM4:
000A9F47 E0C0                       	smpsPan             panCenter, $00
000A9F49 80                         	dc.b	nRst
000A9F4A                            
000A9F4A                            GentleBreeze_Loop0D:
000A9F4A 7F                         	dc.b	$7F
000A9F4B F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A9F50 77                         	dc.b	$77
000A9F53 E609                       	smpsAlterVol        $09
000A9F55 C001                       	dc.b	nEb5, $01
000A9F57                            
000A9F57                            GentleBreeze_Jump02:
000A9F57 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A9F5C E607                       	smpsAlterVol        $07
000A9F5E E1FF                       	smpsAlterNote       $FF
000A9F60 C450                       	dc.b	nG5, $50
000A9F62 E100                       	smpsAlterNote       $00
000A9F64 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A9F70 E1FF                       	smpsAlterNote       $FF
000A9F72 C410                       	dc.b	nG5, $10
000A9F74 E100                       	smpsAlterNote       $00
000A9F76 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A9F7B E1FF                       	smpsAlterNote       $FF
000A9F7D C4                         	dc.b	nG5
000A9F7E E100                       	smpsAlterNote       $00
000A9F80 C210                       	dc.b	nF5, $10
000A9F82 E1FF                       	smpsAlterNote       $FF
000A9F84 C450                       	dc.b	nG5, $50
000A9F86 E100                       	smpsAlterNote       $00
000A9F88 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A9F90 E1FF                       	smpsAlterNote       $FF
000A9F92 B808                       	dc.b	nG4, $08
000A9F94 E100                       	smpsAlterNote       $00
000A9F96 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A9F9B E1FF                       	smpsAlterNote       $FF
000A9F9D C450                       	dc.b	nG5, $50
000A9F9F E100                       	smpsAlterNote       $00
000A9FA1 C708                       	dc.b	nBb5, $08
000A9FA3 E1FF                       	smpsAlterNote       $FF
000A9FA5 C4                         	dc.b	nG5
000A9FA6 E100                       	smpsAlterNote       $00
000A9FA8 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A9FAB E1FF                       	smpsAlterNote       $FF
000A9FAD C410 08                    	dc.b	nG5, $10, $08
000A9FB0 E100                       	smpsAlterNote       $00
000A9FB2 C2                         	dc.b	nF5
000A9FB3 E1FF                       	smpsAlterNote       $FF
000A9FB5 C480                       	dc.b	nG5, nRst
000A9FB7 E100                       	smpsAlterNote       $00
000A9FB9 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A9FBC E1FF                       	smpsAlterNote       $FF
000A9FBE C410                       	dc.b	nG5, $10
000A9FC0 E100                       	smpsAlterNote       $00
000A9FC2 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A9FC9 E1FF                       	smpsAlterNote       $FF
000A9FCB C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A9FD3                            
000A9FD3                            GentleBreeze_Loop0E:
000A9FD3 7F                         	dc.b	$7F
000A9FD4 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A9FD9 77                         	dc.b	$77
000A9FDA E100                       	smpsAlterNote       $00
000A9FDC C001                       	dc.b	nEb5, $01
000A9FDE E6F9                       	smpsAlterVol        $F9
000A9FE0 E0C0                       	smpsPan             panCenter, $00
000A9FE2 E100                       	smpsAlterNote       $00
000A9FE4 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A9FE7                            
000A9FE7                            ; FM5 Data
000A9FE7                            GentleBreeze_FM5:
000A9FE9 E0C0                       	smpsPan             panCenter, $00
000A9FEB A5                         	dc.b	nC3
000A9FEC                            
000A9FEC                            GentleBreeze_Loop06:
000A9FEC 10                         	dc.b	$10
000A9FED E607                       	smpsAlterVol        $07
000A9FEF A5                         	dc.b	nC3
000A9FF0 E6F9                       	smpsAlterVol        $F9
000A9FF2 08                         	dc.b	$08
000A9FF3 E607                       	smpsAlterVol        $07
000A9FF5 A5                         	dc.b	nC3
000A9FF6 E608                       	smpsAlterVol        $08
000A9FF8 A5                         	dc.b	nC3
000A9FF9 E6F1                       	smpsAlterVol        $F1
000A9FFB 18                         	dc.b	$18
000A9FFC E607                       	smpsAlterVol        $07
000A9FFE 10                         	dc.b	$10
000A9FFF E608                       	smpsAlterVol        $08
000AA001 A5                         	dc.b	nC3
000AA002 E6F1                       	smpsAlterVol        $F1
000AA004 A5                         	dc.b	nC3
000AA005 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000AA00A A5                         	dc.b	nC3
000AA00B                            
000AA00B                            GentleBreeze_Loop07:
000AA00B E607                       	smpsAlterVol        $07
000AA00D A5                         	dc.b	nC3
000AA00E E6F9                       	smpsAlterVol        $F9
000AA010 08                         	dc.b	$08
000AA011 E607                       	smpsAlterVol        $07
000AA013 A5                         	dc.b	nC3
000AA014 E608                       	smpsAlterVol        $08
000AA016 A5                         	dc.b	nC3
000AA017 E6F1                       	smpsAlterVol        $F1
000AA019 10                         	dc.b	$10
000AA01A F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000AA01F                            
000AA01F                            GentleBreeze_Loop08:
000AA01F A5                         	dc.b	nC3
000AA020 E607                       	smpsAlterVol        $07
000AA022 A5                         	dc.b	nC3
000AA023 E6F9                       	smpsAlterVol        $F9
000AA025 08                         	dc.b	$08
000AA026 E607                       	smpsAlterVol        $07
000AA028 A5                         	dc.b	nC3
000AA029 E608                       	smpsAlterVol        $08
000AA02B A5                         	dc.b	nC3
000AA02C E6F1                       	smpsAlterVol        $F1
000AA02E 18                         	dc.b	$18
000AA02F E607                       	smpsAlterVol        $07
000AA031 10                         	dc.b	$10
000AA032 E608                       	smpsAlterVol        $08
000AA034 A5                         	dc.b	nC3
000AA035 E6F1                       	smpsAlterVol        $F1
000AA037 A5                         	dc.b	nC3
000AA038 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000AA03D A5                         	dc.b	nC3
000AA03E E607                       	smpsAlterVol        $07
000AA040 A5                         	dc.b	nC3
000AA041 E6F9                       	smpsAlterVol        $F9
000AA043 08                         	dc.b	$08
000AA044 E607                       	smpsAlterVol        $07
000AA046 A5                         	dc.b	nC3
000AA047 E608                       	smpsAlterVol        $08
000AA049 A5                         	dc.b	nC3
000AA04A E6F1                       	smpsAlterVol        $F1
000AA04C 10                         	dc.b	$10
000AA04D E607                       	smpsAlterVol        $07
000AA04F A5                         	dc.b	nC3
000AA050 E6F9                       	smpsAlterVol        $F9
000AA052 08                         	dc.b	$08
000AA053 E607                       	smpsAlterVol        $07
000AA055 A5                         	dc.b	nC3
000AA056 E608                       	smpsAlterVol        $08
000AA058 A5                         	dc.b	nC3
000AA059 E6F1                       	smpsAlterVol        $F1
000AA05B 01                         	dc.b	$01
000AA05C                            
000AA05C                            GentleBreeze_Jump01:
000AA05C E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000AA05F E607                       	smpsAlterVol        $07
000AA061                            
000AA061                            GentleBreeze_Loop09:
000AA061 10                         	dc.b	$10
000AA062 E608                       	smpsAlterVol        $08
000AA064 A5                         	dc.b	nC3
000AA065 E6F1                       	smpsAlterVol        $F1
000AA067 08                         	dc.b	$08
000AA068 E60F                       	smpsAlterVol        $0F
000AA06A 18                         	dc.b	$18
000AA06B E6F8                       	smpsAlterVol        $F8
000AA06D F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000AA072 10                         	dc.b	$10
000AA073 E608                       	smpsAlterVol        $08
000AA075 A5                         	dc.b	nC3
000AA076 E6F1                       	smpsAlterVol        $F1
000AA078 08                         	dc.b	$08
000AA079 E60F                       	smpsAlterVol        $0F
000AA07B 18                         	dc.b	$18
000AA07C E6F1                       	smpsAlterVol        $F1
000AA07E                            
000AA07E                            GentleBreeze_Loop0A:
000AA07E 10                         	dc.b	$10
000AA07F E607                       	smpsAlterVol        $07
000AA081 A5                         	dc.b	nC3
000AA082 E6F9                       	smpsAlterVol        $F9
000AA084 08                         	dc.b	$08
000AA085 E607                       	smpsAlterVol        $07
000AA087 A5                         	dc.b	nC3
000AA088 E608                       	smpsAlterVol        $08
000AA08A A5                         	dc.b	nC3
000AA08B E6F1                       	smpsAlterVol        $F1
000AA08D 18                         	dc.b	$18
000AA08E E607                       	smpsAlterVol        $07
000AA090 10                         	dc.b	$10
000AA091 E608                       	smpsAlterVol        $08
000AA093 A5                         	dc.b	nC3
000AA094 E6F1                       	smpsAlterVol        $F1
000AA096 A5                         	dc.b	nC3
000AA097 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000AA09C A5                         	dc.b	nC3
000AA09D                            
000AA09D                            GentleBreeze_Loop0B:
000AA09D E607                       	smpsAlterVol        $07
000AA09F A5                         	dc.b	nC3
000AA0A0 E6F9                       	smpsAlterVol        $F9
000AA0A2 08                         	dc.b	$08
000AA0A3 E607                       	smpsAlterVol        $07
000AA0A5 A5                         	dc.b	nC3
000AA0A6 E608                       	smpsAlterVol        $08
000AA0A8 A5                         	dc.b	nC3
000AA0A9 E6F1                       	smpsAlterVol        $F1
000AA0AB 10                         	dc.b	$10
000AA0AC F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000AA0B1                            
000AA0B1                            GentleBreeze_Loop0C:
000AA0B1 A5                         	dc.b	nC3
000AA0B2 E607                       	smpsAlterVol        $07
000AA0B4 A5                         	dc.b	nC3
000AA0B5 E6F9                       	smpsAlterVol        $F9
000AA0B7 08                         	dc.b	$08
000AA0B8 E607                       	smpsAlterVol        $07
000AA0BA A5                         	dc.b	nC3
000AA0BB E608                       	smpsAlterVol        $08
000AA0BD A5                         	dc.b	nC3
000AA0BE E6F1                       	smpsAlterVol        $F1
000AA0C0 18                         	dc.b	$18
000AA0C1 E607                       	smpsAlterVol        $07
000AA0C3 10                         	dc.b	$10
000AA0C4 E608                       	smpsAlterVol        $08
000AA0C6 A5                         	dc.b	nC3
000AA0C7 E6F1                       	smpsAlterVol        $F1
000AA0C9 A5                         	dc.b	nC3
000AA0CA F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000AA0CF A5                         	dc.b	nC3
000AA0D0 E607                       	smpsAlterVol        $07
000AA0D2 A5                         	dc.b	nC3
000AA0D3 E6F9                       	smpsAlterVol        $F9
000AA0D5 08                         	dc.b	$08
000AA0D6 E607                       	smpsAlterVol        $07
000AA0D8 A5                         	dc.b	nC3
000AA0D9 E608                       	smpsAlterVol        $08
000AA0DB A5                         	dc.b	nC3
000AA0DC E6F1                       	smpsAlterVol        $F1
000AA0DE 10                         	dc.b	$10
000AA0DF E607                       	smpsAlterVol        $07
000AA0E1 A5                         	dc.b	nC3
000AA0E2 E6F9                       	smpsAlterVol        $F9
000AA0E4 08                         	dc.b	$08
000AA0E5 E607                       	smpsAlterVol        $07
000AA0E7 A5                         	dc.b	nC3
000AA0E8 E608                       	smpsAlterVol        $08
000AA0EA A5                         	dc.b	nC3
000AA0EB E6F1                       	smpsAlterVol        $F1
000AA0ED 01                         	dc.b	$01
000AA0EE E0C0                       	smpsPan             panCenter, $00
000AA0F0 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000AA0F3                            
000AA0F3                            ; DAC Data
000AA0F3                            GentleBreeze_DAC:
000AA0F3 81                         	dc.b	dKick
000AA0F4                            
000AA0F4                            GentleBreeze_Loop00:
000AA0F4 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000AA0FA F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000AA0FF 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000AA10A                            
000AA10A                            GentleBreeze_Loop01:
000AA10A 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000AA110 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000AA115 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000AA11F                            
000AA11F                            GentleBreeze_Jump00:
000AA11F 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000AA123                            
000AA123                            GentleBreeze_Loop02:
000AA123 81                         	dc.b	dKick
000AA124                            
000AA124                            GentleBreeze_Loop03:
000AA124 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000AA130 088A                       	dc.b	$08, dLowTimpani
000AA132 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000AA137 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000AA143 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000AA148 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000AA14D                            
000AA14D                            GentleBreeze_Loop04:
000AA14D 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000AA153 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000AA158 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000AA163                            
000AA163                            GentleBreeze_Loop05:
000AA163 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000AA169 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000AA16E 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000AA178 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000AA17B                            
000AA17B                            ; PSG 1 Data
000AA17B                            GentleBreeze_PSG1:
000AA17B 80                         	dc.b	nRst
000AA17C                            
000AA17C                            GentleBreeze_LoopPSG02:
000AA17C 7F                         	dc.b	$7F
000AA17D F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000AA182 08                         	dc.b	$08
000AA183 EC04                       	smpsPSGAlterVol     $04
000AA185                            
000AA185                            GentleBreeze_JumpPSG01:
000AA185 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000AA191 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000AA199                            
000AA199                            GentleBreeze_LoopPSG03:
000AA199 7F                         	dc.b	$7F
000AA19A F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000AA19F 08A3 01                    	dc.b	$08, nBb2, $01
000AA1A2 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000AA1A5                            
000AA1A5                            ; PSG2 Data
000AA1A5                            GentleBreeze_PSG2:
000AA1A5 80                         	dc.b	nRst
000AA1A6                            
000AA1A6                            GentleBreeze_LoopPSG00:
000AA1A6 7F                         	dc.b	$7F
000AA1A7 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000AA1AC 08                         	dc.b	$08
000AA1AD EC04                       	smpsPSGAlterVol     $04
000AA1AF                            
000AA1AF                            GentleBreeze_JumpPSG00:
000AA1AF A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000AA1BB A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000AA1C3                            
000AA1C3                            GentleBreeze_LoopPSG01:
000AA1C3 7F                         	dc.b	$7F
000AA1C4 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000AA1C9 08A8 01                    	dc.b	$08, nEb3, $01
000AA1CC F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000AA1CF                            
000AA1CF                            GentleBreeze_Voices:
000AA1CF                            ;	Voice $00
000AA1CF                            ;	$0C
000AA1CF                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000AA1CF                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000AA1CF                            	smpsVcAlgorithm     $04
000AA1CF                            	smpsVcFeedback      $01
000AA1CF                            	smpsVcUnusedBits    $00
000AA1CF                            	smpsVcDetune        $07, $02, $07, $02
000AA1CF                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000AA1CF                            	smpsVcRateScale     $00, $00, $00, $00
000AA1CF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA1CF                            	smpsVcAmpMod        $00, $00, $00, $00
000AA1CF                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000AA1CF                            	smpsVcDecayRate2    $01, $00, $00, $00
000AA1CF                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000AA1CF                            	smpsVcReleaseRate   $09, $01, $04, $03
000AA1CF 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000AA1E8                            
000AA1E8                            ;	Voice $01
000AA1E8                            ;	$38
000AA1E8                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000AA1E8                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000AA1E8                            	smpsVcAlgorithm     $00
000AA1E8                            	smpsVcFeedback      $07
000AA1E8                            	smpsVcUnusedBits    $00
000AA1E8                            	smpsVcDetune        $03, $07, $01, $05
000AA1E8                            	smpsVcCoarseFreq    $00, $00, $07, $04
000AA1E8                            	smpsVcRateScale     $00, $02, $00, $02
000AA1E8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA1E8                            	smpsVcAmpMod        $00, $00, $00, $00
000AA1E8                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000AA1E8                            	smpsVcDecayRate2    $00, $00, $10, $00
000AA1E8                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA1E8                            	smpsVcReleaseRate   $08, $05, $05, $05
000AA1E8 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000AA201                            
000AA201                            ;	Voice $02
000AA201                            ;	$00
000AA201                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000AA201                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000AA201                            	smpsVcAlgorithm     $00
000AA201                            	smpsVcFeedback      $00
000AA201                            	smpsVcUnusedBits    $00
000AA201                            	smpsVcDetune        $00, $00, $00, $00
000AA201                            	smpsVcCoarseFreq    $00, $00, $00, $00
000AA201                            	smpsVcRateScale     $00, $00, $00, $00
000AA201                            	smpsVcAttackRate    $00, $00, $00, $00
000AA201                            	smpsVcAmpMod        $00, $00, $00, $00
000AA201                            	smpsVcDecayRate1    $00, $00, $00, $00
000AA201                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA201                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000AA201                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AA201 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA21A                            
000AA21A                            ;	Voice $03
000AA21A                            ;	$36
000AA21A                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000AA21A                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000AA21A                            	smpsVcAlgorithm     $06
000AA21A                            	smpsVcFeedback      $06
000AA21A                            	smpsVcUnusedBits    $00
000AA21A                            	smpsVcDetune        $00, $00, $00, $00
000AA21A                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000AA21A                            	smpsVcRateScale     $00, $00, $00, $00
000AA21A                            	smpsVcAttackRate    $1F, $00, $18, $16
000AA21A                            	smpsVcAmpMod        $00, $00, $00, $00
000AA21A                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000AA21A                            	smpsVcDecayRate2    $00, $00, $12, $00
000AA21A                            	smpsVcDecayLevel    $04, $04, $02, $00
000AA21A                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000AA21A 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000AA233                            
000AA233                            ;	Voice $04
000AA233                            ;	$07
000AA233                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000AA233                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000AA233                            	smpsVcAlgorithm     $07
000AA233                            	smpsVcFeedback      $00
000AA233                            	smpsVcUnusedBits    $00
000AA233                            	smpsVcDetune        $07, $06, $05, $00
000AA233                            	smpsVcCoarseFreq    $05, $04, $03, $05
000AA233                            	smpsVcRateScale     $00, $01, $01, $01
000AA233                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000AA233                            	smpsVcAmpMod        $00, $00, $00, $00
000AA233                            	smpsVcDecayRate1    $17, $17, $17, $17
000AA233                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA233                            	smpsVcDecayLevel    $02, $02, $02, $02
000AA233                            	smpsVcReleaseRate   $06, $06, $06, $06
000AA233 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA24C                            
000AA24C                            ;	Voice $05
000AA24C                            ;	$3C
000AA24C                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000AA24C                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000AA24C                            	smpsVcAlgorithm     $04
000AA24C                            	smpsVcFeedback      $07
000AA24C                            	smpsVcUnusedBits    $00
000AA24C                            	smpsVcDetune        $06, $06, $02, $02
000AA24C                            	smpsVcCoarseFreq    $01, $03, $01, $01
000AA24C                            	smpsVcRateScale     $00, $00, $00, $00
000AA24C                            	smpsVcAttackRate    $0E, $14, $10, $13
000AA24C                            	smpsVcAmpMod        $00, $00, $00, $00
000AA24C                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000AA24C                            	smpsVcDecayRate2    $04, $04, $04, $04
000AA24C                            	smpsVcDecayLevel    $02, $01, $01, $01
000AA24C                            	smpsVcReleaseRate   $07, $07, $07, $07
000AA24C 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000AA265                            
000AA265                            
000AA266 00                         		even
000AA266                            ; ---------------------------------------------------------------------------
000AA266                            ; Sound	effect pointers
000AA266                            ; ---------------------------------------------------------------------------
000AA266 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000AA272 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000AA27E 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000AA28A 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000AA296 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000AA2A2 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000AA2AE 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000AA2BA 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000AA2C6 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000AA2D2 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000AA2DE 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000AA2EA 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000AA2F6 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000AA302 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000AA30E 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000AA31A 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000AA326 0000 0000                  SoundD0Index:	dc.l SoundD0
000AA32A                            SoundA0:	include	sound\jump.asm
000AA32A                            jump_Header:
000AA32A =00000001                  smpsHeaderStartSong = 1
000AA32A 0000                       	smpsHeaderVoice     jump_Voices
000AA32C 01                         	smpsHeaderTempoSFX  $01
000AA32D 01                         	smpsHeaderChanSFX   $01
000AA32E                            
000AA33A                            
000AA33A                            ; FM4 Data
000AA33A                            jump_FM4:
000AA33C E000                       	smpsPan             panNone, $00
000AA33E E607                       	smpsAlterVol        $07
000AA340 E0C0                       	smpsPan             panCenter, $00
000AA342 9903 B1                    	dc.b	nC2, $03, nC4
000AA345 E607                       	smpsAlterVol        $07
000AA347 E040                       	smpsPan             panRight, $00
000AA349 99B1                       	dc.b	nC2, nC4
000AA34B E60A                       	smpsAlterVol        $0A
000AA34D E080                       	smpsPan             panLeft, $00
000AA34F 99B1                       	dc.b	nC2, nC4
000AA351 E603                       	smpsAlterVol        $03
000AA353 E0C0                       	smpsPan             panCenter, $00
000AA355 99B1                       	dc.b	nC2, nC4
000AA357 E000                       	smpsPan             panNone, $00
000AA359 803D                       	dc.b	nRst, $3D
000AA35B F2                         	smpsStop
000AA35C                            
000AA35C                            ; PSG3 Data
000AA35C                            jump_PSG3:
000AA35C F3E7                       	smpsPSGform         $E7
000AA35E 8056                       	dc.b	nRst, $56
000AA360 F2                         	smpsStop
000AA361                            
000AA361                            jump_Voices:
000AA361                            ;	Voice $00
000AA361                            ;	$3C
000AA361                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000AA361                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000AA361                            	smpsVcAlgorithm     $04
000AA361                            	smpsVcFeedback      $07
000AA361                            	smpsVcUnusedBits    $00
000AA361                            	smpsVcDetune        $00, $00, $00, $00
000AA361                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000AA361                            	smpsVcRateScale     $00, $00, $00, $00
000AA361                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA361                            	smpsVcAmpMod        $00, $00, $00, $00
000AA361                            	smpsVcDecayRate1    $0E, $14, $12, $00
000AA361                            	smpsVcDecayRate2    $11, $00, $11, $00
000AA361                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000AA361                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AA361 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA37A                            
000AA37A                            
000AA37A                            		even
000AA37A                            SoundA1:	incbin	sound\soundA1.bin
000AA3A4                            		even
000AA3A4                            SoundA2:	incbin	sound\soundA2.bin
000AA3C4                            		even
000AA3C4                            SoundA3:	incbin	sound\soundA3.bin
000AA3F6                            		even
000AA3F6                            SoundA4:	incbin	sound\soundA4.bin
000AA42C                            		even
000AA42C                            SoundA5:	include	sound\fart.asm
000AA42C                            Fart_Header:
000AA42C =00000001                  smpsHeaderStartSong = 1
000AA42C 0000                       	smpsHeaderVoice     Fart_Voices
000AA42E 01                         	smpsHeaderTempoSFX  $01
000AA42F 04                         	smpsHeaderChanSFX   $04
000AA430                            
000AA448                            
000AA448                            Fart_FM3:
000AA44A E607                       	smpsAlterVol        $07
000AA44C E0C0                       	smpsPan             panCenter, $00
000AA44E F000 0210 03               	smpsModSet          $00, $02, $10, $03
000AA453 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000AA456 E1FE                       	smpsAlterNote       $FE
000AA458 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000AA45B E100                       	smpsAlterNote       $00
000AA45D A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000AA462 F2                         	smpsStop
000AA463                            
000AA463                            ; FM4 Data
000AA463                            Fart_FM4:
000AA465 E0C0                       	smpsPan             panCenter, $00
000AA467 8006                       	dc.b	nRst, $06
000AA46B E616                       	smpsAlterVol        $16
000AA46D E080                       	smpsPan             panLeft, $00
000AA46F F000 0210 03               	smpsModSet          $00, $02, $10, $03
000AA474 A212                       	dc.b	nA2, $12
000AA476 E60A                       	smpsAlterVol        $0A
000AA478 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000AA47B E603                       	smpsAlterVol        $03
000AA47D E7A2                       	dc.b	smpsNoAttack, nA2
000AA47F E603                       	smpsAlterVol        $03
000AA481 E7A2                       	dc.b	smpsNoAttack, nA2
000AA483 E604                       	smpsAlterVol        $04
000AA485 E7A2                       	dc.b	smpsNoAttack, nA2
000AA487 E606                       	smpsAlterVol        $06
000AA489 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000AA48C E610                       	smpsAlterVol        $10
000AA48E E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000AA491 E610                       	smpsAlterVol        $10
000AA493 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000AA498 F2                         	smpsStop
000AA499                            
000AA499                            ; FM5 Data
000AA499                            Fart_FM5:
000AA49B E0C0                       	smpsPan             panCenter, $00
000AA49D 8009                       	dc.b	nRst, $09
000AA4A1 E616                       	smpsAlterVol        $16
000AA4A3 E040                       	smpsPan             panRight, $00
000AA4A5 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000AA4AA A215                       	dc.b	nA2, $15
000AA4AC E60A                       	smpsAlterVol        $0A
000AA4AE E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000AA4B1 E603                       	smpsAlterVol        $03
000AA4B3 E7A2                       	dc.b	smpsNoAttack, nA2
000AA4B5 E603                       	smpsAlterVol        $03
000AA4B7 E7A2                       	dc.b	smpsNoAttack, nA2
000AA4B9 E604                       	smpsAlterVol        $04
000AA4BB E7A2                       	dc.b	smpsNoAttack, nA2
000AA4BD E606                       	smpsAlterVol        $06
000AA4BF E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000AA4C2 E610                       	smpsAlterVol        $10
000AA4C4 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000AA4C7 E610                       	smpsAlterVol        $10
000AA4C9 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000AA4CE F2                         	smpsStop
000AA4CF                            
000AA4CF                            ; PSG3 Data
000AA4CF                            Fart_PSG3:
000AA4CF F2                         	smpsStop
000AA4D0                            
000AA4D0                            ; FM Voices
000AA4D0                            Fart_Voices:
000AA4D0                            ;	Voice $00
000AA4D0                            ;	$39
000AA4D0                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000AA4D0                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000AA4D0                            	smpsVcAlgorithm     $01
000AA4D0                            	smpsVcFeedback      $07
000AA4D0                            	smpsVcUnusedBits    $00
000AA4D0                            	smpsVcDetune        $00, $07, $03, $07
000AA4D0                            	smpsVcCoarseFreq    $01, $01, $02, $00
000AA4D0                            	smpsVcRateScale     $00, $03, $03, $03
000AA4D0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA4D0                            	smpsVcAmpMod        $00, $00, $00, $00
000AA4D0                            	smpsVcDecayRate1    $00, $00, $00, $04
000AA4D0                            	smpsVcDecayRate2    $00, $00, $16, $1F
000AA4D0                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000AA4D0                            	smpsVcReleaseRate   $0A, $09, $00, $00
000AA4D0 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000AA4E9                            
000AA4E9                            ;	Voice $01
000AA4E9                            ;	$00
000AA4E9                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000AA4E9                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000AA4E9                            	smpsVcAlgorithm     $00
000AA4E9                            	smpsVcFeedback      $00
000AA4E9                            	smpsVcUnusedBits    $00
000AA4E9                            	smpsVcDetune        $00, $00, $00, $00
000AA4E9                            	smpsVcCoarseFreq    $00, $00, $00, $00
000AA4E9                            	smpsVcRateScale     $00, $00, $00, $00
000AA4E9                            	smpsVcAttackRate    $00, $00, $00, $00
000AA4E9                            	smpsVcAmpMod        $00, $00, $00, $00
000AA4E9                            	smpsVcDecayRate1    $00, $00, $00, $00
000AA4E9                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA4E9                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000AA4E9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AA4E9 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA4E9 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA502                            		even
000AA502                            SoundA6:	incbin	sound\soundA6.bin
000AA532                            		even
000AA532                            SoundA7:	incbin	sound\soundA7.bin
000AA562                            		even
000AA562                            SoundA8:	incbin	sound\soundA8.bin
000AA596                            		even
000AA596                            SoundA9:	incbin	sound\soundA9.bin
000AA5A8                            		even
000AA5A8                            SoundAA:	incbin	sound\soundAA.bin
000AA5EA                            		even
000AA5EA                            SoundAB:	incbin	sound\soundAB.bin
000AA60A                            		even
000AA60A                            SoundAC:	incbin	sound\soundAC.bin
000AA63E                            		even
000AA63E                            SoundAD:	incbin	sound\soundAD.bin
000AA674                            		even
000AA674                            SoundAE:	incbin	sound\soundAE.bin
000AA6BE                            		even
000AA6BE                            SoundAF:	incbin	sound\soundAF.bin
000AA6EC                            		even
000AA6EC                            SoundB0:	incbin	sound\soundB0.bin
000AA71E                            		even
000AA71E                            SoundB1:	incbin	sound\soundB1.bin
000AA74A                            		even
000AA74A                            SoundB2:	incbin	sound\soundB2.bin
000AA79A                            		even
000AA79A                            SoundB3:	incbin	sound\soundB3.bin
000AA7E4                            		even
000AA7E4                            SoundB4:	include	sound\soundB4.asm
000AA7E4                            SndB4_Bumper_Header:
000AA7E4 =00000001                  smpsHeaderStartSong = 1
000AA7E4 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000AA7E6 01                         	smpsHeaderTempoSFX  $01
000AA7E7 03                         	smpsHeaderChanSFX   $03
000AA7E8                            
000AA7FA                            
000AA7FA                            ; FM5 Data
000AA7FA                            SndB4_Bumper_FM5:
000AA7FC F600 00                    	smpsJump            SndB4_Bumper_Jump00
000AA7FF                            
000AA7FF                            ; FM4 Data
000AA7FF                            SndB4_Bumper_FM4:
000AA7FF F2                         	smpsStop
000AA800                            
000AA800                            SndB4_Bumper_Jump00:
000AA800 A020                       	dc.b	nG2, $20
000AA802 F2                         	smpsStop
000AA803                            
000AA803                            ; FM3 Data
000AA803                            SndB4_Bumper_FM3:
000AA803 F2                         	smpsStop
000AA804                            
000AA804                            SndB4_Bumper_Voices:
000AA804                            ;	Voice $00
000AA804                            ;	$32
000AA804                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000AA804                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000AA804                            	smpsVcAlgorithm     $02
000AA804                            	smpsVcFeedback      $06
000AA804                            	smpsVcUnusedBits    $00
000AA804                            	smpsVcDetune        $07, $07, $02, $00
000AA804                            	smpsVcCoarseFreq    $00, $00, $00, $04
000AA804                            	smpsVcRateScale     $00, $00, $00, $00
000AA804                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA804                            	smpsVcAmpMod        $00, $00, $00, $00
000AA804                            	smpsVcDecayRate1    $08, $00, $00, $09
000AA804                            	smpsVcDecayRate2    $0B, $00, $00, $09
000AA804                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA804                            	smpsVcReleaseRate   $0F, $00, $00, $00
000AA804 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA804 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA81E 00                         		even
000AA81E                            SoundB5:	incbin	sound\soundB5.bin
000AA83C 00                         		even
000AA83C                            SoundB6:	incbin	sound\soundB6.bin
000AA85A                            		even
000AA85A                            SoundB7:	incbin	sound\soundB7.bin
000AA896                            		even
000AA896                            SoundB8:	incbin	sound\soundB8.bin
000AA8B4                            		even
000AA8B4                            SoundB9:	incbin	sound\soundB9.bin
000AA918                            		even
000AA918                            SoundBA:	incbin	sound\soundBA.bin
000AA97C                            		even
000AA97C                            SoundBB:	incbin	sound\soundBB.bin
000AA9A8                            		even
000AA9A8                            SoundBC:	incbin	sound\soundBC.bin
000AA9EA                            		even
000AA9EA                            SoundBD:	incbin	sound\soundBD.bin
000AAA3E                            		even
000AAA3E                            SoundBE:	incbin	sound\soundBE.bin
000AAA78                            		even
000AAA78                            SoundBF:	incbin	sound\soundBF.bin
000AAAEA                            		even
000AAAEA                            SoundC0:	incbin	sound\soundC0.bin
000AAB18                            		even
000AAB18                            SoundC1:	incbin	sound\soundC1.bin
000AAB72                            		even
000AAB72                            SoundC2:	incbin	sound\soundC2.bin
000AAB9C                            		even
000AAB9C                            SoundC3:	incbin	sound\soundC3.bin
000AAC16                            		even
000AAC16                            SoundC4:	incbin	sound\soundC4.bin
000AAD14                            		even
000AAD14                            SoundC5:	incbin	sound\soundC5.bin
000AAD7C                            		even
000AAD7C                            SoundC6:	incbin	sound\soundC6.bin
000AADBE                            		even
000AADBE                            SoundC7:	incbin	sound\soundC7.bin
000AADEC                            		even
000AADEC                            SoundC8:	incbin	sound\soundC8.bin
000AADFE                            		even
000AADFE                            SoundC9:	incbin	sound\soundC9.bin
000AAE2C                            		even
000AAE2C                            SoundCA:	incbin	sound\soundCA.bin
000AAE5A                            		even
000AAE5A                            SoundCB:	incbin	sound\soundCB.bin
000AAEA6                            		even
000AAEA6                            SoundCC:	incbin	sound\C9.ssf
000AAED4                            		even
000AAED4                            SoundCD:	incbin	sound\soundCD.bin
000AAF00                            		even
000AAF00                            SoundCE:	incbin	sound\soundCE.bin
000AAF1E 00                         		even
000AAF1E                            SoundCF:	incbin	sound\soundCF.bin
000AAF56                            		even
000AAF56                            SoundD0:	incbin	sound\soundD0.bin
000AAF90                            		even
000AAF90                            SegaPCM:	incbin	sound\segapcm.bin
000C50E6                            SegaPCM_end:
000C50E6                            	even
000C50E6                            
000C50E6                            IdiotPCM:	incbin	sound\youare.bin
000CF1B7                            IdiotPCM_end:
000CF1B8 00                         	even
000CF1B8                            
000CF1B8                            Minecraft:	include	minecraft\code\main.asm
000CF1B8                            ; Minecraft: Very Legacy Console Edition
000CF1B8                            ; Main file
000CF1B8                            
000CF1B8                            ;	align	$20000
000CF1B8                            	opt	l.
000CF1B8                            	include	"minecraft\code\variables.asm"
000CF1B8                            ; Minecraft: Very Legacy Console Edition
000CF1B8                            ; Variable Definitions
000CF1B8                            
000CF1B8 =00000040                  MAP_HEIGHT	equ	64
000CF1B8 =00000100                  MAP_WIDTH	equ	256
000CF1B8                            
000CF1B8                            		rsset	$FF0000
000CF1B8 =00FF0000                  mcRAM		rs.b	0
000CF1B8 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000CF1B8 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000CF1B8                            
000CF1B8                            		rsset	$FFFF8000
000CF1B8 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000CF1B8 =FFFF8E80                  planeBuffer_End	rs.b	0
000CF1B8 =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000CF1B8                            
000CF1B8 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000CF1B8 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000CF1B8 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000CF1B8 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000CF1B8                            
000CF1B8                            		rsset	__rs&$FFFFFF
000CF1B8 =00FF8E88                  mcRAM_End	rs.b	0
000CF1B8 =00FF8E88                  mcRAM_End	rs.b	0
000CF1B8                            	include	"minecraft\code\macros.asm"
000CF1B8                            ; =========================================================================================================================================================
000CF1B8                            ; MegaDrive macros
000CF1B8                            ; =========================================================================================================================================================
000CF1B8                            clrRAM		macro	starta, enda
000CF1B8                            		local	endaddr
000CF1B8                            		if narg<2
000CF1B8                            endaddr			EQUS	"\starta\_End"
000CF1B8                            		else
000CF1B8                            endaddr			EQUS	"\enda"
000CF1B8                            		endif
000CF1B8                            
000CF1B8                            		moveq	#0,d0
000CF1B8                            
000CF1B8                            		if ((\starta)&$8000)=0
000CF1B8                            			lea	\starta,a1
000CF1B8                            		else
000CF1B8                            			lea	(\starta).w,a1
000CF1B8                            		endif
000CF1B8                            		if (\starta)&1
000CF1B8                            			move.b	d0,(a1)+
000CF1B8                            		endif
000CF1B8                            
000CF1B8                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000CF1B8                            .Clear\@:	move.l	d0,(a1)+
000CF1B8                            		dbf	d1,.Clear\@
000CF1B8                            
000CF1B8                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000CF1B8                            			move.w	d0,(a1)+
000CF1B8                            		endif
000CF1B8                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000CF1B8                            			move.b	d0,(a1)+
000CF1B8                            		endif
000CF1B8                            		endm
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; Disable interrupts
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; ARGUMENTS:
000CF1B8                            ;	Nothing
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; RETURNS:
000CF1B8                            ;	Nothing
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            intsOff		macros
000CF1B8                            		ori	#$700,sr
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; Enable interrupts
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; ARGUMENTS:
000CF1B8                            ;	Nothing
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; RETURNS:
000CF1B8                            ;	Nothing
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            intsOn		macros
000CF1B8                            		andi	#$F8FF,sr
000CF1B8                            
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; VDP command instruction
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; ARGUMENTS:
000CF1B8                            ;	addr	- Address in VDP memory
000CF1B8                            ;	type	- Type of VDP memory
000CF1B8                            ;	rwd	- VDP command
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; RETURNS:
000CF1B8                            ;	Nothing
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8 =00000021                  VRAM		EQU	%100001		; VRAM
000CF1B8 =0000002B                  CRAM		EQU	%101011		; CRAM
000CF1B8 =00000025                  VSRAM		EQU	%100101		; VSRAM
000CF1B8 =0000000C                  READ		EQU	%001100		; VDP read
000CF1B8 =00000007                  WRITE		EQU	%000111		; VDP write
000CF1B8 =00000027                  DMA		EQU	%100111		; VDP DMA
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000CF1B8                            		if narg=5
000CF1B8                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000CF1B8                            		elseif narg>=6
000CF1B8                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000CF1B8                            		else
000CF1B8                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000CF1B8                            		endif
000CF1B8                            		endm
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; VDP DMA from 68000 memory to VDP memory
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; ARGUMENTS:
000CF1B8                            ;	src	- Source address in 68000 memory
000CF1B8                            ;	dest	- Destination address in VDP memory
000CF1B8                            ;	len	- Length of data in bytes
000CF1B8                            ;	type	- Type of VDP memory
000CF1B8                            ;	a6.l	- VDP control port
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; RETURNS:
000CF1B8                            ;	Nothing
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            dma68k		macro	src, dest, len, type
000CF1B8                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000CF1B8                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000CF1B8                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000CF1B8                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000CF1B8                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000CF1B8                            		move.w	(sp)+,(a6)
000CF1B8                            		endm
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; Fill VRAM with byte
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; ARGUMENTS:
000CF1B8                            ;	byte	- Byte to fill VRAM with
000CF1B8                            ;	addr	- Address in VRAM
000CF1B8                            ;	len	- Length of fill in bytes
000CF1B8                            ;	a6.l	- VDP control port
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; RETURNS:
000CF1B8                            ;	Nothing
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            dmaFill		macro	byte, addr, len
000CF1B8                            		move.w	#$8F01,(a6)
000CF1B8                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CF1B8                            		move.w	#$9780,(a6)
000CF1B8                            		move.l	#$40000080|(((\addr)&$3FFF)<<16)|(((\addr)&$C000)>>14),(a6)
000CF1B8                            		move.w	#(\byte)<<8,-4(a6)
000CF1B8                            		waitDMA	(a6)
000CF1B8                            		move.w	#$8F02,(a6)
000CF1B8                            		endm
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; Copy a region of VRAM to a location in VRAM
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; ARGUMENTS:
000CF1B8                            ;	src	- Source address in VRAM
000CF1B8                            ;	dest	- Destination address in VRAM
000CF1B8                            ;	len	- Length of copy in bytes
000CF1B8                            ;	a6.l	- VDP control port
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            ; RETURNS:
000CF1B8                            ;	Nothing
000CF1B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CF1B8                            dmaCopy		macro	src, dest, len
000CF1B8                            		move.w	#$8F01,(a6)
000CF1B8                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CF1B8                            		move.l	#$96009500|(((\src)&$FF00)<<8)|((\src)&$FF),(a6)
000CF1B8                            		move.w	#$97C0,(a6)
000CF1B8                            		move.l	#$000000C0|(((\dest)&$3FFF)<<16)|(((\dest)&$C000)>>14),(a6)
000CF1B8                            		waitDMA	(a6)
000CF1B8                            		move.w	#$8F02,(a6)
000CF1B8                            		endm
000CF1B8                            		endm
000CF1B8                            
000CF1B8                            MC_Init:
000CF1B8 007C 0700                  		intsOff						; disable CPU interrupts
000CF1BC 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000CF1C4                            
000CF1C4 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000CF1CA 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000CF1CE                            
000CF1CE 3CBC 8230                  		move.w	#$8200+($C000>>10),(a6)			; set plane A address
000CF1D2 3CBC 8334                  		move.w	#$8300+($D000>>10),(a6)			; set plane W address
000CF1D6 3CBC 8407                  		move.w	#$8400+($E000>>13),(a6)			; set plane B address
000CF1DA 3CBC 857C                  		move.w	#$8500+($F800>>9),(a6)			; set sprite table address
000CF1DE                            		
000CF1DE 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
000CF1E2 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000CF1E6 3CBC 8D3F                  		move.w	#$8D00+($FC00>>10),(a6)			; set HScroll table address
000CF1EA 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CF1EE 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000CF1F2                            
000CF204 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000CF208                            
000CF208                            .waitVBlank:	
000CF208 44D6                       		move.w	(a6),ccr				; is v-blank active?
000CF20A 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000CF20C                            
000CF240                            
000CF240 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000CF244 027C F8FF                  		intsOn						; enable CPU interrupts
000CF248                            
000CF248 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CF24C 43F8 8000                  		lea	(planeBuffer).w,a1
000CF250 7E2E                       		moveq	#$2F-1,d7
000CF252                            
000CF252                            .loopLo:
000CF252 32D8                       		move.w	(a0)+,(a1)+
000CF254 51CF FFFC                  		dbf	d7,.loopLo
000CF258                            
000CF258 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CF25C 43F8 8080                  		lea	(planeBuffer+(64*2)).w,a1
000CF260 7E2E                       		moveq	#$2F-1,d7
000CF262                            
000CF262                            .loopHi:
000CF262 303C 8000                  		move.w	#$8000,d0
000CF266 8058                       		or.w	(a0)+,d0
000CF268 32C0                       		move.w	d0,(a1)+
000CF26A 51CF FFF6                  		dbf	d7,.loopHi
000CF26E                            
000CF26E 6000 FFFE                  		bra.w	*					; spin infinitely
000CF272                            
000CF272                            ; ===========================================================================
000CF272                            ; ---------------------------------------------------------------------------
000CF272                            ; Clear The Screen
000CF272                            ; ---------------------------------------------------------------------------
000CF272                            MC_ClearScreen:
000CF272 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000CF276                            
000CF276 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000CF27C 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CF280 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000CF286 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CF28C                            
000CF28C 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CF28E 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000CF290                            
000CF290 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000CF296 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CF29A 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000CF2A0 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CF2A6                            
000CF2A6 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CF2A8 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000CF2AA                            
000CF2AA 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000CF2B0 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CF2B4 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000CF2BA 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CF2C0                            
000CF2C0 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CF2C2 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000CF2C4                            
000CF2C4 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CF2C8 4E75                       		rts						; return
000CF2CA                            ; ---------------------------------------------------------------------------
000CF2CA                            
000CF2CA                            ; ===========================================================================
000CF2CA                            ; ---------------------------------------------------------------------------
000CF2CA                            ; VBlank Interrupt
000CF2CA                            ; ---------------------------------------------------------------------------
000CF2CA                            MC_VInt:
000CF2E4                            
000CF2E4 5278 8E80                  		addq.w	#1,(camXPosFG).w			; update scrolling
000CF2EE 3D78 8E80 FFFC             		move.w	(camXPosFG).w,-4(a6)			; ^
000CF2F4                            
000CF2F4                            
000CF2F4 4E73                       		rte						; return
000CF2F6                            ; ---------------------------------------------------------------------------
000CF2F6                            
000CF2F6                            block_entry	macro	tileID, palLine, priority
000CF2F6                            	if (narg<3)
000CF2F6                            		dc.w	(palLine<<13)|tileID
000CF2F6                            	else
000CF2F6                            		dc.w	$8000|(palLine<<13)|tileID
000CF2F6                            	endif
000CF2F6                            		endm
000CF2F6                            
000CF2F6                            MC_BlockRender:
000CF336                            
000CF354                            
000CF354                            ; ---------------------------------------------------------------------------
000CF354                            MC_Palette:
000CF354 0E86 08AE 068E 046C 0EE0+  	dc.w	$E86, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000CF374 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000CF394 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000CF3B4 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CF3D4                            ; ---------------------------------------------------------------------------
000CF3D4                            MC_Terrain:
000CF3D4                            	incbin	"minecraft\assets\bin\terrain.bin"
000CF854                            MC_Terrain_End:
000CF854                            ; ---------------------------------------------------------------------------
000CF854                            ; ---------------------------------------------------------------------------
000CF854                            ; end of 'ROM'
000CF854                            EndOfRom:
000CF854                            
000CF854                            
