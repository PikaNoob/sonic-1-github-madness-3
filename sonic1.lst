00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000326 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032C 2011                       		move.l	(a1),d0
0000032E 7200                       		moveq	#0,d1
00000330                            
00000330                            loc_32C:
00000330 D258                       		add.w	(a0)+,d1
00000332 B088                       		cmp.l	a0,d0
00000334 64FA                       		bcc.s	loc_32C
00000336 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033C B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033E 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
00000342 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000346 7E00                       		moveq	#0,d7
00000348 3C3C 007F                  		move.w	#$7F,d6
0000034C                            
0000034C                            loc_348:
0000034C 2CC7                       		move.l	d7,(a6)+
0000034E 51CE FFFC                  		dbf	d6,loc_348
00000352 1039 00A1 0001             		move.b	($A10001).l,d0
00000358 0200 00C0                  		andi.b	#$C0,d0
0000035C 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000360 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000368                            
00000368                            GameInit:
00000368 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036E 7E00                       		moveq	#0,d7
00000370 3C3C 3F7F                  		move.w	#$3F7F,d6
00000374                            
00000374                            GameClrRAM:
00000374 2CC7                       		move.l	d7,(a6)+
00000376 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000037A                            
0000037A 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000380 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
00000388                            
00000388 6100 0000                  		bsr.w	VDPSetupGame
0000038C 6100 0000                  		bsr.w	SoundDriverLoad
00000390 6100 0000                  		bsr.w	JoypadInit
00000394 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000039A                            
0000039A                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
0000039A                            
0000039A                            MainGameLoop:
0000039A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000039E 0240 003C                  		andi.w	#$3C,d0
000003A2 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003A6 60F2                       		bra.s	MainGameLoop
000003A8                            ; ===========================================================================
000003A8                            ; ---------------------------------------------------------------------------
000003A8                            ; Main game mode array
000003A8                            ; ---------------------------------------------------------------------------
000003A8                            
000003A8                            GameModeArray:
000003A8 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003AC                            ; ===========================================================================
000003AC 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003B0                            ; ===========================================================================
000003B0 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003B4                            ; ===========================================================================
000003B4 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003B8                            ; ===========================================================================
000003B8 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003BC                            ; ===========================================================================
000003BC 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003C0                            ; ===========================================================================
000003C0 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003C4                            ; ===========================================================================
000003C4 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003C8                            ; ===========================================================================
000003C8 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003CE                            ; ===========================================================================
000003CE                            
000003CE                            CheckSumError:
000003CE 6100 0000                  		bsr.w	VDPSetupGame
000003D2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003DC 7E3F                       		moveq	#$3F,d7
000003DE                            
000003DE                            CheckSum_Red:
000003DE 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003E6 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003EA                            
000003EA                            CheckSum_Loop:
000003EA 60FE                       		bra.s	CheckSum_Loop
000003EC                            ; ===========================================================================
000003EC                            
000003EC                            BusError:
000003EC 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003F2 6000                       		bra.s	loc_43A
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            AddressError:
000003F4 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_43A
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            IllegalInstr:
000003FC 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
00000402 54AF 0002                  		addq.l	#2,2(sp)
00000406 6000                       		bra.s	loc_462
00000408                            ; ===========================================================================
00000408                            
00000408                            ZeroDivide:
00000408 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            ChkInstr:
00000410 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            TrapvInstr:
00000418 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000041E 6000                       		bra.s	loc_462
00000420                            ; ===========================================================================
00000420                            
00000420                            PrivilegeViol:
00000420 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000426 6000                       		bra.s	loc_462
00000428                            ; ===========================================================================
00000428                            
00000428                            Trace:
00000428 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000042E 6000                       		bra.s	loc_462
00000430                            ; ===========================================================================
00000430                            
00000430                            Line1010Emu:
00000430 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000436 54AF 0002                  		addq.l	#2,2(sp)
0000043A 6000                       		bra.s	loc_462
0000043C                            ; ===========================================================================
0000043C                            
0000043C                            Line1111Emu:
0000043C 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000442 54AF 0002                  		addq.l	#2,2(sp)
00000446 6000                       		bra.s	loc_462
00000448                            ; ===========================================================================
00000448                            
00000448                            ErrorExcept:
00000448 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000044E 6000                       		bra.s	loc_462
00000450                            ; ===========================================================================
00000450                            
00000450                            loc_43A:
00000450 46FC 2700                  		move	#$2700,sr
00000454 544F                       		addq.w	#2,sp
00000456 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000045A 544F                       		addq.w	#2,sp
0000045C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000462 6100 0000                  		bsr.w	ShowErrorMsg
00000466 202F 0002                  		move.l	2(sp),d0
0000046A 6100 0000                  		bsr.w	sub_5BA
0000046E 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000472 6100 0000                  		bsr.w	sub_5BA
00000476 6000                       		bra.s	loc_478
00000478                            ; ===========================================================================
00000478                            
00000478                            loc_462:
00000478 46FC 2700                  		move	#$2700,sr
0000047C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000482 6100 0000                  		bsr.w	ShowErrorMsg
00000486 202F 0002                  		move.l	2(sp),d0
0000048A 6100 0000                  		bsr.w	sub_5BA
0000048E                            
0000048E                            loc_478:
0000048E 6100 0000                  		bsr.w	ErrorWaitForC
00000492 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000498 46FC 2300                  		move	#$2300,sr
0000049C 4E73                       		rte	
0000049E                            
0000049E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000049E                            
0000049E                            
0000049E                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000049E 4DF9 00C0 0000             		lea	($C00000).l,a6
000004A4 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004AE 41F9 0000 0000             		lea	(Art_Text).l,a0
000004B4 323C 027F                  		move.w	#$27F,d1
000004B8                            
000004B8                            Error_LoadGfx:
000004B8 3C98                       		move.w	(a0)+,(a6)
000004BA 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004BE 7000                       		moveq	#0,d0		; clear	d0
000004C0 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004C4 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004C8 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004CC 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004D6 7212                       		moveq	#$12,d1		; number of characters
000004D8                            
000004D8                            Error_LoopChars:
000004D8 7000                       		moveq	#0,d0
000004DA 1018                       		move.b	(a0)+,d0
000004DC 0640 0790                  		addi.w	#$790,d0
000004E0 3C80                       		move.w	d0,(a6)
000004E2 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004E6 4E75                       		rts	
000004E8                            ; End of function ShowErrorMsg
000004E8                            
000004E8                            ; ===========================================================================
000004E8 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004EC 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004F0 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004F4 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004F8 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004FC 0000                       		dc.w asc_5A6-ErrorText
000004FE 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000511 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000524 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000537 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000054A 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000055D 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000570 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000583 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000596 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005A9 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005BC 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005D0 00                         		even
000005D0                            
000005D0                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005D0                            
000005D0                            
000005D0                            sub_5BA:				; XREF: loc_43A; loc_462
000005D0 3CBC 07CA                  		move.w	#$7CA,(a6)
000005D4 7407                       		moveq	#7,d2
000005D6                            
000005D6                            loc_5C0:
000005D6 E998                       		rol.l	#4,d0
000005D8 6100                       		bsr.s	sub_5CA
000005DA 51CA FFFA                  		dbf	d2,loc_5C0
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5BA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            sub_5CA:				; XREF: sub_5BA
000005E0 3200                       		move.w	d0,d1
000005E2 0241 000F                  		andi.w	#$F,d1
000005E6 0C41 000A                  		cmpi.w	#$A,d1
000005EA 6500                       		bcs.s	loc_5D8
000005EC 5E41                       		addq.w	#7,d1
000005EE                            
000005EE                            loc_5D8:
000005EE 0641 07C0                  		addi.w	#$7C0,d1
000005F2 3C81                       		move.w	d1,(a6)
000005F4 4E75                       		rts	
000005F6                            ; End of function sub_5CA
000005F6                            
000005F6                            
000005F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005F6                            
000005F6                            
000005F6                            ErrorWaitForC:				; XREF: loc_478
000005F6 6100 0000                  		bsr.w	ReadJoypads
000005FA 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000600 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000604 4E75                       		rts	
00000606                            ; End of function ErrorWaitForC
00000606                            
00000606                            ; ===========================================================================
00000606                            
00000606                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D46                            Art_Text_end:		even
00000D46                            
00000D46                            ; ===========================================================================
00000D46                            ;VBlank
00000D46                            loc_B10:				; XREF: Vectors
00000D46 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D4A 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D4E 6700                       		beq.s	loc_B88
00000D50 3039 00C0 0004             		move.w	($C00004).l,d0
00000D56 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D60 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D68 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D6E 6700                       		beq.s	loc_B42
00000D70 303C 0700                  		move.w	#$700,d0
00000D74                            
00000D74                            loc_B3E:
00000D74 51C8 FFFE                  		dbf	d0,loc_B3E
00000D78                            
00000D78                            loc_B42:
00000D78 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D7C 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D82 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D88 0240 003E                  		andi.w	#$3E,d0
00000D8C 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D90 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D94                            
00000D94                            loc_B5E:				; XREF: loc_B88
00000D94 4EB9 0000 0000             		jsr	sub_71B4C
00000D9A                            
00000D9A                            loc_B64:				; XREF: loc_D50
00000D9A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D9E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000DA2 4E73                       		rte	
00000DA4                            ; ===========================================================================
00000DA4 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000DA8 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000DAC 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000DB0 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DB4 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DB8 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DBC 0000                       		dc.w loc_E72-off_B6E
00000DBE                            ; ===========================================================================
00000DBE                            
00000DBE                            loc_B88:				; XREF: loc_B10; off_B6E
00000DBE 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DC4 6700                       		beq.s	loc_B9A
00000DC6 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DCC 6600 FFC6                  		bne.w	loc_B5E
00000DD0                            
00000DD0                            loc_B9A:
00000DD0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DD6 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DDA 3039 00C0 0004             		move.w	($C00004).l,d0
00000DE0 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DE6 6700                       		beq.s	loc_BBA
00000DE8 303C 0700                  		move.w	#$700,d0
00000DEC                            
00000DEC                            loc_BB6:
00000DEC 51C8 FFFE                  		dbf	d0,loc_BB6
00000DF0                            
00000DF0                            loc_BBA:
00000DF0 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DF6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DFE                            
00000DFE                            loc_BC8:
00000DFE 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000E06 66F6                       		bne.s	loc_BC8
00000E08 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E0C 6600                       		bne.s	loc_BFE
00000E0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E14 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E1A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E20 3ABC 977F                  		move.w	#$977F,(a5)
00000E24 3ABC C000                  		move.w	#$C000,(a5)
00000E28 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E32 6000                       		bra.s	loc_C22
00000E34                            ; ===========================================================================
00000E34                            
00000E34                            loc_BFE:				; XREF: loc_BC8
00000E34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E3A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E40 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E46 3ABC 977F                  		move.w	#$977F,(a5)
00000E4A 3ABC C000                  		move.w	#$C000,(a5)
00000E4E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E58                            
00000E58                            loc_C22:				; XREF: loc_BC8
00000E58 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E5C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E64 6000 FF2E                  		bra.w	loc_B5E
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C32:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C                            
00000E6C                            loc_C36:				; XREF: off_B6E
00000E6C 4A78 F614                  		tst.w	($FFFFF614).w
00000E70 6700 0000                  		beq.w	locret_C42
00000E74 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E78                            
00000E78                            locret_C42:
00000E78 4E75                       		rts	
00000E7A                            ; ===========================================================================
00000E7A                            
00000E7A                            loc_C44:				; XREF: off_B6E
00000E7A 6100 0000                  		bsr.w	sub_106E
00000E7E 6100 0000                  		bsr.w	sub_6886
00000E82 6100 0000                  		bsr.w	sub_1642
00000E86 4A78 F614                  		tst.w	($FFFFF614).w
00000E8A 6700 0000                  		beq.w	locret_C5C
00000E8E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E92                            
00000E92                            locret_C5C:
00000E92 4E75                       		rts	
00000E94                            ; ===========================================================================
00000E94                            
00000E94                            loc_C5E:				; XREF: off_B6E
00000E94 6100 0000                  		bsr.w	sub_106E
00000E98 4E75                       		rts	
00000E9A                            ; ===========================================================================
00000E9A                            
00000E9A                            loc_C64:				; XREF: off_B6E
00000E9A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000EA0 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000EA4                            
00000EA4                            loc_C6E:				; XREF: off_B6E
00000EA4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000EAC                            
00000EAC                            loc_C76:
00000EAC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EB4 66F6                       		bne.s	loc_C76		; if not, branch
00000EB6 6100 0000                  		bsr.w	ReadJoypads
00000EBA 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EBE 6600                       		bne.s	loc_CB0
00000EC0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EC6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ECC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000ED2 3ABC 977F                  		move.w	#$977F,(a5)
00000ED6 3ABC C000                  		move.w	#$C000,(a5)
00000EDA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EE0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE4 6000                       		bra.s	loc_CD4
00000EE6                            ; ===========================================================================
00000EE6                            
00000EE6                            loc_CB0:				; XREF: loc_C76
00000EE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EEC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EF2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EF8 3ABC 977F                  		move.w	#$977F,(a5)
00000EFC 3ABC C000                  		move.w	#$C000,(a5)
00000F00 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F0A                            
00000F0A                            loc_CD4:				; XREF: loc_C76
00000F0A 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F14 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F1A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F20 3ABC 977F                  		move.w	#$977F,(a5)
00000F24 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F28 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F38 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F3E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F44 3ABC 977F                  		move.w	#$977F,(a5)
00000F48 3ABC 7800                  		move.w	#$7800,(a5)
00000F4C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F52 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F56 4A38 F767                  		tst.b	($FFFFF767).w
00000F5A 6700                       		beq.s	loc_D50
00000F5C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F62 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F68 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F6E 3ABC 977F                  		move.w	#$977F,(a5)
00000F72 3ABC 7000                  		move.w	#$7000,(a5)
00000F76 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F7C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F80 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F86                            
00000F86                            loc_D50:
00000F86 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F8E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F94 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F9A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000FA0 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000FA6 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000FAC 6400                       		bcc.s	Demo_Time
00000FAE 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FB4 588F                       		addq.l	#4,sp
00000FB6 6000 FDE2                  		bra.w	loc_B64
00000FBA                            
00000FBA                            ; ---------------------------------------------------------------------------
00000FBA                            ; Subroutine to	run a demo for an amount of time
00000FBA                            ; ---------------------------------------------------------------------------
00000FBA                            
00000FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FBA                            
00000FBA                            
00000FBA                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FBA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FBE 4EB9 0000 0000             		jsr	AniArt_Load
00000FC4 4EB9 0000 0000             		jsr	HudUpdate
00000FCA 6100 0000                  		bsr.w	sub_165E
00000FCE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FD2 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FD6 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FDA                            
00000FDA                            Demo_TimeEnd:
00000FDA 4E75                       		rts	
00000FDC                            ; End of function Demo_Time
00000FDC                            
00000FDC                            ; ===========================================================================
00000FDC                            
00000FDC                            loc_DA6:				; XREF: off_B6E
00000FDC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FE4                            
00000FE4                            loc_DAE:
00000FE4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FEC 66F6                       		bne.s	loc_DAE		; if not, branch
00000FEE 6100 0000                  		bsr.w	ReadJoypads
00000FF2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FF8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FFE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001004 3ABC 977F                  		move.w	#$977F,(a5)
00001008 3ABC C000                  		move.w	#$C000,(a5)
0000100C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001012 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001016 4BF9 00C0 0004             		lea	($C00004).l,a5
0000101C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001022 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001028 3ABC 977F                  		move.w	#$977F,(a5)
0000102C 3ABC 7800                  		move.w	#$7800,(a5)
00001030 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001036 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000103A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001040 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001046 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000104C 3ABC 977F                  		move.w	#$977F,(a5)
00001050 3ABC 7C00                  		move.w	#$7C00,(a5)
00001054 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000105A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001066 6100 0000                  		bsr.w	PalCycle_SS
0000106A 4A38 F767                  		tst.b	($FFFFF767).w
0000106E 6700                       		beq.s	loc_E64
00001070 4BF9 00C0 0004             		lea	($C00004).l,a5
00001076 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000107C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001082 3ABC 977F                  		move.w	#$977F,(a5)
00001086 3ABC 7000                  		move.w	#$7000,(a5)
0000108A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001090 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001094 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000109A                            
0000109A                            loc_E64:
0000109A 4A78 F614                  		tst.w	($FFFFF614).w
0000109E 6700 0000                  		beq.w	locret_E70
000010A2 5378 F614                  		subq.w	#1,($FFFFF614).w
000010A6                            
000010A6                            locret_E70:
000010A6 4E75                       		rts	
000010A8                            ; ===========================================================================
000010A8                            
000010A8                            loc_E72:				; XREF: off_B6E
000010A8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010B0                            
000010B0                            loc_E7A:
000010B0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010B8 66F6                       		bne.s	loc_E7A		; if not, branch
000010BA 6100 0000                  		bsr.w	ReadJoypads
000010BE 4A38 F64E                  		tst.b	($FFFFF64E).w
000010C2 6600                       		bne.s	loc_EB4
000010C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010CA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010D0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010D6 3ABC 977F                  		move.w	#$977F,(a5)
000010DA 3ABC C000                  		move.w	#$C000,(a5)
000010DE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010E4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010E8 6000                       		bra.s	loc_ED8
000010EA                            ; ===========================================================================
000010EA                            
000010EA                            loc_EB4:				; XREF: loc_E7A
000010EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000010F0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010F6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010FC 3ABC 977F                  		move.w	#$977F,(a5)
00001100 3ABC C000                  		move.w	#$C000,(a5)
00001104 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000110A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000110E                            
0000110E                            loc_ED8:				; XREF: loc_E7A
0000110E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001112 4BF9 00C0 0004             		lea	($C00004).l,a5
00001118 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000111E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001124                            
00001124                            loc_EEE:
00001124 3ABC 977F                  		move.w	#$977F,(a5)
00001128 3ABC 7C00                  		move.w	#$7C00,(a5)
0000112C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001132 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001136 4BF9 00C0 0004             		lea	($C00004).l,a5
0000113C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001142 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001148 3ABC 977F                  		move.w	#$977F,(a5)
0000114C 3ABC 7800                  		move.w	#$7800,(a5)
00001150 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001156 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000115A 4A38 F767                  		tst.b	($FFFFF767).w
0000115E 6700                       		beq.s	loc_F54
00001160 4BF9 00C0 0004             		lea	($C00004).l,a5
00001166 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000116C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001172 3ABC 977F                  		move.w	#$977F,(a5)
00001176 3ABC 7000                  		move.w	#$7000,(a5)
0000117A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001180 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001184 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000118A                            
0000118A                            loc_F54:
0000118A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001192 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001198 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000119E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000011A4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000011AA 6100 0000                  		bsr.w	LoadTilesAsYouMove
000011AE 4EB9 0000 0000             		jsr	AniArt_Load
000011B4 4EB9 0000 0000             		jsr	HudUpdate
000011BA 6100 0000                  		bsr.w	sub_1642
000011BE 4E75                       		rts	
000011C0                            ; ===========================================================================
000011C0                            
000011C0                            loc_F8A:				; XREF: off_B6E
000011C0 6100 0000                  		bsr.w	sub_106E
000011C4 5238 F628                  		addq.b	#1,($FFFFF628).w
000011C8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011CE 4E75                       		rts	
000011D0                            ; ===========================================================================
000011D0                            
000011D0                            loc_F9A:				; XREF: off_B6E
000011D0 6100 0000                  		bsr.w	sub_106E
000011D4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011D8 6000 0000                  		bra.w	sub_1642
000011DC                            ; ===========================================================================
000011DC                            
000011DC                            loc_FA6:				; XREF: off_B6E
000011DC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011E4                            
000011E4                            loc_FAE:
000011E4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011EC 66F6                       		bne.s	loc_FAE		; if not, branch
000011EE 6100 0000                  		bsr.w	ReadJoypads
000011F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000011F8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011FE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001204 3ABC 977F                  		move.w	#$977F,(a5)
00001208 3ABC C000                  		move.w	#$C000,(a5)
0000120C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001212 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001216 4BF9 00C0 0004             		lea	($C00004).l,a5
0000121C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001222 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001228 3ABC 977F                  		move.w	#$977F,(a5)
0000122C 3ABC 7800                  		move.w	#$7800,(a5)
00001230 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001236 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000123A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001240 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001246 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000124C 3ABC 977F                  		move.w	#$977F,(a5)
00001250 3ABC 7C00                  		move.w	#$7C00,(a5)
00001254 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000125A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000125E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001266 4A38 F767                  		tst.b	($FFFFF767).w
0000126A 6700                       		beq.s	loc_1060
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001278 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000127E 3ABC 977F                  		move.w	#$977F,(a5)
00001282 3ABC 7000                  		move.w	#$7000,(a5)
00001286 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000128C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001290 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001296                            
00001296                            loc_1060:
00001296 4A78 F614                  		tst.w	($FFFFF614).w
0000129A 6700 0000                  		beq.w	locret_106C
0000129E 5378 F614                  		subq.w	#1,($FFFFF614).w
000012A2                            
000012A2                            locret_106C:
000012A2 4E75                       		rts	
000012A4                            
000012A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A4                            
000012A4                            
000012A4                            sub_106E:				; XREF: loc_C32; et al
000012A4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000012AC                            
000012AC                            loc_1076:
000012AC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012B4 66F6                       		bne.s	loc_1076	; if not, branch
000012B6 6100 0000                  		bsr.w	ReadJoypads
000012BA 4A38 F64E                  		tst.b	($FFFFF64E).w
000012BE 6600                       		bne.s	loc_10B0
000012C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012C6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012CC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012D2 3ABC 977F                  		move.w	#$977F,(a5)
000012D6 3ABC C000                  		move.w	#$C000,(a5)
000012DA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012E0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012E4 6000                       		bra.s	loc_10D4
000012E6                            ; ===========================================================================
000012E6                            
000012E6                            loc_10B0:				; XREF: sub_106E
000012E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000012EC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012F2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012F8 3ABC 977F                  		move.w	#$977F,(a5)
000012FC 3ABC C000                  		move.w	#$C000,(a5)
00001300 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001306 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000130A                            
0000130A                            loc_10D4:				; XREF: sub_106E
0000130A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001310 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001316 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000131C 3ABC 977F                  		move.w	#$977F,(a5)
00001320 3ABC 7800                  		move.w	#$7800,(a5)
00001324 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000132A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000132E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001334 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000133A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001340 3ABC 977F                  		move.w	#$977F,(a5)
00001344 3ABC 7C00                  		move.w	#$7C00,(a5)
00001348 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000134E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001352 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000135A 4E75                       		rts	
0000135C                            ; End of function sub_106E
0000135C                            
0000135C                            ; ---------------------------------------------------------------------------
0000135C                            ; Subroutine to	move pallets from the RAM to CRAM
0000135C                            ; ---------------------------------------------------------------------------
0000135C                            
0000135C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000135C                            
0000135C                            
0000135C                            PalToCRAM:
0000135C 46FC 2700                  		move	#$2700,sr
00001360 4A78 F644                  		tst.w	($FFFFF644).w
00001364 6700                       		beq.s	locret_119C
00001366 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000136C 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001370 43F9 00C0 0000             		lea	($C00000).l,a1
00001376 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000137A 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001382 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 2298                       		move.l	(a0)+,(a1)
000013B2 2298                       		move.l	(a0)+,(a1)
000013B4 2298                       		move.l	(a0)+,(a1)
000013B6 2298                       		move.l	(a0)+,(a1)
000013B8 2298                       		move.l	(a0)+,(a1)
000013BA 2298                       		move.l	(a0)+,(a1)
000013BC 2298                       		move.l	(a0)+,(a1)
000013BE 2298                       		move.l	(a0)+,(a1)
000013C0 2298                       		move.l	(a0)+,(a1)
000013C2 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013C8 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013CC 4A38 F64F                  		tst.b	($FFFFF64F).w
000013D0 6600                       		bne.s	loc_119E
000013D2                            
000013D2                            locret_119C:
000013D2 4E73                       		rte	
000013D4                            ; ===========================================================================
000013D4                            
000013D4                            loc_119E:				; XREF: PalToCRAM
000013D4 4238 F64F                  		clr.b	($FFFFF64F).w
000013D8 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013DC 6100 FBDC                  		bsr.w	Demo_Time
000013E0 4EB9 0000 0000             		jsr	sub_71B4C
000013E6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013EA 4E73                       		rte	
000013EC                            ; End of function PalToCRAM
000013EC                            
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            ; Subroutine to	initialise joypads
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            
000013EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013EC                            
000013EC                            
000013EC                            JoypadInit:				; XREF: GameClrRAM
000013EC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013F4                            
000013F4                            Joypad_WaitZ80:
000013F4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013FC 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013FE 7040                       		moveq	#$40,d0
00001400 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001406 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
0000140C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001412 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000141A 4E75                       		rts	
0000141C                            ; End of function JoypadInit
0000141C                            
0000141C                            ; ---------------------------------------------------------------------------
0000141C                            ; Subroutine to	read joypad input, and send it to the RAM
0000141C                            ; ---------------------------------------------------------------------------
0000141C                            
0000141C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000141C                            
0000141C                            
0000141C                            ReadJoypads:
0000141C 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001420 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001426 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001428 5449                       		addq.w	#2,a1		; do the second	joypad
0000142A                            
0000142A                            Joypad_Read:
0000142A 12BC 0000                  		move.b	#0,(a1)
0000142E 4E71                       		nop	
00001430 4E71                       		nop	
00001432 1011                       		move.b	(a1),d0
00001434 E508                       		lsl.b	#2,d0
00001436 0200 00C0                  		andi.b	#$C0,d0
0000143A 12BC 0040                  		move.b	#$40,(a1)
0000143E 4E71                       		nop	
00001440 4E71                       		nop	
00001442 1211                       		move.b	(a1),d1
00001444 0201 003F                  		andi.b	#$3F,d1
00001448 8001                       		or.b	d1,d0
0000144A 4600                       		not.b	d0
0000144C 1210                       		move.b	(a0),d1
0000144E B101                       		eor.b	d0,d1
00001450 10C0                       		move.b	d0,(a0)+
00001452 C200                       		and.b	d0,d1
00001454 10C1                       		move.b	d1,(a0)+
00001456 4E75                       		rts	
00001458                            ; End of function ReadJoypads
00001458                            
00001458                            
00001458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001458                            
00001458                            
00001458                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001458 41F9 00C0 0004             		lea	($C00004).l,a0
0000145E 43F9 00C0 0000             		lea	($C00000).l,a1
00001464 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000146A 7E12                       		moveq	#$12,d7
0000146C                            
0000146C                            VDP_Loop:
0000146C 309A                       		move.w	(a2)+,(a0)
0000146E 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001472                            
00001472 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001478 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000147C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001482 7000                       		moveq	#0,d0
00001484 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000148E 3E3C 003F                  		move.w	#$3F,d7
00001492                            
00001492                            VDP_ClrCRAM:
00001492 3280                       		move.w	d0,(a1)
00001494 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001498                            
00001498 42B8 F616                  		clr.l	($FFFFF616).w
0000149C 42B8 F61A                  		clr.l	($FFFFF61A).w
000014A0 2F01                       		move.l	d1,-(sp)
000014A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000014A8 3ABC 8F01                  		move.w	#$8F01,(a5)
000014AC 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014B2 3ABC 9780                  		move.w	#$9780,(a5)
000014B6 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014BC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014C4                            
000014C4                            loc_128E:
000014C4 3215                       		move.w	(a5),d1
000014C6 0801 0001                  		btst	#1,d1
000014CA 66F8                       		bne.s	loc_128E
000014CC                            
000014CC 3ABC 8F02                  		move.w	#$8F02,(a5)
000014D0 221F                       		move.l	(sp)+,d1
000014D2 4E75                       		rts	
000014D4                            ; End of function VDPSetupGame
000014D4                            
000014D4                            ; ===========================================================================
000014D4 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014DC 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014E4 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014EC 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014F4 9001 9100 9200             		dc.w $9001, $9100, $9200
000014FA                            
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            ; Subroutine to	clear the screen
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            
000014FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014FA                            
000014FA                            
000014FA                            ClearScreen:
000014FA 4BF9 00C0 0004             		lea	($C00004).l,a5
00001500 3ABC 8F01                  		move.w	#$8F01,(a5)
00001504 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000150A 3ABC 9780                  		move.w	#$9780,(a5)
0000150E 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001514 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000151C                            
0000151C                            loc_12E6:
0000151C 3215                       		move.w	(a5),d1
0000151E 0801 0001                  		btst	#1,d1
00001522 66F8                       		bne.s	loc_12E6
00001524                            
00001524 3ABC 8F02                  		move.w	#$8F02,(a5)
00001528 4BF9 00C0 0004             		lea	($C00004).l,a5
0000152E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001532 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001538 3ABC 9780                  		move.w	#$9780,(a5)
0000153C 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001542 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000154A                            
0000154A                            loc_1314:
0000154A 3215                       		move.w	(a5),d1
0000154C 0801 0001                  		btst	#1,d1
00001550 66F8                       		bne.s	loc_1314
00001552                            
00001552 3ABC 8F02                  		move.w	#$8F02,(a5)
00001556 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000155E 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001566 43F8 F800                  		lea	($FFFFF800).w,a1
0000156A 7000                       		moveq	#0,d0
0000156C 323C 009F                  		move.w	#$9F,d1
00001570                            
00001570                            loc_133A:
00001570 22C0                       		move.l	d0,(a1)+
00001572 51C9 FFFC                  		dbf	d1,loc_133A
00001576                            
00001576 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000157A 7000                       		moveq	#0,d0
0000157C 323C 00FF                  		move.w	#$FF,d1
00001580                            
00001580                            loc_134A:
00001580 22C0                       		move.l	d0,(a1)+
00001582 51C9 FFFC                  		dbf	d1,loc_134A
00001586 4E75                       		rts	
00001588                            ; End of function ClearScreen
00001588                            
00001588                            ; ---------------------------------------------------------------------------
00001588                            ; Subroutine to	load the sound driver
00001588                            ; ---------------------------------------------------------------------------
00001588                            
00001588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001588                            
00001588                            
00001588                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001588 4E71                       		nop	
0000158A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001592 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000159A 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
000015A0 43F9 00A0 0000             		lea	($A00000).l,a1
000015A6 6100 0000                  		bsr.w	KosDec		; decompress
000015AA 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015B2 4E71                       		nop	
000015B4 4E71                       		nop	
000015B6 4E71                       		nop	
000015B8 4E71                       		nop	
000015BA 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015C2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015CA 4E75                       		rts	
000015CC                            ; End of function SoundDriverLoad
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	play a sound or	music track
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PlaySound:
000015CC 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015D0 4E75                       		rts	
000015D2                            ; End of function PlaySound
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Subroutine to	play a special sound/music (E0-E4)
000015D2                            ;
000015D2                            ; E0 - Fade out
000015D2                            ; E1 - Sega
000015D2                            ; E2 - Speed up
000015D2                            ; E3 - Normal speed
000015D2                            ; E4 - Stop
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            PlaySound_Special:
000015D2 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015D6 4E75                       		rts	
000015D8                            ; End of function PlaySound_Special
000015D8                            
000015D8                            ; ===========================================================================
000015D8                            ; ---------------------------------------------------------------------------
000015D8                            ; Unused sound/music subroutine
000015D8                            ; ---------------------------------------------------------------------------
000015D8                            
000015D8                            PlaySound_Unk:
000015D8 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015DC 4E75                       		rts	
000015DE                            
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            ; Subroutine to	pause the game
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            
000015DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DE                            
000015DE                            
000015DE                            PauseGame:				; XREF: Level_MainLoop; et al
000015DE 4E71                       		nop	
000015E0 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015E4 6700                       		beq.s	Unpause		; if not, branch
000015E6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015EA 6600                       		bne.s	loc_13BE	; if yes, branch
000015EC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015F2 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015F4                            
000015F4                            loc_13BE:
000015F4 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015FA 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001600                            
00001600                            loc_13CA:
00001600 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001606 6100 0000                  		bsr.w	DelayProgram
0000160A 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
0000160E 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001610 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001616 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001618 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000161E 4E71                       		nop	
00001620 6000                       		bra.s	loc_1404
00001622                            ; ===========================================================================
00001622                            
00001622                            Pause_ChkBC:				; XREF: PauseGame
00001622 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001628 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000162A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001630 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001632                            
00001632                            Pause_ChkStart:				; XREF: PauseGame
00001632 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001638 67C6                       		beq.s	loc_13CA	; if not, branch
0000163A                            
0000163A                            loc_1404:				; XREF: PauseGame
0000163A 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001640                            
00001640                            Unpause:				; XREF: PauseGame
00001640 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001646                            
00001646                            Pause_DoNothing:			; XREF: PauseGame
00001646 4E75                       		rts	
00001648                            ; ===========================================================================
00001648                            
00001648                            Pause_SlowMo:				; XREF: PauseGame
00001648 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000164E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001654 4E75                       		rts	
00001656                            ; End of function PauseGame
00001656                            
00001656                            ; ---------------------------------------------------------------------------
00001656                            ; Subroutine to	display	patterns via the VDP
00001656                            ; ---------------------------------------------------------------------------
00001656                            
00001656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001656                            
00001656                            
00001656                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001656 4DF9 00C0 0000             		lea	($C00000).l,a6
0000165C 283C 0080 0000             		move.l	#$800000,d4
00001662                            
00001662                            loc_142C:
00001662 2D40 0004                  		move.l	d0,4(a6)
00001666 3601                       		move.w	d1,d3
00001668                            
00001668                            loc_1432:
00001668 3C99                       		move.w	(a1)+,(a6)
0000166A 51CB FFFC                  		dbf	d3,loc_1432
0000166E D084                       		add.l	d4,d0
00001670 51CA FFF0                  		dbf	d2,loc_142C
00001674 4E75                       		rts	
00001676                            ; End of function ShowVDPGraphics
00001676                            
00001676                            ; ---------------------------------------------------------------------------
00001676                            ; Nemesis decompression	algorithm
00001676                            ; ---------------------------------------------------------------------------
00001676                            
00001676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001676                            
00001676                            
00001676                            NemDec:
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1502).l,a3
00001680 49F9 00C0 0000             		lea	($C00000).l,a4
00001686 6000                       		bra.s	loc_145C
00001688                            ; ===========================================================================
00001688 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000168C 47F9 0000 0000             		lea	(loc_1518).l,a3
00001692                            
00001692                            loc_145C:				; XREF: NemDec
00001692 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001696 3418                       		move.w	(a0)+,d2
00001698 E34A                       		lsl.w	#1,d2
0000169A 6400                       		bcc.s	loc_146A
0000169C D6FC 000A                  		adda.w	#$A,a3
000016A0                            
000016A0                            loc_146A:
000016A0 E54A                       		lsl.w	#2,d2
000016A2 3A42                       		movea.w	d2,a5
000016A4 7608                       		moveq	#8,d3
000016A6 7400                       		moveq	#0,d2
000016A8 7800                       		moveq	#0,d4
000016AA 6100 0000                  		bsr.w	NemDec4
000016AE 1A18                       		move.b	(a0)+,d5
000016B0 E145                       		asl.w	#8,d5
000016B2 1A18                       		move.b	(a0)+,d5
000016B4 3C3C 0010                  		move.w	#$10,d6
000016B8 6100                       		bsr.s	NemDec2
000016BA 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016BE 4E75                       		rts	
000016C0                            ; End of function NemDec
000016C0                            
000016C0                            
000016C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016C0                            
000016C0                            
000016C0                            NemDec2:				; XREF: NemDec
000016C0 3E06                       		move.w	d6,d7
000016C2 5147                       		subq.w	#8,d7
000016C4 3205                       		move.w	d5,d1
000016C6 EE69                       		lsr.w	d7,d1
000016C8 0C01 00FC                  		cmpi.b	#-4,d1
000016CC 6400                       		bcc.s	loc_14D6
000016CE 0241 00FF                  		andi.w	#$FF,d1
000016D2 D241                       		add.w	d1,d1
000016D4 1031 1000                  		move.b	(a1,d1.w),d0
000016D8 4880                       		ext.w	d0
000016DA 9C40                       		sub.w	d0,d6
000016DC 0C46 0009                  		cmpi.w	#9,d6
000016E0 6400                       		bcc.s	loc_14B2
000016E2 5046                       		addq.w	#8,d6
000016E4 E145                       		asl.w	#8,d5
000016E6 1A18                       		move.b	(a0)+,d5
000016E8                            
000016E8                            loc_14B2:
000016E8 1231 1001                  		move.b	1(a1,d1.w),d1
000016EC 3001                       		move.w	d1,d0
000016EE 0241 000F                  		andi.w	#$F,d1
000016F2 0240 00F0                  		andi.w	#$F0,d0
000016F6                            
000016F6                            loc_14C0:				; XREF: NemDec3
000016F6 E848                       		lsr.w	#4,d0
000016F8                            
000016F8                            loc_14C2:				; XREF: NemDec3
000016F8 E98C                       		lsl.l	#4,d4
000016FA 8801                       		or.b	d1,d4
000016FC 5343                       		subq.w	#1,d3
000016FE 6600                       		bne.s	loc_14D0
00001700 4ED3                       		jmp	(a3)
00001702                            ; End of function NemDec2
00001702                            
00001702                            
00001702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001702                            
00001702                            
00001702                            NemDec3:				; XREF: loc_1502
00001702 7800                       		moveq	#0,d4
00001704 7608                       		moveq	#8,d3
00001706                            
00001706                            loc_14D0:				; XREF: NemDec2
00001706 51C8 FFF0                  		dbf	d0,loc_14C2
0000170A 60B4                       		bra.s	NemDec2
0000170C                            ; ===========================================================================
0000170C                            
0000170C                            loc_14D6:				; XREF: NemDec2
0000170C 5D46                       		subq.w	#6,d6
0000170E 0C46 0009                  		cmpi.w	#9,d6
00001712 6400                       		bcc.s	loc_14E4
00001714 5046                       		addq.w	#8,d6
00001716 E145                       		asl.w	#8,d5
00001718 1A18                       		move.b	(a0)+,d5
0000171A                            
0000171A                            loc_14E4:				; XREF: NemDec3
0000171A 5F46                       		subq.w	#7,d6
0000171C 3205                       		move.w	d5,d1
0000171E EC69                       		lsr.w	d6,d1
00001720 3001                       		move.w	d1,d0
00001722 0241 000F                  		andi.w	#$F,d1
00001726 0240 0070                  		andi.w	#$70,d0
0000172A 0C46 0009                  		cmpi.w	#9,d6
0000172E 64C6                       		bcc.s	loc_14C0
00001730 5046                       		addq.w	#8,d6
00001732 E145                       		asl.w	#8,d5
00001734 1A18                       		move.b	(a0)+,d5
00001736 60BE                       		bra.s	loc_14C0
00001738                            ; End of function NemDec3
00001738                            
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1502:				; XREF: NemDec
00001738 2884                       		move.l	d4,(a4)
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66C2                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 2882                       		move.l	d2,(a4)
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66B6                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            ; ===========================================================================
0000174E                            
0000174E                            loc_1518:				; XREF: NemDec
0000174E 28C4                       		move.l	d4,(a4)+
00001750 534D                       		subq.w	#1,a5
00001752 380D                       		move.w	a5,d4
00001754 66AC                       		bne.s	NemDec3
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758 B982                       		eor.l	d4,d2
0000175A 28C2                       		move.l	d2,(a4)+
0000175C 534D                       		subq.w	#1,a5
0000175E 380D                       		move.w	a5,d4
00001760 66A0                       		bne.s	NemDec3
00001762 4E75                       		rts	
00001764                            
00001764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001764                            
00001764                            
00001764                            NemDec4:				; XREF: NemDec
00001764 1018                       		move.b	(a0)+,d0
00001766                            
00001766                            loc_1530:
00001766 0C00 00FF                  		cmpi.b	#-1,d0
0000176A 6600                       		bne.s	loc_1538
0000176C 4E75                       		rts	
0000176E                            ; ===========================================================================
0000176E                            
0000176E                            loc_1538:				; XREF: NemDec4
0000176E 3E00                       		move.w	d0,d7
00001770                            
00001770                            loc_153A:
00001770 1018                       		move.b	(a0)+,d0
00001772 0C00 0080                  		cmpi.b	#$80,d0
00001776 64EE                       		bcc.s	loc_1530
00001778 1200                       		move.b	d0,d1
0000177A 0247 000F                  		andi.w	#$F,d7
0000177E 0241 0070                  		andi.w	#$70,d1
00001782 8E41                       		or.w	d1,d7
00001784 0240 000F                  		andi.w	#$F,d0
00001788 1200                       		move.b	d0,d1
0000178A E149                       		lsl.w	#8,d1
0000178C 8E41                       		or.w	d1,d7
0000178E 7208                       		moveq	#8,d1
00001790 9240                       		sub.w	d0,d1
00001792 6600                       		bne.s	loc_1568
00001794 1018                       		move.b	(a0)+,d0
00001796 D040                       		add.w	d0,d0
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 60D2                       		bra.s	loc_153A
0000179E                            ; ===========================================================================
0000179E                            
0000179E                            loc_1568:				; XREF: NemDec4
0000179E 1018                       		move.b	(a0)+,d0
000017A0 E368                       		lsl.w	d1,d0
000017A2 D040                       		add.w	d0,d0
000017A4 7A01                       		moveq	#1,d5
000017A6 E36D                       		lsl.w	d1,d5
000017A8 5345                       		subq.w	#1,d5
000017AA                            
000017AA                            loc_1574:
000017AA 3387 0000                  		move.w	d7,(a1,d0.w)
000017AE 5440                       		addq.w	#2,d0
000017B0 51CD FFF8                  		dbf	d5,loc_1574
000017B4 60BA                       		bra.s	loc_153A
000017B6                            ; End of function NemDec4
000017B6                            
000017B6                            ; ---------------------------------------------------------------------------
000017B6                            ; Subroutine to	load pattern load cues
000017B6                            ; ---------------------------------------------------------------------------
000017B6                            
000017B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B6                            
000017B6                            
000017B6                            LoadPLC:
000017B6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017BA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017C0 D040                       		add.w	d0,d0
000017C2 3031 0000                  		move.w	(a1,d0.w),d0
000017C6 43F1 0000                  		lea	(a1,d0.w),a1
000017CA 45F8 F680                  		lea	($FFFFF680).w,a2
000017CE                            
000017CE                            loc_1598:
000017CE 4A92                       		tst.l	(a2)
000017D0 6700                       		beq.s	loc_15A0
000017D2 5C4A                       		addq.w	#6,a2
000017D4 60F8                       		bra.s	loc_1598
000017D6                            ; ===========================================================================
000017D6                            
000017D6                            loc_15A0:				; XREF: LoadPLC
000017D6 3019                       		move.w	(a1)+,d0
000017D8 6B00                       		bmi.s	loc_15AC
000017DA                            
000017DA                            loc_15A4:
000017DA 24D9                       		move.l	(a1)+,(a2)+
000017DC 34D9                       		move.w	(a1)+,(a2)+
000017DE 51C8 FFFA                  		dbf	d0,loc_15A4
000017E2                            
000017E2                            loc_15AC:
000017E2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017E6 4E75                       		rts	
000017E8                            ; End of function LoadPLC
000017E8                            
000017E8                            
000017E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017E8                            
000017E8                            
000017E8                            LoadPLC2:
000017E8 48E7 0060                  		movem.l	a1-a2,-(sp)
000017EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017F2 D040                       		add.w	d0,d0
000017F4 3031 0000                  		move.w	(a1,d0.w),d0
000017F8 43F1 0000                  		lea	(a1,d0.w),a1
000017FC 6100                       		bsr.s	ClearPLC
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 3019                       		move.w	(a1)+,d0
00001804 6B00                       		bmi.s	loc_15D8
00001806                            
00001806                            loc_15D0:
00001806 24D9                       		move.l	(a1)+,(a2)+
00001808 34D9                       		move.w	(a1)+,(a2)+
0000180A 51C8 FFFA                  		dbf	d0,loc_15D0
0000180E                            
0000180E                            loc_15D8:
0000180E 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001812 4E75                       		rts	
00001814                            ; End of function LoadPLC2
00001814                            
00001814                            ; ---------------------------------------------------------------------------
00001814                            ; Subroutine to	clear the pattern load cues
00001814                            ; ---------------------------------------------------------------------------
00001814                            
00001814                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001814                            
00001814                            
00001814                            ClearPLC:				; XREF: LoadPLC2
00001814 45F8 F680                  		lea	($FFFFF680).w,a2
00001818 701F                       		moveq	#$1F,d0
0000181A                            
0000181A                            ClearPLC_Loop:
0000181A 429A                       		clr.l	(a2)+
0000181C 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001820 4E75                       		rts	
00001822                            ; End of function ClearPLC
00001822                            
00001822                            ; ---------------------------------------------------------------------------
00001822                            ; Subroutine to	use graphics listed in a pattern load cue
00001822                            ; ---------------------------------------------------------------------------
00001822                            
00001822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001822                            
00001822                            
00001822                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001822 4AB8 F680                  		tst.l	($FFFFF680).w
00001826 6700                       		beq.s	locret_1640
00001828 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000182C 6600                       		bne.s	locret_1640
0000182E 2078 F680                  		movea.l	($FFFFF680).w,a0
00001832 47F9 0000 1738             		lea	(loc_1502).l,a3
00001838 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000183C 3418                       		move.w	(a0)+,d2
0000183E 6A00                       		bpl.s	loc_160E
00001840 D6FC 000A                  		adda.w	#$A,a3
00001844                            
00001844                            loc_160E:
00001844 0242 7FFF                  		andi.w	#$7FFF,d2
00001848 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000184C 6100 FF16                  		bsr.w	NemDec4
00001850 1A18                       		move.b	(a0)+,d5
00001852 E145                       		asl.w	#8,d5
00001854 1A18                       		move.b	(a0)+,d5
00001856 7C10                       		moveq	#$10,d6
00001858 7000                       		moveq	#0,d0
0000185A 21C8 F680                  		move.l	a0,($FFFFF680).w
0000185E 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001862 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001866 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000186A 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000186E 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001872 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001876                            
00001876                            locret_1640:
00001876 4E75                       		rts	
00001878                            ; End of function RunPLC_RAM
00001878                            
00001878                            
00001878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001878                            
00001878                            
00001878                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001878 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000187C 6700 0000                  		beq.w	locret_16DA
00001880 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001886 7000                       		moveq	#0,d0
00001888 3038 F684                  		move.w	($FFFFF684).w,d0
0000188C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001892 6000                       		bra.s	loc_1676
00001894                            ; End of function sub_1642
00001894                            
00001894                            
00001894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001894                            
00001894                            
00001894                            sub_165E:				; XREF: Demo_Time
00001894 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001898 6700                       		beq.s	locret_16DA
0000189A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000018A0 7000                       		moveq	#0,d0
000018A2 3038 F684                  		move.w	($FFFFF684).w,d0
000018A6 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000018AC                            
000018AC                            loc_1676:				; XREF: sub_1642
000018AC 49F9 00C0 0004             		lea	($C00004).l,a4
000018B2 E588                       		lsl.l	#2,d0
000018B4 E448                       		lsr.w	#2,d0
000018B6 0040 4000                  		ori.w	#$4000,d0
000018BA 4840                       		swap	d0
000018BC 2880                       		move.l	d0,(a4)
000018BE 594C                       		subq.w	#4,a4
000018C0 2078 F680                  		movea.l	($FFFFF680).w,a0
000018C4 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018C8 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018CC 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018D0 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018D4 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018D8 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018DC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018E0                            
000018E0                            loc_16AA:				; XREF: sub_165E
000018E0 3A7C 0008                  		movea.w	#8,a5
000018E4 6100 FE1C                  		bsr.w	NemDec3
000018E8 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018EC 6700                       		beq.s	loc_16DC
000018EE 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018F2 66EC                       		bne.s	loc_16AA
000018F4 21C8 F680                  		move.l	a0,($FFFFF680).w
000018F8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018FC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001900 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001904 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001908 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000190C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001910                            
00001910                            locret_16DA:				; XREF: sub_1642
00001910 4E75                       		rts	
00001912                            ; ===========================================================================
00001912                            
00001912                            loc_16DC:				; XREF: sub_165E
00001912 41F8 F680                  		lea	($FFFFF680).w,a0
00001916 7015                       		moveq	#$15,d0
00001918                            
00001918                            loc_16E2:				; XREF: sub_165E
00001918 20E8 0006                  		move.l	6(a0),(a0)+
0000191C 51C8 FFFA                  		dbf	d0,loc_16E2
00001920 4E75                       		rts	
00001922                            ; End of function sub_165E
00001922                            
00001922                            ; ---------------------------------------------------------------------------
00001922                            ; Subroutine to	execute	the pattern load cue
00001922                            ; ---------------------------------------------------------------------------
00001922                            
00001922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001922                            
00001922                            
00001922                            RunPLC_ROM:
00001922 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001928 D040                       		add.w	d0,d0
0000192A 3031 0000                  		move.w	(a1,d0.w),d0
0000192E 43F1 0000                  		lea	(a1,d0.w),a1
00001932 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001934                            
00001934                            RunPLC_Loop:
00001934 2059                       		movea.l	(a1)+,a0	; get art pointer
00001936 7000                       		moveq	#0,d0
00001938 3019                       		move.w	(a1)+,d0	; get VRAM address
0000193A E588                       		lsl.l	#2,d0		; divide address by $20
0000193C E448                       		lsr.w	#2,d0
0000193E 0040 4000                  		ori.w	#$4000,d0
00001942 4840                       		swap	d0
00001944 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000194A 6100 FD2A                  		bsr.w	NemDec		; decompress
0000194E 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001952 4E75                       		rts	
00001954                            ; End of function RunPLC_ROM
00001954                            
00001954                            ; ---------------------------------------------------------------------------
00001954                            ; Enigma decompression algorithm
00001954                            ; ---------------------------------------------------------------------------
00001954                            
00001954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001954                            
00001954                            
00001954                            EniDec:
00001954 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001958 3640                       		movea.w	d0,a3
0000195A 1018                       		move.b	(a0)+,d0
0000195C 4880                       		ext.w	d0
0000195E 3A40                       		movea.w	d0,a5
00001960 1818                       		move.b	(a0)+,d4
00001962 E70C                       		lsl.b	#3,d4
00001964 3458                       		movea.w	(a0)+,a2
00001966 D4CB                       		adda.w	a3,a2
00001968 3858                       		movea.w	(a0)+,a4
0000196A D8CB                       		adda.w	a3,a4
0000196C 1A18                       		move.b	(a0)+,d5
0000196E E145                       		asl.w	#8,d5
00001970 1A18                       		move.b	(a0)+,d5
00001972 7C10                       		moveq	#$10,d6
00001974                            
00001974                            loc_173E:				; XREF: loc_1768
00001974 7007                       		moveq	#7,d0
00001976 3E06                       		move.w	d6,d7
00001978 9E40                       		sub.w	d0,d7
0000197A 3205                       		move.w	d5,d1
0000197C EE69                       		lsr.w	d7,d1
0000197E 0241 007F                  		andi.w	#$7F,d1
00001982 3401                       		move.w	d1,d2
00001984 0C41 0040                  		cmpi.w	#$40,d1
00001988 6400                       		bcc.s	loc_1758
0000198A 7006                       		moveq	#6,d0
0000198C E24A                       		lsr.w	#1,d2
0000198E                            
0000198E                            loc_1758:
0000198E 6100 0000                  		bsr.w	sub_188C
00001992 0242 000F                  		andi.w	#$F,d2
00001996 E849                       		lsr.w	#4,d1
00001998 D241                       		add.w	d1,d1
0000199A 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000199E                            ; End of function EniDec
0000199E                            
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_1768:				; XREF: loc_17B4
0000199E 32CA                       		move.w	a2,(a1)+
000019A0 524A                       		addq.w	#1,a2
000019A2 51CA FFFA                  		dbf	d2,loc_1768
000019A6 60CC                       		bra.s	loc_173E
000019A8                            ; ===========================================================================
000019A8                            
000019A8                            loc_1772:				; XREF: loc_17B4
000019A8 32CC                       		move.w	a4,(a1)+
000019AA 51CA FFFC                  		dbf	d2,loc_1772
000019AE 60C4                       		bra.s	loc_173E
000019B0                            ; ===========================================================================
000019B0                            
000019B0                            loc_177A:				; XREF: loc_17B4
000019B0 6100 0000                  		bsr.w	loc_17DC
000019B4                            
000019B4                            loc_177E:
000019B4 32C1                       		move.w	d1,(a1)+
000019B6 51CA FFFC                  		dbf	d2,loc_177E
000019BA 60B8                       		bra.s	loc_173E
000019BC                            ; ===========================================================================
000019BC                            
000019BC                            loc_1786:				; XREF: loc_17B4
000019BC 6100 0000                  		bsr.w	loc_17DC
000019C0                            
000019C0                            loc_178A:
000019C0 32C1                       		move.w	d1,(a1)+
000019C2 5241                       		addq.w	#1,d1
000019C4 51CA FFFA                  		dbf	d2,loc_178A
000019C8 60AA                       		bra.s	loc_173E
000019CA                            ; ===========================================================================
000019CA                            
000019CA                            loc_1794:				; XREF: loc_17B4
000019CA 6100 0000                  		bsr.w	loc_17DC
000019CE                            
000019CE                            loc_1798:
000019CE 32C1                       		move.w	d1,(a1)+
000019D0 5341                       		subq.w	#1,d1
000019D2 51CA FFFA                  		dbf	d2,loc_1798
000019D6 609C                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17A2:				; XREF: loc_17B4
000019D8 0C42 000F                  		cmpi.w	#$F,d2
000019DC 6700                       		beq.s	loc_17C4
000019DE                            
000019DE                            loc_17A8:
000019DE 6100 0000                  		bsr.w	loc_17DC
000019E2 32C1                       		move.w	d1,(a1)+
000019E4 51CA FFF8                  		dbf	d2,loc_17A8
000019E8 608A                       		bra.s	loc_173E
000019EA                            ; ===========================================================================
000019EA                            
000019EA                            loc_17B4:				; XREF: EniDec
000019EA 60B2                       		bra.s	loc_1768
000019EC                            ; ===========================================================================
000019EC 60B0                       		bra.s	loc_1768
000019EE                            ; ===========================================================================
000019EE 60B8                       		bra.s	loc_1772
000019F0                            ; ===========================================================================
000019F0 60B6                       		bra.s	loc_1772
000019F2                            ; ===========================================================================
000019F2 60BC                       		bra.s	loc_177A
000019F4                            ; ===========================================================================
000019F4 60C6                       		bra.s	loc_1786
000019F6                            ; ===========================================================================
000019F6 60D2                       		bra.s	loc_1794
000019F8                            ; ===========================================================================
000019F8 60DE                       		bra.s	loc_17A2
000019FA                            ; ===========================================================================
000019FA                            
000019FA                            loc_17C4:				; XREF: loc_17A2
000019FA 5348                       		subq.w	#1,a0
000019FC 0C46 0010                  		cmpi.w	#$10,d6
00001A00 6600                       		bne.s	loc_17CE
00001A02 5348                       		subq.w	#1,a0
00001A04                            
00001A04                            loc_17CE:
00001A04 3008                       		move.w	a0,d0
00001A06 E248                       		lsr.w	#1,d0
00001A08 6400                       		bcc.s	loc_17D6
00001A0A 5248                       		addq.w	#1,a0
00001A0C                            
00001A0C                            loc_17D6:
00001A0C 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001A10 4E75                       		rts	
00001A12                            ; ===========================================================================
00001A12                            
00001A12                            loc_17DC:				; XREF: loc_17A2
00001A12 360B                       		move.w	a3,d3
00001A14 1204                       		move.b	d4,d1
00001A16 D201                       		add.b	d1,d1
00001A18 6400                       		bcc.s	loc_17EE
00001A1A 5346                       		subq.w	#1,d6
00001A1C 0D05                       		btst	d6,d5
00001A1E 6700                       		beq.s	loc_17EE
00001A20 0043 8000                  		ori.w	#-$8000,d3
00001A24                            
00001A24                            loc_17EE:
00001A24 D201                       		add.b	d1,d1
00001A26 6400                       		bcc.s	loc_17FC
00001A28 5346                       		subq.w	#1,d6
00001A2A 0D05                       		btst	d6,d5
00001A2C 6700                       		beq.s	loc_17FC
00001A2E 0643 4000                  		addi.w	#$4000,d3
00001A32                            
00001A32                            loc_17FC:
00001A32 D201                       		add.b	d1,d1
00001A34 6400                       		bcc.s	loc_180A
00001A36 5346                       		subq.w	#1,d6
00001A38 0D05                       		btst	d6,d5
00001A3A 6700                       		beq.s	loc_180A
00001A3C 0643 2000                  		addi.w	#$2000,d3
00001A40                            
00001A40                            loc_180A:
00001A40 D201                       		add.b	d1,d1
00001A42 6400                       		bcc.s	loc_1818
00001A44 5346                       		subq.w	#1,d6
00001A46 0D05                       		btst	d6,d5
00001A48 6700                       		beq.s	loc_1818
00001A4A 0043 1000                  		ori.w	#$1000,d3
00001A4E                            
00001A4E                            loc_1818:
00001A4E D201                       		add.b	d1,d1
00001A50 6400                       		bcc.s	loc_1826
00001A52 5346                       		subq.w	#1,d6
00001A54 0D05                       		btst	d6,d5
00001A56 6700                       		beq.s	loc_1826
00001A58 0043 0800                  		ori.w	#$800,d3
00001A5C                            
00001A5C                            loc_1826:
00001A5C 3205                       		move.w	d5,d1
00001A5E 3E06                       		move.w	d6,d7
00001A60 9E4D                       		sub.w	a5,d7
00001A62 6400                       		bcc.s	loc_1856
00001A64 3C07                       		move.w	d7,d6
00001A66 0646 0010                  		addi.w	#$10,d6
00001A6A 4447                       		neg.w	d7
00001A6C EF69                       		lsl.w	d7,d1
00001A6E 1A10                       		move.b	(a0),d5
00001A70 EF3D                       		rol.b	d7,d5
00001A72 DE47                       		add.w	d7,d7
00001A74 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A78 D245                       		add.w	d5,d1
00001A7A                            
00001A7A                            loc_1844:				; XREF: loc_1868
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 1A18                       		move.b	(a0)+,d5
00001A86 E14D                       		lsl.w	#8,d5
00001A88 1A18                       		move.b	(a0)+,d5
00001A8A 4E75                       		rts	
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1856:				; XREF: loc_1826
00001A8C 6700                       		beq.s	loc_1868
00001A8E EE69                       		lsr.w	d7,d1
00001A90 300D                       		move.w	a5,d0
00001A92 D040                       		add.w	d0,d0
00001A94 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A98 D243                       		add.w	d3,d1
00001A9A 300D                       		move.w	a5,d0
00001A9C 6000                       		bra.s	sub_188C
00001A9E                            ; ===========================================================================
00001A9E                            
00001A9E                            loc_1868:				; XREF: loc_1856
00001A9E 7C10                       		moveq	#$10,d6
00001AA0                            
00001AA0                            loc_186A:
00001AA0 60D8                       		bra.s	loc_1844
00001AA2                            ; ===========================================================================
00001AA2 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AB8 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AC2                            
00001AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC2                            
00001AC2                            
00001AC2                            sub_188C:				; XREF: EniDec
00001AC2 9C40                       		sub.w	d0,d6
00001AC4 0C46 0009                  		cmpi.w	#9,d6
00001AC8 6400                       		bcc.s	locret_189A
00001ACA 5046                       		addq.w	#8,d6
00001ACC E145                       		asl.w	#8,d5
00001ACE 1A18                       		move.b	(a0)+,d5
00001AD0                            
00001AD0                            locret_189A:
00001AD0 4E75                       		rts	
00001AD2                            ; End of function sub_188C
00001AD2                            
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            ; Kosinski decompression algorithm
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            
00001AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AD2                            
00001AD2                            
00001AD2                            KosDec:
00001AD2                            
00001AD2 =FFFFFFFE                  var_2		= -2
00001AD2 =FFFFFFFF                  var_1		= -1
00001AD2                            
00001AD2 558F                       		subq.l	#2,sp
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18A8:
00001ADE E24D                       		lsr.w	#1,d5
00001AE0 40C6                       		move	sr,d6
00001AE2 51CC 0000                  		dbf	d4,loc_18BA
00001AE6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AEA 1E98                       		move.b	(a0)+,(sp)
00001AEC 3A17                       		move.w	(sp),d5
00001AEE 780F                       		moveq	#$F,d4
00001AF0                            
00001AF0                            loc_18BA:
00001AF0 44C6                       		move	d6,ccr
00001AF2 6400                       		bcc.s	loc_18C2
00001AF4 12D8                       		move.b	(a0)+,(a1)+
00001AF6 60E6                       		bra.s	loc_18A8
00001AF8                            ; ===========================================================================
00001AF8                            
00001AF8                            loc_18C2:				; XREF: KosDec
00001AF8 7600                       		moveq	#0,d3
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 40C6                       		move	sr,d6
00001AFE 51CC 0000                  		dbf	d4,loc_18D6
00001B02 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B06 1E98                       		move.b	(a0)+,(sp)
00001B08 3A17                       		move.w	(sp),d5
00001B0A 780F                       		moveq	#$F,d4
00001B0C                            
00001B0C                            loc_18D6:
00001B0C 44C6                       		move	d6,ccr
00001B0E 6500                       		bcs.s	loc_1906
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18EA
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18EA:
00001B20 E353                       		roxl.w	#1,d3
00001B22 E24D                       		lsr.w	#1,d5
00001B24 51CC 0000                  		dbf	d4,loc_18FC
00001B28 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B2C 1E98                       		move.b	(a0)+,(sp)
00001B2E 3A17                       		move.w	(sp),d5
00001B30 780F                       		moveq	#$F,d4
00001B32                            
00001B32                            loc_18FC:
00001B32 E353                       		roxl.w	#1,d3
00001B34 5243                       		addq.w	#1,d3
00001B36 74FF                       		moveq	#-1,d2
00001B38 1418                       		move.b	(a0)+,d2
00001B3A 6000                       		bra.s	loc_191C
00001B3C                            ; ===========================================================================
00001B3C                            
00001B3C                            loc_1906:				; XREF: loc_18C2
00001B3C 1018                       		move.b	(a0)+,d0
00001B3E 1218                       		move.b	(a0)+,d1
00001B40 74FF                       		moveq	#-1,d2
00001B42 1401                       		move.b	d1,d2
00001B44 EB4A                       		lsl.w	#5,d2
00001B46 1400                       		move.b	d0,d2
00001B48 0241 0007                  		andi.w	#7,d1
00001B4C 6700                       		beq.s	loc_1928
00001B4E 1601                       		move.b	d1,d3
00001B50 5243                       		addq.w	#1,d3
00001B52                            
00001B52                            loc_191C:
00001B52 1031 2000                  		move.b	(a1,d2.w),d0
00001B56 12C0                       		move.b	d0,(a1)+
00001B58 51CB FFF8                  		dbf	d3,loc_191C
00001B5C 6080                       		bra.s	loc_18A8
00001B5E                            ; ===========================================================================
00001B5E                            
00001B5E                            loc_1928:				; XREF: loc_1906
00001B5E 1218                       		move.b	(a0)+,d1
00001B60 6700                       		beq.s	loc_1938
00001B62 0C01 0001                  		cmpi.b	#1,d1
00001B66 6700 FF76                  		beq.w	loc_18A8
00001B6A 1601                       		move.b	d1,d3
00001B6C 60E4                       		bra.s	loc_191C
00001B6E                            ; ===========================================================================
00001B6E                            
00001B6E                            loc_1938:				; XREF: loc_1928
00001B6E 548F                       		addq.l	#2,sp
00001B70 4E75                       		rts	
00001B72                            ; End of function KosDec
00001B72                            
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routine loading subroutine
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            
00001B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B72                            
00001B72                            
00001B72                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B72 7400                       		moveq	#0,d2
00001B74 7000                       		moveq	#0,d0
00001B76 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B7A D040                       		add.w	d0,d0		; multiply by 2
00001B7C 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B80 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B84                            ; End of function PalCycle_Load
00001B84                            
00001B84                            ; ===========================================================================
00001B84                            ; ---------------------------------------------------------------------------
00001B84                            ; Pallet cycling routines
00001B84                            ; ---------------------------------------------------------------------------
00001B84 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B86 0000                       		dc.w PalCycle_LZ-PalCycle
00001B88 0000                       		dc.w PalCycle_MZ-PalCycle
00001B8A 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B8C 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B8E 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B90 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B92                            
00001B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B92                            
00001B92                            
00001B92                            PalCycle_Title:				; XREF: TitleScreen
00001B92 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B98 6000                       		bra.s	loc_196A
00001B9A                            ; ===========================================================================
00001B9A                            
00001B9A                            PalCycle_GHZ:				; XREF: PalCycle
00001B9A 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001BA0                            
00001BA0                            loc_196A:				; XREF: PalCycle_Title
00001BA0 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BA4 6A00                       		bpl.s	locret_1990
00001BA6 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BAC 3038 F632                  		move.w	($FFFFF632).w,d0
00001BB0 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BB4 0240 0003                  		andi.w	#3,d0
00001BB8 E748                       		lsl.w	#3,d0
00001BBA 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BBE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BC2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BC6                            
00001BC6                            locret_1990:
00001BC6 4E75                       		rts	
00001BC8                            ; End of function PalCycle_Title
00001BC8                            
00001BC8                            
00001BC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BC8                            
00001BC8                            
00001BC8                            PalCycle_LZ:				; XREF: PalCycle
00001BC8 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BCC 6A00                       		bpl.s	loc_19D8
00001BCE 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BD4 3038 F632                  		move.w	($FFFFF632).w,d0
00001BD8 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BDC 0240 0003                  		andi.w	#3,d0
00001BE0 E748                       		lsl.w	#3,d0
00001BE2 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BE8 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BEE 6600                       		bne.s	loc_19C0
00001BF0 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BF6                            
00001BF6                            loc_19C0:
00001BF6 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BFA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BFE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C02 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001C06 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C0A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C0E                            
00001C0E                            loc_19D8:
00001C0E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C12 0240 0007                  		andi.w	#7,d0
00001C16 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C1A 6700                       		beq.s	locret_1A3A
00001C1C 7201                       		moveq	#1,d1
00001C1E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C22 6700                       		beq.s	loc_19F0
00001C24 4441                       		neg.w	d1
00001C26                            
00001C26                            loc_19F0:
00001C26 3038 F650                  		move.w	($FFFFF650).w,d0
00001C2A 0240 0003                  		andi.w	#3,d0
00001C2E D041                       		add.w	d1,d0
00001C30 0C40 0003                  		cmpi.w	#3,d0
00001C34 6500                       		bcs.s	loc_1A0A
00001C36 3200                       		move.w	d0,d1
00001C38 7000                       		moveq	#0,d0
00001C3A 4A41                       		tst.w	d1
00001C3C 6A00                       		bpl.s	loc_1A0A
00001C3E 7002                       		moveq	#2,d0
00001C40                            
00001C40                            loc_1A0A:
00001C40 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C44 D040                       		add.w	d0,d0
00001C46 3200                       		move.w	d0,d1
00001C48 D040                       		add.w	d0,d0
00001C4A D041                       		add.w	d1,d0
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C52 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C64 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C68 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C6C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C70                            
00001C70                            locret_1A3A:
00001C70 4E75                       		rts	
00001C72                            ; End of function PalCycle_LZ
00001C72                            
00001C72                            ; ===========================================================================
00001C72 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C7A                            ; ===========================================================================
00001C7A                            
00001C7A                            PalCycle_MZ:				; XREF: PalCycle
00001C7A 4E75                       		rts	
00001C7C                            
00001C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C7C                            
00001C7C                            
00001C7C                            PalCycle_SLZ:				; XREF: PalCycle
00001C7C 4E75                       		rts	
00001C7E                            ; End of function PalCycle_SLZ
00001C7E                            
00001C7E                            
00001C7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C7E                            
00001C7E                            
00001C7E                            PalCycle_SYZ:				; XREF: PalCycle
00001C7E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C82 6A00                       		bpl.s	locret_1AC6
00001C84 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C8A 3038 F632                  		move.w	($FFFFF632).w,d0
00001C8E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C92 0240 0003                  		andi.w	#3,d0
00001C96 E548                       		lsl.w	#2,d0
00001C98 3200                       		move.w	d0,d1
00001C9A D040                       		add.w	d0,d0
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CA2 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CA6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CAA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CAE 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CB4 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CB8 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CBC 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CC2                            
00001CC2                            locret_1AC6:
00001CC2 4E75                       		rts	
00001CC4                            ; End of function PalCycle_SYZ
00001CC4                            
00001CC4                            
00001CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CC4                            
00001CC4                            
00001CC4                            PalCycle_SBZ:				; XREF: PalCycle
00001CC4 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CCA 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CCE 6700                       		beq.s	loc_1ADA
00001CD0 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CD6                            
00001CD6                            loc_1ADA:
00001CD6 43F8 F650                  		lea	($FFFFF650).w,a1
00001CDA 321A                       		move.w	(a2)+,d1
00001CDC                            
00001CDC                            loc_1AE0:
00001CDC 5311                       		subq.b	#1,(a1)
00001CDE 6B00                       		bmi.s	loc_1AEA
00001CE0 5489                       		addq.l	#2,a1
00001CE2 5C8A                       		addq.l	#6,a2
00001CE4 6000                       		bra.s	loc_1B06
00001CE6                            ; ===========================================================================
00001CE6                            
00001CE6                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CE6 12DA                       		move.b	(a2)+,(a1)+
00001CE8 1011                       		move.b	(a1),d0
00001CEA 5200                       		addq.b	#1,d0
00001CEC B01A                       		cmp.b	(a2)+,d0
00001CEE 6500                       		bcs.s	loc_1AF6
00001CF0 7000                       		moveq	#0,d0
00001CF2                            
00001CF2                            loc_1AF6:
00001CF2 12C0                       		move.b	d0,(a1)+
00001CF4 0240 000F                  		andi.w	#$F,d0
00001CF8 D040                       		add.w	d0,d0
00001CFA 305A                       		movea.w	(a2)+,a0
00001CFC 365A                       		movea.w	(a2)+,a3
00001CFE 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D02                            
00001D02                            loc_1B06:				; XREF: PalCycle_SBZ
00001D02 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D06 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D0A 6A00                       		bpl.s	locret_1B64
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D12 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D18 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D1C 6700                       		beq.s	loc_1B2E
00001D1E 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D24 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D2A                            
00001D2A                            loc_1B2E:
00001D2A 72FF                       		moveq	#-1,d1
00001D2C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D30 6700                       		beq.s	loc_1B38
00001D32 4441                       		neg.w	d1
00001D34                            
00001D34                            loc_1B38:
00001D34 3038 F632                  		move.w	($FFFFF632).w,d0
00001D38 0240 0003                  		andi.w	#3,d0
00001D3C D041                       		add.w	d1,d0
00001D3E 0C40 0003                  		cmpi.w	#3,d0
00001D42 6500                       		bcs.s	loc_1B52
00001D44 3200                       		move.w	d0,d1
00001D46 7000                       		moveq	#0,d0
00001D48 4A41                       		tst.w	d1
00001D4A 6A00                       		bpl.s	loc_1B52
00001D4C 7002                       		moveq	#2,d0
00001D4E                            
00001D4E                            loc_1B52:
00001D4E 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D52 D040                       		add.w	d0,d0
00001D54 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D58 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D60                            
00001D60                            locret_1B64:
00001D60 4E75                       		rts	
00001D62                            ; End of function PalCycle_SBZ
00001D62                            
00001D62                            ; ===========================================================================
00001D62                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D82                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DA2                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DC2                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DD4                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DE6                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E4E                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E72                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E92                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EA2                            
00001EA2                            Pal_SBZCycList:
00001EA2                            	include "_inc\SBZ pallet script 1.asm"
00001EA2                            ; ---------------------------------------------------------------------------
00001EA2                            ; Scrap Brain Zone 1 pallet cycling script
00001EA2                            ; ---------------------------------------------------------------------------
00001EA2 0008                       	dc.w 8			; number of entries - 1
00001EA4 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001EA6 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001EA8 FB50                       	dc.w $FB50		; RAM address
00001EAA 0D08                       	dc.b $D, 8
00001EAC 0000                       	dc.w Pal_SBZCyc2
00001EAE FB52                       	dc.w $FB52
00001EB0 0E08                       	dc.b $E, 8
00001EB2 0000                       	dc.w Pal_SBZCyc3
00001EB4 FB6E                       	dc.w $FB6E
00001EB6 0B08                       	dc.b $B, 8
00001EB8 0000                       	dc.w Pal_SBZCyc5
00001EBA FB70                       	dc.w $FB70
00001EBC 0708                       	dc.b 7,	8
00001EBE 0000                       	dc.w Pal_SBZCyc6
00001EC0 FB72                       	dc.w $FB72
00001EC2 1C10                       	dc.b $1C, $10
00001EC4 0000                       	dc.w Pal_SBZCyc7
00001EC6 FB7E                       	dc.w $FB7E
00001EC8 0303                       	dc.b 3,	3
00001ECA 0000                       	dc.w Pal_SBZCyc8
00001ECC FB78                       	dc.w $FB78
00001ECE 0303                       	dc.b 3,	3
00001ED0 0000                       	dc.w Pal_SBZCyc8+2
00001ED2 FB7A                       	dc.w $FB7A
00001ED4 0303                       	dc.b 3,	3
00001ED6 0000                       	dc.w Pal_SBZCyc8+4
00001ED8 FB7C                       	dc.w $FB7C
00001EDA                            	even
00001EDA                            	even
00001EDA                            
00001EDA                            Pal_SBZCycList2:
00001EDA                            	include "_inc\SBZ pallet script 2.asm"
00001EDA                            ; ---------------------------------------------------------------------------
00001EDA                            ; Scrap Brain Zone 2 pallet cycling script
00001EDA                            ; ---------------------------------------------------------------------------
00001EDA 0006                       	dc.w 6
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc1
00001EE0 FB50                       	dc.w $FB50
00001EE2 0D08                       	dc.b $D, 8
00001EE4 0000                       	dc.w Pal_SBZCyc2
00001EE6 FB52                       	dc.w $FB52
00001EE8 0908                       	dc.b 9,	8
00001EEA 0000                       	dc.w Pal_SBZCyc9
00001EEC FB70                       	dc.w $FB70
00001EEE 0708                       	dc.b 7,	8
00001EF0 0000                       	dc.w Pal_SBZCyc6
00001EF2 FB72                       	dc.w $FB72
00001EF4 0303                       	dc.b 3,	3
00001EF6 0000                       	dc.w Pal_SBZCyc8
00001EF8 FB78                       	dc.w $FB78
00001EFA 0303                       	dc.b 3,	3
00001EFC 0000                       	dc.w Pal_SBZCyc8+2
00001EFE FB7A                       	dc.w $FB7A
00001F00 0303                       	dc.b 3,	3
00001F02 0000                       	dc.w Pal_SBZCyc8+4
00001F04 FB7C                       	dc.w $FB7C
00001F06                            	even
00001F06                            	even
00001F06                            
00001F06                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F16                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F26                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F36                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F42                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F52                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F62                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F82                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F8C                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F9C                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FA8                            ; ---------------------------------------------------------------------------
00001FA8                            ; Subroutine to	fade out and fade in
00001FA8                            ; ---------------------------------------------------------------------------
00001FA8                            
00001FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FA8                            
00001FA8                            
00001FA8                            Pal_FadeTo:
00001FA8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FAE                            
00001FAE                            Pal_FadeTo2:
00001FAE 7000                       		moveq	#0,d0
00001FB0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB4 1038 F626                  		move.b	($FFFFF626).w,d0
00001FB8 D0C0                       		adda.w	d0,a0
00001FBA 7200                       		moveq	#0,d1
00001FBC 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC0                            
00001FC0                            Pal_ToBlack:
00001FC0 30C1                       		move.w	d1,(a0)+
00001FC2 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FC6                            
00001FC6 383C 0015                  		move.w	#$15,d4
00001FCA 1A3C 0005                  		move.b	#5,d5
00001FCE                            
00001FCE                            loc_1DCE:
00001FCE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FD4 6100 0000                  		bsr.w	DelayProgram
00001FD8 5305                       		subi.b	#1,d5
00001FDA 4A05                       		tst.b	d5
00001FDC 66F0                       		bne.s	loc_1DCE
00001FDE 6100                       		bsr.s	Pal_FadeIn
00001FE0 6100 F840                  		bsr.w	RunPLC_RAM
00001FE4 1A3C 0005                  		move.b	#5,d5
00001FE8 51CC FFE4                  		dbf	d4,loc_1DCE
00001FEC 4E75                       		rts	
00001FEE                            ; End of function Pal_FadeTo
00001FEE                            
00001FEE                            ; ---------------------------------------------------------------------------
00001FEE                            ; Pallet fade-in subroutine
00001FEE                            ; ---------------------------------------------------------------------------
00001FEE                            
00001FEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FEE                            
00001FEE                            
00001FEE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FEE 7000                       		moveq	#0,d0
00001FF0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FF4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FF8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FFC D0C0                       		adda.w	d0,a0
00001FFE D2C0                       		adda.w	d0,a1
00002000 1038 F627                  		move.b	($FFFFF627).w,d0
00002004                            
00002004                            loc_1DFA:
00002004 6100                       		bsr.s	Pal_AddColor
00002006 51C8 FFFC                  		dbf	d0,loc_1DFA
0000200A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002010 6600                       		bne.s	locret_1E24
00002012 7000                       		moveq	#0,d0
00002014 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002018 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000201C 1038 F626                  		move.b	($FFFFF626).w,d0
00002020 D0C0                       		adda.w	d0,a0
00002022 D2C0                       		adda.w	d0,a1
00002024 1038 F627                  		move.b	($FFFFF627).w,d0
00002028                            
00002028                            loc_1E1E:
00002028 6100                       		bsr.s	Pal_AddColor
0000202A 51C8 FFFC                  		dbf	d0,loc_1E1E
0000202E                            
0000202E                            locret_1E24:
0000202E 4E75                       		rts	
00002030                            ; End of function Pal_FadeIn
00002030                            
00002030                            
00002030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002030                            
00002030                            
00002030                            Pal_AddColor:				; XREF: Pal_FadeIn
00002030 3419                       		move.w	(a1)+,d2
00002032 3610                       		move.w	(a0),d3
00002034 B642                       		cmp.w	d2,d3
00002036 6700                       		beq.s	loc_1E4E
00002038 3203                       		move.w	d3,d1
0000203A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000203E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002040 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002042 30C1                       		move.w	d1,(a0)+	; update pallet
00002044 4E75                       		rts	
00002046                            ; ===========================================================================
00002046                            
00002046                            Pal_AddGreen:				; XREF: Pal_AddColor
00002046 3203                       		move.w	d3,d1
00002048 0641 0020                  		addi.w	#$20,d1		; increase green value
0000204C B242                       		cmp.w	d2,d1
0000204E 6200                       		bhi.s	Pal_AddRed
00002050 30C1                       		move.w	d1,(a0)+	; update pallet
00002052 4E75                       		rts	
00002054                            ; ===========================================================================
00002054                            
00002054                            Pal_AddRed:				; XREF: Pal_AddGreen
00002054 5458                       		addq.w	#2,(a0)+	; increase red value
00002056 4E75                       		rts	
00002058                            ; ===========================================================================
00002058                            
00002058                            loc_1E4E:				; XREF: Pal_AddColor
00002058 5448                       		addq.w	#2,a0
0000205A 4E75                       		rts	
0000205C                            ; End of function Pal_AddColor
0000205C                            
0000205C                            
0000205C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205C                            
0000205C                            
0000205C                            Pal_FadeFrom:
0000205C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002062 383C 0015                  		move.w	#$15,d4
00002066 1A3C 0005                  		move.b	#5,d5
0000206A                            
0000206A                            loc_1E5C:
0000206A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002070 6100 0000                  		bsr.w	DelayProgram
00002074 5305                       		subi.b	#1,d5
00002076 4A05                       		tst.b	d5
00002078 66F0                       		bne.s	loc_1E5C
0000207A 6100                       		bsr.s	Pal_FadeOut
0000207C 6100 F7A4                  		bsr.w	RunPLC_RAM
00002080 1A3C 0005                  		move.b	#5,d5
00002084 51CC FFE4                  		dbf	d4,loc_1E5C
00002088 4E75                       		rts	
0000208A                            ; End of function Pal_FadeFrom
0000208A                            
0000208A                            ; ---------------------------------------------------------------------------
0000208A                            ; Pallet fade-out subroutine
0000208A                            ; ---------------------------------------------------------------------------
0000208A                            
0000208A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208A                            
0000208A                            
0000208A                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000208A 7000                       		moveq	#0,d0
0000208C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002090 1038 F626                  		move.b	($FFFFF626).w,d0
00002094 D0C0                       		adda.w	d0,a0
00002096 1038 F627                  		move.b	($FFFFF627).w,d0
0000209A                            
0000209A                            loc_1E82:
0000209A 6100                       		bsr.s	Pal_DecColor
0000209C 51C8 FFFC                  		dbf	d0,loc_1E82
000020A0                            
000020A0 7000                       		moveq	#0,d0
000020A2 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020A6 1038 F626                  		move.b	($FFFFF626).w,d0
000020AA D0C0                       		adda.w	d0,a0
000020AC 1038 F627                  		move.b	($FFFFF627).w,d0
000020B0                            
000020B0                            loc_1E98:
000020B0 6100                       		bsr.s	Pal_DecColor
000020B2 51C8 FFFC                  		dbf	d0,loc_1E98
000020B6 4E75                       		rts	
000020B8                            ; End of function Pal_FadeOut
000020B8                            
000020B8                            
000020B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020B8                            
000020B8                            
000020B8                            Pal_DecColor:				; XREF: Pal_FadeOut
000020B8 3410                       		move.w	(a0),d2
000020BA 6700                       		beq.s	loc_1ECC
000020BC 3202                       		move.w	d2,d1
000020BE 0241 000E                  		andi.w	#$E,d1
000020C2 6700                       		beq.s	Pal_DecGreen
000020C4 5558                       		subq.w	#2,(a0)+	; decrease red value
000020C6 4E75                       		rts	
000020C8                            ; ===========================================================================
000020C8                            
000020C8                            Pal_DecGreen:				; XREF: Pal_DecColor
000020C8 3202                       		move.w	d2,d1
000020CA 0241 00E0                  		andi.w	#$E0,d1
000020CE 6700                       		beq.s	Pal_DecBlue
000020D0 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020D4 4E75                       		rts	
000020D6                            ; ===========================================================================
000020D6                            
000020D6                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020D6 3202                       		move.w	d2,d1
000020D8 0241 0E00                  		andi.w	#$E00,d1
000020DC 6700                       		beq.s	loc_1ECC
000020DE 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020E2 4E75                       		rts	
000020E4                            ; ===========================================================================
000020E4                            
000020E4                            loc_1ECC:				; XREF: Pal_DecColor
000020E4 5448                       		addq.w	#2,a0
000020E6 4E75                       		rts	
000020E8                            ; End of function Pal_DecColor
000020E8                            
000020E8                            ; ---------------------------------------------------------------------------
000020E8                            ; Subroutine to	fill the pallet	with white (special stage)
000020E8                            ; ---------------------------------------------------------------------------
000020E8                            
000020E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E8                            
000020E8                            
000020E8                            Pal_MakeWhite:				; XREF: SpecialStage
000020E8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020EE 7000                       		moveq	#0,d0
000020F0 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020F4 1038 F626                  		move.b	($FFFFF626).w,d0
000020F8 D0C0                       		adda.w	d0,a0
000020FA 323C 0EEE                  		move.w	#$EEE,d1
000020FE 1038 F627                  		move.b	($FFFFF627).w,d0
00002102                            
00002102                            PalWhite_Loop:
00002102 30C1                       		move.w	d1,(a0)+
00002104 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002108 383C 0015                  		move.w	#$15,d4
0000210C 1A3C 0005                  		move.b	#5,d5
00002110                            
00002110                            loc_1EF4:
00002110 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002116 6100 0000                  		bsr.w	DelayProgram
0000211A 5305                       		subi.b	#1,d5
0000211C 4A05                       		tst.b	d5
0000211E 66F0                       		bne.s	loc_1EF4
00002120 6100                       		bsr.s	Pal_WhiteToBlack
00002122 6100 F6FE                  		bsr.w	RunPLC_RAM
00002126 1A3C 0005                  		move.b	#5,d5
0000212A 51CC FFE4                  		dbf	d4,loc_1EF4
0000212E 4E75                       		rts	
00002130                            ; End of function Pal_MakeWhite
00002130                            
00002130                            
00002130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002130                            
00002130                            
00002130                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00002130 7000                       		moveq	#0,d0
00002132 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002136 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000213A 1038 F626                  		move.b	($FFFFF626).w,d0
0000213E D0C0                       		adda.w	d0,a0
00002140 D2C0                       		adda.w	d0,a1
00002142 1038 F627                  		move.b	($FFFFF627).w,d0
00002146                            
00002146                            loc_1F20:
00002146 6100                       		bsr.s	Pal_DecColor2
00002148 51C8 FFFC                  		dbf	d0,loc_1F20
0000214C                            
0000214C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002152 6600                       		bne.s	locret_1F4A
00002154 7000                       		moveq	#0,d0
00002156 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000215A 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000215E 1038 F626                  		move.b	($FFFFF626).w,d0
00002162 D0C0                       		adda.w	d0,a0
00002164 D2C0                       		adda.w	d0,a1
00002166 1038 F627                  		move.b	($FFFFF627).w,d0
0000216A                            
0000216A                            loc_1F44:
0000216A 6100                       		bsr.s	Pal_DecColor2
0000216C 51C8 FFFC                  		dbf	d0,loc_1F44
00002170                            
00002170                            locret_1F4A:
00002170 4E75                       		rts	
00002172                            ; End of function Pal_WhiteToBlack
00002172                            
00002172                            
00002172                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002172                            
00002172                            
00002172                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002172 3419                       		move.w	(a1)+,d2
00002174 3610                       		move.w	(a0),d3
00002176 B642                       		cmp.w	d2,d3
00002178 6700                       		beq.s	loc_1F78
0000217A 3203                       		move.w	d3,d1
0000217C 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002180 6500                       		bcs.s	loc_1F64
00002182 B242                       		cmp.w	d2,d1
00002184 6500                       		bcs.s	loc_1F64
00002186 30C1                       		move.w	d1,(a0)+
00002188 4E75                       		rts	
0000218A                            ; ===========================================================================
0000218A                            
0000218A                            loc_1F64:				; XREF: Pal_DecColor2
0000218A 3203                       		move.w	d3,d1
0000218C 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002190 6500                       		bcs.s	loc_1F74
00002192 B242                       		cmp.w	d2,d1
00002194 6500                       		bcs.s	loc_1F74
00002196 30C1                       		move.w	d1,(a0)+
00002198 4E75                       		rts	
0000219A                            ; ===========================================================================
0000219A                            
0000219A                            loc_1F74:				; XREF: loc_1F64
0000219A 5558                       		subq.w	#2,(a0)+	; decrease red value
0000219C 4E75                       		rts	
0000219E                            ; ===========================================================================
0000219E                            
0000219E                            loc_1F78:				; XREF: Pal_DecColor2
0000219E 5448                       		addq.w	#2,a0
000021A0 4E75                       		rts	
000021A2                            ; End of function Pal_DecColor2
000021A2                            
000021A2                            ; ---------------------------------------------------------------------------
000021A2                            ; Subroutine to	make a white flash when	you enter a special stage
000021A2                            ; ---------------------------------------------------------------------------
000021A2                            
000021A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A2                            
000021A2                            
000021A2                            Pal_MakeFlash:				; XREF: SpecialStage
000021A2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000021A8 383C 0015                  		move.w	#$15,d4
000021AC 1A3C 0005                  		move.b	#5,d5
000021B0                            
000021B0                            loc_1F86:
000021B0 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021B6 6100 0000                  		bsr.w	DelayProgram
000021BA 5305                       		subi.b	#1,d5
000021BC 4A05                       		tst.b	d5
000021BE 66F0                       		bne.s	loc_1F86
000021C0 6100                       		bsr.s	Pal_ToWhite
000021C2 6100 F65E                  		bsr.w	RunPLC_RAM
000021C6 1A3C 0005                  		move.b	#5,d5
000021CA 51CC FFE4                  		dbf	d4,loc_1F86
000021CE 4E75                       		rts	
000021D0                            ; End of function Pal_MakeFlash
000021D0                            
000021D0                            
000021D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D0                            
000021D0                            
000021D0                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021D0 7000                       		moveq	#0,d0
000021D2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021D6 1038 F626                  		move.b	($FFFFF626).w,d0
000021DA D0C0                       		adda.w	d0,a0
000021DC 1038 F627                  		move.b	($FFFFF627).w,d0
000021E0                            
000021E0                            loc_1FAC:
000021E0 6100                       		bsr.s	Pal_AddColor2
000021E2 51C8 FFFC                  		dbf	d0,loc_1FAC
000021E6 7000                       		moveq	#0,d0
000021E8 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021EC 1038 F626                  		move.b	($FFFFF626).w,d0
000021F0 D0C0                       		adda.w	d0,a0
000021F2 1038 F627                  		move.b	($FFFFF627).w,d0
000021F6                            
000021F6                            loc_1FC2:
000021F6 6100                       		bsr.s	Pal_AddColor2
000021F8 51C8 FFFC                  		dbf	d0,loc_1FC2
000021FC 4E75                       		rts	
000021FE                            ; End of function Pal_ToWhite
000021FE                            
000021FE                            
000021FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021FE                            
000021FE                            
000021FE                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021FE 3410                       		move.w	(a0),d2
00002200 0C42 0EEE                  		cmpi.w	#$EEE,d2
00002204 6700                       		beq.s	loc_2006
00002206 3202                       		move.w	d2,d1
00002208 0241 000E                  		andi.w	#$E,d1
0000220C 0C41 000E                  		cmpi.w	#$E,d1
00002210 6700                       		beq.s	loc_1FE2
00002212 5458                       		addq.w	#2,(a0)+	; increase red value
00002214 4E75                       		rts	
00002216                            ; ===========================================================================
00002216                            
00002216                            loc_1FE2:				; XREF: Pal_AddColor2
00002216 3202                       		move.w	d2,d1
00002218 0241 00E0                  		andi.w	#$E0,d1
0000221C 0C41 00E0                  		cmpi.w	#$E0,d1
00002220 6700                       		beq.s	loc_1FF4
00002222 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002226 4E75                       		rts	
00002228                            ; ===========================================================================
00002228                            
00002228                            loc_1FF4:				; XREF: loc_1FE2
00002228 3202                       		move.w	d2,d1
0000222A 0241 0E00                  		andi.w	#$E00,d1
0000222E 0C41 0E00                  		cmpi.w	#$E00,d1
00002232 6700                       		beq.s	loc_2006
00002234 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002238 4E75                       		rts	
0000223A                            ; ===========================================================================
0000223A                            
0000223A                            loc_2006:				; XREF: Pal_AddColor2
0000223A 5448                       		addq.w	#2,a0
0000223C 4E75                       		rts	
0000223E                            ; End of function Pal_AddColor2
0000223E                            
0000223E                            ; ---------------------------------------------------------------------------
0000223E                            ; Pallet cycling routine - Sega	logo
0000223E                            ; ---------------------------------------------------------------------------
0000223E                            
0000223E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223E                            
0000223E                            
0000223E                            PalCycle_Sega:				; XREF: SegaScreen
0000223E 4A38 F635                  		tst.b	($FFFFF635).w
00002242 6600                       		bne.s	loc_206A
00002244 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002248 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000224E 7205                       		moveq	#5,d1
00002250 3038 F632                  		move.w	($FFFFF632).w,d0
00002254                            
00002254                            loc_2020:
00002254 6A00                       		bpl.s	loc_202A
00002256 5448                       		addq.w	#2,a0
00002258 5341                       		subq.w	#1,d1
0000225A 5440                       		addq.w	#2,d0
0000225C 60F6                       		bra.s	loc_2020
0000225E                            ; ===========================================================================
0000225E                            
0000225E                            loc_202A:				; XREF: PalCycle_Sega
0000225E 3400                       		move.w	d0,d2
00002260 0242 001E                  		andi.w	#$1E,d2
00002264 6600                       		bne.s	loc_2034
00002266 5440                       		addq.w	#2,d0
00002268                            
00002268                            loc_2034:
00002268 0C40 0060                  		cmpi.w	#$60,d0
0000226C 6400                       		bcc.s	loc_203E
0000226E 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002272                            
00002272                            loc_203E:
00002272 5440                       		addq.w	#2,d0
00002274 51C9 FFE8                  		dbf	d1,loc_202A
00002278 3038 F632                  		move.w	($FFFFF632).w,d0
0000227C 5440                       		addq.w	#2,d0
0000227E 3400                       		move.w	d0,d2
00002280 0242 001E                  		andi.w	#$1E,d2
00002284 6600                       		bne.s	loc_2054
00002286 5440                       		addq.w	#2,d0
00002288                            
00002288                            loc_2054:
00002288 0C40 0064                  		cmpi.w	#$64,d0
0000228C 6D00                       		blt.s	loc_2062
0000228E 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002294 70F4                       		moveq	#-$C,d0
00002296                            
00002296                            loc_2062:
00002296 31C0 F632                  		move.w	d0,($FFFFF632).w
0000229A 7001                       		moveq	#1,d0
0000229C 4E75                       		rts	
0000229E                            ; ===========================================================================
0000229E                            
0000229E                            loc_206A:				; XREF: loc_202A
0000229E 5338 F634                  		subq.b	#1,($FFFFF634).w
000022A2 6A00                       		bpl.s	loc_20BC
000022A4 11FC 0004 F634             		move.b	#4,($FFFFF634).w
000022AA 3038 F632                  		move.w	($FFFFF632).w,d0
000022AE 0640 000C                  		addi.w	#$C,d0
000022B2 0C40 0030                  		cmpi.w	#$30,d0
000022B6 6500                       		bcs.s	loc_2088
000022B8 7000                       		moveq	#0,d0
000022BA 4E75                       		rts	
000022BC                            ; ===========================================================================
000022BC                            
000022BC                            loc_2088:				; XREF: loc_206A
000022BC 31C0 F632                  		move.w	d0,($FFFFF632).w
000022C0 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022C6 41F0 0000                  		lea	(a0,d0.w),a0
000022CA 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022CE 22D8                       		move.l	(a0)+,(a1)+
000022D0 22D8                       		move.l	(a0)+,(a1)+
000022D2 3298                       		move.w	(a0)+,(a1)
000022D4 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022D8 7000                       		moveq	#0,d0
000022DA 722C                       		moveq	#$2C,d1
000022DC                            
000022DC                            loc_20A8:
000022DC 3400                       		move.w	d0,d2
000022DE 0242 001E                  		andi.w	#$1E,d2
000022E2 6600                       		bne.s	loc_20B2
000022E4 5440                       		addq.w	#2,d0
000022E6                            
000022E6                            loc_20B2:
000022E6 3390 0000                  		move.w	(a0),(a1,d0.w)
000022EA 5440                       		addq.w	#2,d0
000022EC 51C9 FFEE                  		dbf	d1,loc_20A8
000022F0                            
000022F0                            loc_20BC:
000022F0 7001                       		moveq	#1,d0
000022F2 4E75                       		rts	
000022F4                            ; End of function PalCycle_Sega
000022F4                            
000022F4                            ; ===========================================================================
000022F4                            
000022F4                            Pal_Sega1:	incbin	pallet\sega1.bin
00002300                            Pal_Sega2:	incbin	pallet\sega2.bin
00002330                            
00002330                            ; ---------------------------------------------------------------------------
00002330                            ; Subroutines to load pallets
00002330                            ; ---------------------------------------------------------------------------
00002330                            
00002330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002330                            
00002330                            
00002330                            PalLoad1:
00002330 43F9 0000 0000             		lea	(PalPointers).l,a1
00002336 E748                       		lsl.w	#3,d0
00002338 D2C0                       		adda.w	d0,a1
0000233A 2459                       		movea.l	(a1)+,a2
0000233C 3659                       		movea.w	(a1)+,a3
0000233E D6FC 0080                  		adda.w	#$80,a3
00002342 3E19                       		move.w	(a1)+,d7
00002344                            
00002344                            loc_2110:
00002344 26DA                       		move.l	(a2)+,(a3)+
00002346 51CF FFFC                  		dbf	d7,loc_2110
0000234A 4E75                       		rts	
0000234C                            ; End of function PalLoad1
0000234C                            
0000234C                            
0000234C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234C                            
0000234C                            
0000234C                            PalLoad2:
0000234C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002352 E748                       		lsl.w	#3,d0
00002354 D2C0                       		adda.w	d0,a1
00002356 2459                       		movea.l	(a1)+,a2
00002358 3659                       		movea.w	(a1)+,a3
0000235A 3E19                       		move.w	(a1)+,d7
0000235C                            
0000235C                            loc_2128:
0000235C 26DA                       		move.l	(a2)+,(a3)+
0000235E 51CF FFFC                  		dbf	d7,loc_2128
00002362 4E75                       		rts	
00002364                            ; End of function PalLoad2
00002364                            
00002364                            ; ---------------------------------------------------------------------------
00002364                            ; Underwater pallet loading subroutine
00002364                            ; ---------------------------------------------------------------------------
00002364                            
00002364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002364                            
00002364                            
00002364                            PalLoad3_Water:
00002364 43F9 0000 0000             		lea	(PalPointers).l,a1
0000236A E748                       		lsl.w	#3,d0
0000236C D2C0                       		adda.w	d0,a1
0000236E 2459                       		movea.l	(a1)+,a2
00002370 3659                       		movea.w	(a1)+,a3
00002372 96FC 0080                  		suba.w	#$80,a3
00002376 3E19                       		move.w	(a1)+,d7
00002378                            
00002378                            loc_2144:
00002378 26DA                       		move.l	(a2)+,(a3)+
0000237A 51CF FFFC                  		dbf	d7,loc_2144
0000237E 4E75                       		rts	
00002380                            ; End of function PalLoad3_Water
00002380                            
00002380                            
00002380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002380                            
00002380                            
00002380                            PalLoad4_Water:
00002380 43F9 0000 0000             		lea	(PalPointers).l,a1
00002386 E748                       		lsl.w	#3,d0
00002388 D2C0                       		adda.w	d0,a1
0000238A 2459                       		movea.l	(a1)+,a2
0000238C 3659                       		movea.w	(a1)+,a3
0000238E 96FC 0100                  		suba.w	#$100,a3
00002392 3E19                       		move.w	(a1)+,d7
00002394                            
00002394                            loc_2160:
00002394 26DA                       		move.l	(a2)+,(a3)+
00002396 51CF FFFC                  		dbf	d7,loc_2160
0000239A 4E75                       		rts	
0000239C                            ; End of function PalLoad4_Water
0000239C                            
0000239C                            ; ===========================================================================
0000239C                            ; ---------------------------------------------------------------------------
0000239C                            ; Pallet pointers
0000239C                            ; ---------------------------------------------------------------------------
0000239C                            PalPointers:
0000239C                            	include "_inc\Pallet pointers.asm"
0000239C                            ; ---------------------------------------------------------------------------
0000239C                            ; Pallet pointers
0000239C                            ; ---------------------------------------------------------------------------
0000239C 0000 0000                  	dc.l Pal_SegaBG		; pallet address
000023A0 FB00                       	dc.w $FB00		; RAM address
000023A2 001F                       	dc.w $1F		; (pallet length / 2) - 1
000023A4 0000 0000                  	dc.l Pal_Title
000023A8 FB00                       	dc.w $FB00
000023AA 001F                       	dc.w $1F
000023AC 0000 0000                  	dc.l Pal_LevelSel
000023B0 FB00                       	dc.w $FB00
000023B2 001F                       	dc.w $1F
000023B4 0000 0000                  	dc.l Pal_Sonic
000023B8 FB00                       	dc.w $FB00
000023BA 0007                       	dc.w 7
000023BC 0000 0000                  	dc.l Pal_GHZ
000023C0 FB20                       	dc.w $FB20
000023C2 0017                       	dc.w $17
000023C4 0000 0000                  	dc.l Pal_LZ
000023C8 FB20                       	dc.w $FB20
000023CA 0017                       	dc.w $17
000023CC 0000 0000                  	dc.l Pal_MZ
000023D0 FB20                       	dc.w $FB20
000023D2 0017                       	dc.w $17
000023D4 0000 0000                  	dc.l Pal_SLZ
000023D8 FB20                       	dc.w $FB20
000023DA 0017                       	dc.w $17
000023DC 0000 0000                  	dc.l Pal_SYZ
000023E0 FB20                       	dc.w $FB20
000023E2 0017                       	dc.w $17
000023E4 0000 0000                  	dc.l Pal_SBZ1
000023E8 FB20                       	dc.w $FB20
000023EA 0017                       	dc.w $17
000023EC 0000 0000                  	dc.l Pal_Special
000023F0 FB00                       	dc.w $FB00
000023F2 001F                       	dc.w $1F
000023F4 0000 0000                  	dc.l Pal_LZWater
000023F8 FB00                       	dc.w $FB00
000023FA 001F                       	dc.w $1F
000023FC 0000 0000                  	dc.l Pal_SBZ3
00002400 FB20                       	dc.w $FB20
00002402 0017                       	dc.w $17
00002404 0000 0000                  	dc.l Pal_SBZ3Water
00002408 FB00                       	dc.w $FB00
0000240A 001F                       	dc.w $1F
0000240C 0000 0000                  	dc.l Pal_SBZ2
00002410 FB20                       	dc.w $FB20
00002412 0017                       	dc.w $17
00002414 0000 0000                  	dc.l Pal_LZSonWater
00002418 FB00                       	dc.w $FB00
0000241A 0007                       	dc.w 7
0000241C 0000 0000                  	dc.l Pal_SBZ3SonWat
00002420 FB00                       	dc.w $FB00
00002422 0007                       	dc.w 7
00002424 0000 0000                  	dc.l Pal_SpeResult
00002428 FB00                       	dc.w $FB00
0000242A 001F                       	dc.w $1F
0000242C 0000 0000                  	dc.l Pal_SpeContinue
00002430 FB00                       	dc.w $FB00
00002432 000F                       	dc.w $F
00002434 0000 0000                  	dc.l Pal_Ending
00002438 FB00                       	dc.w $FB00
0000243A 001F                       	dc.w $1F
0000243C 0000 0000                  	dc.l Pal_Idiot
00002440 FB20                       	dc.w $FB20
00002442 0007                       	dc.w 7
00002444 0000 0000                  	dc.l Pal_Gronic
00002448 FB00                       	dc.w $FB00
0000244A 0007                       	dc.w 7
0000244C 0000 0000                  	dc.l Pal_LZGroWater
00002450 FB00                       	dc.w $FB00
00002452 0007                       	dc.w 7
00002454 0000 0000                  	dc.l Pal_SBZ3GroWat
00002458 FB00                       	dc.w $FB00
0000245A 0007                       	dc.w 7
0000245C 0000 0000                  	dc.l Pal_Anakama
00002460 FB00                       	dc.w $FB00
00002462 0007                       	dc.w 7
00002462 0007                       	dc.w 7
00002464                            
00002464                            ; ---------------------------------------------------------------------------
00002464                            ; Pallet data
00002464                            ; ---------------------------------------------------------------------------
00002464                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024E4                            Pal_Title:	incbin	pallet\title.bin
00002564                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025E4                            Pal_Sonic:	incbin	pallet\sonic.bin
00002604                            Pal_GHZ:	incbin	pallet\ghz.bin
00002664                            Pal_LZ:		incbin	pallet\lz.bin
000026C4                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002744                            Pal_MZ:		incbin	pallet\mz.bin
000027A4                            Pal_SLZ:	incbin	pallet\slz.bin
00002804                            Pal_SYZ:	incbin	pallet\syz.bin
00002864                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
000028C4                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00002924                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
000029A4                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00002A04                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A84                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002AA4                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002AC4                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B44                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B84                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C04                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C24                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C44                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C64                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C84                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002D04                            
00002D04                            ; ---------------------------------------------------------------------------
00002D04                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002D04                            ; ---------------------------------------------------------------------------
00002D04                            
00002D04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D04                            
00002D04                            
00002D04                            DelayProgram:				; XREF: PauseGame
00002D04 46FC 2300                  		move	#$2300,sr
00002D08                            
00002D08                            loc_29AC:
00002D08 4A38 F62A                  		tst.b	($FFFFF62A).w
00002D0C 66FA                       		bne.s	loc_29AC
00002D0E 4E75                       		rts	
00002D10                            ; End of function DelayProgram
00002D10                            
00002D10                            ; ---------------------------------------------------------------------------
00002D10                            ; Subroutine to	generate a pseudo-random number	in d0
00002D10                            ; ---------------------------------------------------------------------------
00002D10                            
00002D10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D10                            
00002D10                            
00002D10                            RandomNumber:
00002D10 2238 F636                  		move.l	($FFFFF636).w,d1
00002D14 6600                       		bne.s	loc_29C0
00002D16 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D1C                            
00002D1C                            loc_29C0:
00002D1C 2001                       		move.l	d1,d0
00002D1E E581                       		asl.l	#2,d1
00002D20 D280                       		add.l	d0,d1
00002D22 E781                       		asl.l	#3,d1
00002D24 D280                       		add.l	d0,d1
00002D26 3001                       		move.w	d1,d0
00002D28 4841                       		swap	d1
00002D2A D041                       		add.w	d1,d0
00002D2C 3200                       		move.w	d0,d1
00002D2E 4841                       		swap	d1
00002D30 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D34 4E75                       		rts	
00002D36                            ; End of function RandomNumber
00002D36                            
00002D36                            
00002D36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D36                            
00002D36                            
00002D36                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D36 0240 00FF                  		andi.w	#$FF,d0
00002D3A D040                       		add.w	d0,d0
00002D3C 0640 0080                  		addi.w	#$80,d0
00002D40 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D44 0440 0080                  		subi.w	#$80,d0
00002D48 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D4C 4E75                       		rts	
00002D4E                            ; End of function CalcSine
00002D4E                            
00002D4E                            ; ===========================================================================
00002D4E                            
00002D4E                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002FCE                            
00002FCE                            ; ===========================================================================
00002FCE 48E7 6000                  		movem.l	d1-d2,-(sp)
00002FD2 3200                       		move.w	d0,d1
00002FD4 4841                       		swap	d1
00002FD6 7000                       		moveq	#0,d0
00002FD8 3200                       		move.w	d0,d1
00002FDA 7407                       		moveq	#7,d2
00002FDC                            
00002FDC                            loc_2C80:
00002FDC E599                       		rol.l	#2,d1
00002FDE D040                       		add.w	d0,d0
00002FE0 5240                       		addq.w	#1,d0
00002FE2 9240                       		sub.w	d0,d1
00002FE4 6400                       		bcc.s	loc_2C9A
00002FE6 D240                       		add.w	d0,d1
00002FE8 5340                       		subq.w	#1,d0
00002FEA 51CA FFF0                  		dbf	d2,loc_2C80
00002FEE E248                       		lsr.w	#1,d0
00002FF0 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FF4 4E75                       		rts	
00002FF6                            ; ===========================================================================
00002FF6                            
00002FF6                            loc_2C9A:
00002FF6 5240                       		addq.w	#1,d0
00002FF8 51CA FFE2                  		dbf	d2,loc_2C80
00002FFC E248                       		lsr.w	#1,d0
00002FFE 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003002 4E75                       		rts	
00003004                            
00003004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003004                            
00003004                            
00003004                            CalcAngle:
00003004 48E7 1800                  		movem.l	d3-d4,-(sp)
00003008 7600                       		moveq	#0,d3
0000300A 7800                       		moveq	#0,d4
0000300C 3601                       		move.w	d1,d3
0000300E 3802                       		move.w	d2,d4
00003010 8843                       		or.w	d3,d4
00003012 6700                       		beq.s	loc_2D04
00003014 3802                       		move.w	d2,d4
00003016 4A43                       		tst.w	d3
00003018 6A00 0000                  		bpl.w	loc_2CC2
0000301C 4443                       		neg.w	d3
0000301E                            
0000301E                            loc_2CC2:
0000301E 4A44                       		tst.w	d4
00003020 6A00 0000                  		bpl.w	loc_2CCA
00003024 4444                       		neg.w	d4
00003026                            
00003026                            loc_2CCA:
00003026 B843                       		cmp.w	d3,d4
00003028 6400 0000                  		bcc.w	loc_2CDC
0000302C E18C                       		lsl.l	#8,d4
0000302E 88C3                       		divu.w	d3,d4
00003030 7000                       		moveq	#0,d0
00003032 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003036 6000                       		bra.s	loc_2CE6
00003038                            ; ===========================================================================
00003038                            
00003038                            loc_2CDC:				; XREF: CalcAngle
00003038 E18B                       		lsl.l	#8,d3
0000303A 86C4                       		divu.w	d4,d3
0000303C 7040                       		moveq	#$40,d0
0000303E 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003042                            
00003042                            loc_2CE6:
00003042 4A41                       		tst.w	d1
00003044 6A00 0000                  		bpl.w	loc_2CF2
00003048 4440                       		neg.w	d0
0000304A 0640 0080                  		addi.w	#$80,d0
0000304E                            
0000304E                            loc_2CF2:
0000304E 4A42                       		tst.w	d2
00003050 6A00 0000                  		bpl.w	loc_2CFE
00003054 4440                       		neg.w	d0
00003056 0640 0100                  		addi.w	#$100,d0
0000305A                            
0000305A                            loc_2CFE:
0000305A 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000305E 4E75                       		rts	
00003060                            ; ===========================================================================
00003060                            
00003060                            loc_2D04:				; XREF: CalcAngle
00003060 303C 0040                  		move.w	#$40,d0
00003064 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003068 4E75                       		rts	
0000306A                            ; End of function CalcAngle
0000306A                            
0000306A                            ; ===========================================================================
0000306A                            
0000306A                            Angle_Data:	incbin	misc\angles.bin
0000316C                            
0000316C                            ; ===========================================================================
0000316C                            
0000316C                            ; ---------------------------------------------------------------------------
0000316C                            ; Sega screen
0000316C                            ; ---------------------------------------------------------------------------
0000316C                            
0000316C                            SegaScreen:				; XREF: GameModeArray
0000316C 103C 00E4                  		move.b	#$E4,d0
00003170 6100 E460                  		bsr.w	PlaySound_Special ; stop music
00003174 6100 E69E                  		bsr.w	ClearPLC
00003178 6100 EEE2                  		bsr.w	Pal_FadeFrom
0000317C 4DF9 00C0 0004             		lea	($C00004).l,a6
00003182 3CBC 8004                  		move.w	#$8004,(a6)
00003186 3CBC 8230                  		move.w	#$8230,(a6)
0000318A 3CBC 8407                  		move.w	#$8407,(a6)
0000318E 3CBC 8700                  		move.w	#$8700,(a6)
00003192 3CBC 8B00                  		move.w	#$8B00,(a6)
00003196 4238 F64E                  		clr.b	($FFFFF64E).w
0000319A 46FC 2700                  		move	#$2700,sr
0000319E 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031A2 0200 00BF                  		andi.b	#$BF,d0
000031A6 33C0 00C0 0004             		move.w	d0,($C00004).l
000031AC 6100 E34C                  		bsr.w	ClearScreen
000031B0 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031BA 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000031C0 6100 E4B4                  		bsr.w	NemDec
000031C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000031CA 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000031D0 303C 0000                  		move.w	#0,d0
000031D4 6100 E77E                  		bsr.w	EniDec
000031D8 43F9 00FF 0000             		lea	($FF0000).l,a1
000031DE 203C 6510 0003             		move.l	#$65100003,d0
000031E4 7217                       		moveq	#$17,d1
000031E6 7407                       		moveq	#7,d2
000031E8 6100 E46C                  		bsr.w	ShowVDPGraphics
000031EC 43F9 00FF 0180             		lea	($FF0180).l,a1
000031F2 203C 4000 0003             		move.l	#$40000003,d0
000031F8 7227                       		moveq	#$27,d1
000031FA 741B                       		moveq	#$1B,d2
000031FC 6100 E458                  		bsr.w	ShowVDPGraphics
00003200 7000                       		moveq	#0,d0
00003202 6100 F148                  		bsr.w	PalLoad2	; load Sega logo pallet
00003206 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000320C 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003212 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003218 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000321E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003222 0000 0040                  		ori.b	#$40,d0
00003226 33C0 00C0 0004             		move.w	d0,($C00004).l
0000322C                            
0000322C                            Sega_WaitPallet:
0000322C 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003232 6100 FAD0                  		bsr.w	DelayProgram
00003236 6100 F006                  		bsr.w	PalCycle_Sega
0000323A 66F0                       		bne.s	Sega_WaitPallet
0000323C                            
0000323C 103C 00E1                  		move.b	#$E1,d0
00003240 6100 E390                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003244 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000324A 6100 FAB8                  		bsr.w	DelayProgram
0000324E 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003254                            
00003254                            Sega_WaitEnd:
00003254 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000325A 6100 FAA8                  		bsr.w	DelayProgram
0000325E 4A78 F614                  		tst.w	($FFFFF614).w
00003262 6700                       		beq.s	Sega_GotoTitle
00003264 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000326A 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000326C                            
0000326C                            Sega_GotoTitle:
0000326C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003272 4E75                       		rts	
00003274                            ; ===========================================================================
00003274                            
00003274                            ; ---------------------------------------------------------------------------
00003274                            ; Title	screen
00003274                            ; ---------------------------------------------------------------------------
00003274                            
00003274                            TitleScreen:				; XREF: GameModeArray
00003274 103C 00E4                  		move.b	#$E4,d0
00003278 6100 E358                  		bsr.w	PlaySound_Special ; stop music
0000327C 6100 EDDE                  		bsr.w	Pal_FadeFrom
00003280 6100 E592                  		bsr.w	ClearPLC
00003284 46FC 2700                  		move	#$2700,sr
00003288 6100 E2FE                  		bsr.w	SoundDriverLoad
0000328C 4DF9 00C0 0004             		lea	($C00004).l,a6
00003292 3CBC 8004                  		move.w	#$8004,(a6)
00003296 3CBC 8230                  		move.w	#$8230,(a6)
0000329A 3CBC 8407                  		move.w	#$8407,(a6)
0000329E 3CBC 9001                  		move.w	#$9001,(a6)
000032A2 3CBC 9200                  		move.w	#$9200,(a6)
000032A6 3CBC 8B03                  		move.w	#$8B03,(a6)
000032AA 3CBC 8720                  		move.w	#$8720,(a6)
000032AE 4238 F64E                  		clr.b	($FFFFF64E).w
000032B2 6100 E246                  		bsr.w	ClearScreen
000032B6 43F8 D000                  		lea	($FFFFD000).w,a1
000032BA 7000                       		moveq	#0,d0
000032BC 323C 07FF                  		move.w	#$7FF,d1
000032C0                            
000032C0                            Title_ClrObjRam:
000032C0 22C0                       		move.l	d0,(a1)+
000032C2 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000032C6                            
000032C6                            ; gomer
000032C6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032D0 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
000032D6 6100 E39E                  		bsr.w	NemDec
000032DA 7003                       		moveq	#3,d0		; load Sonic's pallet
000032DC 6100 F052                  		bsr.w	PalLoad1
000032E0                            
000032E0 43F9 00FF 0000             		lea	($FF0000).l,a1
000032E6 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000032EC 303C 0000                  		move.w	#0,d0
000032F0 6100 E662                  		bsr.w	EniDec
000032F4                            ; help how the fuck can i do this IT SHOWS NOTHING
000032F4 43F9 00FF 0000             		lea	($FF0000).l,a1
000032FA 203C 4000 0003             		move.l	#$40000003,d0
00003300 7227                       		moveq	#$27,d1
00003302 741B                       		moveq	#$1B,d2
00003304 6100 E350                  		bsr.w	ShowVDPGraphics
00003308                            
00003308                            
00003308 43F9 00FF 0000             		lea	($FF0000).l,a1
0000330E 203C 6000 0003             		move.l	#$60000003,d0
00003314 7227                       		moveq	#$27,d1
00003316 741B                       		moveq	#$1B,d2
00003318                            
00003318 6100 EC8E                  		bsr.w	Pal_FadeTo
0000331C 6100 ED3E                  		bsr.w	Pal_FadeFrom
00003320                            
00003320                            
00003320 6100 E1D8                  		bsr.w	ClearScreen
00003324 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000332E 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003334 6100 E340                  		bsr.w	NemDec
00003338 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003342 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003348 6100 E32C                  		bsr.w	NemDec
0000334C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003352 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003358 303C 0000                  		move.w	#0,d0
0000335C 6100 E5F6                  		bsr.w	EniDec
00003360 43F9 00FF 0000             		lea	($FF0000).l,a1
00003366 203C 4000 0003             		move.l	#$40000003,d0
0000336C 7227                       		moveq	#$27,d1
0000336E 741B                       		moveq	#$1B,d2
00003370 6100 E2E4                  		bsr.w	ShowVDPGraphics
00003374 6100 ECE6                  		bsr.w	Pal_FadeFrom
00003378 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000337C 7000                       		moveq	#0,d0
0000337E 323C 001F                  		move.w	#$1F,d1
00003382                            
00003382                            
00003382                            Title_ClrPallet:
00003382 22C0                       		move.l	d0,(a1)+
00003384 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003388                            
00003388 7003                       		moveq	#3,d0		; load Sonic's pallet
0000338A 6100 EFA4                  		bsr.w	PalLoad1
0000338E 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003394 4EB9 0000 0000             		jsr	ObjectsLoad
0000339A 4EB9 0000 0000             		jsr	BuildSprites
000033A0 6100 EC06                  		bsr.w	Pal_FadeTo
000033A4 46FC 2700                  		move	#$2700,sr
000033A8 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000033B2 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000033B8 6100 E2BC                  		bsr.w	NemDec
000033BC 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000033C6 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000033CC 6100 E2A8                  		bsr.w	NemDec
000033D0 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000033DA 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000033E0 6100 E294                  		bsr.w	NemDec
000033E4 4DF9 00C0 0000             		lea	($C00000).l,a6
000033EA 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000033F2 4BF9 0000 0606             		lea	(Art_Text).l,a5
000033F8 323C 0BC4                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000033FC                            
000033FC                            Title_LoadText:
000033FC 2C9D                       		move.l	(a5)+,(a6)
000033FE 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003402                            
00003402 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003408 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000340E 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003414 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000341A 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003420 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003426 6100 0000                  		bsr.w	LevelSizeLoad
0000342A 6100 0000                  		bsr.w	DeformBgLayer
0000342E                            
0000342E 43F8 B000                  		lea	($FFFFB000).w,a1
00003432 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003438 303C 0000                  		move.w	#0,d0
0000343C 6100 E516                  		bsr.w	EniDec
00003440 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003446 43F9 00FF 0000             		lea	($FF0000).l,a1
0000344C 6100 E684                  		bsr.w	KosDec
00003450 6100 0000                  		bsr.w	LevelLayoutLoad
00003454                            
00003454 46FC 2700                  		move	#$2700,sr
00003458 6100 E0A0                  		bsr.w	ClearScreen
0000345C 4BF9 00C0 0004             		lea	($C00004).l,a5
00003462 4DF9 00C0 0000             		lea	($C00000).l,a6
00003468 47F8 F708                  		lea	($FFFFF708).w,a3
0000346C 49F8 A440                  		lea	($FFFFA440).w,a4
00003470 343C 6000                  		move.w	#$6000,d2
00003474 6100 0000                  		bsr.w	LoadTilesFromStart2
00003478 43F9 00FF 0000             		lea	($FF0000).l,a1
0000347E 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003484 303C 0000                  		move.w	#0,d0
00003488 6100 E4CA                  		bsr.w	EniDec
0000348C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003492 203C 4206 0003             		move.l	#$42060003,d0
00003498 7221                       		moveq	#$21,d1
0000349A 7415                       		moveq	#$15,d2
0000349C 6100 E1B8                  		bsr.w	ShowVDPGraphics
000034A0 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000034AA 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000034B0 6100 E1C4                  		bsr.w	NemDec
000034B4 7001                       		moveq	#1,d0		; load title screen pallet
000034B6 6100 EE78                  		bsr.w	PalLoad1
000034BA 103C 008A                  		move.b	#$8A,d0		; play title screen music
000034BE 6100 E112                  		bsr.w	PlaySound_Special
000034C2 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000034C8 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000034CE 43F8 D080                  		lea	($FFFFD080).w,a1
000034D2 7000                       		moveq	#0,d0
000034D4 323C 000F                  		move.w	#$F,d1
000034D8                            
000034D8                            Title_ClrObjRam2:
000034D8 22C0                       		move.l	d0,(a1)+
000034DA 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000034DE                            
000034DE 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000034E4 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000034EA 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000034F0 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000034F6 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000034FC 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003502 4EB9 0000 0000             		jsr	ObjectsLoad
00003508 6100 0000                  		bsr.w	DeformBgLayer
0000350C 4EB9 0000 0000             		jsr	BuildSprites
00003512 7000                       		moveq	#0,d0
00003514 6100 E2D2                  		bsr.w	LoadPLC2
00003518 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000351E 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003524 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003528 0000 0040                  		ori.b	#$40,d0
0000352C 33C0 00C0 0004             		move.w	d0,($C00004).l
00003532 6100 EA74                  		bsr.w	Pal_FadeTo
00003536                            
00003536                            loc_317C:
00003536 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000353C 6100 F7C6                  		bsr.w	DelayProgram
00003540 4EB9 0000 0000             		jsr	ObjectsLoad
00003546 6100 0000                  		bsr.w	DeformBgLayer
0000354A 4EB9 0000 0000             		jsr	BuildSprites
00003550 6100 E640                  		bsr.w	PalCycle_Title
00003554 6100 E2CC                  		bsr.w	RunPLC_RAM
00003558 3038 D008                  		move.w	($FFFFD008).w,d0
0000355C 5440                       		addq.w	#2,d0
0000355E 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003562 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003566 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003568 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000356E 4E75                       		rts	
00003570                            ; ===========================================================================
00003570                            
00003570                            Title_ChkRegion:
00003570 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003574 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003576 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000357C 6000                       		bra.s	Title_EnterCheat
0000357E                            ; ===========================================================================
0000357E                            
0000357E                            Title_RegionJ:				; XREF: Title_ChkRegion
0000357E 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003584                            
00003584                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003584 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003588 D0C0                       		adda.w	d0,a0
0000358A 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000358E 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003592 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003594 6600                       		bne.s	loc_3210	; if not, branch
00003596 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
0000359A 4A00                       		tst.b	d0
0000359C 6600                       		bne.s	Title_CountC
0000359E 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000035A2 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000035A6 E249                       		lsr.w	#1,d1
000035A8 0241 0003                  		andi.w	#3,d1
000035AC 6700                       		beq.s	Title_PlayRing
000035AE 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000035B2 6A00                       		bpl.s	Title_PlayRing
000035B4 7201                       		moveq	#1,d1
000035B6 1181 1001                  		move.b	d1,1(a0,d1.w)
000035BA                            
000035BA                            Title_PlayRing:
000035BA 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000035C0 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035C4 6100 E00C                  		bsr.w	PlaySound_Special
000035C8 6000                       		bra.s	Title_CountC
000035CA                            ; ===========================================================================
000035CA                            
000035CA                            loc_3210:				; XREF: Title_EnterCheat
000035CA 4A00                       		tst.b	d0
000035CC 6700                       		beq.s	Title_CountC
000035CE 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000035D4 6700                       		beq.s	Title_CountC
000035D6 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000035DC                            
000035DC                            Title_CountC:
000035DC 1038 F605                  		move.b	($FFFFF605).w,d0
000035E0 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000035E4 6700                       		beq.s	loc_3230	; if not, branch
000035E6 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000035EA                            
000035EA                            loc_3230:
000035EA 4A78 F614                  		tst.w	($FFFFF614).w
000035EE 6700 0000                  		beq.w	Demo
000035F2                            		; (temporary until we have an actual options screen)
000035F2 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000035F8 6700                       		beq.s	@notc
000035FA                            
000035FA 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
000035FE 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
00003604 6D00                       		blt.s	@notoverflow
00003606 11FC 0000 FFE8             		move.b	#0,(v_character).w
0000360C                            	@notoverflow:
0000360C 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003610 6100 DFC0                  		bsr.w	PlaySound_Special
00003614                            	@notc:
00003614 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000361A 6700 FF1A                  		beq.w	loc_317C	; if not, branch
0000361E                            
0000361E                            Title_ChkLevSel:
0000361E 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003622 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003626 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000362C 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003630                            		
00003630                            		
00003630 7002                       		moveq	#2,d0
00003632 6100 ED18                  		bsr.w	PalLoad2	; load level select pallet
00003636 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000363A 7000                       		moveq	#0,d0
0000363C 323C 00DF                  		move.w	#$DF,d1
00003640                            
00003640                            Title_ClrScroll:
00003640 22C0                       		move.l	d0,(a1)+
00003642 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003646                            
00003646 21C0 F616                  		move.l	d0,($FFFFF616).w
0000364A 46FC 2700                  		move	#$2700,sr
0000364E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003654 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000365E 323C 03FF                  		move.w	#$3FF,d1
00003662                            
00003662                            Title_ClrVram:
00003662 2C80                       		move.l	d0,(a6)
00003664 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003668                            
00003668 6100 0000                  		bsr.w	LevSelTextLoad
0000366C                            		
0000366C                            		; sound test fix
0000366C 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003670 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003676                            		
00003676 363C C65F                  		move.w	#$C680-$21,d3 ; selected
0000367A 0C46 0014                  		cmpi.w	#$14,d6
0000367E 6700                       		beq.s	@issndtst
00003680 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003684                            	@issndtst:
00003684 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003688 31C6 FF82                  		move.w	d6,($FFFFFF82).w
0000368C                            		
0000368C 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003690 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003698                            		
00003698 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000369E 6700                       		beq.s	@issndtst2
000036A0                            		
000036A0 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000036A6 6100 0000                  		bsr.w	CStringSlop
000036AA 6000                       		bra.s	LevelSelect
000036AC                            	@issndtst2:
000036AC 43F9 0000 0000             		lea	(Controls_SND).l,a1
000036B2 6100 0000                  		bsr.w	CStringSlop
000036B6                            ; ---------------------------------------------------------------------------
000036B6                            ; Level	Select
000036B6                            ; ---------------------------------------------------------------------------
000036B6                            LevelSelect:
000036B6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036BC 6100 F646                  		bsr.w	DelayProgram
000036C0 6100 0000                  		bsr.w	LevSelControls
000036C4 6100 E15C                  		bsr.w	RunPLC_RAM
000036C8 4AB8 F680                  		tst.l	($FFFFF680).w
000036CC 66E8                       		bne.s	LevelSelect
000036CE 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000036D4 67E0                       		beq.s	LevelSelect	; if not, branch
000036D6 3038 FF82                  		move.w	($FFFFFF82).w,d0
000036DA 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000036DE 6600                       		bne.s	@dont	; if not, dont blow this place up
000036E0                            			
000036E0 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
000036E6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036EC 6100 F616                  		bsr.w	DelayProgram
000036F0                            	@dont:
000036F0 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000036F4 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000036F6                            		
000036F6 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
000036FC 67B8                       		beq.s	LevelSelect	; if not, branch
000036FE                            		
000036FE 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003704 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003706                            		
00003706 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000370A 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000370E                            		
0000370E 4EB9 0000 0000             		jsr		ShowNow_Playing
00003714 60A0                       		bra.s	LevelSelect
00003716                            ; ===========================================================================
00003716                            
00003716                            LevSel_SEGA:				; XREF: LevelSelect
00003716 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
0000371C 4E75                       		rts	
0000371E                            ; ===========================================================================
0000371E                            
0000371E                            LevSel_Ending:				; XREF: LevelSelect
0000371E 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003724 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
0000372A 4E75                       		rts	
0000372C                            ; ===========================================================================
0000372C                            
0000372C                            LevSel_Credits:				; XREF: LevelSelect
0000372C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003732 103C 0091                  		move.b	#$91,d0
00003736 6100 DE9A                  		bsr.w	PlaySound_Special ; play credits music
0000373A 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003740 4E75                       		rts	
00003742                            ; ===========================================================================
00003742                            
00003742                            LevSel_Level_SS:			; XREF: LevelSelect
00003742 D040                       		add.w	d0,d0
00003744 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003748 6B00 FF6C                  		bmi.w	LevelSelect
0000374C 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003750 6600                       		bne.s	LevSel_Level	; if not, branch
00003752 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003758 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000375C 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003762 7000                       		moveq	#0,d0
00003764 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003768 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000376C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003770 4E75                       		rts	
00003772                            ; ===========================================================================
00003772                            
00003772                            LevSel_Level:				; XREF: LevSel_Level_SS
00003772 0240 3FFF                  		andi.w	#$3FFF,d0
00003776 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000377A                            
0000377A                            PlayLevel:				; XREF: ROM:00003246j ...
0000377A 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003780 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003786 7000                       		moveq	#0,d0
00003788 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000378C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003790 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003794 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003798 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000379C 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000037A0 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000037A4 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000037A8 103C 00E0                  		move.b	#$E0,d0
000037AC 6100 DE24                  		bsr.w	PlaySound_Special ; fade out music
000037B0 4E75                       		rts	
000037B2                            ; ===========================================================================
000037B2                            ; ---------------------------------------------------------------------------
000037B2                            ; Level	select - level pointers
000037B2                            ; ---------------------------------------------------------------------------
000037B2                            LSelectPointers:
000037B2                            		incbin	misc\ls_point.bin
000037DC                            		even
000037DC                            ; ---------------------------------------------------------------------------
000037DC                            ; Level	select codes
000037DC                            ; ---------------------------------------------------------------------------
000037DC                            LevelSelectCode_J:
000037DC                            		incbin	misc\ls_jcode.bin
000037E2                            		even
000037E2                            
000037E2                            LevelSelectCode_US:
000037E2                            		incbin	misc\ls_ucode.bin
000037E8                            		even
000037E8                            ; ===========================================================================
000037E8                            
000037E8                            ; ---------------------------------------------------------------------------
000037E8                            ; Demo mode
000037E8                            ; ---------------------------------------------------------------------------
000037E8                            
000037E8                            Demo:					; XREF: TitleScreen
000037E8 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000037EE                            
000037EE                            loc_33B6:				; XREF: loc_33E4
000037EE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000037F4 6100 F50E                  		bsr.w	DelayProgram
000037F8 6100 0000                  		bsr.w	DeformBgLayer
000037FC 6100 E374                  		bsr.w	PalCycle_Load
00003800 6100 E020                  		bsr.w	RunPLC_RAM
00003804 3038 D008                  		move.w	($FFFFD008).w,d0
00003808 5440                       		addq.w	#2,d0
0000380A 31C0 D008                  		move.w	d0,($FFFFD008).w
0000380E 0C40 1C00                  		cmpi.w	#$1C00,d0
00003812 6500                       		bcs.s	loc_33E4
00003814 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
0000381A 4E75                       		rts	
0000381C                            ; ===========================================================================
0000381C                            
0000381C                            loc_33E4:				; XREF: Demo
0000381C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003822 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
00003826 4A78 F614                  		tst.w	($FFFFF614).w
0000382A 6600 FFC2                  		bne.w	loc_33B6
0000382E 103C 00E0                  		move.b	#$E0,d0
00003832 6100 DD9E                  		bsr.w	PlaySound_Special ; fade out music
00003836 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000383A 0240 0007                  		andi.w	#7,d0
0000383E D040                       		add.w	d0,d0
00003840 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003844 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003848 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
0000384C 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003852 6500                       		bcs.s	loc_3422	; if yes, branch
00003854 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000385A                            
0000385A                            loc_3422:
0000385A 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003860 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003866 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000386A 6600                       		bne.s	Demo_Level	; if not, branch
0000386C 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003872 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003876 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
0000387A                            
0000387A                            Demo_Level:
0000387A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003880 7000                       		moveq	#0,d0
00003882 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003886 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000388A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000388E 4E75                       		rts	
00003890                            ; ===========================================================================
00003890                            ; ---------------------------------------------------------------------------
00003890                            ; Levels used in demos
00003890                            ; ---------------------------------------------------------------------------
00003890                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003898                            		even
00003898                            
00003898                            ; ---------------------------------------------------------------------------
00003898                            ; Subroutine to	change what you're selecting in the level select
00003898                            ; ---------------------------------------------------------------------------
00003898                            
00003898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003898                            
00003898                            
00003898                            LevSelControls:				; XREF: LevelSelect
00003898 1238 F605                  		move.b	($FFFFF605).w,d1
0000389C 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000038A0 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000038A2 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000038A6 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000038AA                            
000038AA                            LevSel_UpDown:
000038AA 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000038B0 1238 F604                  		move.b	($FFFFF604).w,d1
000038B4 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000038B8 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000038BC 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000038C0 0801 0000                  		btst	#0,d1		; is up	pressed?
000038C4 6700                       		beq.s	LevSel_Down	; if not, branch
000038C6 5346                       		subq.w	#1,d6		; move up 1 selection
000038C8 6400                       		bcc.s	LevSel_Down
000038CA 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000038CC                            
000038CC                            LevSel_Down:
000038CC 0801 0001                  		btst	#1,d1		; is down pressed?
000038D0 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038D2 5246                       		addq.w	#1,d6		; move down 1 selection
000038D4 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038D8 6500                       		bcs.s	LevSel_Refresh
000038DA 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000038DC 6000                       		bra.s	LevSel_Refresh
000038DE                            		
000038DE                            LevSel_LR:
000038DE 0801 0002                  		btst	#2,d1		; is left pressed?
000038E2 6700                       		beq.s	LevSel_Right	; if not, branch
000038E4 0446 0000                  		sub.w	#lsrow2size,d6
000038E8 64E2                       		bcc.s	LevSel_Down
000038EA 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000038EE                            LevSel_Right:
000038EE 0801 0003                  		btst	#3,d1		; is right pressed?
000038F2 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038F4 0646 0000                  		add.w	#lsrow1size,d6
000038F8 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038FC 6500                       		bcs.s	LevSel_Refresh
000038FE 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003902                            ; ===========================================================================
00003902                            LevSel_Refresh:
00003902                            		
00003902 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003906 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000390A                            		
0000390A 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003910 6600                       		bne.s	@exitsndtest
00003912                            		
00003912 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003916 43F9 0000 0000             		lea	(Controls_Normal).l,a1
0000391C 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003924 6100 0000                  		bsr.w	CStringSlop
00003928                            	@exitsndtest:
00003928                            	
00003928 363C C65F                  		move.w	#$C680-$21,d3
0000392C 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003930 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003934                            		
00003934 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
0000393A 6600                       		bne.s	@entersndtest
0000393C                            		
0000393C 363C C65F                  		move.w	#$C680-$21,d3
00003940 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003946 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000394E 6100 0000                  		bsr.w	CStringSlop
00003952                            	@entersndtest:
00003952 4E75                       		rts	
00003954                            		
00003954                            LevSel_SndTest:				; XREF: LevSelControls
00003954 1238 F605                  		move.b	($FFFFF605).w,d1
00003958 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
0000395C 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000395E 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
00003964 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
00003968                            		
00003968 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000396C 0801 0002                  		btst	#2,d1		; is left pressed?
00003970 6700                       		beq.s	SndTest_Right	; if not, branch
00003972 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
00003974                            		; no need the fact it's a byte does the trick
00003974                            
00003974                            SndTest_Right:
00003974 0801 0003                  		btst	#3,d1		; is right pressed?
00003978 6700                       		beq.s	SndTest_A	; if not, branch
0000397A 5200                       		addq.b	#1,d0		; add 1	to sound test
0000397C                            		; same here
0000397C                            		
0000397C                            SndTest_A:
0000397C 0801 0006                  		btst	#6,d1		; is A pressed?
00003980 6700                       		beq.s	SndTest_B	; if not, branch
00003982 5100                       		subq.b	#8,d0		; subtract $10 to sound test
00003984 5100                       		subq.b	#8,d0
00003986                            		
00003986                            SndTest_B:
00003986 0801 0004                  		btst	#4,d1		; is B pressed?
0000398A 6700                       		beq.s	SndTest_Refresh	; if not, branch
0000398C 5000                       		addq.b	#8,d0		; add $10 to sound test
0000398E 5000                       		addq.b	#8,d0
00003990                            
00003990                            SndTest_Refresh:
00003990 363C C65F                  		move.w	#$C680-$21,d3
00003994 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
00003998 6000 0000                  		bra.w	LevSelSndTest	; refresh text
0000399C                            
0000399C                            LevSel_NoMove:
0000399C 4E75                       		rts	
0000399E                            ; End of function LevSelControls
0000399E                            
0000399E                            ; ---------------------------------------------------------------------------
0000399E                            ; Subroutine to load level select text
0000399E                            ; ---------------------------------------------------------------------------
0000399E                            
0000399E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000399E                            
0000399E                            LevSelTextLoad_loop:
0000399E 2D44 0004                  		move.l	d4,4(a6)
000039A2 6100 0000                  		bsr.w	LevSel_ChgLine
000039A6 0684 0080 0000             		addi.l	#$800000,d4
000039AC 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000039B0 4E75                       		rts
000039B2                            LevSelTextLoad:				; XREF: TitleScreen
000039B2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039B8 4DF9 00C0 0000             		lea	($C00000).l,a6
000039BE 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000039C2 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000039C8                            		
000039C8 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000039CC 61D0                       		bsr.s	LevSelTextLoad_loop
000039CE                            		
000039CE                            		
000039CE 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000039D4 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000039D8 61C4                       		bsr.s	LevSelTextLoad_loop
000039DA 363C C65F                  		move.w	#$C680-$21,d3
000039DE                            		
000039DE                            LevSelHighlightCode:
000039DE 4DF9 00C0 0000             		lea	($C00000).l,a6
000039E4 7000                       		moveq	#0,d0
000039E6 3038 FF82                  		move.w	($FFFFFF82).w,d0
000039EA 3200                       		move.w	d0,d1
000039EC 283C 6086 0003             		move.l	#lsscrpos,d4
000039F2                            		
000039F2 0C40 0000                  		cmpi.w	#lsrow1size,d0
000039F6 6D00                       		blt.s	@notsecond
000039F8                            		
000039F8 0440 0000                  		sub.w	#lsrow1size,d0
000039FC 0684 0024 0000             		addi.l	#lsoff,d4
00003A02                            	@notsecond:
00003A02 EF48                       		lsl.w	#7,d0
00003A04 4840                       		swap	d0
00003A06 D880                       		add.l	d0,d4
00003A08 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A0E E749                       		lsl.w	#3,d1
00003A10 D241                       		add.w	d1,d1
00003A12 D2C1                       		adda.w	d1,a1
00003A14 2D44 0004                  		move.l	d4,4(a6)
00003A18 6100 0000                  		bsr.w	LevSel_ChgLine
00003A1C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003A22 6700                       		beq.s	LevSelSndTest
00003A24 4E75                       		rts
00003A26                            
00003A26                            LevSelSndTest:
00003A26 0643 0030                  		add.w	#$30,d3
00003A2A 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A34 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A38 1400                       		move.b	d0,d2
00003A3A E808                       		lsr.b	#4,d0
00003A3C 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A40 1002                       		move.b	d2,d0
00003A42 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A46 4E75                       		rts	
00003A48                            ; End of function LevSelTextLoad
00003A48                            
00003A48                            
00003A48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A48                            
00003A48                            
00003A48                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A48 0240 000F                  		andi.w	#$F,d0
00003A4C 0C00 000A                  		cmpi.b	#$A,d0
00003A50 6500                       		bcs.s	loc_3580
00003A52 5E00                       		addi.b	#7,d0
00003A54                            
00003A54                            loc_3580:
00003A54 D043                       		add.w	d3,d0
00003A56 3C80                       		move.w	d0,(a6)
00003A58 4E75                       		rts	
00003A5A                            ; End of function LevSel_ChgSnd
00003A5A                            
00003A5A                            
00003A5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A5A                            
00003A5A                            
00003A5A                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A5A 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A5C                            
00003A5C                            @loop:
00003A5C 7000                       		moveq	#0,d0
00003A5E 1019                       		move.b	(a1)+,d0
00003A60 0C00 0020                  		cmpi.b	#$20,d0
00003A64 6E00                       		bgt.s	@draw
00003A66 3CBC 0000                  		move.w	#0,(a6)
00003A6A 51CA FFF0                  		dbf	d2,@loop
00003A6E 4E75                       		rts	
00003A70                            ; ===========================================================================
00003A70                            
00003A70                            @draw:				; XREF: LevSel_ChgLine
00003A70 D043                       		add.w	d3,d0
00003A72 3C80                       		move.w	d0,(a6)
00003A74 51CA FFE6                  		dbf	d2,@loop
00003A78 4E75                       		rts	
00003A7A                            ; End of function LevSel_ChgLine
00003A7A                            		
00003A7A                            CStringSlop_draw:
00003A7A D043                       		add.w	d3,d0
00003A7C 3C80                       		move.w	d0,(a6)
00003A7E                            CStringSlop:				; XREF: LevSelTextLoad
00003A7E 7000                       		moveq	#0,d0
00003A80 1019                       		move.b	(a1)+,d0
00003A82 0C00 0020                  		cmpi.b	#$20,d0
00003A86 6EF2                       		bgt.s	CStringSlop_draw
00003A88                            		
00003A88 0C00 0001                  		cmpi.b	#1,d0
00003A8C 6700                       		beq.s	@InsertSpaces
00003A8E 6500                       		blo.s	@end
00003A90                            		
00003A90 3CBC 0000                  		move.w	#0,(a6)
00003A94 60E8                       		bra.s	CStringSlop
00003A96                            	@end:
00003A96 4E75                       		rts
00003A98                            	@InsertSpaces:
00003A98 7000                       		moveq	#0,d0
00003A9A 1019                       		move.b	(a1)+,d0
00003A9C                            		
00003A9C                            	@insert:
00003A9C 3CBC 0000                  		move.w	#0,(a6)
00003AA0 51C8 FFFA                  		dbf.w	d0,@insert
00003AA4 60D8                       		bra.s	CStringSlop
00003AA6                            ; End of function LevSel_ChgLine
00003AA6                            
00003AA6                            ; ===========================================================================
00003AA6                            ; ---------------------------------------------------------------------------
00003AA6                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003AA6                            ; ---------------------------------------------------------------------------
00003AA6                            LevelMenuText:	
00003AA6 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003AB6 2020 2020 2020 2020 2020+          dc.b    "               2"
00003AC6 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AD6 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003AE6 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003AF6 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B06 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003B16 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B26 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B36 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B46 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B56 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B66                            LMTSecondRow:
00003B66 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003B76 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003B86 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B96 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003BA6 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BB6 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BC6 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003BD6 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003BE6 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003BF6 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003C06 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003C16                            LMTSelectableEnd:
00003C16 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003C26                            LMTEnd:
00003C26                            
00003C26                            Now_Playing:
00003C26 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003C36                            		even
00003C36                            NP_Track:
00003C36 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003C3E                            		even
00003C3E                            NP_SFX:
00003C3E 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003C46                            		even
00003C46                            
00003C46                            ShowNow_Playing:
00003C46 1C00                       		move.b	d0,d6
00003C48 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C4C 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C50 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C56 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C5E 6100 FE1E                  		bsr.w	CStringSlop
00003C62                            		
00003C62 43FA FFD2                  		lea	NP_Track(pc),a1
00003C66 0C06 00A0                  		cmpi.b	#$A0,d6
00003C6A 6D00                       		blt.s	@track
00003C6C                            		
00003C6C 43FA FFD0                  		lea	NP_SFX(pc),a1
00003C70                            	@track:
00003C70 6100 FE0C                  		bsr.w	CStringSlop
00003C74                            		
00003C74 0643 0030                  		add.w	#$30,d3
00003C78 1006                       		move.b	d6,d0
00003C7A 1400                       		move.b	d0,d2
00003C7C E808                       		lsr.b	#4,d0
00003C7E 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003C82 1002                       		move.b	d2,d0
00003C84 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003C88 4E75                       		rts	
00003C8A                            
00003C8A                            ; 1 is insert spaces btw
00003C8A                            Controls_Normal:
00003C8A 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003C96                            		even		
00003C96                            Controls_SND:
00003C96 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003CBC 00                         		even
00003CBC                            ; ---------------------------------------------------------------------------
00003CBC                            ; Music	playlist
00003CBC                            ; ---------------------------------------------------------------------------
00003CBC                            MusicList1:	incbin	misc\muslist1.bin
00003CC4                            		even
00003CC4                            MusicList2:	incbin	misc\muslist2.bin
00003CCA                            		even
00003CCA                            MusicList3:	incbin	misc\muslist3.bin
00003CD0                            		even
00003CD0                            MusicList4:	incbin	misc\muslist4.bin
00003CD6                            		even
00003CD6                            ; ===========================================================================
00003CD6                            
00003CD6                            ; ---------------------------------------------------------------------------
00003CD6                            ; Level
00003CD6                            ; ---------------------------------------------------------------------------
00003CD6                            
00003CD6                            Level:					; XREF: GameModeArray
00003CD6 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003CDC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CE0 6B00                       		bmi.s	loc_37B6
00003CE2 103C 00E0                  		move.b	#$E0,d0
00003CE6 6100 D8EA                  		bsr.w	PlaySound_Special ; fade out music
00003CEA                            
00003CEA                            loc_37B6:
00003CEA 6100 DB28                  		bsr.w	ClearPLC
00003CEE 6100 E36C                  		bsr.w	Pal_FadeFrom
00003CF2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CF6 6B00                       		bmi.s	Level_ClrRam
00003CF8 46FC 2700                  		move	#$2700,sr
00003CFC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003D06 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003D0C 6100 D968                  		bsr.w	NemDec
00003D10 46FC 2300                  		move	#$2300,sr
00003D14 7000                       		moveq	#0,d0
00003D16 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D1A E948                       		lsl.w	#4,d0
00003D1C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003D22 45F2 0000                  		lea	(a2,d0.w),a2
00003D26 7000                       		moveq	#0,d0
00003D28 1012                       		move.b	(a2),d0
00003D2A 6700                       		beq.s	loc_37FC
00003D2C 6100 DA88                  		bsr.w	LoadPLC		; load level patterns
00003D30                            
00003D30                            loc_37FC:
00003D30 7001                       		moveq	#1,d0
00003D32 6100 DA82                  		bsr.w	LoadPLC		; load standard	patterns
00003D36                            
00003D36                            Level_ClrRam:
00003D36 43F8 D000                  		lea	($FFFFD000).w,a1
00003D3A 7000                       		moveq	#0,d0
00003D3C 323C 07FF                  		move.w	#$7FF,d1
00003D40                            
00003D40                            Level_ClrObjRam:
00003D40 22C0                       		move.l	d0,(a1)+
00003D42 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003D46                            
00003D46 43F8 F628                  		lea	($FFFFF628).w,a1
00003D4A 7000                       		moveq	#0,d0
00003D4C 323C 0015                  		move.w	#$15,d1
00003D50                            
00003D50                            Level_ClrVars:
00003D50 22C0                       		move.l	d0,(a1)+
00003D52 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003D56                            
00003D56 43F8 F700                  		lea	($FFFFF700).w,a1
00003D5A 7000                       		moveq	#0,d0
00003D5C 323C 003F                  		move.w	#$3F,d1
00003D60                            
00003D60                            Level_ClrVars2:
00003D60 22C0                       		move.l	d0,(a1)+
00003D62 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003D66                            
00003D66 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003D6A 7000                       		moveq	#0,d0
00003D6C 323C 0047                  		move.w	#$47,d1
00003D70                            
00003D70                            Level_ClrVars3:
00003D70 22C0                       		move.l	d0,(a1)+
00003D72 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003D76                            
00003D76 46FC 2700                  		move	#$2700,sr
00003D7A 6100 D77E                  		bsr.w	ClearScreen
00003D7E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003D84 3CBC 8B03                  		move.w	#$8B03,(a6)
00003D88 3CBC 8230                  		move.w	#$8230,(a6)
00003D8C 3CBC 8407                  		move.w	#$8407,(a6)
00003D90 3CBC 857C                  		move.w	#$857C,(a6)
00003D94 3CBC 9001                  		move.w	#$9001,(a6)
00003D98 3CBC 8004                  		move.w	#$8004,(a6)
00003D9C 3CBC 8720                  		move.w	#$8720,(a6)
00003DA0 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003DA6 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003DAA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003DB0 6600                       		bne.s	Level_LoadPal	; if not, branch
00003DB2 3CBC 8014                  		move.w	#$8014,(a6)
00003DB6 7000                       		moveq	#0,d0
00003DB8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003DBC D040                       		add.w	d0,d0
00003DBE 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003DC4 3031 0000                  		move.w	(a1,d0.w),d0
00003DC8 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003DCC 31C0 F648                  		move.w	d0,($FFFFF648).w
00003DD0 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003DD4 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003DD8 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003DDC 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003DE2 6000 0000                  		bra.w	Level_LoadPal
00003DE6                            Player_Palette:
00003DE6                            		; normal, lz, sbz, blank
00003DE6 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003DEE                            		
00003DEE 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003DF6 0018 0016 0017 0000        		dc.w	24,22,23,0 ; Pal_Anakama 
00003DFE 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003E06                            
00003E06                            		; add more player palettes
00003E06                            Level_LoadPal:
00003E06 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003E0C 46FC 2300                  		move	#$2300,sr
00003E10                            
00003E10 7200                       		moveq	#0,d1
00003E12 1238 FFE8                  		move.b	(v_character),d1
00003E16 D241                       		add.w	d1,d1
00003E18 D241                       		add.w	d1,d1
00003E1A D241                       		add.w	d1,d1
00003E1C 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003E20                            		
00003E20 6100 E52A                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003E24 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E2A 6600                       		bne.s	Level_GetBgm	; if not, branch
00003E2C 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003E30 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003E36 6600                       		bne.s	Level_WaterPal	; if not, branch
00003E38 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003E3C                            
00003E3C                            Level_WaterPal:
00003E3C 6100 E526                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003E40 4A38 FE30                  		tst.b	($FFFFFE30).w
00003E44 6700                       		beq.s	Level_GetBgm
00003E46 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003E4C                            
00003E4C                            ; NineKode begins here - How to play different songs on different acts
00003E4C                             
00003E4C                            Level_GetBgm:
00003E4C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E50 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003E54 7000                       		moveq	#0,d0
00003E56 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E5A                             
00003E5A 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003E60 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003E62 43F9 0000 3CBC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003E68 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E6A                             
00003E6A                            Level_GetBgm2:
00003E6A 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003E70 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003E72 43F9 0000 3CC4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003E78 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E7A                             
00003E7A                            Level_GetBgm3:
00003E7A 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003E80 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003E82 43F9 0000 3CCA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003E88 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E8A                             
00003E8A                            Level_GetBgm4:
00003E8A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003E90 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003E92 43F9 0000 3CD0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003E98                             
00003E98                            Level_PlayBgm:
00003E98 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003E9C 6100 D72E                  		bsr.w	PlaySound	; play music
00003EA0 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003EA6                             
00003EA6                            ; NineKode ends here
00003EA6                            
00003EA6                            Level_TtlCard:
00003EA6 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003EAC 6100 EE56                  		bsr.w	DelayProgram
00003EB0 4EB9 0000 0000             		jsr	ObjectsLoad
00003EB6 4EB9 0000 0000             		jsr	BuildSprites
00003EBC 6100 D964                  		bsr.w	RunPLC_RAM
00003EC0 3038 D108                  		move.w	($FFFFD108).w,d0
00003EC4 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003EC8 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003ECA 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003ECE 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003ED0 4EB9 0000 0000             		jsr	Hud_Base
00003ED6                            
00003ED6                            loc_3946:
00003ED6 7003                       		moveq	#3,d0
00003ED8 6100 E456                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003EDC 6100 0000                  		bsr.w	LevelSizeLoad
00003EE0 6100 0000                  		bsr.w	DeformBgLayer
00003EE4 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003EEA 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003EEE 6100 0000                  		bsr.w	LoadTilesFromStart
00003EF2 4EB9 0000 0000             		jsr	FloorLog_Unk
00003EF8 6100 0000                  		bsr.w	ColIndexLoad
00003EFC 6100 0000                  		bsr.w	LZWaterEffects
00003F00 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003F06 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F0A 6B00                       		bmi.s	Level_ChkDebug
00003F0C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003F12                            
00003F12                            Level_ChkDebug:
00003F12 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003F16 6700                       		beq.s	Level_ChkWater	; if not, branch
00003F18 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003F1E 6700                       		beq.s	Level_ChkWater	; if not, branch
00003F20 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003F26                            
00003F26                            Level_ChkWater:
00003F26 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003F2C 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003F32 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003F38 6600                       		bne.s	Level_LoadObj	; if not, branch
00003F3A 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003F40 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003F46 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003F4C 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003F52                            
00003F52                            Level_LoadObj:
00003F52 4EB9 0000 0000             		jsr	ObjPosLoad
00003F58 4EB9 0000 0000             		jsr	ObjectsLoad
00003F5E 4EB9 0000 0000             		jsr	BuildSprites
00003F64 7000                       		moveq	#0,d0
00003F66 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003F6A 6600                       		bne.s	loc_39E8	; if yes, branch
00003F6C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003F70 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003F74 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003F78                            
00003F78                            loc_39E8:
00003F78 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003F7C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003F80 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003F84 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003F88                            		; move.b	d0,($FFFFFE2F).w
00003F88 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003F8E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003F92 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003F96 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003F9A 6100 0000                  		bsr.w	OscillateNumInit
00003F9E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003FA4 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003FAA 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003FB0 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003FB6 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003FBC 7000                       		moveq	#0,d0
00003FBE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003FC2 E548                       		lsl.w	#2,d0
00003FC4 2271 0000                  		movea.l	(a1,d0.w),a1
00003FC8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003FCC 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003FCE 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003FD4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003FD8 5340                       		subq.w	#1,d0
00003FDA E548                       		lsl.w	#2,d0
00003FDC 2271 0000                  		movea.l	(a1,d0.w),a1
00003FE0                            
00003FE0                            Level_Demo:
00003FE0 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003FE6 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003FEA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003FF0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FF4 6A00                       		bpl.s	Level_ChkWaterPal
00003FF6 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003FFC 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00004002 6600                       		bne.s	Level_ChkWaterPal
00004004 31FC 01FE F614             		move.w	#510,($FFFFF614).w
0000400A                            
0000400A                            Level_ChkWaterPal:
0000400A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00004010 6600                       		bne.s	Level_Delay	; if not, branch
00004012 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00004014 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
0000401A 6600                       		bne.s	Level_WaterPal2	; if not, branch
0000401C 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
0000401E                            
0000401E                            Level_WaterPal2:
0000401E 6100 E360                  		bsr.w	PalLoad4_Water
00004022                            
00004022                            Level_Delay:
00004022 323C 0003                  		move.w	#3,d1
00004026                            
00004026                            Level_DelayLoop:
00004026 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000402C 6100 ECD6                  		bsr.w	DelayProgram
00004030 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004034                            
00004034 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000403A 6100 DF72                  		bsr.w	Pal_FadeTo2
0000403E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004042 6B00                       		bmi.s	Level_ClrCardArt
00004044 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004048 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000404C 5838 D124                  		addq.b	#4,($FFFFD124).w
00004050 5838 D164                  		addq.b	#4,($FFFFD164).w
00004054 6000                       		bra.s	Level_StartGame
00004056                            ; ===========================================================================
00004056                            
00004056                            Level_ClrCardArt:
00004056 7002                       		moveq	#2,d0
00004058 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load explosion patterns
0000405E 7000                       		moveq	#0,d0
00004060 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004064 0640 0015                  		addi.w	#$15,d0
00004068 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000406E                            
0000406E                            Level_StartGame:
0000406E 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004074                            
00004074                            ; ---------------------------------------------------------------------------
00004074                            ; Main level loop (when	all title card and loading sequences are finished)
00004074                            ; ---------------------------------------------------------------------------
00004074                            
00004074                            Level_MainLoop:
00004074 6100 D568                  		bsr.w	PauseGame
00004078 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000407E 6100 EC84                  		bsr.w	DelayProgram
00004082 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004086 6100 0000                  		bsr.w	MoveSonicInDemo
0000408A 6100 0000                  		bsr.w	LZWaterEffects
0000408E 4EB9 0000 0000             		jsr	ObjectsLoad
00004094 4A78 FE08                  		tst.w	($FFFFFE08).w
00004098 6600                       		bne.s	loc_3B10
0000409A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000040A0 6400                       		bcc.s	loc_3B14
000040A2                            
000040A2                            loc_3B10:
000040A2 6100 0000                  		bsr.w	DeformBgLayer
000040A6                            
000040A6                            loc_3B14:
000040A6 4EB9 0000 0000             		jsr	BuildSprites
000040AC 4EB9 0000 0000             		jsr	ObjPosLoad
000040B2 6100 DABE                  		bsr.w	PalCycle_Load
000040B6 6100 D76A                  		bsr.w	RunPLC_RAM
000040BA 6100 0000                  		bsr.w	OscillateNumDo
000040BE 6100 0000                  		bsr.w	ChangeRingFrame
000040C2 6100 0000                  		bsr.w	SignpostArtLoad
000040C6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000040CC 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000040CE 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000040D2 6600 FC02                  		bne.w	Level		; if yes, branch
000040D6 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000040DC 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000040E0 4E75                       		rts	
000040E2                            ; ===========================================================================
000040E2                            
000040E2                            Level_ChkDemo:				; XREF: Level_MainLoop
000040E2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000040E6 6600                       		bne.s	Level_EndDemo	; if yes, branch
000040E8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000040EC 6700                       		beq.s	Level_EndDemo	; if not, branch
000040EE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000040F4 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000040F8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000040FE 4E75                       		rts	
00004100                            ; ===========================================================================
00004100                            
00004100                            Level_EndDemo:				; XREF: Level_ChkDemo
00004100 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00004106 6600                       		bne.s	loc_3B88	; if not, branch
00004108 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000410E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004112 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004114 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000411A                            
0000411A                            loc_3B88:
0000411A 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004120 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004126 4278 F794                  		clr.w	($FFFFF794).w
0000412A                            
0000412A                            loc_3B98:
0000412A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004130 6100 EBD2                  		bsr.w	DelayProgram
00004134 6100 0000                  		bsr.w	MoveSonicInDemo
00004138 4EB9 0000 0000             		jsr	ObjectsLoad
0000413E 4EB9 0000 0000             		jsr	BuildSprites
00004144 4EB9 0000 0000             		jsr	ObjPosLoad
0000414A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000414E 6A00                       		bpl.s	loc_3BC8
00004150 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004156 6100 DF32                  		bsr.w	Pal_FadeOut
0000415A                            
0000415A                            loc_3BC8:
0000415A 4A78 F614                  		tst.w	($FFFFF614).w
0000415E 66CA                       		bne.s	loc_3B98
00004160 4E75                       		rts	
00004162                            ; ===========================================================================
00004162                            ; ---------------------------------------------------------------------------
00004162                            ; Subroutine to	do special water effects in Labyrinth Zone
00004162                            ; ---------------------------------------------------------------------------
00004162                            
00004162                            LZWaterEffects:				; XREF: Level
00004162 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004168 6600                       		bne.s	locret_3C28	; if not, branch
0000416A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004170 6400                       		bcc.s	LZMoveWater
00004172 6100 0000                  		bsr.w	LZWindTunnels
00004176 6100 0000                  		bsr.w	LZWaterSlides
0000417A 6100 0000                  		bsr.w	LZDynamicWater
0000417E                            
0000417E                            LZMoveWater:
0000417E 4238 F64E                  		clr.b	($FFFFF64E).w
00004182 7000                       		moveq	#0,d0
00004184 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004188 E248                       		lsr.w	#1,d0
0000418A D078 F648                  		add.w	($FFFFF648).w,d0
0000418E 31C0 F646                  		move.w	d0,($FFFFF646).w
00004192 3038 F646                  		move.w	($FFFFF646).w,d0
00004196 9078 F704                  		sub.w	($FFFFF704).w,d0
0000419A 6400                       		bcc.s	loc_3C1A
0000419C 4A40                       		tst.w	d0
0000419E 6A00                       		bpl.s	loc_3C1A
000041A0 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000041A6 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000041AC                            
000041AC                            loc_3C1A:
000041AC 0C40 00DF                  		cmpi.w	#$DF,d0
000041B0 6500                       		bcs.s	loc_3C24
000041B2 303C 00DF                  		move.w	#$DF,d0
000041B6                            
000041B6                            loc_3C24:
000041B6 11C0 F625                  		move.b	d0,($FFFFF625).w
000041BA                            
000041BA                            locret_3C28:
000041BA 4E75                       		rts	
000041BC                            ; ===========================================================================
000041BC                            ; ---------------------------------------------------------------------------
000041BC                            ; Labyrinth default water heights
000041BC                            ; ---------------------------------------------------------------------------
000041BC                            WaterHeight:	incbin	misc\lz_heigh.bin
000041C4                            		even
000041C4                            ; ===========================================================================
000041C4                            
000041C4                            ; ---------------------------------------------------------------------------
000041C4                            ; Labyrinth dynamic water routines
000041C4                            ; ---------------------------------------------------------------------------
000041C4                            
000041C4                            LZDynamicWater:				; XREF: LZWaterEffects
000041C4 7000                       		moveq	#0,d0
000041C6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000041CA D040                       		add.w	d0,d0
000041CC 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000041D0 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000041D4 7200                       		moveq	#0,d1
000041D6 1238 F64C                  		move.b	($FFFFF64C).w,d1
000041DA 3038 F64A                  		move.w	($FFFFF64A).w,d0
000041DE 9078 F648                  		sub.w	($FFFFF648).w,d0
000041E2 6700                       		beq.s	locret_3C5A
000041E4 6400                       		bcc.s	loc_3C56
000041E6 4441                       		neg.w	d1
000041E8                            
000041E8                            loc_3C56:
000041E8 D378 F648                  		add.w	d1,($FFFFF648).w
000041EC                            
000041EC                            locret_3C5A:
000041EC 4E75                       		rts	
000041EE                            ; ===========================================================================
000041EE 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000041F0 0000                       		dc.w DynWater_LZ2-DynWater_Index
000041F2 0000                       		dc.w DynWater_LZ3-DynWater_Index
000041F4 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000041F6                            ; ===========================================================================
000041F6                            
000041F6                            DynWater_LZ1:				; XREF: DynWater_Index
000041F6 3038 F700                  		move.w	($FFFFF700).w,d0
000041FA 1438 F64D                  		move.b	($FFFFF64D).w,d2
000041FE 6600                       		bne.s	loc_3CD0
00004200 323C 00B8                  		move.w	#$B8,d1
00004204 0C40 0600                  		cmpi.w	#$600,d0
00004208 6500                       		bcs.s	loc_3CB4
0000420A 323C 0108                  		move.w	#$108,d1
0000420E 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004214 6500                       		bcs.s	loc_3CBA
00004216 0C40 0C00                  		cmpi.w	#$C00,d0
0000421A 6500                       		bcs.s	loc_3CB4
0000421C 323C 0318                  		move.w	#$318,d1
00004220 0C40 1080                  		cmpi.w	#$1080,d0
00004224 6500                       		bcs.s	loc_3CB4
00004226 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000422C 323C 05C8                  		move.w	#$5C8,d1
00004230 0C40 1380                  		cmpi.w	#$1380,d0
00004234 6500                       		bcs.s	loc_3CB4
00004236 323C 03A8                  		move.w	#$3A8,d1
0000423A B278 F648                  		cmp.w	($FFFFF648).w,d1
0000423E 6600                       		bne.s	loc_3CB4
00004240 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004246                            
00004246                            loc_3CB4:
00004246 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000424A 4E75                       		rts	
0000424C                            ; ===========================================================================
0000424C                            
0000424C                            loc_3CBA:				; XREF: DynWater_LZ1
0000424C 0C40 0C80                  		cmpi.w	#$C80,d0
00004250 65F4                       		bcs.s	loc_3CB4
00004252 323C 00E8                  		move.w	#$E8,d1
00004256 0C40 1500                  		cmpi.w	#$1500,d0
0000425A 65EA                       		bcs.s	loc_3CB4
0000425C 323C 0108                  		move.w	#$108,d1
00004260 60E4                       		bra.s	loc_3CB4
00004262                            ; ===========================================================================
00004262                            
00004262                            loc_3CD0:				; XREF: DynWater_LZ1
00004262 5302                       		subq.b	#1,d2
00004264 6600                       		bne.s	locret_3CF4
00004266 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000426C 6400                       		bcc.s	locret_3CF4
0000426E 323C 03A8                  		move.w	#$3A8,d1
00004272 0C40 1300                  		cmpi.w	#$1300,d0
00004276 6500                       		bcs.s	loc_3CF0
00004278 323C 0108                  		move.w	#$108,d1
0000427C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004282                            
00004282                            loc_3CF0:
00004282 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004286                            
00004286                            locret_3CF4:
00004286 4E75                       		rts	
00004288                            ; ===========================================================================
00004288                            
00004288                            DynWater_LZ2:				; XREF: DynWater_Index
00004288 3038 F700                  		move.w	($FFFFF700).w,d0
0000428C 323C 0328                  		move.w	#$328,d1
00004290 0C40 0500                  		cmpi.w	#$500,d0
00004294 6500                       		bcs.s	loc_3D12
00004296 323C 03C8                  		move.w	#$3C8,d1
0000429A 0C40 0B00                  		cmpi.w	#$B00,d0
0000429E 6500                       		bcs.s	loc_3D12
000042A0 323C 0428                  		move.w	#$428,d1
000042A4                            
000042A4                            loc_3D12:
000042A4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042A8 4E75                       		rts	
000042AA                            ; ===========================================================================
000042AA                            
000042AA                            DynWater_LZ3:				; XREF: DynWater_Index
000042AA 3038 F700                  		move.w	($FFFFF700).w,d0
000042AE 1438 F64D                  		move.b	($FFFFF64D).w,d2
000042B2 6600                       		bne.s	loc_3D5E
000042B4 323C 0500                  		move.w	#$500,d1
000042B8 0C40 0600                  		cmpi.w	#$600,d0
000042BC 6500                       		bcs.s	loc_3D54
000042BE 0C40 1B00                  		cmpi.w	#$1B00,d0
000042C2 6500                       		bcs.s	loc_3D54
000042C4 323C 0850                  		move.w	#$850,d1
000042C8                            
000042C8                            loc_3D54:
000042C8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042CC 31C1 F648                  		move.w	d1,($FFFFF648).w
000042D0 4E75                       		rts	
000042D2                            ; ===========================================================================
000042D2                            
000042D2                            loc_3D5E:				; XREF: DynWater_LZ3
000042D2 5302                       		subq.b	#1,d2
000042D4 6600                       		bne.s	loc_3DA8
000042D6 323C 04C8                  		move.w	#$4C8,d1
000042DA 0C40 0770                  		cmpi.w	#$770,d0
000042DE 6500                       		bcs.s	loc_3DA2
000042E0 323C 0308                  		move.w	#$308,d1
000042E4 0C40 1400                  		cmpi.w	#$1400,d0
000042E8 6500                       		bcs.s	loc_3DA2
000042EA 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000042F0 6700                       		beq.s	loc_3D8E
000042F2 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000042F8 6400                       		bcc.s	loc_3D8E
000042FA 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004300 6400                       		bcc.s	loc_3DA2
00004302                            
00004302                            loc_3D8E:
00004302 323C 0508                  		move.w	#$508,d1
00004306 31C1 F648                  		move.w	d1,($FFFFF648).w
0000430A 0C40 1770                  		cmpi.w	#$1770,d0
0000430E 6500                       		bcs.s	loc_3DA2
00004310 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004316                            
00004316                            loc_3DA2:
00004316 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000431A 4E75                       		rts	
0000431C                            ; ===========================================================================
0000431C                            
0000431C                            loc_3DA8:
0000431C 5302                       		subq.b	#1,d2
0000431E 6600                       		bne.s	loc_3DD2
00004320 323C 0508                  		move.w	#$508,d1
00004324 0C40 1860                  		cmpi.w	#$1860,d0
00004328 6500                       		bcs.s	loc_3DCC
0000432A 323C 0188                  		move.w	#$188,d1
0000432E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004332 6400                       		bcc.s	loc_3DC6
00004334 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004338 6600                       		bne.s	loc_3DCC
0000433A                            
0000433A                            loc_3DC6:
0000433A 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004340                            
00004340                            loc_3DCC:
00004340 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004344 4E75                       		rts	
00004346                            ; ===========================================================================
00004346                            
00004346                            loc_3DD2:
00004346 5302                       		subq.b	#1,d2
00004348 6600                       		bne.s	loc_3E0E
0000434A 323C 0188                  		move.w	#$188,d1
0000434E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004352 6500                       		bcs.s	loc_3E04
00004354 323C 0900                  		move.w	#$900,d1
00004358 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000435C 6500                       		bcs.s	loc_3E04
0000435E 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004364 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000436A 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004370 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004376 4E75                       		rts	
00004378                            ; ===========================================================================
00004378                            
00004378                            loc_3E04:
00004378 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000437C 31C1 F648                  		move.w	d1,($FFFFF648).w
00004380 4E75                       		rts	
00004382                            ; ===========================================================================
00004382                            
00004382                            loc_3E0E:
00004382 0C40 1E00                  		cmpi.w	#$1E00,d0
00004386 6500                       		bcs.s	locret_3E1A
00004388 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000438E                            
0000438E                            locret_3E1A:
0000438E 4E75                       		rts	
00004390                            ; ===========================================================================
00004390                            
00004390                            DynWater_SBZ3:				; XREF: DynWater_Index
00004390 323C 0228                  		move.w	#$228,d1
00004394 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
0000439A 6500                       		bcs.s	loc_3E2C
0000439C 323C 04C8                  		move.w	#$4C8,d1
000043A0                            
000043A0                            loc_3E2C:
000043A0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043A4 4E75                       		rts
000043A6                            
000043A6                            ; ---------------------------------------------------------------------------
000043A6                            ; Labyrinth Zone "wind tunnels"	subroutine
000043A6                            ; ---------------------------------------------------------------------------
000043A6                            
000043A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000043A6                            
000043A6                            
000043A6                            LZWindTunnels:				; XREF: LZWaterEffects
000043A6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000043AA 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000043AE 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000043B4 7000                       		moveq	#0,d0
000043B6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000043BA E748                       		lsl.w	#3,d0
000043BC D4C0                       		adda.w	d0,a2
000043BE 7200                       		moveq	#0,d1
000043C0 4A38 FE11                  		tst.b	($FFFFFE11).w
000043C4 6600                       		bne.s	loc_3E56
000043C6 7201                       		moveq	#1,d1
000043C8 514A                       		subq.w	#8,a2
000043CA                            
000043CA                            loc_3E56:
000043CA 43F8 D000                  		lea	($FFFFD000).w,a1
000043CE                            
000043CE                            LZWind_Loop:
000043CE 3029 0008                  		move.w	8(a1),d0
000043D2 B052                       		cmp.w	(a2),d0
000043D4 6500 0000                  		bcs.w	loc_3EF4
000043D8 B06A 0004                  		cmp.w	4(a2),d0
000043DC 6400 0000                  		bcc.w	loc_3EF4
000043E0 3429 000C                  		move.w	$C(a1),d2
000043E4 B46A 0002                  		cmp.w	2(a2),d2
000043E8 6500                       		bcs.s	loc_3EF4
000043EA B46A 0006                  		cmp.w	6(a2),d2
000043EE 6400                       		bcc.s	loc_3EF4
000043F0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000043F4 0200 003F                  		andi.b	#$3F,d0
000043F8 6600                       		bne.s	loc_3E90
000043FA 303C 00D0                  		move.w	#$D0,d0
000043FE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004404                            
00004404                            loc_3E90:
00004404 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004408 6600 0000                  		bne.w	locret_3F0A
0000440C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004412 6400                       		bcc.s	loc_3F06
00004414 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000441A 0440 0080                  		subi.w	#$80,d0
0000441E B052                       		cmp.w	(a2),d0
00004420 6400                       		bcc.s	LZWind_Move
00004422 7002                       		moveq	#2,d0
00004424 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000442A 6600                       		bne.s	loc_3EBA
0000442C 4440                       		neg.w	d0
0000442E                            
0000442E                            loc_3EBA:
0000442E D169 000C                  		add.w	d0,$C(a1)
00004432                            
00004432                            LZWind_Move:
00004432 5869 0008                  		addq.w	#4,8(a1)
00004436 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000443C 337C 0000 0012             		move.w	#0,$12(a1)
00004442 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004448 08E9 0001 0022             		bset	#1,$22(a1)
0000444E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004454 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004456 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000445A                            
0000445A                            LZWind_MoveDown:
0000445A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004460 6700                       		beq.s	locret_3EF2	; if not, branch
00004462 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004466                            
00004466                            locret_3EF2:
00004466 4E75                       		rts	
00004468                            ; ===========================================================================
00004468                            
00004468                            loc_3EF4:				; XREF: LZWindTunnels
00004468 504A                       		addq.w	#8,a2
0000446A 51C9 FF62                  		dbf	d1,LZWind_Loop
0000446E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004472 6700                       		beq.s	locret_3F0A
00004474 137C 0000 001C             		move.b	#0,$1C(a1)
0000447A                            
0000447A                            loc_3F06:
0000447A 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000447E                            
0000447E                            locret_3F0A:
0000447E 4E75                       		rts	
00004480                            ; End of function LZWindTunnels
00004480                            
00004480                            ; ===========================================================================
00004480 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004488 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000449A 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000044A8                            					; XREF: LZWindTunnels
000044A8                            		even
000044A8                            
000044A8                            ; ---------------------------------------------------------------------------
000044A8                            ; Labyrinth Zone water slide subroutine
000044A8                            ; ---------------------------------------------------------------------------
000044A8                            
000044A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044A8                            
000044A8                            
000044A8                            LZWaterSlides:				; XREF: LZWaterEffects
000044A8 43F8 D000                  		lea	($FFFFD000).w,a1
000044AC 0829 0001 0022             		btst	#1,$22(a1)
000044B2 6600                       		bne.s	loc_3F6A
000044B4 3029 000C                  		move.w	$C(a1),d0
000044B8 E248                       		lsr.w	#1,d0
000044BA 0240 0380                  		andi.w	#$380,d0
000044BE 1229 0008                  		move.b	8(a1),d1
000044C2 0241 007F                  		andi.w	#$7F,d1
000044C6 D041                       		add.w	d1,d0
000044C8 45F8 A400                  		lea	($FFFFA400).w,a2
000044CC 1032 0000                  		move.b	(a2,d0.w),d0
000044D0 45FA 0000                  		lea	byte_3FCF(pc),a2
000044D4 7206                       		moveq	#6,d1
000044D6                            
000044D6                            loc_3F62:
000044D6 B022                       		cmp.b	-(a2),d0
000044D8 57C9 FFFC                  		dbeq	d1,loc_3F62
000044DC 6700                       		beq.s	LZSlide_Move
000044DE                            
000044DE                            loc_3F6A:
000044DE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000044E2 6700                       		beq.s	locret_3F7A
000044E4 337C 0005 003E             		move.w	#5,$3E(a1)
000044EA 4238 F7CA                  		clr.b	($FFFFF7CA).w
000044EE                            
000044EE                            locret_3F7A:
000044EE 4E75                       		rts	
000044F0                            ; ===========================================================================
000044F0                            
000044F0                            LZSlide_Move:				; XREF: LZWaterSlides
000044F0 0C41 0003                  		cmpi.w	#3,d1
000044F4 6400                       		bcc.s	loc_3F84
000044F6 4E71                       		nop	
000044F8                            
000044F8                            loc_3F84:
000044F8 08A9 0000 0022             		bclr	#0,$22(a1)
000044FE 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004502 1340 0014                  		move.b	d0,$14(a1)
00004506 6A00                       		bpl.s	loc_3F9A
00004508 08E9 0000 0022             		bset	#0,$22(a1)
0000450E                            
0000450E                            loc_3F9A:
0000450E 4229 0015                  		clr.b	$15(a1)
00004512 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004518 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000451E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004522 0200 001F                  		andi.b	#$1F,d0
00004526 6600                       		bne.s	locret_3FBE
00004528 303C 00D0                  		move.w	#$D0,d0
0000452C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play water sound
00004532                            
00004532                            locret_3FBE:
00004532 4E75                       		rts	
00004534                            ; End of function LZWaterSlides
00004534                            
00004534                            ; ===========================================================================
00004534 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004543 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004544                            		even
00004544                            
00004544                            ; ---------------------------------------------------------------------------
00004544                            ; Subroutine to	move Sonic in demo mode
00004544                            ; ---------------------------------------------------------------------------
00004544                            
00004544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004544                            
00004544                            
00004544                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004544 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004548 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000454A 4E75                       		rts	
0000454C                            ; ===========================================================================
0000454C                            
0000454C                            ; This is an unused subroutine for recording a demo
0000454C                            
0000454C                            MoveDemo_Record:
0000454C 43F9 0008 0000             		lea	($80000).l,a1
00004552 3038 F790                  		move.w	($FFFFF790).w,d0
00004556 D2C0                       		adda.w	d0,a1
00004558 1038 F604                  		move.b	($FFFFF604).w,d0
0000455C B011                       		cmp.b	(a1),d0
0000455E 6600                       		bne.s	loc_3FFA
00004560 5229 0001                  		addq.b	#1,1(a1)
00004564 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000456A 6700                       		beq.s	loc_3FFA
0000456C 4E75                       		rts	
0000456E                            ; ===========================================================================
0000456E                            
0000456E                            loc_3FFA:				; XREF: MoveDemo_Record
0000456E 1340 0002                  		move.b	d0,2(a1)
00004572 137C 0000 0003             		move.b	#0,3(a1)
00004578 5478 F790                  		addq.w	#2,($FFFFF790).w
0000457C 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004582 4E75                       		rts	
00004584                            ; ===========================================================================
00004584                            
00004584                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004584 4A38 F604                  		tst.b	($FFFFF604).w
00004588 6A00                       		bpl.s	loc_4022
0000458A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000458E 6B00                       		bmi.s	loc_4022
00004590 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004596                            
00004596                            loc_4022:
00004596 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000459C 7000                       		moveq	#0,d0
0000459E 1038 FE10                  		move.b	($FFFFFE10).w,d0
000045A2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000045A8 6600                       		bne.s	loc_4038
000045AA 7006                       		moveq	#6,d0
000045AC                            
000045AC                            loc_4038:
000045AC E548                       		lsl.w	#2,d0
000045AE 2271 0000                  		movea.l	(a1,d0.w),a1
000045B2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000045B6 6A00                       		bpl.s	loc_4056
000045B8 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000045BE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000045C2 5340                       		subq.w	#1,d0
000045C4 E548                       		lsl.w	#2,d0
000045C6 2271 0000                  		movea.l	(a1,d0.w),a1
000045CA                            
000045CA                            loc_4056:
000045CA 3038 F790                  		move.w	($FFFFF790).w,d0
000045CE D2C0                       		adda.w	d0,a1
000045D0 1011                       		move.b	(a1),d0
000045D2 41F8 F604                  		lea	($FFFFF604).w,a0
000045D6 1200                       		move.b	d0,d1
000045D8 1410                       		move.b	(a0),d2
000045DA B500                       		eor.b	d2,d0
000045DC 10C1                       		move.b	d1,(a0)+
000045DE C001                       		and.b	d1,d0
000045E0 10C0                       		move.b	d0,(a0)+
000045E2 5338 F792                  		subq.b	#1,($FFFFF792).w
000045E6 6400                       		bcc.s	locret_407E
000045E8 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000045EE 5478 F790                  		addq.w	#2,($FFFFF790).w
000045F2                            
000045F2                            locret_407E:
000045F2 4E75                       		rts	
000045F4                            ; End of function MoveSonicInDemo
000045F4                            
000045F4                            ; ===========================================================================
000045F4                            ; ---------------------------------------------------------------------------
000045F4                            ; Demo sequence	pointers
000045F4                            ; ---------------------------------------------------------------------------
000045F4                            Demo_Index:
000045F4                            	include "_inc\Demo pointers for intro.asm"
000045F4                            ; ---------------------------------------------------------------------------
000045F4                            ; Demo sequence	pointers
000045F4                            ; ---------------------------------------------------------------------------
000045F4 0000 0000                  	dc.l Demo_GHZ
000045F8 0000 0000                  	dc.l Demo_GHZ
000045FC 0000 0000                  	dc.l Demo_MZ
00004600 0000 0000                  	dc.l Demo_MZ
00004604 0000 0000                  	dc.l Demo_SYZ
00004608 0000 0000                  	dc.l Demo_SYZ
0000460C 0000 0000                  	dc.l Demo_SS
00004610 0000 0000                  	dc.l Demo_SS
00004610 0000 0000                  	dc.l Demo_SS
00004614                            
00004614                            Demo_EndIndex:
00004614                            	include "_inc\Demo pointers for ending.asm"
00004614                            ; ---------------------------------------------------------------------------
00004614                            ; Demo (ending) sequence pointers
00004614                            ; ---------------------------------------------------------------------------
00004614 0000 0000                  	dc.l Demo_EndGHZ1
00004618 0000 0000                  	dc.l Demo_EndMZ
0000461C 0000 0000                  	dc.l Demo_EndSYZ
00004620 0000 0000                  	dc.l Demo_EndLZ
00004624 0000 0000                  	dc.l Demo_EndSLZ
00004628 0000 0000                  	dc.l Demo_EndSBZ1
0000462C 0000 0000                  	dc.l Demo_EndSBZ2
00004630 0000 0000                  	dc.l Demo_EndGHZ2
00004630 0000 0000                  	dc.l Demo_EndGHZ2
00004634                            
00004634 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004644 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004654 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004664                            		even
00004664                            
00004664                            ; ---------------------------------------------------------------------------
00004664                            ; Collision index loading subroutine
00004664                            ; ---------------------------------------------------------------------------
00004664                            
00004664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004664                            
00004664                            
00004664                            ColIndexLoad:				; XREF: Level
00004664 7000                       		moveq	#0,d0
00004666 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000466A E548                       		lsl.w	#2,d0
0000466C 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004672 4E75                       		rts	
00004674                            ; End of function ColIndexLoad
00004674                            
00004674                            ; ===========================================================================
00004674                            ; ---------------------------------------------------------------------------
00004674                            ; Collision index pointers
00004674                            ; ---------------------------------------------------------------------------
00004674                            ColPointers:
00004674                            	include "_inc\Collision index pointers.asm"
00004674                            ; ---------------------------------------------------------------------------
00004674                            ; Collision index pointers
00004674                            ; ---------------------------------------------------------------------------
00004674 0000 0000                  	dc.l Col_GHZ
00004678 0000 0000                  	dc.l Col_LZ
0000467C 0000 0000                  	dc.l Col_MZ
00004680 0000 0000                  	dc.l Col_SLZ
00004684 0000 0000                  	dc.l Col_SYZ
00004688 0000 0000                  	dc.l Col_SBZ
00004688 0000 0000                  	dc.l Col_SBZ
0000468C                            
0000468C                            ; ---------------------------------------------------------------------------
0000468C                            ; Oscillating number subroutine
0000468C                            ; ---------------------------------------------------------------------------
0000468C                            
0000468C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000468C                            
0000468C                            
0000468C                            OscillateNumInit:			; XREF: Level
0000468C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004690 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004696 7220                       		moveq	#$20,d1
00004698                            
00004698                            Osc_Loop:
00004698 32DA                       		move.w	(a2)+,(a1)+
0000469A 51C9 FFFC                  		dbf	d1,Osc_Loop
0000469E 4E75                       		rts	
000046A0                            ; End of function OscillateNumInit
000046A0                            
000046A0                            ; ===========================================================================
000046A0 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000046A4 0000 0080                  		dc.w 0,	$80
000046A8 0000 0080                  		dc.w 0,	$80
000046AC 0000 0080                  		dc.w 0,	$80
000046B0 0000 0080                  		dc.w 0,	$80
000046B4 0000 0080                  		dc.w 0,	$80
000046B8 0000 0080                  		dc.w 0,	$80
000046BC 0000 0080                  		dc.w 0,	$80
000046C0 0000 0080                  		dc.w 0,	$80
000046C4 0000 50F0                  		dc.w 0,	$50F0
000046C8 011E 2080                  		dc.w $11E, $2080
000046CC 00B4 3080                  		dc.w $B4, $3080
000046D0 010E 5080                  		dc.w $10E, $5080
000046D4 01C2 7080                  		dc.w $1C2, $7080
000046D8 0276 0080                  		dc.w $276, $80
000046DC 0000 0080                  		dc.w 0,	$80
000046E0 0000                       		dc.w 0
000046E2                            		even
000046E2                            
000046E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046E2                            
000046E2                            
000046E2                            OscillateNumDo:				; XREF: Level
000046E2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000046E8 6400                       		bcc.s	locret_41C4
000046EA 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000046EE 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000046F4 3619                       		move.w	(a1)+,d3
000046F6 720F                       		moveq	#$F,d1
000046F8                            
000046F8                            loc_4184:
000046F8 341A                       		move.w	(a2)+,d2
000046FA 381A                       		move.w	(a2)+,d4
000046FC 0303                       		btst	d1,d3
000046FE 6600                       		bne.s	loc_41A4
00004700 3029 0002                  		move.w	2(a1),d0
00004704 D042                       		add.w	d2,d0
00004706 3340 0002                  		move.w	d0,2(a1)
0000470A D151                       		add.w	d0,0(a1)
0000470C B811                       		cmp.b	0(a1),d4
0000470E 6200                       		bhi.s	loc_41BA
00004710 03C3                       		bset	d1,d3
00004712 6000                       		bra.s	loc_41BA
00004714                            ; ===========================================================================
00004714                            
00004714                            loc_41A4:				; XREF: OscillateNumDo
00004714 3029 0002                  		move.w	2(a1),d0
00004718 9042                       		sub.w	d2,d0
0000471A 3340 0002                  		move.w	d0,2(a1)
0000471E D151                       		add.w	d0,0(a1)
00004720 B811                       		cmp.b	0(a1),d4
00004722 6300                       		bls.s	loc_41BA
00004724 0383                       		bclr	d1,d3
00004726                            
00004726                            loc_41BA:
00004726 5849                       		addq.w	#4,a1
00004728 51C9 FFCE                  		dbf	d1,loc_4184
0000472C 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004730                            
00004730                            locret_41C4:
00004730 4E75                       		rts	
00004732                            ; End of function OscillateNumDo
00004732                            
00004732                            ; ===========================================================================
00004732 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004736 0002 0018                  		dc.w 2,	$18
0000473A 0002 0020                  		dc.w 2,	$20
0000473E 0002 0030                  		dc.w 2,	$30
00004742 0004 0020                  		dc.w 4,	$20
00004746 0008 0008                  		dc.w 8,	8
0000474A 0008 0040                  		dc.w 8,	$40
0000474E 0004 0040                  		dc.w 4,	$40
00004752 0002 0050                  		dc.w 2,	$50
00004756 0002 0050                  		dc.w 2,	$50
0000475A 0002 0020                  		dc.w 2,	$20
0000475E 0003 0030                  		dc.w 3,	$30
00004762 0005 0050                  		dc.w 5,	$50
00004766 0007 0070                  		dc.w 7,	$70
0000476A 0002 0010                  		dc.w 2,	$10
0000476E 0002 0010                  		dc.w 2,	$10
00004772                            		even
00004772                            
00004772                            ; ---------------------------------------------------------------------------
00004772                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004772                            ; ---------------------------------------------------------------------------
00004772                            
00004772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004772                            
00004772                            
00004772                            ChangeRingFrame:			; XREF: Level
00004772 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004776 6A00                       		bpl.s	loc_421C
00004778 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000477E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004782 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004788                            
00004788                            loc_421C:
00004788 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000478C 6A00                       		bpl.s	loc_4232
0000478E 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004794 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004798 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000479E                            
0000479E                            loc_4232:
0000479E 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000047A2 6A00                       		bpl.s	loc_4250
000047A4 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000047AA 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000047AE 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000047B4 6500                       		bcs.s	loc_4250
000047B6 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000047BC                            
000047BC                            loc_4250:
000047BC 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000047C0 6700                       		beq.s	locret_4272
000047C2 7000                       		moveq	#0,d0
000047C4 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000047C8 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000047CC 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000047D0 EF58                       		rol.w	#7,d0
000047D2 0240 0003                  		andi.w	#3,d0
000047D6 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000047DA 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000047DE                            
000047DE                            locret_4272:
000047DE 4E75                       		rts	
000047E0                            ; End of function ChangeRingFrame
000047E0                            
000047E0                            ; ---------------------------------------------------------------------------
000047E0                            ; End-of-act signpost pattern loading subroutine
000047E0                            ; ---------------------------------------------------------------------------
000047E0                            
000047E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047E0                            
000047E0                            
000047E0                            SignpostArtLoad:			; XREF: Level
000047E0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000047E4 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000047E8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000047EE 6700                       		beq.s	Signpost_Exit	; if yes, branch
000047F0 3038 F700                  		move.w	($FFFFF700).w,d0
000047F4 3238 F72A                  		move.w	($FFFFF72A).w,d1
000047F8 0441 0100                  		subi.w	#$100,d1
000047FC B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000047FE 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004800 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004804 6700                       		beq.s	Signpost_Exit
00004806 B278 F728                  		cmp.w	($FFFFF728).w,d1
0000480A 6700                       		beq.s	Signpost_Exit
0000480C 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004810 7012                       		moveq	#$12,d0
00004812 6000 CFD4                  		bra.w	LoadPLC2	; load signpost	patterns
00004816                            ; ===========================================================================
00004816                            
00004816                            Signpost_Exit:
00004816 4E75                       		rts	
00004818                            ; End of function SignpostArtLoad
00004818                            
00004818                            ; ===========================================================================
00004818                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004898                            Demo_MZ:	incbin	demodata\i_mz.bin
000049C8                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004A48                            Demo_SS:	incbin	demodata\i_ss.bin
00004B48                            ; ===========================================================================
00004B48                            
00004B48                            ; ---------------------------------------------------------------------------
00004B48                            ; Special Stage
00004B48                            ; ---------------------------------------------------------------------------
00004B48                            
00004B48                            SpecialStage:				; XREF: GameModeArray
00004B48 303C 00CA                  		move.w	#$CA,d0
00004B4C 6100 CA84                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004B50 6100 D650                  		bsr.w	Pal_MakeFlash
00004B54 46FC 2700                  		move	#$2700,sr
00004B58 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B5E 3CBC 8B03                  		move.w	#$8B03,(a6)
00004B62 3CBC 8004                  		move.w	#$8004,(a6)
00004B66 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004B6C 3CBC 9011                  		move.w	#$9011,(a6)
00004B70 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B74 0200 00BF                  		andi.b	#$BF,d0
00004B78 33C0 00C0 0004             		move.w	d0,($C00004).l
00004B7E 6100 C97A                  		bsr.w	ClearScreen
00004B82 46FC 2300                  		move	#$2300,sr
00004B86 4BF9 00C0 0004             		lea	($C00004).l,a5
00004B8C 3ABC 8F01                  		move.w	#$8F01,(a5)
00004B90 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004B96 3ABC 9780                  		move.w	#$9780,(a5)
00004B9A 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004BA0 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004BA8                            
00004BA8                            loc_463C:
00004BA8 3215                       		move.w	(a5),d1
00004BAA 0801 0001                  		btst	#1,d1
00004BAE 66F8                       		bne.s	loc_463C
00004BB0 3ABC 8F02                  		move.w	#$8F02,(a5)
00004BB4 6100 0000                  		bsr.w	SS_BGLoad
00004BB8 7014                       		moveq	#$14,d0
00004BBA 6100 CD66                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004BBE 43F8 D000                  		lea	($FFFFD000).w,a1
00004BC2 7000                       		moveq	#0,d0
00004BC4 323C 07FF                  		move.w	#$7FF,d1
00004BC8                            
00004BC8                            SS_ClrObjRam:
00004BC8 22C0                       		move.l	d0,(a1)+
00004BCA 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004BCE                            
00004BCE 43F8 F700                  		lea	($FFFFF700).w,a1
00004BD2 7000                       		moveq	#0,d0
00004BD4 323C 003F                  		move.w	#$3F,d1
00004BD8                            
00004BD8                            SS_ClrRam:
00004BD8 22C0                       		move.l	d0,(a1)+
00004BDA 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004BDE                            
00004BDE 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004BE2 7000                       		moveq	#0,d0
00004BE4 323C 0027                  		move.w	#$27,d1
00004BE8                            
00004BE8                            SS_ClrRam2:
00004BE8 22C0                       		move.l	d0,(a1)+
00004BEA 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004BEE                            
00004BEE 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004BF2 7000                       		moveq	#0,d0
00004BF4 323C 007F                  		move.w	#$7F,d1
00004BF8                            
00004BF8                            SS_ClrNemRam:
00004BF8 22C0                       		move.l	d0,(a1)+
00004BFA 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004BFE                            
00004BFE 4238 F64E                  		clr.b	($FFFFF64E).w
00004C02 4278 FE02                  		clr.w	($FFFFFE02).w
00004C06 700A                       		moveq	#$A,d0
00004C08 6100 D726                  		bsr.w	PalLoad1	; load special stage pallet
00004C0C 4EB9 0000 0000             		jsr	SS_Load
00004C12 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004C1A 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004C22 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004C28 6100 0000                  		bsr.w	PalCycle_SS
00004C2C 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004C30 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004C34 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004C3A 303C 0089                  		move.w	#$89,d0
00004C3E 6100 C98C                  		bsr.w	PlaySound	; play special stage BG	music
00004C42 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004C48 43F9 0000 45F4             		lea	(Demo_Index).l,a1
00004C4E 7006                       		moveq	#6,d0
00004C50 E548                       		lsl.w	#2,d0
00004C52 2271 0000                  		movea.l	(a1,d0.w),a1
00004C56 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004C5C 5338 F792                  		subq.b	#1,($FFFFF792).w
00004C60 4278 FE20                  		clr.w	($FFFFFE20).w
00004C64 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004C68 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004C6E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004C74                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004C74                            ;		beq.s	SS_NoDebug	; if not, branch
00004C74                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004C74                            ;		beq.s	SS_NoDebug	; if not, branch
00004C74                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004C74                            
00004C74                            SS_NoDebug:
00004C74 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C78 0000 0040                  		ori.b	#$40,d0
00004C7C 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C82 6100 D464                  		bsr.w	Pal_MakeWhite
00004C86                            
00004C86                            ; ---------------------------------------------------------------------------
00004C86                            ; Main Special Stage loop
00004C86                            ; ---------------------------------------------------------------------------
00004C86                            
00004C86                            SS_MainLoop:
00004C86 6100 C956                  		bsr.w	PauseGame
00004C8A 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004C90 6100 E072                  		bsr.w	DelayProgram
00004C94 4A78 F784                          tst.w   ($FFFFF784).w
00004C98 6700                               beq.s   SS_NotReversed
00004C9A 5378 F784                          subi.w  #1,($FFFFF784).w
00004C9E                            
00004C9E                            SS_NotReversed:
00004C9E 6100 F8A4                  		bsr.w	MoveSonicInDemo
00004CA2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004CA8 4EB9 0000 0000             		jsr	ObjectsLoad
00004CAE 4EB9 0000 0000             		jsr	BuildSprites
00004CB4 4EB9 0000 0000             		jsr	SS_ShowLayout
00004CBA 6100 0000                  		bsr.w	SS_BGAnimate
00004CBE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004CC2 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004CC4 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004CC8 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004CCC                            
00004CCC                            SS_ChkEnd:
00004CCC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004CD2 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004CD6                            
00004CD6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004CDA 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004CDE 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004CE4 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004CEA 6500                       		bcs.s	SS_End		; if not, branch
00004CEC 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004CF0                            
00004CF0                            SS_End:
00004CF0 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004CF6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004CFC 4278 F794                  		clr.w	($FFFFF794).w
00004D00                            
00004D00                            SS_EndLoop:
00004D00 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004D06 6100 DFFC                  		bsr.w	DelayProgram
00004D0A 6100 F838                  		bsr.w	MoveSonicInDemo
00004D0E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004D14 4EB9 0000 0000             		jsr	ObjectsLoad
00004D1A 4EB9 0000 0000             		jsr	BuildSprites
00004D20 4EB9 0000 0000             		jsr	SS_ShowLayout
00004D26 6100 0000                  		bsr.w	SS_BGAnimate
00004D2A 5378 F794                  		subq.w	#1,($FFFFF794).w
00004D2E 6A00                       		bpl.s	loc_47D4
00004D30 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004D36 6100 D498                  		bsr.w	Pal_ToWhite
00004D3A                            
00004D3A                            loc_47D4:
00004D3A 4A78 F614                  		tst.w	($FFFFF614).w
00004D3E 66C0                       		bne.s	SS_EndLoop
00004D40                            
00004D40 46FC 2700                  		move	#$2700,sr
00004D44 4DF9 00C0 0004             		lea	($C00004).l,a6
00004D4A 3CBC 8230                  		move.w	#$8230,(a6)
00004D4E 3CBC 8407                  		move.w	#$8407,(a6)
00004D52 3CBC 9001                  		move.w	#$9001,(a6)
00004D56 6100 C7A2                  		bsr.w	ClearScreen
00004D5A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D64 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D6A 6100 C90A                  		bsr.w	NemDec
00004D6E 4EB9 0000 0000             		jsr	Hud_Base
00004D74 46FC 2300                  		move	#$2300,sr
00004D78 7011                       		moveq	#$11,d0
00004D7A 6100 D5D0                  		bsr.w	PalLoad2	; load results screen pallet
00004D7E 7000                       		moveq	#0,d0
00004D80 6100 CA66                  		bsr.w	LoadPLC2
00004D84 701B                       		moveq	#$1B,d0
00004D86 6100 CA2E                  		bsr.w	LoadPLC		; load results screen patterns
00004D8A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004D90 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004D96 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004D9A C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004D9E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004DA2 303C 008E                  		move.w	#$8E,d0
00004DA6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004DAC 43F8 D000                  		lea	($FFFFD000).w,a1
00004DB0 7000                       		moveq	#0,d0
00004DB2 323C 07FF                  		move.w	#$7FF,d1
00004DB6                            
00004DB6                            SS_EndClrObjRam:
00004DB6 22C0                       		move.l	d0,(a1)+
00004DB8 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004DBC                            
00004DBC 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004DC2                            
00004DC2                            SS_NormalExit:
00004DC2 6100 C81A                  		bsr.w	PauseGame
00004DC6 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004DCC 6100 DF36                  		bsr.w	DelayProgram
00004DD0 4EB9 0000 0000             		jsr	ObjectsLoad
00004DD6 4EB9 0000 0000             		jsr	BuildSprites
00004DDC 6100 CA44                  		bsr.w	RunPLC_RAM
00004DE0 4A78 FE02                  		tst.w	($FFFFFE02).w
00004DE4 67DC                       		beq.s	SS_NormalExit
00004DE6 4AB8 F680                  		tst.l	($FFFFF680).w
00004DEA 66D6                       		bne.s	SS_NormalExit
00004DEC 303C 00CA                  		move.w	#$CA,d0
00004DF0 6100 C7E0                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004DF4 6100 D3AC                  		bsr.w	Pal_MakeFlash
00004DF8 4E75                       		rts	
00004DFA                            ; ===========================================================================
00004DFA                            
00004DFA                            SS_ToSegaScreen:
00004DFA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004E00 4E75                       		rts
00004E02                            
00004E02                            ; ---------------------------------------------------------------------------
00004E02                            ; Special stage	background loading subroutine
00004E02                            ; ---------------------------------------------------------------------------
00004E02                            
00004E02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E02                            
00004E02                            
00004E02                            SS_BGLoad:				; XREF: SpecialStage
00004E02 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E08 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004E0E 303C 4051                  		move.w	#$4051,d0
00004E12 6100 CB40                  		bsr.w	EniDec
00004E16 263C 5000 0001             		move.l	#$50000001,d3
00004E1C 45F9 00FF 0080             		lea	($FF0080).l,a2
00004E22 7E06                       		moveq	#6,d7
00004E24                            
00004E24                            loc_48BE:
00004E24 2003                       		move.l	d3,d0
00004E26 7C03                       		moveq	#3,d6
00004E28 7800                       		moveq	#0,d4
00004E2A 0C47 0003                  		cmpi.w	#3,d7
00004E2E 6400                       		bcc.s	loc_48CC
00004E30 7801                       		moveq	#1,d4
00004E32                            
00004E32                            loc_48CC:
00004E32 7A07                       		moveq	#7,d5
00004E34                            
00004E34                            loc_48CE:
00004E34 224A                       		movea.l	a2,a1
00004E36 0A04 0001                  		eori.b	#1,d4
00004E3A 6600                       		bne.s	loc_48E2
00004E3C 0C47 0006                  		cmpi.w	#6,d7
00004E40 6600                       		bne.s	loc_48F2
00004E42 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E48                            
00004E48                            loc_48E2:
00004E48 48E7 F800                  		movem.l	d0-d4,-(sp)
00004E4C 7207                       		moveq	#7,d1
00004E4E 7407                       		moveq	#7,d2
00004E50 6100 C804                  		bsr.w	ShowVDPGraphics
00004E54 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004E58                            
00004E58                            loc_48F2:
00004E58 0680 0010 0000             		addi.l	#$100000,d0
00004E5E 51CD FFD4                  		dbf	d5,loc_48CE
00004E62 0680 0380 0000             		addi.l	#$3800000,d0
00004E68 0A04 0001                  		eori.b	#1,d4
00004E6C 51CE FFC4                  		dbf	d6,loc_48CC
00004E70 0683 1000 0000             		addi.l	#$10000000,d3
00004E76 6A00                       		bpl.s	loc_491C
00004E78 4843                       		swap	d3
00004E7A 0683 0000 C000             		addi.l	#$C000,d3
00004E80 4843                       		swap	d3
00004E82                            
00004E82                            loc_491C:
00004E82 D4FC 0080                  		adda.w	#$80,a2
00004E86 51CF FF9C                  		dbf	d7,loc_48BE
00004E8A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E90 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004E96 303C 4000                  		move.w	#$4000,d0
00004E9A 6100 CAB8                  		bsr.w	EniDec
00004E9E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004EA4 203C 4000 0003             		move.l	#$40000003,d0
00004EAA 723F                       		moveq	#$3F,d1
00004EAC 741F                       		moveq	#$1F,d2
00004EAE 6100 C7A6                  		bsr.w	ShowVDPGraphics
00004EB2 43F9 00FF 0000             		lea	($FF0000).l,a1
00004EB8 203C 5000 0003             		move.l	#$50000003,d0
00004EBE 723F                       		moveq	#$3F,d1
00004EC0 743F                       		moveq	#$3F,d2
00004EC2 6100 C792                  		bsr.w	ShowVDPGraphics
00004EC6 4E75                       		rts	
00004EC8                            ; End of function SS_BGLoad
00004EC8                            
00004EC8                            ; ---------------------------------------------------------------------------
00004EC8                            ; Pallet cycling routine - special stage
00004EC8                            ; ---------------------------------------------------------------------------
00004EC8                            
00004EC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EC8                            
00004EC8                            
00004EC8                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004EC8 4A78 F63A                  		tst.w	($FFFFF63A).w
00004ECC 6600                       		bne.s	locret_49E6
00004ECE 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004ED2 6A00                       		bpl.s	locret_49E6
00004ED4 4DF9 00C0 0004             		lea	($C00004).l,a6
00004EDA 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004EDE 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004EE2 0240 001F                  		andi.w	#$1F,d0
00004EE6 E548                       		lsl.w	#2,d0
00004EE8 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004EEE D0C0                       		adda.w	d0,a0
00004EF0 1018                       		move.b	(a0)+,d0
00004EF2 6A00                       		bpl.s	loc_4992
00004EF4 303C 01FF                  		move.w	#$1FF,d0
00004EF8                            
00004EF8                            loc_4992:
00004EF8 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004EFC 7000                       		moveq	#0,d0
00004EFE 1018                       		move.b	(a0)+,d0
00004F00 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004F04 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004F0A 43F1 0000                  		lea	(a1,d0.w),a1
00004F0E 303C 8200                  		move.w	#-$7E00,d0
00004F12 1019                       		move.b	(a1)+,d0
00004F14 3C80                       		move.w	d0,(a6)
00004F16 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004F1A 303C 8400                  		move.w	#-$7C00,d0
00004F1E 1018                       		move.b	(a0)+,d0
00004F20 3C80                       		move.w	d0,(a6)
00004F22 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004F2C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004F34 7000                       		moveq	#0,d0
00004F36 1018                       		move.b	(a0)+,d0
00004F38 6B00                       		bmi.s	loc_49E8
00004F3A 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004F40 D2C0                       		adda.w	d0,a1
00004F42 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004F46 24D9                       		move.l	(a1)+,(a2)+
00004F48 24D9                       		move.l	(a1)+,(a2)+
00004F4A 24D9                       		move.l	(a1)+,(a2)+
00004F4C                            
00004F4C                            locret_49E6:
00004F4C 4E75                       		rts	
00004F4E                            ; ===========================================================================
00004F4E                            
00004F4E                            loc_49E8:				; XREF: PalCycle_SS
00004F4E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004F52 0C40 008A                  		cmpi.w	#$8A,d0
00004F56 6500                       		bcs.s	loc_49F4
00004F58 5241                       		addq.w	#1,d1
00004F5A                            
00004F5A                            loc_49F4:
00004F5A C2FC 002A                  		mulu.w	#$2A,d1
00004F5E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004F64 D2C1                       		adda.w	d1,a1
00004F66 0240 007F                  		andi.w	#$7F,d0
00004F6A 0880 0000                  		bclr	#0,d0
00004F6E 6700                       		beq.s	loc_4A18
00004F70 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004F74 24D1                       		move.l	(a1),(a2)+
00004F76 24E9 0004                  		move.l	4(a1),(a2)+
00004F7A 24E9 0008                  		move.l	8(a1),(a2)+
00004F7E                            
00004F7E                            loc_4A18:
00004F7E D2FC 000C                  		adda.w	#$C,a1
00004F82 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004F86 0C40 000A                  		cmpi.w	#$A,d0
00004F8A 6500                       		bcs.s	loc_4A2E
00004F8C 0440 000A                  		subi.w	#$A,d0
00004F90 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004F94                            
00004F94                            loc_4A2E:
00004F94 3200                       		move.w	d0,d1
00004F96 D040                       		add.w	d0,d0
00004F98 D041                       		add.w	d1,d0
00004F9A D2C0                       		adda.w	d0,a1
00004F9C 24D9                       		move.l	(a1)+,(a2)+
00004F9E 34D9                       		move.w	(a1)+,(a2)+
00004FA0 4E75                       		rts	
00004FA2                            ; End of function PalCycle_SS
00004FA2                            
00004FA2                            ; ===========================================================================
00004FA2 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004FB2                            					; XREF: PalCycle_SS
00004FB2 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004FC2 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004FD2 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004FE2 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004FF2 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005002 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005012 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005022                            		even
00005022 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005030                            					; XREF: PalCycle_SS
00005030                            		even
00005030                            
00005030                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005078                            		even
00005078                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000514A                            		even
0000514A                            
0000514A                            ; ---------------------------------------------------------------------------
0000514A                            ; Subroutine to	make the special stage background animated
0000514A                            ; ---------------------------------------------------------------------------
0000514A                            
0000514A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000514A                            
0000514A                            
0000514A                            SS_BGAnimate:				; XREF: SpecialStage
0000514A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000514E 6600                       		bne.s	loc_4BF6
00005150 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005156 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000515C                            
0000515C                            loc_4BF6:
0000515C 0C40 0008                  		cmpi.w	#8,d0
00005160 6400                       		bcc.s	loc_4C4E
00005162 0C40 0006                  		cmpi.w	#6,d0
00005166 6600                       		bne.s	loc_4C10
00005168 5278 F718                  		addq.w	#1,($FFFFF718).w
0000516C 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005170 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005176                            
00005176                            loc_4C10:
00005176 7000                       		moveq	#0,d0
00005178 3038 F708                  		move.w	($FFFFF708).w,d0
0000517C 4440                       		neg.w	d0
0000517E 4840                       		swap	d0
00005180 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005186 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000518A 7609                       		moveq	#9,d3
0000518C                            
0000518C                            loc_4C26:
0000518C 302B 0002                  		move.w	2(a3),d0
00005190 6100 DBA4                  		bsr.w	CalcSine
00005194 7400                       		moveq	#0,d2
00005196 1419                       		move.b	(a1)+,d2
00005198 C1C2                       		muls.w	d2,d0
0000519A E080                       		asr.l	#8,d0
0000519C 36C0                       		move.w	d0,(a3)+
0000519E 1419                       		move.b	(a1)+,d2
000051A0 4882                       		ext.w	d2
000051A2 D55B                       		add.w	d2,(a3)+
000051A4 51CB FFE6                  		dbf	d3,loc_4C26
000051A8 47F8 AA00                  		lea	($FFFFAA00).w,a3
000051AC 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000051B2 6000                       		bra.s	loc_4C7E
000051B4                            ; ===========================================================================
000051B4                            
000051B4                            loc_4C4E:				; XREF: SS_BGAnimate
000051B4 0C40 000C                  		cmpi.w	#$C,d0
000051B8 6600                       		bne.s	loc_4C74
000051BA 5378 F718                  		subq.w	#1,($FFFFF718).w
000051BE 47F8 AB00                  		lea	($FFFFAB00).w,a3
000051C2 243C 0001 8000             		move.l	#$18000,d2
000051C8 7206                       		moveq	#6,d1
000051CA                            
000051CA                            loc_4C64:
000051CA 2013                       		move.l	(a3),d0
000051CC 9082                       		sub.l	d2,d0
000051CE 26C0                       		move.l	d0,(a3)+
000051D0 0482 0000 2000             		subi.l	#$2000,d2
000051D6 51C9 FFF2                  		dbf	d1,loc_4C64
000051DA                            
000051DA                            loc_4C74:
000051DA 47F8 AB00                  		lea	($FFFFAB00).w,a3
000051DE 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000051E4                            
000051E4                            loc_4C7E:
000051E4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000051E8 3038 F718                  		move.w	($FFFFF718).w,d0
000051EC 4440                       		neg.w	d0
000051EE 4840                       		swap	d0
000051F0 7600                       		moveq	#0,d3
000051F2 161A                       		move.b	(a2)+,d3
000051F4 3438 F70C                  		move.w	($FFFFF70C).w,d2
000051F8 4442                       		neg.w	d2
000051FA 0242 00FF                  		andi.w	#$FF,d2
000051FE E54A                       		lsl.w	#2,d2
00005200                            
00005200                            loc_4C9A:
00005200 301B                       		move.w	(a3)+,d0
00005202 544B                       		addq.w	#2,a3
00005204 7200                       		moveq	#0,d1
00005206 121A                       		move.b	(a2)+,d1
00005208 5341                       		subq.w	#1,d1
0000520A                            
0000520A                            loc_4CA4:
0000520A 2380 2000                  		move.l	d0,(a1,d2.w)
0000520E 5842                       		addq.w	#4,d2
00005210 0242 03FC                  		andi.w	#$3FC,d2
00005214 51C9 FFF4                  		dbf	d1,loc_4CA4
00005218 51CB FFE6                  		dbf	d3,loc_4C9A
0000521C 4E75                       		rts	
0000521E                            ; End of function SS_BGAnimate
0000521E                            
0000521E                            ; ===========================================================================
0000521E 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000522A                            		even
0000522A 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005232                            		even
00005232 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005246                            		even
00005246                            					; XREF: SS_BGAnimate
00005246                            ; ===========================================================================
00005246                            
00005246                            ; ---------------------------------------------------------------------------
00005246                            ; Continue screen
00005246                            ; ---------------------------------------------------------------------------
00005246                            
00005246                            ContinueScreen:				; XREF: GameModeArray
00005246 6100 CE14                  		bsr.w	Pal_FadeFrom
0000524A 46FC 2700                  		move	#$2700,sr
0000524E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005252 0200 00BF                  		andi.b	#$BF,d0
00005256 33C0 00C0 0004             		move.w	d0,($C00004).l
0000525C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005262 3CBC 8004                  		move.w	#$8004,(a6)
00005266 3CBC 8700                  		move.w	#$8700,(a6)
0000526A 6100 C28E                  		bsr.w	ClearScreen
0000526E 43F8 D000                  		lea	($FFFFD000).w,a1
00005272 7000                       		moveq	#0,d0
00005274 323C 07FF                  		move.w	#$7FF,d1
00005278                            
00005278                            Cont_ClrObjRam:
00005278 22C0                       		move.l	d0,(a1)+
0000527A 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000527E                            
0000527E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005288 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000528E 6100 C3E6                  		bsr.w	NemDec
00005292 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000529C 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000052A2 6100 C3D2                  		bsr.w	NemDec
000052A6 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000052B0 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000052B6 6100 C3BE                  		bsr.w	NemDec
000052BA 720A                       		moveq	#10,d1
000052BC 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000052C2 7012                       		moveq	#$12,d0
000052C4 6100 D06A                  		bsr.w	PalLoad1	; load continue	screen pallet
000052C8 103C 0090                  		move.b	#$90,d0
000052CC 6100 C2FE                  		bsr.w	PlaySound	; play continue	music
000052D0 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000052D6 42B8 F700                  		clr.l	($FFFFF700).w
000052DA 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000052E2 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000052E8 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000052EE 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000052F4 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000052FA 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005300 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005306 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
0000530C 4EB9 0000 0000             		jsr	ObjectsLoad
00005312 4EB9 0000 0000             		jsr	BuildSprites
00005318 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000531C 0000 0040                  		ori.b	#$40,d0
00005320 33C0 00C0 0004             		move.w	d0,($C00004).l
00005326 6100 CC80                  		bsr.w	Pal_FadeTo
0000532A                            
0000532A                            ; ---------------------------------------------------------------------------
0000532A                            ; Continue screen main loop
0000532A                            ; ---------------------------------------------------------------------------
0000532A                            
0000532A                            Cont_MainLoop:
0000532A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005330 6100 D9D2                  		bsr.w	DelayProgram
00005334 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000533A 6400                       		bcc.s	loc_4DF2
0000533C 46FC 2700                  		move	#$2700,sr
00005340 3238 F614                  		move.w	($FFFFF614).w,d1
00005344 82FC 003C                  		divu.w	#$3C,d1
00005348 0281 0000 000F             		andi.l	#$F,d1
0000534E 4EB9 0000 0000             		jsr	ContScrCounter
00005354 46FC 2300                  		move	#$2300,sr
00005358                            
00005358                            loc_4DF2:
00005358 4EB9 0000 0000             		jsr	ObjectsLoad
0000535E 4EB9 0000 0000             		jsr	BuildSprites
00005364 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000536A 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000536C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005372 64B6                       		bcc.s	Cont_MainLoop
00005374 4A78 F614                  		tst.w	($FFFFF614).w
00005378 6600 FFB0                  		bne.w	Cont_MainLoop
0000537C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005382 4E75                       		rts	
00005384                            ; ===========================================================================
00005384                            
00005384                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005384 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000538A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005390 7000                       		moveq	#0,d0
00005392 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005396 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000539A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000539E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000053A2 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000053A6 4E75                       		rts	
000053A8                            ; ===========================================================================
000053A8                            
000053A8                            ; ---------------------------------------------------------------------------
000053A8                            ; Object 80 - Continue screen elements
000053A8                            ; ---------------------------------------------------------------------------
000053A8                            
000053A8                            Obj80:					; XREF: Obj_Index
000053A8 7000                       		moveq	#0,d0
000053AA 1028 0024                  		move.b	$24(a0),d0
000053AE 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000053B2 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000053B6                            ; ===========================================================================
000053B6 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000053B8 0000                       		dc.w Obj80_Display-Obj80_Index
000053BA 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000053BC 0000                       		dc.w Obj80_ChkType-Obj80_Index
000053BE                            ; ===========================================================================
000053BE                            
000053BE                            Obj80_Main:				; XREF: Obj80_Index
000053BE 5428 0024                  		addq.b	#2,$24(a0)
000053C2 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000053CA 317C 8500 0002             		move.w	#$8500,2(a0)
000053D0 117C 0000 0001             		move.b	#0,1(a0)
000053D6 117C 003C 0019             		move.b	#$3C,$19(a0)
000053DC 317C 0120 0008             		move.w	#$120,8(a0)
000053E2 317C 00C0 000A             		move.w	#$C0,$A(a0)
000053E8 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000053EE                            
000053EE                            Obj80_Display:				; XREF: Obj80_Index
000053EE 4EF9 0000 0000             		jmp	DisplaySprite
000053F4                            ; ===========================================================================
000053F4                            Obj80_MiniSonicPos:
000053F4 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005406 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005412                            ; ===========================================================================
00005412                            
00005412                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005412 2248                       		movea.l	a0,a1
00005414 45F9 0000 53F4             		lea	(Obj80_MiniSonicPos).l,a2
0000541A 7200                       		moveq	#0,d1
0000541C 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005420 5501                       		subq.b	#2,d1
00005422 6400                       		bcc.s	loc_4EC4
00005424 4EF9 0000 0000             		jmp	DeleteObject
0000542A                            ; ===========================================================================
0000542A                            
0000542A                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000542A 7601                       		moveq	#1,d3
0000542C 0C01 000E                  		cmpi.b	#$E,d1
00005430 6500                       		bcs.s	loc_4ED0
00005432 7600                       		moveq	#0,d3
00005434 720E                       		moveq	#$E,d1
00005436                            
00005436                            loc_4ED0:
00005436 1401                       		move.b	d1,d2
00005438 0202 0001                  		andi.b	#1,d2
0000543C                            
0000543C                            Obj80_MiniSonLoop:
0000543C 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005440 335A 0008                  		move.w	(a2)+,8(a1)
00005444 4A02                       		tst.b	d2
00005446 6700                       		beq.s	loc_4EEA
00005448 0469 000A 0008             		subi.w	#$A,8(a1)
0000544E                            
0000544E                            loc_4EEA:
0000544E 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005454 137C 0006 001A             		move.b	#6,$1A(a1)
0000545A 137C 0006 0024             		move.b	#6,$24(a1)
00005460 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005468 337C 8551 0002             		move.w	#$8551,2(a1)
0000546E 137C 0000 0001             		move.b	#0,1(a1)
00005474 43E9 0040                  		lea	$40(a1),a1
00005478 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000547C 43E9 FFC0                  		lea	-$40(a1),a1
00005480 1343 0028                  		move.b	d3,$28(a1)
00005484                            
00005484                            Obj80_ChkType:				; XREF: Obj80_Index
00005484 4A28 0028                  		tst.b	$28(a0)
00005488 6700                       		beq.s	loc_4F40
0000548A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005490 6500                       		bcs.s	loc_4F40
00005492 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005496 0200 0001                  		andi.b	#1,d0
0000549A 6600                       		bne.s	loc_4F40
0000549C 4A78 D010                  		tst.w	($FFFFD010).w
000054A0 6600                       		bne.s	Obj80_Delete
000054A2 4E75                       		rts	
000054A4                            ; ===========================================================================
000054A4                            
000054A4                            loc_4F40:				; XREF: Obj80_ChkType
000054A4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000054A8 0200 000F                  		andi.b	#$F,d0
000054AC 6600                       		bne.s	Obj80_Display2
000054AE 0868 0000 001A             		bchg	#0,$1A(a0)
000054B4                            
000054B4                            Obj80_Display2:
000054B4 4EF9 0000 0000             		jmp	DisplaySprite
000054BA                            ; ===========================================================================
000054BA                            
000054BA                            Obj80_Delete:				; XREF: Obj80_ChkType
000054BA 4EF9 0000 0000             		jmp	DeleteObject
000054C0                            ; ===========================================================================
000054C0                            
000054C0                            ; ---------------------------------------------------------------------------
000054C0                            ; Object 81 - Sonic on the continue screen
000054C0                            ; ---------------------------------------------------------------------------
000054C0                            
000054C0                            Obj81:					; XREF: Obj_Index
000054C0 7000                       		moveq	#0,d0
000054C2 1028 0024                  		move.b	$24(a0),d0
000054C6 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000054CA 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000054CE 4EF9 0000 0000             		jmp	DisplaySprite
000054D4                            ; ===========================================================================
000054D4 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000054D6 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000054D8 0000                       		dc.w Obj81_Animate-Obj81_Index
000054DA 0000                       		dc.w Obj81_Run-Obj81_Index
000054DC                            ; ===========================================================================
000054DC                            
000054DC                            Obj81_Main:				; XREF: Obj81_Index
000054DC 5428 0024                  		addq.b	#2,$24(a0)
000054E0 317C 00A0 0008             		move.w	#$A0,8(a0)
000054E6 317C 00C0 000C             		move.w	#$C0,$C(a0)
000054EC 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000054F4 317C 0780 0002             		move.w	#$780,2(a0)
000054FA 117C 0004 0001             		move.b	#4,1(a0)
00005500 117C 0002 0018             		move.b	#2,$18(a0)
00005506 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
0000550C 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005512                            
00005512                            Obj81_ChkLand:				; XREF: Obj81_Index
00005512 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005518 6600                       		bne.s	Obj81_ShowFall	; if not, branch
0000551A 5428 0024                  		addq.b	#2,$24(a0)
0000551E 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005522 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000552A 317C 8500 0002             		move.w	#$8500,2(a0)
00005530 117C 0000 001C             		move.b	#0,$1C(a0)
00005536 6000                       		bra.s	Obj81_Animate
00005538                            ; ===========================================================================
00005538                            
00005538                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005538 4EB9 0000 0000             		jsr	SpeedToPos
0000553E 4EB9 0000 0000             		jsr	Sonic_Animate
00005544 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000554A                            ; ===========================================================================
0000554A                            
0000554A                            Obj81_Animate:				; XREF: Obj81_Index
0000554A 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000554E 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005550 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005556 4EF9 0000 0000             		jmp	AnimateSprite
0000555C                            ; ===========================================================================
0000555C                            
0000555C                            Obj81_GetUp:				; XREF: Obj81_Animate
0000555C 5428 0024                  		addq.b	#2,$24(a0)
00005560 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005568 317C 0780 0002             		move.w	#$780,2(a0)
0000556E 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005574 4268 0014                  		clr.w	$14(a0)
00005578 5168 000C                  		subq.w	#8,$C(a0)
0000557C 103C 00E0                  		move.b	#$E0,d0
00005580 6100 C050                  		bsr.w	PlaySound_Special ; fade out music
00005584                            
00005584                            Obj81_Run:				; XREF: Obj81_Index
00005584 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000558A 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000558C 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005592 6000                       		bra.s	Obj81_ShowRun
00005594                            ; ===========================================================================
00005594                            
00005594                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005594 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000559A                            
0000559A                            Obj81_ShowRun:				; XREF: Obj81_Run
0000559A 4EB9 0000 0000             		jsr	SpeedToPos
000055A0 4EB9 0000 0000             		jsr	Sonic_Animate
000055A6 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000055AC                            ; ===========================================================================
000055AC                            Ani_obj81:
000055AC                            	include "_anim\obj81.asm"
000055AC                            ; ---------------------------------------------------------------------------
000055AC                            ; Animation script - Sonic on the continue screen
000055AC                            ; ---------------------------------------------------------------------------
000055AC 0000                       		dc.w byte_504A-Ani_obj81
000055AE 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000055BA 00                         		even
000055BA 00                         		even
000055BA                            
000055BA                            ; ---------------------------------------------------------------------------
000055BA                            ; Sprite mappings - Continue screen
000055BA                            ; ---------------------------------------------------------------------------
000055BA                            Map_obj80:
000055BA                            	include "_maps\obj80.asm"
000055BA                            ; ---------------------------------------------------------------------------
000055BA                            ; Sprite mappings - Continue screen
000055BA                            ; ---------------------------------------------------------------------------
000055BA 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000055BE 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000055C2 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000055C6 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000055CA 0B                         byte_5066:	dc.b $B
000055CB F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000055D0 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000055D5 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000055DA F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000055DF F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000055E4 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000055E9 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000055EE F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000055F3 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000055F8 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000055FD 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005602 03                         byte_509E:	dc.b 3
00005603 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005608 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000560D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005612 03                         byte_50AE:	dc.b 3
00005613 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005618 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000561D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005622 03                         byte_50BE:	dc.b 3
00005623 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005628 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000562D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005632 02                         byte_50CE:	dc.b 2
00005633 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005638 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000563D 01                         byte_50D9:	dc.b 1
0000563E 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005643 01                         byte_50DF:	dc.b 1
00005644 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
0000564A 00                         		even
0000564A 00                         		even
0000564A                            
0000564A                            ; ===========================================================================
0000564A                            ; ---------------------------------------------------------------------------
0000564A                            ; Ending sequence in Green Hill	Zone
0000564A                            ; ---------------------------------------------------------------------------
0000564A                            
0000564A                            EndingSequence:				; XREF: GameModeArray
0000564A 103C 00E4                  		move.b	#$E4,d0
0000564E 6100 BF82                  		bsr.w	PlaySound_Special ; stop music
00005652 6100 CA08                  		bsr.w	Pal_FadeFrom
00005656 43F8 D000                  		lea	($FFFFD000).w,a1
0000565A 7000                       		moveq	#0,d0
0000565C 323C 07FF                  		move.w	#$7FF,d1
00005660                            
00005660                            End_ClrObjRam:
00005660 22C0                       		move.l	d0,(a1)+
00005662 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005666                            
00005666 43F8 F628                  		lea	($FFFFF628).w,a1
0000566A 7000                       		moveq	#0,d0
0000566C 323C 0015                  		move.w	#$15,d1
00005670                            
00005670                            End_ClrRam:
00005670 22C0                       		move.l	d0,(a1)+
00005672 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005676                            
00005676 43F8 F700                  		lea	($FFFFF700).w,a1
0000567A 7000                       		moveq	#0,d0
0000567C 323C 003F                  		move.w	#$3F,d1
00005680                            
00005680                            End_ClrRam2:
00005680 22C0                       		move.l	d0,(a1)+
00005682 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005686                            
00005686 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000568A 7000                       		moveq	#0,d0
0000568C 323C 0047                  		move.w	#$47,d1
00005690                            
00005690                            End_ClrRam3:
00005690 22C0                       		move.l	d0,(a1)+
00005692 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005696                            
00005696 46FC 2700                  		move	#$2700,sr
0000569A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000569E 0200 00BF                  		andi.b	#$BF,d0
000056A2 33C0 00C0 0004             		move.w	d0,($C00004).l
000056A8 6100 BE50                  		bsr.w	ClearScreen
000056AC 4DF9 00C0 0004             		lea	($C00004).l,a6
000056B2 3CBC 8B03                  		move.w	#$8B03,(a6)
000056B6 3CBC 8230                  		move.w	#$8230,(a6)
000056BA 3CBC 8407                  		move.w	#$8407,(a6)
000056BE 3CBC 857C                  		move.w	#$857C,(a6)
000056C2 3CBC 9001                  		move.w	#$9001,(a6)
000056C6 3CBC 8004                  		move.w	#$8004,(a6)
000056CA 3CBC 8720                  		move.w	#$8720,(a6)
000056CE 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000056D4 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000056D8 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000056DE 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000056E4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000056EA 6700                       		beq.s	End_LoadData	; if yes, branch
000056EC 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000056F2                            
000056F2                            End_LoadData:
000056F2 701C                       		moveq	#$1C,d0
000056F4 6100 C22C                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000056F8 4EB9 0000 0000             		jsr	Hud_Base
000056FE 6100 0000                  		bsr.w	LevelSizeLoad
00005702 6100 0000                  		bsr.w	DeformBgLayer
00005706 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000570C 6100 0000                  		bsr.w	MainLoadBlockLoad
00005710 6100 0000                  		bsr.w	LoadTilesFromStart
00005714 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000571C 46FC 2300                  		move	#$2300,sr
00005720 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005726 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000572A 6100 C3A6                  		bsr.w	KosDec
0000572E 7003                       		moveq	#3,d0
00005730 6100 CBFE                  		bsr.w	PalLoad1	; load Sonic's pallet
00005734 303C 008B                  		move.w	#$8B,d0
00005738 6100 BE92                  		bsr.w	PlaySound	; play ending sequence music
0000573C 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005742 6700                       		beq.s	End_LoadSonic	; if not, branch
00005744 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000574A                            
0000574A                            End_LoadSonic:
0000574A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005750 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005756 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000575C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005762 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005768 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000576E 4EB9 0000 0000             		jsr	ObjPosLoad
00005774 4EB9 0000 0000             		jsr	ObjectsLoad
0000577A 4EB9 0000 0000             		jsr	BuildSprites
00005780 7000                       		moveq	#0,d0
00005782 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005786 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000578A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000578E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005792 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005796 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000579A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000579E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000057A2 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000057A6 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000057AA 6100 EEE0                  		bsr.w	OscillateNumInit
000057AE 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000057B4 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000057BA 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000057C0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000057C6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000057CC 6100 D536                  		bsr.w	DelayProgram
000057D0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000057D4 0000 0040                  		ori.b	#$40,d0
000057D8 33C0 00C0 0004             		move.w	d0,($C00004).l
000057DE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000057E4 6100 C7C2                  		bsr.w	Pal_FadeTo
000057E8                            
000057E8                            ; ---------------------------------------------------------------------------
000057E8                            ; Main ending sequence loop
000057E8                            ; ---------------------------------------------------------------------------
000057E8                            
000057E8                            End_MainLoop:
000057E8 6100 BDF4                  		bsr.w	PauseGame
000057EC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000057F2 6100 D510                  		bsr.w	DelayProgram
000057F6 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000057FA 6100 0000                  		bsr.w	End_MoveSonic
000057FE 4EB9 0000 0000             		jsr	ObjectsLoad
00005804 6100 0000                  		bsr.w	DeformBgLayer
00005808 4EB9 0000 0000             		jsr	BuildSprites
0000580E 4EB9 0000 0000             		jsr	ObjPosLoad
00005814 6100 C35C                  		bsr.w	PalCycle_Load
00005818 6100 EEC8                  		bsr.w	OscillateNumDo
0000581C 6100 EF54                  		bsr.w	ChangeRingFrame
00005820 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005826 6700                       		beq.s	loc_52DA	; if yes, branch
00005828 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000582E 103C 0091                  		move.b	#$91,d0
00005832 6100 BD9E                  		bsr.w	PlaySound_Special ; play credits music
00005836 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000583C 4E75                       		rts	
0000583E                            ; ===========================================================================
0000583E                            
0000583E                            loc_52DA:
0000583E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005842 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005846                            
00005846 4278 FE02                  		clr.w	($FFFFFE02).w
0000584A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005850 4278 F794                  		clr.w	($FFFFF794).w
00005854                            
00005854                            End_AllEmlds:				; XREF: loc_5334
00005854 6100 BD88                  		bsr.w	PauseGame
00005858 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000585E 6100 D4A4                  		bsr.w	DelayProgram
00005862 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005866 6100 0000                  		bsr.w	End_MoveSonic
0000586A 4EB9 0000 0000             		jsr	ObjectsLoad
00005870 6100 0000                  		bsr.w	DeformBgLayer
00005874 4EB9 0000 0000             		jsr	BuildSprites
0000587A 4EB9 0000 0000             		jsr	ObjPosLoad
00005880 6100 EE60                  		bsr.w	OscillateNumDo
00005884 6100 EEEC                  		bsr.w	ChangeRingFrame
00005888 5378 F794                  		subq.w	#1,($FFFFF794).w
0000588C 6A00                       		bpl.s	loc_5334
0000588E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005894 6100 C93A                  		bsr.w	Pal_ToWhite
00005898                            
00005898                            loc_5334:
00005898 4A78 FE02                  		tst.w	($FFFFFE02).w
0000589C 6700 FFB6                  		beq.w	End_AllEmlds
000058A0 4278 FE02                  		clr.w	($FFFFFE02).w
000058A4 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000058AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000058B0 4DF9 00C0 0000             		lea	($C00000).l,a6
000058B6 47F8 F700                  		lea	($FFFFF700).w,a3
000058BA 49F8 A400                  		lea	($FFFFA400).w,a4
000058BE 343C 4000                  		move.w	#$4000,d2
000058C2 6100 0000                  		bsr.w	LoadTilesFromStart2
000058C6 7013                       		moveq	#$13,d0
000058C8 6100 CA66                  		bsr.w	PalLoad1	; load ending pallet
000058CC 6100 C81A                  		bsr.w	Pal_MakeWhite
000058D0 6000 FF16                  		bra.w	End_MainLoop
000058D4                            
000058D4                            ; ---------------------------------------------------------------------------
000058D4                            ; Subroutine controlling Sonic on the ending sequence
000058D4                            ; ---------------------------------------------------------------------------
000058D4                            
000058D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058D4                            
000058D4                            
000058D4                            End_MoveSonic:				; XREF: End_MainLoop
000058D4 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000058D8 6600                       		bne.s	End_MoveSonic2
000058DA 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000058E0 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000058E2 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058E6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000058EC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000058F2 4E75                       		rts	
000058F4                            ; ===========================================================================
000058F4                            
000058F4                            End_MoveSonic2:				; XREF: End_MoveSonic
000058F4 5500                       		subq.b	#2,d0
000058F6 6600                       		bne.s	End_MoveSonic3
000058F8 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000058FE 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005900 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005904 7000                       		moveq	#0,d0
00005906 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000590A 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
0000590E 31C0 D014                  		move.w	d0,($FFFFD014).w
00005912 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005918 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
0000591E 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005924 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
0000592A 4E75                       		rts	
0000592C                            ; ===========================================================================
0000592C                            
0000592C                            End_MoveSonic3:				; XREF: End_MoveSonic
0000592C 5500                       		subq.b	#2,d0
0000592E 6600                       		bne.s	End_MoveSonExit
00005930 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005934 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
0000593A 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005940 4278 D024                  		clr.w	($FFFFD024).w
00005944                            
00005944                            End_MoveSonExit:
00005944 4E75                       		rts	
00005946                            ; End of function End_MoveSonic
00005946                            
00005946                            ; ===========================================================================
00005946                            ; ---------------------------------------------------------------------------
00005946                            ; Object 87 - Sonic on ending sequence
00005946                            ; ---------------------------------------------------------------------------
00005946                            
00005946                            Obj87:					; XREF: Obj_Index
00005946 7000                       		moveq	#0,d0
00005948 1028 0025                  		move.b	$25(a0),d0
0000594C 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005950 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005954 4EF9 0000 0000             		jmp	DisplaySprite
0000595A                            ; ===========================================================================
0000595A 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000595E 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005962 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005966 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000596A 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000596E                            ; ===========================================================================
0000596E                            
0000596E                            Obj87_Main:				; XREF: Obj87_Index
0000596E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005974 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005976 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000597C 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005982 4E75                       		rts	
00005984                            ; ===========================================================================
00005984                            
00005984                            Obj87_Main2:				; XREF: Obj87_Main
00005984 5428 0025                  		addq.b	#2,$25(a0)
00005988 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005990 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005996 117C 0004 0001             		move.b	#4,1(a0)
0000599C 4228 0022                  		clr.b	$22(a0)
000059A0 117C 0002 0018             		move.b	#2,$18(a0)
000059A6 117C 0000 001A             		move.b	#0,$1A(a0)
000059AC 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
000059B2                            
000059B2                            Obj87_MakeEmlds:			; XREF: Obj87_Index
000059B2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000059B6 6600                       		bne.s	Obj87_Wait
000059B8 5428 0025                  		addq.b	#2,$25(a0)
000059BC 317C 0001 001C             		move.w	#1,$1C(a0)
000059C2 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000059C8                            
000059C8                            Obj87_Wait:
000059C8 4E75                       		rts	
000059CA                            ; ===========================================================================
000059CA                            
000059CA                            Obj87_LookUp:				; XREF: Obj87_Index
000059CA 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000059D2 6600                       		bne.s	locret_5480
000059D4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000059DA 317C 005A 0030             		move.w	#$5A,$30(a0)
000059E0 5428 0025                  		addq.b	#2,$25(a0)
000059E4                            
000059E4                            locret_5480:
000059E4 4E75                       		rts	
000059E6                            ; ===========================================================================
000059E6                            
000059E6                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000059E6 5368 0030                  		subq.w	#1,$30(a0)
000059EA 6600                       		bne.s	Obj87_Wait2
000059EC 43F8 D400                  		lea	($FFFFD400).w,a1
000059F0 323C 00FF                  		move.w	#$FF,d1
000059F4                            
000059F4                            Obj87_ClrLoop:
000059F4 4299                       		clr.l	(a1)+
000059F6 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000059FA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005A00 5428 0025                  		addq.b	#2,$25(a0)
00005A04 117C 0001 001C             		move.b	#1,$1C(a0)
00005A0A 317C 003C 0030             		move.w	#$3C,$30(a0)
00005A10                            
00005A10                            Obj87_Wait2:
00005A10 4E75                       		rts	
00005A12                            ; ===========================================================================
00005A12                            
00005A12                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005A12 5368 0030                  		subq.w	#1,$30(a0)
00005A16 6600                       		bne.s	Obj87_Wait3
00005A18 5428 0025                  		addq.b	#2,$25(a0)
00005A1C 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005A22 117C 0002 001C             		move.b	#2,$1C(a0)
00005A28 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005A2E                            
00005A2E                            Obj87_Wait3:
00005A2E 4E75                       		rts	
00005A30                            ; ===========================================================================
00005A30                            
00005A30                            Obj87_Animate:				; XREF: Obj87_Index
00005A30 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005A36 4EF9 0000 0000             		jmp	AnimateSprite
00005A3C                            ; ===========================================================================
00005A3C                            
00005A3C                            Obj87_Leap:				; XREF: Obj87_Index
00005A3C 5368 0030                  		subq.w	#1,$30(a0)
00005A40 6600                       		bne.s	Obj87_Wait4
00005A42 5428 0025                  		addq.b	#2,$25(a0)
00005A46 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005A4E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A54 117C 0004 0001             		move.b	#4,1(a0)
00005A5A 4228 0022                  		clr.b	$22(a0)
00005A5E 117C 0002 0018             		move.b	#2,$18(a0)
00005A64 117C 0005 001A             		move.b	#5,$1A(a0)
00005A6A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005A70 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005A76 60B8                       		bra.s	Obj87_Animate
00005A78                            ; ===========================================================================
00005A78                            
00005A78                            Obj87_Wait4:				; XREF: Obj87_Leap
00005A78 4E75                       		rts	
00005A7A                            ; ===========================================================================
00005A7A                            Ani_obj87:
00005A7A                            	include "_anim\obj87.asm"
00005A7A                            ; ---------------------------------------------------------------------------
00005A7A                            ; Animation script - Sonic on the ending sequence
00005A7A                            ; ---------------------------------------------------------------------------
00005A7A 0000                       		dc.w byte_551C-Ani_obj87
00005A7C 0000                       		dc.w byte_552A-Ani_obj87
00005A7E 0000                       		dc.w byte_5534-Ani_obj87
00005A80 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005A8E 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005A98 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005AA0                            		even
00005AA0                            		even
00005AA0                            
00005AA0                            ; ===========================================================================
00005AA0                            ; ---------------------------------------------------------------------------
00005AA0                            ; Object 88 - chaos emeralds on	the ending sequence
00005AA0                            ; ---------------------------------------------------------------------------
00005AA0                            
00005AA0                            Obj88:					; XREF: Obj_Index
00005AA0 7000                       		moveq	#0,d0
00005AA2 1028 0024                  		move.b	$24(a0),d0
00005AA6 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005AAA 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005AAE 4EF9 0000 0000             		jmp	DisplaySprite
00005AB4                            ; ===========================================================================
00005AB4 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005AB6 0000                       		dc.w Obj88_Move-Obj88_Index
00005AB8                            ; ===========================================================================
00005AB8                            
00005AB8                            Obj88_Main:				; XREF: Obj88_Index
00005AB8 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005ABE 6700                       		beq.s	Obj88_Main2
00005AC0 588F                       		addq.l	#4,sp
00005AC2 4E75                       		rts	
00005AC4                            ; ===========================================================================
00005AC4                            
00005AC4                            Obj88_Main2:				; XREF: Obj88_Main
00005AC4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005ACA 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005AD0 2248                       		movea.l	a0,a1
00005AD2 7600                       		moveq	#0,d3
00005AD4 7401                       		moveq	#1,d2
00005AD6 7205                       		moveq	#5,d1
00005AD8                            
00005AD8                            Obj88_MainLoop:
00005AD8 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005ADC 5429 0024                  		addq.b	#2,$24(a1)
00005AE0 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005AE8 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005AEE 137C 0004 0001             		move.b	#4,1(a1)
00005AF4 137C 0001 0018             		move.b	#1,$18(a1)
00005AFA 3368 0008 0038             		move.w	8(a0),$38(a1)
00005B00 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005B06 1342 001C                  		move.b	d2,$1C(a1)
00005B0A 1342 001A                  		move.b	d2,$1A(a1)
00005B0E 5202                       		addq.b	#1,d2
00005B10 1343 0026                  		move.b	d3,$26(a1)
00005B14 0603 002A                  		addi.b	#$2A,d3
00005B18 43E9 0040                  		lea	$40(a1),a1
00005B1C 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005B20                            
00005B20                            Obj88_Move:				; XREF: Obj88_Index
00005B20 3028 003E                  		move.w	$3E(a0),d0
00005B24 D168 0026                  		add.w	d0,$26(a0)
00005B28 1028 0026                  		move.b	$26(a0),d0
00005B2C 4EB9 0000 2D36             		jsr	(CalcSine).l
00005B32 7800                       		moveq	#0,d4
00005B34 1828 003C                  		move.b	$3C(a0),d4
00005B38 C3C4                       		muls.w	d4,d1
00005B3A E081                       		asr.l	#8,d1
00005B3C C1C4                       		muls.w	d4,d0
00005B3E E080                       		asr.l	#8,d0
00005B40 D268 0038                  		add.w	$38(a0),d1
00005B44 D068 003A                  		add.w	$3A(a0),d0
00005B48 3141 0008                  		move.w	d1,8(a0)
00005B4C 3140 000C                  		move.w	d0,$C(a0)
00005B50 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005B56 6700                       		beq.s	loc_55FA
00005B58 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005B5E                            
00005B5E                            loc_55FA:
00005B5E 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005B64 6700                       		beq.s	loc_5608
00005B66 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005B6C                            
00005B6C                            loc_5608:
00005B6C 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005B72 6700                       		beq.s	locret_5614
00005B74 5368 003A                  		subq.w	#1,$3A(a0)
00005B78                            
00005B78                            locret_5614:
00005B78 4E75                       		rts	
00005B7A                            ; ===========================================================================
00005B7A                            ; ---------------------------------------------------------------------------
00005B7A                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005B7A                            ; ---------------------------------------------------------------------------
00005B7A                            
00005B7A                            Obj89:					; XREF: Obj_Index
00005B7A 7000                       		moveq	#0,d0
00005B7C 1028 0024                  		move.b	$24(a0),d0
00005B80 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005B84 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005B88                            ; ===========================================================================
00005B88 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005B8A 0000                       		dc.w Obj89_Move-Obj89_Index
00005B8C 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005B8E                            ; ===========================================================================
00005B8E                            
00005B8E                            Obj89_Main:				; XREF: Obj89_Index
00005B8E 5428 0024                  		addq.b	#2,$24(a0)
00005B92 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005B98 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005B9E 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005BA6 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005BAC 117C 0000 0001             		move.b	#0,1(a0)
00005BB2 117C 0000 0018             		move.b	#0,$18(a0)
00005BB8                            
00005BB8                            Obj89_Move:				; XREF: Obj89_Index
00005BB8 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005BBE 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005BC0 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005BC6 4EB9 0000 0000             		jsr	DisplaySprite
00005BCC                            ; ===========================================================================
00005BCC                            
00005BCC                            Obj89_Delay:				; XREF: Obj89_Move
00005BCC 5428 0024                  		addq.b	#2,$24(a0)
00005BD0 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005BD6                            
00005BD6                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005BD6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005BDA 6A00                       		bpl.s	Obj89_Display
00005BDC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005BE2                            
00005BE2                            Obj89_Display:
00005BE2 4EB9 0000 0000             		jsr	DisplaySprite
00005BE8                            ; ===========================================================================
00005BE8                            ; ---------------------------------------------------------------------------
00005BE8                            ; Sprite mappings - Sonic on the ending	sequence
00005BE8                            ; ---------------------------------------------------------------------------
00005BE8                            Map_obj87:
00005BE8                            	include "_maps\obj87.asm"
00005BE8                            ; ---------------------------------------------------------------------------
00005BE8                            ; Sprite mappings - Sonic on the ending	sequence
00005BE8                            ; ---------------------------------------------------------------------------
00005BE8 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005BEC 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005BF0 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005BF4 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005BF8 02                         byte_5690:	dc.b 2
00005BF9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005BFE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005C03 03                         byte_569B:	dc.b 3
00005C04 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005C09 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005C0E 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005C13 02                         byte_56AB:	dc.b 2
00005C14 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005C19 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005C1E 02                         byte_56B6:	dc.b 2
00005C1F EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005C24 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005C29 02                         byte_56C1:	dc.b 2
00005C2A EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005C2F FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005C34 03                         byte_56CC:	dc.b 3
00005C35 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005C3A EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005C3F 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005C44 07                         byte_56DC:	dc.b 7
00005C45 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005C4A BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005C4F BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005C54 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005C59 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005C5E E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005C63 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005C68 18                         byte_5700:	dc.b $18
00005C69 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005C6E 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005C73 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005C78 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005C7D A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005C82 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005C87 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005C8C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005C91 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005C96 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005C9B A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005CA0 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005CA5 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005CAA B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005CAF B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005CB4 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005CB9 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005CBE D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005CC3 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005CC8 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005CCD D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005CD2 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005CD7 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005CDC F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005CE2 00                         		even
00005CE2 00                         		even
00005CE2                            
00005CE2                            ; ---------------------------------------------------------------------------
00005CE2                            ; Sprite mappings - chaos emeralds on the ending sequence
00005CE2                            ; ---------------------------------------------------------------------------
00005CE2                            Map_obj88:
00005CE2                            	include "_maps\obj88.asm"
00005CE2                            ; ---------------------------------------------------------------------------
00005CE2                            ; Sprite mappings - chaos emeralds on the ending sequence
00005CE2                            ; ---------------------------------------------------------------------------
00005CE2 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005CE6 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005CEA 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005CEE 0000                       		dc.w byte_57AC-Map_obj88
00005CF0 01                         byte_5788:	dc.b 1
00005CF1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005CF6 01                         byte_578E:	dc.b 1
00005CF7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005CFC 01                         byte_5794:	dc.b 1
00005CFD F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005D02 01                         byte_579A:	dc.b 1
00005D03 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005D08 01                         byte_57A0:	dc.b 1
00005D09 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005D0E 01                         byte_57A6:	dc.b 1
00005D0F F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005D14 01                         byte_57AC:	dc.b 1
00005D15 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005D1A                            		even
00005D1A                            		even
00005D1A                            
00005D1A                            ; ---------------------------------------------------------------------------
00005D1A                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005D1A                            ; ---------------------------------------------------------------------------
00005D1A                            Map_obj89:
00005D1A                            	include "_maps\obj89.asm"
00005D1A                            ; ---------------------------------------------------------------------------
00005D1A                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005D1A                            ; ---------------------------------------------------------------------------
00005D1A 0000                       		dc.w byte_57B4-Map_obj89
00005D1C 03                         byte_57B4:	dc.b 3
00005D1D F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005D22 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005D27 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005D2C                            		even
00005D2C                            		even
00005D2C                            
00005D2C                            ; ===========================================================================
00005D2C                            ; ---------------------------------------------------------------------------
00005D2C                            ; Credits ending sequence
00005D2C                            ; ---------------------------------------------------------------------------
00005D2C                            
00005D2C                            Credits:				; XREF: GameModeArray
00005D2C 6100 BAE6                  		bsr.w	ClearPLC
00005D30 6100 C32A                  		bsr.w	Pal_FadeFrom
00005D34 4DF9 00C0 0004             		lea	($C00004).l,a6
00005D3A 3CBC 8004                  		move.w	#$8004,(a6)
00005D3E 3CBC 8230                  		move.w	#$8230,(a6)
00005D42 3CBC 8407                  		move.w	#$8407,(a6)
00005D46 3CBC 9001                  		move.w	#$9001,(a6)
00005D4A 3CBC 9200                  		move.w	#$9200,(a6)
00005D4E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005D52 3CBC 8720                  		move.w	#$8720,(a6)
00005D56 4238 F64E                  		clr.b	($FFFFF64E).w
00005D5A 6100 B79E                  		bsr.w	ClearScreen
00005D5E 43F8 D000                  		lea	($FFFFD000).w,a1
00005D62 7000                       		moveq	#0,d0
00005D64 323C 07FF                  		move.w	#$7FF,d1
00005D68                            
00005D68                            Cred_ClrObjRam:
00005D68 22C0                       		move.l	d0,(a1)+
00005D6A 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005D6E                            
00005D6E 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005D78 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005D7E 6100 B8F6                  		bsr.w	NemDec
00005D82 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005D86 7000                       		moveq	#0,d0
00005D88 323C 001F                  		move.w	#$1F,d1
00005D8C                            
00005D8C                            Cred_ClrPallet:
00005D8C 22C0                       		move.l	d0,(a1)+
00005D8E 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005D92                            
00005D92 7003                       		moveq	#3,d0
00005D94 6100 C59A                  		bsr.w	PalLoad1	; load Sonic's pallet
00005D98 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005D9E 4EB9 0000 0000             		jsr	ObjectsLoad
00005DA4 4EB9 0000 0000             		jsr	BuildSprites
00005DAA 6100 0000                  		bsr.w	EndingDemoLoad
00005DAE 7000                       		moveq	#0,d0
00005DB0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005DB4 E948                       		lsl.w	#4,d0
00005DB6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005DBC 45F2 0000                  		lea	(a2,d0.w),a2
00005DC0 7000                       		moveq	#0,d0
00005DC2 1012                       		move.b	(a2),d0
00005DC4 6700                       		beq.s	loc_5862
00005DC6 6100 B9EE                  		bsr.w	LoadPLC		; load level patterns
00005DCA                            
00005DCA                            loc_5862:
00005DCA 7001                       		moveq	#1,d0
00005DCC 6100 B9E8                  		bsr.w	LoadPLC		; load standard	level patterns
00005DD0 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005DD6 6100 C1D0                  		bsr.w	Pal_FadeTo
00005DDA                            
00005DDA                            Cred_WaitLoop:
00005DDA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005DE0 6100 CF22                  		bsr.w	DelayProgram
00005DE4 6100 BA3C                  		bsr.w	RunPLC_RAM
00005DE8 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005DEC 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005DEE 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005DF2 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005DF4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005DFA 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005DFE 4E75                       		rts	
00005E00                            
00005E00                            ; ---------------------------------------------------------------------------
00005E00                            ; Ending sequence demo loading subroutine
00005E00                            ; ---------------------------------------------------------------------------
00005E00                            
00005E00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005E00                            
00005E00                            
00005E00                            EndingDemoLoad:				; XREF: Credits
00005E00 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005E04 0240 000F                  		andi.w	#$F,d0
00005E08 D040                       		add.w	d0,d0
00005E0A 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005E0E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005E12 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005E16 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005E1C 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005E1E 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005E24 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005E2A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005E30 7000                       		moveq	#0,d0
00005E32 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005E36 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005E3A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005E3E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005E42 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005E48 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005E4A 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005E50 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005E54 303C 0008                  		move.w	#8,d0
00005E58                            
00005E58                            EndDemo_LampLoad:
00005E58 24D9                       		move.l	(a1)+,(a2)+
00005E5A 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005E5E                            
00005E5E                            EndDemo_Exit:
00005E5E 4E75                       		rts	
00005E60                            ; End of function EndingDemoLoad
00005E60                            
00005E60                            ; ===========================================================================
00005E60                            ; ---------------------------------------------------------------------------
00005E60                            ; Levels used in the end sequence demos
00005E60                            ; ---------------------------------------------------------------------------
00005E60                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005E70                            
00005E70                            ; ---------------------------------------------------------------------------
00005E70                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005E70                            ; ---------------------------------------------------------------------------
00005E70                            EndDemo_LampVar:
00005E70 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005E72 0A00 062C 000D             		dc.w $A00, $62C, $D
00005E78 0000 0000                  		dc.l 0
00005E7C 0000                       		dc.b 0,	0
00005E7E 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005E92 0101                       		dc.b 1,	1
00005E94                            ; ===========================================================================
00005E94                            ; ---------------------------------------------------------------------------
00005E94                            ; "TRY AGAIN" and "END"	screens
00005E94                            ; ---------------------------------------------------------------------------
00005E94                            
00005E94                            TryAgainEnd:				; XREF: Credits
00005E94 6100 B97E                  		bsr.w	ClearPLC
00005E98 6100 C1C2                  		bsr.w	Pal_FadeFrom
00005E9C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005EA2 3CBC 8004                  		move.w	#$8004,(a6)
00005EA6 3CBC 8230                  		move.w	#$8230,(a6)
00005EAA 3CBC 8407                  		move.w	#$8407,(a6)
00005EAE 3CBC 9001                  		move.w	#$9001,(a6)
00005EB2 3CBC 9200                  		move.w	#$9200,(a6)
00005EB6 3CBC 8B03                  		move.w	#$8B03,(a6)
00005EBA 3CBC 8720                  		move.w	#$8720,(a6)
00005EBE 4238 F64E                  		clr.b	($FFFFF64E).w
00005EC2 6100 B636                  		bsr.w	ClearScreen
00005EC6 43F8 D000                  		lea	($FFFFD000).w,a1
00005ECA 7000                       		moveq	#0,d0
00005ECC 323C 07FF                  		move.w	#$7FF,d1
00005ED0                            
00005ED0                            TryAg_ClrObjRam:
00005ED0 22C0                       		move.l	d0,(a1)+
00005ED2 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005ED6                            
00005ED6 701D                       		moveq	#$1D,d0
00005ED8 6100 BA48                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005EDC 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005EE0 7000                       		moveq	#0,d0
00005EE2 323C 001F                  		move.w	#$1F,d1
00005EE6                            
00005EE6                            TryAg_ClrPallet:
00005EE6 22C0                       		move.l	d0,(a1)+
00005EE8 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005EEC                            
00005EEC 7013                       		moveq	#$13,d0
00005EEE 6100 C440                  		bsr.w	PalLoad1	; load ending pallet
00005EF2 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005EF6 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005EFC 4EB9 0000 0000             		jsr	ObjectsLoad
00005F02 4EB9 0000 0000             		jsr	BuildSprites
00005F08 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005F0E 6100 C098                  		bsr.w	Pal_FadeTo
00005F12                            
00005F12                            ; ---------------------------------------------------------------------------
00005F12                            ; "TRY AGAIN" and "END"	screen main loop
00005F12                            ; ---------------------------------------------------------------------------
00005F12                            TryAg_MainLoop:
00005F12 6100 B6CA                  		bsr.w	PauseGame
00005F16 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005F1C 6100 CDE6                  		bsr.w	DelayProgram
00005F20 4EB9 0000 0000             		jsr	ObjectsLoad
00005F26 4EB9 0000 0000             		jsr	BuildSprites
00005F2C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005F32 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005F34 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005F38 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005F3A 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005F40 67D0                       		beq.s	TryAg_MainLoop
00005F42                            
00005F42                            TryAg_Exit:
00005F42 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005F48 4E75                       		rts	
00005F4A                            
00005F4A                            ; ===========================================================================
00005F4A                            ; ---------------------------------------------------------------------------
00005F4A                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005F4A                            ; ---------------------------------------------------------------------------
00005F4A                            
00005F4A                            Obj8B:					; XREF: Obj_Index
00005F4A 7000                       		moveq	#0,d0
00005F4C 1028 0024                  		move.b	$24(a0),d0
00005F50 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005F54 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005F58 4EF9 0000 0000             		jmp	DisplaySprite
00005F5E                            ; ===========================================================================
00005F5E 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005F60 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005F62 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005F64 0000                       		dc.w loc_5A8E-Obj8B_Index
00005F66                            ; ===========================================================================
00005F66                            
00005F66                            Obj8B_Main:				; XREF: Obj8B_Index
00005F66 5428 0024                  		addq.b	#2,$24(a0)
00005F6A 317C 0120 0008             		move.w	#$120,8(a0)
00005F70 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005F76 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005F7E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005F84 117C 0000 0001             		move.b	#0,1(a0)
00005F8A 117C 0002 0018             		move.b	#2,$18(a0)
00005F90 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005F96 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005F9C 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005F9E 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005FA4 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005FAA 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005FB0 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005FB6                            
00005FB6                            Obj8B_Animate:				; XREF: Obj8B_Index
00005FB6 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005FBC 4EF9 0000 0000             		jmp	AnimateSprite
00005FC2                            ; ===========================================================================
00005FC2                            
00005FC2                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005FC2 5428 0024                  		addq.b	#2,$24(a0)
00005FC6 7002                       		moveq	#2,d0
00005FC8 0828 0000 001C             		btst	#0,$1C(a0)
00005FCE 6700                       		beq.s	loc_5A6A
00005FD0 4440                       		neg.w	d0
00005FD2                            
00005FD2                            loc_5A6A:
00005FD2 43F8 D800                  		lea	($FFFFD800).w,a1
00005FD6 7205                       		moveq	#5,d1
00005FD8                            
00005FD8                            loc_5A70:
00005FD8 1340 003E                  		move.b	d0,$3E(a1)
00005FDC 3400                       		move.w	d0,d2
00005FDE E742                       		asl.w	#3,d2
00005FE0 D529 0026                  		add.b	d2,$26(a1)
00005FE4 43E9 0040                  		lea	$40(a1),a1
00005FE8 51C9 FFEE                  		dbf	d1,loc_5A70
00005FEC 5228 001A                  		addq.b	#1,$1A(a0)
00005FF0 317C 0070 0030             		move.w	#112,$30(a0)
00005FF6                            
00005FF6                            loc_5A8E:				; XREF: Obj8B_Index
00005FF6 5368 0030                  		subq.w	#1,$30(a0)
00005FFA 6A00                       		bpl.s	locret_5AA0
00005FFC 0868 0000 001C             		bchg	#0,$1C(a0)
00006002 117C 0002 0024             		move.b	#2,$24(a0)
00006008                            
00006008                            locret_5AA0:
00006008 4E75                       		rts	
0000600A                            ; ===========================================================================
0000600A                            Ani_obj8B:
0000600A                            	include "_anim\obj8B.asm"
0000600A                            ; ---------------------------------------------------------------------------
0000600A                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
0000600A                            ; ---------------------------------------------------------------------------
0000600A 0000                       		dc.w byte_5AA8-Ani_obj8B
0000600C 0000                       		dc.w byte_5AAC-Ani_obj8B
0000600E 0000                       		dc.w byte_5AB0-Ani_obj8B
00006010 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00006014 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00006018 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
0000602A                            		even
0000602A                            		even
0000602A                            
0000602A                            ; ===========================================================================
0000602A                            ; ---------------------------------------------------------------------------
0000602A                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
0000602A                            ; ---------------------------------------------------------------------------
0000602A                            
0000602A                            Obj8C:					; XREF: Obj_Index
0000602A 7000                       		moveq	#0,d0
0000602C 1028 0024                  		move.b	$24(a0),d0
00006030 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006034 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006038 4EF9 0000 0000             		jmp	DisplaySprite
0000603E                            ; ===========================================================================
0000603E 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006040 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006042                            ; ===========================================================================
00006042                            
00006042                            Obj8C_Main:				; XREF: Obj8C_Index
00006042 2248                       		movea.l	a0,a1
00006044 7400                       		moveq	#0,d2
00006046 7600                       		moveq	#0,d3
00006048 7205                       		moveq	#5,d1
0000604A 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000604E                            
0000604E                            Obj8C_MakeEms:				; XREF: loc_5B42
0000604E 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006052 5429 0024                  		addq.b	#2,$24(a1)
00006056 237C 0000 5CE2 0004        		move.l	#Map_obj88,4(a1)
0000605E 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006064 137C 0000 0001             		move.b	#0,1(a1)
0000606A 137C 0001 0018             		move.b	#1,$18(a1)
00006070 337C 0104 0008             		move.w	#$104,8(a1)
00006076 337C 0120 0038             		move.w	#$120,$38(a1)
0000607C 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006082 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006088 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000608E 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006092                            
00006092                            Obj8C_ChkEms:
00006092 7000                       		moveq	#0,d0
00006094 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006098 5340                       		subq.w	#1,d0
0000609A 6500                       		bcs.s	loc_5B42
0000609C                            
0000609C                            Obj8C_ChkEmLoop:
0000609C B433 0000                  		cmp.b	(a3,d0.w),d2
000060A0 6600                       		bne.s	loc_5B3E
000060A2 5202                       		addq.b	#1,d2
000060A4 60EC                       		bra.s	Obj8C_ChkEms
000060A6                            ; ===========================================================================
000060A6                            
000060A6                            loc_5B3E:
000060A6 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
000060AA                            
000060AA                            loc_5B42:
000060AA 1342 001A                  		move.b	d2,$1A(a1)
000060AE 5229 001A                  		addq.b	#1,$1A(a1)
000060B2 5202                       		addq.b	#1,d2
000060B4 137C 0080 0026             		move.b	#$80,$26(a1)
000060BA 1343 001E                  		move.b	d3,$1E(a1)
000060BE 1343 001F                  		move.b	d3,$1F(a1)
000060C2 0643 000A                  		addi.w	#$A,d3
000060C6 43E9 0040                  		lea	$40(a1),a1
000060CA 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000060CE                            
000060CE                            Obj8C_Move:				; XREF: Obj8C_Index
000060CE 4A68 003E                  		tst.w	$3E(a0)
000060D2 6700                       		beq.s	locret_5BBA
000060D4 4A28 001E                  		tst.b	$1E(a0)
000060D8 6700                       		beq.s	loc_5B78
000060DA 5328 001E                  		subq.b	#1,$1E(a0)
000060DE 6600                       		bne.s	loc_5B80
000060E0                            
000060E0                            loc_5B78:
000060E0 3028 003E                  		move.w	$3E(a0),d0
000060E4 D168 0026                  		add.w	d0,$26(a0)
000060E8                            
000060E8                            loc_5B80:
000060E8 1028 0026                  		move.b	$26(a0),d0
000060EC 6700                       		beq.s	loc_5B8C
000060EE 0C00 0080                  		cmpi.b	#$80,d0
000060F2 6600                       		bne.s	loc_5B96
000060F4                            
000060F4                            loc_5B8C:
000060F4 4268 003E                  		clr.w	$3E(a0)
000060F8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000060FE                            
000060FE                            loc_5B96:
000060FE 4EB9 0000 2D36             		jsr	(CalcSine).l
00006104 7800                       		moveq	#0,d4
00006106 1828 003C                  		move.b	$3C(a0),d4
0000610A C3C4                       		muls.w	d4,d1
0000610C E081                       		asr.l	#8,d1
0000610E C1C4                       		muls.w	d4,d0
00006110 E080                       		asr.l	#8,d0
00006112 D268 0038                  		add.w	$38(a0),d1
00006116 D068 003A                  		add.w	$3A(a0),d0
0000611A 3141 0008                  		move.w	d1,8(a0)
0000611E 3140 000A                  		move.w	d0,$A(a0)
00006122                            
00006122                            locret_5BBA:
00006122 4E75                       		rts	
00006124                            ; ===========================================================================
00006124                            ; ---------------------------------------------------------------------------
00006124                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006124                            ; ---------------------------------------------------------------------------
00006124                            Map_obj8B:
00006124                            	include "_maps\obj8B.asm"
00006124                            ; ---------------------------------------------------------------------------
00006124                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006124                            ; ---------------------------------------------------------------------------
00006124 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006128 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000612C 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006130 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006134 08                         byte_5BCC:	dc.b 8
00006135 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000613A F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000613F E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006144 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006149 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000614E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006153 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006158 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000615D 08                         byte_5BF5:	dc.b 8
0000615E E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006163 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006168 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000616D F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006172 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006177 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000617C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006181 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006186 08                         byte_5C1E:	dc.b 8
00006187 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000618C F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006191 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006196 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000619B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000061A0 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000061A5 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000061AA 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000061AF 08                         byte_5C47:	dc.b 8
000061B0 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000061B5 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000061BA E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000061BF F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000061C4 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000061C9 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000061CE 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000061D3 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000061D8 0C                         byte_5C70:	dc.b $C
000061D9 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000061DE F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000061E3 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000061E8 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000061ED ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000061F2 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000061F7 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000061FC 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006201 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006206 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
0000620B 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006210 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006215 0A                         byte_5CAD:	dc.b $A
00006216 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
0000621B DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006220 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006225 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000622A DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000622F F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006234 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006239 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000623E 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006243 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006248 0A                         byte_5CE0:	dc.b $A
00006249 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000624E E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006253 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006258 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000625D E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006262 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006267 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000626C 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006271 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006276 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000627B 0C                         byte_5D13:	dc.b $C
0000627C F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006281 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006286 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000628B 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006290 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006295 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000629A 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000629F 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000062A4 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000062A9 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000062AE 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000062B3 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000062B8                            		even
000062B8                            		even
000062B8                            
000062B8                            ; ---------------------------------------------------------------------------
000062B8                            ; Ending sequence demos
000062B8                            ; ---------------------------------------------------------------------------
000062B8                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000062E6                            		even
000062E6                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006326                            		even
00006326                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006356                            		even
00006356                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006386                            		even
00006386                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000063A6                            		even
000063A6                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000063C6                            		even
000063C6                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000063F6                            		even
000063F6                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006426                            		even
00006426                            
00006426                            ; ---------------------------------------------------------------------------
00006426                            ; Subroutine to	load level boundaries and start	locations
00006426                            ; ---------------------------------------------------------------------------
00006426                            
00006426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006426                            
00006426                            
00006426                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006426 7000                       		moveq	#0,d0
00006428 11C0 F740                  		move.b	d0,($FFFFF740).w
0000642C 11C0 F741                  		move.b	d0,($FFFFF741).w
00006430 11C0 F746                  		move.b	d0,($FFFFF746).w
00006434 11C0 F748                  		move.b	d0,($FFFFF748).w
00006438 11C0 F742                  		move.b	d0,($FFFFF742).w
0000643C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006440 ED08                       		lsl.b	#6,d0
00006442 E848                       		lsr.w	#4,d0
00006444 3200                       		move.w	d0,d1
00006446 D040                       		add.w	d0,d0
00006448 D041                       		add.w	d1,d0
0000644A 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000644E 3018                       		move.w	(a0)+,d0
00006450 31C0 F730                  		move.w	d0,($FFFFF730).w
00006454 2018                       		move.l	(a0)+,d0
00006456 21C0 F728                  		move.l	d0,($FFFFF728).w
0000645A 21C0 F720                  		move.l	d0,($FFFFF720).w
0000645E 2018                       		move.l	(a0)+,d0
00006460 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006464 21C0 F724                  		move.l	d0,($FFFFF724).w
00006468 3038 F728                  		move.w	($FFFFF728).w,d0
0000646C 0640 0240                  		addi.w	#$240,d0
00006470 31C0 F732                  		move.w	d0,($FFFFF732).w
00006474 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000647A 3018                       		move.w	(a0)+,d0
0000647C 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006480 6000 0000                  		bra.w	LevSz_ChkLamp
00006484                            ; ===========================================================================
00006484                            ; ---------------------------------------------------------------------------
00006484                            ; Level size array and ending start location array
00006484                            ; ---------------------------------------------------------------------------
00006484                            LevelSizeArray:        ; GHZ
00006484 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006490 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
0000649C 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000064A8 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000064B4                                    ; LZ
000064B4 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000064C0 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000064CC 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000064D8 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000064E4                                    ; MZ
000064E4 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000064F0 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000064FC 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00006508 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
00006514                                    ; SLZ
00006514 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006520 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
0000652C 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006538 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006544                                    ; SYZ
00006544 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006550 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
0000655C 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006568 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006574                                    ; SBZ
00006574 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006580 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
0000658C 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006598 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000065A4                                    ; Ending
000065A4 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
000065B0 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
000065BC 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000065C8 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000065D4                                    even
000065D4                            EndingStLocArray:
000065D4                            		incbin	misc\sloc_end.bin
000065F4                            		even
000065F4                            
000065F4                            ; ===========================================================================
000065F4                            
000065F4                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000065F4 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000065F8 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000065FA 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006600 3238 D008                  		move.w	($FFFFD008).w,d1
00006604 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006608 6000                       		bra.s	loc_60D0
0000660A                            ; ===========================================================================
0000660A                            
0000660A                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000660A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000660E ED08                       		lsl.b	#6,d0
00006610 E848                       		lsr.w	#4,d0
00006612 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006616 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000661A 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000661C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006620 5340                       		subq.w	#1,d0
00006622 E548                       		lsl.w	#2,d0
00006624 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006628                            
00006628                            LevSz_SonicPos:
00006628 7200                       		moveq	#0,d1
0000662A 3219                       		move.w	(a1)+,d1
0000662C 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006630 7000                       		moveq	#0,d0
00006632 3011                       		move.w	(a1),d0
00006634 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006638                            
00006638                            loc_60D0:				; XREF: LevSz_ChkLamp
00006638 0441 00A0                  		subi.w	#$A0,d1
0000663C 6400                       		bcc.s	loc_60D8
0000663E 7200                       		moveq	#0,d1
00006640                            
00006640                            loc_60D8:
00006640 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006644 B242                       		cmp.w	d2,d1
00006646 6500                       		bcs.s	loc_60E2
00006648 3202                       		move.w	d2,d1
0000664A                            
0000664A                            loc_60E2:
0000664A 31C1 F700                  		move.w	d1,($FFFFF700).w
0000664E 0440 0060                  		subi.w	#$60,d0
00006652 6400                       		bcc.s	loc_60EE
00006654 7000                       		moveq	#0,d0
00006656                            
00006656                            loc_60EE:
00006656 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000665A 6D00                       		blt.s	loc_60F8
0000665C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006660                            
00006660                            loc_60F8:
00006660 31C0 F704                  		move.w	d0,($FFFFF704).w
00006664 6100 0000                  		bsr.w	BgScrollSpeed
00006668 7000                       		moveq	#0,d0
0000666A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000666E E508                       		lsl.b	#2,d0
00006670 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006676 6000 0000                  		bra.w	LevSz_Unk
0000667A                            ; ===========================================================================
0000667A                            ; ---------------------------------------------------------------------------
0000667A                            ; Sonic	start location array
0000667A                            ; ---------------------------------------------------------------------------
0000667A                            StartLocArray:	incbin	misc\sloc_lev.bin
000066EA                            		even
000066EA                            
000066EA                            ; ---------------------------------------------------------------------------
000066EA                            ; Which	256x256	tiles contain loops or roll-tunnels
000066EA                            ; ---------------------------------------------------------------------------
000066EA                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000066EA                            ; loop,	loop, tunnel, tunnel
000066EA                            ; ---------------------------------------------------------------------------
000066EA                            LoopTileNums:	incbin	misc\loopnums.bin
00006706                            		even
00006706                            
00006706                            ; ===========================================================================
00006706                            
00006706                            LevSz_Unk:				; XREF: LevelSizeLoad
00006706 7000                       		moveq	#0,d0
00006708 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000670C E748                       		lsl.w	#3,d0
0000670E 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006712 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006716 24D9                       		move.l	(a1)+,(a2)+
00006718 24D9                       		move.l	(a1)+,(a2)+
0000671A 4E75                       		rts	
0000671C                            ; End of function LevelSizeLoad
0000671C                            
0000671C                            ; ===========================================================================
0000671C 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006724 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000672C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006734 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000673C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006744 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000674C 0070 0100 0100 0100        		dc.l $700100, $1000100
00006754                            
00006754                            ; ---------------------------------------------------------------------------
00006754                            ; Subroutine to	set scroll speed of some backgrounds
00006754                            ; ---------------------------------------------------------------------------
00006754                            
00006754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006754                            
00006754                            
00006754                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006754 4A38 FE30                  		tst.b	($FFFFFE30).w
00006758 6600                       		bne.s	loc_6206
0000675A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000675E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006762 31C1 F708                  		move.w	d1,($FFFFF708).w
00006766 31C1 F710                  		move.w	d1,($FFFFF710).w
0000676A 31C1 F718                  		move.w	d1,($FFFFF718).w
0000676E                            
0000676E                            loc_6206:
0000676E 7400                       		moveq	#0,d2
00006770 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006774 D442                       		add.w	d2,d2
00006776 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000677A 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000677E                            ; End of function BgScrollSpeed
0000677E                            
0000677E                            ; ===========================================================================
0000677E 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006782 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006786 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000678A 0000                       		dc.w BgScroll_End-BgScroll_Index
0000678C                            ; ===========================================================================
0000678C                            
0000678C                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000678C 6000 0000                  		bra.w	Deform_GHZ
00006790                            ; ===========================================================================
00006790                            
00006790                            BgScroll_LZ:				; XREF: BgScroll_Index
00006790 E280                       		asr.l	#1,d0
00006792 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006796 4E75                       		rts	
00006798                            ; ===========================================================================
00006798                            
00006798                            BgScroll_MZ:				; XREF: BgScroll_Index
00006798 4E75                       		rts	
0000679A                            ; ===========================================================================
0000679A                            
0000679A                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000679A E280                       		asr.l	#1,d0
0000679C 0640 00C0                  		addi.w	#$C0,d0
000067A0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000067A4 4E75                       		rts	
000067A6                            ; ===========================================================================
000067A6                            
000067A6                            BgScroll_SYZ:				; XREF: BgScroll_Index
000067A6 E980                       		asl.l	#4,d0
000067A8 2400                       		move.l	d0,d2
000067AA E380                       		asl.l	#1,d0
000067AC D082                       		add.l	d2,d0
000067AE E080                       		asr.l	#8,d0
000067B0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000067B4 31C0 F714                  		move.w	d0,($FFFFF714).w
000067B8 4E75                       		rts	
000067BA                            ; ===========================================================================
000067BA                            
000067BA                            BgScroll_SBZ:				; XREF: BgScroll_Index
000067BA E980                       		asl.l	#4,d0
000067BC E380                       		asl.l	#1,d0
000067BE E080                       		asr.l	#8,d0
000067C0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000067C4 4E75                       		rts	
000067C6                            ; ===========================================================================
000067C6                            
000067C6                            BgScroll_End:				; XREF: BgScroll_Index
000067C6 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000067CC 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000067D2 4E75                       		rts	
000067D4                            ; ===========================================================================
000067D4 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000067DA 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000067E0 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000067E6 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000067EC 4E75                       		rts
000067EE                            
000067EE                            ; ---------------------------------------------------------------------------
000067EE                            ; Background layer deformation subroutines
000067EE                            ; ---------------------------------------------------------------------------
000067EE                            
000067EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067EE                            
000067EE                            
000067EE                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000067EE 4A38 F744                  		tst.b	($FFFFF744).w
000067F2 6700                       		beq.s	loc_628E
000067F4 4E75                       		rts	
000067F6                            ; ===========================================================================
000067F6                            
000067F6                            loc_628E:
000067F6 4278 F754                  		clr.w	($FFFFF754).w
000067FA 4278 F756                  		clr.w	($FFFFF756).w
000067FE 4278 F758                  		clr.w	($FFFFF758).w
00006802 4278 F75A                  		clr.w	($FFFFF75A).w
00006806 6100 0000                  		bsr.w	ScrollHoriz
0000680A 6100 0000                  		bsr.w	ScrollVertical
0000680E 6100 0000                  		bsr.w	DynScrResizeLoad
00006812 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006818 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000681E 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006824 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000682A 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006830 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006836 7000                       		moveq	#0,d0
00006838 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000683C D040                       		add.w	d0,d0
0000683E 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006842 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006846                            ; End of function DeformBgLayer
00006846                            
00006846                            ; ===========================================================================
00006846                            ; ---------------------------------------------------------------------------
00006846                            ; Offset index for background layer deformation	code
00006846                            ; ---------------------------------------------------------------------------
00006846 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000684A 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000684E 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006852 0000                       		dc.w Deform_GHZ-Deform_Index
00006854                            ; ---------------------------------------------------------------------------
00006854                            ; Green	Hill Zone background layer deformation code
00006854                            ; ---------------------------------------------------------------------------
00006854                            
00006854                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006854                            
00006854                            
00006854                            Deform_GHZ:				; XREF: Deform_Index
00006854 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006858 48C4                       		ext.l	d4
0000685A EB84                       		asl.l	#5,d4
0000685C 2204                       		move.l	d4,d1
0000685E E384                       		asl.l	#1,d4
00006860 D881                       		add.l	d1,d4
00006862 7A00                       		moveq	#0,d5
00006864 6100 0000                  		bsr.w	ScrollBlock1
00006868 6100 0000                  		bsr.w	ScrollBlock4
0000686C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006870 3038 F704                  		move.w	($FFFFF704).w,d0
00006874 0240 07FF                  		andi.w	#$7FF,d0
00006878 EA48                       		lsr.w	#5,d0
0000687A 4440                       		neg.w	d0
0000687C 0640 0026                  		addi.w	#$26,d0
00006880 31C0 F714                  		move.w	d0,($FFFFF714).w
00006884 3800                       		move.w	d0,d4
00006886 6100 0000                  		bsr.w	ScrollBlock3
0000688A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006890 323C 006F                  		move.w	#$6F,d1
00006894 9244                       		sub.w	d4,d1
00006896 3038 F700                  		move.w	($FFFFF700).w,d0
0000689A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000068A0 6600                       		bne.s	loc_633C
000068A2 7000                       		moveq	#0,d0
000068A4                            
000068A4                            loc_633C:
000068A4 4440                       		neg.w	d0
000068A6 4840                       		swap	d0
000068A8 3038 F708                  		move.w	($FFFFF708).w,d0
000068AC 4440                       		neg.w	d0
000068AE                            
000068AE                            loc_6346:
000068AE 22C0                       		move.l	d0,(a1)+
000068B0 51C9 FFFC                  		dbf	d1,loc_6346
000068B4 323C 0027                  		move.w	#$27,d1
000068B8 3038 F710                  		move.w	($FFFFF710).w,d0
000068BC 4440                       		neg.w	d0
000068BE                            
000068BE                            loc_6356:
000068BE 22C0                       		move.l	d0,(a1)+
000068C0 51C9 FFFC                  		dbf	d1,loc_6356
000068C4 3038 F710                  		move.w	($FFFFF710).w,d0
000068C8 0640 0000                  		addi.w	#0,d0
000068CC 3438 F700                  		move.w	($FFFFF700).w,d2
000068D0 0642 FE00                  		addi.w	#-$200,d2
000068D4 9440                       		sub.w	d0,d2
000068D6 48C2                       		ext.l	d2
000068D8 E182                       		asl.l	#8,d2
000068DA 85FC 0068                  		divs.w	#$68,d2
000068DE 48C2                       		ext.l	d2
000068E0 E182                       		asl.l	#8,d2
000068E2 7600                       		moveq	#0,d3
000068E4 3600                       		move.w	d0,d3
000068E6 323C 0047                  		move.w	#$47,d1
000068EA D244                       		add.w	d4,d1
000068EC                            
000068EC                            loc_6384:
000068EC 3003                       		move.w	d3,d0
000068EE 4440                       		neg.w	d0
000068F0 22C0                       		move.l	d0,(a1)+
000068F2 4843                       		swap	d3
000068F4 D682                       		add.l	d2,d3
000068F6 4843                       		swap	d3
000068F8 51C9 FFF2                  		dbf	d1,loc_6384
000068FC 4E75                       		rts	
000068FE                            ; End of function Deform_GHZ
000068FE                            
000068FE                            ; ---------------------------------------------------------------------------
000068FE                            ; Labyrinth Zone background layer deformation code
000068FE                            ; ---------------------------------------------------------------------------
000068FE                            
000068FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068FE                            
000068FE                            
000068FE                            Deform_LZ:				; XREF: Deform_Index
000068FE 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006902 48C4                       		ext.l	d4
00006904 EF84                       		asl.l	#7,d4
00006906 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000690A 48C5                       		ext.l	d5
0000690C EF85                       		asl.l	#7,d5
0000690E 6100 0000                  		bsr.w	ScrollBlock1
00006912 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006918 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000691C 323C 00DF                  		move.w	#$DF,d1
00006920 3038 F700                  		move.w	($FFFFF700).w,d0
00006924 4440                       		neg.w	d0
00006926 4840                       		swap	d0
00006928 3038 F708                  		move.w	($FFFFF708).w,d0
0000692C 4440                       		neg.w	d0
0000692E                            
0000692E                            loc_63C6:
0000692E 22C0                       		move.l	d0,(a1)+
00006930 51C9 FFFC                  		dbf	d1,loc_63C6
00006934 3038 F646                  		move.w	($FFFFF646).w,d0
00006938 9078 F704                  		sub.w	($FFFFF704).w,d0
0000693C 4E75                       		rts	
0000693E                            ; End of function Deform_LZ
0000693E                            
0000693E                            ; ---------------------------------------------------------------------------
0000693E                            ; Marble Zone background layer deformation code
0000693E                            ; ---------------------------------------------------------------------------
0000693E                            
0000693E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000693E                            
0000693E                            
0000693E                            Deform_MZ:				; XREF: Deform_Index
0000693E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006942 48C4                       		ext.l	d4
00006944 ED84                       		asl.l	#6,d4
00006946 2204                       		move.l	d4,d1
00006948 E384                       		asl.l	#1,d4
0000694A D881                       		add.l	d1,d4
0000694C 7A00                       		moveq	#0,d5
0000694E 6100 0000                  		bsr.w	ScrollBlock1
00006952 303C 0200                  		move.w	#$200,d0
00006956 3238 F704                  		move.w	($FFFFF704).w,d1
0000695A 0441 01C8                  		subi.w	#$1C8,d1
0000695E 6500                       		bcs.s	loc_6402
00006960 3401                       		move.w	d1,d2
00006962 D241                       		add.w	d1,d1
00006964 D242                       		add.w	d2,d1
00006966 E441                       		asr.w	#2,d1
00006968 D041                       		add.w	d1,d0
0000696A                            
0000696A                            loc_6402:
0000696A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000696E 6100 0000                  		bsr.w	ScrollBlock3
00006972 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006978 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000697C 323C 00DF                  		move.w	#$DF,d1
00006980 3038 F700                  		move.w	($FFFFF700).w,d0
00006984 4440                       		neg.w	d0
00006986 4840                       		swap	d0
00006988 3038 F708                  		move.w	($FFFFF708).w,d0
0000698C 4440                       		neg.w	d0
0000698E                            
0000698E                            loc_6426:
0000698E 22C0                       		move.l	d0,(a1)+
00006990 51C9 FFFC                  		dbf	d1,loc_6426
00006994 4E75                       		rts	
00006996                            ; End of function Deform_MZ
00006996                            
00006996                            ; ---------------------------------------------------------------------------
00006996                            ; Star Light Zone background layer deformation code
00006996                            ; ---------------------------------------------------------------------------
00006996                            
00006996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006996                            
00006996                            
00006996                            Deform_SLZ:				; XREF: Deform_Index
00006996 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000699A 48C4                       		ext.l	d4
0000699C EB84                       		asl.l	#5,d4
0000699E 2204                       		move.l	d4,d1
000069A0 E384                       		asl.l	#1,d4
000069A2 D881                       		add.l	d1,d4
000069A4 7A00                       		moveq	#0,d5
000069A6 6100 0000                  		bsr.w	ScrollBlock1
000069AA 6100 0000                  		bsr.w	ScrollBlock3
000069AE 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069B2                            	;	move.w	($FFFFF704).w,d0
000069B2                            	;	andi.w	#$7FF,d0
000069B2 EA48                       		lsr.w	#5,d0
000069B4 4440                       		neg.w	d0
000069B6 0640 0026                  		addi.w	#$26,d0
000069BA 31C0 F714                  		move.w	d0,($FFFFF714).w
000069BE 3800                       		move.w	d0,d4
000069C0                            	;	bsr.w	ScrollBlock3
000069C0 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000069C6 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000069CA                            
000069CA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069CE 4440                       		neg.w	d0			; negate (positive to negative)
000069D0 4840                       		swap	d0			; send to the left side of d0
000069D2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069D6 45F8 A800                  		lea	($FFFFA800).w,a2
000069DA 069A 0000 5000             		addi.l	#$5000,(a2)+
000069E0 069A 0000 C000             		addi.l	#$C000,(a2)+
000069E6 3038 A800                  		move.w	($FFFFA800).w,d0
000069EA 4440                       		neg.w	d0			; negate (positive to negative)
000069EC E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000069EE 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069F2                            slz_DeformLoop_1:
000069F2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069F4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000069F8                            
000069F8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069FC 4440                       		neg.w	d0			; negate (positive to negative)
000069FE 4840                       		swap	d0			; send to the left side of d0
00006A00 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A04 45F8 A800                  		lea	($FFFFA800).w,a2
00006A08 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A0E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A14 3038 A800                  		move.w	($FFFFA800).w,d0
00006A18 4440                       		neg.w	d0			; negate (positive to negative)
00006A1A E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006A1C 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A20                            slz_DeformLoop_2:
00006A20 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A22 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006A26                            
00006A26 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A2A 4440                       		neg.w	d0			; negate (positive to negative)
00006A2C 4840                       		swap	d0			; send to the left side of d0
00006A2E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A32 45F8 A800                  		lea	($FFFFA800).w,a2
00006A36 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A3C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A42 3038 A800                  		move.w	($FFFFA800).w,d0
00006A46 4440                       		neg.w	d0			; negate (positive to negative)
00006A48 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A4A 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A4E                            slz_DeformLoop_3:
00006A4E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A50 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006A54                            
00006A54 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A58 4440                       		neg.w	d0			; negate (positive to negative)
00006A5A 4840                       		swap	d0			; send to the left side of d0
00006A5C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A60 45F8 A800                  		lea	($FFFFA800).w,a2
00006A64 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A6A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A70 3038 A800                  		move.w	($FFFFA800).w,d0
00006A74 4440                       		neg.w	d0			; negate (positive to negative)
00006A76 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A78 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A7C                            slz_DeformLoop_4:
00006A7C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A7E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006A82                            
00006A82 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A86 4440                       		neg.w	d0			; negate (positive to negative)
00006A88 4840                       		swap	d0			; send to the left side of d0
00006A8A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A8E 45F8 A800                  		lea	($FFFFA800).w,a2
00006A92 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A98 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A9E 3038 A800                  		move.w	($FFFFA800).w,d0
00006AA2 4440                       		neg.w	d0			; negate (positive to negative)
00006AA4 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006AA6 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AAA                            slz_DeformLoop_5:
00006AAA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AAC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006AB0                            
00006AB0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AB4 4440                       		neg.w	d0			; negate (positive to negative)
00006AB6 4840                       		swap	d0			; send to the left side of d0
00006AB8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006ABC 4440                       		neg.w	d0			; negate (positive to negative)
00006ABE EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006AC0 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AC4                            slz_DeformLoop_6:
00006AC4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AC6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006ACA                            
00006ACA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006ACE 4440                       		neg.w	d0			; negate (positive to negative)
00006AD0 4840                       		swap	d0			; send to the left side of d0
00006AD2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AD6 4440                       		neg.w	d0			; negate (positive to negative)
00006AD8 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006ADA 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006ADE                            slz_DeformLoop_7:
00006ADE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AE0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006AE4                            
00006AE4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AE8 4440                       		neg.w	d0			; negate (positive to negative)
00006AEA 4840                       		swap	d0			; send to the left side of d0
00006AEC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AF0 4440                       		neg.w	d0			; negate (positive to negative)
00006AF2 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006AF4 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AF8                            slz_DeformLoop_8:
00006AF8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AFA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006AFE                            
00006AFE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B02 4440                       		neg.w	d0			; negate (positive to negative)
00006B04 4840                       		swap	d0			; send to the left side of d0
00006B06 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B0A 4440                       		neg.w	d0			; negate (positive to negative)
00006B0C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006B0E 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B12                            slz_DeformLoop_9:
00006B12 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B14 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006B18                            
00006B18 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B1C 4440                       		neg.w	d0			; negate (positive to negative)
00006B1E 4840                       		swap	d0			; send to the left side of d0
00006B20 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B24 4440                       		neg.w	d0			; negate (positive to negative)
00006B26 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006B28 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B2C                            slz_DeformLoop_10:
00006B2C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B2E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006B32                            
00006B32 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B36 4440                       		neg.w	d0			; negate (positive to negative)
00006B38 4840                       		swap	d0			; send to the left side of d0
00006B3A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B3E 4440                       		neg.w	d0			; negate (positive to negative)
00006B40 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006B42 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B46                            slz_DeformLoop_11:
00006B46 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B48 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006B4C                            
00006B4C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B50 4440                       		neg.w	d0			; negate (positive to negative)
00006B52 4840                       		swap	d0			; send to the left side of d0
00006B54 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B58 4440                       		neg.w	d0			; negate (positive to negative)
00006B5A E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B5C 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B60                            slz_DeformLoop_12:
00006B60 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B62 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006B66                            
00006B66 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B6A 4440                       		neg.w	d0			; negate (positive to negative)
00006B6C 4840                       		swap	d0			; send to the left side of d0
00006B6E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B72 4440                       		neg.w	d0			; negate (positive to negative)
00006B74 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B76 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B7A                            slz_DeformLoop_13:
00006B7A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B7C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006B80 4E75                       		rts	
00006B82                            ; End of function Deform_SLZ
00006B82 4E75                       		rts	
00006B84                            ; End of function Deform_SLZ_2
00006B84                            
00006B84                            ; ---------------------------------------------------------------------------
00006B84                            ; Spring Yard Zone background layer deformation	code
00006B84                            ; ---------------------------------------------------------------------------
00006B84                            
00006B84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B84                            
00006B84                            
00006B84                            Deform_SYZ:				; XREF: Deform_Index
00006B84 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B88 48C4                       		ext.l	d4
00006B8A ED84                       		asl.l	#6,d4
00006B8C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B90 48C5                       		ext.l	d5
00006B92 E985                       		asl.l	#4,d5
00006B94 2205                       		move.l	d5,d1
00006B96 E385                       		asl.l	#1,d5
00006B98 DA81                       		add.l	d1,d5
00006B9A 6100 0000                  		bsr.w	ScrollBlock1
00006B9E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006BA4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006BA8 323C 00DF                  		move.w	#$DF,d1
00006BAC 3038 F700                  		move.w	($FFFFF700).w,d0
00006BB0 4440                       		neg.w	d0
00006BB2 4840                       		swap	d0
00006BB4 3038 F708                  		move.w	($FFFFF708).w,d0
00006BB8 4440                       		neg.w	d0
00006BBA                            
00006BBA                            loc_653C:
00006BBA 22C0                       		move.l	d0,(a1)+
00006BBC 51C9 FFFC                  		dbf	d1,loc_653C
00006BC0 4E75                       		rts	
00006BC2                            ; End of function Deform_SYZ
00006BC2                            
00006BC2                            ; ---------------------------------------------------------------------------
00006BC2                            ; Scrap	Brain Zone background layer deformation	code
00006BC2                            ; ---------------------------------------------------------------------------
00006BC2                            
00006BC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BC2                            
00006BC2                            
00006BC2                            Deform_SBZ:				; XREF: Deform_Index
00006BC2 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006BC6 48C4                       		ext.l	d4
00006BC8 ED84                       		asl.l	#6,d4
00006BCA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006BCE 48C5                       		ext.l	d5
00006BD0 E985                       		asl.l	#4,d5
00006BD2 E385                       		asl.l	#1,d5
00006BD4 6100 0000                  		bsr.w	ScrollBlock1
00006BD8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006BDE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006BE2 323C 00DF                  		move.w	#$DF,d1
00006BE6 3038 F700                  		move.w	($FFFFF700).w,d0
00006BEA 4440                       		neg.w	d0
00006BEC 4840                       		swap	d0
00006BEE 3038 F708                  		move.w	($FFFFF708).w,d0
00006BF2 4440                       		neg.w	d0
00006BF4                            
00006BF4                            loc_6576:
00006BF4 22C0                       		move.l	d0,(a1)+
00006BF6 51C9 FFFC                  		dbf	d1,loc_6576
00006BFA 4E75                       		rts	
00006BFC                            ; End of function Deform_SBZ
00006BFC                            
00006BFC                            ; ---------------------------------------------------------------------------
00006BFC                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006BFC                            ; ---------------------------------------------------------------------------
00006BFC                            
00006BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BFC                            
00006BFC                            
00006BFC                            ScrollHoriz:				; XREF: DeformBgLayer
00006BFC 3838 F700                  		move.w	($FFFFF700).w,d4
00006C00 6100                       		bsr.s	ScrollHoriz2
00006C02 3038 F700                  		move.w	($FFFFF700).w,d0
00006C06 0240 0010                  		andi.w	#$10,d0
00006C0A 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006C0E B300                       		eor.b	d1,d0
00006C10 6600                       		bne.s	locret_65B0
00006C12 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006C18 3038 F700                  		move.w	($FFFFF700).w,d0
00006C1C 9044                       		sub.w	d4,d0
00006C1E 6A00                       		bpl.s	loc_65AA
00006C20 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006C26 4E75                       		rts	
00006C28                            ; ===========================================================================
00006C28                            
00006C28                            loc_65AA:
00006C28 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006C2E                            
00006C2E                            locret_65B0:
00006C2E 4E75                       		rts	
00006C30                            ; End of function ScrollHoriz
00006C30                            
00006C30                            
00006C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C30                            
00006C30                            
00006C30                            ScrollHoriz2:				; XREF: ScrollHoriz
00006C30 3038 D008                  		move.w	($FFFFD008).w,d0
00006C34 9078 F700                  		sub.w	($FFFFF700).w,d0
00006C38 0440 0090                  		subi.w	#$90,d0
00006C3C 6500                       		bcs.s	loc_65F6
00006C3E 0440 0010                  		subi.w	#$10,d0
00006C42 6400                       		bcc.s	loc_65CC
00006C44 4278 F73A                  		clr.w	($FFFFF73A).w
00006C48 4E75                       		rts	
00006C4A                            ; ===========================================================================
00006C4A                            
00006C4A                            loc_65CC:
00006C4A 0C40 0010                  		cmpi.w	#$10,d0
00006C4E 6500                       		bcs.s	loc_65D6
00006C50 303C 0010                  		move.w	#$10,d0
00006C54                            
00006C54                            loc_65D6:
00006C54 D078 F700                  		add.w	($FFFFF700).w,d0
00006C58 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006C5C 6D00                       		blt.s	loc_65E4
00006C5E 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006C62                            
00006C62                            loc_65E4:
00006C62 3200                       		move.w	d0,d1
00006C64 9278 F700                  		sub.w	($FFFFF700).w,d1
00006C68 E141                       		asl.w	#8,d1
00006C6A 31C0 F700                  		move.w	d0,($FFFFF700).w
00006C6E 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006C72 4E75                       		rts	
00006C74                            ; ===========================================================================
00006C74                            
00006C74                            loc_65F6:				; XREF: ScrollHoriz2
00006C74 D078 F700                  		add.w	($FFFFF700).w,d0
00006C78 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006C7C 6EE4                       		bgt.s	loc_65E4
00006C7E 3038 F728                  		move.w	($FFFFF728).w,d0
00006C82 60DE                       		bra.s	loc_65E4
00006C84                            ; End of function ScrollHoriz2
00006C84                            
00006C84                            ; ===========================================================================
00006C84 4A40                       		tst.w	d0
00006C86 6A00                       		bpl.s	loc_6610
00006C88 303C FFFE                  		move.w	#-2,d0
00006C8C 60E6                       		bra.s	loc_65F6
00006C8E                            ; ===========================================================================
00006C8E                            
00006C8E                            loc_6610:
00006C8E 303C 0002                  		move.w	#2,d0
00006C92 60B6                       		bra.s	loc_65CC
00006C94                            
00006C94                            ; ---------------------------------------------------------------------------
00006C94                            ; Subroutine to	scroll the level vertically as Sonic moves
00006C94                            ; ---------------------------------------------------------------------------
00006C94                            
00006C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C94                            
00006C94                            
00006C94                            ScrollVertical:				; XREF: DeformBgLayer
00006C94 7200                       		moveq	#0,d1
00006C96 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006C9A 9078 F704                  		sub.w	($FFFFF704).w,d0
00006C9E 0838 0002 D022             		btst	#2,($FFFFD022).w
00006CA4 6700                       		beq.s	loc_662A
00006CA6 5B40                       		subq.w	#5,d0
00006CA8                            
00006CA8                            loc_662A:
00006CA8 0838 0001 D022             		btst	#1,($FFFFD022).w
00006CAE 6700                       		beq.s	loc_664A
00006CB0 0640 0020                  		addi.w	#$20,d0
00006CB4 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006CB8 6500                       		bcs.s	loc_6696
00006CBA 0440 0040                  		subi.w	#$40,d0
00006CBE 6400                       		bcc.s	loc_6696
00006CC0 4A38 F75C                  		tst.b	($FFFFF75C).w
00006CC4 6600                       		bne.s	loc_66A8
00006CC6 6000                       		bra.s	loc_6656
00006CC8                            ; ===========================================================================
00006CC8                            
00006CC8                            loc_664A:
00006CC8 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006CCC 6600                       		bne.s	loc_665C
00006CCE 4A38 F75C                  		tst.b	($FFFFF75C).w
00006CD2 6600                       		bne.s	loc_66A8
00006CD4                            
00006CD4                            loc_6656:
00006CD4 4278 F73C                  		clr.w	($FFFFF73C).w
00006CD8 4E75                       		rts	
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            loc_665C:
00006CDA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006CE0 6600                       		bne.s	loc_6684
00006CE2 3238 D014                  		move.w	($FFFFD014).w,d1
00006CE6 6A00                       		bpl.s	loc_666C
00006CE8 4441                       		neg.w	d1
00006CEA                            
00006CEA                            loc_666C:
00006CEA 0C41 0800                  		cmpi.w	#$800,d1
00006CEE 6400                       		bcc.s	loc_6696
00006CF0 323C 0600                  		move.w	#$600,d1
00006CF4 0C40 0006                  		cmpi.w	#6,d0
00006CF8 6E00                       		bgt.s	loc_66F6
00006CFA 0C40 FFFA                  		cmpi.w	#-6,d0
00006CFE 6D00                       		blt.s	loc_66C0
00006D00 6000                       		bra.s	loc_66AE
00006D02                            ; ===========================================================================
00006D02                            
00006D02                            loc_6684:
00006D02 323C 0200                  		move.w	#$200,d1
00006D06 0C40 0002                  		cmpi.w	#2,d0
00006D0A 6E00                       		bgt.s	loc_66F6
00006D0C 0C40 FFFE                  		cmpi.w	#-2,d0
00006D10 6D00                       		blt.s	loc_66C0
00006D12 6000                       		bra.s	loc_66AE
00006D14                            ; ===========================================================================
00006D14                            
00006D14                            loc_6696:
00006D14 323C 1000                  		move.w	#$1000,d1
00006D18 0C40 0010                  		cmpi.w	#$10,d0
00006D1C 6E00                       		bgt.s	loc_66F6
00006D1E 0C40 FFF0                  		cmpi.w	#-$10,d0
00006D22 6D00                       		blt.s	loc_66C0
00006D24 6000                       		bra.s	loc_66AE
00006D26                            ; ===========================================================================
00006D26                            
00006D26                            loc_66A8:
00006D26 7000                       		moveq	#0,d0
00006D28 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006D2C                            
00006D2C                            loc_66AE:
00006D2C 7200                       		moveq	#0,d1
00006D2E 3200                       		move.w	d0,d1
00006D30 D278 F704                  		add.w	($FFFFF704).w,d1
00006D34 4A40                       		tst.w	d0
00006D36 6A00 0000                  		bpl.w	loc_6700
00006D3A 6000 0000                  		bra.w	loc_66CC
00006D3E                            ; ===========================================================================
00006D3E                            
00006D3E                            loc_66C0:
00006D3E 4441                       		neg.w	d1
00006D40 48C1                       		ext.l	d1
00006D42 E181                       		asl.l	#8,d1
00006D44 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D48 4841                       		swap	d1
00006D4A                            
00006D4A                            loc_66CC:
00006D4A B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006D4E 6E00                       		bgt.s	loc_6724
00006D50 0C41 FF00                  		cmpi.w	#-$100,d1
00006D54 6E00                       		bgt.s	loc_66F0
00006D56 0241 07FF                  		andi.w	#$7FF,d1
00006D5A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D60 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006D66 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D6C 6000                       		bra.s	loc_6724
00006D6E                            ; ===========================================================================
00006D6E                            
00006D6E                            loc_66F0:
00006D6E 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006D72 6000                       		bra.s	loc_6724
00006D74                            ; ===========================================================================
00006D74                            
00006D74                            loc_66F6:
00006D74 48C1                       		ext.l	d1
00006D76 E181                       		asl.l	#8,d1
00006D78 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D7C 4841                       		swap	d1
00006D7E                            
00006D7E                            loc_6700:
00006D7E B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006D82 6D00                       		blt.s	loc_6724
00006D84 0441 0800                  		subi.w	#$800,d1
00006D88 6500                       		bcs.s	loc_6720
00006D8A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D90 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006D96 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D9C 6000                       		bra.s	loc_6724
00006D9E                            ; ===========================================================================
00006D9E                            
00006D9E                            loc_6720:
00006D9E 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006DA2                            
00006DA2                            loc_6724:
00006DA2 3838 F704                  		move.w	($FFFFF704).w,d4
00006DA6 4841                       		swap	d1
00006DA8 2601                       		move.l	d1,d3
00006DAA 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006DAE E09B                       		ror.l	#8,d3
00006DB0 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006DB4 21C1 F704                  		move.l	d1,($FFFFF704).w
00006DB8 3038 F704                  		move.w	($FFFFF704).w,d0
00006DBC 0240 0010                  		andi.w	#$10,d0
00006DC0 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006DC4 B300                       		eor.b	d1,d0
00006DC6 6600                       		bne.s	locret_6766
00006DC8 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006DCE 3038 F704                  		move.w	($FFFFF704).w,d0
00006DD2 9044                       		sub.w	d4,d0
00006DD4 6A00                       		bpl.s	loc_6760
00006DD6 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006DDC 4E75                       		rts	
00006DDE                            ; ===========================================================================
00006DDE                            
00006DDE                            loc_6760:
00006DDE 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006DE4                            
00006DE4                            locret_6766:
00006DE4 4E75                       		rts	
00006DE6                            ; End of function ScrollVertical
00006DE6                            
00006DE6                            
00006DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DE6                            
00006DE6                            
00006DE6                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006DE6 2438 F708                  		move.l	($FFFFF708).w,d2
00006DEA 2002                       		move.l	d2,d0
00006DEC D084                       		add.l	d4,d0
00006DEE 21C0 F708                  		move.l	d0,($FFFFF708).w
00006DF2 2200                       		move.l	d0,d1
00006DF4 4841                       		swap	d1
00006DF6 0241 0010                  		andi.w	#$10,d1
00006DFA 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006DFE B701                       		eor.b	d3,d1
00006E00 6600                       		bne.s	loc_679C
00006E02 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006E08 9082                       		sub.l	d2,d0
00006E0A 6A00                       		bpl.s	loc_6796
00006E0C 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006E12 6000                       		bra.s	loc_679C
00006E14                            ; ===========================================================================
00006E14                            
00006E14                            loc_6796:
00006E14 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006E1A                            
00006E1A                            loc_679C:
00006E1A 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006E1E 2003                       		move.l	d3,d0
00006E20 D085                       		add.l	d5,d0
00006E22 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006E26 2200                       		move.l	d0,d1
00006E28 4841                       		swap	d1
00006E2A 0241 0010                  		andi.w	#$10,d1
00006E2E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E32 B501                       		eor.b	d2,d1
00006E34 6600                       		bne.s	locret_67D0
00006E36 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E3C 9083                       		sub.l	d3,d0
00006E3E 6A00                       		bpl.s	loc_67CA
00006E40 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E46 4E75                       		rts	
00006E48                            ; ===========================================================================
00006E48                            
00006E48                            loc_67CA:
00006E48 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E4E                            
00006E4E                            locret_67D0:
00006E4E 4E75                       		rts	
00006E50                            ; End of function ScrollBlock1
00006E50                            
00006E50                            
00006E50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E50                            
00006E50                            
00006E50                            ScrollBlock2:				; XREF: Deform_SLZ
00006E50 2438 F708                  		move.l	($FFFFF708).w,d2
00006E54 2002                       		move.l	d2,d0
00006E56 D084                       		add.l	d4,d0
00006E58 21C0 F708                  		move.l	d0,($FFFFF708).w
00006E5C 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006E60 2003                       		move.l	d3,d0
00006E62 D085                       		add.l	d5,d0
00006E64 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006E68 2200                       		move.l	d0,d1
00006E6A 4841                       		swap	d1
00006E6C 0241 0010                  		andi.w	#$10,d1
00006E70 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E74 B501                       		eor.b	d2,d1
00006E76 6600                       		bne.s	locret_6812
00006E78 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E7E 9083                       		sub.l	d3,d0
00006E80 6A00                       		bpl.s	loc_680C
00006E82 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E88 4E75                       		rts	
00006E8A                            ; ===========================================================================
00006E8A                            
00006E8A                            loc_680C:
00006E8A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E90                            
00006E90                            locret_6812:
00006E90 4E75                       		rts	
00006E92                            ; End of function ScrollBlock2
00006E92                            
00006E92                            
00006E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E92                            
00006E92                            
00006E92                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006E92 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006E96 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006E9A 3200                       		move.w	d0,d1
00006E9C 0241 0010                  		andi.w	#$10,d1
00006EA0 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006EA4 B501                       		eor.b	d2,d1
00006EA6 6600                       		bne.s	locret_6842
00006EA8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006EAE 9043                       		sub.w	d3,d0
00006EB0 6A00                       		bpl.s	loc_683C
00006EB2 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006EB8 4E75                       		rts	
00006EBA                            ; ===========================================================================
00006EBA                            
00006EBA                            loc_683C:
00006EBA 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006EC0                            
00006EC0                            locret_6842:
00006EC0 4E75                       		rts	
00006EC2                            ; End of function ScrollBlock3
00006EC2                            
00006EC2                            
00006EC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EC2                            
00006EC2                            
00006EC2                            ScrollBlock4:				; XREF: Deform_GHZ
00006EC2 3438 F710                  		move.w	($FFFFF710).w,d2
00006EC6 3638 F714                  		move.w	($FFFFF714).w,d3
00006ECA 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006ECE 48C0                       		ext.l	d0
00006ED0 EF80                       		asl.l	#7,d0
00006ED2 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006ED6 3038 F710                  		move.w	($FFFFF710).w,d0
00006EDA 0240 0010                  		andi.w	#$10,d0
00006EDE 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006EE2 B300                       		eor.b	d1,d0
00006EE4 6600                       		bne.s	locret_6884
00006EE6 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006EEC 3038 F710                  		move.w	($FFFFF710).w,d0
00006EF0 9042                       		sub.w	d2,d0
00006EF2 6A00                       		bpl.s	loc_687E
00006EF4 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006EFA 6000                       		bra.s	locret_6884
00006EFC                            ; ===========================================================================
00006EFC                            
00006EFC                            loc_687E:
00006EFC 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006F02                            
00006F02                            locret_6884:
00006F02 4E75                       		rts	
00006F04                            ; End of function ScrollBlock4
00006F04                            
00006F04                            
00006F04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F04                            
00006F04                            
00006F04                            sub_6886:				; XREF: loc_C44
00006F04 4BF9 00C0 0004             		lea	($C00004).l,a5
00006F0A 4DF9 00C0 0000             		lea	($C00000).l,a6
00006F10 45F8 F756                  		lea	($FFFFF756).w,a2
00006F14 47F8 F708                  		lea	($FFFFF708).w,a3
00006F18 49F8 A440                  		lea	($FFFFA440).w,a4
00006F1C 343C 6000                  		move.w	#$6000,d2
00006F20 6100 0000                  		bsr.w	sub_6954
00006F24 45F8 F758                  		lea	($FFFFF758).w,a2
00006F28 47F8 F710                  		lea	($FFFFF710).w,a3
00006F2C 6000 0000                  		bra.w	sub_69F4
00006F30                            ; End of function sub_6886
00006F30                            
00006F30                            ; ---------------------------------------------------------------------------
00006F30                            ; Subroutine to	display	correct	tiles as you move
00006F30                            ; ---------------------------------------------------------------------------
00006F30                            
00006F30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F30                            
00006F30                            
00006F30                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006F30 4BF9 00C0 0004             		lea	($C00004).l,a5
00006F36 4DF9 00C0 0000             		lea	($C00000).l,a6
00006F3C 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006F40 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006F44 49F8 A440                  		lea	($FFFFA440).w,a4
00006F48 343C 6000                  		move.w	#$6000,d2
00006F4C 6100 0000                  		bsr.w	sub_6954
00006F50 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006F54 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006F58 6100 0000                  		bsr.w	sub_69F4
00006F5C 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006F60 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006F64 49F8 A400                  		lea	($FFFFA400).w,a4
00006F68 343C 4000                  		move.w	#$4000,d2
00006F6C 4A12                       		tst.b	(a2)
00006F6E 6700                       		beq.s	locret_6952
00006F70 0892 0000                  		bclr	#0,(a2)
00006F74 6700                       		beq.s	loc_6908
00006F76 78F0                       		moveq	#-$10,d4
00006F78 7AF0                       		moveq	#-$10,d5
00006F7A 6100 0000                  		bsr.w	sub_6C20
00006F7E 78F0                       		moveq	#-$10,d4
00006F80 7AF0                       		moveq	#-$10,d5
00006F82 6100 0000                  		bsr.w	sub_6AD8
00006F86                            
00006F86                            loc_6908:
00006F86 0892 0001                  		bclr	#1,(a2)
00006F8A 6700                       		beq.s	loc_6922
00006F8C 383C 00E0                  		move.w	#$E0,d4
00006F90 7AF0                       		moveq	#-$10,d5
00006F92 6100 0000                  		bsr.w	sub_6C20
00006F96 383C 00E0                  		move.w	#$E0,d4
00006F9A 7AF0                       		moveq	#-$10,d5
00006F9C 6100 0000                  		bsr.w	sub_6AD8
00006FA0                            
00006FA0                            loc_6922:
00006FA0 0892 0002                  		bclr	#2,(a2)
00006FA4 6700                       		beq.s	loc_6938
00006FA6 78F0                       		moveq	#-$10,d4
00006FA8 7AF0                       		moveq	#-$10,d5
00006FAA 6100 0000                  		bsr.w	sub_6C20
00006FAE 78F0                       		moveq	#-$10,d4
00006FB0 7AF0                       		moveq	#-$10,d5
00006FB2 6100 0000                  		bsr.w	sub_6B04
00006FB6                            
00006FB6                            loc_6938:
00006FB6 0892 0003                  		bclr	#3,(a2)
00006FBA 6700                       		beq.s	locret_6952
00006FBC 78F0                       		moveq	#-$10,d4
00006FBE 3A3C 0140                  		move.w	#$140,d5
00006FC2 6100 0000                  		bsr.w	sub_6C20
00006FC6 78F0                       		moveq	#-$10,d4
00006FC8 3A3C 0140                  		move.w	#$140,d5
00006FCC 6100 0000                  		bsr.w	sub_6B04
00006FD0                            
00006FD0                            locret_6952:
00006FD0 4E75                       		rts	
00006FD2                            ; End of function LoadTilesAsYouMove
00006FD2                            
00006FD2                            
00006FD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FD2                            
00006FD2                            
00006FD2                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006FD2 4A12                       		tst.b	(a2)
00006FD4 6700 0000                  		beq.w	locret_69F2
00006FD8 0892 0000                  		bclr	#0,(a2)
00006FDC 6700                       		beq.s	loc_6972
00006FDE 78F0                       		moveq	#-$10,d4
00006FE0 7AF0                       		moveq	#-$10,d5
00006FE2 6100 0000                  		bsr.w	sub_6C20
00006FE6 78F0                       		moveq	#-$10,d4
00006FE8 7AF0                       		moveq	#-$10,d5
00006FEA 7C1F                       		moveq	#$1F,d6
00006FEC 6100 0000                  		bsr.w	sub_6ADA
00006FF0                            
00006FF0                            loc_6972:
00006FF0 0892 0001                  		bclr	#1,(a2)
00006FF4 6700                       		beq.s	loc_698E
00006FF6 383C 00E0                  		move.w	#$E0,d4
00006FFA 7AF0                       		moveq	#-$10,d5
00006FFC 6100 0000                  		bsr.w	sub_6C20
00007000 383C 00E0                  		move.w	#$E0,d4
00007004 7AF0                       		moveq	#-$10,d5
00007006 7C1F                       		moveq	#$1F,d6
00007008 6100 0000                  		bsr.w	sub_6ADA
0000700C                            
0000700C                            loc_698E:
0000700C 0892 0002                  		bclr	#2,(a2)
00007010 6700                       		beq.s	loc_69BE
00007012 78F0                       		moveq	#-$10,d4
00007014 7AF0                       		moveq	#-$10,d5
00007016 6100 0000                  		bsr.w	sub_6C20
0000701A 78F0                       		moveq	#-$10,d4
0000701C 7AF0                       		moveq	#-$10,d5
0000701E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007022 322B 0004                  		move.w	4(a3),d1
00007026 0241 FFF0                  		andi.w	#-$10,d1
0000702A 9C41                       		sub.w	d1,d6
0000702C 6D00                       		blt.s	loc_69BE
0000702E E84E                       		lsr.w	#4,d6
00007030 0C46 000F                  		cmpi.w	#$F,d6
00007034 6500                       		bcs.s	loc_69BA
00007036 7C0F                       		moveq	#$F,d6
00007038                            
00007038                            loc_69BA:
00007038 6100 0000                  		bsr.w	sub_6B06
0000703C                            
0000703C                            loc_69BE:
0000703C 0892 0003                  		bclr	#3,(a2)
00007040 6700                       		beq.s	locret_69F2
00007042 78F0                       		moveq	#-$10,d4
00007044 3A3C 0140                  		move.w	#$140,d5
00007048 6100 0000                  		bsr.w	sub_6C20
0000704C 78F0                       		moveq	#-$10,d4
0000704E 3A3C 0140                  		move.w	#$140,d5
00007052 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007056 322B 0004                  		move.w	4(a3),d1
0000705A 0241 FFF0                  		andi.w	#-$10,d1
0000705E 9C41                       		sub.w	d1,d6
00007060 6D00                       		blt.s	locret_69F2
00007062 E84E                       		lsr.w	#4,d6
00007064 0C46 000F                  		cmpi.w	#$F,d6
00007068 6500                       		bcs.s	loc_69EE
0000706A 7C0F                       		moveq	#$F,d6
0000706C                            
0000706C                            loc_69EE:
0000706C 6100 0000                  		bsr.w	sub_6B06
00007070                            
00007070                            locret_69F2:
00007070 4E75                       		rts	
00007072                            ; End of function sub_6954
00007072                            
00007072                            
00007072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007072                            
00007072                            
00007072                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007072 4A12                       		tst.b	(a2)
00007074 6700 0000                  		beq.w	locret_6A80
00007078 0892 0002                  		bclr	#2,(a2)
0000707C 6700                       		beq.s	loc_6A3E
0000707E 0C53 0010                  		cmpi.w	#$10,(a3)
00007082 6500                       		bcs.s	loc_6A3E
00007084 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007088 322B 0004                  		move.w	4(a3),d1
0000708C 0241 FFF0                  		andi.w	#-$10,d1
00007090 9841                       		sub.w	d1,d4
00007092 3F04                       		move.w	d4,-(sp)
00007094 7AF0                       		moveq	#-$10,d5
00007096 6100 0000                  		bsr.w	sub_6C20
0000709A 381F                       		move.w	(sp)+,d4
0000709C 7AF0                       		moveq	#-$10,d5
0000709E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000070A2 322B 0004                  		move.w	4(a3),d1
000070A6 0241 FFF0                  		andi.w	#-$10,d1
000070AA 9C41                       		sub.w	d1,d6
000070AC 6D00                       		blt.s	loc_6A3E
000070AE E84E                       		lsr.w	#4,d6
000070B0 0446 000E                  		subi.w	#$E,d6
000070B4 6400                       		bcc.s	loc_6A3E
000070B6 4446                       		neg.w	d6
000070B8 6100 0000                  		bsr.w	sub_6B06
000070BC                            
000070BC                            loc_6A3E:
000070BC 0892 0003                  		bclr	#3,(a2)
000070C0 6700                       		beq.s	locret_6A80
000070C2 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000070C6 322B 0004                  		move.w	4(a3),d1
000070CA 0241 FFF0                  		andi.w	#-$10,d1
000070CE 9841                       		sub.w	d1,d4
000070D0 3F04                       		move.w	d4,-(sp)
000070D2 3A3C 0140                  		move.w	#$140,d5
000070D6 6100 0000                  		bsr.w	sub_6C20
000070DA 381F                       		move.w	(sp)+,d4
000070DC 3A3C 0140                  		move.w	#$140,d5
000070E0 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000070E4 322B 0004                  		move.w	4(a3),d1
000070E8 0241 FFF0                  		andi.w	#-$10,d1
000070EC 9C41                       		sub.w	d1,d6
000070EE 6D00                       		blt.s	locret_6A80
000070F0 E84E                       		lsr.w	#4,d6
000070F2 0446 000E                  		subi.w	#$E,d6
000070F6 6400                       		bcc.s	locret_6A80
000070F8 4446                       		neg.w	d6
000070FA 6100 0000                  		bsr.w	sub_6B06
000070FE                            
000070FE                            locret_6A80:
000070FE 4E75                       		rts	
00007100                            ; End of function sub_69F4
00007100                            
00007100                            ; ===========================================================================
00007100 4A12                       		tst.b	(a2)
00007102 6700                       		beq.s	locret_6AD6
00007104 0892 0002                  		bclr	#2,(a2)
00007108 6700                       		beq.s	loc_6AAC
0000710A 383C 00D0                  		move.w	#$D0,d4
0000710E 322B 0004                  		move.w	4(a3),d1
00007112 0241 FFF0                  		andi.w	#-$10,d1
00007116 9841                       		sub.w	d1,d4
00007118 3F04                       		move.w	d4,-(sp)
0000711A 7AF0                       		moveq	#-$10,d5
0000711C 6100 0000                  		bsr.w	sub_6C3C
00007120 381F                       		move.w	(sp)+,d4
00007122 7AF0                       		moveq	#-$10,d5
00007124 7C02                       		moveq	#2,d6
00007126 6100 0000                  		bsr.w	sub_6B06
0000712A                            
0000712A                            loc_6AAC:
0000712A 0892 0003                  		bclr	#3,(a2)
0000712E 6700                       		beq.s	locret_6AD6
00007130 383C 00D0                  		move.w	#$D0,d4
00007134 322B 0004                  		move.w	4(a3),d1
00007138 0241 FFF0                  		andi.w	#-$10,d1
0000713C 9841                       		sub.w	d1,d4
0000713E 3F04                       		move.w	d4,-(sp)
00007140 3A3C 0140                  		move.w	#$140,d5
00007144 6100 0000                  		bsr.w	sub_6C3C
00007148 381F                       		move.w	(sp)+,d4
0000714A 3A3C 0140                  		move.w	#$140,d5
0000714E 7C02                       		moveq	#2,d6
00007150 6100 0000                  		bsr.w	sub_6B06
00007154                            
00007154                            locret_6AD6:
00007154 4E75                       		rts	
00007156                            
00007156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007156                            
00007156                            
00007156                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007156 7C15                       		moveq	#$15,d6
00007158                            ; End of function sub_6AD8
00007158                            
00007158                            
00007158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007158                            
00007158                            
00007158                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007158 2E3C 0080 0000             		move.l	#$800000,d7
0000715E 2200                       		move.l	d0,d1
00007160                            
00007160                            loc_6AE2:
00007160 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007164 6100 0000                  		bsr.w	sub_6BD6
00007168 2001                       		move.l	d1,d0
0000716A 6100 0000                  		bsr.w	sub_6B32
0000716E 5801                       		addq.b	#4,d1
00007170 0201 007F                  		andi.b	#$7F,d1
00007174 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007178 0645 0010                  		addi.w	#$10,d5
0000717C 51CE FFE2                  		dbf	d6,loc_6AE2
00007180 4E75                       		rts	
00007182                            ; End of function sub_6ADA
00007182                            
00007182                            
00007182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007182                            
00007182                            
00007182                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007182 7C0F                       		moveq	#$F,d6
00007184                            ; End of function sub_6B04
00007184                            
00007184                            
00007184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007184                            
00007184                            
00007184                            sub_6B06:				; XREF: sub_6954
00007184 2E3C 0080 0000             		move.l	#$800000,d7
0000718A 2200                       		move.l	d0,d1
0000718C                            
0000718C                            loc_6B0E:
0000718C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007190 6100 0000                  		bsr.w	sub_6BD6
00007194 2001                       		move.l	d1,d0
00007196 6100 0000                  		bsr.w	sub_6B32
0000719A 0641 0100                  		addi.w	#$100,d1
0000719E 0241 0FFF                  		andi.w	#$FFF,d1
000071A2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000071A6 0644 0010                  		addi.w	#$10,d4
000071AA 51CE FFE0                  		dbf	d6,loc_6B0E
000071AE 4E75                       		rts	
000071B0                            ; End of function sub_6B06
000071B0                            
000071B0                            
000071B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071B0                            
000071B0                            
000071B0                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000071B0 8042                       		or.w	d2,d0
000071B2 4840                       		swap	d0
000071B4 0810 0004                  		btst	#4,(a0)
000071B8 6600                       		bne.s	loc_6B6E
000071BA 0810 0003                  		btst	#3,(a0)
000071BE 6600                       		bne.s	loc_6B4E
000071C0 2A80                       		move.l	d0,(a5)
000071C2 2C99                       		move.l	(a1)+,(a6)
000071C4 D087                       		add.l	d7,d0
000071C6 2A80                       		move.l	d0,(a5)
000071C8 2C99                       		move.l	(a1)+,(a6)
000071CA 4E75                       		rts	
000071CC                            ; ===========================================================================
000071CC                            
000071CC                            loc_6B4E:
000071CC 2A80                       		move.l	d0,(a5)
000071CE 2819                       		move.l	(a1)+,d4
000071D0 0A84 0800 0800             		eori.l	#$8000800,d4
000071D6 4844                       		swap	d4
000071D8 2C84                       		move.l	d4,(a6)
000071DA D087                       		add.l	d7,d0
000071DC 2A80                       		move.l	d0,(a5)
000071DE 2819                       		move.l	(a1)+,d4
000071E0 0A84 0800 0800             		eori.l	#$8000800,d4
000071E6 4844                       		swap	d4
000071E8 2C84                       		move.l	d4,(a6)
000071EA 4E75                       		rts	
000071EC                            ; ===========================================================================
000071EC                            
000071EC                            loc_6B6E:
000071EC 0810 0003                  		btst	#3,(a0)
000071F0 6600                       		bne.s	loc_6B90
000071F2 2A80                       		move.l	d0,(a5)
000071F4 2A19                       		move.l	(a1)+,d5
000071F6 2819                       		move.l	(a1)+,d4
000071F8 0A84 1000 1000             		eori.l	#$10001000,d4
000071FE 2C84                       		move.l	d4,(a6)
00007200 D087                       		add.l	d7,d0
00007202 2A80                       		move.l	d0,(a5)
00007204 0A85 1000 1000             		eori.l	#$10001000,d5
0000720A 2C85                       		move.l	d5,(a6)
0000720C 4E75                       		rts	
0000720E                            ; ===========================================================================
0000720E                            
0000720E                            loc_6B90:
0000720E 2A80                       		move.l	d0,(a5)
00007210 2A19                       		move.l	(a1)+,d5
00007212 2819                       		move.l	(a1)+,d4
00007214 0A84 1800 1800             		eori.l	#$18001800,d4
0000721A 4844                       		swap	d4
0000721C 2C84                       		move.l	d4,(a6)
0000721E D087                       		add.l	d7,d0
00007220 2A80                       		move.l	d0,(a5)
00007222 0A85 1800 1800             		eori.l	#$18001800,d5
00007228 4845                       		swap	d5
0000722A 2C85                       		move.l	d5,(a6)
0000722C 4E75                       		rts	
0000722E                            ; End of function sub_6B32
0000722E                            
0000722E                            ; ===========================================================================
0000722E 4E75                       		rts	
00007230                            ; ===========================================================================
00007230 2A80                       		move.l	d0,(a5)
00007232 3A3C 2000                  		move.w	#$2000,d5
00007236 3819                       		move.w	(a1)+,d4
00007238 D845                       		add.w	d5,d4
0000723A 3C84                       		move.w	d4,(a6)
0000723C 3819                       		move.w	(a1)+,d4
0000723E D845                       		add.w	d5,d4
00007240 3C84                       		move.w	d4,(a6)
00007242 D087                       		add.l	d7,d0
00007244 2A80                       		move.l	d0,(a5)
00007246 3819                       		move.w	(a1)+,d4
00007248 D845                       		add.w	d5,d4
0000724A 3C84                       		move.w	d4,(a6)
0000724C 3819                       		move.w	(a1)+,d4
0000724E D845                       		add.w	d5,d4
00007250 3C84                       		move.w	d4,(a6)
00007252 4E75                       		rts	
00007254                            
00007254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007254                            
00007254                            
00007254                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007254 43F8 B000                  		lea	($FFFFB000).w,a1
00007258 D86B 0004                  		add.w	4(a3),d4
0000725C DA53                       		add.w	(a3),d5
0000725E 3604                       		move.w	d4,d3
00007260 E24B                       		lsr.w	#1,d3
00007262 0243 0380                  		andi.w	#$380,d3
00007266 E64D                       		lsr.w	#3,d5
00007268 3005                       		move.w	d5,d0
0000726A EA48                       		lsr.w	#5,d0
0000726C 0240 007F                  		andi.w	#$7F,d0
00007270 D043                       		add.w	d3,d0
00007272 76FF                       		moveq	#-1,d3
00007274 1634 0000                  		move.b	(a4,d0.w),d3
00007278 6700                       		beq.s	locret_6C1E
0000727A 5303                       		subq.b	#1,d3
0000727C 0243 007F                  		andi.w	#$7F,d3
00007280 EE5B                       		ror.w	#7,d3
00007282 D844                       		add.w	d4,d4
00007284 0244 01E0                  		andi.w	#$1E0,d4
00007288 0245 001E                  		andi.w	#$1E,d5
0000728C D644                       		add.w	d4,d3
0000728E D645                       		add.w	d5,d3
00007290 2043                       		movea.l	d3,a0
00007292 3610                       		move.w	(a0),d3
00007294 0243 03FF                  		andi.w	#$3FF,d3
00007298 E74B                       		lsl.w	#3,d3
0000729A D2C3                       		adda.w	d3,a1
0000729C                            
0000729C                            locret_6C1E:
0000729C 4E75                       		rts	
0000729E                            ; End of function sub_6BD6
0000729E                            
0000729E                            
0000729E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000729E                            
0000729E                            
0000729E                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000729E D86B 0004                  		add.w	4(a3),d4
000072A2 DA53                       		add.w	(a3),d5
000072A4 0244 00F0                  		andi.w	#$F0,d4
000072A8 0245 01F0                  		andi.w	#$1F0,d5
000072AC E94C                       		lsl.w	#4,d4
000072AE E44D                       		lsr.w	#2,d5
000072B0 D845                       		add.w	d5,d4
000072B2 7003                       		moveq	#3,d0
000072B4 4840                       		swap	d0
000072B6 3004                       		move.w	d4,d0
000072B8 4E75                       		rts	
000072BA                            ; End of function sub_6C20
000072BA                            
000072BA                            
000072BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072BA                            ; not used
000072BA                            
000072BA                            
000072BA                            sub_6C3C:
000072BA D86B 0004                  		add.w	4(a3),d4
000072BE DA53                       		add.w	(a3),d5
000072C0 0244 00F0                  		andi.w	#$F0,d4
000072C4 0245 01F0                  		andi.w	#$1F0,d5
000072C8 E94C                       		lsl.w	#4,d4
000072CA E44D                       		lsr.w	#2,d5
000072CC D845                       		add.w	d5,d4
000072CE 7002                       		moveq	#2,d0
000072D0 4840                       		swap	d0
000072D2 3004                       		move.w	d4,d0
000072D4 4E75                       		rts	
000072D6                            ; End of function sub_6C3C
000072D6                            
000072D6                            ; ---------------------------------------------------------------------------
000072D6                            ; Subroutine to	load tiles as soon as the level	appears
000072D6                            ; ---------------------------------------------------------------------------
000072D6                            
000072D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D6                            
000072D6                            
000072D6                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000072D6 4BF9 00C0 0004             		lea	($C00004).l,a5
000072DC 4DF9 00C0 0000             		lea	($C00000).l,a6
000072E2 47F8 F700                  		lea	($FFFFF700).w,a3
000072E6 49F8 A400                  		lea	($FFFFA400).w,a4
000072EA 343C 4000                  		move.w	#$4000,d2
000072EE 6100                       		bsr.s	LoadTilesFromStart2
000072F0 47F8 F708                  		lea	($FFFFF708).w,a3
000072F4 49F8 A440                  		lea	($FFFFA440).w,a4
000072F8 343C 6000                  		move.w	#$6000,d2
000072FC                            ; End of function LoadTilesFromStart
000072FC                            
000072FC                            
000072FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072FC                            
000072FC                            
000072FC                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000072FC 78F0                       		moveq	#-$10,d4
000072FE 7C0F                       		moveq	#$F,d6
00007300                            
00007300                            loc_6C82:
00007300 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007304 7A00                       		moveq	#0,d5
00007306 3204                       		move.w	d4,d1
00007308 6100 FF94                  		bsr.w	sub_6C20
0000730C 3801                       		move.w	d1,d4
0000730E 7A00                       		moveq	#0,d5
00007310 7C1F                       		moveq	#$1F,d6
00007312 6100 FE44                  		bsr.w	sub_6ADA
00007316 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000731A 0644 0010                  		addi.w	#$10,d4
0000731E 51CE FFE0                  		dbf	d6,loc_6C82
00007322 4E75                       		rts	
00007324                            ; End of function LoadTilesFromStart2
00007324                            
00007324                            ; ---------------------------------------------------------------------------
00007324                            ; Main Load Block loading subroutine
00007324                            ; ---------------------------------------------------------------------------
00007324                            
00007324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007324                            
00007324                            
00007324                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007324 7000                       		moveq	#0,d0
00007326 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000732A E948                       		lsl.w	#4,d0
0000732C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007332 45F2 0000                  		lea	(a2,d0.w),a2
00007336 2F0A                       		move.l	a2,-(sp)
00007338 588A                       		addq.l	#4,a2
0000733A 205A                       		movea.l	(a2)+,a0
0000733C 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007340 303C 0000                  		move.w	#0,d0
00007344 6100 A60E                  		bsr.w	EniDec
00007348 205A                       		movea.l	(a2)+,a0
0000734A 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007350 6100 A780                  		bsr.w	KosDec
00007354 6100 0000                  		bsr.w	LevelLayoutLoad
00007358 301A                       		move.w	(a2)+,d0
0000735A 3012                       		move.w	(a2),d0
0000735C 0240 00FF                  		andi.w	#$FF,d0
00007360 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007366 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007368 700C                       		moveq	#$C,d0		; use SB3 pallet
0000736A                            
0000736A                            MLB_ChkSBZPal:
0000736A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007370 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007372 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007378 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000737A                            
0000737A                            MLB_UsePal0E:
0000737A 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000737C                            
0000737C                            MLB_NormalPal:
0000737C 6100 AFB2                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007380 245F                       		movea.l	(sp)+,a2
00007382 584A                       		addq.w	#4,a2
00007384 7000                       		moveq	#0,d0
00007386 1012                       		move.b	(a2),d0
00007388 6700                       		beq.s	locret_6D10
0000738A 6100 A42A                  		bsr.w	LoadPLC		; load pattern load cues
0000738E                            
0000738E                            locret_6D10:
0000738E 4E75                       		rts	
00007390                            ; End of function MainLoadBlockLoad
00007390                            
00007390                            ; ---------------------------------------------------------------------------
00007390                            ; Level	layout loading subroutine
00007390                            ; ---------------------------------------------------------------------------
00007390                            
00007390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007390                            
00007390                            
00007390                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007390 47F8 A400                  		lea	($FFFFA400).w,a3
00007394 323C 01FF                  		move.w	#$1FF,d1
00007398 7000                       		moveq	#0,d0
0000739A                            
0000739A                            LevLoad_ClrRam:
0000739A 26C0                       		move.l	d0,(a3)+
0000739C 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000073A0                            
000073A0 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000073A4 7200                       		moveq	#0,d1
000073A6 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000073AA 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000073AE 7202                       		moveq	#2,d1
000073B0                            ; End of function LevelLayoutLoad
000073B0                            
000073B0                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000073B0                            
000073B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073B0                            
000073B0                            
000073B0                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000073B0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000073B4 ED08                       		lsl.b	#6,d0
000073B6 EA48                       		lsr.w	#5,d0
000073B8 3400                       		move.w	d0,d2
000073BA D040                       		add.w	d0,d0
000073BC D042                       		add.w	d2,d0
000073BE D041                       		add.w	d1,d0
000073C0 43F9 0000 0000             		lea	(Level_Index).l,a1
000073C6 3031 0000                  		move.w	(a1,d0.w),d0
000073CA 43F1 0000                  		lea	(a1,d0.w),a1
000073CE 7200                       		moveq	#0,d1
000073D0 3401                       		move.w	d1,d2
000073D2 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000073D4 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000073D6                            
000073D6                            LevLoad_NumRows:
000073D6 3001                       		move.w	d1,d0
000073D8 204B                       		movea.l	a3,a0
000073DA                            
000073DA                            LevLoad_Row:
000073DA 10D9                       		move.b	(a1)+,(a0)+
000073DC 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000073E0 47EB 0080                  		lea	$80(a3),a3	; do next row
000073E4 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000073E8 4E75                       		rts	
000073EA                            ; End of function LevelLayoutLoad2
000073EA                            
000073EA                            ; ---------------------------------------------------------------------------
000073EA                            ; Dynamic screen resize	loading	subroutine
000073EA                            ; ---------------------------------------------------------------------------
000073EA                            
000073EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073EA                            
000073EA                            
000073EA                            DynScrResizeLoad:			; XREF: DeformBgLayer
000073EA 7000                       		moveq	#0,d0
000073EC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000073F0 D040                       		add.w	d0,d0
000073F2 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000073F6 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000073FA 7202                       		moveq	#2,d1
000073FC 3038 F726                  		move.w	($FFFFF726).w,d0
00007400 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007404 6700                       		beq.s	locret_6DAA
00007406 6400                       		bcc.s	loc_6DAC
00007408 4441                       		neg.w	d1
0000740A 3038 F704                  		move.w	($FFFFF704).w,d0
0000740E B078 F726                  		cmp.w	($FFFFF726).w,d0
00007412 6300                       		bls.s	loc_6DA0
00007414 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007418 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000741E                            
0000741E                            loc_6DA0:
0000741E D378 F72E                  		add.w	d1,($FFFFF72E).w
00007422 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007428                            
00007428                            locret_6DAA:
00007428 4E75                       		rts	
0000742A                            ; ===========================================================================
0000742A                            
0000742A                            loc_6DAC:				; XREF: DynScrResizeLoad
0000742A 3038 F704                  		move.w	($FFFFF704).w,d0
0000742E 5040                       		addq.w	#8,d0
00007430 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007434 6500                       		bcs.s	loc_6DC4
00007436 0838 0001 D022             		btst	#1,($FFFFD022).w
0000743C 6700                       		beq.s	loc_6DC4
0000743E D241                       		add.w	d1,d1
00007440 D241                       		add.w	d1,d1
00007442                            
00007442                            loc_6DC4:
00007442 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007446 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000744C 4E75                       		rts	
0000744E                            ; End of function DynScrResizeLoad
0000744E                            
0000744E                            ; ===========================================================================
0000744E                            ; ---------------------------------------------------------------------------
0000744E                            ; Offset index for dynamic screen resizing
0000744E                            ; ---------------------------------------------------------------------------
0000744E 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007452 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007456 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000745A 0000                       		dc.w Resize_Ending-Resize_Index
0000745C                            ; ===========================================================================
0000745C                            ; ---------------------------------------------------------------------------
0000745C                            ; Green	Hill Zone dynamic screen resizing
0000745C                            ; ---------------------------------------------------------------------------
0000745C                            
0000745C                            Resize_GHZ:				; XREF: Resize_Index
0000745C 7000                       		moveq	#0,d0
0000745E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007462 D040                       		add.w	d0,d0
00007464 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007468 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000746C                            ; ===========================================================================
0000746C 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000746E 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007470 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007472                            ; ===========================================================================
00007472                            
00007472                            Resize_GHZ1:
00007472 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007478 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000747E 6500                       		bcs.s	locret_6E08	; if not, branch
00007480 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007486                            
00007486                            locret_6E08:
00007486 4E75                       		rts	
00007488                            ; ===========================================================================
00007488                            
00007488                            Resize_GHZ2:
00007488 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000748E 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007494 6500                       		bcs.s	locret_6E3A
00007496 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000749C 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000074A2 6500                       		bcs.s	locret_6E3A
000074A4 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000074AA 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
000074B0 6500                       		bcs.s	locret_6E3A
000074B2 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
000074B8 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
000074BE 6500                       		bcs.s	locret_6E3A
000074C0 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
000074C6                            		
000074C6                            locret_6E3A:
000074C6 4E75                       		rts	
000074C8                            ; ===========================================================================
000074C8                            
000074C8                            Resize_GHZ3:
000074C8 7000                       		moveq	#0,d0
000074CA 1038 F742                  		move.b	($FFFFF742).w,d0
000074CE 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000074D2 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000074D6                            ; ===========================================================================
000074D6 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000074D8 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000074DA 0000                       		dc.w Resize_GHZ3end-off_6E4A
000074DC                            ; ===========================================================================
000074DC                            
000074DC                            Resize_GHZ3main:
000074DC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000074E2 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000074E8 6500                       		bcs.s	locret_6E96
000074EA 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000074F0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000074F6 6500                       		bcs.s	locret_6E96
000074F8 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000074FE 6500                       		bcs.s	loc_6E98
00007500 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007506 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000750C 6400                       		bcc.s	loc_6E8E
0000750E 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007514 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000751A                            
0000751A                            loc_6E8E:
0000751A 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007520 6400                       		bcc.s	loc_6E98
00007522                            
00007522                            locret_6E96:
00007522 4E75                       		rts	
00007524                            ; ===========================================================================
00007524                            
00007524                            loc_6E98:
00007524 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000752A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000752E 4E75                       		rts	
00007530                            ; ===========================================================================
00007530                            
00007530                            Resize_GHZ3boss:
00007530 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007536 6400                       		bcc.s	loc_6EB0
00007538 5538 F742                  		subq.b	#2,($FFFFF742).w
0000753C                            
0000753C                            loc_6EB0:
0000753C 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007542 6500                       		bcs.s	locret_6EE8
00007544 6100 0000                  		bsr.w	SingleObjLoad
00007548 6600                       		bne.s	loc_6ED0
0000754A 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000754E 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007554 337C 0280 000C             		move.w	#$280,$C(a1)
0000755A                            
0000755A                            loc_6ED0:
0000755A 303C 008C                  		move.w	#$8C,d0
0000755E 6100 A06C                  		bsr.w	PlaySound	; play boss music
00007562 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007568 5438 F742                  		addq.b	#2,($FFFFF742).w
0000756C 7011                       		moveq	#$11,d0
0000756E 6000 A246                  		bra.w	LoadPLC		; load boss patterns
00007572                            ; ===========================================================================
00007572                            
00007572                            locret_6EE8:
00007572 4E75                       		rts	
00007574                            ; ===========================================================================
00007574                            
00007574                            Resize_GHZ3end:
00007574 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000757A 4E75                       		rts	
0000757C                            ; ===========================================================================
0000757C                            ; ---------------------------------------------------------------------------
0000757C                            ; Labyrinth Zone dynamic screen	resizing
0000757C                            ; ---------------------------------------------------------------------------
0000757C                            
0000757C                            Resize_LZ:				; XREF: Resize_Index
0000757C 7000                       		moveq	#0,d0
0000757E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007582 D040                       		add.w	d0,d0
00007584 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007588 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000758C                            ; ===========================================================================
0000758C 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000758E 0000                       		dc.w Resize_LZ12-Resize_LZx
00007590 0000                       		dc.w Resize_LZ3-Resize_LZx
00007592 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007594                            ; ===========================================================================
00007594                            
00007594                            Resize_LZ12:
00007594 4E75                       		rts	
00007596                            ; ===========================================================================
00007596                            
00007596                            Resize_LZ3:
00007596 7000                       		moveq	#0,d0
00007598 1038 F742                  		move.b	($FFFFF742).w,d0
0000759C 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
000075A0 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
000075A4                            ; ===========================================================================
000075A4                            off_6E4A2:	
000075A4 0000                       		dc.w Resize_LZ3boss-off_6E4A2
000075A6 0000                       		dc.w Resize_LZ3end-off_6E4A2
000075A8                            ; ===========================================================================
000075A8                            Resize_LZ3boss:
000075A8 4A38 F742                  		tst.b	($FFFFF742).w
000075AC 6600                       		bne.s	locret_6F62
000075AE 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000075B4 6500                       		bcs.s	locret_6F62
000075B6 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
000075BC 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000075C2                            
000075C2 6100 0000                  		bsr.w	SingleObjLoad
000075C6 6600                       		bne.s	loc_6F4A
000075C8 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000075CC 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
000075D2 337C 06E0 000C             		move.w	#$6E0,$C(a1)
000075D8                            loc_6F4A:
000075D8 303C 008C                  		move.w	#$8C,d0
000075DC 6100 9FEE                  		bsr.w	PlaySound	; play boss music
000075E0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075E6 5438 F742                  		addq.b	#2,($FFFFF742).w
000075EA 7020                       		moveq	#$20,d0
000075EC 6000 A1C8                  		bra.w	LoadPLC		; load boss patterns
000075F0                            ; ===========================================================================
000075F0                            
000075F0                            locret_6F62:
000075F0 4E75                       		rts	
000075F2                            ; ===========================================================================
000075F2                            
000075F2                            Resize_LZ3end:
000075F2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075F8 4E75                       		rts	
000075FA                            ; ===========================================================================
000075FA                            
000075FA                            Resize_SBZ3:
000075FA 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007600 6500                       		bcs.s	locret_6F8C
00007602 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007608 6400                       		bcc.s	locret_6F8C	; if not, branch
0000760A 4238 FE30                  		clr.b	($FFFFFE30).w
0000760E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007614 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000761A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007620                            
00007620                            locret_6F8C:
00007620 4E75                       		rts	
00007622                            ; ===========================================================================
00007622                            ; ---------------------------------------------------------------------------
00007622                            ; Marble Zone dynamic screen resizing
00007622                            ; ---------------------------------------------------------------------------
00007622                            
00007622                            Resize_MZ:				; XREF: Resize_Index
00007622 7000                       		moveq	#0,d0
00007624 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007628 D040                       		add.w	d0,d0
0000762A 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
0000762E 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007632                            ; ===========================================================================
00007632 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007634 0000                       		dc.w Resize_MZ2-Resize_MZx
00007636 0000                       		dc.w Resize_MZ3-Resize_MZx
00007638                            ; ===========================================================================
00007638                            
00007638                            Resize_MZ1:
00007638 7000                       		moveq	#0,d0
0000763A 1038 F742                  		move.b	($FFFFF742).w,d0
0000763E 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007642 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007646                            ; ===========================================================================
00007646 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007648 0000                       		dc.w loc_6FEA-off_6FB2
0000764A 0000                       		dc.w loc_702E-off_6FB2
0000764C 0000                       		dc.w loc_7050-off_6FB2
0000764E                            ; ===========================================================================
0000764E                            
0000764E                            loc_6FBA:
0000764E 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007654 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000765A 6500                       		bcs.s	locret_6FE8
0000765C 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007662 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007668 6500                       		bcs.s	locret_6FE8
0000766A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007670 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007676 6500                       		bcs.s	locret_6FE8
00007678 5438 F742                  		addq.b	#2,($FFFFF742).w
0000767C                            
0000767C                            locret_6FE8:
0000767C 4E75                       		rts	
0000767E                            ; ===========================================================================
0000767E                            
0000767E                            loc_6FEA:
0000767E 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007684 6400                       		bcc.s	loc_6FF8
00007686 5538 F742                  		subq.b	#2,($FFFFF742).w
0000768A 4E75                       		rts	
0000768C                            ; ===========================================================================
0000768C                            
0000768C                            loc_6FF8:
0000768C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007692 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007698 6400                       		bcc.s	locret_702C
0000769A 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000076A0 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000076A6 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000076AC 6400                       		bcc.s	locret_702C
000076AE 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000076B4 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000076BA 6500                       		bcs.s	locret_702C
000076BC 5438 F742                  		addq.b	#2,($FFFFF742).w
000076C0                            
000076C0                            locret_702C:
000076C0 4E75                       		rts	
000076C2                            ; ===========================================================================
000076C2                            
000076C2                            loc_702E:
000076C2 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000076C8 6400                       		bcc.s	loc_703C
000076CA 5538 F742                  		subq.b	#2,($FFFFF742).w
000076CE 4E75                       		rts	
000076D0                            ; ===========================================================================
000076D0                            
000076D0                            loc_703C:
000076D0 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
000076D6 6500                       		bcs.s	locret_704E
000076D8 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000076DE 5438 F742                  		addq.b	#2,($FFFFF742).w
000076E2                            
000076E2                            locret_704E:
000076E2 4E75                       		rts	
000076E4                            ; ===========================================================================
000076E4                            
000076E4                            loc_7050:
000076E4 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000076EA 6500                       		bcs.s	locret_7072
000076EC 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000076F2 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000076F8 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000076FE 6500                       		bcs.s	locret_7072
00007700 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007706                            
00007706                            locret_7072:
00007706 4E75                       		rts	
00007708                            ; ===========================================================================
00007708                            
00007708                            Resize_MZ2:
00007708 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000770E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007714 6500                       		bcs.s	locret_7088
00007716 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000771C                            
0000771C                            locret_7088:
0000771C 4E75                       		rts	
0000771E                            ; ===========================================================================
0000771E                            
0000771E                            Resize_MZ3:
0000771E 7000                       		moveq	#0,d0
00007720 1038 F742                  		move.b	($FFFFF742).w,d0
00007724 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007728 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000772C                            ; ===========================================================================
0000772C 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
0000772E 0000                       		dc.w Resize_MZ3end-off_7098
00007730                            ; ===========================================================================
00007730                            
00007730                            Resize_MZ3boss:
00007730 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007736 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
0000773C 6500                       		bcs.s	locret_70E8
0000773E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007744 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000774A 6500                       		bcs.s	locret_70E8
0000774C 6100 0000                  		bsr.w	SingleObjLoad
00007750 6600                       		bne.s	loc_70D0
00007752 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007756 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000775C 337C 022C 000C             		move.w	#$22C,$C(a1)
00007762                            
00007762                            loc_70D0:
00007762 303C 008C                  		move.w	#$8C,d0
00007766 6100 9E64                  		bsr.w	PlaySound	; play boss music
0000776A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007770 5438 F742                  		addq.b	#2,($FFFFF742).w
00007774 7011                       		moveq	#$11,d0
00007776 6000 A03E                  		bra.w	LoadPLC		; load boss patterns
0000777A                            ; ===========================================================================
0000777A                            
0000777A                            locret_70E8:
0000777A 4E75                       		rts	
0000777C                            ; ===========================================================================
0000777C                            
0000777C                            Resize_MZ3end:
0000777C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007782 4E75                       		rts	
00007784                            ; ===========================================================================
00007784                            ; ---------------------------------------------------------------------------
00007784                            ; Star Light Zone dynamic screen resizing
00007784                            ; ---------------------------------------------------------------------------
00007784                            
00007784                            Resize_SLZ:				; XREF: Resize_Index
00007784 7000                       		moveq	#0,d0
00007786 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000778A D040                       		add.w	d0,d0
0000778C 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007790 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007794                            ; ===========================================================================
00007794 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007796 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007798 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000779A                            ; ===========================================================================
0000779A                            
0000779A                            Resize_SLZ1:
0000779A 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000077A0 4E75                       		rts	
000077A2                            
000077A2                            Resize_SLZ2:
000077A2 4E75                       		rts	
000077A4                            ; ===========================================================================
000077A4                            
000077A4                            Resize_SLZ3:
000077A4 7000                       		moveq	#0,d0
000077A6 1038 F742                  		move.b	($FFFFF742).w,d0
000077AA 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000077AE 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000077B2                            ; ===========================================================================
000077B2 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000077B4 0000                       		dc.w Resize_SLZ3boss-off_7118
000077B6 0000                       		dc.w Resize_SLZ3end-off_7118
000077B8                            ; ===========================================================================
000077B8                            
000077B8                            Resize_SLZ3main:
000077B8 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000077BE 6500                       		bcs.s	locret_7130
000077C0 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000077C6 5438 F742                  		addq.b	#2,($FFFFF742).w
000077CA                            
000077CA                            locret_7130:
000077CA 4E75                       		rts	
000077CC                            ; ===========================================================================
000077CC                            
000077CC                            Resize_SLZ3boss:
000077CC 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000077D2 6500                       		bcs.s	locret_715C
000077D4 6100 0000                  		bsr.w	SingleObjLoad
000077D8 6600                       		bne.s	loc_7144
000077DA 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000077DE                            
000077DE                            loc_7144:
000077DE 303C 008C                  		move.w	#$8C,d0
000077E2 6100 9DE8                  		bsr.w	PlaySound	; play boss music
000077E6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000077EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000077F0 7011                       		moveq	#$11,d0
000077F2 6000 9FC2                  		bra.w	LoadPLC		; load boss patterns
000077F6                            ; ===========================================================================
000077F6                            
000077F6                            locret_715C:
000077F6 4E75                       		rts	
000077F8                            ; ===========================================================================
000077F8                            
000077F8                            Resize_SLZ3end:
000077F8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077FE 4E75                       		rts
00007800 4E75                       		rts
00007802                            ; ===========================================================================
00007802                            ; ---------------------------------------------------------------------------
00007802                            ; Spring Yard Zone dynamic screen resizing
00007802                            ; ---------------------------------------------------------------------------
00007802                            
00007802                            Resize_SYZ:				; XREF: Resize_Index
00007802 7000                       		moveq	#0,d0
00007804 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007808 D040                       		add.w	d0,d0
0000780A 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000780E 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007812                            ; ===========================================================================
00007812 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007814 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007816 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007818                            ; ===========================================================================
00007818                            
00007818                            Resize_SYZ1:
00007818 4E75                       		rts	
0000781A                            ; ===========================================================================
0000781A                            
0000781A                            Resize_SYZ2:
0000781A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007820 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007826 6500                       		bcs.s	locret_71A2
00007828 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000782E 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007834 6500                       		bcs.s	locret_71A2
00007836 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000783C                            
0000783C                            locret_71A2:
0000783C 4E75                       		rts	
0000783E                            ; ===========================================================================
0000783E                            
0000783E                            Resize_SYZ3:
0000783E 7000                       		moveq	#0,d0
00007840 1038 F742                  		move.b	($FFFFF742).w,d0
00007844 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007848 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000784C                            ; ===========================================================================
0000784C 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000784E 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007850 0000                       		dc.w Resize_SYZ3end-off_71B2
00007852                            ; ===========================================================================
00007852                            
00007852                            Resize_SYZ3main:
00007852 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007858 6500                       		bcs.s	locret_71CE
0000785A 6100 0000                  		bsr.w	SingleObjLoad
0000785E 6600                       		bne.s	locret_71CE
00007860 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007864 5438 F742                  		addq.b	#2,($FFFFF742).w
00007868                            
00007868                            locret_71CE:
00007868 4E75                       		rts	
0000786A                            ; ===========================================================================
0000786A                            
0000786A                            Resize_SYZ3boss:
0000786A 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007870 6500                       		bcs.s	locret_7200
00007872 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007878 6100 0000                  		bsr.w	SingleObjLoad
0000787C 6600                       		bne.s	loc_71EC
0000787E 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007882 5438 F742                  		addq.b	#2,($FFFFF742).w
00007886                            
00007886                            loc_71EC:
00007886 303C 008C                  		move.w	#$8C,d0
0000788A 6100 9D40                  		bsr.w	PlaySound	; play boss music
0000788E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007894 7011                       		moveq	#$11,d0
00007896 6000 9F1E                  		bra.w	LoadPLC		; load boss patterns
0000789A                            ; ===========================================================================
0000789A                            
0000789A                            locret_7200:
0000789A 4E75                       		rts	
0000789C                            ; ===========================================================================
0000789C                            
0000789C                            Resize_SYZ3end:
0000789C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078A2 4E75                       		rts	
000078A4                            ; ===========================================================================
000078A4                            ; ---------------------------------------------------------------------------
000078A4                            ; Scrap	Brain Zone dynamic screen resizing
000078A4                            ; ---------------------------------------------------------------------------
000078A4                            
000078A4                            Resize_SBZ:				; XREF: Resize_Index
000078A4 7000                       		moveq	#0,d0
000078A6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000078AA D040                       		add.w	d0,d0
000078AC 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000078B0 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000078B4                            ; ===========================================================================
000078B4 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000078B6 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000078B8 0000                       		dc.w Resize_FZ-Resize_SBZx
000078BA                            ; ===========================================================================
000078BA                            
000078BA                            Resize_SBZ1:
000078BA 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000078C0 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000078C6 6500                       		bcs.s	locret_7242
000078C8 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000078CE 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000078D4 6500                       		bcs.s	locret_7242
000078D6 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
000078DC                            
000078DC                            locret_7242:
000078DC 4E75                       		rts	
000078DE                            ; ===========================================================================
000078DE                            
000078DE                            Resize_SBZ2:
000078DE 7000                       		moveq	#0,d0
000078E0 1038 F742                  		move.b	($FFFFF742).w,d0
000078E4 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000078E8 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000078EC                            ; ===========================================================================
000078EC 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000078EE 0000                       		dc.w Resize_SBZ2boss-off_7252
000078F0 0000                       		dc.w Resize_SBZ2boss2-off_7252
000078F2 0000                       		dc.w Resize_SBZ2end-off_7252
000078F4                            ; ===========================================================================
000078F4                            
000078F4                            Resize_SBZ2main:
000078F4 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000078FA 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007900 6500                       		bcs.s	locret_727A
00007902 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007908 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000790E 6500                       		bcs.s	locret_727A
00007910 5438 F742                  		addq.b	#2,($FFFFF742).w
00007914                            
00007914                            locret_727A:
00007914 4E75                       		rts	
00007916                            ; ===========================================================================
00007916                            
00007916                            Resize_SBZ2boss:
00007916 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000791C 6500                       		bcs.s	locret_7298
0000791E 6100 0000                  		bsr.w	SingleObjLoad
00007922 6600                       		bne.s	locret_7298
00007924 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007928 5438 F742                  		addq.b	#2,($FFFFF742).w
0000792C 701E                       		moveq	#$1E,d0
0000792E 6000 9E86                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007932                            ; ===========================================================================
00007932                            
00007932                            locret_7298:
00007932 4E75                       		rts	
00007934                            ; ===========================================================================
00007934                            
00007934                            Resize_SBZ2boss2:
00007934 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
0000793A 6500                       		bcs.s	loc_72B6
0000793C 6100 0000                  		bsr.w	SingleObjLoad
00007940 6600                       		bne.s	loc_72B0
00007942 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007946 5438 F742                  		addq.b	#2,($FFFFF742).w
0000794A                            
0000794A                            loc_72B0:
0000794A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007950                            
00007950                            loc_72B6:
00007950 6000                       		bra.s	loc_72C2
00007952                            ; ===========================================================================
00007952                            
00007952                            Resize_SBZ2end:
00007952 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007958 6500                       		bcs.s	loc_72C2
0000795A 4E75                       		rts	
0000795C                            ; ===========================================================================
0000795C                            
0000795C                            loc_72C2:
0000795C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007962 4E75                       		rts	
00007964                            ; ===========================================================================
00007964                            
00007964                            Resize_FZ:
00007964 7000                       		moveq	#0,d0
00007966 1038 F742                  		move.b	($FFFFF742).w,d0
0000796A 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000796E 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007972                            ; ===========================================================================
00007972 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007976 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
0000797A 0000                       		dc.w Resize_FZend2-off_72D8
0000797C                            ; ===========================================================================
0000797C                            
0000797C                            Resize_FZmain:
0000797C 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007982 6500                       		bcs.s	loc_72F4
00007984 5438 F742                  		addq.b	#2,($FFFFF742).w
00007988 701F                       		moveq	#$1F,d0
0000798A 6100 9E2A                  		bsr.w	LoadPLC		; load FZ boss patterns
0000798E                            
0000798E                            loc_72F4:
0000798E 60CC                       		bra.s	loc_72C2
00007990                            ; ===========================================================================
00007990                            
00007990                            Resize_FZboss:
00007990 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007996 6500                       		bcs.s	loc_7312
00007998 6100 0000                  		bsr.w	SingleObjLoad
0000799C 6600                       		bne.s	loc_7312
0000799E 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000079A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000079A6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079AC                            
000079AC                            loc_7312:
000079AC 60AE                       		bra.s	loc_72C2
000079AE                            ; ===========================================================================
000079AE                            
000079AE                            Resize_FZend:
000079AE 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000079B4 6500                       		bcs.s	loc_7320
000079B6 5438 F742                  		addq.b	#2,($FFFFF742).w
000079BA                            
000079BA                            loc_7320:
000079BA 60A0                       		bra.s	loc_72C2
000079BC                            ; ===========================================================================
000079BC                            
000079BC                            locret_7322:
000079BC 4E75                       		rts	
000079BE                            ; ===========================================================================
000079BE                            
000079BE                            Resize_FZend2:
000079BE 609C                       		bra.s	loc_72C2
000079C0                            ; ===========================================================================
000079C0                            ; ---------------------------------------------------------------------------
000079C0                            ; Ending sequence dynamic screen resizing (empty)
000079C0                            ; ---------------------------------------------------------------------------
000079C0                            
000079C0                            Resize_Ending:				; XREF: Resize_Index
000079C0 4E75                       		rts	
000079C2                            ; ===========================================================================
000079C2                            ; ---------------------------------------------------------------------------
000079C2                            ; Object 11 - GHZ bridge
000079C2                            ; ---------------------------------------------------------------------------
000079C2                            
000079C2                            Obj11:					; XREF: Obj_Index
000079C2 7000                       		moveq	#0,d0
000079C4 1028 0024                  		move.b	$24(a0),d0
000079C8 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000079CC 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
000079D0                            ; ===========================================================================
000079D0 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
000079D4 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
000079D8 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
000079DC                            ; ===========================================================================
000079DC                            
000079DC                            Obj11_Main:				; XREF: Obj11_Index
000079DC 5428 0024                  		addq.b	#2,$24(a0)
000079E0 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000079E8 317C 438E 0002             		move.w	#$438E,2(a0)
000079EE 117C 0004 0001             		move.b	#4,1(a0)
000079F4 117C 0003 0018             		move.b	#3,$18(a0)
000079FA 117C 0080 0019             		move.b	#$80,$19(a0)
00007A00 3428 000C                  		move.w	$C(a0),d2
00007A04 3628 0008                  		move.w	8(a0),d3
00007A08 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007A0A 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007A0E 7200                       		moveq	#0,d1
00007A10 1212                       		move.b	(a2),d1		; copy a2 to d1
00007A12 14FC 0000                  		move.b	#0,(a2)+
00007A16 3001                       		move.w	d1,d0
00007A18 E248                       		lsr.w	#1,d0
00007A1A E948                       		lsl.w	#4,d0
00007A1C 9640                       		sub.w	d0,d3
00007A1E 5501                       		subq.b	#2,d1
00007A20 6500                       		bcs.s	Obj11_Action
00007A22                            
00007A22                            Obj11_MakeBdg:
00007A22 6100 0000                  		bsr.w	SingleObjLoad
00007A26 6600                       		bne.s	Obj11_Action
00007A28 5228 0028                  		addq.b	#1,$28(a0)
00007A2C B668 0008                  		cmp.w	8(a0),d3
00007A30 6600                       		bne.s	loc_73B8
00007A32 0643 0010                  		addi.w	#$10,d3
00007A36 3142 000C                  		move.w	d2,$C(a0)
00007A3A 3142 003C                  		move.w	d2,$3C(a0)
00007A3E 3A08                       		move.w	a0,d5
00007A40 0445 D000                  		subi.w	#-$3000,d5
00007A44 EC4D                       		lsr.w	#6,d5
00007A46 0245 007F                  		andi.w	#$7F,d5
00007A4A 14C5                       		move.b	d5,(a2)+
00007A4C 5228 0028                  		addq.b	#1,$28(a0)
00007A50                            
00007A50                            loc_73B8:				; XREF: ROM:00007398j
00007A50 3A09                       		move.w	a1,d5
00007A52 0445 D000                  		subi.w	#-$3000,d5
00007A56 EC4D                       		lsr.w	#6,d5
00007A58 0245 007F                  		andi.w	#$7F,d5
00007A5C 14C5                       		move.b	d5,(a2)+
00007A5E 137C 000A 0024             		move.b	#$A,$24(a1)
00007A64 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007A66 3342 000C                  		move.w	d2,$C(a1)
00007A6A 3342 003C                  		move.w	d2,$3C(a1)
00007A6E 3343 0008                  		move.w	d3,8(a1)
00007A72 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007A7A 337C 438E 0002             		move.w	#$438E,2(a1)
00007A80 137C 0004 0001             		move.b	#4,1(a1)
00007A86 137C 0003 0018             		move.b	#3,$18(a1)
00007A8C 137C 0008 0019             		move.b	#8,$19(a1)
00007A92 0643 0010                  		addi.w	#$10,d3
00007A96 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007A9A                            
00007A9A                            Obj11_Action:				; XREF: Obj11_Index
00007A9A 6100                       		bsr.s	Obj11_Solid
00007A9C 4A28 003E                  		tst.b	$3E(a0)
00007AA0 6700                       		beq.s	Obj11_Display
00007AA2 5928 003E                  		subq.b	#4,$3E(a0)
00007AA6 6100 0000                  		bsr.w	Obj11_Bend
00007AAA                            
00007AAA                            Obj11_Display:
00007AAA 6100 0000                  		bsr.w	DisplaySprite
00007AAE 6000 0000                  		bra.w	Obj11_ChkDel
00007AB2                            
00007AB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AB2                            
00007AB2                            
00007AB2                            Obj11_Solid:				; XREF: Obj11_Action
00007AB2 7200                       		moveq	#0,d1
00007AB4 1228 0028                  		move.b	$28(a0),d1
00007AB8 E749                       		lsl.w	#3,d1
00007ABA 3401                       		move.w	d1,d2
00007ABC 5041                       		addq.w	#8,d1
00007ABE D442                       		add.w	d2,d2
00007AC0 43F8 D000                  		lea	($FFFFD000).w,a1
00007AC4 4A69 0012                  		tst.w	$12(a1)
00007AC8 6B00 0000                  		bmi.w	locret_751E
00007ACC 3029 0008                  		move.w	8(a1),d0
00007AD0 9068 0008                  		sub.w	8(a0),d0
00007AD4 D041                       		add.w	d1,d0
00007AD6 6B00 0000                  		bmi.w	locret_751E
00007ADA B042                       		cmp.w	d2,d0
00007ADC 6400 0000                  		bcc.w	locret_751E
00007AE0 6000                       		bra.s	Platform2
00007AE2                            ; End of function Obj11_Solid
00007AE2                            
00007AE2                            ; ---------------------------------------------------------------------------
00007AE2                            ; Platform subroutine
00007AE2                            ; ---------------------------------------------------------------------------
00007AE2                            
00007AE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AE2                            
00007AE2                            
00007AE2                            PlatformObject:
00007AE2 43F8 D000                  		lea	($FFFFD000).w,a1
00007AE6 4A69 0012                  		tst.w	$12(a1)
00007AEA 6B00 0000                  		bmi.w	locret_751E
00007AEE 3029 0008                  		move.w	8(a1),d0
00007AF2 9068 0008                  		sub.w	8(a0),d0
00007AF6 D041                       		add.w	d1,d0
00007AF8 6B00 0000                  		bmi.w	locret_751E
00007AFC D241                       		add.w	d1,d1
00007AFE B041                       		cmp.w	d1,d0
00007B00 6400 0000                  		bcc.w	locret_751E
00007B04                            
00007B04                            Platform2:
00007B04 3028 000C                  		move.w	$C(a0),d0
00007B08 5140                       		subq.w	#8,d0
00007B0A                            
00007B0A                            Platform3:
00007B0A 3429 000C                  		move.w	$C(a1),d2
00007B0E 1229 0016                  		move.b	$16(a1),d1
00007B12 4881                       		ext.w	d1
00007B14 D242                       		add.w	d2,d1
00007B16 5841                       		addq.w	#4,d1
00007B18 9041                       		sub.w	d1,d0
00007B1A 6200 0000                  		bhi.w	locret_751E
00007B1E 0C40 FFF0                  		cmpi.w	#-$10,d0
00007B22 6500 0000                  		bcs.w	locret_751E
00007B26 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007B2A 6B00 0000                  		bmi.w	locret_751E
00007B2E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007B34 6400 0000                  		bcc.w	locret_751E
00007B38 D440                       		add.w	d0,d2
00007B3A 5642                       		addq.w	#3,d2
00007B3C 3342 000C                  		move.w	d2,$C(a1)
00007B40 5428 0024                  		addq.b	#2,$24(a0)
00007B44                            
00007B44                            loc_74AE:
00007B44 0829 0003 0022             		btst	#3,$22(a1)
00007B4A 6700                       		beq.s	loc_74DC
00007B4C 7000                       		moveq	#0,d0
00007B4E 1029 003D                  		move.b	$3D(a1),d0
00007B52 ED48                       		lsl.w	#6,d0
00007B54 0680 00FF D000             		addi.l	#$FFD000,d0
00007B5A 2440                       		movea.l	d0,a2
00007B5C 08AA 0003 0022             		bclr	#3,$22(a2)
00007B62 422A 0025                  		clr.b	$25(a2)
00007B66 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007B6C 6600                       		bne.s	loc_74DC
00007B6E 552A 0024                  		subq.b	#2,$24(a2)
00007B72                            
00007B72                            loc_74DC:
00007B72 3008                       		move.w	a0,d0
00007B74 0440 D000                  		subi.w	#-$3000,d0
00007B78 EC48                       		lsr.w	#6,d0
00007B7A 0240 007F                  		andi.w	#$7F,d0
00007B7E 1340 003D                  		move.b	d0,$3D(a1)
00007B82 137C 0000 0026             		move.b	#0,$26(a1)
00007B88 337C 0000 0012             		move.w	#0,$12(a1)
00007B8E 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007B94 0829 0001 0022             		btst	#1,$22(a1)
00007B9A 6700                       		beq.s	loc_7512
00007B9C 2F08                       		move.l	a0,-(sp)
00007B9E 2049                       		movea.l	a1,a0
00007BA0 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007BA6 205F                       		movea.l	(sp)+,a0
00007BA8                            
00007BA8                            loc_7512:
00007BA8 08E9 0003 0022             		bset	#3,$22(a1)
00007BAE 08E8 0003 0022             		bset	#3,$22(a0)
00007BB4                            
00007BB4                            locret_751E:
00007BB4 4E75                       		rts	
00007BB6                            ; End of function PlatformObject
00007BB6                            
00007BB6                            ; ---------------------------------------------------------------------------
00007BB6                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007BB6                            ; ---------------------------------------------------------------------------
00007BB6                            
00007BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BB6                            
00007BB6                            
00007BB6                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007BB6 43F8 D000                  		lea	($FFFFD000).w,a1
00007BBA 4A69 0012                  		tst.w	$12(a1)
00007BBE 6B00 FFF4                  		bmi.w	locret_751E
00007BC2 3029 0008                  		move.w	8(a1),d0
00007BC6 9068 0008                  		sub.w	8(a0),d0
00007BCA D041                       		add.w	d1,d0
00007BCC 6BE6                       		bmi.s	locret_751E
00007BCE D241                       		add.w	d1,d1
00007BD0 B041                       		cmp.w	d1,d0
00007BD2 64E0                       		bcc.s	locret_751E
00007BD4 0828 0000 0001             		btst	#0,1(a0)
00007BDA 6700                       		beq.s	loc_754A
00007BDC 4640                       		not.w	d0
00007BDE D041                       		add.w	d1,d0
00007BE0                            
00007BE0                            loc_754A:
00007BE0 E248                       		lsr.w	#1,d0
00007BE2 7600                       		moveq	#0,d3
00007BE4 1632 0000                  		move.b	(a2,d0.w),d3
00007BE8 3028 000C                  		move.w	$C(a0),d0
00007BEC 9043                       		sub.w	d3,d0
00007BEE 6000 FF1A                  		bra.w	Platform3
00007BF2                            ; End of function SlopeObject
00007BF2                            
00007BF2                            
00007BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BF2                            
00007BF2                            
00007BF2                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007BF2 43F8 D000                  		lea	($FFFFD000).w,a1
00007BF6 4A69 0012                  		tst.w	$12(a1)
00007BFA 6B00 FFB8                  		bmi.w	locret_751E
00007BFE 3029 0008                  		move.w	8(a1),d0
00007C02 9068 0008                  		sub.w	8(a0),d0
00007C06 D041                       		add.w	d1,d0
00007C08 6B00 FFAA                  		bmi.w	locret_751E
00007C0C D241                       		add.w	d1,d1
00007C0E B041                       		cmp.w	d1,d0
00007C10 6400 FFA2                  		bcc.w	locret_751E
00007C14 3028 000C                  		move.w	$C(a0),d0
00007C18 9043                       		sub.w	d3,d0
00007C1A 6000 FEEE                  		bra.w	Platform3
00007C1E                            ; End of function Obj15_Solid
00007C1E                            
00007C1E                            ; ===========================================================================
00007C1E                            
00007C1E                            Obj11_Action2:				; XREF: Obj11_Index
00007C1E 6100                       		bsr.s	Obj11_WalkOff
00007C20 6100 0000                  		bsr.w	DisplaySprite
00007C24 6000 0000                  		bra.w	Obj11_ChkDel
00007C28                            
00007C28                            ; ---------------------------------------------------------------------------
00007C28                            ; Subroutine allowing Sonic to walk off a bridge
00007C28                            ; ---------------------------------------------------------------------------
00007C28                            
00007C28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C28                            
00007C28                            
00007C28                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007C28 7200                       		moveq	#0,d1
00007C2A 1228 0028                  		move.b	$28(a0),d1
00007C2E E749                       		lsl.w	#3,d1
00007C30 3401                       		move.w	d1,d2
00007C32 5041                       		addq.w	#8,d1
00007C34 6100                       		bsr.s	ExitPlatform2
00007C36 6400                       		bcc.s	locret_75BE
00007C38 E848                       		lsr.w	#4,d0
00007C3A 1140 003F                  		move.b	d0,$3F(a0)
00007C3E 1028 003E                  		move.b	$3E(a0),d0
00007C42 0C00 0040                  		cmpi.b	#$40,d0
00007C46 6700                       		beq.s	loc_75B6
00007C48 5828 003E                  		addq.b	#4,$3E(a0)
00007C4C                            
00007C4C                            loc_75B6:
00007C4C 6100 0000                  		bsr.w	Obj11_Bend
00007C50 6100 0000                  		bsr.w	Obj11_MoveSonic
00007C54                            
00007C54                            locret_75BE:
00007C54 4E75                       		rts	
00007C56                            ; End of function Obj11_WalkOff
00007C56                            
00007C56                            ; ---------------------------------------------------------------------------
00007C56                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007C56                            ; ---------------------------------------------------------------------------
00007C56                            
00007C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C56                            
00007C56                            
00007C56                            ExitPlatform:
00007C56 3401                       		move.w	d1,d2
00007C58                            
00007C58                            ExitPlatform2:
00007C58 D442                       		add.w	d2,d2
00007C5A 43F8 D000                  		lea	($FFFFD000).w,a1
00007C5E 0829 0001 0022             		btst	#1,$22(a1)
00007C64 6600                       		bne.s	loc_75E0
00007C66 3029 0008                  		move.w	8(a1),d0
00007C6A 9068 0008                  		sub.w	8(a0),d0
00007C6E D041                       		add.w	d1,d0
00007C70 6B00                       		bmi.s	loc_75E0
00007C72 B042                       		cmp.w	d2,d0
00007C74 6500                       		bcs.s	locret_75F2
00007C76                            
00007C76                            loc_75E0:
00007C76 08A9 0003 0022             		bclr	#3,$22(a1)
00007C7C 117C 0002 0024             		move.b	#2,$24(a0)
00007C82 08A8 0003 0022             		bclr	#3,$22(a0)
00007C88                            
00007C88                            locret_75F2:
00007C88 4E75                       		rts	
00007C8A                            ; End of function ExitPlatform
00007C8A                            
00007C8A                            
00007C8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C8A                            
00007C8A                            
00007C8A                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007C8A 7000                       		moveq	#0,d0
00007C8C 1028 003F                  		move.b	$3F(a0),d0
00007C90 1030 0029                  		move.b	$29(a0,d0.w),d0
00007C94 ED48                       		lsl.w	#6,d0
00007C96 0680 00FF D000             		addi.l	#$FFD000,d0
00007C9C 2440                       		movea.l	d0,a2
00007C9E 43F8 D000                  		lea	($FFFFD000).w,a1
00007CA2 302A 000C                  		move.w	$C(a2),d0
00007CA6 5140                       		subq.w	#8,d0
00007CA8 7200                       		moveq	#0,d1
00007CAA 1229 0016                  		move.b	$16(a1),d1
00007CAE 9041                       		sub.w	d1,d0
00007CB0 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007CB4 4E75                       		rts	
00007CB6                            ; End of function Obj11_MoveSonic
00007CB6                            
00007CB6                            
00007CB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CB6                            
00007CB6                            
00007CB6                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007CB6 1028 003E                  		move.b	$3E(a0),d0
00007CBA 6100 B07A                  		bsr.w	CalcSine
00007CBE 3800                       		move.w	d0,d4
00007CC0 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007CC6 7000                       		moveq	#0,d0
00007CC8 1028 0028                  		move.b	$28(a0),d0
00007CCC E948                       		lsl.w	#4,d0
00007CCE 7600                       		moveq	#0,d3
00007CD0 1628 003F                  		move.b	$3F(a0),d3
00007CD4 3403                       		move.w	d3,d2
00007CD6 D640                       		add.w	d0,d3
00007CD8 7A00                       		moveq	#0,d5
00007CDA 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007CE0 1A35 3000                  		move.b	(a5,d3.w),d5
00007CE4 0243 000F                  		andi.w	#$F,d3
00007CE8 E94B                       		lsl.w	#4,d3
00007CEA 47F4 3000                  		lea	(a4,d3.w),a3
00007CEE 45E8 0029                  		lea	$29(a0),a2
00007CF2                            
00007CF2                            loc_765C:
00007CF2 7000                       		moveq	#0,d0
00007CF4 101A                       		move.b	(a2)+,d0
00007CF6 ED48                       		lsl.w	#6,d0
00007CF8 0680 00FF D000             		addi.l	#$FFD000,d0
00007CFE 2240                       		movea.l	d0,a1
00007D00 7000                       		moveq	#0,d0
00007D02 101B                       		move.b	(a3)+,d0
00007D04 5240                       		addq.w	#1,d0
00007D06 C0C5                       		mulu.w	d5,d0
00007D08 C0C4                       		mulu.w	d4,d0
00007D0A 4840                       		swap	d0
00007D0C D069 003C                  		add.w	$3C(a1),d0
00007D10 3340 000C                  		move.w	d0,$C(a1)
00007D14 51CA FFDC                  		dbf	d2,loc_765C
00007D18 7000                       		moveq	#0,d0
00007D1A 1028 0028                  		move.b	$28(a0),d0
00007D1E 7600                       		moveq	#0,d3
00007D20 1628 003F                  		move.b	$3F(a0),d3
00007D24 5203                       		addq.b	#1,d3
00007D26 9600                       		sub.b	d0,d3
00007D28 4403                       		neg.b	d3
00007D2A 6B00                       		bmi.s	locret_76CA
00007D2C 3403                       		move.w	d3,d2
00007D2E E94B                       		lsl.w	#4,d3
00007D30 47F4 3000                  		lea	(a4,d3.w),a3
00007D34 D6C2                       		adda.w	d2,a3
00007D36 5342                       		subq.w	#1,d2
00007D38 6500                       		bcs.s	locret_76CA
00007D3A                            
00007D3A                            loc_76A4:
00007D3A 7000                       		moveq	#0,d0
00007D3C 101A                       		move.b	(a2)+,d0
00007D3E ED48                       		lsl.w	#6,d0
00007D40 0680 00FF D000             		addi.l	#$FFD000,d0
00007D46 2240                       		movea.l	d0,a1
00007D48 7000                       		moveq	#0,d0
00007D4A 1023                       		move.b	-(a3),d0
00007D4C 5240                       		addq.w	#1,d0
00007D4E C0C5                       		mulu.w	d5,d0
00007D50 C0C4                       		mulu.w	d4,d0
00007D52 4840                       		swap	d0
00007D54 D069 003C                  		add.w	$3C(a1),d0
00007D58 3340 000C                  		move.w	d0,$C(a1)
00007D5C 51CA FFDC                  		dbf	d2,loc_76A4
00007D60                            
00007D60                            locret_76CA:
00007D60 4E75                       		rts	
00007D62                            ; End of function Obj11_Bend
00007D62                            
00007D62                            ; ===========================================================================
00007D62                            ; ---------------------------------------------------------------------------
00007D62                            ; GHZ bridge-bending data
00007D62                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007D62                            ; ---------------------------------------------------------------------------
00007D62                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007E72                            		even
00007E72                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007F72                            		even
00007F72                            
00007F72                            ; ===========================================================================
00007F72                            
00007F72                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007F72 3028 0008                  		move.w	8(a0),d0
00007F76 0240 FF80                  		andi.w	#$FF80,d0
00007F7A 3238 F700                  		move.w	($FFFFF700).w,d1
00007F7E 0441 0080                  		subi.w	#$80,d1
00007F82 0241 FF80                  		andi.w	#$FF80,d1
00007F86 9041                       		sub.w	d1,d0
00007F88 0C40 0280                  		cmpi.w	#$280,d0
00007F8C 6200 0000                  		bhi.w	Obj11_DelAll
00007F90 4E75                       		rts	
00007F92                            ; ===========================================================================
00007F92                            
00007F92                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007F92 7400                       		moveq	#0,d2
00007F94 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007F98 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007F9A 5302                       		subq.b	#1,d2		; subtract 1
00007F9C 6500                       		bcs.s	Obj11_Delete
00007F9E                            
00007F9E                            Obj11_DelLoop:
00007F9E 7000                       		moveq	#0,d0
00007FA0 101A                       		move.b	(a2)+,d0
00007FA2 ED48                       		lsl.w	#6,d0
00007FA4 0680 00FF D000             		addi.l	#$FFD000,d0
00007FAA 2240                       		movea.l	d0,a1
00007FAC B048                       		cmp.w	a0,d0
00007FAE 6700                       		beq.s	loc_791E
00007FB0 6100 0000                  		bsr.w	DeleteObject2
00007FB4                            
00007FB4                            loc_791E:
00007FB4 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007FB8                            
00007FB8                            Obj11_Delete:
00007FB8 6100 0000                  		bsr.w	DeleteObject
00007FBC 4E75                       		rts	
00007FBE                            ; ===========================================================================
00007FBE                            
00007FBE                            Obj11_Delete2:				; XREF: Obj11_Index
00007FBE 6100 0000                  		bsr.w	DeleteObject
00007FC2 4E75                       		rts	
00007FC4                            ; ===========================================================================
00007FC4                            
00007FC4                            Obj11_Display2:				; XREF: Obj11_Index
00007FC4 6100 0000                  		bsr.w	DisplaySprite
00007FC8 4E75                       		rts	
00007FCA                            ; ===========================================================================
00007FCA                            ; ---------------------------------------------------------------------------
00007FCA                            ; Sprite mappings - GHZ	bridge
00007FCA                            ; ---------------------------------------------------------------------------
00007FCA                            Map_obj11:
00007FCA                            	include "_maps\obj11.asm"
00007FCA                            ; ---------------------------------------------------------------------------
00007FCA                            ; Sprite mappings - GHZ	bridge
00007FCA                            ; ---------------------------------------------------------------------------
00007FCA 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007FCE 0000                       		dc.w byte_794B-Map_obj11
00007FD0 01                         byte_793A:	dc.b 1
00007FD1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007FD6 02                         byte_7940:	dc.b 2
00007FD7 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007FDC 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007FE1 01                         byte_794B:	dc.b 1
00007FE2 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007FE8 00                         		even
00007FE8 00                         		even
00007FE8                            
00007FE8                            ; ===========================================================================
00007FE8                            ; ---------------------------------------------------------------------------
00007FE8                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007FE8                            ;	    - spiked ball on a chain (SBZ)
00007FE8                            ; ---------------------------------------------------------------------------
00007FE8                            
00007FE8                            Obj15:					; XREF: Obj_Index
00007FE8 7000                       		moveq	#0,d0
00007FEA 1028 0024                  		move.b	$24(a0),d0
00007FEE 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007FF2 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007FF6                            ; ===========================================================================
00007FF6 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007FFA 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007FFE 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008002 0000                       		dc.w Obj15_Action-Obj15_Index
00008004                            ; ===========================================================================
00008004                            
00008004                            Obj15_Main:				; XREF: Obj15_Index
00008004 5428 0024                  		addq.b	#2,$24(a0)
00008008 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008010 317C 4380 0002             		move.w	#$4380,2(a0)
00008016 117C 0004 0001             		move.b	#4,1(a0)
0000801C 117C 0003 0018             		move.b	#3,$18(a0)
00008022 117C 0018 0019             		move.b	#$18,$19(a0)
00008028 117C 0008 0016             		move.b	#8,$16(a0)
0000802E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008034 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000803A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008040 6600                       		bne.s	Obj15_NotSLZ
00008042 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
0000804A 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008050 117C 0020 0019             		move.b	#$20,$19(a0)
00008056 117C 0010 0016             		move.b	#$10,$16(a0)
0000805C 117C 0099 0020             		move.b	#$99,$20(a0)
00008062                            
00008062                            Obj15_NotSLZ:
00008062 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008068 6600                       		bne.s	Obj15_SetLength
0000806A 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008072 317C 0391 0002             		move.w	#$391,2(a0)
00008078 117C 0018 0019             		move.b	#$18,$19(a0)
0000807E 117C 0018 0016             		move.b	#$18,$16(a0)
00008084 117C 0086 0020             		move.b	#$86,$20(a0)
0000808A 117C 000C 0024             		move.b	#$C,$24(a0)
00008090                            
00008090                            Obj15_SetLength:
00008090 1810                       		move.b	0(a0),d4
00008092 7200                       		moveq	#0,d1
00008094 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008098 1212                       		move.b	(a2),d1		; move a2 to d1
0000809A 3F01                       		move.w	d1,-(sp)
0000809C 0241 000F                  		andi.w	#$F,d1
000080A0 14FC 0000                  		move.b	#0,(a2)+
000080A4 3601                       		move.w	d1,d3
000080A6 E94B                       		lsl.w	#4,d3
000080A8 5003                       		addq.b	#8,d3
000080AA 1143 003C                  		move.b	d3,$3C(a0)
000080AE 5103                       		subq.b	#8,d3
000080B0 4A28 001A                  		tst.b	$1A(a0)
000080B4 6700                       		beq.s	Obj15_MakeChain
000080B6 5003                       		addq.b	#8,d3
000080B8 5341                       		subq.w	#1,d1
000080BA                            
000080BA                            Obj15_MakeChain:
000080BA 6100 0000                  		bsr.w	SingleObjLoad
000080BE 6600                       		bne.s	loc_7A92
000080C0 5228 0028                  		addq.b	#1,$28(a0)
000080C4 3A09                       		move.w	a1,d5
000080C6 0445 D000                  		subi.w	#-$3000,d5
000080CA EC4D                       		lsr.w	#6,d5
000080CC 0245 007F                  		andi.w	#$7F,d5
000080D0 14C5                       		move.b	d5,(a2)+
000080D2 137C 000A 0024             		move.b	#$A,$24(a1)
000080D8 1284                       		move.b	d4,0(a1)	; load swinging	object
000080DA 2368 0004 0004             		move.l	4(a0),4(a1)
000080E0 3368 0002 0002             		move.w	2(a0),2(a1)
000080E6 08A9 0006 0002             		bclr	#6,2(a1)
000080EC 137C 0004 0001             		move.b	#4,1(a1)
000080F2 137C 0004 0018             		move.b	#4,$18(a1)
000080F8 137C 0008 0019             		move.b	#8,$19(a1)
000080FE 137C 0001 001A             		move.b	#1,$1A(a1)
00008104 1343 003C                  		move.b	d3,$3C(a1)
00008108 0403 0010                  		subi.b	#$10,d3
0000810C 6400                       		bcc.s	loc_7A8E
0000810E 137C 0002 001A             		move.b	#2,$1A(a1)
00008114 137C 0003 0018             		move.b	#3,$18(a1)
0000811A 08E9 0006 0002             		bset	#6,2(a1)
00008120                            
00008120                            loc_7A8E:
00008120 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008124                            
00008124                            loc_7A92:
00008124 3A08                       		move.w	a0,d5
00008126 0445 D000                  		subi.w	#-$3000,d5
0000812A EC4D                       		lsr.w	#6,d5
0000812C 0245 007F                  		andi.w	#$7F,d5
00008130 14C5                       		move.b	d5,(a2)+
00008132 317C 4080 0026             		move.w	#$4080,$26(a0)
00008138 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000813E 321F                       		move.w	(sp)+,d1
00008140 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008144 6700                       		beq.s	loc_7AD4	; if not, branch
00008146 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000814E 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008154 117C 0001 001A             		move.b	#1,$1A(a0)
0000815A 117C 0002 0018             		move.b	#2,$18(a0)
00008160 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008166                            
00008166                            loc_7AD4:
00008166 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000816C 6700                       		beq.s	Obj15_Action	; if yes, branch
0000816E                            
0000816E                            Obj15_SetSolid:				; XREF: Obj15_Index
0000816E 7200                       		moveq	#0,d1
00008170 1228 0019                  		move.b	$19(a0),d1
00008174 7600                       		moveq	#0,d3
00008176 1628 0016                  		move.b	$16(a0),d3
0000817A 6100 FA76                  		bsr.w	Obj15_Solid
0000817E                            
0000817E                            Obj15_Action:				; XREF: Obj15_Index
0000817E 6100 0000                  		bsr.w	Obj15_Move
00008182 6100 0000                  		bsr.w	DisplaySprite
00008186 6000 0000                  		bra.w	Obj15_ChkDel
0000818A                            ; ===========================================================================
0000818A                            
0000818A                            Obj15_Action2:				; XREF: Obj15_Index
0000818A 7200                       		moveq	#0,d1
0000818C 1228 0019                  		move.b	$19(a0),d1
00008190 6100 FAC4                  		bsr.w	ExitPlatform
00008194 3F28 0008                  		move.w	8(a0),-(sp)
00008198 6100 0000                  		bsr.w	Obj15_Move
0000819C 341F                       		move.w	(sp)+,d2
0000819E 7600                       		moveq	#0,d3
000081A0 1628 0016                  		move.b	$16(a0),d3
000081A4 5203                       		addq.b	#1,d3
000081A6 6100 0000                  		bsr.w	MvSonicOnPtfm
000081AA 6100 0000                  		bsr.w	DisplaySprite
000081AE 6000 0000                  		bra.w	Obj15_ChkDel
000081B2                            
000081B2 4E75                       		rts
000081B4                            
000081B4                            ; ---------------------------------------------------------------------------
000081B4                            ; Subroutine to	change Sonic's position with a platform
000081B4                            ; ---------------------------------------------------------------------------
000081B4                            
000081B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081B4                            
000081B4                            
000081B4                            MvSonicOnPtfm:
000081B4 43F8 D000                  		lea	($FFFFD000).w,a1
000081B8 3028 000C                  		move.w	$C(a0),d0
000081BC 9043                       		sub.w	d3,d0
000081BE 6000                       		bra.s	MvSonic2
000081C0                            ; End of function MvSonicOnPtfm
000081C0                            
000081C0                            ; ---------------------------------------------------------------------------
000081C0                            ; Subroutine to	change Sonic's position with a platform
000081C0                            ; ---------------------------------------------------------------------------
000081C0                            
000081C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081C0                            
000081C0                            
000081C0                            MvSonicOnPtfm2:
000081C0 43F8 D000                  		lea	($FFFFD000).w,a1
000081C4 3028 000C                  		move.w	$C(a0),d0
000081C8 0440 0009                  		subi.w	#9,d0
000081CC                            
000081CC                            MvSonic2:
000081CC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000081D0 6B00                       		bmi.s	locret_7B62
000081D2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000081D8 6400                       		bcc.s	locret_7B62
000081DA 4A78 FE08                  		tst.w	($FFFFFE08).w
000081DE 6600                       		bne.s	locret_7B62
000081E0 7200                       		moveq	#0,d1
000081E2 1229 0016                  		move.b	$16(a1),d1
000081E6 9041                       		sub.w	d1,d0
000081E8 3340 000C                  		move.w	d0,$C(a1)
000081EC 9468 0008                  		sub.w	8(a0),d2
000081F0 9569 0008                  		sub.w	d2,8(a1)
000081F4                            
000081F4                            locret_7B62:
000081F4 4E75                       		rts	
000081F6                            ; End of function MvSonicOnPtfm2
000081F6                            
000081F6                            
000081F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081F6                            
000081F6                            
000081F6                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000081F6 1038 FE78                  		move.b	($FFFFFE78).w,d0
000081FA 323C 0080                  		move.w	#$80,d1
000081FE 0828 0000 0022             		btst	#0,$22(a0)
00008204 6700                       		beq.s	loc_7B78
00008206 4440                       		neg.w	d0
00008208 D041                       		add.w	d1,d0
0000820A                            
0000820A                            loc_7B78:
0000820A 6000                       		bra.s	Obj15_Move2
0000820C                            ; End of function Obj15_Move
0000820C                            
0000820C                            
0000820C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000820C                            
0000820C                            
0000820C                            Obj48_Move:				; XREF: Obj48_Display2
0000820C 4A28 003D                  		tst.b	$3D(a0)
00008210 6600                       		bne.s	loc_7B9C
00008212 3028 003E                  		move.w	$3E(a0),d0
00008216 5040                       		addq.w	#8,d0
00008218 3140 003E                  		move.w	d0,$3E(a0)
0000821C D168 0026                  		add.w	d0,$26(a0)
00008220 0C40 0200                  		cmpi.w	#$200,d0
00008224 6600                       		bne.s	loc_7BB6
00008226 117C 0001 003D             		move.b	#1,$3D(a0)
0000822C 6000                       		bra.s	loc_7BB6
0000822E                            ; ===========================================================================
0000822E                            
0000822E                            loc_7B9C:
0000822E 3028 003E                  		move.w	$3E(a0),d0
00008232 5140                       		subq.w	#8,d0
00008234 3140 003E                  		move.w	d0,$3E(a0)
00008238 D168 0026                  		add.w	d0,$26(a0)
0000823C 0C40 FE00                  		cmpi.w	#-$200,d0
00008240 6600                       		bne.s	loc_7BB6
00008242 117C 0000 003D             		move.b	#0,$3D(a0)
00008248                            
00008248                            loc_7BB6:
00008248 1028 0026                  		move.b	$26(a0),d0
0000824C                            ; End of function Obj48_Move
0000824C                            
0000824C                            
0000824C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000824C                            
0000824C                            
0000824C                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000824C 6100 AAE8                  		bsr.w	CalcSine
00008250 3428 0038                  		move.w	$38(a0),d2
00008254 3628 003A                  		move.w	$3A(a0),d3
00008258 45E8 0028                  		lea	$28(a0),a2
0000825C 7C00                       		moveq	#0,d6
0000825E 1C1A                       		move.b	(a2)+,d6
00008260                            
00008260                            loc_7BCE:
00008260 7800                       		moveq	#0,d4
00008262 181A                       		move.b	(a2)+,d4
00008264 ED4C                       		lsl.w	#6,d4
00008266 0684 00FF D000             		addi.l	#$FFD000,d4
0000826C 2244                       		movea.l	d4,a1
0000826E 7800                       		moveq	#0,d4
00008270 1829 003C                  		move.b	$3C(a1),d4
00008274 2A04                       		move.l	d4,d5
00008276 C9C0                       		muls.w	d0,d4
00008278 E084                       		asr.l	#8,d4
0000827A CBC1                       		muls.w	d1,d5
0000827C E085                       		asr.l	#8,d5
0000827E D842                       		add.w	d2,d4
00008280 DA43                       		add.w	d3,d5
00008282 3344 000C                  		move.w	d4,$C(a1)
00008286 3345 0008                  		move.w	d5,8(a1)
0000828A 51CE FFD4                  		dbf	d6,loc_7BCE
0000828E 4E75                       		rts	
00008290                            ; End of function Obj15_Move2
00008290                            
00008290                            ; ===========================================================================
00008290                            
00008290                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008290 3028 003A                  		move.w	$3A(a0),d0
00008294 0240 FF80                  		andi.w	#$FF80,d0
00008298 3238 F700                  		move.w	($FFFFF700).w,d1
0000829C 0441 0080                  		subi.w	#$80,d1
000082A0 0241 FF80                  		andi.w	#$FF80,d1
000082A4 9041                       		sub.w	d1,d0
000082A6 0C40 0280                  		cmpi.w	#$280,d0
000082AA 6200 0000                  		bhi.w	Obj15_DelAll
000082AE 4E75                       		rts	
000082B0                            ; ===========================================================================
000082B0                            
000082B0                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000082B0 7400                       		moveq	#0,d2
000082B2 45E8 0028                  		lea	$28(a0),a2
000082B6 141A                       		move.b	(a2)+,d2
000082B8                            
000082B8                            Obj15_DelLoop:
000082B8 7000                       		moveq	#0,d0
000082BA 101A                       		move.b	(a2)+,d0
000082BC ED48                       		lsl.w	#6,d0
000082BE 0680 00FF D000             		addi.l	#$FFD000,d0
000082C4 2240                       		movea.l	d0,a1
000082C6 6100 0000                  		bsr.w	DeleteObject2
000082CA 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000082CE 4E75                       		rts	
000082D0                            ; ===========================================================================
000082D0                            
000082D0                            Obj15_Delete:				; XREF: Obj15_Index
000082D0 6100 0000                  		bsr.w	DeleteObject
000082D4 4E75                       		rts	
000082D6                            ; ===========================================================================
000082D6                            
000082D6                            Obj15_Display:				; XREF: Obj15_Index
000082D6 6000 0000                  		bra.w	DisplaySprite
000082DA                            ; ===========================================================================
000082DA                            ; ---------------------------------------------------------------------------
000082DA                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000082DA                            ; ---------------------------------------------------------------------------
000082DA                            Map_obj15:
000082DA                            	include "_maps\obj15ghz.asm"
000082DA                            ; ---------------------------------------------------------------------------
000082DA                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000082DA                            ; ---------------------------------------------------------------------------
000082DA 0000                       		dc.w byte_7C4E-Map_obj15
000082DC 0000                       		dc.w byte_7C59-Map_obj15
000082DE 0000                       		dc.w byte_7C5F-Map_obj15
000082E0 02                         byte_7C4E:	dc.b 2
000082E1 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000082E6 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000082EB 01                         byte_7C59:	dc.b 1
000082EC F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000082F1 01                         byte_7C5F:	dc.b 1
000082F2 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000082F8 00                         		even
000082F8 00                         		even
000082F8                            
000082F8                            ; ---------------------------------------------------------------------------
000082F8                            ; Sprite mappings - SLZ	swinging platforms
000082F8                            ; ---------------------------------------------------------------------------
000082F8                            Map_obj15a:
000082F8                            	include "_maps\obj15slz.asm"
000082F8                            ; ---------------------------------------------------------------------------
000082F8                            ; Sprite mappings - SLZ	swinging platforms
000082F8                            ; ---------------------------------------------------------------------------
000082F8 0000                       		dc.w byte_7C6C-Map_obj15a
000082FA 0000                       		dc.w byte_7C95-Map_obj15a
000082FC 0000                       		dc.w byte_7C9B-Map_obj15a
000082FE 08                         byte_7C6C:	dc.b 8
000082FF F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008304 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008309 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000830E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008313 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008318 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000831D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008322 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008327 01                         byte_7C95:	dc.b 1
00008328 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000832D 01                         byte_7C9B:	dc.b 1
0000832E F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008334 00                         		even
00008334 00                         		even
00008334                            
00008334                            ; ===========================================================================
00008334                            ; ---------------------------------------------------------------------------
00008334                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008334                            ; ---------------------------------------------------------------------------
00008334                            
00008334                            Obj17:					; XREF: Obj_Index
00008334 7000                       		moveq	#0,d0
00008336 1028 0024                  		move.b	$24(a0),d0
0000833A 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000833E 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008342                            ; ===========================================================================
00008342 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008344 0000                       		dc.w Obj17_Action-Obj17_Index
00008346 0000                       		dc.w Obj17_Action-Obj17_Index
00008348 0000                       		dc.w Obj17_Delete-Obj17_Index
0000834A 0000                       		dc.w Obj17_Display-Obj17_Index
0000834C                            ; ===========================================================================
0000834C                            
0000834C                            Obj17_Main:				; XREF: Obj17_Index
0000834C 5428 0024                  		addq.b	#2,$24(a0)
00008350 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008358 317C 4398 0002             		move.w	#$4398,2(a0)
0000835E 117C 0007 0022             		move.b	#7,$22(a0)
00008364 117C 0004 0001             		move.b	#4,1(a0)
0000836A 117C 0003 0018             		move.b	#3,$18(a0)
00008370 117C 0008 0019             		move.b	#8,$19(a0)
00008376 3428 000C                  		move.w	$C(a0),d2
0000837A 3628 0008                  		move.w	8(a0),d3
0000837E 1810                       		move.b	0(a0),d4
00008380 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008384 7200                       		moveq	#0,d1
00008386 1212                       		move.b	(a2),d1		; move a2 to d1
00008388 14FC 0000                  		move.b	#0,(a2)+
0000838C 3001                       		move.w	d1,d0
0000838E E248                       		lsr.w	#1,d0
00008390 E948                       		lsl.w	#4,d0
00008392 9640                       		sub.w	d0,d3
00008394 5501                       		subq.b	#2,d1
00008396 6500                       		bcs.s	Obj17_Action
00008398 7C00                       		moveq	#0,d6
0000839A                            
0000839A                            Obj17_MakeHelix:
0000839A 6100 0000                  		bsr.w	SingleObjLoad
0000839E 6600                       		bne.s	Obj17_Action
000083A0 5228 0028                  		addq.b	#1,$28(a0)
000083A4 3A09                       		move.w	a1,d5
000083A6 0445 D000                  		subi.w	#$D000,d5
000083AA EC4D                       		lsr.w	#6,d5
000083AC 0245 007F                  		andi.w	#$7F,d5
000083B0 14C5                       		move.b	d5,(a2)+
000083B2 137C 0008 0024             		move.b	#8,$24(a1)
000083B8 1284                       		move.b	d4,0(a1)
000083BA 3342 000C                  		move.w	d2,$C(a1)
000083BE 3343 0008                  		move.w	d3,8(a1)
000083C2 2368 0004 0004             		move.l	4(a0),4(a1)
000083C8 337C 4398 0002             		move.w	#$4398,2(a1)
000083CE 137C 0004 0001             		move.b	#4,1(a1)
000083D4 137C 0003 0018             		move.b	#3,$18(a1)
000083DA 137C 0008 0019             		move.b	#8,$19(a1)
000083E0 1346 003E                  		move.b	d6,$3E(a1)
000083E4 5206                       		addq.b	#1,d6
000083E6 0206 0007                  		andi.b	#7,d6
000083EA 0643 0010                  		addi.w	#$10,d3
000083EE B668 0008                  		cmp.w	8(a0),d3
000083F2 6600                       		bne.s	loc_7D78
000083F4 1146 003E                  		move.b	d6,$3E(a0)
000083F8 5206                       		addq.b	#1,d6
000083FA 0206 0007                  		andi.b	#7,d6
000083FE 0643 0010                  		addi.w	#$10,d3
00008402 5228 0028                  		addq.b	#1,$28(a0)
00008406                            
00008406                            loc_7D78:
00008406 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000840A                            
0000840A                            Obj17_Action:				; XREF: Obj17_Index
0000840A 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000840E 6100 0000                  		bsr.w	DisplaySprite
00008412 6000 0000                  		bra.w	Obj17_ChkDel
00008416                            
00008416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008416                            
00008416                            
00008416                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008416 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000841A 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008420 D028 003E                  		add.b	$3E(a0),d0
00008424 0200 0007                  		andi.b	#7,d0
00008428 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000842C 6600                       		bne.s	locret_7DA6
0000842E 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008434                            
00008434                            locret_7DA6:
00008434 4E75                       		rts	
00008436                            ; End of function Obj17_RotateSpikes
00008436                            
00008436                            ; ===========================================================================
00008436                            
00008436                            Obj17_ChkDel:				; XREF: Obj17_Action
00008436 3028 0008                  		move.w	8(a0),d0
0000843A 0240 FF80                  		andi.w	#$FF80,d0
0000843E 3238 F700                  		move.w	($FFFFF700).w,d1
00008442 0441 0080                  		subi.w	#$80,d1
00008446 0241 FF80                  		andi.w	#$FF80,d1
0000844A 9041                       		sub.w	d1,d0
0000844C 0C40 0280                  		cmpi.w	#$280,d0
00008450 6200 0000                  		bhi.w	Obj17_DelAll
00008454 4E75                       		rts	
00008456                            ; ===========================================================================
00008456                            
00008456                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008456 7400                       		moveq	#0,d2
00008458 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000845C 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000845E 5502                       		subq.b	#2,d2
00008460 6500                       		bcs.s	Obj17_Delete
00008462                            
00008462                            Obj17_DelLoop:
00008462 7000                       		moveq	#0,d0
00008464 101A                       		move.b	(a2)+,d0
00008466 ED48                       		lsl.w	#6,d0
00008468 0680 00FF D000             		addi.l	#$FFD000,d0
0000846E 2240                       		movea.l	d0,a1
00008470 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008474 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008478                            
00008478                            Obj17_Delete:				; XREF: Obj17_Index
00008478 6100 0000                  		bsr.w	DeleteObject
0000847C 4E75                       		rts	
0000847E                            ; ===========================================================================
0000847E                            
0000847E                            Obj17_Display:				; XREF: Obj17_Index
0000847E 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008482 6000 0000                  		bra.w	DisplaySprite
00008486                            ; ===========================================================================
00008486                            ; ---------------------------------------------------------------------------
00008486                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008486                            ; ---------------------------------------------------------------------------
00008486                            Map_obj17:
00008486                            	include "_maps\obj17.asm"
00008486                            ; ---------------------------------------------------------------------------
00008486                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008486                            ; ---------------------------------------------------------------------------
00008486 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000848A 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000848E 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008492 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008496 01                         byte_7E08:	dc.b 1
00008497 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000849C 01                         byte_7E0E:	dc.b 1
0000849D F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000084A2 01                         byte_7E14:	dc.b 1
000084A3 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000084A8 01                         byte_7E1A:	dc.b 1
000084A9 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000084AE 01                         byte_7E20:	dc.b 1
000084AF 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000084B4 01                         byte_7E26:	dc.b 1
000084B5 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000084BA 01                         byte_7E2C:	dc.b 1
000084BB F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000084C0                            		even
000084C0                            		even
000084C0                            
000084C0                            ; ===========================================================================
000084C0                            ; ---------------------------------------------------------------------------
000084C0                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000084C0                            ; ---------------------------------------------------------------------------
000084C0                            
000084C0                            Obj18:					; XREF: Obj_Index
000084C0 7000                       		moveq	#0,d0
000084C2 1028 0024                  		move.b	$24(a0),d0
000084C6 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000084CA 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000084CE                            ; ===========================================================================
000084CE 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000084D0 0000                       		dc.w Obj18_Solid-Obj18_Index
000084D2 0000                       		dc.w Obj18_Action2-Obj18_Index
000084D4 0000                       		dc.w Obj18_Delete-Obj18_Index
000084D6 0000                       		dc.w Obj18_Action-Obj18_Index
000084D8                            ; ===========================================================================
000084D8                            
000084D8                            Obj18_Main:				; XREF: Obj18_Index
000084D8 5428 0024                  		addq.b	#2,$24(a0)
000084DC 317C 4000 0002             		move.w	#$4000,2(a0)
000084E2 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000084EA 117C 0020 0019             		move.b	#$20,$19(a0)
000084F0 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000084F6 6600                       		bne.s	Obj18_NotSYZ
000084F8 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008500 117C 0020 0019             		move.b	#$20,$19(a0)
00008506                            
00008506                            Obj18_NotSYZ:
00008506 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000850C 6600                       		bne.s	Obj18_NotSLZ
0000850E 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008516 117C 0020 0019             		move.b	#$20,$19(a0)
0000851C 317C 4000 0002             		move.w	#$4000,2(a0)
00008522 117C 0003 0028             		move.b	#3,$28(a0)
00008528                            
00008528                            Obj18_NotSLZ:
00008528 117C 0004 0001             		move.b	#4,1(a0)
0000852E 117C 0004 0018             		move.b	#4,$18(a0)
00008534 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000853A 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008540 3168 0008 0032             		move.w	8(a0),$32(a0)
00008546 317C 0080 0026             		move.w	#$80,$26(a0)
0000854C 7200                       		moveq	#0,d1
0000854E 1028 0028                  		move.b	$28(a0),d0
00008552 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008556 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008558 5201                       		addq.b	#1,d1		; use frame #1
0000855A 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008560                            
00008560                            Obj18_SetFrame:
00008560 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008564                            
00008564                            Obj18_Solid:				; XREF: Obj18_Index
00008564 4A28 0038                  		tst.b	$38(a0)
00008568 6700                       		beq.s	loc_7EE0
0000856A 5928 0038                  		subq.b	#4,$38(a0)
0000856E                            
0000856E                            loc_7EE0:
0000856E 7200                       		moveq	#0,d1
00008570 1228 0019                  		move.b	$19(a0),d1
00008574 6100 F56C                  		bsr.w	PlatformObject
00008578                            
00008578                            Obj18_Action:				; XREF: Obj18_Index
00008578 6100 0000                  		bsr.w	Obj18_Move
0000857C 6100 0000                  		bsr.w	Obj18_Nudge
00008580 6100 0000                  		bsr.w	DisplaySprite
00008584 6000 0000                  		bra.w	Obj18_ChkDel
00008588                            ; ===========================================================================
00008588                            
00008588                            Obj18_Action2:				; XREF: Obj18_Index
00008588 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000858E 6700                       		beq.s	loc_7F06
00008590 5828 0038                  		addq.b	#4,$38(a0)
00008594                            
00008594                            loc_7F06:
00008594 7200                       		moveq	#0,d1
00008596 1228 0019                  		move.b	$19(a0),d1
0000859A 6100 F6BA                  		bsr.w	ExitPlatform
0000859E 3F28 0008                  		move.w	8(a0),-(sp)
000085A2 6100 0000                  		bsr.w	Obj18_Move
000085A6 6100 0000                  		bsr.w	Obj18_Nudge
000085AA 341F                       		move.w	(sp)+,d2
000085AC 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000085B0 6100 0000                  		bsr.w	DisplaySprite
000085B4 6000 0000                  		bra.w	Obj18_ChkDel
000085B8                            
000085B8 4E75                       		rts
000085BA                            
000085BA                            ; ---------------------------------------------------------------------------
000085BA                            ; Subroutine to	move platform slightly when you	stand on it
000085BA                            ; ---------------------------------------------------------------------------
000085BA                            
000085BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085BA                            
000085BA                            
000085BA                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000085BA 1028 0038                  		move.b	$38(a0),d0
000085BE 6100 A776                  		bsr.w	CalcSine
000085C2 323C 0400                  		move.w	#$400,d1
000085C6 C1C1                       		muls.w	d1,d0
000085C8 4840                       		swap	d0
000085CA D068 002C                  		add.w	$2C(a0),d0
000085CE 3140 000C                  		move.w	d0,$C(a0)
000085D2 4E75                       		rts	
000085D4                            ; End of function Obj18_Nudge
000085D4                            
000085D4                            ; ---------------------------------------------------------------------------
000085D4                            ; Subroutine to	move platforms
000085D4                            ; ---------------------------------------------------------------------------
000085D4                            
000085D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085D4                            
000085D4                            
000085D4                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000085D4 7000                       		moveq	#0,d0
000085D6 1028 0028                  		move.b	$28(a0),d0
000085DA 0240 000F                  		andi.w	#$F,d0
000085DE D040                       		add.w	d0,d0
000085E0 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000085E4 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000085E8                            ; End of function Obj18_Move
000085E8                            
000085E8                            ; ===========================================================================
000085E8 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000085EC 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000085F0 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000085F4 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000085F8 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000085FC 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008600 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008602                            ; ===========================================================================
00008602                            
00008602                            Obj18_Type00:
00008602 4E75                       		rts			; platform 00 doesn't move
00008604                            ; ===========================================================================
00008604                            
00008604                            Obj18_Type05:
00008604 3028 0032                  		move.w	$32(a0),d0
00008608 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000860C 4401                       		neg.b	d1		; reverse platform-motion
0000860E 0601 0040                  		addi.b	#$40,d1
00008612 6000                       		bra.s	Obj18_01_Move
00008614                            ; ===========================================================================
00008614                            
00008614                            Obj18_Type01:
00008614 3028 0032                  		move.w	$32(a0),d0
00008618 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000861C 0401 0040                  		subi.b	#$40,d1
00008620                            
00008620                            Obj18_01_Move:
00008620 4881                       		ext.w	d1
00008622 D041                       		add.w	d1,d0
00008624 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008628 6000 0000                  		bra.w	Obj18_ChgMotion
0000862C                            ; ===========================================================================
0000862C                            
0000862C                            Obj18_Type0C:
0000862C 3028 0034                  		move.w	$34(a0),d0
00008630 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008634 4401                       		neg.b	d1		; reverse platform-motion
00008636 0601 0030                  		addi.b	#$30,d1
0000863A 6000                       		bra.s	Obj18_02_Move
0000863C                            ; ===========================================================================
0000863C                            
0000863C                            Obj18_Type0B:
0000863C 3028 0034                  		move.w	$34(a0),d0
00008640 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008644 0401 0030                  		subi.b	#$30,d1
00008648 6000                       		bra.s	Obj18_02_Move
0000864A                            ; ===========================================================================
0000864A                            
0000864A                            Obj18_Type06:
0000864A 3028 0034                  		move.w	$34(a0),d0
0000864E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008652 4401                       		neg.b	d1		; reverse platform-motion
00008654 0601 0040                  		addi.b	#$40,d1
00008658 6000                       		bra.s	Obj18_02_Move
0000865A                            ; ===========================================================================
0000865A                            
0000865A                            Obj18_Type02:
0000865A 3028 0034                  		move.w	$34(a0),d0
0000865E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008662 0401 0040                  		subi.b	#$40,d1
00008666                            
00008666                            Obj18_02_Move:
00008666 4881                       		ext.w	d1
00008668 D041                       		add.w	d1,d0
0000866A 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000866E 6000 0000                  		bra.w	Obj18_ChgMotion
00008672                            ; ===========================================================================
00008672                            
00008672                            Obj18_Type03:
00008672 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008676 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008678 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000867E 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008680 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008686                            
00008686                            Obj18_03_NoMove:
00008686 4E75                       		rts	
00008688                            ; ===========================================================================
00008688                            
00008688                            Obj18_03_Wait:
00008688 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000868C 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000868E 317C 0020 003A             		move.w	#32,$3A(a0)
00008694 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008698 4E75                       		rts	
0000869A                            ; ===========================================================================
0000869A                            
0000869A                            Obj18_Type04:
0000869A 4A68 003A                  		tst.w	$3A(a0)
0000869E 6700                       		beq.s	loc_8048
000086A0 5368 003A                  		subq.w	#1,$3A(a0)
000086A4 6600                       		bne.s	loc_8048
000086A6 0828 0003 0022             		btst	#3,$22(a0)
000086AC 6700                       		beq.s	loc_8042
000086AE 08E9 0001 0022             		bset	#1,$22(a1)
000086B4 08A9 0003 0022             		bclr	#3,$22(a1)
000086BA 137C 0002 0024             		move.b	#2,$24(a1)
000086C0 08A8 0003 0022             		bclr	#3,$22(a0)
000086C6 4228 0025                  		clr.b	$25(a0)
000086CA 3368 0012 0012             		move.w	$12(a0),$12(a1)
000086D0                            
000086D0                            loc_8042:
000086D0 117C 0008 0024             		move.b	#8,$24(a0)
000086D6                            
000086D6                            loc_8048:
000086D6 2628 002C                  		move.l	$2C(a0),d3
000086DA 3028 0012                  		move.w	$12(a0),d0
000086DE 48C0                       		ext.l	d0
000086E0 E180                       		asl.l	#8,d0
000086E2 D680                       		add.l	d0,d3
000086E4 2143 002C                  		move.l	d3,$2C(a0)
000086E8 0668 0038 0012             		addi.w	#$38,$12(a0)
000086EE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000086F2 0640 00E0                  		addi.w	#$E0,d0
000086F6 B068 002C                  		cmp.w	$2C(a0),d0
000086FA 6400                       		bcc.s	locret_8074
000086FC 117C 0006 0024             		move.b	#6,$24(a0)
00008702                            
00008702                            locret_8074:
00008702 4E75                       		rts	
00008704                            ; ===========================================================================
00008704                            
00008704                            Obj18_Type07:
00008704 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008708 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000870A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000870E 7000                       		moveq	#0,d0
00008710 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008714 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008716 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000871A 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000871C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008722                            
00008722                            Obj18_07_NoMove:
00008722 4E75                       		rts	
00008724                            ; ===========================================================================
00008724                            
00008724                            Obj18_07_Wait:
00008724 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008728 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000872A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000872E 4E75                       		rts	
00008730                            ; ===========================================================================
00008730                            
00008730                            Obj18_Type08:
00008730 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008734 3028 0034                  		move.w	$34(a0),d0
00008738 0440 0200                  		subi.w	#$200,d0
0000873C B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008740 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008742 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008746                            
00008746                            Obj18_08_NoStop:
00008746 4E75                       		rts	
00008748                            ; ===========================================================================
00008748                            
00008748                            Obj18_Type0A:
00008748 3028 0034                  		move.w	$34(a0),d0
0000874C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008750 0401 0040                  		subi.b	#$40,d1
00008754 4881                       		ext.w	d1
00008756 E241                       		asr.w	#1,d1
00008758 D041                       		add.w	d1,d0
0000875A 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000875E                            
0000875E                            Obj18_ChgMotion:
0000875E 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008764 4E75                       		rts	
00008766                            ; ===========================================================================
00008766                            
00008766                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008766 3028 0032                  		move.w	$32(a0),d0
0000876A 0240 FF80                  		andi.w	#$FF80,d0
0000876E 3238 F700                  		move.w	($FFFFF700).w,d1
00008772 0441 0080                  		subi.w	#$80,d1
00008776 0241 FF80                  		andi.w	#$FF80,d1
0000877A 9041                       		sub.w	d1,d0
0000877C 0C40 0280                  		cmpi.w	#$280,d0
00008780 6200                       		bhi.s	Obj18_Delete
00008782 4E75                       		rts	
00008784                            ; ===========================================================================
00008784                            
00008784                            Obj18_Delete:				; XREF: Obj18_Index
00008784 6000 0000                  		bra.w	DeleteObject
00008788                            ; ===========================================================================
00008788                            ; ---------------------------------------------------------------------------
00008788                            ; Sprite mappings - unused
00008788                            ; ---------------------------------------------------------------------------
00008788                            Map_obj18x:
00008788                            	include "_maps\obj18x.asm"
00008788                            ; ---------------------------------------------------------------------------
00008788                            ; Sprite mappings - unused
00008788                            ; ---------------------------------------------------------------------------
00008788 0000                       		dc.w byte_80FE-Map_obj18x
0000878A 0000                       		dc.w byte_8109-Map_obj18x
0000878C 02                         byte_80FE:	dc.b 2
0000878D F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008792 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008797 0A                         byte_8109:	dc.b $A
00008798 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000879D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000087A2 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000087A7 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000087AC 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000087B1 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000087B6 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000087BB 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000087C0 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000087C5 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000087CA                            		even
000087CA                            		even
000087CA                            
000087CA                            ; ---------------------------------------------------------------------------
000087CA                            ; Sprite mappings - GHZ	platforms
000087CA                            ; ---------------------------------------------------------------------------
000087CA                            Map_obj18:
000087CA                            	include "_maps\obj18ghz.asm"
000087CA                            ; ---------------------------------------------------------------------------
000087CA                            ; Sprite mappings - GHZ	platforms
000087CA                            ; ---------------------------------------------------------------------------
000087CA 0000                       		dc.w byte_8140-Map_obj18
000087CC 0000                       		dc.w byte_8155-Map_obj18
000087CE 04                         byte_8140:	dc.b 4
000087CF F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000087D4 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000087D9 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000087DE F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000087E3 0A                         byte_8155:	dc.b $A
000087E4 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000087E9 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000087EE 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000087F3 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000087F8 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000087FD F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008802 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008807 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000880C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008811 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008816                            		even
00008816                            		even
00008816                            
00008816                            ; ---------------------------------------------------------------------------
00008816                            ; Sprite mappings - SYZ	platforms
00008816                            ; ---------------------------------------------------------------------------
00008816                            Map_obj18a:
00008816                            	include "_maps\obj18syz.asm"
00008816                            ; ---------------------------------------------------------------------------
00008816                            ; Sprite mappings - SYZ	platforms
00008816                            ; ---------------------------------------------------------------------------
00008816 0000                       		dc.w byte_818A-Map_obj18a
00008818 03                         byte_818A:	dc.b 3
00008819 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000881E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008823 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008828                            		even
00008828                            		even
00008828                            
00008828                            ; ---------------------------------------------------------------------------
00008828                            ; Sprite mappings - SLZ	platforms
00008828                            ; ---------------------------------------------------------------------------
00008828                            Map_obj18b:
00008828                            	include "_maps\obj18slz.asm"
00008828                            ; ---------------------------------------------------------------------------
00008828                            ; Sprite mappings - SLZ	platforms
00008828                            ; ---------------------------------------------------------------------------
00008828 0000                       		dc.w byte_819C-Map_obj18b
0000882A 02                         byte_819C:	dc.b 2
0000882B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008830 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008836 00                         		even
00008836 00                         		even
00008836                            
00008836                            ; ===========================================================================
00008836                            ; ---------------------------------------------------------------------------
00008836                            ; Object 19 - Pearto bombs
00008836                            ; ---------------------------------------------------------------------------
00008836                            Obj19:					; XREF: Obj_Index
00008836 7000                       		moveq	#0,d0
00008838 1028 0024                  		move.b	$24(a0),d0
0000883C 323B 0000                  		move.w	off_7070(pc,d0.w),d1
00008840 4EFB 1000                  		jmp	off_7070(pc,d1.w)
00008844                            ; ---------------------------------------------------------------------------
00008844                            
00008844 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
0000884A                            ; ---------------------------------------------------------------------------
0000884A                            
0000884A                            loc_7076:
0000884A 5428 0024                  		addq.b	#2,$24(a0)
0000884E 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
00008856 317C 0480 0002             		move.w	#($9000/$20),2(a0)
0000885C 117C 0004 0001             		move.b	#4,1(a0)
00008862 117C 0003 0019             		move.b	#3,$19(a0)
00008868 117C 0087 0020             		move.b	#$87,$20(a0)
0000886E 117C 0008 0018             		move.b	#8,$18(a0)
00008874 317C 0018 0030             		move.w	#$18,$30(a0)
0000887A                            
0000887A                            loc_70A6:
0000887A 0828 0007 0022             		btst	#7,$22(a0)
00008880 6600                       		bne.s	loc_70C2
00008882 4A68 0030                  		tst.w	$30(a0)
00008886 6600                       		bne.s	loc_70D2
00008888 4EB9 0000 0000             		jsr	ObjHitFloor
0000888E 4A41                       		tst.w	d1
00008890 6A00                       		bpl.s	loc_70D6
00008892 D368 000C                  		add.w	d1,$C(a0)
00008896                            
00008896                            loc_70C2:
00008896 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
0000889A 117C 0000 0024             		move.b	#0,$24(a0)
000088A0                            ; ---------------------------------------------------------------------------
000088A0                            
000088A0                            loc_70D2:
000088A0 5368 0030                  		subq.w	#1,$30(a0)
000088A4                            
000088A4                            loc_70D6:
000088A4 6100 0000                  		bsr.w	ObjectFall
000088A8 6100 0000                  		bsr.w	DisplaySprite
000088AC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000088B0 0640 00E0                  		addi.w	#$E0,d0
000088B4 B068 000C                  		cmp.w	$C(a0),d0
000088B8 6500                       		bcs.s	loc_70EE
000088BA 4E75                       		rts
000088BC                            ; ---------------------------------------------------------------------------
000088BC                            
000088BC                            loc_70EE:
000088BC 6100 0000                  		bsr.w	DeleteObject
000088C0 4E75                       		rts
000088C2                            		
000088C2                            Map_obj19:
000088C2                            	include "_maps\obj19.asm"
000088C2                            Map_02b4:
000088C2 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
000088C4 01                         Map_02b4_2: 	dc.b $1
000088C5 F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
000088CA                            	even
000088CA                            	even
000088CA                            ; ===========================================================================
000088CA                            ; ---------------------------------------------------------------------------
000088CA                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000088CA                            ; ---------------------------------------------------------------------------
000088CA                            Map_obj48:
000088CA                            	include "_maps\obj48.asm"
000088CA                            ; ---------------------------------------------------------------------------
000088CA                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000088CA                            ; ---------------------------------------------------------------------------
000088CA 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000088CE 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000088D2 06                         byte_81B2:	dc.b 6
000088D3 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000088D8 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000088DD E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000088E2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000088E7 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000088EC 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000088F1 04                         byte_81D1:	dc.b 4
000088F2 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000088F7 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000088FC 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008901 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008906 04                         byte_81E6:	dc.b 4
00008907 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000890C E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008911 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008916 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000891B 04                         byte_81FB:	dc.b 4
0000891C E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008921 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008926 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000892B 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008930                            		even
00008930                            		even
00008930                            
00008930                            ; ===========================================================================
00008930                            ; ---------------------------------------------------------------------------
00008930                            ; Object 1A - GHZ collapsing ledge
00008930                            ; ---------------------------------------------------------------------------
00008930                            
00008930                            Obj1A:					; XREF: Obj_Index
00008930 7000                       		moveq	#0,d0
00008932 1028 0024                  		move.b	$24(a0),d0
00008936 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000893A 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000893E                            ; ===========================================================================
0000893E 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008942 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008946 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000894A                            ; ===========================================================================
0000894A                            
0000894A                            Obj1A_Main:				; XREF: Obj1A_Index
0000894A 5428 0024                  		addq.b	#2,$24(a0)
0000894E 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008956 317C 4000 0002             		move.w	#$4000,2(a0)
0000895C 0028 0004 0001             		ori.b	#4,1(a0)
00008962 117C 0004 0018             		move.b	#4,$18(a0)
00008968 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000896E 117C 0064 0019             		move.b	#$64,$19(a0)
00008974 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000897A 117C 0038 0016             		move.b	#$38,$16(a0)
00008980 08E8 0004 0001             		bset	#4,1(a0)
00008986                            
00008986                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008986 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000898A 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000898C 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008990 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008994 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008998                            
00008998                            Obj1A_Slope:
00008998 323C 0030                  		move.w	#$30,d1
0000899C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000089A2 6100 F212                  		bsr.w	SlopeObject
000089A6 6000 0000                  		bra.w	MarkObjGone
000089AA                            ; ===========================================================================
000089AA                            
000089AA                            Obj1A_Touch:				; XREF: Obj1A_Index
000089AA 4A28 0038                  		tst.b	$38(a0)
000089AE 6700 0000                  		beq.w	loc_847A
000089B2 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000089B8 5328 0038                  		subq.b	#1,$38(a0)
000089BC                            
000089BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089BC                            
000089BC                            
000089BC                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000089BC 323C 0030                  		move.w	#$30,d1
000089C0 6100 F294                  		bsr.w	ExitPlatform
000089C4 323C 0030                  		move.w	#$30,d1
000089C8 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000089CE 3428 0008                  		move.w	8(a0),d2
000089D2 6100 0000                  		bsr.w	SlopeObject2
000089D6 6000 0000                  		bra.w	MarkObjGone
000089DA                            ; End of function Obj1A_WalkOff
000089DA                            
000089DA                            ; ===========================================================================
000089DA                            
000089DA                            Obj1A_Display:				; XREF: Obj1A_Index
000089DA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000089DE 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000089E0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000089E4 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000089E8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000089EC 6000 0000                  		bra.w	DisplaySprite
000089F0                            ; ===========================================================================
000089F0                            
000089F0                            loc_82D0:				; XREF: Obj1A_Display
000089F0 5328 0038                  		subq.b	#1,$38(a0)
000089F4 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000089F8 43F8 D000                  		lea	($FFFFD000).w,a1
000089FC 0829 0003 0022             		btst	#3,$22(a1)
00008A02 6700                       		beq.s	loc_82FC
00008A04 4A28 0038                  		tst.b	$38(a0)
00008A08 6600                       		bne.s	locret_8308
00008A0A 08A9 0003 0022             		bclr	#3,$22(a1)
00008A10 08A9 0005 0022             		bclr	#5,$22(a1)
00008A16 137C 0001 001D             		move.b	#1,$1D(a1)
00008A1C                            
00008A1C                            loc_82FC:
00008A1C 117C 0000 003A             		move.b	#0,$3A(a0)
00008A22 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008A28                            
00008A28                            locret_8308:
00008A28 4E75                       		rts	
00008A2A                            ; ===========================================================================
00008A2A                            
00008A2A                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008A2A 6100 0000                  		bsr.w	ObjectFall
00008A2E 6100 0000                  		bsr.w	DisplaySprite
00008A32 4A28 0001                  		tst.b	1(a0)
00008A36 6A00                       		bpl.s	Obj1A_Delete
00008A38 4E75                       		rts	
00008A3A                            ; ===========================================================================
00008A3A                            
00008A3A                            Obj1A_Delete:				; XREF: Obj1A_Index
00008A3A 6100 0000                  		bsr.w	DeleteObject
00008A3E 4E75                       		rts	
00008A40                            ; ===========================================================================
00008A40                            ; ---------------------------------------------------------------------------
00008A40                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008A40                            ; ---------------------------------------------------------------------------
00008A40                            
00008A40                            Obj53:					; XREF: Obj_Index
00008A40 7000                       		moveq	#0,d0
00008A42 1028 0024                  		move.b	$24(a0),d0
00008A46 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008A4A 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008A4E                            ; ===========================================================================
00008A4E 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008A52 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008A56 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008A5A                            ; ===========================================================================
00008A5A                            
00008A5A                            Obj53_Main:				; XREF: Obj53_Index
00008A5A 5428 0024                  		addq.b	#2,$24(a0)
00008A5E 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008A66 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008A6C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A72 6600                       		bne.s	Obj53_NotSLZ
00008A74 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008A7A 5428 001A                  		addq.b	#2,$1A(a0)
00008A7E                            
00008A7E                            Obj53_NotSLZ:
00008A7E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008A84 6600                       		bne.s	Obj53_NotSBZ
00008A86 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008A8C                            
00008A8C                            Obj53_NotSBZ:
00008A8C 0028 0004 0001             		ori.b	#4,1(a0)
00008A92 117C 0004 0018             		move.b	#4,$18(a0)
00008A98 117C 0007 0038             		move.b	#7,$38(a0)
00008A9E 117C 0044 0019             		move.b	#$44,$19(a0)
00008AA4                            
00008AA4                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008AA4 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008AA8 6700                       		beq.s	Obj53_Solid	; if not, branch
00008AAA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008AAE 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008AB2 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008AB6                            
00008AB6                            Obj53_Solid:
00008AB6 323C 0020                  		move.w	#$20,d1
00008ABA 6100 F026                  		bsr.w	PlatformObject
00008ABE 4A28 0028                  		tst.b	$28(a0)
00008AC2 6A00                       		bpl.s	Obj53_MarkAsGone
00008AC4 0829 0003 0022             		btst	#3,$22(a1)
00008ACA 6700                       		beq.s	Obj53_MarkAsGone
00008ACC 08A8 0000 0001             		bclr	#0,1(a0)
00008AD2 3029 0008                  		move.w	8(a1),d0
00008AD6 9068 0008                  		sub.w	8(a0),d0
00008ADA 6400                       		bcc.s	Obj53_MarkAsGone
00008ADC 08E8 0000 0001             		bset	#0,1(a0)
00008AE2                            
00008AE2                            Obj53_MarkAsGone:
00008AE2 6000 0000                  		bra.w	MarkObjGone
00008AE6                            ; ===========================================================================
00008AE6                            
00008AE6                            Obj53_Touch:				; XREF: Obj53_Index
00008AE6 4A28 0038                  		tst.b	$38(a0)
00008AEA 6700 0000                  		beq.w	loc_8458
00008AEE 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008AF4 5328 0038                  		subq.b	#1,$38(a0)
00008AF8                            
00008AF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AF8                            
00008AF8                            
00008AF8                            Obj53_WalkOff:				; XREF: Obj53_Index
00008AF8 323C 0020                  		move.w	#$20,d1
00008AFC 6100 F158                  		bsr.w	ExitPlatform
00008B00 3428 0008                  		move.w	8(a0),d2
00008B04 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008B08 6000 0000                  		bra.w	MarkObjGone
00008B0C                            ; End of function Obj53_WalkOff
00008B0C                            
00008B0C                            ; ===========================================================================
00008B0C                            
00008B0C                            Obj53_Display:				; XREF: Obj53_Index
00008B0C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008B10 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008B12 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008B16 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008B1A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B1E 6000 0000                  		bra.w	DisplaySprite
00008B22                            ; ===========================================================================
00008B22                            
00008B22                            loc_8402:
00008B22 5328 0038                  		subq.b	#1,$38(a0)
00008B26 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008B2A 43F8 D000                  		lea	($FFFFD000).w,a1
00008B2E 0829 0003 0022             		btst	#3,$22(a1)
00008B34 6700                       		beq.s	loc_842E
00008B36 4A28 0038                  		tst.b	$38(a0)
00008B3A 6600                       		bne.s	locret_843A
00008B3C 08A9 0003 0022             		bclr	#3,$22(a1)
00008B42 08A9 0005 0022             		bclr	#5,$22(a1)
00008B48 137C 0001 001D             		move.b	#1,$1D(a1)
00008B4E                            
00008B4E                            loc_842E:
00008B4E 117C 0000 003A             		move.b	#0,$3A(a0)
00008B54 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008B5A                            
00008B5A                            locret_843A:
00008B5A 4E75                       		rts	
00008B5C                            ; ===========================================================================
00008B5C                            
00008B5C                            Obj53_TimeZero:				; XREF: Obj53_Display
00008B5C 6100 0000                  		bsr.w	ObjectFall
00008B60 6100 0000                  		bsr.w	DisplaySprite
00008B64 4A28 0001                  		tst.b	1(a0)
00008B68 6A00                       		bpl.s	Obj53_Delete
00008B6A 4E75                       		rts	
00008B6C                            ; ===========================================================================
00008B6C                            
00008B6C                            Obj53_Delete:				; XREF: Obj53_Index
00008B6C 6100 0000                  		bsr.w	DeleteObject
00008B70 4E75                       		rts	
00008B72                            ; ===========================================================================
00008B72                            
00008B72                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008B72 117C 0000 003A             		move.b	#0,$3A(a0)
00008B78                            
00008B78                            loc_8458:				; XREF: Obj53_Touch
00008B78 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008B7E 0828 0000 0028             		btst	#0,$28(a0)
00008B84 6700                       		beq.s	loc_846C
00008B86 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008B8C                            
00008B8C                            loc_846C:
00008B8C 7207                       		moveq	#7,d1
00008B8E 5228 001A                  		addq.b	#1,$1A(a0)
00008B92 6000                       		bra.s	loc_8486
00008B94                            ; ===========================================================================
00008B94                            
00008B94                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008B94 117C 0000 003A             		move.b	#0,$3A(a0)
00008B9A                            
00008B9A                            loc_847A:				; XREF: Obj1A_Touch
00008B9A 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008BA0 7218                       		moveq	#$18,d1
00008BA2 5428 001A                  		addq.b	#2,$1A(a0)
00008BA6                            
00008BA6                            loc_8486:				; XREF: Obj53_Collapse
00008BA6 7000                       		moveq	#0,d0
00008BA8 1028 001A                  		move.b	$1A(a0),d0
00008BAC D040                       		add.w	d0,d0
00008BAE 2668 0004                  		movea.l	4(a0),a3
00008BB2 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008BB6 524B                       		addq.w	#1,a3
00008BB8 08E8 0005 0001             		bset	#5,1(a0)
00008BBE 1810                       		move.b	0(a0),d4
00008BC0 1A28 0001                  		move.b	1(a0),d5
00008BC4 2248                       		movea.l	a0,a1
00008BC6 6000                       		bra.s	loc_84B2
00008BC8                            ; ===========================================================================
00008BC8                            
00008BC8                            loc_84AA:
00008BC8 6100 0000                  		bsr.w	SingleObjLoad
00008BCC 6600                       		bne.s	loc_84F2
00008BCE 5A4B                       		addq.w	#5,a3
00008BD0                            
00008BD0                            loc_84B2:
00008BD0 137C 0006 0024             		move.b	#6,$24(a1)
00008BD6 1284                       		move.b	d4,0(a1)
00008BD8 234B 0004                  		move.l	a3,4(a1)
00008BDC 1345 0001                  		move.b	d5,1(a1)
00008BE0 3368 0008 0008             		move.w	8(a0),8(a1)
00008BE6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008BEC 3368 0002 0002             		move.w	2(a0),2(a1)
00008BF2 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008BF8 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008BFE 135C 0038                  		move.b	(a4)+,$38(a1)
00008C02 B3C8                       		cmpa.l	a0,a1
00008C04 6400                       		bcc.s	loc_84EE
00008C06 6100 0000                  		bsr.w	DisplaySprite2
00008C0A                            
00008C0A                            loc_84EE:
00008C0A 51C9 FFBC                  		dbf	d1,loc_84AA
00008C0E                            
00008C0E                            loc_84F2:
00008C0E 6100 0000                  		bsr.w	DisplaySprite
00008C12 303C 00B9                  		move.w	#$B9,d0
00008C16 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008C1C                            ; ===========================================================================
00008C1C                            ; ---------------------------------------------------------------------------
00008C1C                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008C1C                            ; ---------------------------------------------------------------------------
00008C1C 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008C2C 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008C36 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008C3E 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008C46                            
00008C46                            ; ---------------------------------------------------------------------------
00008C46                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008C46                            ; ---------------------------------------------------------------------------
00008C46                            
00008C46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C46                            
00008C46                            
00008C46                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008C46 43F8 D000                  		lea	($FFFFD000).w,a1
00008C4A 0829 0003 0022             		btst	#3,$22(a1)
00008C50 6700                       		beq.s	locret_856E
00008C52 3029 0008                  		move.w	8(a1),d0
00008C56 9068 0008                  		sub.w	8(a0),d0
00008C5A D041                       		add.w	d1,d0
00008C5C E248                       		lsr.w	#1,d0
00008C5E 0828 0000 0001             		btst	#0,1(a0)
00008C64 6700                       		beq.s	loc_854E
00008C66 4640                       		not.w	d0
00008C68 D041                       		add.w	d1,d0
00008C6A                            
00008C6A                            loc_854E:
00008C6A 7200                       		moveq	#0,d1
00008C6C 1232 0000                  		move.b	(a2,d0.w),d1
00008C70 3028 000C                  		move.w	$C(a0),d0
00008C74 9041                       		sub.w	d1,d0
00008C76 7200                       		moveq	#0,d1
00008C78 1229 0016                  		move.b	$16(a1),d1
00008C7C 9041                       		sub.w	d1,d0
00008C7E 3340 000C                  		move.w	d0,$C(a1)
00008C82 9468 0008                  		sub.w	8(a0),d2
00008C86 9569 0008                  		sub.w	d2,8(a1)
00008C8A                            
00008C8A                            locret_856E:
00008C8A 4E75                       		rts	
00008C8C                            ; End of function SlopeObject2
00008C8C                            
00008C8C                            ; ===========================================================================
00008C8C                            ; ---------------------------------------------------------------------------
00008C8C                            ; Collision data for GHZ collapsing ledge
00008C8C                            ; ---------------------------------------------------------------------------
00008C8C                            Obj1A_SlopeData:
00008C8C                            		incbin	misc\ghzledge.bin
00008CBC                            		even
00008CBC                            
00008CBC                            ; ---------------------------------------------------------------------------
00008CBC                            ; Sprite mappings - GHZ	collapsing ledge
00008CBC                            ; ---------------------------------------------------------------------------
00008CBC                            Map_obj1A:
00008CBC                            	include "_maps\obj1A.asm"
00008CBC                            ; ---------------------------------------------------------------------------
00008CBC                            ; Sprite mappings - GHZ	collapsing ledge
00008CBC                            ; ---------------------------------------------------------------------------
00008CBC 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008CC0 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008CC4 10                         byte_85A8:	dc.b $10
00008CC5 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008CCA D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008CCF E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008CD4 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008CD9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008CDE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008CE3 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008CE8 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008CED F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CF2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008CF7 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CFC 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D01 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008D06 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008D0B 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008D10 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D15 10                         byte_85F9:	dc.b $10
00008D16 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008D1B D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008D20 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008D25 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008D2A D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D2F D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008D34 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008D39 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008D3E F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D43 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008D48 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008D4D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D52 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008D57 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008D5C 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008D61 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D66 19                         byte_864A:	dc.b $19
00008D67 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008D6C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D71 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D76 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D7B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D80 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D85 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D8A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D8F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D94 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008D99 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D9E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008DA3 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008DA8 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008DAD F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008DB2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008DB7 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008DBC 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008DC1 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008DC6 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008DCB 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008DD0 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008DD5 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008DDA 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008DDF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008DE4 19                         byte_86C8:	dc.b $19
00008DE5 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008DEA C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008DEF D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008DF4 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008DF9 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008DFE E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008E03 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008E08 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008E0D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E12 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008E17 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008E1C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008E21 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008E26 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008E2B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E30 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008E35 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008E3A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008E3F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E44 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008E49 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008E4E 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008E53 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008E58 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008E5D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E62                            		even
00008E62                            		even
00008E62                            
00008E62                            ; ---------------------------------------------------------------------------
00008E62                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E62                            ; ---------------------------------------------------------------------------
00008E62                            Map_obj53:
00008E62                            	include "_maps\obj53.asm"
00008E62                            ; ---------------------------------------------------------------------------
00008E62                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E62                            ; ---------------------------------------------------------------------------
00008E62 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008E66 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008E6A 04                         byte_874E:	dc.b 4
00008E6B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008E70 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008E75 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E7A 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008E7F 08                         byte_8763:	dc.b 8
00008E80 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E85 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008E8A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E8F F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008E94 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008E99 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008E9E 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008EA3 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008EA8 04                         byte_878C:	dc.b 4
00008EA9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008EAE 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008EB3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008EB8 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008EBD 08                         byte_87A1:	dc.b 8
00008EBE F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008EC3 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008EC8 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008ECD F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008ED2 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008ED7 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008EDC 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008EE1 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008EE6                            		even
00008EE6                            		even
00008EE6                            
00008EE6                            ; ===========================================================================
00008EE6                            ; ---------------------------------------------------------------------------
00008EE6                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008EE6                            ; ---------------------------------------------------------------------------
00008EE6                            
00008EE6                            Obj1C:					; XREF: Obj_Index
00008EE6 7000                       		moveq	#0,d0
00008EE8 1028 0024                  		move.b	$24(a0),d0
00008EEC 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008EF0 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008EF4                            ; ===========================================================================
00008EF4 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008EF6 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008EF8                            ; ===========================================================================
00008EF8                            
00008EF8                            Obj1C_Main:				; XREF: Obj1C_Index
00008EF8 5428 0024                  		addq.b	#2,$24(a0)
00008EFC 7000                       		moveq	#0,d0
00008EFE 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008F02 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008F06 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008F0A 2159 0004                  		move.l	(a1)+,4(a0)
00008F0E 3159 0002                  		move.w	(a1)+,2(a0)
00008F12 0028 0004 0001             		ori.b	#4,1(a0)
00008F18 1159 001A                  		move.b	(a1)+,$1A(a0)
00008F1C 1159 0019                  		move.b	(a1)+,$19(a0)
00008F20 1159 0018                  		move.b	(a1)+,$18(a0)
00008F24 1159 0020                  		move.b	(a1)+,$20(a0)
00008F28                            
00008F28                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008F28 3028 0008                  		move.w	8(a0),d0
00008F2C 0240 FF80                  		andi.w	#$FF80,d0
00008F30 3238 F700                  		move.w	($FFFFF700).w,d1
00008F34 0441 0080                  		subi.w	#$80,d1
00008F38 0241 FF80                  		andi.w	#$FF80,d1
00008F3C 9041                       		sub.w	d1,d0
00008F3E 0C40 0280                  		cmpi.w	#$280,d0
00008F42 6200 0000                  		bhi.w	DeleteObject
00008F46 6000 0000                  		bra.w	DisplaySprite
00008F4A                            ; ===========================================================================
00008F4A                            ; ---------------------------------------------------------------------------
00008F4A                            ; Variables for	object $1C are stored in an array
00008F4A                            ; ---------------------------------------------------------------------------
00008F4A 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008F4E 44D8                       		dc.w $44D8		; VRAM setting
00008F50 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008F54 0000 0000                  		dc.l Map_obj1C
00008F58 44D8                       		dc.w $44D8
00008F5A 0008 0200                  		dc.b 0,	8, 2, 0
00008F5E 0000 0000                  		dc.l Map_obj1C
00008F62 44D8                       		dc.w $44D8
00008F64 0008 0200                  		dc.b 0,	8, 2, 0
00008F68 0000 7FCA                  		dc.l Map_obj11
00008F6C 438E                       		dc.w $438E
00008F6E 0110 0100                  		dc.b 1,	$10, 1,	0
00008F72                            ; ---------------------------------------------------------------------------
00008F72                            ; Sprite mappings - SLZ	lava thrower
00008F72                            ; ---------------------------------------------------------------------------
00008F72                            Map_obj1C:
00008F72                            	include "_maps\obj1C.asm"
00008F72                            ; ---------------------------------------------------------------------------
00008F72                            ; Sprite mappings - SLZ	lava thrower
00008F72                            ; ---------------------------------------------------------------------------
00008F72 0000                       		dc.w byte_8858-Map_obj1C
00008F74 01                         byte_8858:	dc.b 1
00008F75 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008F7A                            		even
00008F7A                            		even
00008F7A                            
00008F7A                            ; ===========================================================================
00008F7A                            ; ---------------------------------------------------------------------------
00008F7A                            ; Object 1D - switch that activates when Sonic touches it
00008F7A                            ; (this	is not used anywhere in	the game)
00008F7A                            ; ---------------------------------------------------------------------------
00008F7A                            
00008F7A                            Obj1D:					; XREF: Obj_Index
00008F7A 7000                       		moveq	#0,d0
00008F7C 1028 0024                  		move.b	$24(a0),d0
00008F80 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008F84 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008F88                            ; ===========================================================================
00008F88 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008F8A 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008F8C 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008F8E                            ; ===========================================================================
00008F8E                            
00008F8E                            Obj1D_Main:				; XREF: Obj1D_Index
00008F8E 5428 0024                  		addq.b	#2,$24(a0)
00008F92 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008F9A 317C 4000 0002             		move.w	#$4000,2(a0)
00008FA0 117C 0004 0001             		move.b	#4,1(a0)
00008FA6 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008FAC 117C 0010 0019             		move.b	#$10,$19(a0)
00008FB2 117C 0005 0018             		move.b	#5,$18(a0)
00008FB8                            
00008FB8                            Obj1D_Action:				; XREF: Obj1D_Index
00008FB8 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008FBE 323C 0010                  		move.w	#$10,d1
00008FC2 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008FC6 6700                       		beq.s	Obj1D_ChkDel
00008FC8 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008FCC 7001                       		moveq	#1,d0
00008FCE 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008FD2                            
00008FD2                            Obj1D_ChkDel:
00008FD2 6100 0000                  		bsr.w	DisplaySprite
00008FD6 3028 0008                  		move.w	8(a0),d0
00008FDA 0240 FF80                  		andi.w	#$FF80,d0
00008FDE 3238 F700                  		move.w	($FFFFF700).w,d1
00008FE2 0441 0080                  		subi.w	#$80,d1
00008FE6 0241 FF80                  		andi.w	#$FF80,d1
00008FEA 9041                       		sub.w	d1,d0
00008FEC 0C40 0280                  		cmpi.w	#$280,d0
00008FF0 6200 0000                  		bhi.w	Obj1D_Delete
00008FF4 4E75                       		rts	
00008FF6                            ; ===========================================================================
00008FF6                            
00008FF6                            Obj1D_Delete:				; XREF: Obj1D_Index
00008FF6 6100 0000                  		bsr.w	DeleteObject
00008FFA 4E75                       		rts	
00008FFC                            ; ---------------------------------------------------------------------------
00008FFC                            ; Subroutine to	check if Sonic touches the object
00008FFC                            ; ---------------------------------------------------------------------------
00008FFC                            
00008FFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FFC                            
00008FFC                            
00008FFC                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008FFC 43F8 D000                  		lea	($FFFFD000).w,a1
00009000 3029 0008                  		move.w	8(a1),d0
00009004 9068 0008                  		sub.w	8(a0),d0
00009008 D041                       		add.w	d1,d0
0000900A 6B00                       		bmi.s	loc_8918
0000900C D241                       		add.w	d1,d1
0000900E B041                       		cmp.w	d1,d0
00009010 6400                       		bcc.s	loc_8918
00009012 3429 000C                  		move.w	$C(a1),d2
00009016 1229 0016                  		move.b	$16(a1),d1
0000901A 4881                       		ext.w	d1
0000901C D242                       		add.w	d2,d1
0000901E 3028 000C                  		move.w	$C(a0),d0
00009022 0440 0010                  		subi.w	#$10,d0
00009026 9041                       		sub.w	d1,d0
00009028 6200                       		bhi.s	loc_8918
0000902A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000902E 6500                       		bcs.s	loc_8918
00009030 70FF                       		moveq	#-1,d0
00009032 4E75                       		rts	
00009034                            ; ===========================================================================
00009034                            
00009034                            loc_8918:
00009034 7000                       		moveq	#0,d0
00009036 4E75                       		rts	
00009038                            ; End of function Obj1D_ChkTouch
00009038                            
00009038                            ; ===========================================================================
00009038                            ; ---------------------------------------------------------------------------
00009038                            ; Sprite mappings - object 1D
00009038                            ; ---------------------------------------------------------------------------
00009038                            Map_obj1D:
00009038                            	include "_maps\obj1D.asm"
00009038                            ; ---------------------------------------------------------------------------
00009038                            ; Sprite mappings - object 1D
00009038                            ; ---------------------------------------------------------------------------
00009038 0000                       		dc.w byte_891E-Map_obj1D
0000903A 04                         byte_891E:	dc.b 4
0000903B E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009040 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009045 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000904A 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009050 00                         		even
00009050 00                         		even
00009050                            
00009050                            ; ===========================================================================
00009050                            ; ---------------------------------------------------------------------------
00009050                            ; Object 2A - doors (SBZ)
00009050                            ; ---------------------------------------------------------------------------
00009050                            
00009050                            Obj2A:					; XREF: Obj_Index
00009050 7000                       		moveq	#0,d0
00009052 1028 0024                  		move.b	$24(a0),d0
00009056 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000905A 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000905E                            ; ===========================================================================
0000905E 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009060 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009062                            ; ===========================================================================
00009062                            
00009062                            Obj2A_Main:				; XREF: Obj2A_Index
00009062 5428 0024                  		addq.b	#2,$24(a0)
00009066 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000906E 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009074 0028 0004 0001             		ori.b	#4,1(a0)
0000907A 117C 0008 0019             		move.b	#8,$19(a0)
00009080 117C 0004 0018             		move.b	#4,$18(a0)
00009086                            
00009086                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009086 323C 0040                  		move.w	#$40,d1
0000908A 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000908E 3038 D008                  		move.w	($FFFFD008).w,d0
00009092 D041                       		add.w	d1,d0
00009094 B068 0008                  		cmp.w	8(a0),d0
00009098 6500                       		bcs.s	Obj2A_Animate
0000909A 9041                       		sub.w	d1,d0
0000909C 9041                       		sub.w	d1,d0
0000909E B068 0008                  		cmp.w	8(a0),d0
000090A2 6400                       		bcc.s	Obj2A_Animate
000090A4 D041                       		add.w	d1,d0
000090A6 B068 0008                  		cmp.w	8(a0),d0
000090AA 6400                       		bcc.s	loc_899A
000090AC 0828 0000 0022             		btst	#0,$22(a0)
000090B2 6600                       		bne.s	Obj2A_Animate
000090B4 6000                       		bra.s	Obj2A_Open
000090B6                            ; ===========================================================================
000090B6                            
000090B6                            loc_899A:				; XREF: Obj2A_OpenShut
000090B6 0828 0000 0022             		btst	#0,$22(a0)
000090BC 6700                       		beq.s	Obj2A_Animate
000090BE                            
000090BE                            Obj2A_Open:				; XREF: Obj2A_OpenShut
000090BE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
000090C4                            
000090C4                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
000090C4 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
000090CA 6100 0000                  		bsr.w	AnimateSprite
000090CE 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000090D2 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000090D4 323C 0011                  		move.w	#$11,d1
000090D8 343C 0020                  		move.w	#$20,d2
000090DC 3602                       		move.w	d2,d3
000090DE 5243                       		addq.w	#1,d3
000090E0 3828 0008                  		move.w	8(a0),d4
000090E4 6100 0000                  		bsr.w	SolidObject
000090E8                            
000090E8                            Obj2A_MarkAsUsed:
000090E8 6000 0000                  		bra.w	MarkObjGone
000090EC                            ; ===========================================================================
000090EC                            Ani_obj2A:
000090EC                            	include "_anim\obj2A.asm"
000090EC                            ; ---------------------------------------------------------------------------
000090EC                            ; Animation script - doors (SBZ)
000090EC                            ; ---------------------------------------------------------------------------
000090EC 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
000090EE 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
000090F0 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000090FC 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009108                            		even
00009108                            		even
00009108                            
00009108                            ; ---------------------------------------------------------------------------
00009108                            ; Sprite mappings - doors (SBZ)
00009108                            ; ---------------------------------------------------------------------------
00009108                            Map_obj2A:
00009108                            	include "_maps\obj2A.asm"
00009108                            ; ---------------------------------------------------------------------------
00009108                            ; Sprite mappings - doors (SBZ)
00009108                            ; ---------------------------------------------------------------------------
00009108 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000910C 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009110 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009114 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009118 0000                       		dc.w byte_8A56-Map_obj2A
0000911A 02                         byte_89FE:	dc.b 2
0000911B E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009120 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009125 02                         byte_8A09:	dc.b 2
00009126 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000912B 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009130 02                         byte_8A14:	dc.b 2
00009131 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009136 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000913B 02                         byte_8A1F:	dc.b 2
0000913C D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009141 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009146 02                         byte_8A2A:	dc.b 2
00009147 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000914C 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009151 02                         byte_8A35:	dc.b 2
00009152 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009157 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000915C 02                         byte_8A40:	dc.b 2
0000915D C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009162 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009167 02                         byte_8A4B:	dc.b 2
00009168 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000916D 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009172 02                         byte_8A56:	dc.b 2
00009173 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009178 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000917E 00                         		even
0000917E 00                         		even
0000917E                            
0000917E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000917E                            
0000917E                            
0000917E                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000917E 6100 0000                  		bsr.w	Obj44_SolidWall2
00009182 6700                       		beq.s	loc_8AA8
00009184 6B00 0000                  		bmi.w	loc_8AC4
00009188 4A40                       		tst.w	d0
0000918A 6700 0000                  		beq.w	loc_8A92
0000918E 6B00                       		bmi.s	loc_8A7C
00009190 4A69 0010                  		tst.w	$10(a1)
00009194 6B00                       		bmi.s	loc_8A92
00009196 6000                       		bra.s	loc_8A82
00009198                            ; ===========================================================================
00009198                            
00009198                            loc_8A7C:
00009198 4A69 0010                  		tst.w	$10(a1)
0000919C 6A00                       		bpl.s	loc_8A92
0000919E                            
0000919E                            loc_8A82:
0000919E 9169 0008                  		sub.w	d0,8(a1)
000091A2 337C 0000 0014             		move.w	#0,$14(a1)
000091A8 337C 0000 0010             		move.w	#0,$10(a1)
000091AE                            
000091AE                            loc_8A92:
000091AE 0829 0001 0022             		btst	#1,$22(a1)
000091B4 6600                       		bne.s	loc_8AB6
000091B6 08E9 0005 0022             		bset	#5,$22(a1)
000091BC 08E8 0005 0022             		bset	#5,$22(a0)
000091C2 4E75                       		rts	
000091C4                            ; ===========================================================================
000091C4                            
000091C4                            loc_8AA8:
000091C4 0828 0005 0022             		btst	#5,$22(a0)
000091CA 6700                       		beq.s	locret_8AC2
000091CC 337C 0001 001C             		move.w	#1,$1C(a1)
000091D2                            
000091D2                            loc_8AB6:
000091D2 08A8 0005 0022             		bclr	#5,$22(a0)
000091D8 08A9 0005 0022             		bclr	#5,$22(a1)
000091DE                            
000091DE                            locret_8AC2:
000091DE 4E75                       		rts	
000091E0                            ; ===========================================================================
000091E0                            
000091E0                            loc_8AC4:
000091E0 4A69 0012                  		tst.w	$12(a1)
000091E4 6A00                       		bpl.s	locret_8AD8
000091E6 4A43                       		tst.w	d3
000091E8 6A00                       		bpl.s	locret_8AD8
000091EA 9769 000C                  		sub.w	d3,$C(a1)
000091EE 337C 0000 0012             		move.w	#0,$12(a1)
000091F4                            
000091F4                            locret_8AD8:
000091F4 4E75                       		rts	
000091F6                            ; End of function Obj44_SolidWall
000091F6                            
000091F6                            
000091F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091F6                            
000091F6                            
000091F6                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
000091F6 43F8 D000                  		lea	($FFFFD000).w,a1
000091FA 3029 0008                  		move.w	8(a1),d0
000091FE 9068 0008                  		sub.w	8(a0),d0
00009202 D041                       		add.w	d1,d0
00009204 6B00                       		bmi.s	loc_8B48
00009206 3601                       		move.w	d1,d3
00009208 D643                       		add.w	d3,d3
0000920A B043                       		cmp.w	d3,d0
0000920C 6200                       		bhi.s	loc_8B48
0000920E 1629 0016                  		move.b	$16(a1),d3
00009212 4883                       		ext.w	d3
00009214 D443                       		add.w	d3,d2
00009216 3629 000C                  		move.w	$C(a1),d3
0000921A 9668 000C                  		sub.w	$C(a0),d3
0000921E D642                       		add.w	d2,d3
00009220 6B00                       		bmi.s	loc_8B48
00009222 3802                       		move.w	d2,d4
00009224 D844                       		add.w	d4,d4
00009226 B644                       		cmp.w	d4,d3
00009228 6400                       		bcc.s	loc_8B48
0000922A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000922E 6B00                       		bmi.s	loc_8B48
00009230 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009236 6400                       		bcc.s	loc_8B48
00009238 4A78 FE08                  		tst.w	($FFFFFE08).w
0000923C 6600                       		bne.s	loc_8B48
0000923E 3A00                       		move.w	d0,d5
00009240 B240                       		cmp.w	d0,d1
00009242 6400                       		bcc.s	loc_8B30
00009244 D241                       		add.w	d1,d1
00009246 9041                       		sub.w	d1,d0
00009248 3A00                       		move.w	d0,d5
0000924A 4445                       		neg.w	d5
0000924C                            
0000924C                            loc_8B30:
0000924C 3203                       		move.w	d3,d1
0000924E B443                       		cmp.w	d3,d2
00009250 6400                       		bcc.s	loc_8B3C
00009252 9644                       		sub.w	d4,d3
00009254 3203                       		move.w	d3,d1
00009256 4441                       		neg.w	d1
00009258                            
00009258                            loc_8B3C:
00009258 BA41                       		cmp.w	d1,d5
0000925A 6200                       		bhi.s	loc_8B44
0000925C 7801                       		moveq	#1,d4
0000925E 4E75                       		rts	
00009260                            ; ===========================================================================
00009260                            
00009260                            loc_8B44:
00009260 78FF                       		moveq	#-1,d4
00009262 4E75                       		rts	
00009264                            ; ===========================================================================
00009264                            
00009264                            loc_8B48:
00009264 7800                       		moveq	#0,d4
00009266 4E75                       		rts	
00009268                            ; End of function Obj44_SolidWall2
00009268                            
00009268                            ; ===========================================================================
00009268                            ; ---------------------------------------------------------------------------
00009268                            ; Object 1E - Ball Hog enemy (SBZ)
00009268                            ; ---------------------------------------------------------------------------
00009268                            
00009268                            Obj1E:					; XREF: Obj_Index
00009268 7000                       		moveq	#0,d0
0000926A 1028 0024                  		move.b	$24(a0),d0
0000926E 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009272 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009276                            ; ===========================================================================
00009276 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009278 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000927A                            ; ===========================================================================
0000927A                            
0000927A                            Obj1E_Main:				; XREF: Obj1E_Index
0000927A 117C 0013 0016             		move.b	#$13,$16(a0)
00009280 117C 0008 0017             		move.b	#8,$17(a0)
00009286 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000928E 317C 2302 0002             		move.w	#$2302,2(a0)
00009294 117C 0004 0001             		move.b	#4,1(a0)
0000929A 117C 0004 0018             		move.b	#4,$18(a0)
000092A0 117C 0005 0020             		move.b	#5,$20(a0)
000092A6 117C 000C 0019             		move.b	#$C,$19(a0)
000092AC 6100 0000                  		bsr.w	ObjectFall
000092B0 4EB9 0000 0000             		jsr	ObjHitFloor
000092B6 4A41                       		tst.w	d1
000092B8 6A00                       		bpl.s	locret_8BAC
000092BA D368 000C                  		add.w	d1,$C(a0)
000092BE 317C 0000 0012             		move.w	#0,$12(a0)
000092C4 5428 0024                  		addq.b	#2,$24(a0)
000092C8                            
000092C8                            locret_8BAC:
000092C8 4E75                       		rts	
000092CA                            ; ===========================================================================
000092CA                            
000092CA                            Obj1E_Action:				; XREF: Obj1E_Index
000092CA 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000092D0 6100 0000                  		bsr.w	AnimateSprite
000092D4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
000092DA 6600                       		bne.s	Obj1E_SetBall	; if not, branch
000092DC 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
000092E0 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
000092E2 6000                       		bra.s	Obj1E_MarkAsGone
000092E4                            ; ===========================================================================
000092E4                            
000092E4                            Obj1E_SetBall:				; XREF: Obj1E_Action
000092E4 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
000092E8                            
000092E8                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
000092E8 6000 0000                  		bra.w	MarkObjGone
000092EC                            ; ===========================================================================
000092EC                            
000092EC                            Obj1E_MakeBall:				; XREF: Obj1E_Action
000092EC 117C 0001 0032             		move.b	#1,$32(a0)
000092F2 6100 0000                  		bsr.w	SingleObjLoad
000092F6 6600                       		bne.s	loc_8C1A
000092F8 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000092FC 3368 0008 0008             		move.w	8(a0),8(a1)
00009302 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009308 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000930E 337C 0000 0012             		move.w	#0,$12(a1)
00009314 70FC                       		moveq	#-4,d0
00009316 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000931C 6700                       		beq.s	loc_8C0A	; if not, branch
0000931E 4440                       		neg.w	d0
00009320 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009324                            
00009324                            loc_8C0A:
00009324 D169 0008                  		add.w	d0,8(a1)
00009328 0669 000C 000C             		addi.w	#$C,$C(a1)
0000932E 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009334                            
00009334                            loc_8C1A:
00009334 60B2                       		bra.s	Obj1E_MarkAsGone
00009336                            ; ===========================================================================
00009336                            ; ---------------------------------------------------------------------------
00009336                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009336                            ; ---------------------------------------------------------------------------
00009336                            
00009336                            Obj20:					; XREF: Obj_Index
00009336 7000                       		moveq	#0,d0
00009338 1028 0024                  		move.b	$24(a0),d0
0000933C 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009340 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009344                            ; ===========================================================================
00009344 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009346 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009348                            ; ===========================================================================
00009348                            
00009348                            Obj20_Main:				; XREF: Obj20_Index
00009348 5428 0024                  		addq.b	#2,$24(a0)
0000934C 117C 0007 0016             		move.b	#7,$16(a0)
00009352 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000935A 317C 2302 0002             		move.w	#$2302,2(a0)
00009360 117C 0004 0001             		move.b	#4,1(a0)
00009366 117C 0003 0018             		move.b	#3,$18(a0)
0000936C 117C 0087 0020             		move.b	#$87,$20(a0)
00009372 117C 0008 0019             		move.b	#8,$19(a0)
00009378 7000                       		moveq	#0,d0
0000937A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000937E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009382 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009386 117C 0004 001A             		move.b	#4,$1A(a0)
0000938C                            
0000938C                            Obj20_Bounce:				; XREF: Obj20_Index
0000938C 4EB9 0000 0000             		jsr	ObjectFall
00009392 4A68 0012                  		tst.w	$12(a0)
00009396 6B00                       		bmi.s	Obj20_ChkExplode
00009398 4EB9 0000 0000             		jsr	ObjHitFloor
0000939E 4A41                       		tst.w	d1
000093A0 6A00                       		bpl.s	Obj20_ChkExplode
000093A2 D368 000C                  		add.w	d1,$C(a0)
000093A6 317C FD00 0012             		move.w	#-$300,$12(a0)
000093AC 4A03                       		tst.b	d3
000093AE 6700                       		beq.s	Obj20_ChkExplode
000093B0 6B00                       		bmi.s	loc_8CA4
000093B2 4A68 0010                  		tst.w	$10(a0)
000093B6 6A00                       		bpl.s	Obj20_ChkExplode
000093B8 4468 0010                  		neg.w	$10(a0)
000093BC 6000                       		bra.s	Obj20_ChkExplode
000093BE                            ; ===========================================================================
000093BE                            
000093BE                            loc_8CA4:				; XREF: Obj20_Bounce
000093BE 4A68 0010                  		tst.w	$10(a0)
000093C2 6B00                       		bmi.s	Obj20_ChkExplode
000093C4 4468 0010                  		neg.w	$10(a0)
000093C8                            
000093C8                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000093C8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000093CC 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000093CE 10BC 0024                  		move.b	#$24,0(a0)
000093D2 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000093D6 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
000093DC 6000 0000                  		bra.w	Obj3F		; jump to explosion code
000093E0                            ; ===========================================================================
000093E0                            
000093E0                            Obj20_Animate:				; XREF: Obj20_ChkExplode
000093E0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000093E4 6A00                       		bpl.s	Obj20_Display
000093E6 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
000093EC 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000093F2                            
000093F2                            Obj20_Display:
000093F2 6100 0000                  		bsr.w	DisplaySprite
000093F6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000093FA 0640 00E0                  		addi.w	#$E0,d0
000093FE B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009402 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009406 4E75                       		rts	
00009408                            ; ===========================================================================
00009408                            ; ---------------------------------------------------------------------------
00009408                            ; Object 24 - explosion	from a destroyed monitor
00009408                            ; ---------------------------------------------------------------------------
00009408                            
00009408                            Obj24:					; XREF: Obj_Index
00009408 7000                       		moveq	#0,d0
0000940A 1028 0024                  		move.b	$24(a0),d0
0000940E 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009412 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009416                            ; ===========================================================================
00009416 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009418 0000                       		dc.w Obj24_Animate-Obj24_Index
0000941A                            ; ===========================================================================
0000941A                            
0000941A                            Obj24_Main:				; XREF: Obj24_Index
0000941A 5428 0024                  		addq.b	#2,$24(a0)
0000941E 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009426 317C 041C 0002             		move.w	#$41C,2(a0)
0000942C 117C 0004 0001             		move.b	#4,1(a0)
00009432 117C 0001 0018             		move.b	#1,$18(a0)
00009438 117C 0000 0020             		move.b	#0,$20(a0)
0000943E 117C 000C 0019             		move.b	#$C,$19(a0)
00009444 117C 0009 001E             		move.b	#9,$1E(a0)
0000944A 117C 0000 001A             		move.b	#0,$1A(a0)
00009450 303C 00A5                  		move.w	#$A5,d0
00009454 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play explosion sound
0000945A                            
0000945A                            Obj24_Animate:				; XREF: Obj24_Index
0000945A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000945E 6A00                       		bpl.s	Obj24_Display
00009460 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009466 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000946A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009470 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009474                            
00009474                            Obj24_Display:
00009474 6000 0000                  		bra.w	DisplaySprite
00009478                            ; ===========================================================================
00009478                            ; ---------------------------------------------------------------------------
00009478                            ; Object 27 - explosion	from a destroyed enemy
00009478                            ; ---------------------------------------------------------------------------
00009478                            
00009478                            Obj27:					; XREF: Obj_Index
00009478 7000                       		moveq	#0,d0
0000947A 1028 0024                  		move.b	$24(a0),d0
0000947E 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009482 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009486                            ; ===========================================================================
00009486 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009488 0000                       		dc.w Obj27_Main-Obj27_Index
0000948A 0000                       		dc.w Obj27_Animate-Obj27_Index
0000948C                            ; ===========================================================================
0000948C                            
0000948C                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000948C 5428 0024                  		addq.b	#2,$24(a0)
00009490 6100 0000                  		bsr.w	SingleObjLoad
00009494 6600                       		bne.s	Obj27_Main
00009496 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000949A 3368 0008 0008             		move.w	8(a0),8(a1)
000094A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000094A6 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000094AC                            
000094AC                            Obj27_Main:				; XREF: Obj27_Index
000094AC 5428 0024                  		addq.b	#2,$24(a0)
000094B0 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000094B8 317C 05A0 0002             		move.w	#$5A0,2(a0)
000094BE 117C 0004 0001             		move.b	#4,1(a0)
000094C4 117C 0001 0018             		move.b	#1,$18(a0)
000094CA 117C 0000 0020             		move.b	#0,$20(a0)
000094D0 117C 000C 0019             		move.b	#$C,$19(a0)
000094D6                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000094D6 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000094DC 117C 0000 001A             		move.b	#0,$1A(a0)
000094E2 303C 00C1                  		move.w	#$C1,d0
000094E6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000094EC                            
000094EC 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
000094F2 1028 0028                  		move.b	$28(a0),d0
000094F6 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000094FC 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009502                            
00009502                            Obj27_Animate:				; XREF: Obj27_Index
00009502 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009506 6A00                       		bpl.s	Obj27_Display
00009508                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009508 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
0000950E 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009512 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009518 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000951C                            
0000951C                            Obj27_Display:
0000951C 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009522 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009528 6000 0000                  		bra.w	DisplaySprite
0000952C                            ; ===========================================================================
0000952C                            ; ---------------------------------------------------------------------------
0000952C                            Obj27_ExplosionXYSpd:
0000952C                            		; dc.w	-$350, -$300	; Left
0000952C                            		; dc.w	-$200, -$450	; Near middle (left)
0000952C                            		; dc.w	0, -$500	; Middle
0000952C                            		; dc.w	$200, -$450	; Near middle (right)
0000952C                            		; dc.w	$350, -$300	; Right
0000952C                            
0000952C FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009530 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
00009534 0000 FA00                  		dc.w	0, -$600	; Middle
00009538 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
0000953C 0150 FC00                  		dc.w	$150, -$400	; Right
00009540                            
00009540 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
0000955A                            ; ---------------------------------------------------------------------------
0000955A                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000955A                            ; ---------------------------------------------------------------------------
0000955A                            
0000955A                            Obj3F:					; XREF: Obj_Index
0000955A 7000                       		moveq	#0,d0
0000955C 1028 0024                  		move.b	$24(a0),d0
00009560 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009564 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009568                            ; ===========================================================================
00009568 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000956A FF9A                       		dc.w Obj27_Animate-Obj3F_Index
0000956C                            ; ===========================================================================
0000956C                            
0000956C                            Obj3F_Main:				; XREF: Obj3F_Index
0000956C 5428 0024                  		addq.b	#2,$24(a0)
00009570 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009578 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000957E 117C 0004 0001             		move.b	#4,1(a0)
00009584 117C 0001 0018             		move.b	#1,$18(a0)
0000958A 117C 0000 0020             		move.b	#0,$20(a0)
00009590 117C 000C 0019             		move.b	#$C,$19(a0)
00009596 117C 0007 001E             		move.b	#7,$1E(a0)
0000959C 117C 0000 001A             		move.b	#0,$1A(a0)
000095A2 303C 00C4                  		move.w	#$C4,d0
000095A6 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000095AC                            ; ===========================================================================
000095AC                            Ani_obj1E:
000095AC                            	include "_anim\obj1E.asm"
000095AC                            ; ---------------------------------------------------------------------------
000095AC                            ; Animation script - doors (SBZ)
000095AC                            ; ---------------------------------------------------------------------------
000095AC 0000                       		dc.w byte_8E4A-Ani_obj1E
000095AE 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000095C6 00                         		even
000095C6 00                         		even
000095C6                            
000095C6                            ; ---------------------------------------------------------------------------
000095C6                            ; Sprite mappings - Ball Hog enemy (SBZ)
000095C6                            ; ---------------------------------------------------------------------------
000095C6                            Map_obj1E:
000095C6                            	include "_maps\obj1E.asm"
000095C6                            Map_a7ad:
000095C6 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
000095C8 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
000095CA 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
000095CC 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
000095CE 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
000095D0 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
000095D2 02                         Map_a7ad_C: 	dc.b $2
000095D3 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
000095D8 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
000095DD 02                         Map_a7ad_17: 	dc.b $2
000095DE EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
000095E3 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
000095E8 02                         Map_a7ad_22: 	dc.b $2
000095E9 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
000095EE 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
000095F3 02                         Map_a7ad_2D: 	dc.b $2
000095F4 E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
000095F9 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
000095FE 02                         Map_a7ad_38: 	dc.b $2
000095FF F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
00009604 E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
00009609 02                         Map_a7ad_43: 	dc.b $2
0000960A F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
0000960F E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
00009614                            	even
00009614                            	even
00009614                            
00009614                            ; ---------------------------------------------------------------------------
00009614                            ; Sprite mappings - explosion
00009614                            ; ---------------------------------------------------------------------------
00009614                            Map_obj24:
00009614                            	include "_maps\obj24.asm"
00009614                            ; ---------------------------------------------------------------------------
00009614                            ; Sprite mappings - explosion
00009614                            ; ---------------------------------------------------------------------------
00009614 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009618 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000961C 01                         byte_8EAE:	dc.b 1
0000961D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009622 01                         byte_8EB4:	dc.b 1
00009623 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009628 01                         byte_8EBA:	dc.b 1
00009629 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000962E 01                         byte_8EC0:	dc.b 1
0000962F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009634                            		even
00009634                            		even
00009634                            
00009634                            ; ---------------------------------------------------------------------------
00009634                            ; Sprite mappings - explosion
00009634                            ; ---------------------------------------------------------------------------
00009634 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009638 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000963C 0000                       		dc.w byte_8EF7-Map_obj27
0000963E 01                         byte_8ED0:	dc.b 1
0000963F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009644 01                         byte_8ED6:	dc.b 1
00009645 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000964A 01                         byte_8EDC:	dc.b 1
0000964B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009650 04                         byte_8EE2:	dc.b 4
00009651 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009656 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000965B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009660 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009665 04                         byte_8EF7:	dc.b 4
00009666 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000966B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009670 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009675 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000967A                            		even
0000967A                            ; ---------------------------------------------------------------------------
0000967A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000967A                            ; ---------------------------------------------------------------------------
0000967A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000967C 0000                       		dc.w byte_8F16-Map_obj3F
0000967E 0000                       		dc.w byte_8F1C-Map_obj3F
00009680 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009682 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009684 01                         byte_8F16:	dc.b 1
00009685 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000968A 01                         byte_8F1C:	dc.b 1
0000968B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009690                            		even
00009690                            ; ===========================================================================
00009690                            ; ---------------------------------------------------------------------------
00009690                            ; Object 28 - animals
00009690                            ; ---------------------------------------------------------------------------
00009690                            
00009690                            Obj28:					; XREF: Obj_Index
00009690 7000                       		moveq	#0,d0
00009692 1028 0024                  		move.b	$24(a0),d0
00009696 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000969A 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000969E                            ; ===========================================================================
0000969E 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000096A2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000096A6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000096AA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000096AE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000096B2 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000096B6 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000096BA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000096BE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000096C2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000096C6 0000                       		dc.w loc_92D6-Obj28_Index
000096C8                            
000096C8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000096D4                            
000096D4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000096D8 0000 0000                  		dc.l Map_obj28
000096DC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
000096E0 0000 0000                  		dc.l Map_obj28a		; mappings address
000096E4 FE80 FD00                  		dc.w $FE80, $FD00
000096E8 0000 0000                  		dc.l Map_obj28
000096EC FEC0 FE80                  		dc.w $FEC0, $FE80
000096F0 0000 0000                  		dc.l Map_obj28a
000096F4 FE40 FD00                  		dc.w $FE40, $FD00
000096F8 0000 0000                  		dc.l Map_obj28b
000096FC FD00 FC00                  		dc.w $FD00, $FC00
00009700 0000 0000                  		dc.l Map_obj28a
00009704 FD80 FC80                  		dc.w $FD80, $FC80
00009708 0000 0000                  		dc.l Map_obj28b
0000970C                            
0000970C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000971C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000972C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009738                            
00009738 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000974C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009760 0000 0000                  		dc.l Map_obj28b
00009764                            
00009764 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009776 0565 05B3                  		dc.w $565, $5B3
0000977A                            ; ===========================================================================
0000977A                            
0000977A                            Obj28_Ending:				; XREF: Obj28_Index
0000977A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000977E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009782 7000                       		moveq	#0,d0
00009784 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009788 D040                       		add.w	d0,d0		; multiply d0 by 2
0000978A 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000978E 0440 0014                  		subi.w	#$14,d0
00009792 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009798 D040                       		add.w	d0,d0
0000979A 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000097A0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000097A4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000097AA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000097B0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000097B6 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000097BC 117C 000C 0016             		move.b	#$C,$16(a0)
000097C2 117C 0004 0001             		move.b	#4,1(a0)
000097C8 08E8 0000 0001             		bset	#0,1(a0)
000097CE 117C 0006 0018             		move.b	#6,$18(a0)
000097D4 117C 0008 0019             		move.b	#8,$19(a0)
000097DA 117C 0007 001E             		move.b	#7,$1E(a0)
000097E0 6000 0000                  		bra.w	DisplaySprite
000097E4                            ; ===========================================================================
000097E4                            
000097E4                            Obj28_FromEnemy:			; XREF: Obj28_Ending
000097E4 5428 0024                  		addq.b	#2,$24(a0)
000097E8 6100 9526                  		bsr.w	RandomNumber
000097EC 0240 0001                  		andi.w	#1,d0
000097F0 7200                       		moveq	#0,d1
000097F2 1238 FE10                  		move.b	($FFFFFE10).w,d1
000097F6 D241                       		add.w	d1,d1
000097F8 D240                       		add.w	d0,d1
000097FA 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000097FE 1031 1000                  		move.b	(a1,d1.w),d0
00009802 1140 0030                  		move.b	d0,$30(a0)
00009806 E748                       		lsl.w	#3,d0
00009808 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000980C D2C0                       		adda.w	d0,a1
0000980E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009812 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009816 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000981A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009820 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009826 6700                       		beq.s	loc_90C0	; if yes, branch
00009828 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000982E                            
0000982E                            loc_90C0:
0000982E 117C 000C 0016             		move.b	#$C,$16(a0)
00009834 117C 0004 0001             		move.b	#4,1(a0)
0000983A 08E8 0000 0001             		bset	#0,1(a0)
00009840 117C 0006 0018             		move.b	#6,$18(a0)
00009846 117C 0008 0019             		move.b	#8,$19(a0)
0000984C 117C 0007 001E             		move.b	#7,$1E(a0)
00009852 117C 0002 001A             		move.b	#2,$1A(a0)
00009858 317C FC00 0012             		move.w	#-$400,$12(a0)
0000985E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009862 6600                       		bne.s	loc_911C
00009864 6100 0000                  		bsr.w	SingleObjLoad
00009868 6600                       		bne.s	Obj28_Display
0000986A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000986E 3368 0008 0008             		move.w	8(a0),8(a1)
00009874 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000987A 3028 003E                  		move.w	$3E(a0),d0
0000987E E248                       		lsr.w	#1,d0
00009880 1340 001A                  		move.b	d0,$1A(a1)
00009884                            
00009884                            Obj28_Display:
00009884 6000 0000                  		bra.w	DisplaySprite
00009888                            ; ===========================================================================
00009888                            
00009888                            loc_911C:
00009888 117C 0012 0024             		move.b	#$12,$24(a0)
0000988E 4268 0010                  		clr.w	$10(a0)
00009892 6000 0000                  		bra.w	DisplaySprite
00009896                            ; ===========================================================================
00009896                            
00009896                            loc_912A:				; XREF: Obj28_Index
00009896 4A28 0001                  		tst.b	1(a0)
0000989A 6A00 0000                  		bpl.w	DeleteObject
0000989E 6100 0000                  		bsr.w	ObjectFall
000098A2 4A68 0012                  		tst.w	$12(a0)
000098A6 6B00                       		bmi.s	loc_9180
000098A8 4EB9 0000 0000             		jsr	ObjHitFloor
000098AE 4A41                       		tst.w	d1
000098B0 6A00                       		bpl.s	loc_9180
000098B2 D368 000C                  		add.w	d1,$C(a0)
000098B6 3168 0032 0010             		move.w	$32(a0),$10(a0)
000098BC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098C2 117C 0001 001A             		move.b	#1,$1A(a0)
000098C8 1028 0030                  		move.b	$30(a0),d0
000098CC D000                       		add.b	d0,d0
000098CE 5800                       		addq.b	#4,d0
000098D0 1140 0024                  		move.b	d0,$24(a0)
000098D4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000098D8 6700                       		beq.s	loc_9180
000098DA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
000098E0 6700                       		beq.s	loc_9180
000098E2 4468 0010                  		neg.w	$10(a0)
000098E6 0868 0000 0001             		bchg	#0,1(a0)
000098EC                            
000098EC                            loc_9180:
000098EC 6000 0000                  		bra.w	DisplaySprite
000098F0                            ; ===========================================================================
000098F0                            
000098F0                            loc_9184:				; XREF: Obj28_Index
000098F0 6100 0000                  		bsr.w	ObjectFall
000098F4 117C 0001 001A             		move.b	#1,$1A(a0)
000098FA 4A68 0012                  		tst.w	$12(a0)
000098FE 6B00                       		bmi.s	loc_91AE
00009900 117C 0000 001A             		move.b	#0,$1A(a0)
00009906 4EB9 0000 0000             		jsr	ObjHitFloor
0000990C 4A41                       		tst.w	d1
0000990E 6A00                       		bpl.s	loc_91AE
00009910 D368 000C                  		add.w	d1,$C(a0)
00009914 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000991A                            
0000991A                            loc_91AE:
0000991A 4A28 0028                  		tst.b	$28(a0)
0000991E 6600                       		bne.s	loc_9224
00009920 4A28 0001                  		tst.b	1(a0)
00009924 6A00 0000                  		bpl.w	DeleteObject
00009928 6000 0000                  		bra.w	DisplaySprite
0000992C                            ; ===========================================================================
0000992C                            
0000992C                            loc_91C0:				; XREF: Obj28_Index
0000992C 6100 0000                  		bsr.w	SpeedToPos
00009930 0668 0018 0012             		addi.w	#$18,$12(a0)
00009936 4A68 0012                  		tst.w	$12(a0)
0000993A 6B00                       		bmi.s	loc_91FC
0000993C 4EB9 0000 0000             		jsr	ObjHitFloor
00009942 4A41                       		tst.w	d1
00009944 6A00                       		bpl.s	loc_91FC
00009946 D368 000C                  		add.w	d1,$C(a0)
0000994A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009950 4A28 0028                  		tst.b	$28(a0)
00009954 6700                       		beq.s	loc_91FC
00009956 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000995C 6700                       		beq.s	loc_91FC
0000995E 4468 0010                  		neg.w	$10(a0)
00009962 0868 0000 0001             		bchg	#0,1(a0)
00009968                            
00009968                            loc_91FC:
00009968 5328 001E                  		subq.b	#1,$1E(a0)
0000996C 6A00                       		bpl.s	loc_9212
0000996E 117C 0001 001E             		move.b	#1,$1E(a0)
00009974 5228 001A                  		addq.b	#1,$1A(a0)
00009978 0228 0001 001A             		andi.b	#1,$1A(a0)
0000997E                            
0000997E                            loc_9212:
0000997E 4A28 0028                  		tst.b	$28(a0)
00009982 6600                       		bne.s	loc_9224
00009984 4A28 0001                  		tst.b	1(a0)
00009988 6A00 0000                  		bpl.w	DeleteObject
0000998C 6000 0000                  		bra.w	DisplaySprite
00009990                            ; ===========================================================================
00009990                            
00009990                            loc_9224:				; XREF: Obj28_Index
00009990 3028 0008                  		move.w	8(a0),d0
00009994 9078 D008                  		sub.w	($FFFFD008).w,d0
00009998 6500                       		bcs.s	loc_923C
0000999A 0440 0180                  		subi.w	#$180,d0
0000999E 6A00                       		bpl.s	loc_923C
000099A0 4A28 0001                  		tst.b	1(a0)
000099A4 6A00 0000                  		bpl.w	DeleteObject
000099A8                            
000099A8                            loc_923C:
000099A8 6000 0000                  		bra.w	DisplaySprite
000099AC                            ; ===========================================================================
000099AC                            
000099AC                            loc_9240:				; XREF: Obj28_Index
000099AC 4A28 0001                  		tst.b	1(a0)
000099B0 6A00 0000                  		bpl.w	DeleteObject
000099B4 5368 0036                  		subq.w	#1,$36(a0)
000099B8 6600 0000                  		bne.w	loc_925C
000099BC 117C 0002 0024             		move.b	#2,$24(a0)
000099C2 117C 0003 0018             		move.b	#3,$18(a0)
000099C8                            
000099C8                            loc_925C:
000099C8 6000 0000                  		bra.w	DisplaySprite
000099CC                            ; ===========================================================================
000099CC                            
000099CC                            loc_9260:				; XREF: Obj28_Index
000099CC 6100 0000                  		bsr.w	sub_9404
000099D0 6400                       		bcc.s	loc_927C
000099D2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099D8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099DE 117C 000E 0024             		move.b	#$E,$24(a0)
000099E4 6000 FF46                  		bra.w	loc_91C0
000099E8                            ; ===========================================================================
000099E8                            
000099E8                            loc_927C:
000099E8 6000 FFA6                  		bra.w	loc_9224
000099EC                            ; ===========================================================================
000099EC                            
000099EC                            loc_9280:				; XREF: Obj28_Index
000099EC 6100 0000                  		bsr.w	sub_9404
000099F0 6A00                       		bpl.s	loc_92B6
000099F2 4268 0010                  		clr.w	$10(a0)
000099F6 4268 0032                  		clr.w	$32(a0)
000099FA 6100 0000                  		bsr.w	SpeedToPos
000099FE 0668 0018 0012             		addi.w	#$18,$12(a0)
00009A04 6100 0000                  		bsr.w	loc_93C4
00009A08 6100 0000                  		bsr.w	loc_93EC
00009A0C 5328 001E                  		subq.b	#1,$1E(a0)
00009A10 6A00                       		bpl.s	loc_92B6
00009A12 117C 0001 001E             		move.b	#1,$1E(a0)
00009A18 5228 001A                  		addq.b	#1,$1A(a0)
00009A1C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009A22                            
00009A22                            loc_92B6:
00009A22 6000 FF6C                  		bra.w	loc_9224
00009A26                            ; ===========================================================================
00009A26                            
00009A26                            loc_92BA:				; XREF: Obj28_Index
00009A26 6100 0000                  		bsr.w	sub_9404
00009A2A 6A00                       		bpl.s	loc_9310
00009A2C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009A32 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A38 117C 0004 0024             		move.b	#4,$24(a0)
00009A3E 6000 FEB0                  		bra.w	loc_9184
00009A42                            ; ===========================================================================
00009A42                            
00009A42                            loc_92D6:				; XREF: Obj28_Index
00009A42 6100 0000                  		bsr.w	ObjectFall
00009A46 117C 0001 001A             		move.b	#1,$1A(a0)
00009A4C 4A68 0012                  		tst.w	$12(a0)
00009A50 6B00                       		bmi.s	loc_9310
00009A52 117C 0000 001A             		move.b	#0,$1A(a0)
00009A58 4EB9 0000 0000             		jsr	ObjHitFloor
00009A5E 4A41                       		tst.w	d1
00009A60 6A00                       		bpl.s	loc_9310
00009A62 4628 0029                  		not.b	$29(a0)
00009A66 6600                       		bne.s	loc_9306
00009A68 4468 0010                  		neg.w	$10(a0)
00009A6C 0868 0000 0001             		bchg	#0,1(a0)
00009A72                            
00009A72                            loc_9306:
00009A72 D368 000C                  		add.w	d1,$C(a0)
00009A76 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A7C                            
00009A7C                            loc_9310:
00009A7C 6000 FF12                  		bra.w	loc_9224
00009A80                            ; ===========================================================================
00009A80                            
00009A80                            loc_9314:				; XREF: Obj28_Index
00009A80 6100 0000                  		bsr.w	sub_9404
00009A84 6A00                       		bpl.s	loc_932E
00009A86 4268 0010                  		clr.w	$10(a0)
00009A8A 4268 0032                  		clr.w	$32(a0)
00009A8E 6100 0000                  		bsr.w	ObjectFall
00009A92 6100 0000                  		bsr.w	loc_93C4
00009A96 6100 0000                  		bsr.w	loc_93EC
00009A9A                            
00009A9A                            loc_932E:
00009A9A 6000 FEF4                  		bra.w	loc_9224
00009A9E                            ; ===========================================================================
00009A9E                            
00009A9E                            loc_9332:				; XREF: Obj28_Index
00009A9E 6100 0000                  		bsr.w	sub_9404
00009AA2 6A00                       		bpl.s	loc_936C
00009AA4 6100 0000                  		bsr.w	ObjectFall
00009AA8 117C 0001 001A             		move.b	#1,$1A(a0)
00009AAE 4A68 0012                  		tst.w	$12(a0)
00009AB2 6B00                       		bmi.s	loc_936C
00009AB4 117C 0000 001A             		move.b	#0,$1A(a0)
00009ABA 4EB9 0000 0000             		jsr	ObjHitFloor
00009AC0 4A41                       		tst.w	d1
00009AC2 6A00                       		bpl.s	loc_936C
00009AC4 4468 0010                  		neg.w	$10(a0)
00009AC8 0868 0000 0001             		bchg	#0,1(a0)
00009ACE D368 000C                  		add.w	d1,$C(a0)
00009AD2 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AD8                            
00009AD8                            loc_936C:
00009AD8 6000 FEB6                  		bra.w	loc_9224
00009ADC                            ; ===========================================================================
00009ADC                            
00009ADC                            loc_9370:				; XREF: Obj28_Index
00009ADC 6100 0000                  		bsr.w	sub_9404
00009AE0 6A00                       		bpl.s	loc_93C0
00009AE2 6100 0000                  		bsr.w	SpeedToPos
00009AE6 0668 0018 0012             		addi.w	#$18,$12(a0)
00009AEC 4A68 0012                  		tst.w	$12(a0)
00009AF0 6B00                       		bmi.s	loc_93AA
00009AF2 4EB9 0000 0000             		jsr	ObjHitFloor
00009AF8 4A41                       		tst.w	d1
00009AFA 6A00                       		bpl.s	loc_93AA
00009AFC 4628 0029                  		not.b	$29(a0)
00009B00 6600                       		bne.s	loc_93A0
00009B02 4468 0010                  		neg.w	$10(a0)
00009B06 0868 0000 0001             		bchg	#0,1(a0)
00009B0C                            
00009B0C                            loc_93A0:
00009B0C D368 000C                  		add.w	d1,$C(a0)
00009B10 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B16                            
00009B16                            loc_93AA:
00009B16 5328 001E                  		subq.b	#1,$1E(a0)
00009B1A 6A00                       		bpl.s	loc_93C0
00009B1C 117C 0001 001E             		move.b	#1,$1E(a0)
00009B22 5228 001A                  		addq.b	#1,$1A(a0)
00009B26 0228 0001 001A             		andi.b	#1,$1A(a0)
00009B2C                            
00009B2C                            loc_93C0:
00009B2C 6000 FE62                  		bra.w	loc_9224
00009B30                            ; ===========================================================================
00009B30                            
00009B30                            loc_93C4:
00009B30 117C 0001 001A             		move.b	#1,$1A(a0)
00009B36 4A68 0012                  		tst.w	$12(a0)
00009B3A 6B00                       		bmi.s	locret_93EA
00009B3C 117C 0000 001A             		move.b	#0,$1A(a0)
00009B42 4EB9 0000 0000             		jsr	ObjHitFloor
00009B48 4A41                       		tst.w	d1
00009B4A 6A00                       		bpl.s	locret_93EA
00009B4C D368 000C                  		add.w	d1,$C(a0)
00009B50 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B56                            
00009B56                            locret_93EA:
00009B56 4E75                       		rts	
00009B58                            ; ===========================================================================
00009B58                            
00009B58                            loc_93EC:
00009B58 08E8 0000 0001             		bset	#0,1(a0)
00009B5E 3028 0008                  		move.w	8(a0),d0
00009B62 9078 D008                  		sub.w	($FFFFD008).w,d0
00009B66 6400                       		bcc.s	locret_9402
00009B68 08A8 0000 0001             		bclr	#0,1(a0)
00009B6E                            
00009B6E                            locret_9402:
00009B6E 4E75                       		rts	
00009B70                            
00009B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B70                            
00009B70                            
00009B70                            sub_9404:
00009B70 3038 D008                  		move.w	($FFFFD008).w,d0
00009B74 9068 0008                  		sub.w	8(a0),d0
00009B78 0440 00B8                  		subi.w	#$B8,d0
00009B7C 4E75                       		rts	
00009B7E                            ; End of function sub_9404
00009B7E                            
00009B7E                            ; ===========================================================================
00009B7E                            ; ---------------------------------------------------------------------------
00009B7E                            ; Object 29 - points that appear when you destroy something
00009B7E                            ; ---------------------------------------------------------------------------
00009B7E                            
00009B7E                            Obj29:					; XREF: Obj_Index
00009B7E 7000                       		moveq	#0,d0
00009B80 1028 0024                  		move.b	$24(a0),d0
00009B84 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009B88 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009B8C 6000 0000                  		bra.w	DisplaySprite
00009B90                            ; ===========================================================================
00009B90 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009B92 0000                       		dc.w Obj29_Slower-Obj29_Index
00009B94                            ; ===========================================================================
00009B94                            
00009B94                            Obj29_Main:				; XREF: Obj29_Index
00009B94 5428 0024                  		addq.b	#2,$24(a0)
00009B98 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009BA0 317C 2797 0002             		move.w	#$2797,2(a0)
00009BA6 117C 0004 0001             		move.b	#4,1(a0)
00009BAC 117C 0001 0018             		move.b	#1,$18(a0)
00009BB2 117C 0008 0019             		move.b	#8,$19(a0)
00009BB8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009BBE                            
00009BBE                            Obj29_Slower:				; XREF: Obj29_Index
00009BBE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009BC2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009BC6 6100 0000                  		bsr.w	SpeedToPos
00009BCA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009BD0 4E75                       		rts	
00009BD2                            ; ===========================================================================
00009BD2                            ; ---------------------------------------------------------------------------
00009BD2                            ; Sprite mappings - animals
00009BD2                            ; ---------------------------------------------------------------------------
00009BD2                            Map_obj28:
00009BD2                            	include "_maps\obj28.asm"
00009BD2                            ; ---------------------------------------------------------------------------
00009BD2                            ; Sprite mappings - animals
00009BD2                            ; ---------------------------------------------------------------------------
00009BD2 0000                       		dc.w byte_9472-Map_obj28
00009BD4 0000                       		dc.w byte_9478-Map_obj28
00009BD6 0000                       		dc.w byte_946C-Map_obj28
00009BD8 01                         byte_946C:	dc.b 1
00009BD9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BDE 01                         byte_9472:	dc.b 1
00009BDF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009BE4 01                         byte_9478:	dc.b 1
00009BE5 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009BEA                            		even
00009BEA                            		even
00009BEA                            
00009BEA                            Map_obj28a:
00009BEA                            	include "_maps\obj28a.asm"
00009BEA                            ; ---------------------------------------------------------------------------
00009BEA                            ; Sprite mappings - animals
00009BEA                            ; ---------------------------------------------------------------------------
00009BEA 0000                       		dc.w byte_948A-Map_obj28a
00009BEC 0000                       		dc.w byte_9490-Map_obj28a
00009BEE 0000                       		dc.w byte_9484-Map_obj28a
00009BF0 01                         byte_9484:	dc.b 1
00009BF1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BF6 01                         byte_948A:	dc.b 1
00009BF7 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009BFC 01                         byte_9490:	dc.b 1
00009BFD FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009C02                            		even
00009C02                            		even
00009C02                            
00009C02                            Map_obj28b:
00009C02                            	include "_maps\obj28b.asm"
00009C02                            ; ---------------------------------------------------------------------------
00009C02                            ; Sprite mappings - animals
00009C02                            ; ---------------------------------------------------------------------------
00009C02 0000                       		dc.w byte_94A2-Map_obj28b
00009C04 0000                       		dc.w byte_94A8-Map_obj28b
00009C06 0000                       		dc.w byte_949C-Map_obj28b
00009C08 01                         byte_949C:	dc.b 1
00009C09 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009C0E 01                         byte_94A2:	dc.b 1
00009C0F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009C14 01                         byte_94A8:	dc.b 1
00009C15 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009C1A                            		even
00009C1A                            		even
00009C1A                            
00009C1A                            ; ---------------------------------------------------------------------------
00009C1A                            ; Sprite mappings - points that	appear when you	destroy	something
00009C1A                            ; ---------------------------------------------------------------------------
00009C1A                            Map_obj29:
00009C1A                            	include "_maps\obj29.asm"
00009C1A                            ; ---------------------------------------------------------------------------
00009C1A                            ; Sprite mappings - points that	appear when you	destroy	something
00009C1A                            ; ---------------------------------------------------------------------------
00009C1A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009C1E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009C22 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009C26 0000                       		dc.w byte_94E5-Map_obj29
00009C28 01                         byte_94BC:	dc.b 1
00009C29 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009C2E 01                         byte_94C2:	dc.b 1
00009C2F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009C34 01                         byte_94C8:	dc.b 1
00009C35 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009C3A 01                         byte_94CE:	dc.b 1
00009C3B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009C40 01                         byte_94D4:	dc.b 1
00009C41 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009C46 02                         byte_94DA:	dc.b 2
00009C47 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009C4C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009C51 02                         byte_94E5:	dc.b 2
00009C52 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009C57 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009C5C                            		even
00009C5C                            		even
00009C5C                            
00009C5C                            ; ===========================================================================
00009C5C                            ; ---------------------------------------------------------------------------
00009C5C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009C5C                            ; ---------------------------------------------------------------------------
00009C5C                            
00009C5C                            Obj1F:					; XREF: Obj_Index
00009C5C 7000                       		moveq	#0,d0
00009C5E 1028 0024                  		move.b	$24(a0),d0
00009C62 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009C66 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009C6A                            ; ===========================================================================
00009C6A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009C6C 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009C6E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009C70 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009C72 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009C74                            ; ===========================================================================
00009C74                            
00009C74                            Obj1F_Main:				; XREF: Obj1F_Index
00009C74 117C 0010 0016             		move.b	#$10,$16(a0)
00009C7A 117C 0008 0017             		move.b	#8,$17(a0)
00009C80 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009C88 317C 0400 0002             		move.w	#$400,2(a0)
00009C8E 117C 0004 0001             		move.b	#4,1(a0)
00009C94 117C 0003 0018             		move.b	#3,$18(a0)
00009C9A 117C 0006 0020             		move.b	#6,$20(a0)
00009CA0 117C 0015 0019             		move.b	#$15,$19(a0)
00009CA6 6100 0000                  		bsr.w	ObjectFall
00009CAA 4EB9 0000 0000             		jsr	ObjHitFloor
00009CB0 4A41                       		tst.w	d1
00009CB2 6A00                       		bpl.s	locret_955A
00009CB4 D368 000C                  		add.w	d1,$C(a0)
00009CB8 1143 0026                  		move.b	d3,$26(a0)
00009CBC 317C 0000 0012             		move.w	#0,$12(a0)
00009CC2 5428 0024                  		addq.b	#2,$24(a0)
00009CC6                            
00009CC6                            locret_955A:
00009CC6 4E75                       		rts	
00009CC8                            ; ===========================================================================
00009CC8                            
00009CC8                            Obj1F_Action:				; XREF: Obj1F_Index
00009CC8 7000                       		moveq	#0,d0
00009CCA 1028 0025                  		move.b	$25(a0),d0
00009CCE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009CD2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009CD6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009CDC 6100 0000                  		bsr.w	AnimateSprite
00009CE0 6000 0000                  		bra.w	MarkObjGone
00009CE4                            ; ===========================================================================
00009CE4 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009CE6 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009CE8                            ; ===========================================================================
00009CE8                            
00009CE8                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009CE8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009CEC 6A00                       		bpl.s	locret_95B6
00009CEE 4A28 0001                  		tst.b	1(a0)
00009CF2 6A00                       		bpl.s	Obj1F_Move
00009CF4 0868 0001 0032             		bchg	#1,$32(a0)
00009CFA 6600                       		bne.s	Obj1F_MakeFire
00009CFC                            
00009CFC                            Obj1F_Move:
00009CFC 5428 0025                  		addq.b	#2,$25(a0)
00009D00 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009D06 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009D0C 6100 0000                  		bsr.w	Obj1F_SetAni
00009D10 5600                       		addq.b	#3,d0
00009D12 1140 001C                  		move.b	d0,$1C(a0)
00009D16 0868 0000 0022             		bchg	#0,$22(a0)
00009D1C 6600                       		bne.s	locret_95B6
00009D1E 4468 0010                  		neg.w	$10(a0)		; change direction
00009D22                            
00009D22                            locret_95B6:
00009D22 4E75                       		rts	
00009D24                            ; ===========================================================================
00009D24                            
00009D24                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009D24 317C 003B 0030             		move.w	#$3B,$30(a0)
00009D2A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009D30 6100 0000                  		bsr.w	SingleObjLoad
00009D34 6600                       		bne.s	Obj1F_MakeFire2
00009D36 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009D3A 137C 0006 0024             		move.b	#6,$24(a1)
00009D40 3368 0008 0008             		move.w	8(a0),8(a1)
00009D46 0469 0010 0008             		subi.w	#$10,8(a1)
00009D4C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D52 337C FF00 0010             		move.w	#-$100,$10(a1)
00009D58                            
00009D58                            Obj1F_MakeFire2:
00009D58 6100 0000                  		bsr.w	SingleObjLoad
00009D5C 6600                       		bne.s	locret_9618
00009D5E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009D62 137C 0006 0024             		move.b	#6,$24(a1)
00009D68 3368 0008 0008             		move.w	8(a0),8(a1)
00009D6E 0669 0010 0008             		addi.w	#$10,8(a1)
00009D74 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D7A 337C 0100 0010             		move.w	#$100,$10(a1)
00009D80                            
00009D80                            locret_9618:
00009D80 4E75                       		rts	
00009D82                            ; ===========================================================================
00009D82                            
00009D82                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009D82 5368 0030                  		subq.w	#1,$30(a0)
00009D86 6B00                       		bmi.s	loc_966E
00009D88 6100 0000                  		bsr.w	SpeedToPos
00009D8C 0868 0000 0032             		bchg	#0,$32(a0)
00009D92 6600                       		bne.s	loc_9654
00009D94 3628 0008                  		move.w	8(a0),d3
00009D98 0643 0010                  		addi.w	#$10,d3
00009D9C 0828 0000 0022             		btst	#0,$22(a0)
00009DA2 6700                       		beq.s	loc_9640
00009DA4 0443 0020                  		subi.w	#$20,d3
00009DA8                            
00009DA8                            loc_9640:
00009DA8 4EB9 0000 0000             		jsr	ObjHitFloor2
00009DAE 0C41 FFF8                  		cmpi.w	#-8,d1
00009DB2 6D00                       		blt.s	loc_966E
00009DB4 0C41 000C                  		cmpi.w	#$C,d1
00009DB8 6C00                       		bge.s	loc_966E
00009DBA 4E75                       		rts	
00009DBC                            ; ===========================================================================
00009DBC                            
00009DBC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009DBC 4EB9 0000 0000             		jsr	ObjHitFloor
00009DC2 D368 000C                  		add.w	d1,$C(a0)
00009DC6 1143 0026                  		move.b	d3,$26(a0)
00009DCA 6100 0000                  		bsr.w	Obj1F_SetAni
00009DCE 5600                       		addq.b	#3,d0
00009DD0 1140 001C                  		move.b	d0,$1C(a0)
00009DD4 4E75                       		rts	
00009DD6                            ; ===========================================================================
00009DD6                            
00009DD6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009DD6 5528 0025                  		subq.b	#2,$25(a0)
00009DDA 317C 003B 0030             		move.w	#59,$30(a0)
00009DE0 317C 0000 0010             		move.w	#0,$10(a0)
00009DE6 6100 0000                  		bsr.w	Obj1F_SetAni
00009DEA 1140 001C                  		move.b	d0,$1C(a0)
00009DEE 4E75                       		rts	
00009DF0                            ; ---------------------------------------------------------------------------
00009DF0                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009DF0                            ; ---------------------------------------------------------------------------
00009DF0                            
00009DF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DF0                            
00009DF0                            
00009DF0                            Obj1F_SetAni:				; XREF: loc_966E
00009DF0 7000                       		moveq	#0,d0
00009DF2 1628 0026                  		move.b	$26(a0),d3
00009DF6 6B00                       		bmi.s	loc_96A4
00009DF8 0C03 0006                  		cmpi.b	#6,d3
00009DFC 6500                       		bcs.s	locret_96A2
00009DFE 7001                       		moveq	#1,d0
00009E00 0828 0000 0022             		btst	#0,$22(a0)
00009E06 6600                       		bne.s	locret_96A2
00009E08 7002                       		moveq	#2,d0
00009E0A                            
00009E0A                            locret_96A2:
00009E0A 4E75                       		rts	
00009E0C                            ; ===========================================================================
00009E0C                            
00009E0C                            loc_96A4:				; XREF: Obj1F_SetAni
00009E0C 0C03 00FA                  		cmpi.b	#-6,d3
00009E10 6200                       		bhi.s	locret_96B6
00009E12 7002                       		moveq	#2,d0
00009E14 0828 0000 0022             		btst	#0,$22(a0)
00009E1A 6600                       		bne.s	locret_96B6
00009E1C 7001                       		moveq	#1,d0
00009E1E                            
00009E1E                            locret_96B6:
00009E1E 4E75                       		rts	
00009E20                            ; End of function Obj1F_SetAni
00009E20                            
00009E20                            ; ===========================================================================
00009E20                            
00009E20                            Obj1F_Delete:				; XREF: Obj1F_Index
00009E20 6100 0000                  		bsr.w	DeleteObject
00009E24 4E75                       		rts	
00009E26                            ; ===========================================================================
00009E26                            ; ---------------------------------------------------------------------------
00009E26                            ; Sub-object - missile that the	Crabmeat throws
00009E26                            ; ---------------------------------------------------------------------------
00009E26                            
00009E26                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009E26 5428 0024                  		addq.b	#2,$24(a0)
00009E2A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009E32 317C 0400 0002             		move.w	#$400,2(a0)
00009E38 117C 0004 0001             		move.b	#4,1(a0)
00009E3E 117C 0003 0018             		move.b	#3,$18(a0)
00009E44 117C 0087 0020             		move.b	#$87,$20(a0)
00009E4A 117C 0008 0019             		move.b	#8,$19(a0)
00009E50 317C FC00 0012             		move.w	#-$400,$12(a0)
00009E56 117C 0007 001C             		move.b	#7,$1C(a0)
00009E5C                            
00009E5C                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009E5C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E62 6100 0000                  		bsr.w	AnimateSprite
00009E66 6100 0000                  		bsr.w	ObjectFall
00009E6A 6100 0000                  		bsr.w	DisplaySprite
00009E6E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E72 0640 00E0                  		addi.w	#$E0,d0
00009E76 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E7A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009E7C 4E75                       		rts	
00009E7E                            ; ===========================================================================
00009E7E                            
00009E7E                            Obj1F_Delete2:
00009E7E 6000 0000                  		bra.w	DeleteObject
00009E82                            ; ===========================================================================
00009E82                            Ani_obj1F:
00009E82                            	include "_anim\obj1F.asm"
00009E82                            ; ---------------------------------------------------------------------------
00009E82                            ; Animation script - Crabmeat enemy
00009E82                            ; ---------------------------------------------------------------------------
00009E82 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009E88 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009E8E 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009E92 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009E96 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009E9A 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009E9E 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009EA4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009EAA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009EB0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009EB4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009EB8                            		even
00009EB8                            		even
00009EB8                            
00009EB8                            ; ---------------------------------------------------------------------------
00009EB8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009EB8                            ; ---------------------------------------------------------------------------
00009EB8                            Map_obj1F:
00009EB8                            	include "_maps\obj1F.asm"
00009EB8                            Map_1514:
00009EB8 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009EBA 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009EBC 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009EBE 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009EC0 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009EC2 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009EC4 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009EC6 03                         Map_1514_E: 	dc.b $3
00009EC7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009ECC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009ED1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009ED6 03                         Map_1514_1E: 	dc.b $3
00009ED7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EDC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EE1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EE6 03                         Map_1514_2E: 	dc.b $3
00009EE7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EEC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EF1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EF6 03                         Map_1514_3E: 	dc.b $3
00009EF7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EFC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009F01 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009F06 03                         Map_1514_4E: 	dc.b $3
00009F07 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009F0C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009F11 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009F16 01                         Map_1514_5E: 	dc.b $1
00009F17 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009F1C 01                         Map_1514_64: 	dc.b $1
00009F1D F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009F22                            	even
00009F22                            	even
00009F22                            
00009F22                            ; ===========================================================================
00009F22                            ; ---------------------------------------------------------------------------
00009F22                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009F22                            ; ---------------------------------------------------------------------------
00009F22                            
00009F22                            Obj22:					; XREF: Obj_Index
00009F22 7000                       		moveq	#0,d0
00009F24 1028 0024                  		move.b	$24(a0),d0
00009F28 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009F2C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009F30                            ; ===========================================================================
00009F30 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009F32 0000                       		dc.w Obj22_Action-Obj22_Index
00009F34 0000                       		dc.w Obj22_Delete-Obj22_Index
00009F36                            ; ===========================================================================
00009F36                            
00009F36                            Obj22_Main:				; XREF: Obj22_Index
00009F36 5428 0024                  		addq.b	#2,$24(a0)
00009F3A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009F42 317C 0444 0002             		move.w	#$444,2(a0)
00009F48 117C 0004 0001             		move.b	#4,1(a0)
00009F4E 117C 0003 0018             		move.b	#3,$18(a0)
00009F54 117C 0008 0020             		move.b	#8,$20(a0)
00009F5A 117C 0018 0019             		move.b	#$18,$19(a0)
00009F60                            
00009F60                            Obj22_Action:				; XREF: Obj22_Index
00009F60 7000                       		moveq	#0,d0
00009F62 1028 0025                  		move.b	$25(a0),d0
00009F66 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009F6A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009F6E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009F74 6100 0000                  		bsr.w	AnimateSprite
00009F78 6000 0000                  		bra.w	MarkObjGone
00009F7C                            ; ===========================================================================
00009F7C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009F7E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009F80                            ; ===========================================================================
00009F80                            
00009F80                            Obj22_Move:				; XREF: Obj22_Index2
00009F80 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F84 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009F86 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009F8C 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009F8E 5428 0025                  		addq.b	#2,$25(a0)
00009F92 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009F98 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009F9E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009FA4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009FAA 6600                       		bne.s	locret_986C	; if not, branch
00009FAC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009FB0                            
00009FB0                            locret_986C:
00009FB0 4E75                       		rts	
00009FB2                            ; ===========================================================================
00009FB2                            
00009FB2                            Obj22_Fire:				; XREF: Obj22_Move
00009FB2 6100 0000                  		bsr.w	SingleObjLoad
00009FB6 6600                       		bne.s	locret_98D0
00009FB8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009FBC 3368 0008 0008             		move.w	8(a0),8(a1)
00009FC2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009FC8 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009FCE 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009FD4 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009FDA 303C 0018                  		move.w	#$18,d0
00009FDE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009FE4 6600                       		bne.s	loc_98AA	; if not, branch
00009FE6 4440                       		neg.w	d0
00009FE8 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009FEC                            
00009FEC                            loc_98AA:
00009FEC D169 0008                  		add.w	d0,8(a1)
00009FF0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009FF6 337C 000E 0032             		move.w	#$E,$32(a1)
00009FFC 2348 003C                  		move.l	a0,$3C(a1)
0000A000 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A006 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A00C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A012                            
0000A012                            locret_98D0:
0000A012 4E75                       		rts	
0000A014                            ; ===========================================================================
0000A014                            
0000A014                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A014 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A018 6B00                       		bmi.s	Obj22_ChgDir
0000A01A 6100 0000                  		bsr.w	SpeedToPos
0000A01E 4A28 0034                  		tst.b	$34(a0)
0000A022 6600                       		bne.s	locret_992A
0000A024 3038 D008                  		move.w	($FFFFD008).w,d0
0000A028 9068 0008                  		sub.w	8(a0),d0
0000A02C 6A00                       		bpl.s	Obj22_SetNrSonic
0000A02E 4440                       		neg.w	d0
0000A030                            
0000A030                            Obj22_SetNrSonic:
0000A030 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A034 6400                       		bcc.s	locret_992A	; if not, branch
0000A036 4A28 0001                  		tst.b	1(a0)
0000A03A 6A00                       		bpl.s	locret_992A
0000A03C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A042 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A048 6000                       		bra.s	Obj22_Stop
0000A04A                            ; ===========================================================================
0000A04A                            
0000A04A                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A04A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A050 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A056 317C 003B 0032             		move.w	#59,$32(a0)
0000A05C                            
0000A05C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A05C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A060 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A066 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A06C                            
0000A06C                            locret_992A:
0000A06C 4E75                       		rts	
0000A06E                            ; ===========================================================================
0000A06E                            
0000A06E                            Obj22_Delete:				; XREF: Obj22_Index
0000A06E 6100 0000                  		bsr.w	DeleteObject
0000A072 4E75                       		rts	
0000A074                            ; ===========================================================================
0000A074                            ; ---------------------------------------------------------------------------
0000A074                            ; Object 23 - missile that Buzz	Bomber throws
0000A074                            ; ---------------------------------------------------------------------------
0000A074                            
0000A074                            Obj23:					; XREF: Obj_Index
0000A074 7000                       		moveq	#0,d0
0000A076 1028 0024                  		move.b	$24(a0),d0
0000A07A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A07E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A082                            ; ===========================================================================
0000A082 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A084 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A086 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A088 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A08A 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A08C                            ; ===========================================================================
0000A08C                            
0000A08C                            Obj23_Main:				; XREF: Obj23_Index
0000A08C 5368 0032                  		subq.w	#1,$32(a0)
0000A090 6A00                       		bpl.s	Obj23_ChkCancel
0000A092 5428 0024                  		addq.b	#2,$24(a0)
0000A096 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A09E 317C 2444 0002             		move.w	#$2444,2(a0)
0000A0A4 117C 0004 0001             		move.b	#4,1(a0)
0000A0AA 117C 0003 0018             		move.b	#3,$18(a0)
0000A0B0 117C 0008 0019             		move.b	#8,$19(a0)
0000A0B6 0228 0003 0022             		andi.b	#3,$22(a0)
0000A0BC 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A0C0 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A0C2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A0C8 117C 0087 0020             		move.b	#$87,$20(a0)
0000A0CE 117C 0001 001C             		move.b	#1,$1C(a0)
0000A0D4 6000                       		bra.s	Obj23_Animate2
0000A0D6                            ; ===========================================================================
0000A0D6                            
0000A0D6                            Obj23_Animate:				; XREF: Obj23_Index
0000A0D6 6100                       		bsr.s	Obj23_ChkCancel
0000A0D8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0DE 6100 0000                  		bsr.w	AnimateSprite
0000A0E2 6000 0000                  		bra.w	DisplaySprite
0000A0E6                            ; ---------------------------------------------------------------------------
0000A0E6                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A0E6                            ; destroyed, and if it has, then cancel	the missile
0000A0E6                            ; ---------------------------------------------------------------------------
0000A0E6                            
0000A0E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0E6                            
0000A0E6                            
0000A0E6                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A0E6 2268 003C                  		movea.l	$3C(a0),a1
0000A0EA 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A0EE 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A0F0 4E75                       		rts	
0000A0F2                            ; End of function Obj23_ChkCancel
0000A0F2                            
0000A0F2                            ; ===========================================================================
0000A0F2                            
0000A0F2                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A0F2 0828 0007 0022             		btst	#7,$22(a0)
0000A0F8 6600                       		bne.s	Obj23_Explode
0000A0FA 117C 0087 0020             		move.b	#$87,$20(a0)
0000A100 117C 0001 001C             		move.b	#1,$1C(a0)
0000A106 6100 0000                  		bsr.w	SpeedToPos
0000A10A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A110 6100 0000                  		bsr.w	AnimateSprite
0000A114 6100 0000                  		bsr.w	DisplaySprite
0000A118 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A11C 0640 00E0                  		addi.w	#$E0,d0
0000A120 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A124 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A126 4E75                       		rts	
0000A128                            ; ===========================================================================
0000A128                            
0000A128                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A128 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A12C 117C 0000 0024             		move.b	#0,$24(a0)
0000A132 6000 F2D4                  		bra.w	Obj24
0000A136                            ; ===========================================================================
0000A136                            
0000A136                            Obj23_Delete:				; XREF: Obj23_Index
0000A136 6100 0000                  		bsr.w	DeleteObject
0000A13A 4E75                       		rts	
0000A13C                            ; ===========================================================================
0000A13C                            
0000A13C                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A13C 4A28 0001                  		tst.b	1(a0)
0000A140 6AF4                       		bpl.s	Obj23_Delete
0000A142 6100 0000                  		bsr.w	SpeedToPos
0000A146                            
0000A146                            Obj23_Animate2:				; XREF: Obj23_Main
0000A146 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A14C 6100 0000                  		bsr.w	AnimateSprite
0000A150 6100 0000                  		bsr.w	DisplaySprite
0000A154 4E75                       		rts	
0000A156                            ; ===========================================================================
0000A156                            Ani_obj22:
0000A156                            	include "_anim\obj22.asm"
0000A156                            ; ---------------------------------------------------------------------------
0000A156                            ; Animation script - Buzz Bomber enemy
0000A156                            ; ---------------------------------------------------------------------------
0000A156 0000                       		dc.w byte_9A1E-Ani_obj22
0000A158 0000                       		dc.w byte_9A22-Ani_obj22
0000A15A 0000                       		dc.w byte_9A26-Ani_obj22
0000A15C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A160 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A164 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A168                            		even
0000A168                            		even
0000A168                            
0000A168                            Ani_obj23:
0000A168                            	include "_anim\obj23.asm"
0000A168                            ; ---------------------------------------------------------------------------
0000A168                            ; Animation script - missile that Buzz Bomber throws
0000A168                            ; ---------------------------------------------------------------------------
0000A168 0000                       		dc.w byte_9A2E-Ani_obj23
0000A16A 0000                       		dc.w byte_9A32-Ani_obj23
0000A16C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A170 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A174                            		even
0000A174                            		even
0000A174                            
0000A174                            ; ---------------------------------------------------------------------------
0000A174                            ; Sprite mappings - Buzz Bomber	enemy
0000A174                            ; ---------------------------------------------------------------------------
0000A174                            Map_obj22:
0000A174                            	include "_maps\obj22.asm"
0000A174                            Map_e97a:
0000A174 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A176 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A178 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A17A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A17C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A17E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A180 06                         Map_e97a_C: 	dc.b $6
0000A181 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A186 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A18B 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A190 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A195 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A19A F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A19F 06                         Map_e97a_2B: 	dc.b $6
0000A1A0 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A1A5 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A1AA 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A1AF 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A1B4 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A1B9 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A1BE 07                         Map_e97a_4A: 	dc.b $7
0000A1BF 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A1C4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A1C9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A1CE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A1D3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A1D8 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A1DD F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A1E2 07                         Map_e97a_6E: 	dc.b $7
0000A1E3 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A1E8 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A1ED F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A1F2 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A1F7 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A1FC F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A201 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A206 06                         Map_e97a_92: 	dc.b $6
0000A207 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A20C 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A211 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A216 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A21B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A220 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A225 04                         Map_e97a_B1: 	dc.b $4
0000A226 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A22B 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A230 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A235 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A23A                            	even
0000A23A                            	even
0000A23A                            
0000A23A                            ; ---------------------------------------------------------------------------
0000A23A                            ; Sprite mappings - missile that Buzz Bomber throws
0000A23A                            ; ---------------------------------------------------------------------------
0000A23A                            Map_obj23:
0000A23A                            	include "_maps\obj23.asm"
0000A23A                            ; ---------------------------------------------------------------------------
0000A23A                            ; Sprite mappings - missile that Buzz Bomber throws
0000A23A                            ; ---------------------------------------------------------------------------
0000A23A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A23E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A242 01                         byte_9B0E:	dc.b 1
0000A243 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A248 01                         byte_9B14:	dc.b 1
0000A249 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A24E 01                         byte_9B1A:	dc.b 1
0000A24F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A254 01                         byte_9B20:	dc.b 1
0000A255 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A25A                            		even
0000A25A                            		even
0000A25A                            
0000A25A                            ; ===========================================================================
0000A25A                            ; ---------------------------------------------------------------------------
0000A25A                            ; Object 25 - rings
0000A25A                            ; ---------------------------------------------------------------------------
0000A25A                            
0000A25A                            Obj25:					; XREF: Obj_Index
0000A25A 7000                       		moveq	#0,d0
0000A25C 1028 0024                  		move.b	$24(a0),d0
0000A260 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A264 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A268                            ; ===========================================================================
0000A268 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A26A 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A26C 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A26E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A270 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A272                            ; ---------------------------------------------------------------------------
0000A272                            ; Distances between rings (format: horizontal, vertical)
0000A272                            ; ---------------------------------------------------------------------------
0000A272 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A274 1800                       		dc.b $18, 0		; horizontal normal
0000A276 2000                       		dc.b $20, 0		; horizontal wide
0000A278 0010                       		dc.b 0,	$10		; vertical tight
0000A27A 0018                       		dc.b 0,	$18		; vertical normal
0000A27C 0020                       		dc.b 0,	$20		; vertical wide
0000A27E 1010                       		dc.b $10, $10		; diagonal
0000A280 1818                       		dc.b $18, $18
0000A282 2020                       		dc.b $20, $20
0000A284 F010                       		dc.b $F0, $10
0000A286 E818                       		dc.b $E8, $18
0000A288 E020                       		dc.b $E0, $20
0000A28A 1008                       		dc.b $10, 8
0000A28C 1810                       		dc.b $18, $10
0000A28E F008                       		dc.b $F0, 8
0000A290 E810                       		dc.b $E8, $10
0000A292                            ; ===========================================================================
0000A292                            
0000A292                            Obj25_Main:				; XREF: Obj25_Index
0000A292 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A296 7000                       		moveq	#0,d0
0000A298 1028 0023                  		move.b	$23(a0),d0
0000A29C 45F2 0002                  		lea	2(a2,d0.w),a2
0000A2A0 1812                       		move.b	(a2),d4
0000A2A2 1228 0028                  		move.b	$28(a0),d1
0000A2A6 1001                       		move.b	d1,d0
0000A2A8 0241 0007                  		andi.w	#7,d1
0000A2AC 0C41 0007                  		cmpi.w	#7,d1
0000A2B0 6600                       		bne.s	loc_9B80
0000A2B2 7206                       		moveq	#6,d1
0000A2B4                            
0000A2B4                            loc_9B80:
0000A2B4 4841                       		swap	d1
0000A2B6 323C 0000                  		move.w	#0,d1
0000A2BA E808                       		lsr.b	#4,d0
0000A2BC D040                       		add.w	d0,d0
0000A2BE 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A2C2 4885                       		ext.w	d5
0000A2C4 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A2C8 4886                       		ext.w	d6
0000A2CA 2248                       		movea.l	a0,a1
0000A2CC 3428 0008                  		move.w	8(a0),d2
0000A2D0 3628 000C                  		move.w	$C(a0),d3
0000A2D4 E20C                       		lsr.b	#1,d4
0000A2D6 6500                       		bcs.s	loc_9C02
0000A2D8 0892 0007                  		bclr	#7,(a2)
0000A2DC 6000                       		bra.s	loc_9BBA
0000A2DE                            ; ===========================================================================
0000A2DE                            
0000A2DE                            Obj25_MakeRings:
0000A2DE 4841                       		swap	d1
0000A2E0 E20C                       		lsr.b	#1,d4
0000A2E2 6500                       		bcs.s	loc_9C02
0000A2E4 0892 0007                  		bclr	#7,(a2)
0000A2E8 6100 0000                  		bsr.w	SingleObjLoad
0000A2EC 6600                       		bne.s	loc_9C0E
0000A2EE                            
0000A2EE                            loc_9BBA:				; XREF: Obj25_Main
0000A2EE 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A2F2 5429 0024                  		addq.b	#2,$24(a1)
0000A2F6 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A2FA 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A300 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A304 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A30C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A312 137C 0004 0001             		move.b	#4,1(a1)
0000A318 137C 0002 0018             		move.b	#2,$18(a1)
0000A31E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A324 137C 0008 0019             		move.b	#8,$19(a1)
0000A32A 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A330 1341 0034                  		move.b	d1,$34(a1)
0000A334                            
0000A334                            loc_9C02:
0000A334 5241                       		addq.w	#1,d1
0000A336 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A338 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A33A 4841                       		swap	d1
0000A33C 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A340                            
0000A340                            loc_9C0E:
0000A340 0812 0000                  		btst	#0,(a2)
0000A344 6600 0000                  		bne.w	DeleteObject
0000A348                            
0000A348                            Obj25_Animate:				; XREF: Obj25_Index
0000A348 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A34E 6100 0000                  		bsr.w	DisplaySprite
0000A352 3028 0032                  		move.w	$32(a0),d0
0000A356 0240 FF80                  		andi.w	#$FF80,d0
0000A35A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A35E 0441 0080                  		subi.w	#$80,d1
0000A362 0241 FF80                  		andi.w	#$FF80,d1
0000A366 9041                       		sub.w	d1,d0
0000A368 0C40 0280                  		cmpi.w	#$280,d0
0000A36C 6200                       		bhi.s	Obj25_Delete
0000A36E 4E75                       		rts	
0000A370                            ; ===========================================================================
0000A370                            
0000A370                            Obj25_Collect:				; XREF: Obj25_Index
0000A370 5428 0024                  		addq.b	#2,$24(a0)
0000A374 117C 0000 0020             		move.b	#0,$20(a0)
0000A37A 117C 0001 0018             		move.b	#1,$18(a0)
0000A380 6100 0000                  		bsr.w	CollectRing
0000A384 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A388 7000                       		moveq	#0,d0
0000A38A 1028 0023                  		move.b	$23(a0),d0
0000A38E 1228 0034                  		move.b	$34(a0),d1
0000A392 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A396                            
0000A396                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A396 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A39C 6100 0000                  		bsr.w	AnimateSprite
0000A3A0 6000 0000                  		bra.w	DisplaySprite
0000A3A4                            ; ===========================================================================
0000A3A4                            
0000A3A4                            Obj25_Delete:				; XREF: Obj25_Index
0000A3A4 6000 0000                  		bra.w	DeleteObject
0000A3A8                            
0000A3A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A3A8                            
0000A3A8                            
0000A3A8                            CollectRing:				; XREF: Obj25_Collect
0000A3A8 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A3AC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A3B2 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A3B6 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A3BC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A3BE 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A3C4 6700                       		beq.s	loc_9CA4
0000A3C6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A3CC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A3CE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A3D4 6600                       		bne.s	Obj25_PlaySnd
0000A3D6                            
0000A3D6                            loc_9CA4:
0000A3D6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A3DA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A3DE 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A3E2                            
0000A3E2                            Obj25_PlaySnd:
0000A3E2 4EF9 0000 15D2             		jmp	(PlaySound_Special).l
0000A3E8                            ; End of function CollectRing
0000A3E8                            
0000A3E8                            ; ===========================================================================
0000A3E8                            ; ---------------------------------------------------------------------------
0000A3E8                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A3E8                            ; ---------------------------------------------------------------------------
0000A3E8                            
0000A3E8                            Obj37:					; XREF: Obj_Index
0000A3E8 7000                       		moveq	#0,d0
0000A3EA 1028 0024                  		move.b	$24(a0),d0
0000A3EE 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A3F2 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A3F6                            ; ===========================================================================
0000A3F6 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A3F8 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A3FA 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A3FC 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A3FE 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A400                            ; ===========================================================================
0000A400                            
0000A400                            Obj37_CountRings:			; XREF: Obj37_Index
0000A400 2248                       		movea.l	a0,a1
0000A402 7A00                       		moveq	#0,d5
0000A404 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A408 7020                       		moveq	#32,d0
0000A40A BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A40C 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A40E 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A410                            
0000A410                            loc_9CDE:
0000A410 5345                       		subq.w	#1,d5
0000A412 383C 0288                  		move.w	#$288,d4
0000A416 6000                       		bra.s	Obj37_MakeRings
0000A418                            ; ===========================================================================
0000A418                            
0000A418                            Obj37_Loop:
0000A418 6100 0000                  		bsr.w	SingleObjLoad
0000A41C 6600 0000                  		bne.w	Obj37_ResetCounter
0000A420                            
0000A420                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A420 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A424 5429 0024                  		addq.b	#2,$24(a1)
0000A428 137C 0008 0016             		move.b	#8,$16(a1)
0000A42E 137C 0008 0017             		move.b	#8,$17(a1)
0000A434 3368 0008 0008             		move.w	8(a0),8(a1)
0000A43A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A440 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A448 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A44E 137C 0004 0001             		move.b	#4,1(a1)
0000A454 137C 0003 0018             		move.b	#3,$18(a1)
0000A45A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A460 137C 0008 0019             		move.b	#8,$19(a1)
0000A466 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A46C 4A44                       		tst.w	d4
0000A46E 6B00                       		bmi.s	loc_9D62
0000A470 3004                       		move.w	d4,d0
0000A472 6100 88C2                  		bsr.w	CalcSine
0000A476 3404                       		move.w	d4,d2
0000A478 E04A                       		lsr.w	#8,d2
0000A47A E560                       		asl.w	d2,d0
0000A47C E561                       		asl.w	d2,d1
0000A47E 3400                       		move.w	d0,d2
0000A480 3601                       		move.w	d1,d3
0000A482 0604 0010                  		addi.b	#$10,d4
0000A486 6400                       		bcc.s	loc_9D62
0000A488 0444 0080                  		subi.w	#$80,d4
0000A48C 6400                       		bcc.s	loc_9D62
0000A48E 383C 0288                  		move.w	#$288,d4
0000A492                            
0000A492                            loc_9D62:
0000A492 3342 0010                  		move.w	d2,$10(a1)
0000A496 3343 0012                  		move.w	d3,$12(a1)
0000A49A 4442                       		neg.w	d2
0000A49C 4444                       		neg.w	d4
0000A49E 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A4A2                            
0000A4A2                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A4A2 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A4A8 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A4AE 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A4B4 303C 00C6                  		move.w	#$C6,d0
0000A4B8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A4BE                            
0000A4BE                            Obj37_Bounce:				; XREF: Obj37_Index
0000A4BE 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A4C4 6100 0000                  		bsr.w	SpeedToPos
0000A4C8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A4CE 6B00                       		bmi.s	Obj37_ChkDel
0000A4D0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A4D4 D007                       		add.b	d7,d0
0000A4D6 0200 0003                  		andi.b	#3,d0
0000A4DA 6600                       		bne.s	Obj37_ChkDel
0000A4DC 4EB9 0000 0000             		jsr	ObjHitFloor
0000A4E2 4A41                       		tst.w	d1
0000A4E4 6A00                       		bpl.s	Obj37_ChkDel
0000A4E6 D368 000C                  		add.w	d1,$C(a0)
0000A4EA 3028 0012                  		move.w	$12(a0),d0
0000A4EE E440                       		asr.w	#2,d0
0000A4F0 9168 0012                  		sub.w	d0,$12(a0)
0000A4F4 4468 0012                  		neg.w	$12(a0)
0000A4F8                            
0000A4F8                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A4F8 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A4FC 6700                       		beq.s	Obj37_Delete
0000A4FE 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A502 0640 00E0                  		addi.w	#$E0,d0
0000A506 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A50A 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A50C 6000 0000                  		bra.w	DisplaySprite
0000A510                            ; ===========================================================================
0000A510                            
0000A510                            Obj37_Collect:				; XREF: Obj37_Index
0000A510 5428 0024                  		addq.b	#2,$24(a0)
0000A514 117C 0000 0020             		move.b	#0,$20(a0)
0000A51A 117C 0001 0018             		move.b	#1,$18(a0)
0000A520 6100 FE86                  		bsr.w	CollectRing
0000A524                            
0000A524                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A524 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A52A 6100 0000                  		bsr.w	AnimateSprite
0000A52E 6000 0000                  		bra.w	DisplaySprite
0000A532                            ; ===========================================================================
0000A532                            
0000A532                            Obj37_Delete:				; XREF: Obj37_Index
0000A532 6000 0000                  		bra.w	DeleteObject
0000A536                            ; ===========================================================================
0000A536                            ; ---------------------------------------------------------------------------
0000A536                            ; Object 4B - giant ring for entry to special stage
0000A536                            ; ---------------------------------------------------------------------------
0000A536                            
0000A536                            Obj4B:					; XREF: Obj_Index
0000A536 7000                       		moveq	#0,d0
0000A538 1028 0024                  		move.b	$24(a0),d0
0000A53C 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A540 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A544                            ; ===========================================================================
0000A544 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A546 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A548 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A54A 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A54C                            ; ===========================================================================
0000A54C                            
0000A54C                            Obj4B_Main:				; XREF: Obj4B_Index
0000A54C 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A554 317C 2400 0002             		move.w	#$2400,2(a0)
0000A55A 0028 0004 0001             		ori.b	#4,1(a0)
0000A560 117C 0040 0019             		move.b	#$40,$19(a0)
0000A566 4A28 0001                  		tst.b	1(a0)
0000A56A 6A00                       		bpl.s	Obj4B_Animate
0000A56C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A572 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A576 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A57C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A57E 4E75                       		rts	
0000A580                            ; ===========================================================================
0000A580                            
0000A580                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A580 5428 0024                  		addq.b	#2,$24(a0)
0000A584 117C 0002 0018             		move.b	#2,$18(a0)
0000A58A 117C 0052 0020             		move.b	#$52,$20(a0)
0000A590 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A596                            
0000A596                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A596 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A59C 3028 0008                  		move.w	8(a0),d0
0000A5A0 0240 FF80                  		andi.w	#$FF80,d0
0000A5A4 3238 F700                  		move.w	($FFFFF700).w,d1
0000A5A8 0441 0080                  		subi.w	#$80,d1
0000A5AC 0241 FF80                  		andi.w	#$FF80,d1
0000A5B0 9041                       		sub.w	d1,d0
0000A5B2 0C40 0280                  		cmpi.w	#$280,d0
0000A5B6 6200 0000                  		bhi.w	DeleteObject
0000A5BA 6000 0000                  		bra.w	DisplaySprite
0000A5BE                            ; ===========================================================================
0000A5BE                            
0000A5BE                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A5BE 5528 0024                  		subq.b	#2,$24(a0)
0000A5C2 117C 0000 0020             		move.b	#0,$20(a0)
0000A5C8 6100 0000                  		bsr.w	SingleObjLoad
0000A5CC 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A5D0 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A5D4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5E0 2348 003C                  		move.l	a0,$3C(a1)
0000A5E4 3038 D008                  		move.w	($FFFFD008).w,d0
0000A5E8 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A5EC 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A5EE 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A5F4                            
0000A5F4                            Obj4B_PlaySnd:
0000A5F4 303C 00C3                  		move.w	#$C3,d0
0000A5F8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A5FE 6096                       		bra.s	Obj4B_Animate
0000A600                            ; ===========================================================================
0000A600                            
0000A600                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A600 6000 0000                  		bra.w	DeleteObject
0000A604                            ; ===========================================================================
0000A604                            ; ---------------------------------------------------------------------------
0000A604                            ; Object 7C - flash effect when	you collect the	giant ring
0000A604                            ; ---------------------------------------------------------------------------
0000A604                            
0000A604                            Obj7C:					; XREF: Obj_Index
0000A604 7000                       		moveq	#0,d0
0000A606 1028 0024                  		move.b	$24(a0),d0
0000A60A 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A60E 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A612                            ; ===========================================================================
0000A612 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A614 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A616 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A618                            ; ===========================================================================
0000A618                            
0000A618                            Obj7C_Main:				; XREF: Obj7C_Index
0000A618 5428 0024                  		addq.b	#2,$24(a0)
0000A61C 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A624 317C 2462 0002             		move.w	#$2462,2(a0)
0000A62A 0028 0004 0001             		ori.b	#4,1(a0)
0000A630 117C 0000 0018             		move.b	#0,$18(a0)
0000A636 117C 0020 0019             		move.b	#$20,$19(a0)
0000A63C 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A642                            
0000A642                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A642 6100                       		bsr.s	Obj7C_Collect
0000A644 3028 0008                  		move.w	8(a0),d0
0000A648 0240 FF80                  		andi.w	#$FF80,d0
0000A64C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A650 0441 0080                  		subi.w	#$80,d1
0000A654 0241 FF80                  		andi.w	#$FF80,d1
0000A658 9041                       		sub.w	d1,d0
0000A65A 0C40 0280                  		cmpi.w	#$280,d0
0000A65E 6200 0000                  		bhi.w	DeleteObject
0000A662 6000 0000                  		bra.w	DisplaySprite
0000A666                            
0000A666                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A666                            
0000A666                            
0000A666                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A666 5328 001E                  		subq.b	#1,$1E(a0)
0000A66A 6A00                       		bpl.s	locret_9F76
0000A66C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A672 5228 001A                  		addq.b	#1,$1A(a0)
0000A676 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A67C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A67E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A684 6600                       		bne.s	locret_9F76	; if not, branch
0000A686 2268 003C                  		movea.l	$3C(a0),a1
0000A68A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A690 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A696 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A69C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A6A0 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A6A4                            
0000A6A4                            locret_9F76:
0000A6A4 4E75                       		rts	
0000A6A6                            ; ===========================================================================
0000A6A6                            
0000A6A6                            Obj7C_End:				; XREF: Obj7C_Collect
0000A6A6 5428 0024                  		addq.b	#2,$24(a0)
0000A6AA 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A6B0 588F                       		addq.l	#4,sp
0000A6B2 4E75                       		rts	
0000A6B4                            ; End of function Obj7C_Collect
0000A6B4                            
0000A6B4                            ; ===========================================================================
0000A6B4                            
0000A6B4                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A6B4 6000 0000                  		bra.w	DeleteObject
0000A6B8                            ; ===========================================================================
0000A6B8                            Ani_obj25:
0000A6B8                            	include "_anim\obj25.asm"
0000A6B8                            ; ---------------------------------------------------------------------------
0000A6B8                            ; Animation script - ring
0000A6B8                            ; ---------------------------------------------------------------------------
0000A6B8 0000                       		dc.w byte_9F8C-Ani_obj25
0000A6BA 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A6C0                            		even
0000A6C0                            		even
0000A6C0                            
0000A6C0                            ; ---------------------------------------------------------------------------
0000A6C0                            ; Sprite mappings - rings
0000A6C0                            ; ---------------------------------------------------------------------------
0000A6C0                            Map_obj25:
0000A6C0                            	include "_maps\obj25.asm"
0000A6C0                            ; ---------------------------------------------------------------------------
0000A6C0                            ; Sprite mappings - rings
0000A6C0                            ; ---------------------------------------------------------------------------
0000A6C0 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A6C4 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A6C8 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A6CC 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A6D0 01                         byte_9FA2:	dc.b 1
0000A6D1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A6D6 01                         byte_9FA8:	dc.b 1
0000A6D7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A6DC 01                         byte_9FAE:	dc.b 1
0000A6DD F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A6E2 01                         byte_9FB4:	dc.b 1
0000A6E3 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A6E8 01                         byte_9FBA:	dc.b 1
0000A6E9 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A6EE 01                         byte_9FC0:	dc.b 1
0000A6EF F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A6F4 01                         byte_9FC6:	dc.b 1
0000A6F5 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A6FA 01                         byte_9FCC:	dc.b 1
0000A6FB F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A700                            		even
0000A700                            		even
0000A700                            
0000A700                            ; ---------------------------------------------------------------------------
0000A700                            ; Sprite mappings - giant ring
0000A700                            ; ---------------------------------------------------------------------------
0000A700                            Map_obj4B:
0000A700                            	include "_maps\obj4B.asm"
0000A700                            ; ---------------------------------------------------------------------------
0000A700                            ; Sprite mappings - giant ring
0000A700                            ; ---------------------------------------------------------------------------
0000A700 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A704 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A708 0A                         byte_9FDA:	dc.b $A
0000A709 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A70E E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A713 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A718 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A71D F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A722 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A727 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A72C 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A731 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A736 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A73B 08                         byte_A00D:	dc.b 8
0000A73C E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A741 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A746 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A74B F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A750 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A755 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A75A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A75F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A764 04                         byte_A036:	dc.b 4
0000A765 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A76A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A76F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A774 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A779 08                         byte_A04B:	dc.b 8
0000A77A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A77F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A784 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A789 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A78E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A793 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A798 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A79D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A7A2                            		even
0000A7A2                            		even
0000A7A2                            
0000A7A2                            ; ---------------------------------------------------------------------------
0000A7A2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A7A2                            ; ---------------------------------------------------------------------------
0000A7A2                            Map_obj7C:
0000A7A2                            	include "_maps\obj7C.asm"
0000A7A2                            ; ---------------------------------------------------------------------------
0000A7A2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A7A2                            ; ---------------------------------------------------------------------------
0000A7A2 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A7A6 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A7AA 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A7AE 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A7B2 02                         byte_A084:	dc.b 2
0000A7B3 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A7B8 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A7BD 04                         byte_A08F:	dc.b 4
0000A7BE E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A7C3 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A7C8 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A7CD 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A7D2 04                         byte_A0A4:	dc.b 4
0000A7D3 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A7D8 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A7DD 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A7E2 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A7E7 04                         byte_A0B9:	dc.b 4
0000A7E8 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A7ED E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A7F2 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A7F7 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A7FC 04                         byte_A0CE:	dc.b 4
0000A7FD E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A802 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A807 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A80C 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A811 04                         byte_A0E3:	dc.b 4
0000A812 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A817 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A81C 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A821 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A826 02                         byte_A0F8:	dc.b 2
0000A827 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A82C 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A831 04                         byte_A103:	dc.b 4
0000A832 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A837 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A83C 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A841 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A846                            		even
0000A846                            		even
0000A846                            
0000A846                            ; ===========================================================================
0000A846                            ; ---------------------------------------------------------------------------
0000A846                            ; Object 26 - monitors
0000A846                            ; ---------------------------------------------------------------------------
0000A846                            
0000A846                            Obj26:					; XREF: Obj_Index
0000A846 7000                       		moveq	#0,d0
0000A848 1028 0024                  		move.b	$24(a0),d0
0000A84C 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A850 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A854                            ; ===========================================================================
0000A854 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A856 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A858 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A85A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A85C 0000                       		dc.w Obj26_Display-Obj26_Index
0000A85E                            ; ===========================================================================
0000A85E                            
0000A85E                            Obj26_Main:				; XREF: Obj26_Index
0000A85E 5428 0024                  		addq.b	#2,$24(a0)
0000A862 117C 000E 0016             		move.b	#$E,$16(a0)
0000A868 117C 000E 0017             		move.b	#$E,$17(a0)
0000A86E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A876 317C 0680 0002             		move.w	#$680,2(a0)
0000A87C 117C 0004 0001             		move.b	#4,1(a0)
0000A882 117C 0003 0018             		move.b	#3,$18(a0)
0000A888 117C 000F 0019             		move.b	#$F,$19(a0)
0000A88E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A892 7000                       		moveq	#0,d0
0000A894 1028 0023                  		move.b	$23(a0),d0
0000A898 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A89E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A8A4 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A8A6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A8AC 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A8B2 4E75                       		rts	
0000A8B4                            ; ===========================================================================
0000A8B4                            
0000A8B4                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A8B4 117C 0046 0020             		move.b	#$46,$20(a0)
0000A8BA 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A8C0                            
0000A8C0                            Obj26_Solid:				; XREF: Obj26_Index
0000A8C0 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A8C4 6700                       		beq.s	loc_A1EC	; if not, branch
0000A8C6 5500                       		subq.b	#2,d0
0000A8C8 6600                       		bne.s	Obj26_Fall
0000A8CA 7200                       		moveq	#0,d1
0000A8CC 1228 0019                  		move.b	$19(a0),d1
0000A8D0 0641 000B                  		addi.w	#$B,d1
0000A8D4 6100 D380                  		bsr.w	ExitPlatform
0000A8D8 0829 0003 0022             		btst	#3,$22(a1)
0000A8DE 6600 0000                  		bne.w	loc_A1BC
0000A8E2 4228 0025                  		clr.b	$25(a0)
0000A8E6 6000 0000                  		bra.w	Obj26_Animate
0000A8EA                            ; ===========================================================================
0000A8EA                            
0000A8EA                            loc_A1BC:				; XREF: Obj26_Solid
0000A8EA 363C 0010                  		move.w	#$10,d3
0000A8EE 3428 0008                  		move.w	8(a0),d2
0000A8F2 6100 D8C0                  		bsr.w	MvSonicOnPtfm
0000A8F6 6000 0000                  		bra.w	Obj26_Animate
0000A8FA                            ; ===========================================================================
0000A8FA                            
0000A8FA                            Obj26_Fall:				; XREF: Obj26_Solid
0000A8FA 6100 0000                  		bsr.w	ObjectFall
0000A8FE 4EB9 0000 0000             		jsr	ObjHitFloor
0000A904 4A41                       		tst.w	d1
0000A906 6A00 0000                  		bpl.w	Obj26_Animate
0000A90A D368 000C                  		add.w	d1,$C(a0)
0000A90E 4268 0012                  		clr.w	$12(a0)
0000A912 4228 0025                  		clr.b	$25(a0)
0000A916 6000 0000                  		bra.w	Obj26_Animate
0000A91A                            ; ===========================================================================
0000A91A                            
0000A91A                            loc_A1EC:				; XREF: Obj26_Solid
0000A91A 323C 001A                  		move.w	#$1A,d1
0000A91E 343C 000F                  		move.w	#$F,d2
0000A922 6100 0000                  		bsr.w	Obj26_SolidSides
0000A926 6700 0000                  		beq.w	loc_A25C
0000A92A 4A69 0012                  		tst.w	$12(a1)
0000A92E 6B00                       		bmi.s	loc_A20A
0000A930 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A936 6700                       		beq.s	loc_A25C	; if yes, branch
0000A938                            
0000A938                            loc_A20A:
0000A938 4A41                       		tst.w	d1
0000A93A 6A00                       		bpl.s	loc_A220
0000A93C 9769 000C                  		sub.w	d3,$C(a1)
0000A940 6100 D202                  		bsr.w	loc_74AE
0000A944 117C 0002 0025             		move.b	#2,$25(a0)
0000A94A 6000 0000                  		bra.w	Obj26_Animate
0000A94E                            ; ===========================================================================
0000A94E                            
0000A94E                            loc_A220:
0000A94E 4A40                       		tst.w	d0
0000A950 6700 0000                  		beq.w	loc_A246
0000A954 6B00                       		bmi.s	loc_A230
0000A956 4A69 0010                  		tst.w	$10(a1)
0000A95A 6B00                       		bmi.s	loc_A246
0000A95C 6000                       		bra.s	loc_A236
0000A95E                            ; ===========================================================================
0000A95E                            
0000A95E                            loc_A230:
0000A95E 4A69 0010                  		tst.w	$10(a1)
0000A962 6A00                       		bpl.s	loc_A246
0000A964                            
0000A964                            loc_A236:
0000A964 9169 0008                  		sub.w	d0,8(a1)
0000A968 337C 0000 0014             		move.w	#0,$14(a1)
0000A96E 337C 0000 0010             		move.w	#0,$10(a1)
0000A974                            
0000A974                            loc_A246:
0000A974 0829 0001 0022             		btst	#1,$22(a1)
0000A97A 6600                       		bne.s	loc_A26A
0000A97C 08E9 0005 0022             		bset	#5,$22(a1)
0000A982 08E8 0005 0022             		bset	#5,$22(a0)
0000A988 6000                       		bra.s	Obj26_Animate
0000A98A                            ; ===========================================================================
0000A98A                            
0000A98A                            loc_A25C:
0000A98A 0828 0005 0022             		btst	#5,$22(a0)
0000A990 6700                       		beq.s	Obj26_Animate
0000A992 337C 0001 001C             		move.w	#1,$1C(a1)
0000A998                            
0000A998                            loc_A26A:
0000A998 08A8 0005 0022             		bclr	#5,$22(a0)
0000A99E 08A9 0005 0022             		bclr	#5,$22(a1)
0000A9A4                            
0000A9A4                            Obj26_Animate:				; XREF: Obj26_Index
0000A9A4 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A9AA 6100 0000                  		bsr.w	AnimateSprite
0000A9AE                            
0000A9AE                            Obj26_Display:				; XREF: Obj26_Index
0000A9AE 6100 0000                  		bsr.w	DisplaySprite
0000A9B2 3028 0008                  		move.w	8(a0),d0
0000A9B6 0240 FF80                  		andi.w	#$FF80,d0
0000A9BA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A9BE 0441 0080                  		subi.w	#$80,d1
0000A9C2 0241 FF80                  		andi.w	#$FF80,d1
0000A9C6 9041                       		sub.w	d1,d0
0000A9C8 0C40 0280                  		cmpi.w	#$280,d0
0000A9CC 6200 0000                  		bhi.w	DeleteObject
0000A9D0 4E75                       		rts	
0000A9D2                            ; ===========================================================================
0000A9D2                            
0000A9D2                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A9D2 5428 0024                  		addq.b	#2,$24(a0)
0000A9D6 117C 0000 0020             		move.b	#0,$20(a0)
0000A9DC 6100 0000                  		bsr.w	SingleObjLoad
0000A9E0 6600                       		bne.s	Obj26_Explode
0000A9E2 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A9E6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9F2 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A9F8 7400                       		moveq	#0,d2	; GMZ
0000A9FA 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A9FC                            
0000A9FC                            Obj26_Explode:
0000A9FC 6100 0000                  		bsr.w	SingleObjLoad
0000AA00 6600                       		bne.s	Obj26_SetBroken
0000AA02 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000AA06 5429 0024                  		addq.b	#2,$24(a1)
0000AA0A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000AA0E 3368 0008 0008             		move.w	8(a0),8(a1)
0000AA14 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AA1A                            
0000AA1A                            Obj26_NextExplosion:
0000AA1A 5802                       		addq.b	#4,d2
0000AA1C 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000AA20                            
0000AA20                            Obj26_SetBroken:
0000AA20 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AA24 7000                       		moveq	#0,d0
0000AA26 1028 0023                  		move.b	$23(a0),d0
0000AA2A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000AA30 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000AA36 6000 0000                  		bra.w	DisplaySprite
0000AA3A                            ; ===========================================================================
0000AA3A                            ; ---------------------------------------------------------------------------
0000AA3A                            ; Object 2E - contents of monitors
0000AA3A                            ; ---------------------------------------------------------------------------
0000AA3A                            
0000AA3A                            Obj2E:					; XREF: Obj_Index
0000AA3A 7000                       		moveq	#0,d0
0000AA3C 1028 0024                  		move.b	$24(a0),d0
0000AA40 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000AA44 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000AA48 6000 0000                  		bra.w	DisplaySprite
0000AA4C                            ; ===========================================================================
0000AA4C 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000AA4E 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AA50 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AA52                            ; ===========================================================================
0000AA52                            
0000AA52                            Obj2E_Main:				; XREF: Obj2E_Index
0000AA52 5428 0024                  		addq.b	#2,$24(a0)
0000AA56 317C 0680 0002             		move.w	#$680,2(a0)
0000AA5C 117C 0024 0001             		move.b	#$24,1(a0)
0000AA62 117C 0003 0018             		move.b	#3,$18(a0)
0000AA68 117C 0008 0019             		move.b	#8,$19(a0)
0000AA6E 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AA74 7000                       		moveq	#0,d0
0000AA76 1028 001C                  		move.b	$1C(a0),d0
0000AA7A 5400                       		addq.b	#2,d0
0000AA7C 1140 001A                  		move.b	d0,$1A(a0)
0000AA80 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AA86 D000                       		add.b	d0,d0
0000AA88 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AA8C 5249                       		addq.w	#1,a1
0000AA8E 2149 0004                  		move.l	a1,4(a0)
0000AA92                            
0000AA92                            Obj2E_Move:				; XREF: Obj2E_Index
0000AA92 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AA96 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AA9A 6100 0000                  		bsr.w	SpeedToPos
0000AA9E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AAA4 4E75                       		rts	
0000AAA6                            ; ===========================================================================
0000AAA6                            
0000AAA6                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AAA6 5428 0024                  		addq.b	#2,$24(a0)
0000AAAA 317C 001D 001E             		move.w	#29,$1E(a0)
0000AAB0 1028 001C                  		move.b	$1C(a0),d0
0000AAB4 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AAB8 6600                       		bne.s	Obj2E_ChkSonic
0000AABA 4E75                       		rts			; Eggman monitor does nothing
0000AABC                            ; ===========================================================================
0000AABC                            
0000AABC                            Obj2E_ChkSonic:
0000AABC 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AAC0 6600                       		bne.s	Obj2E_ChkShoes
0000AAC2                            
0000AAC2                            ExtraLife:
0000AAC2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AAC6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AACA 303C 0088                  		move.w	#$88,d0
0000AACE 4EF9 0000 15CC             		jmp	(PlaySound).l	; play extra life music
0000AAD4                            ; ===========================================================================
0000AAD4                            
0000AAD4                            Obj2E_ChkShoes:
0000AAD4 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AAD8 6600                       		bne.s	Obj2E_ChkShield
0000AADA 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AAE0 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AAE6 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AAEC 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AAF2 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AAF8 303C 00E2                  		move.w	#$E2,d0
0000AAFC 4EF9 0000 15CC             		jmp	(PlaySound).l	; Speed	up the music
0000AB02                            ; ===========================================================================
0000AB02                            
0000AB02                            Obj2E_ChkShield:
0000AB02 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AB06 6600                       		bne.s	Obj2E_ChkInvinc
0000AB08 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AB0E 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AB14 303C 00AF                  		move.w	#$AF,d0
0000AB18 4EF9 0000 15CC             		jmp	(PlaySound).l	; play shield sound
0000AB1E                            ; ===========================================================================
0000AB1E                            
0000AB1E                            Obj2E_ChkInvinc:
0000AB1E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AB22 6600                       		bne.s	Obj2E_ChkRings
0000AB24 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AB2A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AB30 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AB36 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AB3C 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AB42 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AB48 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AB4E 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AB54 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AB5A 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AB60 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AB64 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AB66 303C 0087                  		move.w	#$87,d0
0000AB6A 4EF9 0000 15CC             		jmp	(PlaySound).l	; play invincibility music
0000AB70                            ; ===========================================================================
0000AB70                            
0000AB70                            Obj2E_NoMusic:
0000AB70 4E75                       		rts	
0000AB72                            ; ===========================================================================
0000AB72                            
0000AB72                            Obj2E_ChkRings:
0000AB72 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AB76 6600                       		bne.s	Obj2E_ChkS
0000AB78 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AB7E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AB84 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AB8A 6500                       		bcs.s	Obj2E_RingSound
0000AB8C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AB92 6700 FF2E                  		beq.w	ExtraLife
0000AB96 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AB9C 6500                       		bcs.s	Obj2E_RingSound
0000AB9E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000ABA4 6700 FF1C                  		beq.w	ExtraLife
0000ABA8                            
0000ABA8                            Obj2E_RingSound:
0000ABA8 303C 00B5                  		move.w	#$B5,d0
0000ABAC 4EF9 0000 15CC             		jmp	(PlaySound).l	; play ring sound
0000ABB2                            ; ===========================================================================
0000ABB2                            
0000ABB2                            Obj2E_ChkS:
0000ABB2 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000ABB6 6600                       		bne.s	Obj2E_ChkEnd
0000ABB8                            		; nop	
0000ABB8 7201                       		moveq	#1,d1
0000ABBA B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000ABBE                            
0000ABBE                            Obj2E_ChkEnd:
0000ABBE 4E75                       		rts			; 'S' and goggles monitors do nothing
0000ABC0                            ; ===========================================================================
0000ABC0                            
0000ABC0                            Obj2E_Delete:				; XREF: Obj2E_Index
0000ABC0 5368 001E                  		subq.w	#1,$1E(a0)
0000ABC4 6B00 0000                  		bmi.w	DeleteObject
0000ABC8 4E75                       		rts	
0000ABCA                            ; ---------------------------------------------------------------------------
0000ABCA                            ; Subroutine to	make the sides of a monitor solid
0000ABCA                            ; ---------------------------------------------------------------------------
0000ABCA                            
0000ABCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ABCA                            
0000ABCA                            
0000ABCA                            Obj26_SolidSides:			; XREF: loc_A1EC
0000ABCA 43F8 D000                  		lea	($FFFFD000).w,a1
0000ABCE 3029 0008                  		move.w	8(a1),d0
0000ABD2 9068 0008                  		sub.w	8(a0),d0
0000ABD6 D041                       		add.w	d1,d0
0000ABD8 6B00                       		bmi.s	loc_A4E6
0000ABDA 3601                       		move.w	d1,d3
0000ABDC D643                       		add.w	d3,d3
0000ABDE B043                       		cmp.w	d3,d0
0000ABE0 6200                       		bhi.s	loc_A4E6
0000ABE2 1629 0016                  		move.b	$16(a1),d3
0000ABE6 4883                       		ext.w	d3
0000ABE8 D443                       		add.w	d3,d2
0000ABEA 3629 000C                  		move.w	$C(a1),d3
0000ABEE 9668 000C                  		sub.w	$C(a0),d3
0000ABF2 D642                       		add.w	d2,d3
0000ABF4 6B00                       		bmi.s	loc_A4E6
0000ABF6 D442                       		add.w	d2,d2
0000ABF8 B642                       		cmp.w	d2,d3
0000ABFA 6400                       		bcc.s	loc_A4E6
0000ABFC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AC00 6B00                       		bmi.s	loc_A4E6
0000AC02 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AC08 6400                       		bcc.s	loc_A4E6
0000AC0A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AC0E 6600                       		bne.s	loc_A4E6
0000AC10 B240                       		cmp.w	d0,d1
0000AC12 6400                       		bcc.s	loc_A4DC
0000AC14 D241                       		add.w	d1,d1
0000AC16 9041                       		sub.w	d1,d0
0000AC18                            
0000AC18                            loc_A4DC:
0000AC18 0C43 0010                  		cmpi.w	#$10,d3
0000AC1C 6500                       		bcs.s	loc_A4EA
0000AC1E                            
0000AC1E                            loc_A4E2:
0000AC1E 7201                       		moveq	#1,d1
0000AC20 4E75                       		rts	
0000AC22                            ; ===========================================================================
0000AC22                            
0000AC22                            loc_A4E6:
0000AC22 7200                       		moveq	#0,d1
0000AC24 4E75                       		rts	
0000AC26                            ; ===========================================================================
0000AC26                            
0000AC26                            loc_A4EA:
0000AC26 7200                       		moveq	#0,d1
0000AC28 1228 0019                  		move.b	$19(a0),d1
0000AC2C 5841                       		addq.w	#4,d1
0000AC2E 3401                       		move.w	d1,d2
0000AC30 D442                       		add.w	d2,d2
0000AC32 D269 0008                  		add.w	8(a1),d1
0000AC36 9268 0008                  		sub.w	8(a0),d1
0000AC3A 6BE2                       		bmi.s	loc_A4E2
0000AC3C B242                       		cmp.w	d2,d1
0000AC3E 64DE                       		bcc.s	loc_A4E2
0000AC40 72FF                       		moveq	#-1,d1
0000AC42 4E75                       		rts	
0000AC44                            ; End of function Obj26_SolidSides
0000AC44                            
0000AC44                            ; ===========================================================================
0000AC44                            Ani_obj26:
0000AC44                            	include "_anim\obj26.asm"
0000AC44                            ; ---------------------------------------------------------------------------
0000AC44                            ; Animation script - monitors
0000AC44                            ; ---------------------------------------------------------------------------
0000AC44 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AC4A 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AC50 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AC56 0000                       		dc.w byte_A582-Ani_obj26
0000AC58 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AC5E 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AC6A 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AC76 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AC82 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AC8E 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AC9A 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000ACA6 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000ACB2 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000ACBE 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000ACC6                            		even
0000ACC6                            		even
0000ACC6                            
0000ACC6                            ; ---------------------------------------------------------------------------
0000ACC6                            ; Sprite mappings - monitors
0000ACC6                            ; ---------------------------------------------------------------------------
0000ACC6                            Map_obj26:
0000ACC6                            	include "_maps\obj26.asm"
0000ACC6                            ; ================================================================================
0000ACC6                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000ACC6                            ; ================================================================================
0000ACC6                            
0000ACC6                            DATAY1U343IF3L:
0000ACC6 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000ACCA 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000ACCE 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000ACD2 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000ACD6 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000ACDA 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000ACDE 05                         DATAY1U343IF3L_0: dc.b $5
0000ACDF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACE4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACE9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACEE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACF3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACF8 06                         DATAY1U343IF3L_1: dc.b $6
0000ACF9 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000ACFE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD03 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD08 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD0D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD12 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD17 05                         DATAY1U343IF3L_2: dc.b $5
0000AD18 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD1D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD22 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD27 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD2C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD31 05                         DATAY1U343IF3L_3: dc.b $5
0000AD32 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD37 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD3C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD41 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD46 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD4B 06                         DATAY1U343IF3L_4: dc.b $6
0000AD4C F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AD51 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD56 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD5B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD60 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD65 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD6A 06                         DATAY1U343IF3L_5: dc.b $6
0000AD6B F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AD70 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD75 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD7A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD7F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD84 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD89 06                         DATAY1U343IF3L_6: dc.b $6
0000AD8A F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AD8F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD94 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD99 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD9E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADA3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADA8 06                         DATAY1U343IF3L_7: dc.b $6
0000ADA9 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000ADAE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ADB3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADB8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADBD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADC2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADC7 06                         DATAY1U343IF3L_8: dc.b $6
0000ADC8 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000ADCD E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ADD2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADD7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADDC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADE1 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADE6 06                         DATAY1U343IF3L_9: dc.b $6
0000ADE7 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000ADEC E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ADF1 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADF6 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADFB 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE00 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE05 05                         DATAY1U343IF3L_A: dc.b $5
0000AE06 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE0B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE10 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE15 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE1A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE1F 01                         DATAY1U343IF3L_B: dc.b $1
0000AE20 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AE26 00                         	even
0000AE26 00                         	even
0000AE26                            
0000AE26                            ; ===========================================================================
0000AE26                            ; ---------------------------------------------------------------------------
0000AE26                            ; Object 0E - Sonic on the title screen
0000AE26                            ; ---------------------------------------------------------------------------
0000AE26                            
0000AE26                            Obj0E:					; XREF: Obj_Index
0000AE26 7000                       		moveq	#0,d0
0000AE28 1028 0024                  		move.b	$24(a0),d0
0000AE2C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AE30 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AE34                            ; ===========================================================================
0000AE34 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AE36 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AE38 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AE3A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AE3C                            ; ===========================================================================
0000AE3C                            
0000AE3C                            Obj0E_Main:				; XREF: Obj0E_Index
0000AE3C 5428 0024                  		addq.b	#2,$24(a0)
0000AE40 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AE46 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AE4C 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AE54 317C 2300 0002             		move.w	#$2300,2(a0)
0000AE5A 117C 0001 0018             		move.b	#1,$18(a0)
0000AE60 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AE66 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE6C 6100 0000                  		bsr.w	AnimateSprite
0000AE70                            
0000AE70                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AE70 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AE74 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AE76 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AE7A 6000 0000                  		bra.w	DisplaySprite
0000AE7E                            ; ===========================================================================
0000AE7E                            
0000AE7E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AE7E 4E75                       		rts	
0000AE80                            ; ===========================================================================
0000AE80                            
0000AE80                            Obj0E_Move:				; XREF: Obj0E_Index
0000AE80 5168 000A                  		subq.w	#8,$A(a0)
0000AE84 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AE8A 6600                       		bne.s	Obj0E_Display
0000AE8C 5428 0024                  		addq.b	#2,$24(a0)
0000AE90                            
0000AE90                            Obj0E_Display:
0000AE90 6000 0000                  		bra.w	DisplaySprite
0000AE94                            ; ===========================================================================
0000AE94 4E75                       		rts	
0000AE96                            ; ===========================================================================
0000AE96                            
0000AE96                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AE96 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE9C 6100 0000                  		bsr.w	AnimateSprite
0000AEA0 6000 0000                  		bra.w	DisplaySprite
0000AEA4                            ; ===========================================================================
0000AEA4 4E75                       		rts	
0000AEA6                            ; ===========================================================================
0000AEA6                            ; ---------------------------------------------------------------------------
0000AEA6                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AEA6                            ; ---------------------------------------------------------------------------
0000AEA6                            
0000AEA6                            Obj0F:					; XREF: Obj_Index
0000AEA6 7000                       		moveq	#0,d0
0000AEA8 1028 0024                  		move.b	$24(a0),d0
0000AEAC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AEB0 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AEB4 6000 0000                  		bra.w	DisplaySprite
0000AEB8                            ; ===========================================================================
0000AEB8 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AEBA 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AEBC 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AEBE                            ; ===========================================================================
0000AEBE                            
0000AEBE                            Obj0F_Main:				; XREF: Obj0F_Index
0000AEBE 5428 0024                  		addq.b	#2,$24(a0)
0000AEC2 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AEC8 317C 0130 000A             		move.w	#$130,$A(a0)
0000AECE 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AED6 317C 0200 0002             		move.w	#$200,2(a0)
0000AEDC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AEE2 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AEE4 5428 0024                  		addq.b	#2,$24(a0)
0000AEE8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AEEE 6600                       		bne.s	locret_A6F8	; if not, branch
0000AEF0 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AEF6 317C 0170 0008             		move.w	#$170,8(a0)
0000AEFC 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AF02                            
0000AF02                            locret_A6F8:				; XREF: Obj0F_Index
0000AF02 4E75                       		rts	
0000AF04                            ; ===========================================================================
0000AF04                            
0000AF04                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AF04 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AF0A 6000 0000                  		bra.w	AnimateSprite
0000AF0E                            ; ===========================================================================
0000AF0E                            Ani_obj0E:
0000AF0E                            	include "_anim\obj0E.asm"
0000AF0E                            ; ---------------------------------------------------------------------------
0000AF0E                            ; Animation script - Sonic on the title screen
0000AF0E                            ; ---------------------------------------------------------------------------
0000AF0E 0000                       		dc.w byte_A706-Ani_obj0E
0000AF10 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AF1C                            		even
0000AF1C                            		even
0000AF1C                            
0000AF1C                            Ani_obj0F:
0000AF1C                            	include "_anim\obj0F.asm"
0000AF1C                            ; ---------------------------------------------------------------------------
0000AF1C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AF1C                            ; ---------------------------------------------------------------------------
0000AF1C 0000                       		dc.w byte_A714-Ani_obj0F
0000AF1E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AF22                            		even
0000AF22                            		even
0000AF22                            
0000AF22                            ; ---------------------------------------------------------------------------
0000AF22                            ; Subroutine to	animate	a sprite using an animation script
0000AF22                            ; ---------------------------------------------------------------------------
0000AF22                            
0000AF22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF22                            
0000AF22                            
0000AF22                            AnimateSprite:
0000AF22 7000                       		moveq	#0,d0
0000AF24 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AF28 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AF2C 6700                       		beq.s	Anim_Run	; if not, branch
0000AF2E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AF32 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AF38 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AF3E                            
0000AF3E                            Anim_Run:
0000AF3E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AF42 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AF44 D040                       		add.w	d0,d0
0000AF46 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AF4A 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AF4E 7200                       		moveq	#0,d1
0000AF50 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AF54 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AF58 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AF5A                            
0000AF5A                            Anim_Next:
0000AF5A 1200                       		move.b	d0,d1
0000AF5C 0200 001F                  		andi.b	#$1F,d0
0000AF60 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AF64 1028 0022                  		move.b	$22(a0),d0
0000AF68 E719                       		rol.b	#3,d1
0000AF6A B101                       		eor.b	d0,d1
0000AF6C 0201 0003                  		andi.b	#3,d1
0000AF70 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AF76 8328 0001                  		or.b	d1,1(a0)
0000AF7A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AF7E                            
0000AF7E                            Anim_Wait:
0000AF7E 4E75                       		rts	
0000AF80                            ; ===========================================================================
0000AF80                            
0000AF80                            Anim_End_FF:
0000AF80 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AF82 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AF84 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AF8A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AF8E 60CA                       		bra.s	Anim_Next
0000AF90                            ; ===========================================================================
0000AF90                            
0000AF90                            Anim_End_FE:
0000AF90 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AF92 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AF94 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AF98 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AF9C 9200                       		sub.b	d0,d1
0000AF9E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AFA2 60B6                       		bra.s	Anim_Next
0000AFA4                            ; ===========================================================================
0000AFA4                            
0000AFA4                            Anim_End_FD:
0000AFA4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AFA6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AFA8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AFAE                            
0000AFAE                            Anim_End_FC:
0000AFAE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AFB0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AFB2 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AFB6                            
0000AFB6                            Anim_End_FB:
0000AFB6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AFB8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AFBA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AFC0 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AFC4                            
0000AFC4                            Anim_End_FA:
0000AFC4 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AFC6 6600                       		bne.s	Anim_End	; if not, branch
0000AFC8 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AFCC                            
0000AFCC                            Anim_End:
0000AFCC 4E75                       		rts	
0000AFCE                            ; End of function AnimateSprite
0000AFCE                            
0000AFCE                            ; ===========================================================================
0000AFCE                            ; ---------------------------------------------------------------------------
0000AFCE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AFCE                            ; ---------------------------------------------------------------------------
0000AFCE                            Map_obj0F:
0000AFCE                            	include "_maps\obj0F.asm"
0000AFCE                            ; ---------------------------------------------------------------------------
0000AFCE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AFCE                            ; ---------------------------------------------------------------------------
0000AFCE 0000                       		dc.w byte_A7CD-Map_obj0F
0000AFD0 0000                       		dc.w byte_A7CC-Map_obj0F
0000AFD2 0000                       		dc.w byte_A7EB-Map_obj0F
0000AFD4 0000                       		dc.w byte_A882-Map_obj0F
0000AFD6 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AFD7 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AFDC 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AFE1 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AFE6 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AFEB 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AFF0 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AFF5 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AFF6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFFB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B000 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B005 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B00A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B00F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B014 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B019 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B01E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B023 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B028 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B02D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B032 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B037 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B03C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B041 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B046 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B04B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B050 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B055 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B05A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B05F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B064 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B069 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B06E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B073 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B078 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B07D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B082 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B087 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B08C 01                         byte_A882:	dc.b 1			; "TM"
0000B08D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B092                            		even
0000B092                            		even
0000B092                            
0000B092                            ; ---------------------------------------------------------------------------
0000B092                            ; Sprite mappings - Sonic on the title screen
0000B092                            ; ---------------------------------------------------------------------------
0000B092                            Map_obj0E:
0000B092                            	include "_maps\obj0E.asm"
0000B092                            ; ================================================================================
0000B092                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B092                            ; ================================================================================
0000B092                            
0000B092                            DATAGKI0HYDQBXP:
0000B092 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B096 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B09A 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B09E 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B0A2 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B0A3 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B0A8 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B0AD 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B0B2 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B0B7 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B0BC 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B0C1 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B0C6 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B0CB 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B0CC 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B0D1 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B0D6 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B0DB 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B0E0 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B0E5 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B0EA 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B0EF 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B0F4 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B0F9 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B0FE 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B103 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B104 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B109 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B10E F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B113 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B118 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B11D 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B122 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B127 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B12C 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B131 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B136 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B13B 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B13C FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B141 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B146 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B14B 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B150 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B155 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B15A 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B15F 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B164 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B169 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B16E 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B16F F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B174 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B179 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B17E 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B183 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B188 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B18D 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B192 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B197 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B19C 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B1A1 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B1A6 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B1AB 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B1B0 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B1B5 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B1BA 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B1BF 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B1C0 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B1C5 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B1CA 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B1CF 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B1D4 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B1D9 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B1DE 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B1E3 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B1E8 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B1ED 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B1F2 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B1F7 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B1F8 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B1FD 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B202 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B207 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B20C 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B211 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B216 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B21B 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B220 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B225 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B22A 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B22F 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B234 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B239 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B23E 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B243 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B244 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B249 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B24E 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B253 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B258 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B25D 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B262 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B267 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B26C 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B271 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B276 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B27B 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B280 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B285 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B28A 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B290 00                         	even
0000B290 00                         	even
0000B290                            
0000B290                            ; ===========================================================================
0000B290                            ; ---------------------------------------------------------------------------
0000B290                            ; Object 2B - Chopper enemy (GHZ)
0000B290                            ; ---------------------------------------------------------------------------
0000B290                            
0000B290                            Obj2B:					; XREF: Obj_Index
0000B290 7000                       		moveq	#0,d0
0000B292 1028 0024                  		move.b	$24(a0),d0
0000B296 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B29A 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B29E 6000 0000                  		bra.w	MarkObjGone
0000B2A2                            ; ===========================================================================
0000B2A2 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B2A4 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B2A6                            ; ===========================================================================
0000B2A6                            
0000B2A6                            Obj2B_Main:				; XREF: Obj2B_Index
0000B2A6 5428 0024                  		addq.b	#2,$24(a0)
0000B2AA 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B2B2 317C 047B 0002             		move.w	#$47B,2(a0)
0000B2B8 117C 0004 0001             		move.b	#4,1(a0)
0000B2BE 117C 0004 0018             		move.b	#4,$18(a0)
0000B2C4 117C 0009 0020             		move.b	#9,$20(a0)
0000B2CA 117C 0010 0019             		move.b	#$10,$19(a0)
0000B2D0 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B2D6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B2DC                            
0000B2DC                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B2DC 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B2E2 6100 FC3E                  		bsr.w	AnimateSprite
0000B2E6 6100 0000                  		bsr.w	SpeedToPos
0000B2EA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B2F0 3028 0030                  		move.w	$30(a0),d0
0000B2F4 B068 000C                  		cmp.w	$C(a0),d0
0000B2F8 6400                       		bcc.s	Obj2B_ChgAni
0000B2FA 3140 000C                  		move.w	d0,$C(a0)
0000B2FE 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B304                            
0000B304                            Obj2B_ChgAni:
0000B304 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B30A 0440 00C0                  		subi.w	#$C0,d0
0000B30E B068 000C                  		cmp.w	$C(a0),d0
0000B312 6400                       		bcc.s	locret_ABB6
0000B314 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B31A 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B31E 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B320 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B326                            
0000B326                            locret_ABB6:
0000B326 4E75                       		rts	
0000B328                            ; ===========================================================================
0000B328                            Ani_obj2B:
0000B328                            	include "_anim\obj2B.asm"
0000B328                            ; ---------------------------------------------------------------------------
0000B328                            ; Animation script - Chopper enemy
0000B328                            ; ---------------------------------------------------------------------------
0000B328 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B32A 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B32C 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B32E 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B332 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B336 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B33A 00                         		even
0000B33A 00                         		even
0000B33A                            
0000B33A                            ; ---------------------------------------------------------------------------
0000B33A                            ; Sprite mappings - Chopper enemy (GHZ)
0000B33A                            ; ---------------------------------------------------------------------------
0000B33A                            Map_obj2B:
0000B33A                            	include "_maps\obj2B.asm"
0000B33A                            Map_1ff1:
0000B33A 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B33C 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B33E 02                         Map_1ff1_4: 	dc.b $2
0000B33F E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B344 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B349 02                         Map_1ff1_F: 	dc.b $2
0000B34A E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B34F 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B354                            	even
0000B354                            	even
0000B354                            
0000B354                            ; ===========================================================================
0000B354                            ; ---------------------------------------------------------------------------
0000B354                            ; Object 2C - Jaws enemy (LZ)
0000B354                            ; ---------------------------------------------------------------------------
0000B354                            
0000B354                            Obj2C:					; XREF: Obj_Index
0000B354 7000                       		moveq	#0,d0
0000B356 1028 0024                  		move.b	$24(a0),d0
0000B35A 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B35E 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B362                            ; ===========================================================================
0000B362 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B364 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B366                            ; ===========================================================================
0000B366                            
0000B366                            Obj2C_Main:				; XREF: Obj2C_Index
0000B366 5428 0024                  		addq.b	#2,$24(a0)
0000B36A 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B372 317C 2486 0002             		move.w	#$2486,2(a0)
0000B378 0028 0004 0001             		ori.b	#4,1(a0)
0000B37E 117C 000A 0020             		move.b	#$A,$20(a0)
0000B384 117C 0004 0018             		move.b	#4,$18(a0)
0000B38A 117C 0010 0019             		move.b	#$10,$19(a0)
0000B390 7000                       		moveq	#0,d0
0000B392 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B396 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B398 5340                       		subq.w	#1,d0
0000B39A 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B39E 3140 0032                  		move.w	d0,$32(a0)
0000B3A2 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B3A8 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B3AE 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B3B0 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B3B4                            
0000B3B4                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B3B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B3B8 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B3BA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B3C0 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B3C4 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B3CA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B3D0                            
0000B3D0                            Obj2C_Animate:
0000B3D0 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B3D6 6100 FB4A                  		bsr.w	AnimateSprite
0000B3DA 6100 0000                  		bsr.w	SpeedToPos
0000B3DE 6000 0000                  		bra.w	MarkObjGone
0000B3E2                            ; ===========================================================================
0000B3E2                            Ani_obj2C:
0000B3E2                            	include "_anim\obj2C.asm"
0000B3E2                            ; ---------------------------------------------------------------------------
0000B3E2                            ; Animation script - Jaws enemy
0000B3E2                            ; ---------------------------------------------------------------------------
0000B3E2 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B3E4 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B3EA                            		even
0000B3EA                            		even
0000B3EA                            
0000B3EA                            ; ---------------------------------------------------------------------------
0000B3EA                            ; Sprite mappings - Jaws enemy (LZ)
0000B3EA                            ; ---------------------------------------------------------------------------
0000B3EA                            Map_obj2C:
0000B3EA                            	include "_maps\obj2C.asm"
0000B3EA                            ; ---------------------------------------------------------------------------
0000B3EA                            ; Sprite mappings - Jaws enemy (LZ)
0000B3EA                            ; ---------------------------------------------------------------------------
0000B3EA 0000                       		dc.w byte_AC78-Map_obj2C
0000B3EC 0000                       		dc.w byte_AC83-Map_obj2C
0000B3EE 0000                       		dc.w byte_AC8E-Map_obj2C
0000B3F0 0000                       		dc.w byte_AC99-Map_obj2C
0000B3F2 02                         byte_AC78:	dc.b 2
0000B3F3 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3F8 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B3FD 02                         byte_AC83:	dc.b 2
0000B3FE F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B403 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B408 02                         byte_AC8E:	dc.b 2
0000B409 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B40E F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B413 02                         byte_AC99:	dc.b 2
0000B414 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B419 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B41E                            		even
0000B41E                            		even
0000B41E                            
0000B41E                            ; ===========================================================================
0000B41E                            ; ---------------------------------------------------------------------------
0000B41E                            ; Object 2D - Burrobot enemy (LZ)
0000B41E                            ; ---------------------------------------------------------------------------
0000B41E                            
0000B41E                            Obj2D:					; XREF: Obj_Index
0000B41E 7000                       		moveq	#0,d0
0000B420 1028 0024                  		move.b	$24(a0),d0
0000B424 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B428 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B42C                            ; ===========================================================================
0000B42C 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B42E 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B430                            ; ===========================================================================
0000B430                            
0000B430                            Obj2D_Main:				; XREF: Obj2D_Index
0000B430 5428 0024                  		addq.b	#2,$24(a0)
0000B434 117C 0013 0016             		move.b	#$13,$16(a0)
0000B43A 117C 0008 0017             		move.b	#8,$17(a0)
0000B440 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B448 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B44E 0028 0004 0001             		ori.b	#4,1(a0)
0000B454 117C 0004 0018             		move.b	#4,$18(a0)
0000B45A 117C 0005 0020             		move.b	#5,$20(a0)
0000B460 117C 000C 0019             		move.b	#$C,$19(a0)
0000B466 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B46A 117C 0002 001C             		move.b	#2,$1C(a0)
0000B470                            
0000B470                            Obj2D_Action:				; XREF: Obj2D_Index
0000B470 7000                       		moveq	#0,d0
0000B472 1028 0025                  		move.b	$25(a0),d0
0000B476 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B47A 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B47E 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B484 6100 FA9C                  		bsr.w	AnimateSprite
0000B488 6000 0000                  		bra.w	MarkObjGone
0000B48C                            ; ===========================================================================
0000B48C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B48E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B490 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B492 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B494                            ; ===========================================================================
0000B494                            
0000B494                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B494 5368 0030                  		subq.w	#1,$30(a0)
0000B498 6A00                       		bpl.s	locret_AD42
0000B49A 5428 0025                  		addq.b	#2,$25(a0)
0000B49E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B4A4 317C 0080 0010             		move.w	#$80,$10(a0)
0000B4AA 117C 0001 001C             		move.b	#1,$1C(a0)
0000B4B0 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B4B6 6700                       		beq.s	locret_AD42
0000B4B8 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B4BC                            
0000B4BC                            locret_AD42:
0000B4BC 4E75                       		rts	
0000B4BE                            ; ===========================================================================
0000B4BE                            
0000B4BE                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B4BE 5368 0030                  		subq.w	#1,$30(a0)
0000B4C2 6B00                       		bmi.s	loc_AD84
0000B4C4 6100 0000                  		bsr.w	SpeedToPos
0000B4C8 0868 0000 0032             		bchg	#0,$32(a0)
0000B4CE 6600                       		bne.s	loc_AD78
0000B4D0 3628 0008                  		move.w	8(a0),d3
0000B4D4 0643 000C                  		addi.w	#$C,d3
0000B4D8 0828 0000 0022             		btst	#0,$22(a0)
0000B4DE 6600                       		bne.s	loc_AD6A
0000B4E0 0443 0018                  		subi.w	#$18,d3
0000B4E4                            
0000B4E4                            loc_AD6A:
0000B4E4 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B4EA 0C41 000C                  		cmpi.w	#$C,d1
0000B4EE 6C00                       		bge.s	loc_AD84
0000B4F0 4E75                       		rts	
0000B4F2                            ; ===========================================================================
0000B4F2                            
0000B4F2                            loc_AD78:				; XREF: Obj2D_Move
0000B4F2 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4F8 D368 000C                  		add.w	d1,$C(a0)
0000B4FC 4E75                       		rts	
0000B4FE                            ; ===========================================================================
0000B4FE                            
0000B4FE                            loc_AD84:				; XREF: Obj2D_Move
0000B4FE 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B504 6700                       		beq.s	loc_ADA4
0000B506 5528 0025                  		subq.b	#2,$25(a0)
0000B50A 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B510 317C 0000 0010             		move.w	#0,$10(a0)
0000B516 117C 0000 001C             		move.b	#0,$1C(a0)
0000B51C 4E75                       		rts	
0000B51E                            ; ===========================================================================
0000B51E                            
0000B51E                            loc_ADA4:
0000B51E 5428 0025                  		addq.b	#2,$25(a0)
0000B522 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B528 117C 0002 001C             		move.b	#2,$1C(a0)
0000B52E 4E75                       		rts	
0000B530                            ; ===========================================================================
0000B530                            
0000B530                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B530 6100 0000                  		bsr.w	SpeedToPos
0000B534 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B53A 6B00                       		bmi.s	locret_ADF0
0000B53C 117C 0003 001C             		move.b	#3,$1C(a0)
0000B542 4EB9 0000 0000             		jsr	ObjHitFloor
0000B548 4A41                       		tst.w	d1
0000B54A 6A00                       		bpl.s	locret_ADF0
0000B54C D368 000C                  		add.w	d1,$C(a0)
0000B550 317C 0000 0012             		move.w	#0,$12(a0)
0000B556 117C 0001 001C             		move.b	#1,$1C(a0)
0000B55C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B562 5528 0025                  		subq.b	#2,$25(a0)
0000B566 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B56A                            
0000B56A                            locret_ADF0:
0000B56A 4E75                       		rts	
0000B56C                            ; ===========================================================================
0000B56C                            
0000B56C                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B56C 343C 0060                  		move.w	#$60,d2
0000B570 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B574 6400                       		bcc.s	locret_AE20
0000B576 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B57A 9068 000C                  		sub.w	$C(a0),d0
0000B57E 6400                       		bcc.s	locret_AE20
0000B580 0C40 FF80                  		cmpi.w	#-$80,d0
0000B584 6500                       		bcs.s	locret_AE20
0000B586 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B58A 6600                       		bne.s	locret_AE20
0000B58C 5528 0025                  		subq.b	#2,$25(a0)
0000B590 3141 0010                  		move.w	d1,$10(a0)
0000B594 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B59A                            
0000B59A                            locret_AE20:
0000B59A 4E75                       		rts	
0000B59C                            
0000B59C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B59C                            
0000B59C                            
0000B59C                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B59C 323C 0080                  		move.w	#$80,d1
0000B5A0 08E8 0000 0022             		bset	#0,$22(a0)
0000B5A6 3038 D008                  		move.w	($FFFFD008).w,d0
0000B5AA 9068 0008                  		sub.w	8(a0),d0
0000B5AE 6400                       		bcc.s	loc_AE40
0000B5B0 4440                       		neg.w	d0
0000B5B2 4441                       		neg.w	d1
0000B5B4 08A8 0000 0022             		bclr	#0,$22(a0)
0000B5BA                            
0000B5BA                            loc_AE40:
0000B5BA B042                       		cmp.w	d2,d0
0000B5BC 4E75                       		rts	
0000B5BE                            ; End of function Obj2D_ChkSonic2
0000B5BE                            
0000B5BE                            ; ===========================================================================
0000B5BE                            Ani_obj2D:
0000B5BE                            	include "_anim\obj2D.asm"
0000B5BE                            ; ---------------------------------------------------------------------------
0000B5BE                            ; Animation script - Burrobot enemy but craig
0000B5BE                            ; ---------------------------------------------------------------------------
0000B5BE 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B5C0 0000                       		dc.w byte_AE50-Ani_obj2D
0000B5C2 0000                       		dc.w byte_AE54-Ani_obj2D
0000B5C4 0000                       		dc.w byte_AE58-Ani_obj2D
0000B5C6 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B5C9 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B5CD 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B5DB 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B5DE                            		even
0000B5DE                            		even
0000B5DE                            
0000B5DE                            ; ---------------------------------------------------------------------------
0000B5DE                            ; Sprite mappings - Burrobot enemy (LZ)
0000B5DE                            ; ---------------------------------------------------------------------------
0000B5DE                            Map_obj2D:
0000B5DE                            	include "_maps\obj2D.asm"
0000B5DE                            Map_e3a3:
0000B5DE 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B5E0 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B5E2 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B5E4 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B5E6 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B5E8 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B5EA 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B5EC 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B5EE 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B5F0 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B5F2 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B5F4 02                         Map_e3a3_16: 	dc.b $2
0000B5F5 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B5FA 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B5FF 02                         Map_e3a3_21: 	dc.b $2
0000B600 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B605 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B60A 02                         Map_e3a3_2C: 	dc.b $2
0000B60B EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B610 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B615 02                         Map_e3a3_37: 	dc.b $2
0000B616 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B61B FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B620 02                         Map_e3a3_42: 	dc.b $2
0000B621 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B626 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B62B 02                         Map_e3a3_4D: 	dc.b $2
0000B62C EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B631 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B636 02                         Map_e3a3_58: 	dc.b $2
0000B637 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B63C FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B641 02                         Map_e3a3_63: 	dc.b $2
0000B642 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B647 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B64C 02                         Map_e3a3_6E: 	dc.b $2
0000B64D EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B652 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B657 02                         Map_e3a3_79: 	dc.b $2
0000B658 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B65D 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B662 02                         Map_e3a3_84: 	dc.b $2
0000B663 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B668 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B66E 00                         	even
0000B66E 00                         	even
0000B66E                            
0000B66E                            ; ===========================================================================
0000B66E                            ; ---------------------------------------------------------------------------
0000B66E                            ; Object 2F - large moving platforms (MZ)
0000B66E                            ; ---------------------------------------------------------------------------
0000B66E                            
0000B66E                            Obj2F:					; XREF: Obj_Index
0000B66E 7000                       		moveq	#0,d0
0000B670 1028 0024                  		move.b	$24(a0),d0
0000B674 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B678 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B67C                            ; ===========================================================================
0000B67C 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B67E 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B680                            
0000B680 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B682 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B684 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B686 0140                       		dc.b 1,	$40
0000B688 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B68A 0220                       		dc.b 2,	$20
0000B68C                            ; ===========================================================================
0000B68C                            
0000B68C                            Obj2F_Main:				; XREF: Obj2F_Index
0000B68C 5428 0024                  		addq.b	#2,$24(a0)
0000B690 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B698 317C C000 0002             		move.w	#$C000,2(a0)
0000B69E 117C 0004 0001             		move.b	#4,1(a0)
0000B6A4 117C 0005 0018             		move.b	#5,$18(a0)
0000B6AA 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B6B0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B6B6 7000                       		moveq	#0,d0
0000B6B8 1028 0028                  		move.b	$28(a0),d0
0000B6BC E448                       		lsr.w	#2,d0
0000B6BE 0240 001C                  		andi.w	#$1C,d0
0000B6C2 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B6C6 3019                       		move.w	(a1)+,d0
0000B6C8 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B6CC 214A 0030                  		move.l	a2,$30(a0)
0000B6D0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B6D4 1151 0019                  		move.b	(a1),$19(a0)
0000B6D8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B6DE 117C 0040 0016             		move.b	#$40,$16(a0)
0000B6E4 08E8 0004 0001             		bset	#4,1(a0)
0000B6EA                            
0000B6EA                            Obj2F_Action:				; XREF: Obj2F_Index
0000B6EA 6100 0000                  		bsr.w	Obj2F_Types
0000B6EE 4A28 0025                  		tst.b	$25(a0)
0000B6F2 6700                       		beq.s	Obj2F_Solid
0000B6F4 7200                       		moveq	#0,d1
0000B6F6 1228 0019                  		move.b	$19(a0),d1
0000B6FA 0641 000B                  		addi.w	#$B,d1
0000B6FE 6100 C556                  		bsr.w	ExitPlatform
0000B702 0829 0003 0022             		btst	#3,$22(a1)
0000B708 6600 0000                  		bne.w	Obj2F_Slope
0000B70C 4228 0025                  		clr.b	$25(a0)
0000B710 6000                       		bra.s	Obj2F_Display
0000B712                            ; ===========================================================================
0000B712                            
0000B712                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B712 7200                       		moveq	#0,d1
0000B714 1228 0019                  		move.b	$19(a0),d1
0000B718 0641 000B                  		addi.w	#$B,d1
0000B71C 2468 0030                  		movea.l	$30(a0),a2
0000B720 3428 0008                  		move.w	8(a0),d2
0000B724 6100 D520                  		bsr.w	SlopeObject2
0000B728 6000                       		bra.s	Obj2F_Display
0000B72A                            ; ===========================================================================
0000B72A                            
0000B72A                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B72A 7200                       		moveq	#0,d1
0000B72C 1228 0019                  		move.b	$19(a0),d1
0000B730 0641 000B                  		addi.w	#$B,d1
0000B734 343C 0020                  		move.w	#$20,d2
0000B738 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B73E 6600                       		bne.s	loc_AF8E
0000B740 343C 0030                  		move.w	#$30,d2
0000B744                            
0000B744                            loc_AF8E:
0000B744 2468 0030                  		movea.l	$30(a0),a2
0000B748 6100 0000                  		bsr.w	SolidObject2F
0000B74C                            
0000B74C                            Obj2F_Display:				; XREF: Obj2F_Action
0000B74C 6100 0000                  		bsr.w	DisplaySprite
0000B750 6000 0000                  		bra.w	Obj2F_ChkDel
0000B754                            
0000B754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B754                            
0000B754                            
0000B754                            Obj2F_Types:				; XREF: Obj2F_Action
0000B754 7000                       		moveq	#0,d0
0000B756 1028 0028                  		move.b	$28(a0),d0
0000B75A 0240 0007                  		andi.w	#7,d0
0000B75E D040                       		add.w	d0,d0
0000B760 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B764 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B768                            ; End of function Obj2F_Types
0000B768                            
0000B768                            ; ===========================================================================
0000B768 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B76A 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B76C 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B76E 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B770 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B772 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B774                            ; ===========================================================================
0000B774                            
0000B774                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B774 4E75                       		rts			; type 00 platform doesn't move
0000B776                            ; ===========================================================================
0000B776                            
0000B776                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B776 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B77A 323C 0020                  		move.w	#$20,d1
0000B77E 6000                       		bra.s	Obj2F_Move
0000B780                            ; ===========================================================================
0000B780                            
0000B780                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B780 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B784 323C 0030                  		move.w	#$30,d1
0000B788 6000                       		bra.s	Obj2F_Move
0000B78A                            ; ===========================================================================
0000B78A                            
0000B78A                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B78A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B78E 323C 0040                  		move.w	#$40,d1
0000B792 6000                       		bra.s	Obj2F_Move
0000B794                            ; ===========================================================================
0000B794                            
0000B794                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B794 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B798 323C 0060                  		move.w	#$60,d1
0000B79C                            
0000B79C                            Obj2F_Move:
0000B79C 0828 0003 0028             		btst	#3,$28(a0)
0000B7A2 6700                       		beq.s	loc_AFF2
0000B7A4 4440                       		neg.w	d0
0000B7A6 D041                       		add.w	d1,d0
0000B7A8                            
0000B7A8                            loc_AFF2:
0000B7A8 3228 002C                  		move.w	$2C(a0),d1
0000B7AC 9240                       		sub.w	d0,d1
0000B7AE 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B7B2 4E75                       		rts	
0000B7B4                            ; ===========================================================================
0000B7B4                            
0000B7B4                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B7B4 1028 0034                  		move.b	$34(a0),d0
0000B7B8 4A28 0025                  		tst.b	$25(a0)
0000B7BC 6600                       		bne.s	loc_B010
0000B7BE 5500                       		subq.b	#2,d0
0000B7C0 6400                       		bcc.s	loc_B01C
0000B7C2 7000                       		moveq	#0,d0
0000B7C4 6000                       		bra.s	loc_B01C
0000B7C6                            ; ===========================================================================
0000B7C6                            
0000B7C6                            loc_B010:
0000B7C6 5800                       		addq.b	#4,d0
0000B7C8 0C00 0040                  		cmpi.b	#$40,d0
0000B7CC 6500                       		bcs.s	loc_B01C
0000B7CE 103C 0040                  		move.b	#$40,d0
0000B7D2                            
0000B7D2                            loc_B01C:
0000B7D2 1140 0034                  		move.b	d0,$34(a0)
0000B7D6 4EB9 0000 2D36             		jsr	(CalcSine).l
0000B7DC E848                       		lsr.w	#4,d0
0000B7DE 3200                       		move.w	d0,d1
0000B7E0 D068 002C                  		add.w	$2C(a0),d0
0000B7E4 3140 000C                  		move.w	d0,$C(a0)
0000B7E8 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B7EE 6600                       		bne.s	loc_B07A
0000B7F0 4A28 0035                  		tst.b	$35(a0)
0000B7F4 6600                       		bne.s	loc_B07A
0000B7F6 117C 0001 0035             		move.b	#1,$35(a0)
0000B7FC 6100 0000                  		bsr.w	SingleObjLoad2
0000B800 6600                       		bne.s	loc_B07A
0000B802 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B806 3368 0008 0008             		move.w	8(a0),8(a1)
0000B80C 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B812 5069 002C                  		addq.w	#8,$2C(a1)
0000B816 5769 002C                  		subq.w	#3,$2C(a1)
0000B81A 0469 0040 0008             		subi.w	#$40,8(a1)
0000B820 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B826 2348 0038                  		move.l	a0,$38(a1)
0000B82A 2448                       		movea.l	a0,a2
0000B82C 6100                       		bsr.s	sub_B09C
0000B82E                            
0000B82E                            loc_B07A:
0000B82E 7400                       		moveq	#0,d2
0000B830 45E8 0036                  		lea	$36(a0),a2
0000B834 141A                       		move.b	(a2)+,d2
0000B836 5302                       		subq.b	#1,d2
0000B838 6500                       		bcs.s	locret_B09A
0000B83A                            
0000B83A                            loc_B086:
0000B83A 7000                       		moveq	#0,d0
0000B83C 101A                       		move.b	(a2)+,d0
0000B83E ED48                       		lsl.w	#6,d0
0000B840 0640 D000                  		addi.w	#-$3000,d0
0000B844 3240                       		movea.w	d0,a1
0000B846 3341 003C                  		move.w	d1,$3C(a1)
0000B84A 51CA FFEE                  		dbf	d2,loc_B086
0000B84E                            
0000B84E                            locret_B09A:
0000B84E 4E75                       		rts	
0000B850                            
0000B850                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B850                            
0000B850                            
0000B850                            sub_B09C:
0000B850 45EA 0036                  		lea	$36(a2),a2
0000B854 7000                       		moveq	#0,d0
0000B856 1012                       		move.b	(a2),d0
0000B858 5212                       		addq.b	#1,(a2)
0000B85A 45F2 0001                  		lea	1(a2,d0.w),a2
0000B85E 3009                       		move.w	a1,d0
0000B860 0440 D000                  		subi.w	#-$3000,d0
0000B864 EC48                       		lsr.w	#6,d0
0000B866 0240 007F                  		andi.w	#$7F,d0
0000B86A 1480                       		move.b	d0,(a2)
0000B86C 4E75                       		rts	
0000B86E                            ; End of function sub_B09C
0000B86E                            
0000B86E                            ; ===========================================================================
0000B86E                            
0000B86E                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B86E 4A28 0035                  		tst.b	$35(a0)
0000B872 6700                       		beq.s	loc_B0C6
0000B874 4A28 0001                  		tst.b	1(a0)
0000B878 6A00                       		bpl.s	Obj2F_DelFlames
0000B87A                            
0000B87A                            loc_B0C6:
0000B87A 3028 002A                  		move.w	$2A(a0),d0
0000B87E 0240 FF80                  		andi.w	#$FF80,d0
0000B882 3238 F700                  		move.w	($FFFFF700).w,d1
0000B886 0441 0080                  		subi.w	#$80,d1
0000B88A 0241 FF80                  		andi.w	#$FF80,d1
0000B88E 9041                       		sub.w	d1,d0
0000B890 0C40 0280                  		cmpi.w	#$280,d0
0000B894 6200 0000                  		bhi.w	DeleteObject
0000B898 4E75                       		rts	
0000B89A                            ; ===========================================================================
0000B89A                            
0000B89A                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B89A 7400                       		moveq	#0,d2
0000B89C                            
0000B89C                            loc_B0E8:
0000B89C 45E8 0036                  		lea	$36(a0),a2
0000B8A0 1412                       		move.b	(a2),d2
0000B8A2 421A                       		clr.b	(a2)+
0000B8A4 5302                       		subq.b	#1,d2
0000B8A6 6500                       		bcs.s	locret_B116
0000B8A8                            
0000B8A8                            loc_B0F4:
0000B8A8 7000                       		moveq	#0,d0
0000B8AA 1012                       		move.b	(a2),d0
0000B8AC 421A                       		clr.b	(a2)+
0000B8AE ED48                       		lsl.w	#6,d0
0000B8B0 0640 D000                  		addi.w	#-$3000,d0
0000B8B4 3240                       		movea.w	d0,a1
0000B8B6 6100 0000                  		bsr.w	DeleteObject2
0000B8BA 51CA FFEC                  		dbf	d2,loc_B0F4
0000B8BE 117C 0000 0035             		move.b	#0,$35(a0)
0000B8C4 117C 0000 0034             		move.b	#0,$34(a0)
0000B8CA                            
0000B8CA                            locret_B116:
0000B8CA 4E75                       		rts	
0000B8CC                            ; ===========================================================================
0000B8CC                            ; ---------------------------------------------------------------------------
0000B8CC                            ; Collision data for large moving platforms (MZ)
0000B8CC                            ; ---------------------------------------------------------------------------
0000B8CC                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B918                            		even
0000B918                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B944                            		even
0000B944                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B990                            		even
0000B990                            ; ===========================================================================
0000B990                            ; ---------------------------------------------------------------------------
0000B990                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B990                            ; (appears when	you walk on sinking platforms)
0000B990                            ; ---------------------------------------------------------------------------
0000B990                            
0000B990                            Obj35:					; XREF: Obj_Index
0000B990 7000                       		moveq	#0,d0
0000B992 1028 0024                  		move.b	$24(a0),d0
0000B996 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B99A 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B99E                            ; ===========================================================================
0000B99E 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B9A0 0000                       		dc.w loc_B238-Obj35_Index
0000B9A2 0000                       		dc.w Obj35_Move-Obj35_Index
0000B9A4                            ; ===========================================================================
0000B9A4                            
0000B9A4                            Obj35_Main:				; XREF: Obj35_Index
0000B9A4 5428 0024                  		addq.b	#2,$24(a0)
0000B9A8 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B9B0 317C 0345 0002             		move.w	#$345,2(a0)
0000B9B6 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B9BC 117C 0004 0001             		move.b	#4,1(a0)
0000B9C2 117C 0001 0018             		move.b	#1,$18(a0)
0000B9C8 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B9CE 117C 0008 0019             		move.b	#8,$19(a0)
0000B9D4 303C 00C8                  		move.w	#$C8,d0
0000B9D8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000B9DE 4A28 0028                  		tst.b	$28(a0)
0000B9E2 6700                       		beq.s	loc_B238
0000B9E4 5428 0024                  		addq.b	#2,$24(a0)
0000B9E8 6000 0000                  		bra.w	Obj35_Move
0000B9EC                            ; ===========================================================================
0000B9EC                            
0000B9EC                            loc_B238:				; XREF: Obj35_Index
0000B9EC 2268 0030                  		movea.l	$30(a0),a1
0000B9F0 3228 0008                  		move.w	8(a0),d1
0000B9F4 9268 002A                  		sub.w	$2A(a0),d1
0000B9F8 0641 000C                  		addi.w	#$C,d1
0000B9FC 3001                       		move.w	d1,d0
0000B9FE E248                       		lsr.w	#1,d0
0000BA00 1031 0000                  		move.b	(a1,d0.w),d0
0000BA04 4440                       		neg.w	d0
0000BA06 D068 002C                  		add.w	$2C(a0),d0
0000BA0A 3400                       		move.w	d0,d2
0000BA0C D068 003C                  		add.w	$3C(a0),d0
0000BA10 3140 000C                  		move.w	d0,$C(a0)
0000BA14 0C41 0084                  		cmpi.w	#$84,d1
0000BA18 6400                       		bcc.s	loc_B2B0
0000BA1A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BA22 0C41 0080                  		cmpi.w	#$80,d1
0000BA26 6400                       		bcc.s	loc_B2B0
0000BA28 2028 0008                  		move.l	8(a0),d0
0000BA2C 0680 0008 0000             		addi.l	#$80000,d0
0000BA32 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BA38 6600                       		bne.s	loc_B2B0
0000BA3A 6100 0000                  		bsr.w	SingleObjLoad2
0000BA3E 6600                       		bne.s	loc_B2B0
0000BA40 12BC 0035                  		move.b	#$35,0(a1)
0000BA44 3368 0008 0008             		move.w	8(a0),8(a1)
0000BA4A 3342 002C                  		move.w	d2,$2C(a1)
0000BA4E 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BA54 137C 0001 0028             		move.b	#1,$28(a1)
0000BA5A 2468 0038                  		movea.l	$38(a0),a2
0000BA5E 6100 FDF0                  		bsr.w	sub_B09C
0000BA62                            
0000BA62                            loc_B2B0:
0000BA62 6000                       		bra.s	Obj35_Animate
0000BA64                            ; ===========================================================================
0000BA64                            
0000BA64                            Obj35_Move:				; XREF: Obj35_Index
0000BA64 3028 002C                  		move.w	$2C(a0),d0
0000BA68 D068 003C                  		add.w	$3C(a0),d0
0000BA6C 3140 000C                  		move.w	d0,$C(a0)
0000BA70                            
0000BA70                            Obj35_Animate:				; XREF: loc_B238
0000BA70 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BA76 6100 F4AA                  		bsr.w	AnimateSprite
0000BA7A 6000 0000                  		bra.w	DisplaySprite
0000BA7E                            ; ===========================================================================
0000BA7E                            Ani_obj35:
0000BA7E                            	include "_anim\obj35.asm"
0000BA7E                            ; ---------------------------------------------------------------------------
0000BA7E                            ; Animation script - fireball that sits on the	floor (MZ)
0000BA7E                            ; ---------------------------------------------------------------------------
0000BA7E 0000                       		dc.w byte_B2CE-Ani_obj35
0000BA80 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BA86                            		even
0000BA86                            		even
0000BA86                            
0000BA86                            ; ---------------------------------------------------------------------------
0000BA86                            ; Sprite mappings - large moving platforms (MZ)
0000BA86                            ; ---------------------------------------------------------------------------
0000BA86                            Map_obj2F:
0000BA86                            	include "_maps\obj2F.asm"
0000BA86                            ; ---------------------------------------------------------------------------
0000BA86                            ; Sprite mappings - large moving platforms (MZ)
0000BA86                            ; ---------------------------------------------------------------------------
0000BA86 0000                       		dc.w byte_B2DA-Map_obj2F
0000BA88 0000                       		dc.w byte_B31C-Map_obj2F
0000BA8A 0000                       		dc.w byte_B34F-Map_obj2F
0000BA8C 0D                         byte_B2DA:	dc.b $D
0000BA8D D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BA92 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BA97 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA9C D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BAA1 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BAA6 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BAAB D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BAB0 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BAB5 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BABA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BABF 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BAC4 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BAC9 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BACE 0A                         byte_B31C:	dc.b $A
0000BACF D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BAD4 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BAD9 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BADE C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BAE3 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BAE8 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BAED C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BAF2 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BAF7 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BAFC E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BB01 06                         byte_B34F:	dc.b 6
0000BB02 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BB07 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BB0C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BB11 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BB16 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BB1B 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BB20                            		even
0000BB20                            		even
0000BB20                            
0000BB20                            ; ---------------------------------------------------------------------------
0000BB20                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BB20                            ; ---------------------------------------------------------------------------
0000BB20                            Map_obj14:
0000BB20                            	include "_maps\obj14.asm"
0000BB20                            ; --------------------------------------------------------------------------------
0000BB20                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BB20                            ; --------------------------------------------------------------------------------
0000BB20                            
0000BB20                            SME_C6wT7:	
0000BB20 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BB24 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BB28 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BB2C 01                         SME_C6wT7_C:	dc.b 1	
0000BB2D E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BB32 01                         SME_C6wT7_12:	dc.b 1	
0000BB33 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BB38 02                         SME_C6wT7_18:	dc.b 2	
0000BB39 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BB3E E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BB43 01                         SME_C6wT7_23:	dc.b 1	
0000BB44 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BB49 01                         SME_C6wT7_29:	dc.b 1	
0000BB4A F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BB4F 01                         SME_C6wT7_2F:	dc.b 1	
0000BB50 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BB56 00                         		even
0000BB56 00                         		even
0000BB56                            
0000BB56                            ; ===========================================================================
0000BB56                            ; ---------------------------------------------------------------------------
0000BB56                            ; Object 30 - large green glassy blocks	(MZ)
0000BB56                            ; ---------------------------------------------------------------------------
0000BB56                            
0000BB56                            Obj30:					; XREF: Obj_Index
0000BB56 7000                       		moveq	#0,d0
0000BB58 1028 0024                  		move.b	$24(a0),d0
0000BB5C 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BB60 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BB64 3028 0008                  		move.w	8(a0),d0
0000BB68 0240 FF80                  		andi.w	#$FF80,d0
0000BB6C 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB70 0441 0080                  		subi.w	#$80,d1
0000BB74 0241 FF80                  		andi.w	#$FF80,d1
0000BB78 9041                       		sub.w	d1,d0
0000BB7A 0C40 0280                  		cmpi.w	#$280,d0
0000BB7E 6200 0000                  		bhi.w	Obj30_Delete
0000BB82 6000 0000                  		bra.w	DisplaySprite
0000BB86                            ; ===========================================================================
0000BB86                            
0000BB86                            Obj30_Delete:
0000BB86 6000 0000                  		bra.w	DeleteObject
0000BB8A                            ; ===========================================================================
0000BB8A 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BB8C 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BB8E 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BB90 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BB92 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BB94                            
0000BB94 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BB97 0400 01                    		dc.b 4,	0, 1
0000BB9A 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BB9D 0800 01                    		dc.b 8,	0, 1
0000BBA0                            ; ===========================================================================
0000BBA0                            
0000BBA0                            Obj30_Main:				; XREF: Obj30_Index
0000BBA0 45F9 0000 BB94             		lea	(Obj30_Vars1).l,a2
0000BBA6 7201                       		moveq	#1,d1
0000BBA8 117C 0048 0016             		move.b	#$48,$16(a0)
0000BBAE 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BBB4 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BBB6 45F9 0000 BB9A             		lea	(Obj30_Vars2).l,a2
0000BBBC 7201                       		moveq	#1,d1
0000BBBE 117C 0038 0016             		move.b	#$38,$16(a0)
0000BBC4                            
0000BBC4                            loc_B40C:
0000BBC4 2248                       		movea.l	a0,a1
0000BBC6 6000                       		bra.s	Obj30_Load	; load main object
0000BBC8                            ; ===========================================================================
0000BBC8                            
0000BBC8                            Obj30_Loop:
0000BBC8 6100 0000                  		bsr.w	SingleObjLoad2
0000BBCC 6600                       		bne.s	loc_B480
0000BBCE                            
0000BBCE                            Obj30_Load:				; XREF: Obj30_Main
0000BBCE 135A 0024                  		move.b	(a2)+,$24(a1)
0000BBD2 12BC 0030                  		move.b	#$30,0(a1)
0000BBD6 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBDC 101A                       		move.b	(a2)+,d0
0000BBDE 4880                       		ext.w	d0
0000BBE0 D068 000C                  		add.w	$C(a0),d0
0000BBE4 3340 000C                  		move.w	d0,$C(a1)
0000BBE8 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BBF0 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BBF6 137C 0004 0001             		move.b	#4,1(a1)
0000BBFC 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BC02 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BC08 137C 0020 0019             		move.b	#$20,$19(a1)
0000BC0E 137C 0004 0018             		move.b	#4,$18(a1)
0000BC14 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BC18 2348 003C                  		move.l	a0,$3C(a1)
0000BC1C 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BC20                            
0000BC20 137C 0010 0019             		move.b	#$10,$19(a1)
0000BC26 137C 0003 0018             		move.b	#3,$18(a1)
0000BC2C 5029 0028                  		addq.b	#8,$28(a1)
0000BC30 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BC36                            
0000BC36                            loc_B480:
0000BC36 317C 0090 0032             		move.w	#$90,$32(a0)
0000BC3C 08E8 0004 0001             		bset	#4,1(a0)
0000BC42                            
0000BC42                            Obj30_Block012:				; XREF: Obj30_Index
0000BC42 6100 0000                  		bsr.w	Obj30_Types
0000BC46 323C 002B                  		move.w	#$2B,d1
0000BC4A 343C 0048                  		move.w	#$48,d2
0000BC4E 363C 0049                  		move.w	#$49,d3
0000BC52 3828 0008                  		move.w	8(a0),d4
0000BC56 6000 0000                  		bra.w	SolidObject
0000BC5A                            ; ===========================================================================
0000BC5A                            
0000BC5A                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BC5A 2268 003C                  		movea.l	$3C(a0),a1
0000BC5E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC64 6000 0000                  		bra.w	Obj30_Types
0000BC68                            ; ===========================================================================
0000BC68                            
0000BC68                            Obj30_Block34:				; XREF: Obj30_Index
0000BC68 6100 0000                  		bsr.w	Obj30_Types
0000BC6C 323C 002B                  		move.w	#$2B,d1
0000BC70 343C 0038                  		move.w	#$38,d2
0000BC74 363C 0039                  		move.w	#$39,d3
0000BC78 3828 0008                  		move.w	8(a0),d4
0000BC7C 6000 0000                  		bra.w	SolidObject
0000BC80                            ; ===========================================================================
0000BC80                            
0000BC80                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BC80 2268 003C                  		movea.l	$3C(a0),a1
0000BC84 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC8A 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BC90 6000 0002                  		bra.w	*+4
0000BC94                            
0000BC94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC94                            
0000BC94                            
0000BC94                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BC94 7000                       		moveq	#0,d0
0000BC96 1028 0028                  		move.b	$28(a0),d0
0000BC9A 0240 0007                  		andi.w	#7,d0
0000BC9E D040                       		add.w	d0,d0
0000BCA0 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BCA4 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BCA8                            ; End of function Obj30_Types
0000BCA8                            
0000BCA8                            ; ===========================================================================
0000BCA8 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BCAA 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BCAC 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BCAE 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BCB0 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BCB2                            ; ===========================================================================
0000BCB2                            
0000BCB2                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BCB2 4E75                       		rts	
0000BCB4                            ; ===========================================================================
0000BCB4                            
0000BCB4                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BCB4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BCB8 323C 0040                  		move.w	#$40,d1
0000BCBC 6000                       		bra.s	loc_B514
0000BCBE                            ; ===========================================================================
0000BCBE                            
0000BCBE                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BCBE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BCC2 323C 0040                  		move.w	#$40,d1
0000BCC6 4440                       		neg.w	d0
0000BCC8 D041                       		add.w	d1,d0
0000BCCA                            
0000BCCA                            loc_B514:				; XREF: Obj30_Type01
0000BCCA 0828 0003 0028             		btst	#3,$28(a0)
0000BCD0 6700                       		beq.s	loc_B526
0000BCD2 4440                       		neg.w	d0
0000BCD4 D041                       		add.w	d1,d0
0000BCD6 E208                       		lsr.b	#1,d0
0000BCD8 0640 0020                  		addi.w	#$20,d0
0000BCDC                            
0000BCDC                            loc_B526:
0000BCDC 6000 0000                  		bra.w	loc_B5EE
0000BCE0                            ; ===========================================================================
0000BCE0                            
0000BCE0                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BCE0 0828 0003 0028             		btst	#3,$28(a0)
0000BCE6 6700                       		beq.s	loc_B53E
0000BCE8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BCEC 0440 0010                  		subi.w	#$10,d0
0000BCF0 6000 0000                  		bra.w	loc_B5EE
0000BCF4                            ; ===========================================================================
0000BCF4                            
0000BCF4                            loc_B53E:
0000BCF4 0828 0003 0022             		btst	#3,$22(a0)
0000BCFA 6600                       		bne.s	loc_B54E
0000BCFC 08A8 0000 0034             		bclr	#0,$34(a0)
0000BD02 6000                       		bra.s	loc_B582
0000BD04                            ; ===========================================================================
0000BD04                            
0000BD04                            loc_B54E:
0000BD04 4A28 0034                  		tst.b	$34(a0)
0000BD08 6600                       		bne.s	loc_B582
0000BD0A 117C 0001 0034             		move.b	#1,$34(a0)
0000BD10 08E8 0000 0035             		bset	#0,$35(a0)
0000BD16 6700                       		beq.s	loc_B582
0000BD18 08E8 0007 0034             		bset	#7,$34(a0)
0000BD1E 317C 0010 0036             		move.w	#$10,$36(a0)
0000BD24 117C 000A 0038             		move.b	#$A,$38(a0)
0000BD2A 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BD30 6600                       		bne.s	loc_B582
0000BD32 317C 0040 0036             		move.w	#$40,$36(a0)
0000BD38                            
0000BD38                            loc_B582:
0000BD38 4A28 0034                  		tst.b	$34(a0)
0000BD3C 6A00                       		bpl.s	loc_B5AA
0000BD3E 4A28 0038                  		tst.b	$38(a0)
0000BD42 6700                       		beq.s	loc_B594
0000BD44 5328 0038                  		subq.b	#1,$38(a0)
0000BD48 6600                       		bne.s	loc_B5AA
0000BD4A                            
0000BD4A                            loc_B594:
0000BD4A 4A68 0032                  		tst.w	$32(a0)
0000BD4E 6700                       		beq.s	loc_B5A4
0000BD50 5368 0032                  		subq.w	#1,$32(a0)
0000BD54 5368 0036                  		subq.w	#1,$36(a0)
0000BD58 6600                       		bne.s	loc_B5AA
0000BD5A                            
0000BD5A                            loc_B5A4:
0000BD5A 08A8 0007 0034             		bclr	#7,$34(a0)
0000BD60                            
0000BD60                            loc_B5AA:
0000BD60 3028 0032                  		move.w	$32(a0),d0
0000BD64 6000                       		bra.s	loc_B5EE
0000BD66                            ; ===========================================================================
0000BD66                            
0000BD66                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BD66 0828 0003 0028             		btst	#3,$28(a0)
0000BD6C 6700                       		beq.s	Obj30_ChkSwitch
0000BD6E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BD72 0440 0010                  		subi.w	#$10,d0
0000BD76 6000                       		bra.s	loc_B5EE
0000BD78                            ; ===========================================================================
0000BD78                            
0000BD78                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BD78 4A28 0034                  		tst.b	$34(a0)
0000BD7C 6600                       		bne.s	loc_B5E0
0000BD7E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BD82 7000                       		moveq	#0,d0
0000BD84 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BD88 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BD8A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BD8E 6700                       		beq.s	loc_B5EA	; if not, branch
0000BD90 117C 0001 0034             		move.b	#1,$34(a0)
0000BD96                            
0000BD96                            loc_B5E0:
0000BD96 4A68 0032                  		tst.w	$32(a0)
0000BD9A 6700                       		beq.s	loc_B5EA
0000BD9C 5568 0032                  		subq.w	#2,$32(a0)
0000BDA0                            
0000BDA0                            loc_B5EA:
0000BDA0 3028 0032                  		move.w	$32(a0),d0
0000BDA4                            
0000BDA4                            loc_B5EE:
0000BDA4 3228 0030                  		move.w	$30(a0),d1
0000BDA8 9240                       		sub.w	d0,d1
0000BDAA 3141 000C                  		move.w	d1,$C(a0)
0000BDAE 4E75                       		rts	
0000BDB0                            ; ===========================================================================
0000BDB0                            ; ---------------------------------------------------------------------------
0000BDB0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BDB0                            ; ---------------------------------------------------------------------------
0000BDB0                            Map_obj30:
0000BDB0                            	include "_maps\obj30.asm"
0000BDB0                            ; ---------------------------------------------------------------------------
0000BDB0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BDB0                            ; ---------------------------------------------------------------------------
0000BDB0 0000                       		dc.w byte_B600-Map_obj30
0000BDB2 0000                       		dc.w byte_B63D-Map_obj30
0000BDB4 0000                       		dc.w byte_B648-Map_obj30
0000BDB6 0C                         byte_B600:	dc.b $C
0000BDB7 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BDBC B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BDC1 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BDC6 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BDCB E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BDD0 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BDD5 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BDDA 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BDDF 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BDE4 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BDE9 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BDEE 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BDF3 02                         byte_B63D:	dc.b 2
0000BDF4 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BDF9 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BDFE 0A                         byte_B648:	dc.b $A
0000BDFF C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BE04 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BE09 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BE0E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BE13 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BE18 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BE1D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BE22 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BE27 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BE2C 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BE32 00                         		even
0000BE32 00                         		even
0000BE32                            
0000BE32                            ; ===========================================================================
0000BE32                            ; ---------------------------------------------------------------------------
0000BE32                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BE32                            ; ---------------------------------------------------------------------------
0000BE32                            
0000BE32                            Obj31:					; XREF: Obj_Index
0000BE32 7000                       		moveq	#0,d0
0000BE34 1028 0024                  		move.b	$24(a0),d0
0000BE38 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BE3C 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BE40                            ; ===========================================================================
0000BE40 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BE42 0000                       		dc.w loc_B798-Obj31_Index
0000BE44 0000                       		dc.w loc_B7FE-Obj31_Index
0000BE46 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BE48 0000                       		dc.w loc_B7E2-Obj31_Index
0000BE4A                            
0000BE4A 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BE4C 0100                       		dc.b 1,	0
0000BE4E                            
0000BE4E 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BE51 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BE54 08CC 03                    		dc.b 8,	$CC, 3
0000BE57 06F0 02                    		dc.b 6,	$F0, 2
0000BE5A                            
0000BE5A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BE5E 5000 7800                  		dc.w $5000, $7800
0000BE62 3800 5800                  		dc.w $3800, $5800
0000BE66 B800                       		dc.w $B800
0000BE68                            ; ===========================================================================
0000BE68                            
0000BE68                            Obj31_Main:				; XREF: Obj31_Index
0000BE68 7000                       		moveq	#0,d0
0000BE6A 1028 0028                  		move.b	$28(a0),d0
0000BE6E 6A00                       		bpl.s	loc_B6CE
0000BE70 0240 007F                  		andi.w	#$7F,d0
0000BE74 D040                       		add.w	d0,d0
0000BE76 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BE7A 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BE7E 101A                       		move.b	(a2)+,d0
0000BE80 1140 0028                  		move.b	d0,$28(a0)
0000BE84                            
0000BE84                            loc_B6CE:
0000BE84 0200 000F                  		andi.b	#$F,d0
0000BE88 D040                       		add.w	d0,d0
0000BE8A 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BE8E 4A40                       		tst.w	d0
0000BE90 6600                       		bne.s	loc_B6E0
0000BE92 3142 0032                  		move.w	d2,$32(a0)
0000BE96                            
0000BE96                            loc_B6E0:
0000BE96 45F9 0000 BE4E             		lea	(Obj31_Var).l,a2
0000BE9C 2248                       		movea.l	a0,a1
0000BE9E 7203                       		moveq	#3,d1
0000BEA0 6000                       		bra.s	Obj31_MakeStomper
0000BEA2                            ; ===========================================================================
0000BEA2                            
0000BEA2                            Obj31_Loop:
0000BEA2 6100 0000                  		bsr.w	SingleObjLoad2
0000BEA6 6600 0000                  		bne.w	Obj31_SetSize
0000BEAA                            
0000BEAA                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BEAA 135A 0024                  		move.b	(a2)+,$24(a1)
0000BEAE 12BC 0031                  		move.b	#$31,0(a1)
0000BEB2 3368 0008 0008             		move.w	8(a0),8(a1)
0000BEB8 101A                       		move.b	(a2)+,d0
0000BEBA 4880                       		ext.w	d0
0000BEBC D068 000C                  		add.w	$C(a0),d0
0000BEC0 3340 000C                  		move.w	d0,$C(a1)
0000BEC4 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BECC 337C 0300 0002             		move.w	#$300,2(a1)
0000BED2 137C 0004 0001             		move.b	#4,1(a1)
0000BED8 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BEDE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BEE4 137C 0010 0019             		move.b	#$10,$19(a1)
0000BEEA 3342 0034                  		move.w	d2,$34(a1)
0000BEEE 137C 0004 0018             		move.b	#4,$18(a1)
0000BEF4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BEF8 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BEFE 6600                       		bne.s	loc_B76A
0000BF00 5341                       		subq.w	#1,d1
0000BF02 1028 0028                  		move.b	$28(a0),d0
0000BF06 0240 00F0                  		andi.w	#$F0,d0
0000BF0A 0C40 0020                  		cmpi.w	#$20,d0
0000BF0E 679A                       		beq.s	Obj31_MakeStomper
0000BF10 137C 0038 0019             		move.b	#$38,$19(a1)
0000BF16 137C 0090 0020             		move.b	#$90,$20(a1)
0000BF1C 5241                       		addq.w	#1,d1
0000BF1E                            
0000BF1E                            loc_B76A:
0000BF1E 2348 003C                  		move.l	a0,$3C(a1)
0000BF22 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BF26                            
0000BF26 137C 0003 0018             		move.b	#3,$18(a1)
0000BF2C                            
0000BF2C                            Obj31_SetSize:
0000BF2C 7000                       		moveq	#0,d0
0000BF2E 1028 0028                  		move.b	$28(a0),d0
0000BF32 E648                       		lsr.w	#3,d0
0000BF34 0200 000E                  		andi.b	#$E,d0
0000BF38 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BF3C 115A 0019                  		move.b	(a2)+,$19(a0)
0000BF40 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BF44 6000                       		bra.s	loc_B798
0000BF46                            ; ===========================================================================
0000BF46 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BF48 3009                       		dc.b $30, 9
0000BF4A 100A                       		dc.b $10, $A
0000BF4C                            ; ===========================================================================
0000BF4C                            
0000BF4C                            loc_B798:				; XREF: Obj31_Index
0000BF4C 6100 0000                  		bsr.w	Obj31_Types
0000BF50 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BF56 7200                       		moveq	#0,d1
0000BF58 1228 0019                  		move.b	$19(a0),d1
0000BF5C 0641 000B                  		addi.w	#$B,d1
0000BF60 343C 000C                  		move.w	#$C,d2
0000BF64 363C 000D                  		move.w	#$D,d3
0000BF68 3828 0008                  		move.w	8(a0),d4
0000BF6C 6100 0000                  		bsr.w	SolidObject
0000BF70 0828 0003 0022             		btst	#3,$22(a0)
0000BF76 6700                       		beq.s	Obj31_Display
0000BF78 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF7E 6400                       		bcc.s	Obj31_Display
0000BF80 2448                       		movea.l	a0,a2
0000BF82 41F8 D000                  		lea	($FFFFD000).w,a0
0000BF86 4EB9 0000 0000             		jsr	KillSonic
0000BF8C 204A                       		movea.l	a2,a0
0000BF8E                            
0000BF8E                            Obj31_Display:
0000BF8E 6100 0000                  		bsr.w	DisplaySprite
0000BF92 6000 0000                  		bra.w	Obj31_ChkDel
0000BF96                            ; ===========================================================================
0000BF96                            
0000BF96                            loc_B7E2:				; XREF: Obj31_Index
0000BF96 117C 0080 0016             		move.b	#$80,$16(a0)
0000BF9C 08E8 0004 0001             		bset	#4,1(a0)
0000BFA2 2268 003C                  		movea.l	$3C(a0),a1
0000BFA6 1029 0032                  		move.b	$32(a1),d0
0000BFAA EA08                       		lsr.b	#5,d0
0000BFAC 5600                       		addq.b	#3,d0
0000BFAE 1140 001A                  		move.b	d0,$1A(a0)
0000BFB2                            
0000BFB2                            loc_B7FE:				; XREF: Obj31_Index
0000BFB2 2268 003C                  		movea.l	$3C(a0),a1
0000BFB6 7000                       		moveq	#0,d0
0000BFB8 1029 0032                  		move.b	$32(a1),d0
0000BFBC D068 0030                  		add.w	$30(a0),d0
0000BFC0 3140 000C                  		move.w	d0,$C(a0)
0000BFC4                            
0000BFC4                            Obj31_Display2:				; XREF: Obj31_Index
0000BFC4 6100 0000                  		bsr.w	DisplaySprite
0000BFC8                            
0000BFC8                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BFC8 3028 0008                  		move.w	8(a0),d0
0000BFCC 0240 FF80                  		andi.w	#$FF80,d0
0000BFD0 3238 F700                  		move.w	($FFFFF700).w,d1
0000BFD4 0441 0080                  		subi.w	#$80,d1
0000BFD8 0241 FF80                  		andi.w	#$FF80,d1
0000BFDC 9041                       		sub.w	d1,d0
0000BFDE 0C40 0280                  		cmpi.w	#$280,d0
0000BFE2 6200 0000                  		bhi.w	DeleteObject
0000BFE6 4E75                       		rts	
0000BFE8                            ; ===========================================================================
0000BFE8                            
0000BFE8                            Obj31_Types:				; XREF: loc_B798
0000BFE8 1028 0028                  		move.b	$28(a0),d0
0000BFEC 0240 000F                  		andi.w	#$F,d0
0000BFF0 D040                       		add.w	d0,d0
0000BFF2 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BFF6 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BFFA                            ; ===========================================================================
0000BFFA 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BFFC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFFE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C000 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C002 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C004 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C006 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C008                            ; ===========================================================================
0000C008                            
0000C008                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C008 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C00C 7000                       		moveq	#0,d0
0000C00E 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C012 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C016 6700                       		beq.s	loc_B8A8	; if not, branch
0000C018 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C01C 6A00                       		bpl.s	loc_B872
0000C01E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C024 6700                       		beq.s	loc_B8A0
0000C026                            
0000C026                            loc_B872:
0000C026 4A68 0032                  		tst.w	$32(a0)
0000C02A 6700                       		beq.s	loc_B8A0
0000C02C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C030 0200 000F                  		andi.b	#$F,d0
0000C034 6600                       		bne.s	loc_B892
0000C036 4A28 0001                  		tst.b	1(a0)
0000C03A 6A00                       		bpl.s	loc_B892
0000C03C 303C 00C7                  		move.w	#$C7,d0
0000C040 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C046                            
0000C046                            loc_B892:
0000C046 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C04C 6400                       		bcc.s	Obj31_Restart
0000C04E 317C 0000 0032             		move.w	#0,$32(a0)
0000C054                            
0000C054                            loc_B8A0:
0000C054 317C 0000 0012             		move.w	#0,$12(a0)
0000C05A 6000                       		bra.s	Obj31_Restart
0000C05C                            ; ===========================================================================
0000C05C                            
0000C05C                            loc_B8A8:				; XREF: Obj31_Type00
0000C05C 3228 0034                  		move.w	$34(a0),d1
0000C060 B268 0032                  		cmp.w	$32(a0),d1
0000C064 6700                       		beq.s	Obj31_Restart
0000C066 3028 0012                  		move.w	$12(a0),d0
0000C06A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C070 D168 0032                  		add.w	d0,$32(a0)
0000C074 B268 0032                  		cmp.w	$32(a0),d1
0000C078 6200                       		bhi.s	Obj31_Restart
0000C07A 3141 0032                  		move.w	d1,$32(a0)
0000C07E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C084 4A28 0001                  		tst.b	1(a0)
0000C088 6A00                       		bpl.s	Obj31_Restart
0000C08A 303C 00BD                  		move.w	#$BD,d0
0000C08E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C094                            
0000C094                            Obj31_Restart:
0000C094 7000                       		moveq	#0,d0
0000C096 1028 0032                  		move.b	$32(a0),d0
0000C09A D068 0030                  		add.w	$30(a0),d0
0000C09E 3140 000C                  		move.w	d0,$C(a0)
0000C0A2 4E75                       		rts	
0000C0A4                            ; ===========================================================================
0000C0A4                            
0000C0A4                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C0A4 4A68 0036                  		tst.w	$36(a0)
0000C0A8 6700                       		beq.s	loc_B938
0000C0AA 4A68 0038                  		tst.w	$38(a0)
0000C0AE 6700                       		beq.s	loc_B902
0000C0B0 5368 0038                  		subq.w	#1,$38(a0)
0000C0B4 6000                       		bra.s	loc_B97C
0000C0B6                            ; ===========================================================================
0000C0B6                            
0000C0B6                            loc_B902:
0000C0B6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C0BA 0200 000F                  		andi.b	#$F,d0
0000C0BE 6600                       		bne.s	loc_B91C
0000C0C0 4A28 0001                  		tst.b	1(a0)
0000C0C4 6A00                       		bpl.s	loc_B91C
0000C0C6 303C 00C7                  		move.w	#$C7,d0
0000C0CA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C0D0                            
0000C0D0                            loc_B91C:
0000C0D0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C0D6 6400                       		bcc.s	loc_B97C
0000C0D8 317C 0000 0032             		move.w	#0,$32(a0)
0000C0DE 317C 0000 0012             		move.w	#0,$12(a0)
0000C0E4 317C 0000 0036             		move.w	#0,$36(a0)
0000C0EA 6000                       		bra.s	loc_B97C
0000C0EC                            ; ===========================================================================
0000C0EC                            
0000C0EC                            loc_B938:				; XREF: Obj31_Type01
0000C0EC 3228 0034                  		move.w	$34(a0),d1
0000C0F0 B268 0032                  		cmp.w	$32(a0),d1
0000C0F4 6700                       		beq.s	loc_B97C
0000C0F6 3028 0012                  		move.w	$12(a0),d0
0000C0FA 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C100 D168 0032                  		add.w	d0,$32(a0)
0000C104 B268 0032                  		cmp.w	$32(a0),d1
0000C108 6200                       		bhi.s	loc_B97C
0000C10A 3141 0032                  		move.w	d1,$32(a0)
0000C10E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C114 317C 0001 0036             		move.w	#1,$36(a0)
0000C11A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C120 4A28 0001                  		tst.b	1(a0)
0000C124 6A00                       		bpl.s	loc_B97C
0000C126 303C 00BD                  		move.w	#$BD,d0
0000C12A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C130                            
0000C130                            loc_B97C:
0000C130 6000 FF62                  		bra.w	Obj31_Restart
0000C134                            ; ===========================================================================
0000C134                            
0000C134                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C134 3038 D008                  		move.w	($FFFFD008).w,d0
0000C138 9068 0008                  		sub.w	8(a0),d0
0000C13C 6400                       		bcc.s	loc_B98C
0000C13E 4440                       		neg.w	d0
0000C140                            
0000C140                            loc_B98C:
0000C140 0C40 0090                  		cmpi.w	#$90,d0
0000C144 6400                       		bcc.s	loc_B996
0000C146 5228 0028                  		addq.b	#1,$28(a0)
0000C14A                            
0000C14A                            loc_B996:
0000C14A 6000 FF48                  		bra.w	Obj31_Restart
0000C14E                            ; ===========================================================================
0000C14E                            ; ---------------------------------------------------------------------------
0000C14E                            ; Object 45 - spiked metal block from beta version (MZ)
0000C14E                            ; ---------------------------------------------------------------------------
0000C14E                            
0000C14E                            Obj45:					; XREF: Obj_Index
0000C14E 7000                       		moveq	#0,d0
0000C150 1028 0024                  		move.b	$24(a0),d0
0000C154 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C158 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C15C                            ; ===========================================================================
0000C15C 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C15E 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C160 0000                       		dc.w loc_BA8E-Obj45_Index
0000C162 0000                       		dc.w Obj45_Display-Obj45_Index
0000C164 0000                       		dc.w loc_BA7A-Obj45_Index
0000C166                            
0000C166 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C169 04E4 01                    		dc.b	4, $E4,	  1
0000C16C 0834 03                    		dc.b	8, $34,	  3
0000C16F 0628 02                    		dc.b	6, $28,	  2
0000C172                            
0000C172 3800                       word_B9BE:	dc.w $3800
0000C174 A000                       		dc.w -$6000
0000C176 5000                       		dc.w $5000
0000C178                            ; ===========================================================================
0000C178                            
0000C178                            Obj45_Main:				; XREF: Obj45_Index
0000C178 7000                       		moveq	#0,d0
0000C17A 1028 0028                  		move.b	$28(a0),d0
0000C17E D040                       		add.w	d0,d0
0000C180 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C184 45F9 0000 C166             		lea	(Obj45_Var).l,a2
0000C18A 2248                       		movea.l	a0,a1
0000C18C 7203                       		moveq	#3,d1
0000C18E 6000                       		bra.s	Obj45_Load
0000C190                            ; ===========================================================================
0000C190                            
0000C190                            Obj45_Loop:
0000C190 6100 0000                  		bsr.w	SingleObjLoad2
0000C194 6600                       		bne.s	loc_BA52
0000C196                            
0000C196                            Obj45_Load:				; XREF: Obj45_Main
0000C196 135A 0024                  		move.b	(a2)+,$24(a1)
0000C19A 12BC 0045                  		move.b	#$45,0(a1)
0000C19E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C1A4 101A                       		move.b	(a2)+,d0
0000C1A6 4880                       		ext.w	d0
0000C1A8 D068 0008                  		add.w	8(a0),d0
0000C1AC 3340 0008                  		move.w	d0,8(a1)
0000C1B0 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C1B8 337C 0300 0002             		move.w	#$300,2(a1)
0000C1BE 137C 0004 0001             		move.b	#4,1(a1)
0000C1C4 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C1CA 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C1D0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C1D6 137C 0020 0019             		move.b	#$20,$19(a1)
0000C1DC 3342 0034                  		move.w	d2,$34(a1)
0000C1E0 137C 0004 0018             		move.b	#4,$18(a1)
0000C1E6 0C12 0001                  		cmpi.b	#1,(a2)
0000C1EA 6600                       		bne.s	loc_BA40
0000C1EC 137C 0091 0020             		move.b	#$91,$20(a1)
0000C1F2                            
0000C1F2                            loc_BA40:
0000C1F2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C1F6 2348 003C                  		move.l	a0,$3C(a1)
0000C1FA 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C1FE                            
0000C1FE 137C 0003 0018             		move.b	#3,$18(a1)
0000C204                            
0000C204                            loc_BA52:
0000C204 117C 0010 0019             		move.b	#$10,$19(a0)
0000C20A                            
0000C20A                            Obj45_Solid:				; XREF: Obj45_Index
0000C20A 3F28 0008                  		move.w	8(a0),-(sp)
0000C20E 6100 0000                  		bsr.w	Obj45_Move
0000C212 323C 0017                  		move.w	#$17,d1
0000C216 343C 0020                  		move.w	#$20,d2
0000C21A 363C 0020                  		move.w	#$20,d3
0000C21E 381F                       		move.w	(sp)+,d4
0000C220 6100 0000                  		bsr.w	SolidObject
0000C224 6100 0000                  		bsr.w	DisplaySprite
0000C228 6000 0000                  		bra.w	Obj45_ChkDel
0000C22C                            ; ===========================================================================
0000C22C                            
0000C22C                            loc_BA7A:				; XREF: Obj45_Index
0000C22C 2268 003C                  		movea.l	$3C(a0),a1
0000C230 1029 0032                  		move.b	$32(a1),d0
0000C234 0600 0010                  		addi.b	#$10,d0
0000C238 EA08                       		lsr.b	#5,d0
0000C23A 5600                       		addq.b	#3,d0
0000C23C 1140 001A                  		move.b	d0,$1A(a0)
0000C240                            
0000C240                            loc_BA8E:				; XREF: Obj45_Index
0000C240 2268 003C                  		movea.l	$3C(a0),a1
0000C244 7000                       		moveq	#0,d0
0000C246 1029 0032                  		move.b	$32(a1),d0
0000C24A 4440                       		neg.w	d0
0000C24C D068 0030                  		add.w	$30(a0),d0
0000C250 3140 0008                  		move.w	d0,8(a0)
0000C254                            
0000C254                            Obj45_Display:				; XREF: Obj45_Index
0000C254 6100 0000                  		bsr.w	DisplaySprite
0000C258                            
0000C258                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C258 3028 003A                  		move.w	$3A(a0),d0
0000C25C 0240 FF80                  		andi.w	#$FF80,d0
0000C260 3238 F700                  		move.w	($FFFFF700).w,d1
0000C264 0441 0080                  		subi.w	#$80,d1
0000C268 0241 FF80                  		andi.w	#$FF80,d1
0000C26C 9041                       		sub.w	d1,d0
0000C26E 0C40 0280                  		cmpi.w	#$280,d0
0000C272 6200 0000                  		bhi.w	DeleteObject
0000C276 4E75                       		rts	
0000C278                            
0000C278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C278                            
0000C278                            
0000C278                            Obj45_Move:				; XREF: Obj45_Solid
0000C278 7000                       		moveq	#0,d0
0000C27A 1028 0028                  		move.b	$28(a0),d0
0000C27E D040                       		add.w	d0,d0
0000C280 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C284 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C288                            ; End of function Obj45_Move
0000C288                            
0000C288                            ; ===========================================================================
0000C288 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C28A 0000                       		dc.w loc_BADA-off_BAD6
0000C28C                            ; ===========================================================================
0000C28C                            
0000C28C                            loc_BADA:				; XREF: off_BAD6
0000C28C 4A68 0036                  		tst.w	$36(a0)
0000C290 6700                       		beq.s	loc_BB08
0000C292 4A68 0038                  		tst.w	$38(a0)
0000C296 6700                       		beq.s	loc_BAEC
0000C298 5368 0038                  		subq.w	#1,$38(a0)
0000C29C 6000                       		bra.s	loc_BB3C
0000C29E                            ; ===========================================================================
0000C29E                            
0000C29E                            loc_BAEC:
0000C29E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C2A4 6400                       		bcc.s	loc_BB3C
0000C2A6 317C 0000 0032             		move.w	#0,$32(a0)
0000C2AC 317C 0000 0010             		move.w	#0,$10(a0)
0000C2B2 317C 0000 0036             		move.w	#0,$36(a0)
0000C2B8 6000                       		bra.s	loc_BB3C
0000C2BA                            ; ===========================================================================
0000C2BA                            
0000C2BA                            loc_BB08:				; XREF: loc_BADA
0000C2BA 3228 0034                  		move.w	$34(a0),d1
0000C2BE B268 0032                  		cmp.w	$32(a0),d1
0000C2C2 6700                       		beq.s	loc_BB3C
0000C2C4 3028 0010                  		move.w	$10(a0),d0
0000C2C8 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C2CE D168 0032                  		add.w	d0,$32(a0)
0000C2D2 B268 0032                  		cmp.w	$32(a0),d1
0000C2D6 6200                       		bhi.s	loc_BB3C
0000C2D8 3141 0032                  		move.w	d1,$32(a0)
0000C2DC 317C 0000 0010             		move.w	#0,$10(a0)
0000C2E2 317C 0001 0036             		move.w	#1,$36(a0)
0000C2E8 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C2EE                            
0000C2EE                            loc_BB3C:
0000C2EE 7000                       		moveq	#0,d0
0000C2F0 1028 0032                  		move.b	$32(a0),d0
0000C2F4 4440                       		neg.w	d0
0000C2F6 D068 0030                  		add.w	$30(a0),d0
0000C2FA 3140 0008                  		move.w	d0,8(a0)
0000C2FE 4E75                       		rts	
0000C300                            ; ===========================================================================
0000C300                            ; ---------------------------------------------------------------------------
0000C300                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C300                            ; ---------------------------------------------------------------------------
0000C300                            Map_obj31:
0000C300                            	include "_maps\obj31.asm"
0000C300                            ; ---------------------------------------------------------------------------
0000C300                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C300                            ; ---------------------------------------------------------------------------
0000C300 0000                       		dc.w byte_BB64-Map_obj31
0000C302 0000                       		dc.w byte_BB7E-Map_obj31
0000C304 0000                       		dc.w byte_BB98-Map_obj31
0000C306 0000                       		dc.w byte_BB9E-Map_obj31
0000C308 0000                       		dc.w byte_BBA9-Map_obj31
0000C30A 0000                       		dc.w byte_BBBE-Map_obj31
0000C30C 0000                       		dc.w byte_BBDD-Map_obj31
0000C30E 0000                       		dc.w byte_BC06-Map_obj31
0000C310 0000                       		dc.w byte_BC06-Map_obj31
0000C312 0000                       		dc.w byte_BC39-Map_obj31
0000C314 0000                       		dc.w byte_BC53-Map_obj31
0000C316 05                         byte_BB64:	dc.b 5
0000C317 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C31C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C321 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C326 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C32B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C330 05                         byte_BB7E:	dc.b 5
0000C331 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C336 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C33B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C340 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C345 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C34A 01                         byte_BB98:	dc.b 1
0000C34B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C350 02                         byte_BB9E:	dc.b 2
0000C351 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C356 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C35B 04                         byte_BBA9:	dc.b 4
0000C35C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C361 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C366 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C36B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C370 06                         byte_BBBE:	dc.b 6
0000C371 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C376 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C37B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C380 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C385 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C38A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C38F 08                         byte_BBDD:	dc.b 8
0000C390 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C395 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C39A C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C39F D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C3A4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C3A9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C3AE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C3B3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C3B8 0A                         byte_BC06:	dc.b $A
0000C3B9 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C3BE 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C3C3 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C3C8 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C3CD C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C3D2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C3D7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C3DC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C3E1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C3E6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C3EB 05                         byte_BC39:	dc.b 5
0000C3EC F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C3F1 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C3F6 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C3FB F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C400 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C405 01                         byte_BC53:	dc.b 1
0000C406 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C40C 00                         		even
0000C40C 00                         		even
0000C40C                            
0000C40C                            ; ---------------------------------------------------------------------------
0000C40C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C40C                            ; ---------------------------------------------------------------------------
0000C40C                            Map_obj45:
0000C40C                            	include "_maps\obj45.asm"
0000C40C                            ; ---------------------------------------------------------------------------
0000C40C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C40C                            ; ---------------------------------------------------------------------------
0000C40C 0000                       		dc.w byte_BC6C-Map_obj45
0000C40E 0000                       		dc.w byte_BC7C-Map_obj45
0000C410 0000                       		dc.w byte_BC8C-Map_obj45
0000C412 0000                       		dc.w byte_BC92-Map_obj45
0000C414 0000                       		dc.w byte_BC9D-Map_obj45
0000C416 0000                       		dc.w byte_BCB2-Map_obj45
0000C418 0000                       		dc.w byte_BCD1-Map_obj45
0000C41A 0000                       		dc.w byte_BCFA-Map_obj45
0000C41C 0000                       		dc.w byte_BCFA-Map_obj45
0000C41E 03                         byte_BC6C:	dc.b 3
0000C41F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C424 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C429 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C42E 03                         byte_BC7C:	dc.b 3
0000C42F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C434 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C439 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C43E 01                         byte_BC8C:	dc.b 1
0000C43F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C444 02                         byte_BC92:	dc.b 2
0000C445 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C44A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C44F 04                         byte_BC9D:	dc.b 4
0000C450 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C455 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C45A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C45F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C464 06                         byte_BCB2:	dc.b 6
0000C465 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C46A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C46F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C474 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C479 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C47E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C483 08                         byte_BCD1:	dc.b 8
0000C484 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C489 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C48E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C493 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C498 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C49D F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C4A2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C4A7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C4AC 08                         byte_BCFA:	dc.b 8
0000C4AD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C4B2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C4B7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C4BC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C4C1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C4C6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C4CB F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C4D0 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C4D5 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C4DA F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C4E0 00                         		even
0000C4E0 00                         		even
0000C4E0                            
0000C4E0                            ; ===========================================================================
0000C4E0                            ; ---------------------------------------------------------------------------
0000C4E0                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C4E0                            ; ---------------------------------------------------------------------------
0000C4E0                            
0000C4E0                            Obj32:					; XREF: Obj_Index
0000C4E0 7000                       		moveq	#0,d0
0000C4E2 1028 0024                  		move.b	$24(a0),d0
0000C4E6 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C4EA 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C4EE                            ; ===========================================================================
0000C4EE 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C4F0 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C4F2                            ; ===========================================================================
0000C4F2                            
0000C4F2                            Obj32_Main:				; XREF: Obj32_Index
0000C4F2 5428 0024                  		addq.b	#2,$24(a0)
0000C4F6 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C4FE 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C504 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C50A 6700                       		beq.s	loc_BD60
0000C50C 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C512                            
0000C512                            loc_BD60:
0000C512 117C 0004 0001             		move.b	#4,1(a0)
0000C518 117C 0010 0019             		move.b	#$10,$19(a0)
0000C51E 117C 0004 0018             		move.b	#4,$18(a0)
0000C524 5668 000C                  		addq.w	#3,$C(a0)
0000C528                            
0000C528                            Obj32_Pressed:				; XREF: Obj32_Index
0000C528 4A28 0001                  		tst.b	1(a0)
0000C52C 6A00                       		bpl.s	Obj32_Display
0000C52E 323C 001B                  		move.w	#$1B,d1
0000C532 343C 0005                  		move.w	#5,d2
0000C536 363C 0005                  		move.w	#5,d3
0000C53A 3828 0008                  		move.w	8(a0),d4
0000C53E 6100 0000                  		bsr.w	SolidObject
0000C542 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C548 1028 0028                  		move.b	$28(a0),d0
0000C54C 0240 000F                  		andi.w	#$F,d0
0000C550 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C554 47F3 0000                  		lea	(a3,d0.w),a3
0000C558 7600                       		moveq	#0,d3
0000C55A 0828 0006 0028             		btst	#6,$28(a0)
0000C560 6700                       		beq.s	loc_BDB2
0000C562 7607                       		moveq	#7,d3
0000C564                            
0000C564                            loc_BDB2:
0000C564 4A28 0028                  		tst.b	$28(a0)
0000C568 6A00                       		bpl.s	loc_BDBE
0000C56A 6100 0000                  		bsr.w	Obj32_MZBlock
0000C56E 6600                       		bne.s	loc_BDC8
0000C570                            
0000C570                            loc_BDBE:
0000C570 4A28 0025                  		tst.b	$25(a0)
0000C574 6600                       		bne.s	loc_BDC8
0000C576 0793                       		bclr	d3,(a3)
0000C578 6000                       		bra.s	loc_BDDE
0000C57A                            ; ===========================================================================
0000C57A                            
0000C57A                            loc_BDC8:
0000C57A 4A13                       		tst.b	(a3)
0000C57C 6600                       		bne.s	loc_BDD6
0000C57E 303C 00CD                  		move.w	#$CD,d0
0000C582 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play switch sound
0000C588                            
0000C588                            loc_BDD6:
0000C588 07D3                       		bset	d3,(a3)
0000C58A 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C590                            
0000C590                            loc_BDDE:
0000C590 0828 0005 0028             		btst	#5,$28(a0)
0000C596 6700                       		beq.s	Obj32_Display
0000C598 5328 001E                  		subq.b	#1,$1E(a0)
0000C59C 6A00                       		bpl.s	Obj32_Display
0000C59E 117C 0007 001E             		move.b	#7,$1E(a0)
0000C5A4 0868 0001 001A             		bchg	#1,$1A(a0)
0000C5AA                            
0000C5AA                            Obj32_Display:
0000C5AA 6100 0000                  		bsr.w	DisplaySprite
0000C5AE 3028 0008                  		move.w	8(a0),d0
0000C5B2 0240 FF80                  		andi.w	#$FF80,d0
0000C5B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C5BA 0441 0080                  		subi.w	#$80,d1
0000C5BE 0241 FF80                  		andi.w	#$FF80,d1
0000C5C2 9041                       		sub.w	d1,d0
0000C5C4 0C40 0280                  		cmpi.w	#$280,d0
0000C5C8 6200 0000                  		bhi.w	Obj32_Delete
0000C5CC 4E75                       		rts	
0000C5CE                            ; ===========================================================================
0000C5CE                            
0000C5CE                            Obj32_Delete:
0000C5CE 6100 0000                  		bsr.w	DeleteObject
0000C5D2 4E75                       		rts	
0000C5D4                            
0000C5D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C5D4                            
0000C5D4                            
0000C5D4                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C5D4 3F03                       		move.w	d3,-(sp)
0000C5D6 3428 0008                  		move.w	8(a0),d2
0000C5DA 3628 000C                  		move.w	$C(a0),d3
0000C5DE 0442 0010                  		subi.w	#$10,d2
0000C5E2 5143                       		subq.w	#8,d3
0000C5E4 383C 0020                  		move.w	#$20,d4
0000C5E8 3A3C 0010                  		move.w	#$10,d5
0000C5EC 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C5F0 3C3C 005F                  		move.w	#$5F,d6
0000C5F4                            
0000C5F4                            Obj32_MZLoop:
0000C5F4 4A29 0001                  		tst.b	1(a1)
0000C5F8 6A00                       		bpl.s	loc_BE4E
0000C5FA 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C5FE 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C600                            
0000C600                            loc_BE4E:
0000C600 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C604 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C608                            
0000C608 361F                       		move.w	(sp)+,d3
0000C60A 7000                       		moveq	#0,d0
0000C60C                            
0000C60C                            locret_BE5A:
0000C60C 4E75                       		rts	
0000C60E                            ; ===========================================================================
0000C60E 1010                       Obj32_MZData:	dc.b $10, $10
0000C610                            ; ===========================================================================
0000C610                            
0000C610                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C610 7001                       		moveq	#1,d0
0000C612 0240 003F                  		andi.w	#$3F,d0
0000C616 D040                       		add.w	d0,d0
0000C618 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C61C 121A                       		move.b	(a2)+,d1
0000C61E 4881                       		ext.w	d1
0000C620 3029 0008                  		move.w	8(a1),d0
0000C624 9041                       		sub.w	d1,d0
0000C626 9042                       		sub.w	d2,d0
0000C628 6400                       		bcc.s	loc_BE80
0000C62A D241                       		add.w	d1,d1
0000C62C D041                       		add.w	d1,d0
0000C62E 6500                       		bcs.s	loc_BE84
0000C630 60CE                       		bra.s	loc_BE4E
0000C632                            ; ===========================================================================
0000C632                            
0000C632                            loc_BE80:
0000C632 B044                       		cmp.w	d4,d0
0000C634 62CA                       		bhi.s	loc_BE4E
0000C636                            
0000C636                            loc_BE84:
0000C636 121A                       		move.b	(a2)+,d1
0000C638 4881                       		ext.w	d1
0000C63A 3029 000C                  		move.w	$C(a1),d0
0000C63E 9041                       		sub.w	d1,d0
0000C640 9043                       		sub.w	d3,d0
0000C642 6400                       		bcc.s	loc_BE9A
0000C644 D241                       		add.w	d1,d1
0000C646 D041                       		add.w	d1,d0
0000C648 6500                       		bcs.s	loc_BE9E
0000C64A 60B4                       		bra.s	loc_BE4E
0000C64C                            ; ===========================================================================
0000C64C                            
0000C64C                            loc_BE9A:
0000C64C B045                       		cmp.w	d5,d0
0000C64E 62B0                       		bhi.s	loc_BE4E
0000C650                            
0000C650                            loc_BE9E:
0000C650 361F                       		move.w	(sp)+,d3
0000C652 7001                       		moveq	#1,d0
0000C654 4E75                       		rts	
0000C656                            ; End of function Obj32_MZBlock
0000C656                            
0000C656                            ; ===========================================================================
0000C656                            ; ---------------------------------------------------------------------------
0000C656                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C656                            ; ---------------------------------------------------------------------------
0000C656                            Map_obj32:
0000C656                            	include "_maps\obj32.asm"
0000C656                            ; ---------------------------------------------------------------------------
0000C656                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C656                            ; ---------------------------------------------------------------------------
0000C656 0000                       		dc.w byte_BEAC-Map_obj32
0000C658 0000                       		dc.w byte_BEB7-Map_obj32
0000C65A 0000                       		dc.w byte_BEC2-Map_obj32
0000C65C 0000                       		dc.w byte_BEB7-Map_obj32
0000C65E 02                         byte_BEAC:	dc.b 2
0000C65F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C664 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C669 02                         byte_BEB7:	dc.b 2
0000C66A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C66F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C674 02                         byte_BEC2:	dc.b 2
0000C675 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C67A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C67F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C684                            		even
0000C684                            		even
0000C684                            
0000C684                            ; ===========================================================================
0000C684                            ; ---------------------------------------------------------------------------
0000C684                            ; Object 33 - pushable blocks (MZ, LZ)
0000C684                            ; ---------------------------------------------------------------------------
0000C684                            
0000C684                            Obj33:					; XREF: Obj_Index
0000C684 7000                       		moveq	#0,d0
0000C686 1028 0024                  		move.b	$24(a0),d0
0000C68A 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C68E 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C692                            ; ===========================================================================
0000C692 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C694 0000                       		dc.w loc_BF6E-Obj33_Index
0000C696 0000                       		dc.w loc_C02C-Obj33_Index
0000C698                            
0000C698 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C69A 4001                       		dc.b $40, 1
0000C69C                            ; ===========================================================================
0000C69C                            
0000C69C                            Obj33_Main:				; XREF: Obj33_Index
0000C69C 5428 0024                  		addq.b	#2,$24(a0)
0000C6A0 117C 000F 0016             		move.b	#$F,$16(a0)
0000C6A6 117C 000F 0017             		move.b	#$F,$17(a0)
0000C6AC 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C6B4 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C6BA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C6C0 6600                       		bne.s	loc_BF16
0000C6C2 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C6C8                            
0000C6C8                            loc_BF16:
0000C6C8 117C 0004 0001             		move.b	#4,1(a0)
0000C6CE 117C 0003 0018             		move.b	#3,$18(a0)
0000C6D4 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C6DA 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C6E0 7000                       		moveq	#0,d0
0000C6E2 1028 0028                  		move.b	$28(a0),d0
0000C6E6 D040                       		add.w	d0,d0
0000C6E8 0240 000E                  		andi.w	#$E,d0
0000C6EC 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C6F0 115A 0019                  		move.b	(a2)+,$19(a0)
0000C6F4 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C6F8 4A28 0028                  		tst.b	$28(a0)
0000C6FC 6700                       		beq.s	Obj33_ChkGone
0000C6FE 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C704                            
0000C704                            Obj33_ChkGone:
0000C704 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C708 7000                       		moveq	#0,d0
0000C70A 1028 0023                  		move.b	$23(a0),d0
0000C70E 6700                       		beq.s	loc_BF6E
0000C710 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C716 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C71C 6600 0000                  		bne.w	DeleteObject
0000C720                            
0000C720                            loc_BF6E:				; XREF: Obj33_Index
0000C720 4A28 0032                  		tst.b	$32(a0)
0000C724 6600 0000                  		bne.w	loc_C046
0000C728 7200                       		moveq	#0,d1
0000C72A 1228 0019                  		move.b	$19(a0),d1
0000C72E 0641 000B                  		addi.w	#$B,d1
0000C732 343C 0010                  		move.w	#$10,d2
0000C736 363C 0011                  		move.w	#$11,d3
0000C73A 3828 0008                  		move.w	8(a0),d4
0000C73E 6100 0000                  		bsr.w	loc_C186
0000C742 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C748 6600                       		bne.s	loc_BFC6	; if not, branch
0000C74A 08A8 0007 0028             		bclr	#7,$28(a0)
0000C750 3028 0008                  		move.w	8(a0),d0
0000C754 0C40 0A20                  		cmpi.w	#$A20,d0
0000C758 6500                       		bcs.s	loc_BFC6
0000C75A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C75E 6400                       		bcc.s	loc_BFC6
0000C760 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C764 0440 001C                  		subi.w	#$1C,d0
0000C768 3140 000C                  		move.w	d0,$C(a0)
0000C76C 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C772 08E8 0007 0028             		bset	#7,$28(a0)
0000C778                            
0000C778                            loc_BFC6:
0000C778 3028 0008                  		move.w	8(a0),d0
0000C77C 0240 FF80                  		andi.w	#$FF80,d0
0000C780 3238 F700                  		move.w	($FFFFF700).w,d1
0000C784 0441 0080                  		subi.w	#$80,d1
0000C788 0241 FF80                  		andi.w	#$FF80,d1
0000C78C 9041                       		sub.w	d1,d0
0000C78E 0C40 0280                  		cmpi.w	#$280,d0
0000C792 6200                       		bhi.s	loc_BFE6
0000C794 6000 0000                  		bra.w	DisplaySprite
0000C798                            ; ===========================================================================
0000C798                            
0000C798                            loc_BFE6:
0000C798 3028 0034                  		move.w	$34(a0),d0
0000C79C 0240 FF80                  		andi.w	#$FF80,d0
0000C7A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C7A4 0441 0080                  		subi.w	#$80,d1
0000C7A8 0241 FF80                  		andi.w	#$FF80,d1
0000C7AC 9041                       		sub.w	d1,d0
0000C7AE 0C40 0280                  		cmpi.w	#$280,d0
0000C7B2 6200                       		bhi.s	loc_C016
0000C7B4 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C7BA 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C7C0 117C 0004 0024             		move.b	#4,$24(a0)
0000C7C6 6000                       		bra.s	loc_C02C
0000C7C8                            ; ===========================================================================
0000C7C8                            
0000C7C8                            loc_C016:
0000C7C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C7CC 7000                       		moveq	#0,d0
0000C7CE 1028 0023                  		move.b	$23(a0),d0
0000C7D2 6700                       		beq.s	loc_C028
0000C7D4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C7DA                            
0000C7DA                            loc_C028:
0000C7DA 6000 0000                  		bra.w	DeleteObject
0000C7DE                            ; ===========================================================================
0000C7DE                            
0000C7DE                            loc_C02C:				; XREF: Obj33_Index
0000C7DE 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C7E2 6700                       		beq.s	locret_C044
0000C7E4 117C 0002 0024             		move.b	#2,$24(a0)
0000C7EA 4228 0032                  		clr.b	$32(a0)
0000C7EE 4268 0010                  		clr.w	$10(a0)
0000C7F2 4268 0012                  		clr.w	$12(a0)
0000C7F6                            
0000C7F6                            locret_C044:
0000C7F6 4E75                       		rts	
0000C7F8                            ; ===========================================================================
0000C7F8                            
0000C7F8                            loc_C046:				; XREF: loc_BF6E
0000C7F8 3F28 0008                  		move.w	8(a0),-(sp)
0000C7FC 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C802 6400                       		bcc.s	loc_C056
0000C804 6100 0000                  		bsr.w	SpeedToPos
0000C808                            
0000C808                            loc_C056:
0000C808 0828 0001 0022             		btst	#1,$22(a0)
0000C80E 6700                       		beq.s	loc_C0A0
0000C810 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C816 4EB9 0000 0000             		jsr	ObjHitFloor
0000C81C 4A41                       		tst.w	d1
0000C81E 6A00 0000                  		bpl.w	loc_C09E
0000C822 D368 000C                  		add.w	d1,$C(a0)
0000C826 4268 0012                  		clr.w	$12(a0)
0000C82A 08A8 0001 0022             		bclr	#1,$22(a0)
0000C830 3011                       		move.w	(a1),d0
0000C832 0240 03FF                  		andi.w	#$3FF,d0
0000C836 0C40 016A                  		cmpi.w	#$16A,d0
0000C83A 6500                       		bcs.s	loc_C09E
0000C83C 3028 0030                  		move.w	$30(a0),d0
0000C840 E640                       		asr.w	#3,d0
0000C842 3140 0010                  		move.w	d0,$10(a0)
0000C846 117C 0001 0032             		move.b	#1,$32(a0)
0000C84C 4268 000E                  		clr.w	$E(a0)
0000C850                            
0000C850                            loc_C09E:
0000C850 6000                       		bra.s	loc_C0E6
0000C852                            ; ===========================================================================
0000C852                            
0000C852                            loc_C0A0:
0000C852 4A68 0010                  		tst.w	$10(a0)
0000C856 6700 0000                  		beq.w	loc_C0D6
0000C85A 6B00                       		bmi.s	loc_C0BC
0000C85C 7600                       		moveq	#0,d3
0000C85E 1628 0019                  		move.b	$19(a0),d3
0000C862 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C868 4A41                       		tst.w	d1		; has block touched a wall?
0000C86A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C86C 6000                       		bra.s	loc_C0E6
0000C86E                            ; ===========================================================================
0000C86E                            
0000C86E                            loc_C0BC:
0000C86E 7600                       		moveq	#0,d3
0000C870 1628 0019                  		move.b	$19(a0),d3
0000C874 4643                       		not.w	d3
0000C876 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C87C 4A41                       		tst.w	d1		; has block touched a wall?
0000C87E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C880 6000                       		bra.s	loc_C0E6
0000C882                            ; ===========================================================================
0000C882                            
0000C882                            Obj33_StopPush:
0000C882 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C886 6000                       		bra.s	loc_C0E6
0000C888                            ; ===========================================================================
0000C888                            
0000C888                            loc_C0D6:
0000C888 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C890 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C896 6400                       		bcc.s	loc_C104
0000C898                            
0000C898                            loc_C0E6:
0000C898 7200                       		moveq	#0,d1
0000C89A 1228 0019                  		move.b	$19(a0),d1
0000C89E 0641 000B                  		addi.w	#$B,d1
0000C8A2 343C 0010                  		move.w	#$10,d2
0000C8A6 363C 0011                  		move.w	#$11,d3
0000C8AA 381F                       		move.w	(sp)+,d4
0000C8AC 6100 0000                  		bsr.w	loc_C186
0000C8B0 6100                       		bsr.s	Obj33_ChkLava
0000C8B2 6000 FEC4                  		bra.w	loc_BFC6
0000C8B6                            ; ===========================================================================
0000C8B6                            
0000C8B6                            loc_C104:
0000C8B6 381F                       		move.w	(sp)+,d4
0000C8B8 43F8 D000                  		lea	($FFFFD000).w,a1
0000C8BC 08A9 0003 0022             		bclr	#3,$22(a1)
0000C8C2 08A8 0003 0022             		bclr	#3,$22(a0)
0000C8C8 6000 FECE                  		bra.w	loc_BFE6
0000C8CC                            ; ===========================================================================
0000C8CC                            
0000C8CC                            Obj33_ChkLava:
0000C8CC 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C8D2 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C8D4 343C FFE0                  		move.w	#-$20,d2
0000C8D8 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C8DE 6700                       		beq.s	Obj33_LoadLava
0000C8E0 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C8E6 6700                       		beq.s	Obj33_LoadLava
0000C8E8 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C8EE 6700                       		beq.s	Obj33_LoadLava
0000C8F0 4E75                       		rts	
0000C8F2                            ; ===========================================================================
0000C8F2                            
0000C8F2                            Obj33_ChkLava2:
0000C8F2 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C8F8 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C8FA 343C 0020                  		move.w	#$20,d2
0000C8FE 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C904 6700                       		beq.s	Obj33_LoadLava
0000C906 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C90C 6700                       		beq.s	Obj33_LoadLava
0000C90E                            
0000C90E                            Obj33_NoLava:
0000C90E 4E75                       		rts	
0000C910                            ; ===========================================================================
0000C910                            
0000C910                            Obj33_LoadLava:
0000C910 6100 0000                  		bsr.w	SingleObjLoad
0000C914 6600                       		bne.s	locret_C184
0000C916 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C91A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C920 D569 0008                  		add.w	d2,8(a1)
0000C924 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C92A 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C930 2348 003C                  		move.l	a0,$3C(a1)
0000C934                            
0000C934                            locret_C184:
0000C934 4E75                       		rts	
0000C936                            ; ===========================================================================
0000C936                            
0000C936                            loc_C186:				; XREF: loc_BF6E
0000C936 1028 0025                  		move.b	$25(a0),d0
0000C93A 6700 0000                  		beq.w	loc_C218
0000C93E 5500                       		subq.b	#2,d0
0000C940 6600                       		bne.s	loc_C1AA
0000C942 6100 B312                  		bsr.w	ExitPlatform
0000C946 0829 0003 0022             		btst	#3,$22(a1)
0000C94C 6600                       		bne.s	loc_C1A4
0000C94E 4228 0025                  		clr.b	$25(a0)
0000C952 4E75                       		rts	
0000C954                            ; ===========================================================================
0000C954                            
0000C954                            loc_C1A4:
0000C954 3404                       		move.w	d4,d2
0000C956 6000 B85C                  		bra.w	MvSonicOnPtfm
0000C95A                            ; ===========================================================================
0000C95A                            
0000C95A                            loc_C1AA:
0000C95A 5500                       		subq.b	#2,d0
0000C95C 6600                       		bne.s	loc_C1F2
0000C95E 6100 0000                  		bsr.w	SpeedToPos
0000C962 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C968 4EB9 0000 0000             		jsr	ObjHitFloor
0000C96E 4A41                       		tst.w	d1
0000C970 6A00 0000                  		bpl.w	locret_C1F0
0000C974 D368 000C                  		add.w	d1,$C(a0)
0000C978 4268 0012                  		clr.w	$12(a0)
0000C97C 4228 0025                  		clr.b	$25(a0)
0000C980 3011                       		move.w	(a1),d0
0000C982 0240 03FF                  		andi.w	#$3FF,d0
0000C986 0C40 016A                  		cmpi.w	#$16A,d0
0000C98A 6500                       		bcs.s	locret_C1F0
0000C98C 3028 0030                  		move.w	$30(a0),d0
0000C990 E640                       		asr.w	#3,d0
0000C992 3140 0010                  		move.w	d0,$10(a0)
0000C996 117C 0001 0032             		move.b	#1,$32(a0)
0000C99C 4268 000E                  		clr.w	$E(a0)
0000C9A0                            
0000C9A0                            locret_C1F0:
0000C9A0 4E75                       		rts	
0000C9A2                            ; ===========================================================================
0000C9A2                            
0000C9A2                            loc_C1F2:
0000C9A2 6100 0000                  		bsr.w	SpeedToPos
0000C9A6 3028 0008                  		move.w	8(a0),d0
0000C9AA 0240 000C                  		andi.w	#$C,d0
0000C9AE 6600 0000                  		bne.w	locret_C2E4
0000C9B2 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C9B8 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C9BE 4268 0010                  		clr.w	$10(a0)
0000C9C2 5528 0025                  		subq.b	#2,$25(a0)
0000C9C6 4E75                       		rts	
0000C9C8                            ; ===========================================================================
0000C9C8                            
0000C9C8                            loc_C218:
0000C9C8 6100 0000                  		bsr.w	loc_FAC8
0000C9CC 4A44                       		tst.w	d4
0000C9CE 6700 0000                  		beq.w	locret_C2E4
0000C9D2 6B00 0000                  		bmi.w	locret_C2E4
0000C9D6 4A28 0032                  		tst.b	$32(a0)
0000C9DA 6700                       		beq.s	loc_C230
0000C9DC 6000 0000                  		bra.w	locret_C2E4
0000C9E0                            ; ===========================================================================
0000C9E0                            
0000C9E0                            loc_C230:
0000C9E0 4A40                       		tst.w	d0
0000C9E2 6700 0000                  		beq.w	locret_C2E4
0000C9E6 6B00                       		bmi.s	loc_C268
0000C9E8 0829 0000 0022             		btst	#0,$22(a1)
0000C9EE 6600 0000                  		bne.w	locret_C2E4
0000C9F2 3F00                       		move.w	d0,-(sp)
0000C9F4 7600                       		moveq	#0,d3
0000C9F6 1628 0019                  		move.b	$19(a0),d3
0000C9FA 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CA00 301F                       		move.w	(sp)+,d0
0000CA02 4A41                       		tst.w	d1
0000CA04 6B00 0000                  		bmi.w	locret_C2E4
0000CA08 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CA10 7001                       		moveq	#1,d0
0000CA12 323C 0040                  		move.w	#$40,d1
0000CA16 6000                       		bra.s	loc_C294
0000CA18                            ; ===========================================================================
0000CA18                            
0000CA18                            loc_C268:
0000CA18 0829 0000 0022             		btst	#0,$22(a1)
0000CA1E 6700                       		beq.s	locret_C2E4
0000CA20 3F00                       		move.w	d0,-(sp)
0000CA22 7600                       		moveq	#0,d3
0000CA24 1628 0019                  		move.b	$19(a0),d3
0000CA28 4643                       		not.w	d3
0000CA2A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CA30 301F                       		move.w	(sp)+,d0
0000CA32 4A41                       		tst.w	d1
0000CA34 6B00                       		bmi.s	locret_C2E4
0000CA36 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CA3E 70FF                       		moveq	#-1,d0
0000CA40 323C FFC0                  		move.w	#-$40,d1
0000CA44                            
0000CA44                            loc_C294:
0000CA44 43F8 D000                  		lea	($FFFFD000).w,a1
0000CA48 D169 0008                  		add.w	d0,8(a1)
0000CA4C 3341 0014                  		move.w	d1,$14(a1)
0000CA50 337C 0000 0010             		move.w	#0,$10(a1)
0000CA56 3F00                       		move.w	d0,-(sp)
0000CA58 303C 00A7                  		move.w	#$A7,d0
0000CA5C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CA62 301F                       		move.w	(sp)+,d0
0000CA64 4A28 0028                  		tst.b	$28(a0)
0000CA68 6B00                       		bmi.s	locret_C2E4
0000CA6A 3F00                       		move.w	d0,-(sp)
0000CA6C 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA72 301F                       		move.w	(sp)+,d0
0000CA74 0C41 0004                  		cmpi.w	#4,d1
0000CA78 6F00                       		ble.s	loc_C2E0
0000CA7A 317C 0400 0010             		move.w	#$400,$10(a0)
0000CA80 4A40                       		tst.w	d0
0000CA82 6A00                       		bpl.s	loc_C2D8
0000CA84 4468 0010                  		neg.w	$10(a0)
0000CA88                            
0000CA88                            loc_C2D8:
0000CA88 117C 0006 0025             		move.b	#6,$25(a0)
0000CA8E 6000                       		bra.s	locret_C2E4
0000CA90                            ; ===========================================================================
0000CA90                            
0000CA90                            loc_C2E0:
0000CA90 D368 000C                  		add.w	d1,$C(a0)
0000CA94                            
0000CA94                            locret_C2E4:
0000CA94 4E75                       		rts	
0000CA96                            ; ===========================================================================
0000CA96                            ; ---------------------------------------------------------------------------
0000CA96                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA96                            ; ---------------------------------------------------------------------------
0000CA96                            Map_obj33:
0000CA96                            	include "_maps\obj33.asm"
0000CA96                            ; ---------------------------------------------------------------------------
0000CA96                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA96                            ; ---------------------------------------------------------------------------
0000CA96 0000                       		dc.w byte_C2EA-Map_obj33
0000CA98 0000                       		dc.w byte_C2F0-Map_obj33
0000CA9A 01                         byte_C2EA:	dc.b 1
0000CA9B F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CAA0 04                         byte_C2F0:	dc.b 4
0000CAA1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CAA6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CAAB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CAB0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CAB6 00                         		even
0000CAB6 00                         		even
0000CAB6                            
0000CAB6                            ; ===========================================================================
0000CAB6                            ; ---------------------------------------------------------------------------
0000CAB6                            ; Object 34 - zone title cards
0000CAB6                            ; ---------------------------------------------------------------------------
0000CAB6                            
0000CAB6                            Obj34:					; XREF: Obj_Index
0000CAB6 7000                       		moveq	#0,d0
0000CAB8 1028 0024                  		move.b	$24(a0),d0
0000CABC 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CAC0 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CAC4                            ; ===========================================================================
0000CAC4 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CAC6 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CAC8 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CACA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CACC                            ; ===========================================================================
0000CACC                            
0000CACC                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CACC 2248                       		movea.l	a0,a1
0000CACE 7000                       		moveq	#0,d0
0000CAD0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CAD4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CADA 6600                       		bne.s	Obj34_CheckFZ
0000CADC 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CADE                            
0000CADE                            Obj34_CheckFZ:
0000CADE 3400                       		move.w	d0,d2
0000CAE0 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CAE6 6600                       		bne.s	Obj34_LoadConfig
0000CAE8 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CAEA 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CAEC                            
0000CAEC                            Obj34_LoadConfig:
0000CAEC 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CAF2 E948                       		lsl.w	#4,d0
0000CAF4 D6C0                       		adda.w	d0,a3
0000CAF6 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CAFC 7203                       		moveq	#3,d1
0000CAFE                            
0000CAFE                            Obj34_Loop:
0000CAFE 12BC 0034                  		move.b	#$34,0(a1)
0000CB02 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CB06 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CB0A 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CB0E 335A 000A                  		move.w	(a2)+,$A(a1)
0000CB12 135A 0024                  		move.b	(a2)+,$24(a1)
0000CB16 101A                       		move.b	(a2)+,d0
0000CB18 6600                       		bne.s	Obj34_ActNumber
0000CB1A 1002                       		move.b	d2,d0
0000CB1C                            
0000CB1C                            Obj34_ActNumber:
0000CB1C 0C00 0007                  		cmpi.b	#7,d0
0000CB20 6600                       		bne.s	Obj34_MakeSprite
0000CB22 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CB26 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CB2C 6600                       		bne.s	Obj34_MakeSprite
0000CB2E 5300                       		subq.b	#1,d0
0000CB30                            
0000CB30                            Obj34_MakeSprite:
0000CB30 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CB34 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CB3C 337C 8580 0002             		move.w	#$8580,2(a1)
0000CB42 137C 0078 0019             		move.b	#$78,$19(a1)
0000CB48 137C 0000 0001             		move.b	#0,1(a1)
0000CB4E 137C 0000 0018             		move.b	#0,$18(a1)
0000CB54 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CB5A 43E9 0040                  		lea	$40(a1),a1	; next object
0000CB5E 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CB62                            
0000CB62                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CB62 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB64 3028 0030                  		move.w	$30(a0),d0
0000CB68 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CB6C 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CB6E 6C00                       		bge.s	Obj34_Move
0000CB70 4441                       		neg.w	d1
0000CB72                            
0000CB72                            Obj34_Move:
0000CB72 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB76                            
0000CB76                            loc_C3C8:
0000CB76 3028 0008                  		move.w	8(a0),d0
0000CB7A 6B00                       		bmi.s	locret_C3D8
0000CB7C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB80 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CB82 6000 0000                  		bra.w	DisplaySprite
0000CB86                            ; ===========================================================================
0000CB86                            
0000CB86                            locret_C3D8:
0000CB86 4E75                       		rts	
0000CB88                            ; ===========================================================================
0000CB88                            
0000CB88                            Obj34_Wait:				; XREF: Obj34_Index
0000CB88 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CB8C 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CB8E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CB92 6000 0000                  		bra.w	DisplaySprite
0000CB96                            ; ===========================================================================
0000CB96                            
0000CB96                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CB96 4A28 0001                  		tst.b	1(a0)
0000CB9A 6A00                       		bpl.s	Obj34_ChangeArt
0000CB9C 7220                       		moveq	#$20,d1
0000CB9E 3028 0032                  		move.w	$32(a0),d0
0000CBA2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CBA6 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CBA8 6C00                       		bge.s	Obj34_Move2
0000CBAA 4441                       		neg.w	d1
0000CBAC                            
0000CBAC                            Obj34_Move2:
0000CBAC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CBB0 3028 0008                  		move.w	8(a0),d0
0000CBB4 6B00                       		bmi.s	locret_C412
0000CBB6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CBBA 6400                       		bcc.s	locret_C412	; if yes, branch
0000CBBC 6000 0000                  		bra.w	DisplaySprite
0000CBC0                            ; ===========================================================================
0000CBC0                            
0000CBC0                            locret_C412:
0000CBC0 4E75                       		rts	
0000CBC2                            ; ===========================================================================
0000CBC2                            
0000CBC2                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CBC2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CBC8 6600                       		bne.s	Obj34_Delete
0000CBCA 7002                       		moveq	#2,d0
0000CBCC 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load explosion patterns
0000CBD2 7000                       		moveq	#0,d0
0000CBD4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CBD8 0640 0015                  		addi.w	#$15,d0
0000CBDC 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load animal patterns
0000CBE2                            
0000CBE2                            Obj34_Delete:
0000CBE2 6000 0000                  		bra.w	DeleteObject
0000CBE6                            ; ===========================================================================
0000CBE6 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CBE8 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CBEA 00E4                       		dc.w $E4
0000CBEC 0206                       		dc.b 2,	6
0000CBEE 00EA                       		dc.w $EA
0000CBF0 0207                       		dc.b 2,	7
0000CBF2 00E0                       		dc.w $E0
0000CBF4 020A                       		dc.b 2,	$A
0000CBF6                            ; ---------------------------------------------------------------------------
0000CBF6                            ; Title	card configuration data
0000CBF6                            ; Format:
0000CBF6                            ; 4 bytes per item (YYYY XXXX)
0000CBF6                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CBF6                            ; ---------------------------------------------------------------------------
0000CBF6 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CC06 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CC16 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CC26 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CC36 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CC46 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CC56 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CC66                            ; ===========================================================================
0000CC66                            ; ---------------------------------------------------------------------------
0000CC66                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CC66                            ; ---------------------------------------------------------------------------
0000CC66                            
0000CC66                            Obj39:					; XREF: Obj_Index
0000CC66 7000                       		moveq	#0,d0
0000CC68 1028 0024                  		move.b	$24(a0),d0
0000CC6C 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CC70 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CC74                            ; ===========================================================================
0000CC74 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CC76 0000                       		dc.w loc_C50C-Obj39_Index
0000CC78 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CC7A                            ; ===========================================================================
0000CC7A                            
0000CC7A                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CC7A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC7E 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CC80 4E75                       		rts	
0000CC82                            ; ===========================================================================
0000CC82                            
0000CC82                            Obj39_Main:
0000CC82 5428 0024                  		addq.b	#2,$24(a0)
0000CC86 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CC8C 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CC92 6700                       		beq.s	loc_C4EC	; if not, branch
0000CC94 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CC9A                            
0000CC9A                            loc_C4EC:
0000CC9A 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CCA0 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CCA8 317C 855E 0002             		move.w	#$855E,2(a0)
0000CCAE 117C 0000 0001             		move.b	#0,1(a0)
0000CCB4 117C 0000 0018             		move.b	#0,$18(a0)
0000CCBA                            
0000CCBA                            loc_C50C:				; XREF: Obj39_Index
0000CCBA 7210                       		moveq	#$10,d1		; set horizontal speed
0000CCBC 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CCC2 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CCC4 6500                       		bcs.s	Obj39_Move
0000CCC6 4441                       		neg.w	d1
0000CCC8                            
0000CCC8                            Obj39_Move:
0000CCC8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCCC 6000 0000                  		bra.w	DisplaySprite
0000CCD0                            ; ===========================================================================
0000CCD0                            
0000CCD0                            Obj39_SetWait:				; XREF: Obj39_Main
0000CCD0 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CCD6 5428 0024                  		addq.b	#2,$24(a0)
0000CCDA 4E75                       		rts	
0000CCDC                            ; ===========================================================================
0000CCDC                            
0000CCDC                            Obj39_Wait:				; XREF: Obj39_Index
0000CCDC 1038 F605                  		move.b	($FFFFF605).w,d0
0000CCE0 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CCE4 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CCE6 0828 0000 001A             		btst	#0,$1A(a0)
0000CCEC 6600                       		bne.s	Obj39_Display
0000CCEE 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CCF2 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CCF4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CCF8 6000 0000                  		bra.w	DisplaySprite
0000CCFC                            ; ===========================================================================
0000CCFC                            
0000CCFC                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CCFC 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CD00 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CD02 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CD08 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CD0C 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CD0E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CD14 6000                       		bra.s	Obj39_Display
0000CD16                            ; ===========================================================================
0000CD16                            
0000CD16                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CD16 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CD1C                            
0000CD1C                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CD1C 6000 0000                  		bra.w	DisplaySprite
0000CD20                            ; ===========================================================================
0000CD20                            ; ---------------------------------------------------------------------------
0000CD20                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CD20                            ; ---------------------------------------------------------------------------
0000CD20                            
0000CD20                            Obj3A:					; XREF: Obj_Index
0000CD20 7000                       		moveq	#0,d0
0000CD22 1028 0024                  		move.b	$24(a0),d0
0000CD26 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CD2A 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CD2E                            ; ===========================================================================
0000CD2E 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CD30 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CD32 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CD34 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CD36 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CD38 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CD3A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CD3C 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CD3E 0000                       		dc.w loc_C766-Obj3A_Index
0000CD40                            ; ===========================================================================
0000CD40                            
0000CD40                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CD40 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CD44 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CD46 4E75                       		rts	
0000CD48                            ; ===========================================================================
0000CD48                            
0000CD48                            Obj3A_Main:
0000CD48 2248                       		movea.l	a0,a1
0000CD4A 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CD50 7206                       		moveq	#6,d1
0000CD52                            
0000CD52                            Obj3A_Loop:
0000CD52 12BC 003A                  		move.b	#$3A,0(a1)
0000CD56 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CD5A 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CD5E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CD62 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD66 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD6A 101A                       		move.b	(a2)+,d0
0000CD6C 0C00 0006                  		cmpi.b	#6,d0
0000CD70 6600                       		bne.s	loc_C5CA
0000CD72 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CD76                            
0000CD76                            loc_C5CA:
0000CD76 1340 001A                  		move.b	d0,$1A(a1)
0000CD7A 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CD82 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD88 137C 0000 0001             		move.b	#0,1(a1)
0000CD8E 43E9 0040                  		lea	$40(a1),a1
0000CD92 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CD96                            
0000CD96                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CD96 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD98 3028 0030                  		move.w	$30(a0),d0
0000CD9C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CDA0 6700                       		beq.s	loc_C61A	; if yes, branch
0000CDA2 6C00                       		bge.s	Obj3A_Move
0000CDA4 4441                       		neg.w	d1
0000CDA6                            
0000CDA6                            Obj3A_Move:
0000CDA6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CDAA                            
0000CDAA                            loc_C5FE:				; XREF: loc_C61A
0000CDAA 3028 0008                  		move.w	8(a0),d0
0000CDAE 6B00                       		bmi.s	locret_C60E
0000CDB0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CDB4 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CDB6 6000 0000                  		bra.w	DisplaySprite
0000CDBA                            ; ===========================================================================
0000CDBA                            
0000CDBA                            locret_C60E:
0000CDBA 4E75                       		rts	
0000CDBC                            ; ===========================================================================
0000CDBC                            
0000CDBC                            loc_C610:				; XREF: loc_C61A
0000CDBC 117C 000E 0024             		move.b	#$E,$24(a0)
0000CDC2 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CDC6                            ; ===========================================================================
0000CDC6                            
0000CDC6                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CDC6 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CDCC 67EE                       		beq.s	loc_C610
0000CDCE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CDD4 66D4                       		bne.s	loc_C5FE
0000CDD6 5428 0024                  		addq.b	#2,$24(a0)
0000CDDA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDE0                            
0000CDE0                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CDE0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CDE4 6600                       		bne.s	Obj3A_Display
0000CDE6 5428 0024                  		addq.b	#2,$24(a0)
0000CDEA                            
0000CDEA                            Obj3A_Display:
0000CDEA 6000 0000                  		bra.w	DisplaySprite
0000CDEE                            ; ===========================================================================
0000CDEE                            
0000CDEE                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CDEE 6100 0000                  		bsr.w	DisplaySprite
0000CDF2 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CDF8 7000                       		moveq	#0,d0
0000CDFA 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CDFE 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CE00 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CE04 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CE0A                            
0000CE0A                            Obj3A_RingBonus:
0000CE0A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CE0E 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CE10 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CE14 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CE1A                            
0000CE1A                            Obj3A_ChkBonus:
0000CE1A 4A40                       		tst.w	d0		; is there any bonus?
0000CE1C 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CE1E 303C 00C5                  		move.w	#$C5,d0
0000CE22 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CE28 5428 0024                  		addq.b	#2,$24(a0)
0000CE2C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CE32 6600                       		bne.s	Obj3A_SetDelay
0000CE34 5828 0024                  		addq.b	#4,$24(a0)
0000CE38                            
0000CE38                            Obj3A_SetDelay:
0000CE38 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CE3E                            
0000CE3E                            locret_C692:
0000CE3E 4E75                       		rts	
0000CE40                            ; ===========================================================================
0000CE40                            
0000CE40                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CE40 4EB9 0000 0000             		jsr	AddPoints
0000CE46 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE4A 0200 0003                  		andi.b	#3,d0
0000CE4E 66EE                       		bne.s	locret_C692
0000CE50 303C 00CD                  		move.w	#$CD,d0
0000CE54 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CE5A                            ; ===========================================================================
0000CE5A                            
0000CE5A                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CE5A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CE5E 0240 0007                  		andi.w	#7,d0
0000CE62 E748                       		lsl.w	#3,d0
0000CE64 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CE68 0241 0003                  		andi.w	#3,d1
0000CE6C D241                       		add.w	d1,d1
0000CE6E D041                       		add.w	d1,d0
0000CE70 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CE74 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CE78 4A40                       		tst.w	d0
0000CE7A 6600                       		bne.s	Obj3A_ChkSS
0000CE7C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CE82 6000                       		bra.s	Obj3A_Display2
0000CE84                            ; ===========================================================================
0000CE84                            
0000CE84                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CE84 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CE88 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CE8C 6700                       		beq.s	loc_C6EA	; if not, branch
0000CE8E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CE94 6000                       		bra.s	Obj3A_Display2
0000CE96                            ; ===========================================================================
0000CE96                            
0000CE96                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CE96 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE9C                            
0000CE9C                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CE9C 6000 0000                  		bra.w	DisplaySprite
0000CEA0                            ; ===========================================================================
0000CEA0                            ; ---------------------------------------------------------------------------
0000CEA0                            ; Level	order array
0000CEA0                            ; ---------------------------------------------------------------------------
0000CEA0                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CED0                            		even
0000CED0                            ; ===========================================================================
0000CED0                            
0000CED0                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CED0 7220                       		moveq	#$20,d1		; set horizontal speed
0000CED2 3028 0032                  		move.w	$32(a0),d0
0000CED6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CEDA 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CEDC 6C00                       		bge.s	Obj3A_Move2
0000CEDE 4441                       		neg.w	d1
0000CEE0                            
0000CEE0                            Obj3A_Move2:
0000CEE0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CEE4 3028 0008                  		move.w	8(a0),d0
0000CEE8 6B00                       		bmi.s	locret_C748
0000CEEA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CEEE 6400                       		bcc.s	locret_C748	; if yes, branch
0000CEF0 6000 0000                  		bra.w	DisplaySprite
0000CEF4                            ; ===========================================================================
0000CEF4                            
0000CEF4                            locret_C748:
0000CEF4 4E75                       		rts	
0000CEF6                            ; ===========================================================================
0000CEF6                            
0000CEF6                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CEF6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CEFC 6600 0000                  		bne.w	DeleteObject
0000CF00 5428 0024                  		addq.b	#2,$24(a0)
0000CF04 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CF08 303C 008D                  		move.w	#$8D,d0
0000CF0C 4EF9 0000 15CC             		jmp	(PlaySound).l	; play FZ music
0000CF12                            ; ===========================================================================
0000CF12                            
0000CF12                            loc_C766:				; XREF: Obj3A_Index
0000CF12 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CF16 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CF1C 6700 0000                  		beq.w	DeleteObject
0000CF20 4E75                       		rts	
0000CF22                            ; ===========================================================================
0000CF22 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CF28 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CF2A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CF30 0201                       		dc.b 2,	1
0000CF32 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CF38 0206                       		dc.b 2,	6
0000CF3A 0520 0120 00EC             		dc.w $520, $120, $EC
0000CF40 0202                       		dc.b 2,	2
0000CF42 0540 0120 00FC             		dc.w $540, $120, $FC
0000CF48 0203                       		dc.b 2,	3
0000CF4A 0560 0120 010C             		dc.w $560, $120, $10C
0000CF50 0204                       		dc.b 2,	4
0000CF52 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CF58 0205                       		dc.b 2,	5
0000CF5A                            ; ===========================================================================
0000CF5A                            ; ---------------------------------------------------------------------------
0000CF5A                            ; Object 7E - special stage results screen
0000CF5A                            ; ---------------------------------------------------------------------------
0000CF5A                            
0000CF5A                            Obj7E:					; XREF: Obj_Index
0000CF5A 7000                       		moveq	#0,d0
0000CF5C 1028 0024                  		move.b	$24(a0),d0
0000CF60 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CF64 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CF68                            ; ===========================================================================
0000CF68 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CF6A 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CF6C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF6E 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CF70 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF72 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF74 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF76 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CF78 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF7A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF7C 0000                       		dc.w loc_C91A-Obj7E_Index
0000CF7E                            ; ===========================================================================
0000CF7E                            
0000CF7E                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CF7E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CF82 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CF84 4E75                       		rts	
0000CF86                            ; ===========================================================================
0000CF86                            
0000CF86                            Obj7E_Main:
0000CF86 2248                       		movea.l	a0,a1
0000CF88 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CF8E 7203                       		moveq	#3,d1
0000CF90 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CF96 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CF98 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CF9A                            
0000CF9A                            Obj7E_Loop:
0000CF9A 12BC 007E                  		move.b	#$7E,0(a1)
0000CF9E 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CFA2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CFA6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CFAA 135A 0024                  		move.b	(a2)+,$24(a1)
0000CFAE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CFB2 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CFBA 337C 8580 0002             		move.w	#$8580,2(a1)
0000CFC0 137C 0000 0001             		move.b	#0,1(a1)
0000CFC6 43E9 0040                  		lea	$40(a1),a1
0000CFCA 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CFCE                            
0000CFCE 7007                       		moveq	#7,d0
0000CFD0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CFD4 6700                       		beq.s	loc_C842
0000CFD6 7000                       		moveq	#0,d0
0000CFD8 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CFDC 6600                       		bne.s	loc_C842	; if not, branch
0000CFDE 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CFE0 317C 0018 0008             		move.w	#$18,8(a0)
0000CFE6 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CFEC                            
0000CFEC                            loc_C842:
0000CFEC 1140 001A                  		move.b	d0,$1A(a0)
0000CFF0                            
0000CFF0                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CFF0 7210                       		moveq	#$10,d1		; set horizontal speed
0000CFF2 3028 0030                  		move.w	$30(a0),d0
0000CFF6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CFFA 6700                       		beq.s	loc_C86C	; if yes, branch
0000CFFC 6C00                       		bge.s	Obj7E_Move
0000CFFE 4441                       		neg.w	d1
0000D000                            
0000D000                            Obj7E_Move:
0000D000 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D004                            
0000D004                            loc_C85A:				; XREF: loc_C86C
0000D004 3028 0008                  		move.w	8(a0),d0
0000D008 6B00                       		bmi.s	locret_C86A
0000D00A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D00E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D010 6000 0000                  		bra.w	DisplaySprite
0000D014                            ; ===========================================================================
0000D014                            
0000D014                            locret_C86A:
0000D014 4E75                       		rts	
0000D016                            ; ===========================================================================
0000D016                            
0000D016                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D016 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D01C 66E6                       		bne.s	loc_C85A
0000D01E 5428 0024                  		addq.b	#2,$24(a0)
0000D022 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D028 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D02E                            
0000D02E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D02E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D032 6600                       		bne.s	Obj7E_Display
0000D034 5428 0024                  		addq.b	#2,$24(a0)
0000D038                            
0000D038                            Obj7E_Display:
0000D038 6000 0000                  		bra.w	DisplaySprite
0000D03C                            ; ===========================================================================
0000D03C                            
0000D03C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D03C 6100 0000                  		bsr.w	DisplaySprite
0000D040 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D046 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D04A 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D04C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D052 700A                       		moveq	#10,d0		; add 10 to score
0000D054 4EB9 0000 0000             		jsr	AddPoints
0000D05A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D05E 0200 0003                  		andi.b	#3,d0
0000D062 6600                       		bne.s	locret_C8EA
0000D064 303C 00CD                  		move.w	#$CD,d0
0000D068 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D06E                            ; ===========================================================================
0000D06E                            
0000D06E                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D06E 303C 00C5                  		move.w	#$C5,d0
0000D072 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D078 5428 0024                  		addq.b	#2,$24(a0)
0000D07C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D082 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D088 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D08A 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D090 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D094                            
0000D094                            locret_C8EA:
0000D094 4E75                       		rts	
0000D096                            ; ===========================================================================
0000D096                            
0000D096                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D096 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D09C 6000 0000                  		bra.w	DisplaySprite
0000D0A0                            ; ===========================================================================
0000D0A0                            
0000D0A0                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D0A0 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D0A6 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D0AC 303C 00BF                  		move.w	#$BF,d0
0000D0B0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play continues music
0000D0B6 5428 0024                  		addq.b	#2,$24(a0)
0000D0BA 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D0C0 6000 0000                  		bra.w	DisplaySprite
0000D0C4                            ; ===========================================================================
0000D0C4                            
0000D0C4                            loc_C91A:				; XREF: Obj7E_Index
0000D0C4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D0C8 0200 000F                  		andi.b	#$F,d0
0000D0CC 6600                       		bne.s	Obj7E_Display2
0000D0CE 0868 0000 001A             		bchg	#0,$1A(a0)
0000D0D4                            
0000D0D4                            Obj7E_Display2:
0000D0D4 6000 0000                  		bra.w	DisplaySprite
0000D0D8                            ; ===========================================================================
0000D0D8 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D0DE 0200                       		dc.b 2,	0		; rountine number, frame number
0000D0E0 0320 0120 0118             		dc.w $320, $120, $118
0000D0E6 0201                       		dc.b 2,	1
0000D0E8 0360 0120 0128             		dc.w $360, $120, $128
0000D0EE 0202                       		dc.b 2,	2
0000D0F0 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D0F6 0203                       		dc.b 2,	3
0000D0F8 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D0FE 0206                       		dc.b 2,	6
0000D100                            ; ===========================================================================
0000D100                            ; ---------------------------------------------------------------------------
0000D100                            ; Object 7F - chaos emeralds from the special stage results screen
0000D100                            ; ---------------------------------------------------------------------------
0000D100                            
0000D100                            Obj7F:					; XREF: Obj_Index
0000D100 7000                       		moveq	#0,d0
0000D102 1028 0024                  		move.b	$24(a0),d0
0000D106 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D10A 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D10E                            ; ===========================================================================
0000D10E 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D110 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D112                            
0000D112                            ; ---------------------------------------------------------------------------
0000D112                            ; X-axis positions for chaos emeralds
0000D112                            ; ---------------------------------------------------------------------------
0000D112 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D11E                            ; ===========================================================================
0000D11E                            
0000D11E                            Obj7F_Main:				; XREF: Obj7F_Index
0000D11E 2248                       		movea.l	a0,a1
0000D120 45F9 0000 D112             		lea	(Obj7F_PosData).l,a2
0000D126 7400                       		moveq	#0,d2
0000D128 7200                       		moveq	#0,d1
0000D12A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D12E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D130 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D134                            
0000D134                            Obj7F_Loop:
0000D134 12BC 007F                  		move.b	#$7F,0(a1)
0000D138 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D13C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D142 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D146 1633 2000                  		move.b	(a3,d2.w),d3
0000D14A 1343 001A                  		move.b	d3,$1A(a1)
0000D14E 1343 001C                  		move.b	d3,$1C(a1)
0000D152 5202                       		addq.b	#1,d2
0000D154 5429 0024                  		addq.b	#2,$24(a1)
0000D158 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D160 337C 8541 0002             		move.w	#$8541,2(a1)
0000D166 137C 0000 0001             		move.b	#0,1(a1)
0000D16C 43E9 0040                  		lea	$40(a1),a1	; next object
0000D170 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D174                            
0000D174                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D174 1028 001A                  		move.b	$1A(a0),d0
0000D178 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D17E 0C00 0006                  		cmpi.b	#6,d0
0000D182 6600                       		bne.s	Obj7F_Display
0000D184 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D18A                            
0000D18A                            Obj7F_Display:
0000D18A 6000 0000                  		bra.w	DisplaySprite
0000D18E                            ; ===========================================================================
0000D18E                            ; ---------------------------------------------------------------------------
0000D18E                            ; Sprite mappings - zone title cards
0000D18E                            ; ---------------------------------------------------------------------------
0000D18E 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D190 0000                       		dc.w byte_CA2C-Map_obj34
0000D192 0000                       		dc.w byte_CA5A-Map_obj34
0000D194 0000                       		dc.w byte_CA7A-Map_obj34
0000D196 0000                       		dc.w byte_CAA8-Map_obj34
0000D198 0000                       		dc.w byte_CADC-Map_obj34
0000D19A 0000                       		dc.w byte_CB10-Map_obj34
0000D19C 0000                       		dc.w byte_CB26-Map_obj34
0000D19E 0000                       		dc.w byte_CB31-Map_obj34
0000D1A0 0000                       		dc.w byte_CB3C-Map_obj34
0000D1A2 0000                       		dc.w byte_CB47-Map_obj34
0000D1A4 0000                       		dc.w byte_CB8A-Map_obj34
0000D1A6 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000D1A7 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000D1AC F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000D1B1 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000D1B6 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000D1BB F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000D1C0 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000D1C5 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000D1CA F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000D1CF F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000D1D4 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000D1D9 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000D1DE F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000D1E3 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000D1E4 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000D1E9 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000D1EE F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000D1F3 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000D1F8 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000D1FD F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000D202 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D207 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000D20C F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000D211 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000D216 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000D21B F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000D220 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000D225 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000D22A F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000D22F F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000D234 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000D239 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000D23E F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000D243 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000D248 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000D24D F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000D252 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000D253 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000D258 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000D25D F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D262 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D267 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D26C 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D26D F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D272 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D277 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D27C F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D281 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D286 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D28B F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D290 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D295 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D29A F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D29F F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D2A4 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D2A9 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D2AE F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D2B3 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D2B8 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D2BD F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D2C2 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D2C3 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D2C8 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D2CD F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D2D2 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D2D7 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D2DC F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D2E1 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D2E6 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D2EB F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D2F0 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D2F5 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D2FA F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D2FF F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D304 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D309 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D30E F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D313 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D318 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D31D F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D322 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D327 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D32C 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D32D F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D332 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D337 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D33C F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D341 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D346 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D34B F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D350 04                         byte_CB10:	dc.b 4			; ZONE
0000D351 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D356 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D35B F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D360 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D365 00                         		dc.b 0
0000D366 02                         byte_CB26:	dc.b 2			; ACT 1
0000D367 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D36C F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D371 02                         byte_CB31:	dc.b 2			; ACT 2
0000D372 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D377 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D37C 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D37D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D382 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D387 0D                         byte_CB47:	dc.b $D			; Oval
0000D388 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D38D E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D392 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D397 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D39C 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D3A1 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D3A6 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D3AB FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D3B0 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D3B5 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D3BA FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D3BF 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D3C4 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D3C9 00                         		dc.b 0
0000D3CA 05                         byte_CB8A:	dc.b 5			; FINAL
0000D3CB F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D3D0 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D3D5 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D3DA F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D3DF F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D3E4                            		even
0000D3E4                            ; ---------------------------------------------------------------------------
0000D3E4                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D3E4                            ; ---------------------------------------------------------------------------
0000D3E4                            Map_obj39:
0000D3E4                            	include "_maps\obj39.asm"
0000D3E4                            ; ---------------------------------------------------------------------------
0000D3E4                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D3E4                            ; ---------------------------------------------------------------------------
0000D3E4 0000                       		dc.w byte_CBAC-Map_obj39
0000D3E6 0000                       		dc.w byte_CBB7-Map_obj39
0000D3E8 0000                       		dc.w byte_CBC2-Map_obj39
0000D3EA 0000                       		dc.w byte_CBCD-Map_obj39
0000D3EC 02                         byte_CBAC:	dc.b 2
0000D3ED F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D3F2 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D3F7 02                         byte_CBB7:	dc.b 2
0000D3F8 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D3FD F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D402 02                         byte_CBC2:	dc.b 2
0000D403 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D408 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D40D 02                         byte_CBCD:	dc.b 2
0000D40E F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D413 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D418                            		even
0000D418                            		even
0000D418                            
0000D418                            ; ---------------------------------------------------------------------------
0000D418                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D418                            ; ---------------------------------------------------------------------------
0000D418 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D41A 0000                       		dc.w byte_CC13-Map_obj3A
0000D41C 0000                       		dc.w byte_CC32-Map_obj3A
0000D41E 0000                       		dc.w byte_CC51-Map_obj3A
0000D420 0000                       		dc.w byte_CC75-Map_obj3A
0000D422 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D424 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D426 FF59                       		dc.w byte_CB31-Map_obj3A
0000D428 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D42A 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D42B F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D430 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D435 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D43A F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D43F F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D444 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D449 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D44E F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D453 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D458 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D45D F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D462 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D467 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D46C F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D471 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D476 06                         byte_CC13:	dc.b 6			; PASSED
0000D477 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D47C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D481 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D486 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D48B F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D490 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D495 06                         byte_CC32:	dc.b 6			; SCORE
0000D496 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D49B F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D4A0 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D4A5 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D4AA F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D4AF FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D4B4 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D4B5 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D4BA F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D4BF F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D4C4 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D4C9 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D4CE F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D4D3 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D4D8 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D4D9 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D4DE F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D4E3 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D4E8 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D4ED FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D4F2 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D4F7 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D4FC                            		even
0000D4FC                            ; ---------------------------------------------------------------------------
0000D4FC                            ; Sprite mappings - special stage results screen
0000D4FC                            ; ---------------------------------------------------------------------------
0000D4FC 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D4FE 0000                       		dc.w byte_CCEE-Map_obj7E
0000D500 0000                       		dc.w byte_CD0D-Map_obj7E
0000D502 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D504 0000                       		dc.w byte_CD31-Map_obj7E
0000D506 0000                       		dc.w byte_CD46-Map_obj7E
0000D508 0000                       		dc.w byte_CD5B-Map_obj7E
0000D50A 0000                       		dc.w byte_CD6B-Map_obj7E
0000D50C 0000                       		dc.w byte_CDA8-Map_obj7E
0000D50E 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D50F F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D514 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D519 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D51E F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D523 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D528 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D52D F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D532 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D537 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D53C F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D541 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D546 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D54B F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D550 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D551 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D556 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D55B F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D560 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D565 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D56A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D56F 07                         byte_CD0D:	dc.b 7
0000D570 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D575 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D57A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D57F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D584 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D589 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D58E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D593 04                         byte_CD31:	dc.b 4
0000D594 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D599 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D59E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D5A3 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D5A8 04                         byte_CD46:	dc.b 4
0000D5A9 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D5AE F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D5B3 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D5B8 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D5BD 03                         byte_CD5B:	dc.b 3
0000D5BE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D5C3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D5C8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D5CD 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D5CE F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D5D3 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D5D8 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D5DD F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D5E2 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D5E7 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D5EC F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D5F1 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D5F6 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D5FB F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D600 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D605 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D60A 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D60B F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D610 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D615 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D61A F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D61F F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D624 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D629 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D62E F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D633 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D638 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D63D F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D642 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D647 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D64C F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D651 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D656                            		even
0000D656                            ; ---------------------------------------------------------------------------
0000D656                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D656                            ; ---------------------------------------------------------------------------
0000D656                            Map_obj7F:
0000D656                            	include "_maps\obj7F.asm"
0000D656                            ; ---------------------------------------------------------------------------
0000D656                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D656                            ; ---------------------------------------------------------------------------
0000D656 0000                       		dc.w byte_CE02-Map_obj7F
0000D658 0000                       		dc.w byte_CE08-Map_obj7F
0000D65A 0000                       		dc.w byte_CE0E-Map_obj7F
0000D65C 0000                       		dc.w byte_CE14-Map_obj7F
0000D65E 0000                       		dc.w byte_CE1A-Map_obj7F
0000D660 0000                       		dc.w byte_CE20-Map_obj7F
0000D662 0000                       		dc.w byte_CE26-Map_obj7F
0000D664 01                         byte_CE02:	dc.b 1
0000D665 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D66A 01                         byte_CE08:	dc.b 1
0000D66B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D670 01                         byte_CE0E:	dc.b 1
0000D671 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D676 01                         byte_CE14:	dc.b 1
0000D677 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D67C 01                         byte_CE1A:	dc.b 1
0000D67D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D682 01                         byte_CE20:	dc.b 1
0000D683 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D688 00                         byte_CE26:	dc.b 0			; Blank frame
0000D68A 00                         		even
0000D68A 00                         		even
0000D68A                            
0000D68A                            ; ===========================================================================
0000D68A                            ; ---------------------------------------------------------------------------
0000D68A                            ; Object 36 - spikes
0000D68A                            ; ---------------------------------------------------------------------------
0000D68A                            
0000D68A                            Obj36:					; XREF: Obj_Index
0000D68A 7000                       		moveq	#0,d0
0000D68C 1028 0024                  		move.b	$24(a0),d0
0000D690 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D694 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D698                            ; ===========================================================================
0000D698 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D69A 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D69C                            
0000D69C 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D69E 0110                       		dc.b 1,	$10
0000D6A0 0204                       		dc.b 2,	4
0000D6A2 031C                       		dc.b 3,	$1C
0000D6A4 0440                       		dc.b 4,	$40
0000D6A6 0510                       		dc.b 5,	$10
0000D6A8                            ; ===========================================================================
0000D6A8                            
0000D6A8                            Obj36_Main:				; XREF: Obj36_Index
0000D6A8 5428 0024                  		addq.b	#2,$24(a0)
0000D6AC 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D6B4 317C 051B 0002             		move.w	#$51B,2(a0)
0000D6BA 0028 0004 0001             		ori.b	#4,1(a0)
0000D6C0 117C 0004 0018             		move.b	#4,$18(a0)
0000D6C6 1028 0028                  		move.b	$28(a0),d0
0000D6CA 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D6D0 0240 00F0                  		andi.w	#$F0,d0
0000D6D4 43F9 0000 D69C             		lea	(Obj36_Var).l,a1
0000D6DA E648                       		lsr.w	#3,d0
0000D6DC D2C0                       		adda.w	d0,a1
0000D6DE 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D6E2 1159 0019                  		move.b	(a1)+,$19(a0)
0000D6E6 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D6EC 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D6F2                            
0000D6F2                            Obj36_Solid:				; XREF: Obj36_Index
0000D6F2 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D6F6 343C 0004                  		move.w	#4,d2
0000D6FA 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D700 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D702 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D708 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D70A 343C 0014                  		move.w	#$14,d2
0000D70E                            
0000D70E                            ; Spikes types $1x and $5x face	sideways
0000D70E                            
0000D70E                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D70E 323C 001B                  		move.w	#$1B,d1
0000D712 3602                       		move.w	d2,d3
0000D714 5243                       		addq.w	#1,d3
0000D716 3828 0008                  		move.w	8(a0),d4
0000D71A 6100 0000                  		bsr.w	SolidObject
0000D71E 0828 0003 0022             		btst	#3,$22(a0)
0000D724 6600                       		bne.s	Obj36_Display
0000D726 0C44 0001                  		cmpi.w	#1,d4
0000D72A 6700                       		beq.s	Obj36_Hurt
0000D72C 6000                       		bra.s	Obj36_Display
0000D72E                            ; ===========================================================================
0000D72E                            
0000D72E                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D72E                            
0000D72E                            Obj36_Upright:				; XREF: Obj36_Solid
0000D72E 7200                       		moveq	#0,d1
0000D730 1228 0019                  		move.b	$19(a0),d1
0000D734 0641 000B                  		addi.w	#$B,d1
0000D738 343C 0010                  		move.w	#$10,d2
0000D73C 363C 0011                  		move.w	#$11,d3
0000D740 3828 0008                  		move.w	8(a0),d4
0000D744 6100 0000                  		bsr.w	SolidObject
0000D748 0828 0003 0022             		btst	#3,$22(a0)
0000D74E 6600                       		bne.s	Obj36_Hurt
0000D750 4A44                       		tst.w	d4
0000D752 6A00                       		bpl.s	Obj36_Display
0000D754                            
0000D754                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D754 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D758 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D75A 2F08                       		move.l	a0,-(sp)
0000D75C 2448                       		movea.l	a0,a2
0000D75E 41F8 D000                  		lea	($FFFFD000).w,a0
0000D762 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D768 6400                       		bcc.s	loc_CF20
0000D76A 2628 000C                  		move.l	$C(a0),d3
0000D76E 3028 0012                  		move.w	$12(a0),d0
0000D772 48C0                       		ext.l	d0
0000D774 E180                       		asl.l	#8,d0
0000D776 9680                       		sub.l	d0,d3
0000D778 2143 000C                  		move.l	d3,$C(a0)
0000D77C 4EB9 0000 0000             		jsr	HurtSonic
0000D782                            
0000D782                            loc_CF20:
0000D782 205F                       		movea.l	(sp)+,a0
0000D784                            
0000D784                            Obj36_Display:
0000D784 6100 0000                  		bsr.w	DisplaySprite
0000D788 3028 0030                  		move.w	$30(a0),d0
0000D78C 0240 FF80                  		andi.w	#$FF80,d0
0000D790 3238 F700                  		move.w	($FFFFF700).w,d1
0000D794 0441 0080                  		subi.w	#$80,d1
0000D798 0241 FF80                  		andi.w	#$FF80,d1
0000D79C 9041                       		sub.w	d1,d0
0000D79E 0C40 0280                  		cmpi.w	#$280,d0
0000D7A2 6200 0000                  		bhi.w	DeleteObject
0000D7A6 4E75                       		rts	
0000D7A8                            ; ===========================================================================
0000D7A8                            
0000D7A8                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D7A8 7000                       		moveq	#0,d0
0000D7AA 1028 0028                  		move.b	$28(a0),d0
0000D7AE D040                       		add.w	d0,d0
0000D7B0 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D7B4 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D7B8                            ; ===========================================================================
0000D7B8 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D7BA 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D7BC 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D7BE                            ; ===========================================================================
0000D7BE                            
0000D7BE                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D7BE 4E75                       		rts			; don't move the object
0000D7C0                            ; ===========================================================================
0000D7C0                            
0000D7C0                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D7C0 6100 0000                  		bsr.w	Obj36_Wait
0000D7C4 7000                       		moveq	#0,d0
0000D7C6 1028 0034                  		move.b	$34(a0),d0
0000D7CA D068 0032                  		add.w	$32(a0),d0
0000D7CE 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D7D2 4E75                       		rts	
0000D7D4                            ; ===========================================================================
0000D7D4                            
0000D7D4                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D7D4 6100 0000                  		bsr.w	Obj36_Wait
0000D7D8 7000                       		moveq	#0,d0
0000D7DA 1028 0034                  		move.b	$34(a0),d0
0000D7DE D068 0030                  		add.w	$30(a0),d0
0000D7E2 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D7E6 4E75                       		rts	
0000D7E8                            ; ===========================================================================
0000D7E8                            
0000D7E8                            Obj36_Wait:
0000D7E8 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D7EC 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D7EE 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D7F2 6600                       		bne.s	locret_CFE6
0000D7F4 4A28 0001                  		tst.b	1(a0)
0000D7F8 6A00                       		bpl.s	locret_CFE6
0000D7FA 303C 00B6                  		move.w	#$B6,d0
0000D7FE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D804 6000                       		bra.s	locret_CFE6
0000D806                            ; ===========================================================================
0000D806                            
0000D806                            loc_CFA4:
0000D806 4A68 0036                  		tst.w	$36(a0)
0000D80A 6700                       		beq.s	loc_CFC6
0000D80C 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D812 6400                       		bcc.s	locret_CFE6
0000D814 317C 0000 0034             		move.w	#0,$34(a0)
0000D81A 317C 0000 0036             		move.w	#0,$36(a0)
0000D820 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D826 6000                       		bra.s	locret_CFE6
0000D828                            ; ===========================================================================
0000D828                            
0000D828                            loc_CFC6:
0000D828 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D82E 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D834 6500                       		bcs.s	locret_CFE6
0000D836 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D83C 317C 0001 0036             		move.w	#1,$36(a0)
0000D842 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D848                            
0000D848                            locret_CFE6:
0000D848 4E75                       		rts	
0000D84A                            ; ===========================================================================
0000D84A                            ; ---------------------------------------------------------------------------
0000D84A                            ; Sprite mappings - spikes
0000D84A                            ; ---------------------------------------------------------------------------
0000D84A                            Map_obj36:
0000D84A                            	include "_maps\obj36.asm"
0000D84A                            Map_obj36_inner:
0000D84A 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D84C 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D84E 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D850 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D852 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D854 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D856 03                         Map_obj36_inner_C: 	dc.b $3
0000D857 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D85C F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D861 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D866 03                         Map_obj36_inner_1C: 	dc.b $3
0000D867 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D86C FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D871 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000D876 01                         Map_obj36_inner_2C: 	dc.b $1
0000D877 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D87C 03                         Map_obj36_inner_32: 	dc.b $3
0000D87D F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000D882 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D887 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000D88C 06                         Map_obj36_inner_42: 	dc.b $6
0000D88D F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000D892 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000D897 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000D89C F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000D8A1 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000D8A6 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000D8AB 01                         Map_obj36_inner_61: 	dc.b $1
0000D8AC FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D8B2 00                         	even
0000D8B2 00                         	even
0000D8B2                            
0000D8B2                            ; ===========================================================================
0000D8B2                            ; ---------------------------------------------------------------------------
0000D8B2                            ; Object 3B - purple rock (GHZ)
0000D8B2                            ; ---------------------------------------------------------------------------
0000D8B2                            
0000D8B2                            Obj3B:					; XREF: Obj_Index
0000D8B2 7000                       		moveq	#0,d0
0000D8B4 1028 0024                  		move.b	$24(a0),d0
0000D8B8 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D8BC 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D8C0                            ; ===========================================================================
0000D8C0 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D8C2 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D8C4                            ; ===========================================================================
0000D8C4                            
0000D8C4                            Obj3B_Main:				; XREF: Obj3B_Index
0000D8C4 5428 0024                  		addq.b	#2,$24(a0)
0000D8C8 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D8D0 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D8D6 117C 0004 0001             		move.b	#4,1(a0)
0000D8DC 117C 0013 0019             		move.b	#$13,$19(a0)
0000D8E2 117C 0004 0018             		move.b	#4,$18(a0)
0000D8E8                            
0000D8E8                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D8E8 323C 001B                  		move.w	#$1B,d1
0000D8EC 343C 0010                  		move.w	#$10,d2
0000D8F0 363C 0010                  		move.w	#$10,d3
0000D8F4 3828 0008                  		move.w	8(a0),d4
0000D8F8 6100 0000                  		bsr.w	SolidObject
0000D8FC 6100 0000                  		bsr.w	DisplaySprite
0000D900 3028 0008                  		move.w	8(a0),d0
0000D904 0240 FF80                  		andi.w	#$FF80,d0
0000D908 3238 F700                  		move.w	($FFFFF700).w,d1
0000D90C 0441 0080                  		subi.w	#$80,d1
0000D910 0241 FF80                  		andi.w	#$FF80,d1
0000D914 9041                       		sub.w	d1,d0
0000D916 0C40 0280                  		cmpi.w	#$280,d0
0000D91A 6200 0000                  		bhi.w	DeleteObject
0000D91E 4E75                       		rts	
0000D920                            ; ===========================================================================
0000D920                            ; ---------------------------------------------------------------------------
0000D920                            ; Object 49 - waterfall	sound effect (GHZ)
0000D920                            ; ---------------------------------------------------------------------------
0000D920                            
0000D920                            Obj49:					; XREF: Obj_Index
0000D920 7000                       		moveq	#0,d0
0000D922 1028 0024                  		move.b	$24(a0),d0
0000D926 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D92A 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D92E                            ; ===========================================================================
0000D92E 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D930 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D932                            ; ===========================================================================
0000D932                            
0000D932                            Obj49_Main:				; XREF: Obj49_Index
0000D932 5428 0024                  		addq.b	#2,$24(a0)
0000D936 117C 0004 0001             		move.b	#4,1(a0)
0000D93C                            
0000D93C                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D93C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D940 0200 003F                  		andi.b	#$3F,d0
0000D944 6600                       		bne.s	Obj49_ChkDel
0000D946 303C 00D0                  		move.w	#$D0,d0
0000D94A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D950                            
0000D950                            Obj49_ChkDel:
0000D950 3028 0008                  		move.w	8(a0),d0
0000D954 0240 FF80                  		andi.w	#$FF80,d0
0000D958 3238 F700                  		move.w	($FFFFF700).w,d1
0000D95C 0441 0080                  		subi.w	#$80,d1
0000D960 0241 FF80                  		andi.w	#$FF80,d1
0000D964 9041                       		sub.w	d1,d0
0000D966 0C40 0280                  		cmpi.w	#$280,d0
0000D96A 6200 0000                  		bhi.w	DeleteObject
0000D96E 4E75                       		rts	
0000D970                            ; ===========================================================================
0000D970                            ; ---------------------------------------------------------------------------
0000D970                            ; Sprite mappings - purple rock	(GHZ)
0000D970                            ; ---------------------------------------------------------------------------
0000D970                            Map_obj3B:
0000D970                            	include "_maps\obj3B.asm"
0000D970                            ; ---------------------------------------------------------------------------
0000D970                            ; Sprite mappings - purple rock	(GHZ)
0000D970                            ; ---------------------------------------------------------------------------
0000D970 0000                       		dc.w byte_D110-Map_obj3B
0000D972 02                         byte_D110:	dc.b 2
0000D973 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D978 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D97E 00                         		even
0000D97E 00                         		even
0000D97E                            
0000D97E                            ; ===========================================================================
0000D97E                            ; ---------------------------------------------------------------------------
0000D97E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D97E                            ; ---------------------------------------------------------------------------
0000D97E                            
0000D97E                            Obj3C:					; XREF: Obj_Index
0000D97E 7000                       		moveq	#0,d0
0000D980 1028 0024                  		move.b	$24(a0),d0
0000D984 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D988 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D98C 6000 0000                  		bra.w	MarkObjGone
0000D990                            ; ===========================================================================
0000D990 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D992 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D994 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D996                            ; ===========================================================================
0000D996                            
0000D996                            Obj3C_Main:				; XREF: Obj3C_Index
0000D996 5428 0024                  		addq.b	#2,$24(a0)
0000D99A 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D9A2 317C 450F 0002             		move.w	#$450F,2(a0)
0000D9A8 117C 0004 0001             		move.b	#4,1(a0)
0000D9AE 117C 0010 0019             		move.b	#$10,$19(a0)
0000D9B4 117C 0004 0018             		move.b	#4,$18(a0)
0000D9BA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D9C0                            
0000D9C0                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D9C0 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D9C6 323C 001B                  		move.w	#$1B,d1
0000D9CA 343C 0020                  		move.w	#$20,d2
0000D9CE 363C 0020                  		move.w	#$20,d3
0000D9D2 3828 0008                  		move.w	8(a0),d4
0000D9D6 6100 0000                  		bsr.w	SolidObject
0000D9DA 0828 0005 0022             		btst	#5,$22(a0)
0000D9E0 6600                       		bne.s	Obj3C_ChkRoll
0000D9E2                            
0000D9E2                            locret_D180:
0000D9E2 4E75                       		rts	
0000D9E4                            ; ===========================================================================
0000D9E4                            
0000D9E4                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D9E4 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D9EA 66F6                       		bne.s	locret_D180	; if not, branch
0000D9EC 3028 0030                  		move.w	$30(a0),d0
0000D9F0 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D9F2 4440                       		neg.w	d0
0000D9F4                            
0000D9F4                            Obj3C_ChkSpeed:
0000D9F4 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D9F8 65E8                       		bcs.s	locret_D180	; if not, branch
0000D9FA 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DA00 5869 0008                  		addq.w	#4,8(a1)
0000DA04 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DA0A 3028 0008                  		move.w	8(a0),d0
0000DA0E B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DA12 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DA14 5169 0008                  		subq.w	#8,8(a1)
0000DA18 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DA1E                            
0000DA1E                            Obj3C_Smash:
0000DA1E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DA24 08A8 0005 0022             		bclr	#5,$22(a0)
0000DA2A 08A9 0005 0022             		bclr	#5,$22(a1)
0000DA30 7207                       		moveq	#7,d1		; load 8 fragments
0000DA32 343C 0070                  		move.w	#$70,d2
0000DA36 6100                       		bsr.s	SmashObject
0000DA38                            
0000DA38                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DA38 6100 0000                  		bsr.w	SpeedToPos
0000DA3C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DA42 6100 0000                  		bsr.w	DisplaySprite
0000DA46 4A28 0001                  		tst.b	1(a0)
0000DA4A 6A00 0000                  		bpl.w	DeleteObject
0000DA4E 4E75                       		rts	
0000DA50                            
0000DA50                            ; ---------------------------------------------------------------------------
0000DA50                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DA50                            ; ---------------------------------------------------------------------------
0000DA50                            
0000DA50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA50                            
0000DA50                            
0000DA50                            SmashObject:				; XREF: Obj3C_Smash
0000DA50 7000                       		moveq	#0,d0
0000DA52 1028 001A                  		move.b	$1A(a0),d0
0000DA56 D040                       		add.w	d0,d0
0000DA58 2668 0004                  		movea.l	4(a0),a3
0000DA5C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DA60 524B                       		addq.w	#1,a3
0000DA62 08E8 0005 0001             		bset	#5,1(a0)
0000DA68 1810                       		move.b	0(a0),d4
0000DA6A 1A28 0001                  		move.b	1(a0),d5
0000DA6E 2248                       		movea.l	a0,a1
0000DA70 6000                       		bra.s	Smash_LoadFrag
0000DA72                            ; ===========================================================================
0000DA72                            
0000DA72                            Smash_Loop:
0000DA72 6100 0000                  		bsr.w	SingleObjLoad
0000DA76 6600                       		bne.s	Smash_PlaySnd
0000DA78 5A4B                       		addq.w	#5,a3
0000DA7A                            
0000DA7A                            Smash_LoadFrag:				; XREF: SmashObject
0000DA7A 137C 0004 0024             		move.b	#4,$24(a1)
0000DA80 1284                       		move.b	d4,0(a1)
0000DA82 234B 0004                  		move.l	a3,4(a1)
0000DA86 1345 0001                  		move.b	d5,1(a1)
0000DA8A 3368 0008 0008             		move.w	8(a0),8(a1)
0000DA90 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DA96 3368 0002 0002             		move.w	2(a0),2(a1)
0000DA9C 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DAA2 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DAA8 335C 0010                  		move.w	(a4)+,$10(a1)
0000DAAC 335C 0012                  		move.w	(a4)+,$12(a1)
0000DAB0 B3C8                       		cmpa.l	a0,a1
0000DAB2 6400                       		bcc.s	loc_D268
0000DAB4 2F08                       		move.l	a0,-(sp)
0000DAB6 2049                       		movea.l	a1,a0
0000DAB8 6100 0000                  		bsr.w	SpeedToPos
0000DABC D568 0012                  		add.w	d2,$12(a0)
0000DAC0 205F                       		movea.l	(sp)+,a0
0000DAC2 6100 0000                  		bsr.w	DisplaySprite2
0000DAC6                            
0000DAC6                            loc_D268:
0000DAC6 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DACA                            
0000DACA                            Smash_PlaySnd:
0000DACA 303C 00CB                  		move.w	#$CB,d0
0000DACE 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DAD4                            ; End of function SmashObject
0000DAD4                            
0000DAD4                            ; ===========================================================================
0000DAD4                            ; Smashed block	fragment speeds
0000DAD4                            ;
0000DAD4 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DAD8 0600 FF00                  		dc.w $600, $FF00
0000DADC 0600 0100                  		dc.w $600, $100
0000DAE0 0400 0500                  		dc.w $400, $500
0000DAE4 0600 FA00                  		dc.w $600, $FA00
0000DAE8 0800 FE00                  		dc.w $800, $FE00
0000DAEC 0800 0200                  		dc.w $800, $200
0000DAF0 0600 0600                  		dc.w $600, $600
0000DAF4                            
0000DAF4 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DAF8 F800 FE00                  		dc.w $F800, $FE00
0000DAFC F800 0200                  		dc.w $F800, $200
0000DB00 FA00 0600                  		dc.w $FA00, $600
0000DB04 FC00 FB00                  		dc.w $FC00, $FB00
0000DB08 FA00 FF00                  		dc.w $FA00, $FF00
0000DB0C FA00 0100                  		dc.w $FA00, $100
0000DB10 FC00 0500                  		dc.w $FC00, $500
0000DB14                            ; ---------------------------------------------------------------------------
0000DB14                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DB14                            ; ---------------------------------------------------------------------------
0000DB14                            Map_obj3C:
0000DB14                            	include "_maps\obj3C.asm"
0000DB14                            ; ---------------------------------------------------------------------------
0000DB14                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DB14                            ; ---------------------------------------------------------------------------
0000DB14 0000                       		dc.w byte_D2BC-Map_obj3C
0000DB16 0000                       		dc.w byte_D2E5-Map_obj3C
0000DB18 0000                       		dc.w byte_D30E-Map_obj3C
0000DB1A 08                         byte_D2BC:	dc.b 8
0000DB1B E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DB20 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DB25 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DB2A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DB2F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DB34 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DB39 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DB3E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DB43 08                         byte_D2E5:	dc.b 8
0000DB44 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB49 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB4E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB53 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB58 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DB5D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DB62 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DB67 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DB6C 08                         byte_D30E:	dc.b 8
0000DB6D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB72 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB77 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB7C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB81 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DB86 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DB8B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DB90 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DB96 00                         		even
0000DB96 00                         		even
0000DB96                            
0000DB96                            ; ---------------------------------------------------------------------------
0000DB96                            ; Object code loading subroutine
0000DB96                            ; ---------------------------------------------------------------------------
0000DB96                            
0000DB96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB96                            
0000DB96                            
0000DB96                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DB96 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DB9A 7E7F                       		moveq	#$7F,d7
0000DB9C 7000                       		moveq	#0,d0
0000DB9E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DBA4 6400                       		bcc.s	loc_D362
0000DBA6                            
0000DBA6                            loc_D348:
0000DBA6 1010                       		move.b	(a0),d0		; load object number from RAM
0000DBA8 6700                       		beq.s	loc_D358
0000DBAA D040                       		add.w	d0,d0
0000DBAC D040                       		add.w	d0,d0
0000DBAE 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DBB2 4E91                       		jsr	(a1)		; run the object's code
0000DBB4 7000                       		moveq	#0,d0
0000DBB6                            
0000DBB6                            loc_D358:
0000DBB6 41E8 0040                  		lea	$40(a0),a0	; next object
0000DBBA 51CF FFEA                  		dbf	d7,loc_D348
0000DBBE 4E75                       		rts	
0000DBC0                            ; ===========================================================================
0000DBC0                            
0000DBC0                            loc_D362:
0000DBC0 7E1F                       		moveq	#$1F,d7
0000DBC2 61E2                       		bsr.s	loc_D348
0000DBC4 7E5F                       		moveq	#$5F,d7
0000DBC6                            
0000DBC6                            loc_D368:
0000DBC6 7000                       		moveq	#0,d0
0000DBC8 1010                       		move.b	(a0),d0
0000DBCA 6700                       		beq.s	loc_D378
0000DBCC 4A28 0001                  		tst.b	1(a0)
0000DBD0 6A00                       		bpl.s	loc_D378
0000DBD2 6100 0000                  		bsr.w	DisplaySprite
0000DBD6                            
0000DBD6                            loc_D378:
0000DBD6 41E8 0040                  		lea	$40(a0),a0
0000DBDA                            
0000DBDA                            loc_D37C:
0000DBDA 51CF FFEA                  		dbf	d7,loc_D368
0000DBDE 4E75                       		rts	
0000DBE0                            ; End of function ObjectsLoad
0000DBE0                            
0000DBE0                            ; ===========================================================================
0000DBE0                            ; ---------------------------------------------------------------------------
0000DBE0                            ; Object pointers
0000DBE0                            ; ---------------------------------------------------------------------------
0000DBE0                            Obj_Index:
0000DBE0                            	include "_inc\Object pointers.asm"
0000DBE0                            ; ---------------------------------------------------------------------------
0000DBE0                            ; Object pointers
0000DBE0                            ; ---------------------------------------------------------------------------
0000DBE0 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DBF0 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DC00 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DC10 0000 0000 0000 AE26 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DC20 0000 79C2 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DC30 0000 7FE8 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DC40 0000 8836 0000 8930 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DC50 0000 8F7A 0000 9268 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DC60 0000 0000 0000 9F22 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DC70 0000 A25A 0000 A846 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DC80 0000 9B7E 0000 9050 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DC90 0000 B41E 0000 AA3A 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DCA0 0000 BE32 0000 C4E0 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DCB0 0000 B990 0000 D68A 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DCC0 0000 CC66 0000 CD20 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DCD0 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DCE0 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DCF0 0000 C14E 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DD00 0000 D920 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DD10 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DD20 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DD30 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DD40 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DD50 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DD60 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DD70 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DD80 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DD90 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DDA0 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DDB0 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DDC0 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DDD0 0000 0000 0000 CF5A 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DDE0 0000 54C0 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DDF0 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DE00 0000 5B7A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DE00 0000 5B7A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DE10                            
0000DE10                            ; ---------------------------------------------------------------------------
0000DE10                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DE10                            ; ---------------------------------------------------------------------------
0000DE10                            
0000DE10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE10                            
0000DE10                            
0000DE10                            ObjectFall:
0000DE10 2428 0008                  		move.l	8(a0),d2
0000DE14 2628 000C                  		move.l	$C(a0),d3
0000DE18 3028 0010                  		move.w	$10(a0),d0
0000DE1C 48C0                       		ext.l	d0
0000DE1E E180                       		asl.l	#8,d0
0000DE20 D480                       		add.l	d0,d2
0000DE22 3028 0012                  		move.w	$12(a0),d0
0000DE26 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DE2C 48C0                       		ext.l	d0
0000DE2E E180                       		asl.l	#8,d0
0000DE30 D680                       		add.l	d0,d3
0000DE32 2142 0008                  		move.l	d2,8(a0)
0000DE36 2143 000C                  		move.l	d3,$C(a0)
0000DE3A 4E75                       		rts	
0000DE3C                            ; End of function ObjectFall
0000DE3C                            
0000DE3C                            ; ---------------------------------------------------------------------------
0000DE3C                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DE3C                            ; ---------------------------------------------------------------------------
0000DE3C                            
0000DE3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE3C                            
0000DE3C                            
0000DE3C                            ObjectFallNoJump:
0000DE3C 2428 0008                  		move.l	8(a0),d2
0000DE40 2628 000C                  		move.l	$C(a0),d3
0000DE44 3028 0010                  		move.w	$10(a0),d0
0000DE48 48C0                       		ext.l	d0
0000DE4A E180                       		asl.l	#8,d0
0000DE4C D480                       		add.l	d0,d2
0000DE4E                            ;		cmpi.b	#1,obID(a0)
0000DE4E                            ;		beq.s	ObjectFallSonic
0000DE4E 3028 000C                  		move.w	$C(a0),d0
0000DE52 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000DE56                            ;		ext.l	d0
0000DE56                            ;		asl.l	#8,d0
0000DE56                            ;		add.l	d0,d3
0000DE56 2142 0008                  		move.l	d2,$8(a0)
0000DE5A                            ;		move.l	d3,obY(a0)
0000DE5A 4E75                       		rts	
0000DE5C                            
0000DE5C                            ; End of function ObjectFall
0000DE5C                            
0000DE5C                            JumpFallSonic:
0000DE5C 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000DE62                                    
0000DE62 E180                               asl.l    #8,d0                ; Apply X speed
0000DE64 D1A8 0008                          add.l    d0,$8(a0)
0000DE68                                    
0000DE68 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000DE6C 4A41                               tst.w    d1                ; Are we falling?
0000DE6E 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000DE70 4440                               neg.w    d0                ; Make Y movement go up
0000DE72                                    
0000DE72                            .SetYSpeed:
0000DE72 48C0                               ext.l    d0                ; Apply Y speed
0000DE74 E180                               asl.l    #8,d0
0000DE76 D1A8 000C                          add.l    d0,$C(a0)
0000DE7A 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000DE80 4E75                               rts
0000DE82                            
0000DE82                            ; ---------------------------------------------------------------------------
0000DE82                            ; Subroutine translating object	speed to update	object position
0000DE82                            ; ---------------------------------------------------------------------------
0000DE82                            
0000DE82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE82                            
0000DE82                            
0000DE82                            SpeedToPos:
0000DE82 2428 0008                  		move.l	8(a0),d2
0000DE86 2628 000C                  		move.l	$C(a0),d3
0000DE8A 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DE8E 48C0                       		ext.l	d0
0000DE90 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DE92 D480                       		add.l	d0,d2		; add to x-axis	position
0000DE94 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DE98 48C0                       		ext.l	d0
0000DE9A E180                       		asl.l	#8,d0		; multiply by $100
0000DE9C D680                       		add.l	d0,d3		; add to y-axis	position
0000DE9E 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DEA2 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DEA6 4E75                       		rts	
0000DEA8                            ; End of function SpeedToPos
0000DEA8                            
0000DEA8                            ; ---------------------------------------------------------------------------
0000DEA8                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DEA8                            ; ---------------------------------------------------------------------------
0000DEA8                            
0000DEA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEA8                            
0000DEA8                            
0000DEA8                            DisplaySprite:
0000DEA8 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DEAC 3028 0018                  		move.w	$18(a0),d0
0000DEB0 E248                       		lsr.w	#1,d0
0000DEB2 0240 0380                  		andi.w	#$380,d0
0000DEB6 D2C0                       		adda.w	d0,a1
0000DEB8 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DEBC 6400                       		bcc.s	locret_D620
0000DEBE 5451                       		addq.w	#2,(a1)
0000DEC0 D2D1                       		adda.w	(a1),a1
0000DEC2 3288                       		move.w	a0,(a1)
0000DEC4                            
0000DEC4                            locret_D620:
0000DEC4 4E75                       		rts	
0000DEC6                            ; End of function DisplaySprite
0000DEC6                            
0000DEC6                            ; ---------------------------------------------------------------------------
0000DEC6                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DEC6                            ; ---------------------------------------------------------------------------
0000DEC6                            
0000DEC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEC6                            
0000DEC6                            
0000DEC6                            DisplaySprite2:
0000DEC6 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DECA 3029 0018                  		move.w	$18(a1),d0
0000DECE E248                       		lsr.w	#1,d0
0000DED0 0240 0380                  		andi.w	#$380,d0
0000DED4 D4C0                       		adda.w	d0,a2
0000DED6 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DEDA 6400                       		bcc.s	locret_D63E
0000DEDC 5452                       		addq.w	#2,(a2)
0000DEDE D4D2                       		adda.w	(a2),a2
0000DEE0 3489                       		move.w	a1,(a2)
0000DEE2                            
0000DEE2                            locret_D63E:
0000DEE2 4E75                       		rts	
0000DEE4                            ; End of function DisplaySprite2
0000DEE4                            
0000DEE4                            ; ---------------------------------------------------------------------------
0000DEE4                            ; Subroutine to	delete an object
0000DEE4                            ; ---------------------------------------------------------------------------
0000DEE4                            
0000DEE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEE4                            
0000DEE4                            
0000DEE4                            DeleteObject:
0000DEE4 2248                       		movea.l	a0,a1
0000DEE6                            
0000DEE6                            DeleteObject2:
0000DEE6 7200                       		moveq	#0,d1
0000DEE8 700F                       		moveq	#$F,d0
0000DEEA                            
0000DEEA                            loc_D646:
0000DEEA 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DEEC 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DEF0 4E75                       		rts	
0000DEF2                            ; End of function DeleteObject
0000DEF2                            
0000DEF2                            ; ===========================================================================
0000DEF2 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DEF6 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DEFA 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DEFE 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DF02                            ; ---------------------------------------------------------------------------
0000DF02                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DF02                            ; ---------------------------------------------------------------------------
0000DF02                            
0000DF02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF02                            
0000DF02                            
0000DF02                            BuildSprites:				; XREF: TitleScreen; et al
0000DF02 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DF06 7A00                       		moveq	#0,d5
0000DF08 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DF0C 7E07                       		moveq	#7,d7
0000DF0E                            
0000DF0E                            loc_D66A:
0000DF0E 4A54                       		tst.w	(a4)
0000DF10 6700 0000                  		beq.w	loc_D72E
0000DF14 7C02                       		moveq	#2,d6
0000DF16                            
0000DF16                            loc_D672:
0000DF16 3074 6000                  		movea.w	(a4,d6.w),a0
0000DF1A 4A10                       		tst.b	(a0)
0000DF1C 6700 0000                  		beq.w	loc_D726
0000DF20 08A8 0007 0001             		bclr	#7,1(a0)
0000DF26 1028 0001                  		move.b	1(a0),d0
0000DF2A 1800                       		move.b	d0,d4
0000DF2C 0240 000C                  		andi.w	#$C,d0
0000DF30 6700                       		beq.s	loc_D6DE
0000DF32 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DF36 7000                       		moveq	#0,d0
0000DF38 1028 0019                  		move.b	$19(a0),d0
0000DF3C 3628 0008                  		move.w	8(a0),d3
0000DF40 9651                       		sub.w	(a1),d3
0000DF42 3203                       		move.w	d3,d1
0000DF44 D240                       		add.w	d0,d1
0000DF46 6B00 0000                  		bmi.w	loc_D726
0000DF4A 3203                       		move.w	d3,d1
0000DF4C 9240                       		sub.w	d0,d1
0000DF4E 0C41 0140                  		cmpi.w	#$140,d1
0000DF52 6C00                       		bge.s	loc_D726
0000DF54 0643 0080                  		addi.w	#$80,d3
0000DF58 0804 0004                  		btst	#4,d4
0000DF5C 6700                       		beq.s	loc_D6E8
0000DF5E 7000                       		moveq	#0,d0
0000DF60 1028 0016                  		move.b	$16(a0),d0
0000DF64 3428 000C                  		move.w	$C(a0),d2
0000DF68 9469 0004                  		sub.w	4(a1),d2
0000DF6C 3202                       		move.w	d2,d1
0000DF6E D240                       		add.w	d0,d1
0000DF70 6B00                       		bmi.s	loc_D726
0000DF72 3202                       		move.w	d2,d1
0000DF74 9240                       		sub.w	d0,d1
0000DF76 0C41 00E0                  		cmpi.w	#$E0,d1
0000DF7A 6C00                       		bge.s	loc_D726
0000DF7C 0642 0080                  		addi.w	#$80,d2
0000DF80 6000                       		bra.s	loc_D700
0000DF82                            ; ===========================================================================
0000DF82                            
0000DF82                            loc_D6DE:
0000DF82 3428 000A                  		move.w	$A(a0),d2
0000DF86 3628 0008                  		move.w	8(a0),d3
0000DF8A 6000                       		bra.s	loc_D700
0000DF8C                            ; ===========================================================================
0000DF8C                            
0000DF8C                            loc_D6E8:
0000DF8C 3428 000C                  		move.w	$C(a0),d2
0000DF90 9469 0004                  		sub.w	4(a1),d2
0000DF94 0642 0080                  		addi.w	#$80,d2
0000DF98 0C42 0060                  		cmpi.w	#$60,d2
0000DF9C 6500                       		bcs.s	loc_D726
0000DF9E 0C42 0180                  		cmpi.w	#$180,d2
0000DFA2 6400                       		bcc.s	loc_D726
0000DFA4                            
0000DFA4                            loc_D700:
0000DFA4 2268 0004                  		movea.l	4(a0),a1
0000DFA8 7200                       		moveq	#0,d1
0000DFAA 0804 0005                  		btst	#5,d4
0000DFAE 6600                       		bne.s	loc_D71C
0000DFB0 1228 001A                  		move.b	$1A(a0),d1
0000DFB4 D201                       		add.b	d1,d1
0000DFB6 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DFBA 1219                       		move.b	(a1)+,d1
0000DFBC 5301                       		subq.b	#1,d1
0000DFBE 6B00                       		bmi.s	loc_D720
0000DFC0                            
0000DFC0                            loc_D71C:
0000DFC0 6100 0000                  		bsr.w	sub_D750
0000DFC4                            
0000DFC4                            loc_D720:
0000DFC4 08E8 0007 0001             		bset	#7,1(a0)
0000DFCA                            
0000DFCA                            loc_D726:
0000DFCA 5446                       		addq.w	#2,d6
0000DFCC 5554                       		subq.w	#2,(a4)
0000DFCE 6600 FF46                  		bne.w	loc_D672
0000DFD2                            
0000DFD2                            loc_D72E:
0000DFD2 49EC 0080                  		lea	$80(a4),a4
0000DFD6 51CF FF36                  		dbf	d7,loc_D66A
0000DFDA 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DFDE 0C05 0050                  		cmpi.b	#$50,d5
0000DFE2 6700                       		beq.s	loc_D748
0000DFE4 24BC 0000 0000             		move.l	#0,(a2)
0000DFEA 4E75                       		rts	
0000DFEC                            ; ===========================================================================
0000DFEC                            
0000DFEC                            loc_D748:
0000DFEC 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DFF2 4E75                       		rts	
0000DFF4                            ; End of function BuildSprites
0000DFF4                            
0000DFF4                            
0000DFF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFF4                            
0000DFF4                            
0000DFF4                            sub_D750:				; XREF: BuildSprites
0000DFF4 3668 0002                  		movea.w	2(a0),a3
0000DFF8 0804 0000                  		btst	#0,d4
0000DFFC 6600                       		bne.s	loc_D796
0000DFFE 0804 0001                  		btst	#1,d4
0000E002 6600 0000                  		bne.w	loc_D7E4
0000E006                            ; End of function sub_D750
0000E006                            
0000E006                            
0000E006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E006                            
0000E006                            
0000E006                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E006 0C05 0050                  		cmpi.b	#$50,d5
0000E00A 6700                       		beq.s	locret_D794
0000E00C 1019                       		move.b	(a1)+,d0
0000E00E 4880                       		ext.w	d0
0000E010 D042                       		add.w	d2,d0
0000E012 34C0                       		move.w	d0,(a2)+
0000E014 14D9                       		move.b	(a1)+,(a2)+
0000E016 5205                       		addq.b	#1,d5
0000E018 14C5                       		move.b	d5,(a2)+
0000E01A 1019                       		move.b	(a1)+,d0
0000E01C E148                       		lsl.w	#8,d0
0000E01E 1019                       		move.b	(a1)+,d0
0000E020 D04B                       		add.w	a3,d0
0000E022 34C0                       		move.w	d0,(a2)+
0000E024 1019                       		move.b	(a1)+,d0
0000E026 4880                       		ext.w	d0
0000E028 D043                       		add.w	d3,d0
0000E02A 0240 01FF                  		andi.w	#$1FF,d0
0000E02E 6600                       		bne.s	loc_D78E
0000E030 5240                       		addq.w	#1,d0
0000E032                            
0000E032                            loc_D78E:
0000E032 34C0                       		move.w	d0,(a2)+
0000E034 51C9 FFD0                  		dbf	d1,sub_D762
0000E038                            
0000E038                            locret_D794:
0000E038 4E75                       		rts	
0000E03A                            ; End of function sub_D762
0000E03A                            
0000E03A                            ; ===========================================================================
0000E03A                            
0000E03A                            loc_D796:
0000E03A 0804 0001                  		btst	#1,d4
0000E03E 6600 0000                  		bne.w	loc_D82A
0000E042                            
0000E042                            loc_D79E:
0000E042 0C05 0050                  		cmpi.b	#$50,d5
0000E046 6700                       		beq.s	locret_D7E2
0000E048 1019                       		move.b	(a1)+,d0
0000E04A 4880                       		ext.w	d0
0000E04C D042                       		add.w	d2,d0
0000E04E 34C0                       		move.w	d0,(a2)+
0000E050 1819                       		move.b	(a1)+,d4
0000E052 14C4                       		move.b	d4,(a2)+
0000E054 5205                       		addq.b	#1,d5
0000E056 14C5                       		move.b	d5,(a2)+
0000E058 1019                       		move.b	(a1)+,d0
0000E05A E148                       		lsl.w	#8,d0
0000E05C 1019                       		move.b	(a1)+,d0
0000E05E D04B                       		add.w	a3,d0
0000E060 0A40 0800                  		eori.w	#$800,d0
0000E064 34C0                       		move.w	d0,(a2)+
0000E066 1019                       		move.b	(a1)+,d0
0000E068 4880                       		ext.w	d0
0000E06A 4440                       		neg.w	d0
0000E06C D804                       		add.b	d4,d4
0000E06E 0244 0018                  		andi.w	#$18,d4
0000E072 5044                       		addq.w	#8,d4
0000E074 9044                       		sub.w	d4,d0
0000E076 D043                       		add.w	d3,d0
0000E078 0240 01FF                  		andi.w	#$1FF,d0
0000E07C 6600                       		bne.s	loc_D7DC
0000E07E 5240                       		addq.w	#1,d0
0000E080                            
0000E080                            loc_D7DC:
0000E080 34C0                       		move.w	d0,(a2)+
0000E082 51C9 FFBE                  		dbf	d1,loc_D79E
0000E086                            
0000E086                            locret_D7E2:
0000E086 4E75                       		rts	
0000E088                            ; ===========================================================================
0000E088                            
0000E088                            loc_D7E4:				; XREF: sub_D750
0000E088 0C05 0050                  		cmpi.b	#$50,d5
0000E08C 6700                       		beq.s	locret_D828
0000E08E 1019                       		move.b	(a1)+,d0
0000E090 1811                       		move.b	(a1),d4
0000E092 4880                       		ext.w	d0
0000E094 4440                       		neg.w	d0
0000E096 E70C                       		lsl.b	#3,d4
0000E098 0244 0018                  		andi.w	#$18,d4
0000E09C 5044                       		addq.w	#8,d4
0000E09E 9044                       		sub.w	d4,d0
0000E0A0 D042                       		add.w	d2,d0
0000E0A2 34C0                       		move.w	d0,(a2)+
0000E0A4 14D9                       		move.b	(a1)+,(a2)+
0000E0A6 5205                       		addq.b	#1,d5
0000E0A8 14C5                       		move.b	d5,(a2)+
0000E0AA 1019                       		move.b	(a1)+,d0
0000E0AC E148                       		lsl.w	#8,d0
0000E0AE 1019                       		move.b	(a1)+,d0
0000E0B0 D04B                       		add.w	a3,d0
0000E0B2 0A40 1000                  		eori.w	#$1000,d0
0000E0B6 34C0                       		move.w	d0,(a2)+
0000E0B8 1019                       		move.b	(a1)+,d0
0000E0BA 4880                       		ext.w	d0
0000E0BC D043                       		add.w	d3,d0
0000E0BE 0240 01FF                  		andi.w	#$1FF,d0
0000E0C2 6600                       		bne.s	loc_D822
0000E0C4 5240                       		addq.w	#1,d0
0000E0C6                            
0000E0C6                            loc_D822:
0000E0C6 34C0                       		move.w	d0,(a2)+
0000E0C8 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E0CC                            
0000E0CC                            locret_D828:
0000E0CC 4E75                       		rts	
0000E0CE                            ; ===========================================================================
0000E0CE                            
0000E0CE                            loc_D82A:
0000E0CE 0C05 0050                  		cmpi.b	#$50,d5
0000E0D2 6700                       		beq.s	locret_D87C
0000E0D4 1019                       		move.b	(a1)+,d0
0000E0D6 1811                       		move.b	(a1),d4
0000E0D8 4880                       		ext.w	d0
0000E0DA 4440                       		neg.w	d0
0000E0DC E70C                       		lsl.b	#3,d4
0000E0DE 0244 0018                  		andi.w	#$18,d4
0000E0E2 5044                       		addq.w	#8,d4
0000E0E4 9044                       		sub.w	d4,d0
0000E0E6 D042                       		add.w	d2,d0
0000E0E8 34C0                       		move.w	d0,(a2)+
0000E0EA 1819                       		move.b	(a1)+,d4
0000E0EC 14C4                       		move.b	d4,(a2)+
0000E0EE 5205                       		addq.b	#1,d5
0000E0F0 14C5                       		move.b	d5,(a2)+
0000E0F2 1019                       		move.b	(a1)+,d0
0000E0F4 E148                       		lsl.w	#8,d0
0000E0F6 1019                       		move.b	(a1)+,d0
0000E0F8 D04B                       		add.w	a3,d0
0000E0FA 0A40 1800                  		eori.w	#$1800,d0
0000E0FE 34C0                       		move.w	d0,(a2)+
0000E100 1019                       		move.b	(a1)+,d0
0000E102 4880                       		ext.w	d0
0000E104 4440                       		neg.w	d0
0000E106 D804                       		add.b	d4,d4
0000E108 0244 0018                  		andi.w	#$18,d4
0000E10C 5044                       		addq.w	#8,d4
0000E10E 9044                       		sub.w	d4,d0
0000E110 D043                       		add.w	d3,d0
0000E112 0240 01FF                  		andi.w	#$1FF,d0
0000E116 6600                       		bne.s	loc_D876
0000E118 5240                       		addq.w	#1,d0
0000E11A                            
0000E11A                            loc_D876:
0000E11A 34C0                       		move.w	d0,(a2)+
0000E11C 51C9 FFB0                  		dbf	d1,loc_D82A
0000E120                            
0000E120                            locret_D87C:
0000E120 4E75                       		rts	
0000E122                            ; ---------------------------------------------------------------------------
0000E122                            ; Subroutine to	check if an object is on the screen
0000E122                            ; ---------------------------------------------------------------------------
0000E122                            
0000E122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E122                            
0000E122                            
0000E122                            ChkObjOnScreen:
0000E122 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E126 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E12A 6B00                       		bmi.s	NotOnScreen
0000E12C 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E130 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E132                            
0000E132 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E136 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E13A 6B00                       		bmi.s	NotOnScreen
0000E13C 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E140 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E142                            
0000E142 7000                       		moveq	#0,d0		; set flag to 0
0000E144 4E75                       		rts	
0000E146                            ; ===========================================================================
0000E146                            
0000E146                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E146 7001                       		moveq	#1,d0		; set flag to 1
0000E148 4E75                       		rts	
0000E14A                            ; End of function ChkObjOnScreen
0000E14A                            
0000E14A                            
0000E14A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E14A                            
0000E14A                            
0000E14A                            ChkObjOnScreen2:
0000E14A 7200                       		moveq	#0,d1
0000E14C 1228 0019                  		move.b	$19(a0),d1
0000E150 3028 0008                  		move.w	8(a0),d0
0000E154 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E158 D041                       		add.w	d1,d0
0000E15A 6B00                       		bmi.s	NotOnScreen2
0000E15C D241                       		add.w	d1,d1
0000E15E 9041                       		sub.w	d1,d0
0000E160 0C40 0140                  		cmpi.w	#320,d0
0000E164 6C00                       		bge.s	NotOnScreen2
0000E166                            
0000E166 3228 000C                  		move.w	$C(a0),d1
0000E16A 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E16E 6B00                       		bmi.s	NotOnScreen2
0000E170 0C41 00E0                  		cmpi.w	#224,d1
0000E174 6C00                       		bge.s	NotOnScreen2
0000E176                            
0000E176 7000                       		moveq	#0,d0
0000E178 4E75                       		rts	
0000E17A                            ; ===========================================================================
0000E17A                            
0000E17A                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E17A 7001                       		moveq	#1,d0
0000E17C 4E75                       		rts	
0000E17E                            ; End of function ChkObjOnScreen2
0000E17E                            
0000E17E                            ; ---------------------------------------------------------------------------
0000E17E                            ; Subroutine to	load a level's objects
0000E17E                            ; ---------------------------------------------------------------------------
0000E17E                            
0000E17E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E17E                            
0000E17E                            
0000E17E                            ObjPosLoad:				; XREF: Level; et al
0000E17E 7000                       		moveq	#0,d0
0000E180 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E184 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E188 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E18C                            ; End of function ObjPosLoad
0000E18C                            
0000E18C                            ; ===========================================================================
0000E18C 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E18E 0000                       		dc.w OPL_Next-OPL_Index
0000E190                            ; ===========================================================================
0000E190                            
0000E190                            OPL_Main:				; XREF: OPL_Index
0000E190 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E194 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E198 ED08                       		lsl.b	#6,d0
0000E19A E848                       		lsr.w	#4,d0
0000E19C 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E1A2 2248                       		movea.l	a0,a1
0000E1A4 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E1A8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1AC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E1B0 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E1B4 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E1B8 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E1BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E1C0 34FC 0101                  		move.w	#$101,(a2)+
0000E1C4 303C 005E                  		move.w	#$5E,d0
0000E1C8                            
0000E1C8                            OPL_ClrList:
0000E1C8 429A                       		clr.l	(a2)+
0000E1CA 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E1CE                            
0000E1CE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E1D2 7400                       		moveq	#0,d2
0000E1D4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E1D8 0446 0080                  		subi.w	#$80,d6
0000E1DC 6400                       		bcc.s	loc_D93C
0000E1DE 7C00                       		moveq	#0,d6
0000E1E0                            
0000E1E0                            loc_D93C:
0000E1E0 0246 FF80                  		andi.w	#$FF80,d6
0000E1E4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E1E8                            
0000E1E8                            loc_D944:
0000E1E8 BC50                       		cmp.w	(a0),d6
0000E1EA 6300                       		bls.s	loc_D956
0000E1EC 4A28 0004                  		tst.b	4(a0)
0000E1F0 6A00                       		bpl.s	loc_D952
0000E1F2 1412                       		move.b	(a2),d2
0000E1F4 5212                       		addq.b	#1,(a2)
0000E1F6                            
0000E1F6                            loc_D952:
0000E1F6 5C48                       		addq.w	#6,a0
0000E1F8 60EE                       		bra.s	loc_D944
0000E1FA                            ; ===========================================================================
0000E1FA                            
0000E1FA                            loc_D956:
0000E1FA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1FE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E202 0446 0080                  		subi.w	#$80,d6
0000E206 6500                       		bcs.s	loc_D976
0000E208                            
0000E208                            loc_D964:
0000E208 BC50                       		cmp.w	(a0),d6
0000E20A 6300                       		bls.s	loc_D976
0000E20C 4A28 0004                  		tst.b	4(a0)
0000E210 6A00                       		bpl.s	loc_D972
0000E212 522A 0001                  		addq.b	#1,1(a2)
0000E216                            
0000E216                            loc_D972:
0000E216 5C48                       		addq.w	#6,a0
0000E218 60EE                       		bra.s	loc_D964
0000E21A                            ; ===========================================================================
0000E21A                            
0000E21A                            loc_D976:
0000E21A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E21E 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E224                            
0000E224                            OPL_Next:				; XREF: OPL_Index
0000E224 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E228 7400                       		moveq	#0,d2
0000E22A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E22E 0246 FF80                  		andi.w	#$FF80,d6
0000E232 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E236 6700 0000                  		beq.w	locret_DA3A
0000E23A 6C00                       		bge.s	loc_D9F6
0000E23C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E240 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E244 0446 0080                  		subi.w	#$80,d6
0000E248 6500                       		bcs.s	loc_D9D2
0000E24A                            
0000E24A                            loc_D9A6:
0000E24A BC68 FFFA                  		cmp.w	-6(a0),d6
0000E24E 6C00                       		bge.s	loc_D9D2
0000E250 5D48                       		subq.w	#6,a0
0000E252 4A28 0004                  		tst.b	4(a0)
0000E256 6A00                       		bpl.s	loc_D9BC
0000E258 532A 0001                  		subq.b	#1,1(a2)
0000E25C 142A 0001                  		move.b	1(a2),d2
0000E260                            
0000E260                            loc_D9BC:
0000E260 6100 0000                  		bsr.w	loc_DA3C
0000E264 6600                       		bne.s	loc_D9C6
0000E266 5D48                       		subq.w	#6,a0
0000E268 60E0                       		bra.s	loc_D9A6
0000E26A                            ; ===========================================================================
0000E26A                            
0000E26A                            loc_D9C6:
0000E26A 4A28 0004                  		tst.b	4(a0)
0000E26E 6A00                       		bpl.s	loc_D9D0
0000E270 522A 0001                  		addq.b	#1,1(a2)
0000E274                            
0000E274                            loc_D9D0:
0000E274 5C48                       		addq.w	#6,a0
0000E276                            
0000E276                            loc_D9D2:
0000E276 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E27A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E27E 0646 0300                  		addi.w	#$300,d6
0000E282                            
0000E282                            loc_D9DE:
0000E282 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E286 6E00                       		bgt.s	loc_D9F0
0000E288 4A28 FFFE                  		tst.b	-2(a0)
0000E28C 6A00                       		bpl.s	loc_D9EC
0000E28E 5312                       		subq.b	#1,(a2)
0000E290                            
0000E290                            loc_D9EC:
0000E290 5D48                       		subq.w	#6,a0
0000E292 60EE                       		bra.s	loc_D9DE
0000E294                            ; ===========================================================================
0000E294                            
0000E294                            loc_D9F0:
0000E294 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E298 4E75                       		rts	
0000E29A                            ; ===========================================================================
0000E29A                            
0000E29A                            loc_D9F6:
0000E29A 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E29E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E2A2 0646 0280                  		addi.w	#$280,d6
0000E2A6                            
0000E2A6                            loc_DA02:
0000E2A6 BC50                       		cmp.w	(a0),d6
0000E2A8 6300                       		bls.s	loc_DA16
0000E2AA 4A28 0004                  		tst.b	4(a0)
0000E2AE 6A00                       		bpl.s	loc_DA10
0000E2B0 1412                       		move.b	(a2),d2
0000E2B2 5212                       		addq.b	#1,(a2)
0000E2B4                            
0000E2B4                            loc_DA10:
0000E2B4 6100 0000                  		bsr.w	loc_DA3C
0000E2B8 67EC                       		beq.s	loc_DA02
0000E2BA                            
0000E2BA                            loc_DA16:
0000E2BA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E2BE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E2C2 0446 0300                  		subi.w	#$300,d6
0000E2C6 6500                       		bcs.s	loc_DA36
0000E2C8                            
0000E2C8                            loc_DA24:
0000E2C8 BC50                       		cmp.w	(a0),d6
0000E2CA 6300                       		bls.s	loc_DA36
0000E2CC 4A28 0004                  		tst.b	4(a0)
0000E2D0 6A00                       		bpl.s	loc_DA32
0000E2D2 522A 0001                  		addq.b	#1,1(a2)
0000E2D6                            
0000E2D6                            loc_DA32:
0000E2D6 5C48                       		addq.w	#6,a0
0000E2D8 60EE                       		bra.s	loc_DA24
0000E2DA                            ; ===========================================================================
0000E2DA                            
0000E2DA                            loc_DA36:
0000E2DA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E2DE                            
0000E2DE                            locret_DA3A:
0000E2DE 4E75                       		rts	
0000E2E0                            ; ===========================================================================
0000E2E0                            
0000E2E0                            loc_DA3C:
0000E2E0 4A28 0004                  		tst.b	4(a0)
0000E2E4 6A00                       		bpl.s	OPL_MakeItem
0000E2E6 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E2EC 6700                       		beq.s	OPL_MakeItem
0000E2EE 5C48                       		addq.w	#6,a0
0000E2F0 7000                       		moveq	#0,d0
0000E2F2 4E75                       		rts	
0000E2F4                            ; ===========================================================================
0000E2F4                            
0000E2F4                            OPL_MakeItem:
0000E2F4 6100 0000                  		bsr.w	SingleObjLoad
0000E2F8 6600                       		bne.s	locret_DA8A
0000E2FA 3358 0008                  		move.w	(a0)+,8(a1)
0000E2FE 3018                       		move.w	(a0)+,d0
0000E300 3200                       		move.w	d0,d1
0000E302 0240 0FFF                  		andi.w	#$FFF,d0
0000E306 3340 000C                  		move.w	d0,$C(a1)
0000E30A E559                       		rol.w	#2,d1
0000E30C 0201 0003                  		andi.b	#3,d1
0000E310 1341 0001                  		move.b	d1,1(a1)
0000E314 1341 0022                  		move.b	d1,$22(a1)
0000E318 1018                       		move.b	(a0)+,d0
0000E31A 6A00                       		bpl.s	loc_DA80
0000E31C 0200 007F                  		andi.b	#$7F,d0
0000E320 1342 0023                  		move.b	d2,$23(a1)
0000E324                            
0000E324                            loc_DA80:
0000E324 1280                       		move.b	d0,0(a1)
0000E326 1358 0028                  		move.b	(a0)+,$28(a1)
0000E32A 7000                       		moveq	#0,d0
0000E32C                            
0000E32C                            locret_DA8A:
0000E32C 4E75                       		rts	
0000E32E                            ; ---------------------------------------------------------------------------
0000E32E                            ; Single object	loading	subroutine
0000E32E                            ; ---------------------------------------------------------------------------
0000E32E                            
0000E32E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E32E                            
0000E32E                            
0000E32E                            SingleObjLoad:
0000E32E 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E332 303C 005F                  		move.w	#$5F,d0
0000E336                            
0000E336                            loc_DA94:
0000E336 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E338 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E33A 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E33E 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E342                            
0000E342                            locret_DAA0:
0000E342 4E75                       		rts	
0000E344                            ; End of function SingleObjLoad
0000E344                            
0000E344                            
0000E344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E344                            
0000E344                            
0000E344                            SingleObjLoad2:
0000E344 2248                       		movea.l	a0,a1
0000E346 303C F000                  		move.w	#-$1000,d0
0000E34A 9048                       		sub.w	a0,d0
0000E34C EC48                       		lsr.w	#6,d0
0000E34E 5340                       		subq.w	#1,d0
0000E350 6500                       		bcs.s	locret_DABC
0000E352                            
0000E352                            loc_DAB0:
0000E352 4A11                       		tst.b	(a1)
0000E354 6700                       		beq.s	locret_DABC
0000E356 43E9 0040                  		lea	$40(a1),a1
0000E35A 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E35E                            
0000E35E                            locret_DABC:
0000E35E 4E75                       		rts	
0000E360                            ; End of function SingleObjLoad2
0000E360                            
0000E360                            ; ===========================================================================
0000E360                            ; ---------------------------------------------------------------------------
0000E360                            ; Object 41 - springs
0000E360                            ; ---------------------------------------------------------------------------
0000E360                            
0000E360                            Obj41:					; XREF: Obj_Index
0000E360 7000                       		moveq	#0,d0
0000E362 1028 0024                  		move.b	$24(a0),d0
0000E366 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E36A 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E36E 6100 FB38                  		bsr.w	DisplaySprite
0000E372 3028 0008                  		move.w	8(a0),d0
0000E376 0240 FF80                  		andi.w	#$FF80,d0
0000E37A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E37E 0441 0080                  		subi.w	#$80,d1
0000E382 0241 FF80                  		andi.w	#$FF80,d1
0000E386 9041                       		sub.w	d1,d0
0000E388 0C40 0280                  		cmpi.w	#$280,d0
0000E38C 6200 FB56                  		bhi.w	DeleteObject
0000E390 4E75                       		rts	
0000E392                            ; ===========================================================================
0000E392 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E394 0000                       		dc.w Obj41_Up-Obj41_Index
0000E396 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E398 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E39A 0000                       		dc.w Obj41_LR-Obj41_Index
0000E39C 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E39E 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E3A0 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E3A2 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E3A4 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E3A6                            
0000E3A6 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E3A8 F600                       		dc.w -$A00		; power	of yellow spring
0000E3AA                            ; ===========================================================================
0000E3AA                            
0000E3AA                            Obj41_Main:				; XREF: Obj41_Index
0000E3AA 5428 0024                  		addq.b	#2,$24(a0)
0000E3AE 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E3B6 317C 0523 0002             		move.w	#$523,2(a0)
0000E3BC 0028 0004 0001             		ori.b	#4,1(a0)
0000E3C2 117C 0010 0019             		move.b	#$10,$19(a0)
0000E3C8 117C 0004 0018             		move.b	#4,$18(a0)
0000E3CE 1028 0028                  		move.b	$28(a0),d0
0000E3D2 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E3D6 6700                       		beq.s	loc_DB54	; if not, branch
0000E3D8 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E3DE 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3E4 117C 0003 001A             		move.b	#3,$1A(a0)
0000E3EA 317C 0533 0002             		move.w	#$533,2(a0)
0000E3F0 117C 0008 0019             		move.b	#8,$19(a0)
0000E3F6                            
0000E3F6                            loc_DB54:
0000E3F6 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E3FA 6700                       		beq.s	loc_DB66	; if not, branch
0000E3FC 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E402 08E8 0001 0022             		bset	#1,$22(a0)
0000E408                            
0000E408                            loc_DB66:
0000E408 0800 0001                  		btst	#1,d0
0000E40C 6700                       		beq.s	loc_DB72
0000E40E 08E8 0005 0002             		bset	#5,2(a0)
0000E414                            
0000E414                            loc_DB72:
0000E414 0240 000F                  		andi.w	#$F,d0
0000E418 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E41E 4E75                       		rts	
0000E420                            ; ===========================================================================
0000E420                            
0000E420                            Obj41_Up:				; XREF: Obj41_Index
0000E420 323C 001B                  		move.w	#$1B,d1
0000E424 343C 0008                  		move.w	#8,d2
0000E428 363C 0010                  		move.w	#$10,d3
0000E42C 3828 0008                  		move.w	8(a0),d4
0000E430 6100 0000                  		bsr.w	SolidObject
0000E434 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E438 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E43A 4E75                       		rts	
0000E43C                            ; ===========================================================================
0000E43C                            
0000E43C                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E43C 5428 0024                  		addq.b	#2,$24(a0)
0000E440 5069 000C                  		addq.w	#8,$C(a1)
0000E444 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E44A 08E9 0001 0022             		bset	#1,$22(a1)
0000E450 08A9 0003 0022             		bclr	#3,$22(a1)
0000E456 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E45C 137C 0002 0024             		move.b	#2,$24(a1)
0000E462 08A8 0003 0022             		bclr	#3,$22(a0)
0000E468 4228 0025                  		clr.b	$25(a0)
0000E46C 303C 00CC                  		move.w	#$CC,d0
0000E470 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E476                            
0000E476                            Obj41_AniUp:				; XREF: Obj41_Index
0000E476 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E47C 6000 CAA4                  		bra.w	AnimateSprite
0000E480                            ; ===========================================================================
0000E480                            
0000E480                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E480 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E486 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E48A 4E75                       		rts	
0000E48C                            ; ===========================================================================
0000E48C                            
0000E48C                            Obj41_LR:				; XREF: Obj41_Index
0000E48C 323C 0013                  		move.w	#$13,d1
0000E490 343C 000E                  		move.w	#$E,d2
0000E494 363C 000F                  		move.w	#$F,d3
0000E498 3828 0008                  		move.w	8(a0),d4
0000E49C 6100 0000                  		bsr.w	SolidObject
0000E4A0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E4A6 6600                       		bne.s	loc_DC0C
0000E4A8 117C 0008 0024             		move.b	#8,$24(a0)
0000E4AE                            
0000E4AE                            loc_DC0C:
0000E4AE 0828 0005 0022             		btst	#5,$22(a0)
0000E4B4 6600                       		bne.s	Obj41_BounceLR
0000E4B6 4E75                       		rts	
0000E4B8                            ; ===========================================================================
0000E4B8                            
0000E4B8                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E4B8 5428 0024                  		addq.b	#2,$24(a0)
0000E4BC 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E4C2 5069 0008                  		addq.w	#8,8(a1)
0000E4C6 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E4CC 6600                       		bne.s	loc_DC36	; if yes, branch
0000E4CE 0469 0010 0008             		subi.w	#$10,8(a1)
0000E4D4 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E4D8                            
0000E4D8                            loc_DC36:
0000E4D8 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E4DE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E4E4 0869 0000 0022             		bchg	#0,$22(a1)
0000E4EA 0829 0002 0022             		btst	#2,$22(a1)
0000E4F0 6600                       		bne.s	loc_DC56
0000E4F2 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E4F8                            
0000E4F8                            loc_DC56:
0000E4F8 08A8 0005 0022             		bclr	#5,$22(a0)
0000E4FE 08A9 0005 0022             		bclr	#5,$22(a1)
0000E504 303C 00CC                  		move.w	#$CC,d0
0000E508 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E50E                            
0000E50E                            Obj41_AniLR:				; XREF: Obj41_Index
0000E50E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E514 6000 CA0C                  		bra.w	AnimateSprite
0000E518                            ; ===========================================================================
0000E518                            
0000E518                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E518 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E51E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E522 4E75                       		rts	
0000E524                            ; ===========================================================================
0000E524                            
0000E524                            Obj41_Dwn:				; XREF: Obj41_Index
0000E524 323C 001B                  		move.w	#$1B,d1
0000E528 343C 0008                  		move.w	#8,d2
0000E52C 363C 0010                  		move.w	#$10,d3
0000E530 3828 0008                  		move.w	8(a0),d4
0000E534 6100 0000                  		bsr.w	SolidObject
0000E538 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E53E 6600                       		bne.s	loc_DCA4
0000E540 117C 000E 0024             		move.b	#$E,$24(a0)
0000E546                            
0000E546                            loc_DCA4:
0000E546 4A28 0025                  		tst.b	$25(a0)
0000E54A 6600                       		bne.s	locret_DCAE
0000E54C 4A44                       		tst.w	d4
0000E54E 6B00                       		bmi.s	Obj41_BounceDwn
0000E550                            
0000E550                            locret_DCAE:
0000E550 4E75                       		rts	
0000E552                            ; ===========================================================================
0000E552                            
0000E552                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E552 5428 0024                  		addq.b	#2,$24(a0)
0000E556 5169 000C                  		subq.w	#8,$C(a1)
0000E55A 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E560 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E564 08E9 0001 0022             		bset	#1,$22(a1)
0000E56A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E570 137C 0002 0024             		move.b	#2,$24(a1)
0000E576 08A8 0003 0022             		bclr	#3,$22(a0)
0000E57C 4228 0025                  		clr.b	$25(a0)
0000E580 303C 00CC                  		move.w	#$CC,d0
0000E584 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E58A                            
0000E58A                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E58A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E590 6000 C990                  		bra.w	AnimateSprite
0000E594                            ; ===========================================================================
0000E594                            
0000E594                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E594 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E59A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E59E 4E75                       		rts	
0000E5A0                            ; ===========================================================================
0000E5A0                            Ani_obj41:
0000E5A0                            	include "_anim\obj41.asm"
0000E5A0                            ; ---------------------------------------------------------------------------
0000E5A0                            ; Animation script - springs
0000E5A0                            ; ---------------------------------------------------------------------------
0000E5A0 0000                       		dc.w byte_DD02-Ani_obj41
0000E5A2 0000                       		dc.w byte_DD0E-Ani_obj41
0000E5A4 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E5B0 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E5BC                            		even
0000E5BC                            		even
0000E5BC                            
0000E5BC                            ; ---------------------------------------------------------------------------
0000E5BC                            ; Sprite mappings - springs
0000E5BC                            ; ---------------------------------------------------------------------------
0000E5BC                            Map_obj41:
0000E5BC                            	include "_maps\obj41.asm"
0000E5BC                            ; ---------------------------------------------------------------------------
0000E5BC                            ; Sprite mappings - springs
0000E5BC                            ; ---------------------------------------------------------------------------
0000E5BC 0000                       		dc.w byte_DD26-Map_obj41
0000E5BE 0000                       		dc.w byte_DD31-Map_obj41
0000E5C0 0000                       		dc.w byte_DD37-Map_obj41
0000E5C2 0000                       		dc.w byte_DD47-Map_obj41
0000E5C4 0000                       		dc.w byte_DD4D-Map_obj41
0000E5C6 0000                       		dc.w byte_DD53-Map_obj41
0000E5C8 02                         byte_DD26:	dc.b 2
0000E5C9 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E5CE 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E5D3 01                         byte_DD31:	dc.b 1
0000E5D4 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E5D9 03                         byte_DD37:	dc.b 3
0000E5DA E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E5DF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E5E4 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E5E9 01                         byte_DD47:	dc.b 1
0000E5EA F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E5EF 01                         byte_DD4D:	dc.b 1
0000E5F0 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E5F5 04                         byte_DD53:	dc.b 4
0000E5F6 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E5FB F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E600 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E605 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E60A                            		even
0000E60A                            		even
0000E60A                            
0000E60A                            ; ===========================================================================
0000E60A                            ; ---------------------------------------------------------------------------
0000E60A                            ; Object 42 - Newtron enemy (GHZ)
0000E60A                            ; ---------------------------------------------------------------------------
0000E60A                            
0000E60A                            Obj42:					; XREF: Obj_Index
0000E60A 7000                       		moveq	#0,d0
0000E60C 1028 0024                  		move.b	$24(a0),d0
0000E610 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E614 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E618                            ; ===========================================================================
0000E618 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E61A 0000                       		dc.w Obj42_Action-Obj42_Index
0000E61C 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E61E                            ; ===========================================================================
0000E61E                            
0000E61E                            Obj42_Main:				; XREF: Obj42_Index
0000E61E 5428 0024                  		addq.b	#2,$24(a0)
0000E622 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E62A 317C 049B 0002             		move.w	#$49B,2(a0)
0000E630 117C 0004 0001             		move.b	#4,1(a0)
0000E636 117C 0004 0018             		move.b	#4,$18(a0)
0000E63C 117C 0014 0019             		move.b	#$14,$19(a0)
0000E642 117C 0010 0016             		move.b	#$10,$16(a0)
0000E648 117C 0008 0017             		move.b	#8,$17(a0)
0000E64E                            
0000E64E                            Obj42_Action:				; XREF: Obj42_Index
0000E64E 7000                       		moveq	#0,d0
0000E650 1028 0025                  		move.b	$25(a0),d0
0000E654 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E658 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E65C 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E662 6100 C8BE                  		bsr.w	AnimateSprite
0000E666 6000 0000                  		bra.w	MarkObjGone
0000E66A                            ; ===========================================================================
0000E66A 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E66C 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E66E 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E670 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E672 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E674                            ; ===========================================================================
0000E674                            
0000E674                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E674 08E8 0000 0022             		bset	#0,$22(a0)
0000E67A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E67E 9068 0008                  		sub.w	8(a0),d0
0000E682 6400                       		bcc.s	loc_DDEA
0000E684 4440                       		neg.w	d0
0000E686 08A8 0000 0022             		bclr	#0,$22(a0)
0000E68C                            
0000E68C                            loc_DDEA:
0000E68C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E690 6400                       		bcc.s	locret_DE12	; if not, branch
0000E692 5428 0025                  		addq.b	#2,$25(a0)
0000E696 117C 0001 001C             		move.b	#1,$1C(a0)
0000E69C 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E6A0 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E6A2 317C 249B 0002             		move.w	#$249B,2(a0)
0000E6A8 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E6AE 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E6B4                            
0000E6B4                            locret_DE12:
0000E6B4 4E75                       		rts	
0000E6B6                            ; ===========================================================================
0000E6B6                            
0000E6B6                            Obj42_Type00:				; XREF: Obj42_Index2
0000E6B6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E6BC 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E6BE 08E8 0000 0022             		bset	#0,$22(a0)
0000E6C4 3038 D008                  		move.w	($FFFFD008).w,d0
0000E6C8 9068 0008                  		sub.w	8(a0),d0
0000E6CC 6400                       		bcc.s	locret_DE32
0000E6CE 08A8 0000 0022             		bclr	#0,$22(a0)
0000E6D4                            
0000E6D4                            locret_DE32:
0000E6D4 4E75                       		rts	
0000E6D6                            ; ===========================================================================
0000E6D6                            
0000E6D6                            Obj42_Fall:				; XREF: Obj42_Type00
0000E6D6 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E6DC 6600                       		bne.s	loc_DE42
0000E6DE 117C 000C 0020             		move.b	#$C,$20(a0)
0000E6E4                            
0000E6E4                            loc_DE42:
0000E6E4 6100 F72A                  		bsr.w	ObjectFall
0000E6E8 6100 0000                  		bsr.w	ObjHitFloor
0000E6EC 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E6EE 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E6F0 D368 000C                  		add.w	d1,$C(a0)
0000E6F4 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E6FA 5428 0025                  		addq.b	#2,$25(a0)
0000E6FE 117C 0002 001C             		move.b	#2,$1C(a0)
0000E704 0828 0005 0002             		btst	#5,2(a0)
0000E70A 6700                       		beq.s	Obj42_Move
0000E70C 5228 001C                  		addq.b	#1,$1C(a0)
0000E710                            
0000E710                            Obj42_Move:
0000E710 117C 000D 0020             		move.b	#$D,$20(a0)
0000E716 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E71C 0828 0000 0022             		btst	#0,$22(a0)
0000E722 6600                       		bne.s	locret_DE86
0000E724 4468 0010                  		neg.w	$10(a0)
0000E728                            
0000E728                            locret_DE86:
0000E728 4E75                       		rts	
0000E72A                            ; ===========================================================================
0000E72A                            
0000E72A                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E72A 6100 F756                  		bsr.w	SpeedToPos
0000E72E 6100 0000                  		bsr.w	ObjHitFloor
0000E732 0C41 FFF8                  		cmpi.w	#-8,d1
0000E736 6D00                       		blt.s	loc_DEA2
0000E738 0C41 000C                  		cmpi.w	#$C,d1
0000E73C 6C00                       		bge.s	loc_DEA2
0000E73E D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E742 4E75                       		rts	
0000E744                            ; ===========================================================================
0000E744                            
0000E744                            loc_DEA2:
0000E744 5428 0025                  		addq.b	#2,$25(a0)
0000E748 4E75                       		rts	
0000E74A                            ; ===========================================================================
0000E74A                            
0000E74A                            Obj42_Speed:				; XREF: Obj42_Index2
0000E74A 6100 F736                  		bsr.w	SpeedToPos
0000E74E 4E75                       		rts	
0000E750                            ; ===========================================================================
0000E750                            
0000E750                            Obj42_Type01:				; XREF: Obj42_Index2
0000E750 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E756 6600                       		bne.s	Obj42_FireMissile
0000E758 117C 000C 0020             		move.b	#$C,$20(a0)
0000E75E                            
0000E75E                            Obj42_FireMissile:
0000E75E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E764 6600                       		bne.s	locret_DF14
0000E766 4A28 0032                  		tst.b	$32(a0)
0000E76A 6600                       		bne.s	locret_DF14
0000E76C 117C 0001 0032             		move.b	#1,$32(a0)
0000E772 6100 FBBA                  		bsr.w	SingleObjLoad
0000E776 6600                       		bne.s	locret_DF14
0000E778 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E77C 3368 0008 0008             		move.w	8(a0),8(a1)
0000E782 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E788 5169 000C                  		subq.w	#8,$C(a1)
0000E78C 337C 0200 0010             		move.w	#$200,$10(a1)
0000E792 303C 0014                  		move.w	#$14,d0
0000E796 0828 0000 0022             		btst	#0,$22(a0)
0000E79C 6600                       		bne.s	loc_DF04
0000E79E 4440                       		neg.w	d0
0000E7A0 4469 0010                  		neg.w	$10(a1)
0000E7A4                            
0000E7A4                            loc_DF04:
0000E7A4 D169 0008                  		add.w	d0,8(a1)
0000E7A8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E7AE 137C 0001 0028             		move.b	#1,$28(a1)
0000E7B4                            
0000E7B4                            locret_DF14:
0000E7B4 4E75                       		rts	
0000E7B6                            ; ===========================================================================
0000E7B6                            
0000E7B6                            Obj42_Delete:				; XREF: Obj42_Index
0000E7B6 6000 F72C                  		bra.w	DeleteObject
0000E7BA                            ; ===========================================================================
0000E7BA                            Ani_obj42:
0000E7BA                            	include "_anim\obj42.asm"
0000E7BA                            ; ---------------------------------------------------------------------------
0000E7BA                            ; Animation script - Newtron enemy
0000E7BA                            ; ---------------------------------------------------------------------------
0000E7BA 0000                       		dc.w byte_DF24-Ani_obj42
0000E7BC 0000                       		dc.w byte_DF28-Ani_obj42
0000E7BE 0000                       		dc.w byte_DF30-Ani_obj42
0000E7C0 0000                       		dc.w byte_DF34-Ani_obj42
0000E7C2 0000                       		dc.w byte_DF38-Ani_obj42
0000E7C4 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E7C8 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E7D0 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E7D4 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E7D8 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E7E2                            		even
0000E7E2                            		even
0000E7E2                            
0000E7E2                            ; ---------------------------------------------------------------------------
0000E7E2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E7E2                            ; ---------------------------------------------------------------------------
0000E7E2                            Map_obj42:
0000E7E2                            	include "_maps\obj42.asm"
0000E7E2                            ; ---------------------------------------------------------------------------
0000E7E2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E7E2                            ; ---------------------------------------------------------------------------
0000E7E2 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E7E6 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E7EA 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E7EE 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E7F2 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E7F6 0000                       		dc.w byte_DFF8-Map_obj42
0000E7F8 03                         byte_DF58:	dc.b 3
0000E7F9 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E7FE F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E803 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E808 03                         byte_DF68:	dc.b 3
0000E809 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E80E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E813 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E818 03                         byte_DF78:	dc.b 3
0000E819 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E81E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E823 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E828 04                         byte_DF88:	dc.b 4
0000E829 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E82E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E833 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E838 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E83D 03                         byte_DF9D:	dc.b 3
0000E83E F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E843 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E848 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E84D 02                         byte_DFAD:	dc.b 2
0000E84E F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E853 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E858 03                         byte_DFB8:	dc.b 3
0000E859 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E85E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E863 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E868 03                         byte_DFC8:	dc.b 3
0000E869 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E86E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E873 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E878 03                         byte_DFD8:	dc.b 3
0000E879 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E87E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E883 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E888 03                         byte_DFE8:	dc.b 3
0000E889 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E88E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E893 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E898 00                         byte_DFF8:	dc.b 0
0000E89A 00                         		even
0000E89A 00                         		even
0000E89A                            
0000E89A                            ; ===========================================================================
0000E89A                            ; ---------------------------------------------------------------------------
0000E89A                            ; Object 43 - Roller enemy (SYZ)
0000E89A                            ; ---------------------------------------------------------------------------
0000E89A                            
0000E89A                            Obj43:					; XREF: Obj_Index
0000E89A 7000                       		moveq	#0,d0
0000E89C 1028 0024                  		move.b	$24(a0),d0
0000E8A0 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E8A4 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E8A8                            ; ===========================================================================
0000E8A8 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E8AA 0000                       		dc.w Obj43_Action-Obj43_Index
0000E8AC                            ; ===========================================================================
0000E8AC                            
0000E8AC                            Obj43_Main:				; XREF: Obj43_Index
0000E8AC 117C 000E 0016             		move.b	#$E,$16(a0)
0000E8B2 117C 0008 0017             		move.b	#8,$17(a0)
0000E8B8 6100 F556                  		bsr.w	ObjectFall
0000E8BC 6100 0000                  		bsr.w	ObjHitFloor
0000E8C0 4A41                       		tst.w	d1
0000E8C2 6A00                       		bpl.s	locret_E052
0000E8C4 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E8C8 317C 0000 0012             		move.w	#0,$12(a0)
0000E8CE 5428 0024                  		addq.b	#2,$24(a0)
0000E8D2 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E8DA 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E8E0 117C 0004 0001             		move.b	#4,1(a0)
0000E8E6 117C 0004 0018             		move.b	#4,$18(a0)
0000E8EC 117C 0010 0019             		move.b	#$10,$19(a0)
0000E8F2                            
0000E8F2                            locret_E052:
0000E8F2 4E75                       		rts	
0000E8F4                            ; ===========================================================================
0000E8F4                            
0000E8F4                            Obj43_Action:				; XREF: Obj43_Index
0000E8F4 7000                       		moveq	#0,d0
0000E8F6 1028 0025                  		move.b	$25(a0),d0
0000E8FA 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E8FE 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E902 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E908 6100 C618                  		bsr.w	AnimateSprite
0000E90C 3028 0008                  		move.w	8(a0),d0
0000E910 0240 FF80                  		andi.w	#$FF80,d0
0000E914 3238 F700                  		move.w	($FFFFF700).w,d1
0000E918 0441 0080                  		subi.w	#$80,d1
0000E91C 0241 FF80                  		andi.w	#$FF80,d1
0000E920 9041                       		sub.w	d1,d0
0000E922 0C40 0280                  		cmpi.w	#$280,d0
0000E926 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E92A 6000 F57C                  		bra.w	DisplaySprite
0000E92E                            ; ===========================================================================
0000E92E                            
0000E92E                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E92E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E932 7000                       		moveq	#0,d0
0000E934 1028 0023                  		move.b	$23(a0),d0
0000E938 6700                       		beq.s	Obj43_Delete
0000E93A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E940                            
0000E940                            Obj43_Delete:
0000E940 6000 F5A2                  		bra.w	DeleteObject
0000E944                            ; ===========================================================================
0000E944 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E946 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E948 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E94A 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E94C                            ; ===========================================================================
0000E94C                            
0000E94C                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E94C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E950 0440 0100                  		subi.w	#$100,d0
0000E954 6500                       		bcs.s	loc_E0D2
0000E956 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E95A 6500                       		bcs.s	loc_E0D2
0000E95C 5828 0025                  		addq.b	#4,$25(a0)
0000E960 117C 0002 001C             		move.b	#2,$1C(a0)
0000E966 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E96C 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E972                            
0000E972                            loc_E0D2:
0000E972 588F                       		addq.l	#4,sp
0000E974 4E75                       		rts	
0000E976                            ; ===========================================================================
0000E976                            
0000E976                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E976 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E97C 6700                       		beq.s	loc_E0F8
0000E97E 5368 0030                  		subq.w	#1,$30(a0)
0000E982 6A00                       		bpl.s	locret_E0F6
0000E984 117C 0001 001C             		move.b	#1,$1C(a0)
0000E98A 317C 0700 0010             		move.w	#$700,$10(a0)
0000E990 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E996                            
0000E996                            locret_E0F6:
0000E996 4E75                       		rts	
0000E998                            ; ===========================================================================
0000E998                            
0000E998                            loc_E0F8:
0000E998 5428 0025                  		addq.b	#2,$25(a0)
0000E99C 4E75                       		rts	
0000E99E                            ; ===========================================================================
0000E99E                            
0000E99E                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E99E 6100 0000                  		bsr.w	Obj43_Stop
0000E9A2 6100 F4DE                  		bsr.w	SpeedToPos
0000E9A6 6100 0000                  		bsr.w	ObjHitFloor
0000E9AA 0C41 FFF8                  		cmpi.w	#-8,d1
0000E9AE 6D00                       		blt.s	Obj43_Jump
0000E9B0 0C41 000C                  		cmpi.w	#$C,d1
0000E9B4 6C00                       		bge.s	Obj43_Jump
0000E9B6 D368 000C                  		add.w	d1,$C(a0)
0000E9BA 4E75                       		rts	
0000E9BC                            ; ===========================================================================
0000E9BC                            
0000E9BC                            Obj43_Jump:
0000E9BC 5428 0025                  		addq.b	#2,$25(a0)
0000E9C0 08E8 0000 0032             		bset	#0,$32(a0)
0000E9C6 6700                       		beq.s	locret_E12E
0000E9C8 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E9CE                            
0000E9CE                            locret_E12E:
0000E9CE 4E75                       		rts	
0000E9D0                            ; ===========================================================================
0000E9D0                            
0000E9D0                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E9D0 6100 F43E                  		bsr.w	ObjectFall
0000E9D4 4A68 0012                  		tst.w	$12(a0)
0000E9D8 6B00                       		bmi.s	locret_E150
0000E9DA 6100 0000                  		bsr.w	ObjHitFloor
0000E9DE 4A41                       		tst.w	d1
0000E9E0 6A00                       		bpl.s	locret_E150
0000E9E2 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E9E6 5528 0025                  		subq.b	#2,$25(a0)
0000E9EA 317C 0000 0012             		move.w	#0,$12(a0)
0000E9F0                            
0000E9F0                            locret_E150:
0000E9F0 4E75                       		rts	
0000E9F2                            
0000E9F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9F2                            
0000E9F2                            
0000E9F2                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E9F2 4A28 0032                  		tst.b	$32(a0)
0000E9F6 6B00                       		bmi.s	locret_E188
0000E9F8 3038 D008                  		move.w	($FFFFD008).w,d0
0000E9FC 0440 0030                  		subi.w	#$30,d0
0000EA00 9068 0008                  		sub.w	8(a0),d0
0000EA04 6400                       		bcc.s	locret_E188
0000EA06 117C 0000 001C             		move.b	#0,$1C(a0)
0000EA0C 117C 000E 0020             		move.b	#$E,$20(a0)
0000EA12 4268 0010                  		clr.w	$10(a0)
0000EA16 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EA1C 117C 0002 0025             		move.b	#2,$25(a0)
0000EA22 08E8 0007 0032             		bset	#7,$32(a0)
0000EA28                            
0000EA28                            locret_E188:
0000EA28 4E75                       		rts	
0000EA2A                            ; End of function Obj43_Stop
0000EA2A                            
0000EA2A                            ; ===========================================================================
0000EA2A                            Ani_obj43:
0000EA2A                            	include "_anim\obj43.asm"
0000EA2A                            ; ---------------------------------------------------------------------------
0000EA2A                            ; Animation script - Roller enemy
0000EA2A                            ; ---------------------------------------------------------------------------
0000EA2A 0000                       		dc.w byte_E190-Ani_obj43
0000EA2C 0000                       		dc.w byte_E196-Ani_obj43
0000EA2E 0000                       		dc.w byte_E19C-Ani_obj43
0000EA30 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EA36 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EA3C 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EA42 00                         		even
0000EA42 00                         		even
0000EA42                            
0000EA42                            ; ---------------------------------------------------------------------------
0000EA42                            ; Sprite mappings - Roller enemy (SYZ)
0000EA42                            ; ---------------------------------------------------------------------------
0000EA42                            Map_obj43:
0000EA42                            	include "_maps\obj43.asm"
0000EA42                            Map_61da:
0000EA42 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EA44 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EA46 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EA48 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EA4A 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EA4C 02                         Map_61da_A: 	dc.b $2
0000EA4D DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EA52 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EA57 02                         Map_61da_15: 	dc.b $2
0000EA58 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EA5D FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EA62 01                         Map_61da_20: 	dc.b $1
0000EA63 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EA68 01                         Map_61da_26: 	dc.b $1
0000EA69 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EA6E 01                         Map_61da_2C: 	dc.b $1
0000EA6F F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EA74                            	even
0000EA74                            	even
0000EA74                            
0000EA74                            ; ===========================================================================
0000EA74                            ; ---------------------------------------------------------------------------
0000EA74                            ; Object 44 - walls (GHZ)
0000EA74                            ; ---------------------------------------------------------------------------
0000EA74                            
0000EA74                            Obj44:					; XREF: Obj_Index
0000EA74 7000                       		moveq	#0,d0
0000EA76 1028 0024                  		move.b	$24(a0),d0
0000EA7A 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EA7E 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EA82                            ; ===========================================================================
0000EA82 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EA84 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EA86 0000                       		dc.w Obj44_Display-Obj44_Index
0000EA88                            ; ===========================================================================
0000EA88                            
0000EA88                            Obj44_Main:				; XREF: Obj44_Index
0000EA88 5428 0024                  		addq.b	#2,$24(a0)
0000EA8C 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EA94 317C 434C 0002             		move.w	#$434C,2(a0)
0000EA9A 0028 0004 0001             		ori.b	#4,1(a0)
0000EAA0 117C 0008 0019             		move.b	#8,$19(a0)
0000EAA6 117C 0006 0018             		move.b	#6,$18(a0)
0000EAAC 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EAB2 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EAB8 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EABA 5428 0024                  		addq.b	#2,$24(a0)
0000EABE 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EAC0                            ; ===========================================================================
0000EAC0                            
0000EAC0                            Obj44_Solid:				; XREF: Obj44_Index
0000EAC0 323C 0013                  		move.w	#$13,d1
0000EAC4 343C 0028                  		move.w	#$28,d2
0000EAC8 6100 A6B4                  		bsr.w	Obj44_SolidWall
0000EACC                            
0000EACC                            Obj44_Display:				; XREF: Obj44_Index
0000EACC 6100 F3DA                  		bsr.w	DisplaySprite
0000EAD0 3028 0008                  		move.w	8(a0),d0
0000EAD4 0240 FF80                  		andi.w	#$FF80,d0
0000EAD8 3238 F700                  		move.w	($FFFFF700).w,d1
0000EADC 0441 0080                  		subi.w	#$80,d1
0000EAE0 0241 FF80                  		andi.w	#$FF80,d1
0000EAE4 9041                       		sub.w	d1,d0
0000EAE6 0C40 0280                  		cmpi.w	#$280,d0
0000EAEA 6200 F3F8                  		bhi.w	DeleteObject
0000EAEE 4E75                       		rts	
0000EAF0                            ; ===========================================================================
0000EAF0                            ; ---------------------------------------------------------------------------
0000EAF0                            ; Sprite mappings - walls (GHZ)
0000EAF0                            ; ---------------------------------------------------------------------------
0000EAF0                            Map_obj44:
0000EAF0                            	include "_maps\obj44.asm"
0000EAF0                            ; ---------------------------------------------------------------------------
0000EAF0                            ; Sprite mappings - walls (GHZ)
0000EAF0                            ; ---------------------------------------------------------------------------
0000EAF0 0000                       		dc.w byte_E256-Map_obj44
0000EAF2 0000                       		dc.w byte_E26B-Map_obj44
0000EAF4 0000                       		dc.w byte_E280-Map_obj44
0000EAF6 04                         byte_E256:	dc.b 4
0000EAF7 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EAFC F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EB01 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EB06 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EB0B 04                         byte_E26B:	dc.b 4
0000EB0C E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EB11 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EB16 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EB1B 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EB20 04                         byte_E280:	dc.b 4
0000EB21 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EB26 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EB2B 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EB30 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EB36 00                         		even
0000EB36 00                         		even
0000EB36                            
0000EB36                            ; ===========================================================================
0000EB36                            ; ---------------------------------------------------------------------------
0000EB36                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EB36                            ; ---------------------------------------------------------------------------
0000EB36                            
0000EB36                            Obj13:					; XREF: Obj_Index
0000EB36 7000                       		moveq	#0,d0
0000EB38 1028 0024                  		move.b	$24(a0),d0
0000EB3C 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EB40 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EB44 6000 0000                  		bra.w	Obj14_ChkDel
0000EB48                            ; ===========================================================================
0000EB48 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EB4A 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EB4C                            ; ---------------------------------------------------------------------------
0000EB4C                            ;
0000EB4C                            ; Lava ball production rates
0000EB4C                            ;
0000EB4C 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EB52                            ; ===========================================================================
0000EB52                            
0000EB52                            Obj13_Main:				; XREF: Obj13_Index
0000EB52 5428 0024                  		addq.b	#2,$24(a0)
0000EB56 1028 0028                  		move.b	$28(a0),d0
0000EB5A E848                       		lsr.w	#4,d0
0000EB5C 0240 000F                  		andi.w	#$F,d0
0000EB60 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EB66 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EB6C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EB72                            
0000EB72                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EB72 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EB76 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EB78 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EB7E 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EB82 6600                       		bne.s	locret_E302
0000EB84 6100 F7A8                  		bsr.w	SingleObjLoad
0000EB88 6600                       		bne.s	locret_E302
0000EB8A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EB8E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EB94 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EB9A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EBA0                            
0000EBA0                            locret_E302:
0000EBA0 4E75                       		rts	
0000EBA2                            ; ===========================================================================
0000EBA2                            ; ---------------------------------------------------------------------------
0000EBA2                            ; Object 14 - lava balls (MZ, SLZ)
0000EBA2                            ; ---------------------------------------------------------------------------
0000EBA2                            
0000EBA2                            Obj14:					; XREF: Obj_Index
0000EBA2 7000                       		moveq	#0,d0
0000EBA4 1028 0024                  		move.b	$24(a0),d0
0000EBA8 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EBAC 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EBB0 6000 F2F6                  		bra.w	DisplaySprite
0000EBB4                            ; ===========================================================================
0000EBB4 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EBB6 0000                       		dc.w Obj14_Action-Obj14_Index
0000EBB8 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EBBA                            
0000EBBA FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EBC4 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EBCC                            ; ===========================================================================
0000EBCC                            
0000EBCC                            Obj14_Main:				; XREF: Obj14_Index
0000EBCC 5428 0024                  		addq.b	#2,$24(a0)
0000EBD0 117C 0008 0016             		move.b	#8,$16(a0)
0000EBD6 117C 0008 0017             		move.b	#8,$17(a0)
0000EBDC 217C 0000 BB20 0004        		move.l	#Map_obj14,4(a0)
0000EBE4 317C 0345 0002             		move.w	#$345,2(a0)
0000EBEA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EBF0 6600                       		bne.s	loc_E35A
0000EBF2 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EBF8                            
0000EBF8                            loc_E35A:
0000EBF8 117C 0004 0001             		move.b	#4,1(a0)
0000EBFE 117C 0003 0018             		move.b	#3,$18(a0)
0000EC04 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EC0A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EC10 4A28 0029                  		tst.b	$29(a0)
0000EC14 6700                       		beq.s	Obj14_SetSpeed
0000EC16 5428 0018                  		addq.b	#2,$18(a0)
0000EC1A                            
0000EC1A                            Obj14_SetSpeed:
0000EC1A 7000                       		moveq	#0,d0
0000EC1C 1028 0028                  		move.b	$28(a0),d0
0000EC20 D040                       		add.w	d0,d0
0000EC22 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EC28 117C 0008 0019             		move.b	#8,$19(a0)
0000EC2E 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EC34 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EC36 117C 0010 0019             		move.b	#$10,$19(a0)
0000EC3C 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EC42 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EC48 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EC4E                            
0000EC4E                            Obj14_PlaySnd:
0000EC4E 303C 00AE                  		move.w	#$AE,d0
0000EC52 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EC58                            
0000EC58                            Obj14_Action:				; XREF: Obj14_Index
0000EC58 7000                       		moveq	#0,d0
0000EC5A 1028 0028                  		move.b	$28(a0),d0
0000EC5E D040                       		add.w	d0,d0
0000EC60 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EC64 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EC68 6100 F218                  		bsr.w	SpeedToPos
0000EC6C 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EC72 6100 C2AE                  		bsr.w	AnimateSprite
0000EC76                            
0000EC76                            Obj14_ChkDel:				; XREF: Obj13
0000EC76 3028 0008                  		move.w	8(a0),d0
0000EC7A 0240 FF80                  		andi.w	#$FF80,d0
0000EC7E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC82 0441 0080                  		subi.w	#$80,d1
0000EC86 0241 FF80                  		andi.w	#$FF80,d1
0000EC8A 9041                       		sub.w	d1,d0
0000EC8C 0C40 0280                  		cmpi.w	#$280,d0
0000EC90 6200 F252                  		bhi.w	DeleteObject
0000EC94 4E75                       		rts	
0000EC96                            ; ===========================================================================
0000EC96 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EC9A 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EC9E 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000ECA2 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000ECA6 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000ECA8                            ; ===========================================================================
0000ECA8                            ; lavaball types 00-03 fly up and fall back down
0000ECA8                            
0000ECA8                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000ECA8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000ECAE 3028 0030                  		move.w	$30(a0),d0
0000ECB2 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000ECB6 6400                       		bcc.s	loc_E41E	; if not, branch
0000ECB8 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000ECBC                            
0000ECBC                            loc_E41E:
0000ECBC 08A8 0001 0022             		bclr	#1,$22(a0)
0000ECC2 4A68 0012                  		tst.w	$12(a0)
0000ECC6 6A00                       		bpl.s	locret_E430
0000ECC8 08E8 0001 0022             		bset	#1,$22(a0)
0000ECCE                            
0000ECCE                            locret_E430:
0000ECCE 4E75                       		rts	
0000ECD0                            ; ===========================================================================
0000ECD0                            ; lavaball type	04 flies up until it hits the ceiling
0000ECD0                            
0000ECD0                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000ECD0 08E8 0001 0022             		bset	#1,$22(a0)
0000ECD6 6100 0000                  		bsr.w	ObjHitCeiling
0000ECDA 4A41                       		tst.w	d1
0000ECDC 6A00                       		bpl.s	locret_E452
0000ECDE 117C 0008 0028             		move.b	#8,$28(a0)
0000ECE4 117C 0001 001C             		move.b	#1,$1C(a0)
0000ECEA 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000ECF0                            
0000ECF0                            locret_E452:
0000ECF0 4E75                       		rts	
0000ECF2                            ; ===========================================================================
0000ECF2                            ; lavaball type	05 falls down until it hits the	floor
0000ECF2                            
0000ECF2                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000ECF2 08A8 0001 0022             		bclr	#1,$22(a0)
0000ECF8 6100 0000                  		bsr.w	ObjHitFloor
0000ECFC 4A41                       		tst.w	d1
0000ECFE 6A00                       		bpl.s	locret_E474
0000ED00 117C 0008 0028             		move.b	#8,$28(a0)
0000ED06 117C 0001 001C             		move.b	#1,$1C(a0)
0000ED0C 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000ED12                            
0000ED12                            locret_E474:
0000ED12 4E75                       		rts	
0000ED14                            ; ===========================================================================
0000ED14                            ; lavaball types 06-07 move sideways
0000ED14                            
0000ED14                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000ED14 08E8 0000 0022             		bset	#0,$22(a0)
0000ED1A 76F8                       		moveq	#-8,d3
0000ED1C 6100 0000                  		bsr.w	ObjHitWallLeft
0000ED20 4A41                       		tst.w	d1
0000ED22 6A00                       		bpl.s	locret_E498
0000ED24 117C 0008 0028             		move.b	#8,$28(a0)
0000ED2A 117C 0003 001C             		move.b	#3,$1C(a0)
0000ED30 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ED36                            
0000ED36                            locret_E498:
0000ED36 4E75                       		rts	
0000ED38                            ; ===========================================================================
0000ED38                            
0000ED38                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000ED38 08A8 0000 0022             		bclr	#0,$22(a0)
0000ED3E 7608                       		moveq	#8,d3
0000ED40 6100 0000                  		bsr.w	ObjHitWallRight
0000ED44 4A41                       		tst.w	d1
0000ED46 6A00                       		bpl.s	locret_E4BC
0000ED48 117C 0008 0028             		move.b	#8,$28(a0)
0000ED4E 117C 0003 001C             		move.b	#3,$1C(a0)
0000ED54 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ED5A                            
0000ED5A                            locret_E4BC:
0000ED5A 4E75                       		rts	
0000ED5C                            ; ===========================================================================
0000ED5C                            
0000ED5C                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000ED5C 4E75                       		rts	
0000ED5E                            ; ===========================================================================
0000ED5E                            
0000ED5E                            Obj14_Delete:				; XREF: Obj14_Index
0000ED5E 6000 F184                  		bra.w	DeleteObject
0000ED62                            ; ===========================================================================
0000ED62                            Ani_obj14:
0000ED62                            	include "_anim\obj14.asm"
0000ED62                            ; ---------------------------------------------------------------------------
0000ED62                            ; Animation script - lava balls
0000ED62                            ; ---------------------------------------------------------------------------
0000ED62 0000                       		dc.w byte_E4CC-Ani_obj14
0000ED64 0000                       		dc.w byte_E4D2-Ani_obj14
0000ED66 0000                       		dc.w byte_E4D6-Ani_obj14
0000ED68 0000                       		dc.w byte_E4DC-Ani_obj14
0000ED6A 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000ED70 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000ED74 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000ED7A 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000ED7E                            		even
0000ED7E                            		even
0000ED7E                            
0000ED7E                            ; ===========================================================================
0000ED7E                            ; ---------------------------------------------------------------------------
0000ED7E                            ; Object 6D - flame thrower (SBZ)
0000ED7E                            ; ---------------------------------------------------------------------------
0000ED7E                            
0000ED7E                            Obj6D:					; XREF: Obj_Index
0000ED7E 7000                       		moveq	#0,d0
0000ED80 1028 0024                  		move.b	$24(a0),d0
0000ED84 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000ED88 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000ED8C                            ; ===========================================================================
0000ED8C 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000ED8E 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000ED90                            ; ===========================================================================
0000ED90                            
0000ED90                            Obj6D_Main:				; XREF: Obj6D_Index
0000ED90 5428 0024                  		addq.b	#2,$24(a0)
0000ED94 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000ED9C 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EDA2 0028 0004 0001             		ori.b	#4,1(a0)
0000EDA8 117C 0001 0018             		move.b	#1,$18(a0)
0000EDAE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EDB4 117C 000C 0019             		move.b	#$C,$19(a0)
0000EDBA 1028 0028                  		move.b	$28(a0),d0
0000EDBE 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EDC2 D040                       		add.w	d0,d0		; multiply by 2
0000EDC4 3140 0030                  		move.w	d0,$30(a0)
0000EDC8 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EDCC 1028 0028                  		move.b	$28(a0),d0
0000EDD0 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EDD4 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EDD6 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EDDA 117C 000A 0036             		move.b	#$A,$36(a0)
0000EDE0 0828 0001 0022             		btst	#1,$22(a0)
0000EDE6 6700                       		beq.s	Obj6D_Action
0000EDE8 117C 0002 001C             		move.b	#2,$1C(a0)
0000EDEE 117C 0015 0036             		move.b	#$15,$36(a0)
0000EDF4                            
0000EDF4                            Obj6D_Action:				; XREF: Obj6D_Index
0000EDF4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EDF8 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EDFA 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EE00 0868 0000 001C             		bchg	#0,$1C(a0)
0000EE06 6700                       		beq.s	loc_E57A
0000EE08 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EE0E 303C 00B3                  		move.w	#$B3,d0
0000EE12 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000EE18                            
0000EE18                            loc_E57A:
0000EE18 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EE1E 6100 C102                  		bsr.w	AnimateSprite
0000EE22 117C 0000 0020             		move.b	#0,$20(a0)
0000EE28 1028 0036                  		move.b	$36(a0),d0
0000EE2C B028 001A                  		cmp.b	$1A(a0),d0
0000EE30 6600                       		bne.s	Obj6D_ChkDel
0000EE32 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EE38                            
0000EE38                            Obj6D_ChkDel:
0000EE38 3028 0008                  		move.w	8(a0),d0
0000EE3C 0240 FF80                  		andi.w	#$FF80,d0
0000EE40 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE44 0441 0080                  		subi.w	#$80,d1
0000EE48 0241 FF80                  		andi.w	#$FF80,d1
0000EE4C 9041                       		sub.w	d1,d0
0000EE4E 0C40 0280                  		cmpi.w	#$280,d0
0000EE52 6200 F090                  		bhi.w	DeleteObject
0000EE56 6000 F050                  		bra.w	DisplaySprite
0000EE5A                            ; ===========================================================================
0000EE5A                            Ani_obj6D:
0000EE5A                            	include "_anim\obj6D.asm"
0000EE5A                            ; ---------------------------------------------------------------------------
0000EE5A                            ; Animation script - flamethrower (SBZ)
0000EE5A                            ; ---------------------------------------------------------------------------
0000EE5A 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EE5C 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EE5E 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EE60 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EE62 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EE70 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EE7A 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EE88 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EE92                            		even
0000EE92                            		even
0000EE92                            
0000EE92                            ; ---------------------------------------------------------------------------
0000EE92                            ; Sprite mappings - flame thrower (SBZ)
0000EE92                            ; ---------------------------------------------------------------------------
0000EE92                            Map_obj6D:
0000EE92                            	include "_maps\obj6D.asm"
0000EE92                            ; ---------------------------------------------------------------------------
0000EE92                            ; Sprite mappings - flame thrower (SBZ)
0000EE92                            ; ---------------------------------------------------------------------------
0000EE92 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EE96 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EE9A 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EE9E 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EEA2 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EEA6 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EEAA 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EEAE 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EEB2 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EEB6 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EEBA 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EEBE 01                         byte_E620:	dc.b 1
0000EEBF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEC4 02                         byte_E626:	dc.b 2
0000EEC5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EECA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EECF 02                         byte_E631:	dc.b 2
0000EED0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EED5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEDA 03                         byte_E63C:	dc.b 3
0000EEDB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEE0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEE5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEEA 03                         byte_E64C:	dc.b 3
0000EEEB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEF0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEF5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEFA 04                         byte_E65C:	dc.b 4
0000EEFB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF00 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF05 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF0A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF0F 04                         byte_E671:	dc.b 4
0000EF10 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF15 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF1A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF1F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF24 05                         byte_E686:	dc.b 5
0000EF25 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EF2A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF2F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF34 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF39 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF3E 05                         byte_E6A0:	dc.b 5
0000EF3F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF44 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF49 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF4E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF53 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF58 06                         byte_E6BA:	dc.b 6
0000EF59 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EF5E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EF63 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF68 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EF6D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF72 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF77 06                         byte_E6D9:	dc.b 6
0000EF78 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EF7D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF82 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EF87 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF8C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF91 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF96 01                         byte_E6F8:	dc.b 1
0000EF97 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF9C 02                         byte_E6FE:	dc.b 2
0000EF9D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFA2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFA7 02                         byte_E709:	dc.b 2
0000EFA8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFAD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFB2 03                         byte_E714:	dc.b 3
0000EFB3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EFB8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFBD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFC2 03                         byte_E724:	dc.b 3
0000EFC3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFC8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFCD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFD2 04                         byte_E734:	dc.b 4
0000EFD3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EFD8 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EFDD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFE2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFE7 04                         byte_E749:	dc.b 4
0000EFE8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EFED 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFF2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFF7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFFC 05                         byte_E75E:	dc.b 5
0000EFFD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F002 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F007 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F00C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F011 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F016 05                         byte_E778:	dc.b 5
0000F017 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F01C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F021 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F026 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F02B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F030 06                         byte_E792:	dc.b 6
0000F031 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F036 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F03B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F040 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F045 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F04A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F04F 06                         byte_E7B1:	dc.b 6
0000F050 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F055 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F05A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F05F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F064 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F069 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F06E                            		even
0000F06E                            		even
0000F06E                            
0000F06E                            ; ===========================================================================
0000F06E                            ; ---------------------------------------------------------------------------
0000F06E                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F06E                            ; ---------------------------------------------------------------------------
0000F06E                            
0000F06E                            Obj46:					; XREF: Obj_Index
0000F06E 7000                       		moveq	#0,d0
0000F070 1028 0024                  		move.b	$24(a0),d0
0000F074 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F078 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F07C                            ; ===========================================================================
0000F07C 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F07E 0000                       		dc.w Obj46_Action-Obj46_Index
0000F080                            ; ===========================================================================
0000F080                            
0000F080                            Obj46_Main:				; XREF: Obj46_Index
0000F080 5428 0024                  		addq.b	#2,$24(a0)
0000F084 117C 000F 0016             		move.b	#$F,$16(a0)
0000F08A 117C 000F 0017             		move.b	#$F,$17(a0)
0000F090 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F098 317C 4000 0002             		move.w	#$4000,2(a0)
0000F09E 117C 0004 0001             		move.b	#4,1(a0)
0000F0A4 117C 0003 0018             		move.b	#3,$18(a0)
0000F0AA 117C 0010 0019             		move.b	#$10,$19(a0)
0000F0B0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F0B6 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F0BC                            
0000F0BC                            Obj46_Action:				; XREF: Obj46_Index
0000F0BC 4A28 0001                  		tst.b	1(a0)
0000F0C0 6A00                       		bpl.s	Obj46_ChkDel
0000F0C2 7000                       		moveq	#0,d0
0000F0C4 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F0C8 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F0CC D040                       		add.w	d0,d0
0000F0CE 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F0D2 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F0D6 323C 001B                  		move.w	#$1B,d1
0000F0DA 343C 0010                  		move.w	#$10,d2
0000F0DE 363C 0011                  		move.w	#$11,d3
0000F0E2 3828 0008                  		move.w	8(a0),d4
0000F0E6 6100 0000                  		bsr.w	SolidObject
0000F0EA                            
0000F0EA                            Obj46_ChkDel:
0000F0EA 6100 EDBC                  		bsr.w	DisplaySprite
0000F0EE 3028 0008                  		move.w	8(a0),d0
0000F0F2 0240 FF80                  		andi.w	#$FF80,d0
0000F0F6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0FA 0441 0080                  		subi.w	#$80,d1
0000F0FE 0241 FF80                  		andi.w	#$FF80,d1
0000F102 9041                       		sub.w	d1,d0
0000F104 0C40 0280                  		cmpi.w	#$280,d0
0000F108 6200 EDDA                  		bhi.w	DeleteObject
0000F10C 4E75                       		rts	
0000F10E                            ; ===========================================================================
0000F10E 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F110 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F112 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F114 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F116 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F118                            ; ===========================================================================
0000F118                            
0000F118                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F118 4E75                       		rts	
0000F11A                            ; ===========================================================================
0000F11A                            
0000F11A                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F11A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F11E 9068 0008                  		sub.w	8(a0),d0
0000F122 6400                       		bcc.s	loc_E888
0000F124 4440                       		neg.w	d0
0000F126                            
0000F126                            loc_E888:
0000F126 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F12A 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F12C 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F132                            
0000F132                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F132 7000                       		moveq	#0,d0
0000F134 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F138 0828 0003 0028             		btst	#3,$28(a0)
0000F13E 6700                       		beq.s	loc_E8A8
0000F140 4440                       		neg.w	d0
0000F142 0640 0010                  		addi.w	#$10,d0
0000F146                            
0000F146                            loc_E8A8:
0000F146 3228 0030                  		move.w	$30(a0),d1
0000F14A 9240                       		sub.w	d0,d1
0000F14C 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F150 4E75                       		rts	
0000F152                            ; ===========================================================================
0000F152                            
0000F152                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F152 6100 ED2E                  		bsr.w	SpeedToPos
0000F156 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F15C 6100 0000                  		bsr.w	ObjHitFloor
0000F160 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F162 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F166 D368 000C                  		add.w	d1,$C(a0)
0000F16A 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F16E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F174 117C 0004 0028             		move.b	#4,$28(a0)
0000F17A 3011                       		move.w	(a1),d0
0000F17C 0240 03FF                  		andi.w	#$3FF,d0
0000F180 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F184 6400                       		bcc.s	locret_E8EE
0000F186 117C 0000 0028             		move.b	#0,$28(a0)
0000F18C                            
0000F18C                            locret_E8EE:
0000F18C 4E75                       		rts	
0000F18E                            ; ===========================================================================
0000F18E                            
0000F18E                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F18E 7000                       		moveq	#0,d0
0000F190 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F194 E648                       		lsr.w	#3,d0
0000F196 3228 0030                  		move.w	$30(a0),d1
0000F19A 9240                       		sub.w	d0,d1
0000F19C 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F1A0 4E75                       		rts	
0000F1A2                            ; ===========================================================================
0000F1A2                            ; ---------------------------------------------------------------------------
0000F1A2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F1A2                            ; ---------------------------------------------------------------------------
0000F1A2                            Map_obj46:
0000F1A2                            	include "_maps\obj46.asm"
0000F1A2                            ; ---------------------------------------------------------------------------
0000F1A2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F1A2                            ; ---------------------------------------------------------------------------
0000F1A2 0000                       		dc.w byte_E906-Map_obj46
0000F1A4 01                         byte_E906:	dc.b 1
0000F1A5 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F1AA                            		even
0000F1AA                            		even
0000F1AA                            
0000F1AA                            ; ===========================================================================
0000F1AA                            ; ---------------------------------------------------------------------------
0000F1AA                            ; Object 12 - lamp (SYZ)
0000F1AA                            ; ---------------------------------------------------------------------------
0000F1AA                            
0000F1AA                            Obj12:					; XREF: Obj_Index
0000F1AA 7000                       		moveq	#0,d0
0000F1AC 1028 0024                  		move.b	$24(a0),d0
0000F1B0 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F1B4 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F1B8                            ; ===========================================================================
0000F1B8 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F1BA 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F1BC                            ; ===========================================================================
0000F1BC                            
0000F1BC                            Obj12_Main:				; XREF: Obj12_Index
0000F1BC 5428 0024                  		addq.b	#2,$24(a0)
0000F1C0 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F1C8 317C 0000 0002             		move.w	#0,2(a0)
0000F1CE 117C 0004 0001             		move.b	#4,1(a0)
0000F1D4 117C 0010 0019             		move.b	#$10,$19(a0)
0000F1DA 117C 0006 0018             		move.b	#6,$18(a0)
0000F1E0                            
0000F1E0                            Obj12_Animate:				; XREF: Obj12_Index
0000F1E0 5328 001E                  		subq.b	#1,$1E(a0)
0000F1E4 6A00                       		bpl.s	Obj12_ChkDel
0000F1E6 117C 0007 001E             		move.b	#7,$1E(a0)
0000F1EC 5228 001A                  		addq.b	#1,$1A(a0)
0000F1F0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F1F6 6500                       		bcs.s	Obj12_ChkDel
0000F1F8 117C 0000 001A             		move.b	#0,$1A(a0)
0000F1FE                            
0000F1FE                            Obj12_ChkDel:
0000F1FE 3028 0008                  		move.w	8(a0),d0
0000F202 0240 FF80                  		andi.w	#$FF80,d0
0000F206 3238 F700                  		move.w	($FFFFF700).w,d1
0000F20A 0441 0080                  		subi.w	#$80,d1
0000F20E 0241 FF80                  		andi.w	#$FF80,d1
0000F212 9041                       		sub.w	d1,d0
0000F214 0C40 0280                  		cmpi.w	#$280,d0
0000F218 6200 ECCA                  		bhi.w	DeleteObject
0000F21C 6000 EC8A                  		bra.w	DisplaySprite
0000F220                            ; ===========================================================================
0000F220                            ; ---------------------------------------------------------------------------
0000F220                            ; Sprite mappings - lamp (SYZ)
0000F220                            ; ---------------------------------------------------------------------------
0000F220                            Map_obj12:
0000F220                            	include "_maps\obj12.asm"
0000F220                            ; ---------------------------------------------------------------------------
0000F220                            ; Sprite mappings - lamp (SYZ)
0000F220                            ; ---------------------------------------------------------------------------
0000F220 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F224 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F228 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F22C 02                         byte_E98E:	dc.b 2
0000F22D F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F232 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F237 02                         byte_E999:	dc.b 2
0000F238 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F23D 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F242 02                         byte_E9A4:	dc.b 2
0000F243 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F248 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F24D 02                         byte_E9AF:	dc.b 2
0000F24E F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F253 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F258 02                         byte_E9BA:	dc.b 2
0000F259 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F25E 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F263 02                         byte_E9C5:	dc.b 2
0000F264 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F269 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F26E                            		even
0000F26E                            		even
0000F26E                            
0000F26E                            ; ===========================================================================
0000F26E                            ; ---------------------------------------------------------------------------
0000F26E                            ; Object 47 - pinball bumper (SYZ)
0000F26E                            ; ---------------------------------------------------------------------------
0000F26E                            
0000F26E                            Obj47:					; XREF: Obj_Index
0000F26E 7000                       		moveq	#0,d0
0000F270 1028 0024                  		move.b	$24(a0),d0
0000F274 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F278 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F27C                            ; ===========================================================================
0000F27C 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F27E 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F280                            ; ===========================================================================
0000F280                            
0000F280                            Obj47_Main:				; XREF: Obj47_Index
0000F280 5428 0024                  		addq.b	#2,$24(a0)
0000F284 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F28C 317C 0380 0002             		move.w	#$380,2(a0)
0000F292 117C 0004 0001             		move.b	#4,1(a0)
0000F298 117C 0010 0019             		move.b	#$10,$19(a0)
0000F29E 117C 0001 0018             		move.b	#1,$18(a0)
0000F2A4 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F2AA                            
0000F2AA                            Obj47_Hit:				; XREF: Obj47_Index
0000F2AA 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F2AE 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F2B2 4228 0021                  		clr.b	$21(a0)
0000F2B6 43F8 D000                  		lea	($FFFFD000).w,a1
0000F2BA 3228 0008                  		move.w	8(a0),d1
0000F2BE 3428 000C                  		move.w	$C(a0),d2
0000F2C2 9269 0008                  		sub.w	8(a1),d1
0000F2C6 9469 000C                  		sub.w	$C(a1),d2
0000F2CA 4EB9 0000 3004             		jsr	(CalcAngle).l
0000F2D0 4EB9 0000 2D36             		jsr	(CalcSine).l
0000F2D6 C3FC F900                  		muls.w	#-$700,d1
0000F2DA E081                       		asr.l	#8,d1
0000F2DC 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F2E0 C1FC F900                  		muls.w	#-$700,d0
0000F2E4 E080                       		asr.l	#8,d0
0000F2E6 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F2EA 08E9 0001 0022             		bset	#1,$22(a1)
0000F2F0 08A9 0004 0022             		bclr	#4,$22(a1)
0000F2F6 08A9 0005 0022             		bclr	#5,$22(a1)
0000F2FC 4229 003C                  		clr.b	$3C(a1)
0000F300 117C 0001 001C             		move.b	#1,$1C(a0)
0000F306 303C 00B4                  		move.w	#$B4,d0
0000F30A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F310 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F314 7000                       		moveq	#0,d0
0000F316 1028 0023                  		move.b	$23(a0),d0
0000F31A 6700                       		beq.s	Obj47_Score
0000F31C 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F322 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F324 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F328                            
0000F328                            Obj47_Score:
0000F328 7001                       		moveq	#1,d0
0000F32A 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F330 6100 EFFC                  		bsr.w	SingleObjLoad
0000F334 6600                       		bne.s	Obj47_Display
0000F336 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F33A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F340 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F346 137C 0004 001A             		move.b	#4,$1A(a1)
0000F34C                            
0000F34C                            Obj47_Display:
0000F34C 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F352 6100 BBCE                  		bsr.w	AnimateSprite
0000F356 3028 0008                  		move.w	8(a0),d0
0000F35A 0240 FF80                  		andi.w	#$FF80,d0
0000F35E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F362 0441 0080                  		subi.w	#$80,d1
0000F366 0241 FF80                  		andi.w	#$FF80,d1
0000F36A 9041                       		sub.w	d1,d0
0000F36C 0C40 0280                  		cmpi.w	#$280,d0
0000F370 6200                       		bhi.s	Obj47_ChkHit
0000F372 6000 EB34                  		bra.w	DisplaySprite
0000F376                            ; ===========================================================================
0000F376                            
0000F376                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F376 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F37A 7000                       		moveq	#0,d0
0000F37C 1028 0023                  		move.b	$23(a0),d0
0000F380 6700                       		beq.s	Obj47_Delete
0000F382 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F388                            
0000F388                            Obj47_Delete:
0000F388 6000 EB5A                  		bra.w	DeleteObject
0000F38C                            ; ===========================================================================
0000F38C                            Ani_obj47:
0000F38C                            	include "_anim\obj47.asm"
0000F38C                            ; ---------------------------------------------------------------------------
0000F38C                            ; Animation script - flamethrower (SBZ)
0000F38C                            ; ---------------------------------------------------------------------------
0000F38C 0000                       		dc.w byte_EAF4-Ani_obj47
0000F38E 0000                       		dc.w byte_EAF8-Ani_obj47
0000F390 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F394 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F39C                            		even
0000F39C                            		even
0000F39C                            
0000F39C                            ; ---------------------------------------------------------------------------
0000F39C                            ; Sprite mappings - pinball bumper (SYZ)
0000F39C                            ; ---------------------------------------------------------------------------
0000F39C                            Map_obj47:
0000F39C                            	include "_maps\obj47.asm"
0000F39C                            ; ---------------------------------------------------------------------------
0000F39C                            ; Sprite mappings - pinball bumper (SYZ)
0000F39C                            ; ---------------------------------------------------------------------------
0000F39C 0000                       		dc.w byte_EB06-Map_obj47
0000F39E 0000                       		dc.w byte_EB11-Map_obj47
0000F3A0 0000                       		dc.w byte_EB1C-Map_obj47
0000F3A2 02                         byte_EB06:	dc.b 2
0000F3A3 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F3A8 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F3AD 02                         byte_EB11:	dc.b 2
0000F3AE F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F3B3 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F3B8 02                         byte_EB1C:	dc.b 2
0000F3B9 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F3BE F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F3C4 00                         		even
0000F3C4 00                         		even
0000F3C4                            
0000F3C4                            ; ===========================================================================
0000F3C4                            ; ---------------------------------------------------------------------------
0000F3C4                            ; Object 0D - signpost at the end of a level
0000F3C4                            ; ---------------------------------------------------------------------------
0000F3C4                            
0000F3C4                            Obj0D:					; XREF: Obj_Index
0000F3C4 7000                       		moveq	#0,d0
0000F3C6 1028 0024                  		move.b	$24(a0),d0
0000F3CA 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F3CE 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F3D2 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F3D8 6100 BB48                  		bsr.w	AnimateSprite
0000F3DC 6100 EACA                  		bsr.w	DisplaySprite
0000F3E0 3028 0008                  		move.w	8(a0),d0
0000F3E4 0240 FF80                  		andi.w	#$FF80,d0
0000F3E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F3EC 0441 0080                  		subi.w	#$80,d1
0000F3F0 0241 FF80                  		andi.w	#$FF80,d1
0000F3F4 9041                       		sub.w	d1,d0
0000F3F6 0C40 0280                  		cmpi.w	#$280,d0
0000F3FA 6200 EAE8                  		bhi.w	DeleteObject
0000F3FE 4E75                       		rts	
0000F400                            ; ===========================================================================
0000F400 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F402 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F404 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F406 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F408 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F40A                            ; ===========================================================================
0000F40A                            
0000F40A                            Obj0D_Main:				; XREF: Obj0D_Index
0000F40A 5428 0024                  		addq.b	#2,$24(a0)
0000F40E 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F416 317C 0680 0002             		move.w	#$680,2(a0)
0000F41C 117C 0004 0001             		move.b	#4,1(a0)
0000F422 117C 0018 0019             		move.b	#$18,$19(a0)
0000F428 117C 0004 0018             		move.b	#4,$18(a0)
0000F42E                            
0000F42E                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F42E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F432 9068 0008                  		sub.w	8(a0),d0
0000F436 6500                       		bcs.s	locret_EBBA
0000F438 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F43C 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F43E 303C 00CF                  		move.w	#$CF,d0
0000F442 4EB9 0000 15CC             		jsr	(PlaySound).l	; play signpost	sound
0000F448 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F44C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F452 5428 0024                  		addq.b	#2,$24(a0)
0000F456                            
0000F456                            locret_EBBA:
0000F456 4E75                       		rts	
0000F458                            ; ===========================================================================
0000F458                            
0000F458                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F458 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F45C 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F45E 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F464 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F468 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F46E 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F470 5428 0024                  		addq.b	#2,$24(a0)
0000F474                            
0000F474                            Obj0D_Sparkle:
0000F474 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F478 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F47A 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F480 7000                       		moveq	#0,d0
0000F482 1028 0034                  		move.b	$34(a0),d0
0000F486 5428 0034                  		addq.b	#2,$34(a0)
0000F48A 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F490 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F494 6100 EE98                  		bsr.w	SingleObjLoad
0000F498 6600                       		bne.s	locret_EC42
0000F49A 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F49E 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F4A4 101A                       		move.b	(a2)+,d0
0000F4A6 4880                       		ext.w	d0
0000F4A8 D068 0008                  		add.w	8(a0),d0
0000F4AC 3340 0008                  		move.w	d0,8(a1)
0000F4B0 101A                       		move.b	(a2)+,d0
0000F4B2 4880                       		ext.w	d0
0000F4B4 D068 000C                  		add.w	$C(a0),d0
0000F4B8 3340 000C                  		move.w	d0,$C(a1)
0000F4BC 237C 0000 A6C0 0004        		move.l	#Map_obj25,4(a1)
0000F4C4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F4CA 137C 0004 0001             		move.b	#4,1(a1)
0000F4D0 137C 0002 0018             		move.b	#2,$18(a1)
0000F4D6 137C 0008 0019             		move.b	#8,$19(a1)
0000F4DC                            
0000F4DC                            locret_EC42:
0000F4DC 4E75                       		rts	
0000F4DE                            ; ===========================================================================
0000F4DE E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F4E0 0808                       		dc.b	8,   8
0000F4E2 F000                       		dc.b -$10,   0
0000F4E4 18F8                       		dc.b  $18,  -8
0000F4E6 00F8                       		dc.b	0,  -8
0000F4E8 1000                       		dc.b  $10,   0
0000F4EA E808                       		dc.b -$18,   8
0000F4EC 1810                       		dc.b  $18, $10
0000F4EE                            ; ===========================================================================
0000F4EE                            
0000F4EE                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F4EE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F4F2 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F4F6 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F4FC 6600                       		bne.s	loc_EC70
0000F4FE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F504 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F50A 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F50C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F512 6000                       		bra.s	loc_EC70
0000F514                            
0000F514                            Obj0D_MoveLeft:
0000F514 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F51A                            
0000F51A                            loc_EC70:
0000F51A 4A38 D000                  		tst.b	($FFFFD000).w
0000F51E 6700                       		beq.s	loc_EC86
0000F520 3038 D008                  		move.w	($FFFFD008).w,d0
0000F524 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F528 0641 0128                  		addi.w	#$128,d1
0000F52C B041                       		cmp.w	d1,d0
0000F52E 6500                       		bcs.s	locret_ECEE
0000F530                            
0000F530                            loc_EC86:
0000F530 5428 0024                  		addq.b	#2,$24(a0)
0000F534                            
0000F534                            ; ---------------------------------------------------------------------------
0000F534                            ; Subroutine to	set up bonuses at the end of an	act
0000F534                            ; ---------------------------------------------------------------------------
0000F534                            
0000F534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F534                            
0000F534                            
0000F534                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F534 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F538 6600                       		bne.s	locret_ECEE
0000F53A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F540 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F544 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F548 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F54E 7010                       		moveq	#$10,d0
0000F550 4EB9 0000 17E8             		jsr	(LoadPLC2).l	; load title card patterns
0000F556 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F55C 7000                       		moveq	#0,d0
0000F55E 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F562 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F566 7200                       		moveq	#0,d1
0000F568 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F56C D041                       		add.w	d1,d0		; add up your time
0000F56E 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F572 7214                       		moveq	#$14,d1
0000F574 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F576 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F578 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F57A                            
0000F57A                            loc_ECD0:
0000F57A D040                       		add.w	d0,d0
0000F57C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F582 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F586 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F58A 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F58E 303C 008E                  		move.w	#$8E,d0
0000F592 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F598                            
0000F598                            locret_ECEE:
0000F598 4E75                       		rts	
0000F59A                            ; End of function GotThroughAct
0000F59A                            
0000F59A                            ; ===========================================================================
0000F59A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F5AE 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F5C4                            ; ===========================================================================
0000F5C4                            
0000F5C4                            locret_ED1A:				; XREF: Obj0D_Index
0000F5C4 4E75                       		rts	
0000F5C6                            ; ===========================================================================
0000F5C6                            Ani_obj0D:
0000F5C6                            	include "_anim\obj0D.asm"
0000F5C6                            ; ---------------------------------------------------------------------------
0000F5C6                            ; Animation script - signpost
0000F5C6                            ; ---------------------------------------------------------------------------
0000F5C6 0000                       		dc.w byte_ED24-Ani_obj0D
0000F5C8 0000                       		dc.w byte_ED28-Ani_obj0D
0000F5CA 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F5CC 0000                       		dc.w byte_ED34-Ani_obj0D
0000F5CE 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F5D2 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F5D8 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F5DE 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F5E2 00                         		even
0000F5E2 00                         		even
0000F5E2                            
0000F5E2                            ; ---------------------------------------------------------------------------
0000F5E2                            ; Sprite mappings - signpost
0000F5E2                            ; ---------------------------------------------------------------------------
0000F5E2                            Map_obj0D:
0000F5E2                            	include "_maps\obj0D.asm"
0000F5E2                            ; ---------------------------------------------------------------------------
0000F5E2                            ; Sprite mappings - signpost
0000F5E2                            ; ---------------------------------------------------------------------------
0000F5E2 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F5E6 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F5EA 0000                       		dc.w byte_ED73-Map_obj0D
0000F5EC 03                         byte_ED42:	dc.b 3
0000F5ED F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F5F2 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F5F7 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F5FC 02                         byte_ED52:	dc.b 2
0000F5FD F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F602 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F607 02                         byte_ED5D:	dc.b 2
0000F608 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F60D 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F612 02                         byte_ED68:	dc.b 2
0000F613 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F618 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F61D 03                         byte_ED73:	dc.b 3
0000F61E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F623 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F628 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F62E 00                         		even
0000F62E 00                         		even
0000F62E                            
0000F62E                            ; ===========================================================================
0000F62E                            ; ---------------------------------------------------------------------------
0000F62E                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F62E                            ; ---------------------------------------------------------------------------
0000F62E                            
0000F62E                            Obj4C:					; XREF: Obj_Index
0000F62E 7000                       		moveq	#0,d0
0000F630 1028 0024                  		move.b	$24(a0),d0
0000F634 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F638 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F63C 6000 0000                  		bra.w	Obj4D_ChkDel
0000F640                            ; ===========================================================================
0000F640 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F642 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F644 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F646 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F648 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F64A 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F64C                            ; ===========================================================================
0000F64C                            
0000F64C                            Obj4C_Main:				; XREF: Obj4C_Index
0000F64C 5428 0024                  		addq.b	#2,$24(a0)
0000F650 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F658 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F65E 117C 0004 0001             		move.b	#4,1(a0)
0000F664 117C 0001 0018             		move.b	#1,$18(a0)
0000F66A 117C 0038 0019             		move.b	#$38,$19(a0)
0000F670 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F676                            
0000F676                            loc_EDCC:				; XREF: Obj4C_Index
0000F676 5368 0032                  		subq.w	#1,$32(a0)
0000F67A 6A00                       		bpl.s	locret_EDF0
0000F67C 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F682 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F686 3228 000C                  		move.w	$C(a0),d1
0000F68A B041                       		cmp.w	d1,d0
0000F68C 6400                       		bcc.s	locret_EDF0
0000F68E 0441 0170                  		subi.w	#$170,d1
0000F692 B041                       		cmp.w	d1,d0
0000F694 6500                       		bcs.s	locret_EDF0
0000F696 5428 0024                  		addq.b	#2,$24(a0)
0000F69A                            
0000F69A                            locret_EDF0:
0000F69A 4E75                       		rts	
0000F69C                            ; ===========================================================================
0000F69C                            
0000F69C                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F69C 5428 0024                  		addq.b	#2,$24(a0)
0000F6A0 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F6A4 6600                       		bne.s	loc_EE18
0000F6A6 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F6AA 3368 0008 0008             		move.w	8(a0),8(a1)
0000F6B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F6B6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F6BC 2348 003C                  		move.l	a0,$3C(a1)
0000F6C0                            
0000F6C0                            loc_EE18:
0000F6C0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F6C6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F6CA 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F6CC 117C 0004 001C             		move.b	#4,$1C(a0)
0000F6D2 6000                       		bra.s	Obj4C_Display
0000F6D4                            ; ===========================================================================
0000F6D4                            
0000F6D4                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F6D4 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F6D8 08E9 0001 0022             		bset	#1,$22(a1)
0000F6DE 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F6E4 6000                       		bra.s	Obj4C_Display
0000F6E6                            ; ===========================================================================
0000F6E6                            
0000F6E6                            loc_EE3E:				; XREF: Obj4C_Index
0000F6E6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F6EA 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F6EC 5428 0024                  		addq.b	#2,$24(a0)
0000F6F0 4E75                       		rts	
0000F6F2                            ; ===========================================================================
0000F6F2                            
0000F6F2                            Obj4C_Display:				; XREF: Obj4C_Index
0000F6F2 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F6F8 6100 B828                  		bsr.w	AnimateSprite
0000F6FC 6100 E7AA                  		bsr.w	DisplaySprite
0000F700 4E75                       		rts	
0000F702                            ; ===========================================================================
0000F702                            
0000F702                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F702 117C 0000 001C             		move.b	#0,$1C(a0)
0000F708 117C 0002 0024             		move.b	#2,$24(a0)
0000F70E 4A28 0028                  		tst.b	$28(a0)
0000F712 6700 E7D0                  		beq.w	DeleteObject
0000F716 4E75                       		rts	
0000F718                            ; ===========================================================================
0000F718                            ; ---------------------------------------------------------------------------
0000F718                            ; Object 4D - lava geyser / lavafall (MZ)
0000F718                            ; ---------------------------------------------------------------------------
0000F718                            
0000F718                            Obj4D:					; XREF: Obj_Index
0000F718 7000                       		moveq	#0,d0
0000F71A 1028 0024                  		move.b	$24(a0),d0
0000F71E 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F722 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F726 6000 E780                  		bra.w	DisplaySprite
0000F72A                            ; ===========================================================================
0000F72A 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F72C 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F72E 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F730 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F732                            
0000F732 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F736                            ; ===========================================================================
0000F736                            
0000F736                            Obj4D_Main:				; XREF: Obj4D_Index
0000F736 5428 0024                  		addq.b	#2,$24(a0)
0000F73A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F740 4A28 0028                  		tst.b	$28(a0)
0000F744 6700                       		beq.s	loc_EEA4
0000F746 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F74C                            
0000F74C                            loc_EEA4:
0000F74C 7000                       		moveq	#0,d0
0000F74E 1028 0028                  		move.b	$28(a0),d0
0000F752 D040                       		add.w	d0,d0
0000F754 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F75A 2248                       		movea.l	a0,a1
0000F75C 7201                       		moveq	#1,d1
0000F75E 6100                       		bsr.s	Obj4D_MakeLava
0000F760 6000                       		bra.s	loc_EF10
0000F762                            ; ===========================================================================
0000F762                            
0000F762                            Obj4D_Loop:
0000F762 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F766 6600                       		bne.s	loc_EF0A
0000F768                            
0000F768                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F768 12BC 004D                  		move.b	#$4D,0(a1)
0000F76C 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F774 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F77A 137C 0004 0001             		move.b	#4,1(a1)
0000F780 137C 0020 0019             		move.b	#$20,$19(a1)
0000F786 3368 0008 0008             		move.w	8(a0),8(a1)
0000F78C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F792 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F798 137C 0001 0018             		move.b	#1,$18(a1)
0000F79E 137C 0005 001C             		move.b	#5,$1C(a1)
0000F7A4 4A28 0028                  		tst.b	$28(a0)
0000F7A8 6700                       		beq.s	loc_EF0A
0000F7AA 137C 0002 001C             		move.b	#2,$1C(a1)
0000F7B0                            
0000F7B0                            loc_EF0A:
0000F7B0 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F7B4 4E75                       		rts	
0000F7B6                            ; ===========================================================================
0000F7B6                            
0000F7B6                            loc_EF10:				; XREF: Obj4D_Main
0000F7B6 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F7BC 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F7C2 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F7C8 137C 0093 0020             		move.b	#$93,$20(a1)
0000F7CE 137C 0080 0016             		move.b	#$80,$16(a1)
0000F7D4 08E9 0004 0001             		bset	#4,1(a1)
0000F7DA 5829 0024                  		addq.b	#4,$24(a1)
0000F7DE 2348 003C                  		move.l	a0,$3C(a1)
0000F7E2 4A28 0028                  		tst.b	$28(a0)
0000F7E6 6700                       		beq.s	Obj4D_PlaySnd
0000F7E8 7200                       		moveq	#0,d1
0000F7EA 6100 FF76                  		bsr.w	Obj4D_Loop
0000F7EE 5429 0024                  		addq.b	#2,$24(a1)
0000F7F2 08E9 0004 0002             		bset	#4,2(a1)
0000F7F8 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F7FE 137C 0000 0018             		move.b	#0,$18(a1)
0000F804 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F80A 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F810 117C 0000 0028             		move.b	#0,$28(a0)
0000F816                            
0000F816                            Obj4D_PlaySnd:
0000F816 303C 00C8                  		move.w	#$C8,d0
0000F81A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000F820                            
0000F820                            Obj4D_Action:				; XREF: Obj4D_Index
0000F820 7000                       		moveq	#0,d0
0000F822 1028 0028                  		move.b	$28(a0),d0
0000F826 D040                       		add.w	d0,d0
0000F828 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F82C 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F830 6100 E650                  		bsr.w	SpeedToPos
0000F834 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F83A 6100 B6E6                  		bsr.w	AnimateSprite
0000F83E                            
0000F83E                            Obj4D_ChkDel:				; XREF: Obj4C
0000F83E 3028 0008                  		move.w	8(a0),d0
0000F842 0240 FF80                  		andi.w	#$FF80,d0
0000F846 3238 F700                  		move.w	($FFFFF700).w,d1
0000F84A 0441 0080                  		subi.w	#$80,d1
0000F84E 0241 FF80                  		andi.w	#$FF80,d1
0000F852 9041                       		sub.w	d1,d0
0000F854 0C40 0280                  		cmpi.w	#$280,d0
0000F858 6200 E68A                  		bhi.w	DeleteObject
0000F85C 4E75                       		rts	
0000F85E                            ; ===========================================================================
0000F85E 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F860 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F862                            ; ===========================================================================
0000F862                            
0000F862                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F862 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F868 3028 0030                  		move.w	$30(a0),d0
0000F86C B068 000C                  		cmp.w	$C(a0),d0
0000F870 6400                       		bcc.s	locret_EFDA
0000F872 5828 0024                  		addq.b	#4,$24(a0)
0000F876 2268 003C                  		movea.l	$3C(a0),a1
0000F87A 137C 0003 001C             		move.b	#3,$1C(a1)
0000F880                            
0000F880                            locret_EFDA:
0000F880 4E75                       		rts	
0000F882                            ; ===========================================================================
0000F882                            
0000F882                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F882 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F888 3028 0030                  		move.w	$30(a0),d0
0000F88C B068 000C                  		cmp.w	$C(a0),d0
0000F890 6400                       		bcc.s	locret_EFFA
0000F892 5828 0024                  		addq.b	#4,$24(a0)
0000F896 2268 003C                  		movea.l	$3C(a0),a1
0000F89A 137C 0001 001C             		move.b	#1,$1C(a1)
0000F8A0                            
0000F8A0                            locret_EFFA:
0000F8A0 4E75                       		rts	
0000F8A2                            ; ===========================================================================
0000F8A2                            
0000F8A2                            loc_EFFC:				; XREF: Obj4D_Index
0000F8A2 2268 003C                  		movea.l	$3C(a0),a1
0000F8A6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F8AC 6700 0000                  		beq.w	Obj4D_Delete
0000F8B0 3029 000C                  		move.w	$C(a1),d0
0000F8B4 0640 0060                  		addi.w	#$60,d0
0000F8B8 3140 000C                  		move.w	d0,$C(a0)
0000F8BC 9068 0030                  		sub.w	$30(a0),d0
0000F8C0 4440                       		neg.w	d0
0000F8C2 7208                       		moveq	#8,d1
0000F8C4 0C40 0040                  		cmpi.w	#$40,d0
0000F8C8 6C00                       		bge.s	loc_F026
0000F8CA 720B                       		moveq	#$B,d1
0000F8CC                            
0000F8CC                            loc_F026:
0000F8CC 0C40 0080                  		cmpi.w	#$80,d0
0000F8D0 6F00                       		ble.s	loc_F02E
0000F8D2 720E                       		moveq	#$E,d1
0000F8D4                            
0000F8D4                            loc_F02E:
0000F8D4 5328 001E                  		subq.b	#1,$1E(a0)
0000F8D8 6A00                       		bpl.s	loc_F04C
0000F8DA 117C 0007 001E             		move.b	#7,$1E(a0)
0000F8E0 5228 001B                  		addq.b	#1,$1B(a0)
0000F8E4 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F8EA 6500                       		bcs.s	loc_F04C
0000F8EC 117C 0000 001B             		move.b	#0,$1B(a0)
0000F8F2                            
0000F8F2                            loc_F04C:
0000F8F2 1028 001B                  		move.b	$1B(a0),d0
0000F8F6 D001                       		add.b	d1,d0
0000F8F8 1140 001A                  		move.b	d0,$1A(a0)
0000F8FC 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F900                            ; ===========================================================================
0000F900                            
0000F900                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F900 6000 E5E2                  		bra.w	DeleteObject
0000F904                            ; ===========================================================================
0000F904                            ; ---------------------------------------------------------------------------
0000F904                            ; Object 4E - advancing	wall of	lava (MZ)
0000F904                            ; ---------------------------------------------------------------------------
0000F904                            
0000F904                            Obj4E:					; XREF: Obj_Index
0000F904 7000                       		moveq	#0,d0
0000F906 1028 0024                  		move.b	$24(a0),d0
0000F90A 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F90E 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F912                            ; ===========================================================================
0000F912 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F914 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F916 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F918 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F91A 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F91C                            ; ===========================================================================
0000F91C                            
0000F91C                            Obj4E_Main:				; XREF: Obj4E_Index
0000F91C 5828 0024                  		addq.b	#4,$24(a0)
0000F920 2248                       		movea.l	a0,a1
0000F922 7201                       		moveq	#1,d1
0000F924 6000                       		bra.s	Obj4E_Main2
0000F926                            ; ===========================================================================
0000F926                            
0000F926                            Obj4E_Loop:
0000F926 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F92A 6600                       		bne.s	loc_F0C8
0000F92C                            
0000F92C                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F92C 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F930 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F938 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F93E 137C 0004 0001             		move.b	#4,1(a1)
0000F944 137C 0050 0019             		move.b	#$50,$19(a1)
0000F94A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F950 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F956 137C 0001 0018             		move.b	#1,$18(a1)
0000F95C 137C 0000 001C             		move.b	#0,$1C(a1)
0000F962 137C 0094 0020             		move.b	#$94,$20(a1)
0000F968 2348 003C                  		move.l	a0,$3C(a1)
0000F96C                            
0000F96C                            loc_F0C8:
0000F96C 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F970                            
0000F970 5C29 0024                  		addq.b	#6,$24(a1)
0000F974 137C 0004 001A             		move.b	#4,$1A(a1)
0000F97A                            
0000F97A                            Obj4E_Action:				; XREF: Obj4E_Index
0000F97A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F97E 9068 0008                  		sub.w	8(a0),d0
0000F982 6400                       		bcc.s	Obj4E_ChkSonic
0000F984 4440                       		neg.w	d0
0000F986                            
0000F986                            Obj4E_ChkSonic:
0000F986 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F98A 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F98C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F990 9068 000C                  		sub.w	$C(a0),d0
0000F994 6400                       		bcc.s	loc_F0F4
0000F996 4440                       		neg.w	d0
0000F998                            
0000F998                            loc_F0F4:
0000F998 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F99C 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F99E 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F9A4 6000                       		bra.s	Obj4E_Solid
0000F9A6                            ; ===========================================================================
0000F9A6                            
0000F9A6                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F9A6 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F9AA 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F9AC 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F9B2 5528 0024                  		subq.b	#2,$24(a0)
0000F9B6                            
0000F9B6                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F9B6 323C 002B                  		move.w	#$2B,d1
0000F9BA 343C 0018                  		move.w	#$18,d2
0000F9BE 3602                       		move.w	d2,d3
0000F9C0 5243                       		addq.w	#1,d3
0000F9C2 3828 0008                  		move.w	8(a0),d4
0000F9C6 1028 0024                  		move.b	$24(a0),d0
0000F9CA 3F00                       		move.w	d0,-(sp)
0000F9CC 6100 0000                  		bsr.w	SolidObject
0000F9D0 301F                       		move.w	(sp)+,d0
0000F9D2 1140 0024                  		move.b	d0,$24(a0)
0000F9D6 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F9DC 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F9DE 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F9E2 4228 0036                  		clr.b	$36(a0)
0000F9E6                            
0000F9E6                            Obj4E_Animate:
0000F9E6 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F9EC 6100 B534                  		bsr.w	AnimateSprite
0000F9F0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F9F6 6400                       		bcc.s	Obj4E_ChkDel
0000F9F8 6100 E488                  		bsr.w	SpeedToPos
0000F9FC                            
0000F9FC                            Obj4E_ChkDel:
0000F9FC 6100 E4AA                  		bsr.w	DisplaySprite
0000FA00 4A28 0036                  		tst.b	$36(a0)
0000FA04 6600                       		bne.s	locret_F17E
0000FA06 3028 0008                  		move.w	8(a0),d0
0000FA0A 0240 FF80                  		andi.w	#$FF80,d0
0000FA0E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA12 0441 0080                  		subi.w	#$80,d1
0000FA16 0241 FF80                  		andi.w	#$FF80,d1
0000FA1A 9041                       		sub.w	d1,d0
0000FA1C 0C40 0280                  		cmpi.w	#$280,d0
0000FA20 6200                       		bhi.s	Obj4E_ChkGone
0000FA22                            
0000FA22                            locret_F17E:
0000FA22 4E75                       		rts	
0000FA24                            ; ===========================================================================
0000FA24                            
0000FA24                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FA24 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FA28 7000                       		moveq	#0,d0
0000FA2A 1028 0023                  		move.b	$23(a0),d0
0000FA2E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FA34 117C 0008 0024             		move.b	#8,$24(a0)
0000FA3A 4E75                       		rts	
0000FA3C                            ; ===========================================================================
0000FA3C                            
0000FA3C                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FA3C 2268 003C                  		movea.l	$3C(a0),a1
0000FA40 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FA46 6700                       		beq.s	Obj4E_Delete
0000FA48 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FA4E 0468 0080 0008             		subi.w	#$80,8(a0)
0000FA54 6000 E452                  		bra.w	DisplaySprite
0000FA58                            ; ===========================================================================
0000FA58                            
0000FA58                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FA58 6000 E48A                  		bra.w	DeleteObject
0000FA5C                            ; ===========================================================================
0000FA5C                            ; ---------------------------------------------------------------------------
0000FA5C                            ; Object 54 - invisible	lava tag (MZ)
0000FA5C                            ; ---------------------------------------------------------------------------
0000FA5C                            
0000FA5C                            Obj54:					; XREF: Obj_Index
0000FA5C 7000                       		moveq	#0,d0
0000FA5E 1028 0024                  		move.b	$24(a0),d0
0000FA62 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FA66 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FA6A                            ; ===========================================================================
0000FA6A 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FA6C 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FA6E                            
0000FA6E 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FA72                            ; ===========================================================================
0000FA72                            
0000FA72                            Obj54_Main:				; XREF: Obj54_Index
0000FA72 5428 0024                  		addq.b	#2,$24(a0)
0000FA76 7000                       		moveq	#0,d0
0000FA78 1028 0028                  		move.b	$28(a0),d0
0000FA7C 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FA82 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FA8A 117C 0084 0001             		move.b	#$84,1(a0)
0000FA90                            
0000FA90                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FA90 3028 0008                  		move.w	8(a0),d0
0000FA94 0240 FF80                  		andi.w	#$FF80,d0
0000FA98 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA9C 0441 0080                  		subi.w	#$80,d1
0000FAA0 0241 FF80                  		andi.w	#$FF80,d1
0000FAA4 9041                       		sub.w	d1,d0
0000FAA6 6B00 E43C                  		bmi.w	DeleteObject
0000FAAA 0C40 0280                  		cmpi.w	#$280,d0
0000FAAE 6200 E434                  		bhi.w	DeleteObject
0000FAB2 4E75                       		rts	
0000FAB4                            ; ===========================================================================
0000FAB4                            ; ---------------------------------------------------------------------------
0000FAB4                            ; Sprite mappings - invisible lava tag (MZ)
0000FAB4                            ; ---------------------------------------------------------------------------
0000FAB4                            Map_obj54:
0000FAB4                            	include "_maps\obj54.asm"
0000FAB4                            ; ---------------------------------------------------------------------------
0000FAB4                            ; Sprite mappings - invisible lava tag (MZ)
0000FAB4                            ; ---------------------------------------------------------------------------
0000FAB4 0000                       		dc.w byte_F212-Map_obj54
0000FAB6 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FAB8 00                         		even
0000FAB8 00                         		even
0000FAB8                            
0000FAB8                            Ani_obj4C:
0000FAB8                            	include "_anim\obj4C.asm"
0000FAB8                            ; ---------------------------------------------------------------------------
0000FAB8                            ; Animation script - geyser of lava (MZ)
0000FAB8                            ; ---------------------------------------------------------------------------
0000FAB8 0000                       		dc.w byte_F220-Ani_obj4C
0000FABA 0000                       		dc.w byte_F22A-Ani_obj4C
0000FABC 0000                       		dc.w byte_F22E-Ani_obj4C
0000FABE 0000                       		dc.w byte_F232-Ani_obj4C
0000FAC0 0000                       		dc.w byte_F23A-Ani_obj4C
0000FAC2 0000                       		dc.w byte_F23E-Ani_obj4C
0000FAC4 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FACE 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FAD2 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FAD6 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FADE 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FAE2 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FAE6                            		even
0000FAE6                            		even
0000FAE6                            
0000FAE6                            Ani_obj4E:
0000FAE6                            	include "_anim\obj4E.asm"
0000FAE6                            ; ---------------------------------------------------------------------------
0000FAE6                            ; Animation script - advancing wall of lava (MZ)
0000FAE6                            ; ---------------------------------------------------------------------------
0000FAE6 0000                       		dc.w byte_F244-Ani_obj4E
0000FAE8 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FAEE                            		even
0000FAEE                            		even
0000FAEE                            
0000FAEE                            ; ---------------------------------------------------------------------------
0000FAEE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FAEE                            ; ---------------------------------------------------------------------------
0000FAEE                            Map_obj4C:
0000FAEE                            	include "_maps\obj4C.asm"
0000FAEE                            ; ---------------------------------------------------------------------------
0000FAEE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FAEE                            ; ---------------------------------------------------------------------------
0000FAEE 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FAF2 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FAF6 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FAFA 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FAFE 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FB02 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FB06 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FB0A 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FB0E 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FB12 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FB16 02                         byte_F272:	dc.b 2
0000FB17 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FB1C EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FB21 02                         byte_F27D:	dc.b 2
0000FB22 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FB27 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FB2C 04                         byte_F288:	dc.b 4
0000FB2D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FB32 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FB37 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FB3C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FB41 04                         byte_F29D:	dc.b 4
0000FB42 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FB47 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FB4C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FB51 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FB56 06                         byte_F2B2:	dc.b 6
0000FB57 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FB5C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FB61 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FB66 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FB6B E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FB70 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FB75 06                         byte_F2D1:	dc.b 6
0000FB76 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FB7B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FB80 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FB85 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FB8A E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FB8F E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FB94 02                         byte_F2F0:	dc.b 2
0000FB95 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FB9A E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FB9F 02                         byte_F2FB:	dc.b 2
0000FBA0 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FBA5 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FBAA 0A                         byte_F306:	dc.b $A
0000FBAB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FBB0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FBB5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FBBA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FBBF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FBC4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FBC9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FBCE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FBD3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FBD8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FBDD 0A                         byte_F339:	dc.b $A
0000FBDE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FBE3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBE8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBED B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBF2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBF7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBFC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FC01 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FC06 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FC0B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FC10 0A                         byte_F36C:	dc.b $A
0000FC11 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC16 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC1B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC20 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC25 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC2A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC2F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FC34 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FC39 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FC3E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FC43 06                         byte_F39F:	dc.b 6
0000FC44 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FC49 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FC4E B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FC53 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FC58 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FC5D D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FC62 06                         byte_F3BE:	dc.b 6
0000FC63 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FC68 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FC6D B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FC72 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FC77 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FC7C D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FC81 06                         byte_F3DD:	dc.b 6
0000FC82 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC87 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC8C B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC91 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC96 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC9B D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FCA0 10                         byte_F3FC:	dc.b $10
0000FCA1 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FCA6 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FCAB B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FCB0 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FCB5 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FCBA D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FCBF F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FCC4 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FCC9 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FCCE 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FCD3 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FCD8 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FCDD 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FCE2 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FCE7 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FCEC 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FCF1 10                         byte_F44D:	dc.b $10
0000FCF2 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FCF7 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FCFC B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FD01 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FD06 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FD0B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FD10 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FD15 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FD1A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FD1F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FD24 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FD29 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FD2E 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FD33 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FD38 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FD3D 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FD42 10                         byte_F49E:	dc.b $10
0000FD43 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FD48 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FD4D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FD52 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FD57 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FD5C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FD61 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FD66 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FD6B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FD70 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FD75 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FD7A 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FD7F 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FD84 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FD89 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FD8E 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FD93 06                         byte_F4EF:	dc.b 6
0000FD94 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FD99 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FD9E E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FDA3 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FDA8 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FDAD D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FDB2 06                         byte_F50E:	dc.b 6
0000FDB3 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FDB8 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FDBD E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FDC2 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FDC7 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FDCC D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FDD1 00                         byte_F52D:	dc.b 0
0000FDD2                            		even
0000FDD2                            		even
0000FDD2                            
0000FDD2                            ; ---------------------------------------------------------------------------
0000FDD2                            ; Sprite mappings - advancing wall of lava (MZ)
0000FDD2                            ; ---------------------------------------------------------------------------
0000FDD2                            Map_obj4E:
0000FDD2                            	include "_maps\obj4E.asm"
0000FDD2                            ; ---------------------------------------------------------------------------
0000FDD2                            ; Sprite mappings - advancing wall of lava (MZ)
0000FDD2                            ; ---------------------------------------------------------------------------
0000FDD2 0000                       		dc.w byte_F538-Map_obj4E
0000FDD4 0000                       		dc.w byte_F566-Map_obj4E
0000FDD6 0000                       		dc.w byte_F594-Map_obj4E
0000FDD8 0000                       		dc.w byte_F5C2-Map_obj4E
0000FDDA 0000                       		dc.w byte_F5F0-Map_obj4E
0000FDDC 09                         byte_F538:	dc.b 9
0000FDDD E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FDE2 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FDE7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDEC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDF1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDF6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDFB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE00 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE05 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE0A 09                         byte_F566:	dc.b 9
0000FE0B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FE10 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FE15 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE1A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE1F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE24 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE29 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE2E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE33 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE38 09                         byte_F594:	dc.b 9
0000FE39 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FE3E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FE43 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE48 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE4D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE52 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE57 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE5C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE61 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE66 09                         byte_F5C2:	dc.b 9
0000FE67 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FE6C 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FE71 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE76 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE7B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE80 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE85 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE8A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE8F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE94 08                         byte_F5F0:	dc.b 8
0000FE95 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FE9A 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE9F E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FEA4 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FEA9 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FEAE 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FEB3 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FEB8 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FEBE 00                         		even
0000FEBE 00                         		even
0000FEBE                            
0000FEBE                            ; ===========================================================================
0000FEBE                            ; ---------------------------------------------------------------------------
0000FEBE                            ; Object 40 - Moto Bug enemy (GHZ)
0000FEBE                            ; ---------------------------------------------------------------------------
0000FEBE                            
0000FEBE                            Obj40:					; XREF: Obj_Index
0000FEBE 7000                       		moveq	#0,d0
0000FEC0 1028 0024                  		move.b	$24(a0),d0
0000FEC4 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FEC8 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FECC                            ; ===========================================================================
0000FECC 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FECE 0000                       		dc.w Obj40_Action-Obj40_Index
0000FED0 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FED2 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FED4                            ; ===========================================================================
0000FED4                            
0000FED4                            Obj40_Main:				; XREF: Obj40_Index
0000FED4 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FEDC 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FEE2 117C 0004 0001             		move.b	#4,1(a0)
0000FEE8 117C 0004 0018             		move.b	#4,$18(a0)
0000FEEE 117C 0014 0019             		move.b	#$14,$19(a0)
0000FEF4 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FEF8 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FEFA 117C 000E 0016             		move.b	#$E,$16(a0)
0000FF00 117C 0008 0017             		move.b	#8,$17(a0)
0000FF06 117C 000C 0020             		move.b	#$C,$20(a0)
0000FF0C 6100 DF02                  		bsr.w	ObjectFall
0000FF10 4EB9 0000 0000             		jsr	ObjHitFloor
0000FF16 4A41                       		tst.w	d1
0000FF18 6A00                       		bpl.s	locret_F68A
0000FF1A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FF1E 317C 0000 0012             		move.w	#0,$12(a0)
0000FF24 5428 0024                  		addq.b	#2,$24(a0)
0000FF28 0868 0000 0022             		bchg	#0,$22(a0)
0000FF2E                            
0000FF2E                            locret_F68A:
0000FF2E 4E75                       		rts	
0000FF30                            ; ===========================================================================
0000FF30                            
0000FF30                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FF30 5828 0024                  		addq.b	#4,$24(a0)
0000FF34 6000 0000                  		bra.w	Obj40_Animate
0000FF38                            ; ===========================================================================
0000FF38                            
0000FF38                            Obj40_Action:				; XREF: Obj40_Index
0000FF38 7000                       		moveq	#0,d0
0000FF3A 1028 0025                  		move.b	$25(a0),d0
0000FF3E 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FF42 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FF46 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FF4C 6100 AFD4                  		bsr.w	AnimateSprite
0000FF50                            
0000FF50                            ; ---------------------------------------------------------------------------
0000FF50                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FF50                            ; ---------------------------------------------------------------------------
0000FF50                            
0000FF50                            MarkObjGone:
0000FF50 3028 0008                  		move.w	8(a0),d0
0000FF54 0240 FF80                  		andi.w	#$FF80,d0
0000FF58 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF5C 0441 0080                  		subi.w	#$80,d1
0000FF60 0241 FF80                  		andi.w	#$FF80,d1
0000FF64 9041                       		sub.w	d1,d0
0000FF66 0C40 0280                  		cmpi.w	#$280,d0
0000FF6A 6200 0000                  		bhi.w	Mark_ChkGone
0000FF6E 6000 DF38                  		bra.w	DisplaySprite
0000FF72                            ; ===========================================================================
0000FF72                            
0000FF72                            Mark_ChkGone:
0000FF72 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FF76 7000                       		moveq	#0,d0
0000FF78 1028 0023                  		move.b	$23(a0),d0
0000FF7C 6700                       		beq.s	Mark_Delete
0000FF7E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FF84                            
0000FF84                            Mark_Delete:
0000FF84 6000 DF5E                  		bra.w	DeleteObject
0000FF88                            
0000FF88                            ; ===========================================================================
0000FF88 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FF8A 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FF8C                            ; ===========================================================================
0000FF8C                            
0000FF8C                            Obj40_Move:				; XREF: Obj40_Index2
0000FF8C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FF90 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FF92 5428 0025                  		addq.b	#2,$25(a0)
0000FF96 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FF9C 117C 0001 001C             		move.b	#1,$1C(a0)
0000FFA2 0868 0000 0022             		bchg	#0,$22(a0)
0000FFA8 6600                       		bne.s	locret_F70A
0000FFAA 4468 0010                  		neg.w	$10(a0)		; change direction
0000FFAE                            
0000FFAE                            locret_F70A:
0000FFAE 4E75                       		rts	
0000FFB0                            ; ===========================================================================
0000FFB0                            
0000FFB0                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FFB0 6100 DED0                  		bsr.w	SpeedToPos
0000FFB4 4EB9 0000 0000             		jsr	ObjHitFloor
0000FFBA 0C41 FFF8                  		cmpi.w	#-8,d1
0000FFBE 6D00                       		blt.s	Obj40_Pause
0000FFC0 0C41 000C                  		cmpi.w	#$C,d1
0000FFC4 6C00                       		bge.s	Obj40_Pause
0000FFC6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FFCA 5328 0033                  		subq.b	#1,$33(a0)
0000FFCE 6A00                       		bpl.s	locret_F756
0000FFD0 117C 000F 0033             		move.b	#$F,$33(a0)
0000FFD6 6100 E356                  		bsr.w	SingleObjLoad
0000FFDA 6600                       		bne.s	locret_F756
0000FFDC 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FFE0 3368 0008 0008             		move.w	8(a0),8(a1)
0000FFE6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FFEC 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FFF2 137C 0002 001C             		move.b	#2,$1C(a1)
0000FFF8                            
0000FFF8                            locret_F756:
0000FFF8 4E75                       		rts	
0000FFFA                            ; ===========================================================================
0000FFFA                            
0000FFFA                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FFFA 5528 0025                  		subq.b	#2,$25(a0)
0000FFFE 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010004 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0001000A 117C 0000 001C             		move.b	#0,$1C(a0)
00010010 4E75                       		rts	
00010012                            ; ===========================================================================
00010012                            
00010012                            Obj40_Animate:				; XREF: Obj40_Index
00010012 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010018 6100 AF08                  		bsr.w	AnimateSprite
0001001C 6000 DE8A                  		bra.w	DisplaySprite
00010020                            ; ===========================================================================
00010020                            
00010020                            Obj40_Delete:				; XREF: Obj40_Index
00010020 6000 DEC2                  		bra.w	DeleteObject
00010024                            ; ===========================================================================
00010024                            Ani_obj40:
00010024                            	include "_anim\obj40.asm"
00010024                            ; ---------------------------------------------------------------------------
00010024                            ; Animation script - Motobug enemy
00010024                            ; ---------------------------------------------------------------------------
00010024 0000                       		dc.w byte_F788-Ani_obj40
00010026 0000                       		dc.w byte_F78C-Ani_obj40
00010028 0000                       		dc.w byte_F792-Ani_obj40
0001002A 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0001002E 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00010034 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00010042                            		even
00010042                            		even
00010042                            
00010042                            ; ---------------------------------------------------------------------------
00010042                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010042                            ; ---------------------------------------------------------------------------
00010042                            Map_obj40:
00010042                            	include "_maps\obj40.asm"
00010042                            Map_cedc:
00010042 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
00010044 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
00010046 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
00010048 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0001004A 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0001004C 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0001004E 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
00010050 04                         Map_cedc_E: 	dc.b $4
00010051 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010056 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0001005B F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010060 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
00010065 04                         Map_cedc_23: 	dc.b $4
00010066 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0001006B 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
00010070 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
00010075 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0001007A 05                         Map_cedc_38: 	dc.b $5
0001007B F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010080 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
00010085 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0001008A 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0001008F 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
00010094 01                         Map_cedc_52: 	dc.b $1
00010095 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0001009A 01                         Map_cedc_58: 	dc.b $1
0001009B FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
000100A0 01                         Map_cedc_5E: 	dc.b $1
000100A1 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
000100A6 00                         Map_cedc_64: 	dc.b $0
000100A8 00                         	even
000100A8 00                         	even
000100A8                            
000100A8                            ; ===========================================================================
000100A8                            ; ---------------------------------------------------------------------------
000100A8                            ; Object 4F - blank
000100A8                            ; ---------------------------------------------------------------------------
000100A8                            
000100A8                            Obj4F:					; XREF: Obj_Index
000100A8 4E75                       		rts	
000100AA                            
000100AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000100AA                            
000100AA                            
000100AA                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000100AA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000100AE D047                       		add.w	d7,d0
000100B0 0240 0003                  		andi.w	#3,d0
000100B4 6600                       		bne.s	loc_F836
000100B6 7600                       		moveq	#0,d3
000100B8 1628 0019                  		move.b	$19(a0),d3
000100BC 4A68 0010                  		tst.w	$10(a0)
000100C0 6B00                       		bmi.s	loc_F82C
000100C2 6100 0000                  		bsr.w	ObjHitWallRight
000100C6 4A41                       		tst.w	d1
000100C8 6A00                       		bpl.s	loc_F836
000100CA                            
000100CA                            loc_F828:
000100CA 7001                       		moveq	#1,d0
000100CC 4E75                       		rts	
000100CE                            ; ===========================================================================
000100CE                            
000100CE                            loc_F82C:
000100CE 4643                       		not.w	d3
000100D0 6100 0000                  		bsr.w	ObjHitWallLeft
000100D4 4A41                       		tst.w	d1
000100D6 6BF2                       		bmi.s	loc_F828
000100D8                            
000100D8                            loc_F836:
000100D8 7000                       		moveq	#0,d0
000100DA 4E75                       		rts	
000100DC                            ; End of function Obj50_ChkWall
000100DC                            
000100DC                            ; ===========================================================================
000100DC                            ; ---------------------------------------------------------------------------
000100DC                            ; Object 50 - Yadrin enemy (SYZ)
000100DC                            ; ---------------------------------------------------------------------------
000100DC                            
000100DC                            Obj50:					; XREF: Obj_Index
000100DC 7000                       		moveq	#0,d0
000100DE 1028 0024                  		move.b	$24(a0),d0
000100E2 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
000100E6 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000100EA                            ; ===========================================================================
000100EA 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000100EC 0000                       		dc.w Obj50_Action-Obj50_Index
000100EE                            ; ===========================================================================
000100EE                            
000100EE                            Obj50_Main:				; XREF: Obj50_Index
000100EE 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000100F6 317C 247B 0002             		move.w	#$247B,2(a0)
000100FC 117C 0004 0001             		move.b	#4,1(a0)
00010102 117C 0004 0018             		move.b	#4,$18(a0)
00010108 117C 0014 0019             		move.b	#$14,$19(a0)
0001010E 117C 0011 0016             		move.b	#$11,$16(a0)
00010114 117C 0008 0017             		move.b	#8,$17(a0)
0001011A 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010120 6100 DCEE                  		bsr.w	ObjectFall
00010124 6100 0000                  		bsr.w	ObjHitFloor
00010128 4A41                       		tst.w	d1
0001012A 6A00                       		bpl.s	locret_F89E
0001012C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010130 317C 0000 0012             		move.w	#0,$12(a0)
00010136 5428 0024                  		addq.b	#2,$24(a0)
0001013A 0868 0000 0022             		bchg	#0,$22(a0)
00010140                            
00010140                            locret_F89E:
00010140 4E75                       		rts	
00010142                            ; ===========================================================================
00010142                            
00010142                            Obj50_Action:				; XREF: Obj50_Index
00010142 7000                       		moveq	#0,d0
00010144 1028 0025                  		move.b	$25(a0),d0
00010148 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0001014C 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00010150 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010156 6100 ADCA                  		bsr.w	AnimateSprite
0001015A 6000 FDF4                  		bra.w	MarkObjGone
0001015E                            ; ===========================================================================
0001015E 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00010160 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00010162                            ; ===========================================================================
00010162                            
00010162                            Obj50_Move:				; XREF: Obj50_Index2
00010162 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010166 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010168 5428 0025                  		addq.b	#2,$25(a0)
0001016C 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010172 117C 0001 001C             		move.b	#1,$1C(a0)
00010178 0868 0000 0022             		bchg	#0,$22(a0)
0001017E 6600                       		bne.s	locret_F8E2
00010180 4468 0010                  		neg.w	$10(a0)		; change direction
00010184                            
00010184                            locret_F8E2:
00010184 4E75                       		rts	
00010186                            ; ===========================================================================
00010186                            
00010186                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010186 6100 DCFA                  		bsr.w	SpeedToPos
0001018A 6100 0000                  		bsr.w	ObjHitFloor
0001018E 0C41 FFF8                  		cmpi.w	#-8,d1
00010192 6D00                       		blt.s	Obj50_Pause
00010194 0C41 000C                  		cmpi.w	#$C,d1
00010198 6C00                       		bge.s	Obj50_Pause
0001019A D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0001019E 6100 FF0A                  		bsr.w	Obj50_ChkWall
000101A2 6600                       		bne.s	Obj50_Pause
000101A4 4E75                       		rts	
000101A6                            ; ===========================================================================
000101A6                            
000101A6                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000101A6 5528 0025                  		subq.b	#2,$25(a0)
000101AA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000101B0 317C 0000 0010             		move.w	#0,$10(a0)
000101B6 117C 0000 001C             		move.b	#0,$1C(a0)
000101BC 4E75                       		rts	
000101BE                            ; ===========================================================================
000101BE                            Ani_obj50:
000101BE                            	include "_anim\obj50.asm"
000101BE                            ; ---------------------------------------------------------------------------
000101BE                            ; Animation script - Yadrin enemy
000101BE                            ; ---------------------------------------------------------------------------
000101BE 0000                       		dc.w byte_F920-Ani_obj50
000101C0 0000                       		dc.w byte_F924-Ani_obj50
000101C2 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000101C6 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000101D0                            		even
000101D0                            		even
000101D0                            
000101D0                            ; ---------------------------------------------------------------------------
000101D0                            ; Sprite mappings - Yadrin enemy (SYZ)
000101D0                            ; ---------------------------------------------------------------------------
000101D0                            Map_obj50:
000101D0                            	include "_maps\obj50.asm"
000101D0                            Map_ff24:
000101D0 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
000101D2 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
000101D4 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
000101D6 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
000101D8 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
000101DA 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
000101DC 05                         Map_ff24_C: 	dc.b $5
000101DD F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000101E2 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000101E7 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101EC F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101F1 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000101F6 05                         Map_ff24_26: 	dc.b $5
000101F7 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000101FC FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010201 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010206 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001020B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010210 05                         Map_ff24_40: 	dc.b $5
00010211 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010216 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
0001021B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010220 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010225 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001022A 05                         Map_ff24_5A: 	dc.b $5
0001022B F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010230 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010235 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001023A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001023F 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010244 05                         Map_ff24_74: 	dc.b $5
00010245 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0001024A FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001024F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010254 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010259 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001025E 05                         Map_ff24_8E: 	dc.b $5
0001025F F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010264 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010269 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001026E F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010273 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010278                            	even
00010278                            	even
00010278                            
00010278                            ; ---------------------------------------------------------------------------
00010278                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010278                            ;
00010278                            ; variables:
00010278                            ; d1 = width
00010278                            ; d2 = height /	2 (when	jumping)
00010278                            ; d3 = height /	2 (when	walking)
00010278                            ; d4 = x-axis position
00010278                            ; ---------------------------------------------------------------------------
00010278                            
00010278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010278                            
00010278                            
00010278                            SolidObject:
00010278 4A28 0025                  		tst.b	$25(a0)
0001027C 6700 0000                  		beq.w	loc_FAC8
00010280 3401                       		move.w	d1,d2
00010282 D442                       		add.w	d2,d2
00010284 43F8 D000                  		lea	($FFFFD000).w,a1
00010288 0829 0001 0022             		btst	#1,$22(a1)
0001028E 6600                       		bne.s	loc_F9FE
00010290 3029 0008                  		move.w	8(a1),d0
00010294 9068 0008                  		sub.w	8(a0),d0
00010298 D041                       		add.w	d1,d0
0001029A 6B00                       		bmi.s	loc_F9FE
0001029C B042                       		cmp.w	d2,d0
0001029E 6500                       		bcs.s	loc_FA12
000102A0                            
000102A0                            loc_F9FE:
000102A0 08A9 0003 0022             		bclr	#3,$22(a1)
000102A6 08A8 0003 0022             		bclr	#3,$22(a0)
000102AC 4228 0025                  		clr.b	$25(a0)
000102B0 7800                       		moveq	#0,d4
000102B2 4E75                       		rts	
000102B4                            ; ===========================================================================
000102B4                            
000102B4                            loc_FA12:
000102B4 3404                       		move.w	d4,d2
000102B6                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
000102B6 7800                       		moveq	#0,d4
000102B8 4E75                       		rts	
000102BA                            ; ===========================================================================
000102BA                            
000102BA                            SolidObject71:				; XREF: Obj71_Solid
000102BA 4A28 0025                  		tst.b	$25(a0)
000102BE 6700 0000                  		beq.w	loc_FAD0
000102C2 3401                       		move.w	d1,d2
000102C4 D442                       		add.w	d2,d2
000102C6 43F8 D000                  		lea	($FFFFD000).w,a1
000102CA 0829 0001 0022             		btst	#1,$22(a1)
000102D0 6600                       		bne.s	loc_FA44
000102D2 3029 0008                  		move.w	8(a1),d0
000102D6 9068 0008                  		sub.w	8(a0),d0
000102DA D041                       		add.w	d1,d0
000102DC 6B00                       		bmi.s	loc_FA44
000102DE B042                       		cmp.w	d2,d0
000102E0 6500                       		bcs.s	loc_FA58
000102E2                            
000102E2                            loc_FA44:
000102E2 08A9 0003 0022             		bclr	#3,$22(a1)
000102E8 08A8 0003 0022             		bclr	#3,$22(a0)
000102EE 4228 0025                  		clr.b	$25(a0)
000102F2 7800                       		moveq	#0,d4
000102F4 4E75                       		rts	
000102F6                            ; ===========================================================================
000102F6                            
000102F6                            loc_FA58:
000102F6 3404                       		move.w	d4,d2
000102F8                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000102F8 7800                       		moveq	#0,d4
000102FA 4E75                       		rts	
000102FC                            ; ===========================================================================
000102FC                            
000102FC                            SolidObject2F:				; XREF: Obj2F_Solid
000102FC 43F8 D000                  		lea	($FFFFD000).w,a1
00010300 4A28 0001                  		tst.b	1(a0)
00010304 6A00 0000                  		bpl.w	loc_FB92
00010308 3029 0008                  		move.w	8(a1),d0
0001030C 9068 0008                  		sub.w	8(a0),d0
00010310 D041                       		add.w	d1,d0
00010312 6B00 0000                  		bmi.w	loc_FB92
00010316 3601                       		move.w	d1,d3
00010318 D643                       		add.w	d3,d3
0001031A B043                       		cmp.w	d3,d0
0001031C 6200 0000                  		bhi.w	loc_FB92
00010320 3A00                       		move.w	d0,d5
00010322 0828 0000 0001             		btst	#0,1(a0)
00010328 6700                       		beq.s	loc_FA94
0001032A 4645                       		not.w	d5
0001032C DA43                       		add.w	d3,d5
0001032E                            
0001032E                            loc_FA94:
0001032E E24D                       		lsr.w	#1,d5
00010330 7600                       		moveq	#0,d3
00010332 1632 5000                  		move.b	(a2,d5.w),d3
00010336 9612                       		sub.b	(a2),d3
00010338 3A28 000C                  		move.w	$C(a0),d5
0001033C 9A43                       		sub.w	d3,d5
0001033E 1629 0016                  		move.b	$16(a1),d3
00010342 4883                       		ext.w	d3
00010344 D443                       		add.w	d3,d2
00010346 3629 000C                  		move.w	$C(a1),d3
0001034A 9645                       		sub.w	d5,d3
0001034C 5843                       		addq.w	#4,d3
0001034E D642                       		add.w	d2,d3
00010350 6B00 0000                  		bmi.w	loc_FB92
00010354 3802                       		move.w	d2,d4
00010356 D844                       		add.w	d4,d4
00010358 B644                       		cmp.w	d4,d3
0001035A 6400 0000                  		bcc.w	loc_FB92
0001035E 6000 0000                  		bra.w	loc_FB0E
00010362                            ; ===========================================================================
00010362                            
00010362                            loc_FAC8:
00010362 4A28 0001                  		tst.b	1(a0)
00010366 6A00 0000                  		bpl.w	loc_FB92
0001036A                            
0001036A                            loc_FAD0:
0001036A 43F8 D000                  		lea	($FFFFD000).w,a1
0001036E 3029 0008                  		move.w	8(a1),d0
00010372 9068 0008                  		sub.w	8(a0),d0
00010376 D041                       		add.w	d1,d0
00010378 6B00 0000                  		bmi.w	loc_FB92
0001037C 3601                       		move.w	d1,d3
0001037E D643                       		add.w	d3,d3
00010380 B043                       		cmp.w	d3,d0
00010382 6200 0000                  		bhi.w	loc_FB92
00010386 1629 0016                  		move.b	$16(a1),d3
0001038A 4883                       		ext.w	d3
0001038C D443                       		add.w	d3,d2
0001038E 3629 000C                  		move.w	$C(a1),d3
00010392 9668 000C                  		sub.w	$C(a0),d3
00010396 5843                       		addq.w	#4,d3
00010398 D642                       		add.w	d2,d3
0001039A 6B00 0000                  		bmi.w	loc_FB92
0001039E 3802                       		move.w	d2,d4
000103A0 D844                       		add.w	d4,d4
000103A2 B644                       		cmp.w	d4,d3
000103A4 6400 0000                  		bcc.w	loc_FB92
000103A8                            
000103A8                            loc_FB0E:
000103A8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000103AC 6B00 0000                  		bmi.w	loc_FB92
000103B0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000103B6 6400 0000                  		bcc.w	loc_FB92
000103BA 4A78 FE08                  		tst.w	($FFFFFE08).w
000103BE 6600 0000                  		bne.w	loc_FBAC
000103C2 3A00                       		move.w	d0,d5
000103C4 B240                       		cmp.w	d0,d1
000103C6 6400                       		bcc.s	loc_FB36
000103C8 D241                       		add.w	d1,d1
000103CA 9041                       		sub.w	d1,d0
000103CC 3A00                       		move.w	d0,d5
000103CE 4445                       		neg.w	d5
000103D0                            
000103D0                            loc_FB36:
000103D0 3203                       		move.w	d3,d1
000103D2 B443                       		cmp.w	d3,d2
000103D4 6400                       		bcc.s	loc_FB44
000103D6 5943                       		subq.w	#4,d3
000103D8 9644                       		sub.w	d4,d3
000103DA 3203                       		move.w	d3,d1
000103DC 4441                       		neg.w	d1
000103DE                            
000103DE                            loc_FB44:
000103DE BA41                       		cmp.w	d1,d5
000103E0 6200 0000                  		bhi.w	loc_FBB0
000103E4 0C41 0004                  		cmpi.w	#4,d1
000103E8 6300                       		bls.s	loc_FB8C
000103EA 4A40                       		tst.w	d0
000103EC 6700                       		beq.s	loc_FB70
000103EE 6B00                       		bmi.s	loc_FB5E
000103F0 4A69 0010                  		tst.w	$10(a1)
000103F4 6B00                       		bmi.s	loc_FB70
000103F6 6000                       		bra.s	loc_FB64
000103F8                            ; ===========================================================================
000103F8                            
000103F8                            loc_FB5E:
000103F8 4A69 0010                  		tst.w	$10(a1)
000103FC 6A00                       		bpl.s	loc_FB70
000103FE                            
000103FE                            loc_FB64:
000103FE 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010404 337C 0000 0010             		move.w	#0,$10(a1)
0001040A                            
0001040A                            loc_FB70:
0001040A 9169 0008                  		sub.w	d0,8(a1)
0001040E 0829 0001 0022             		btst	#1,$22(a1)
00010414 6600                       		bne.s	loc_FB8C
00010416 08E9 0005 0022             		bset	#5,$22(a1)
0001041C 08E8 0005 0022             		bset	#5,$22(a0)
00010422 7801                       		moveq	#1,d4
00010424 4E75                       		rts	
00010426                            ; ===========================================================================
00010426                            
00010426                            loc_FB8C:
00010426 6100                       		bsr.s	loc_FBA0
00010428 7801                       		moveq	#1,d4
0001042A 4E75                       		rts	
0001042C                            ; ===========================================================================
0001042C                            
0001042C                            loc_FB92:
0001042C 0828 0005 0022             		btst	#5,$22(a0)
00010432 6700                       		beq.s	loc_FBAC
00010434 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001043A                            
0001043A                            loc_FBA0:
0001043A 08A8 0005 0022             		bclr	#5,$22(a0)
00010440 08A9 0005 0022             		bclr	#5,$22(a1)
00010446                            
00010446                            loc_FBAC:
00010446 7800                       		moveq	#0,d4
00010448 4E75                       		rts	
0001044A                            ; ===========================================================================
0001044A                            
0001044A                            loc_FBB0:
0001044A 4A43                       		tst.w	d3
0001044C 6B00                       		bmi.s	loc_FBBC
0001044E 0C43 0010                  		cmpi.w	#$10,d3
00010452 6500                       		bcs.s	loc_FBEE
00010454 60D6                       		bra.s	loc_FB92
00010456                            ; ===========================================================================
00010456                            
00010456                            loc_FBBC:
00010456 4A69 0012                  		tst.w	$12(a1)
0001045A 6700                       		beq.s	loc_FBD6
0001045C 6A00                       		bpl.s	loc_FBD2
0001045E 4A43                       		tst.w	d3
00010460 6A00                       		bpl.s	loc_FBD2
00010462 9769 000C                  		sub.w	d3,$C(a1)
00010466 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001046C                            
0001046C                            loc_FBD2:
0001046C 78FF                       		moveq	#-1,d4
0001046E 4E75                       		rts	
00010470                            ; ===========================================================================
00010470                            
00010470                            loc_FBD6:
00010470 0829 0001 0022             		btst	#1,$22(a1)
00010476 66F4                       		bne.s	loc_FBD2
00010478 2F08                       		move.l	a0,-(sp)
0001047A 2049                       		movea.l	a1,a0
0001047C 4EB9 0000 0000             		jsr	KillSonic
00010482 205F                       		movea.l	(sp)+,a0
00010484 78FF                       		moveq	#-1,d4
00010486 4E75                       		rts	
00010488                            ; ===========================================================================
00010488                            
00010488                            loc_FBEE:
00010488 5943                       		subq.w	#4,d3
0001048A 7200                       		moveq	#0,d1
0001048C 1228 0019                  		move.b	$19(a0),d1
00010490 3401                       		move.w	d1,d2
00010492 D442                       		add.w	d2,d2
00010494 D269 0008                  		add.w	8(a1),d1
00010498 9268 0008                  		sub.w	8(a0),d1
0001049C 6B00                       		bmi.s	loc_FC28
0001049E B242                       		cmp.w	d2,d1
000104A0 6400                       		bcc.s	loc_FC28
000104A2 4A69 0012                  		tst.w	$12(a1)
000104A6 6B00                       		bmi.s	loc_FC28
000104A8 9769 000C                  		sub.w	d3,$C(a1)
000104AC 5369 000C                  		subq.w	#1,$C(a1)
000104B0 6100                       		bsr.s	sub_FC2C
000104B2 117C 0002 0025             		move.b	#2,$25(a0)
000104B8 08E8 0003 0022             		bset	#3,$22(a0)
000104BE 78FF                       		moveq	#-1,d4
000104C0 4E75                       		rts	
000104C2                            ; ===========================================================================
000104C2                            
000104C2                            loc_FC28:
000104C2 7800                       		moveq	#0,d4
000104C4 4E75                       		rts	
000104C6                            ; End of function SolidObject
000104C6                            
000104C6                            
000104C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104C6                            
000104C6                            
000104C6                            sub_FC2C:				; XREF: SolidObject
000104C6 0829 0003 0022             		btst	#3,$22(a1)
000104CC 6700                       		beq.s	loc_FC4E
000104CE 7000                       		moveq	#0,d0
000104D0 1029 003D                  		move.b	$3D(a1),d0
000104D4 ED48                       		lsl.w	#6,d0
000104D6 0680 00FF D000             		addi.l	#$FFD000,d0
000104DC 2440                       		movea.l	d0,a2
000104DE 08AA 0003 0022             		bclr	#3,$22(a2)
000104E4 422A 0025                  		clr.b	$25(a2)
000104E8                            
000104E8                            loc_FC4E:
000104E8 3008                       		move.w	a0,d0
000104EA 0440 D000                  		subi.w	#-$3000,d0
000104EE EC48                       		lsr.w	#6,d0
000104F0 0240 007F                  		andi.w	#$7F,d0
000104F4 1340 003D                  		move.b	d0,$3D(a1)
000104F8 137C 0000 0026             		move.b	#0,$26(a1)
000104FE 337C 0000 0012             		move.w	#0,$12(a1)
00010504 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001050A 0829 0001 0022             		btst	#1,$22(a1)
00010510 6700                       		beq.s	loc_FC84
00010512 2F08                       		move.l	a0,-(sp)
00010514 2049                       		movea.l	a1,a0
00010516 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001051C 205F                       		movea.l	(sp)+,a0
0001051E                            
0001051E                            loc_FC84:
0001051E 08E9 0003 0022             		bset	#3,$22(a1)
00010524 08E8 0003 0022             		bset	#3,$22(a0)
0001052A 4E75                       		rts	
0001052C                            ; End of function sub_FC2C
0001052C                            
0001052C                            ; ===========================================================================
0001052C                            ; ---------------------------------------------------------------------------
0001052C                            ; Object 51 - smashable	green block (MZ)
0001052C                            ; ---------------------------------------------------------------------------
0001052C                            
0001052C                            Obj51:					; XREF: Obj_Index
0001052C 7000                       		moveq	#0,d0
0001052E 1028 0024                  		move.b	$24(a0),d0
00010532 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010536 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001053A 6000 FA14                  		bra.w	MarkObjGone
0001053E                            ; ===========================================================================
0001053E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010540 0000                       		dc.w Obj51_Solid-Obj51_Index
00010542 0000                       		dc.w Obj51_Display-Obj51_Index
00010544                            ; ===========================================================================
00010544                            
00010544                            Obj51_Main:				; XREF: Obj51_Index
00010544 5428 0024                  		addq.b	#2,$24(a0)
00010548 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010550 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010556 117C 0004 0001             		move.b	#4,1(a0)
0001055C 117C 0010 0019             		move.b	#$10,$19(a0)
00010562 117C 0004 0018             		move.b	#4,$18(a0)
00010568 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001056E                            
0001056E                            Obj51_Solid:				; XREF: Obj51_Index
0001056E 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010574 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001057A 323C 001B                  		move.w	#$1B,d1
0001057E 343C 0010                  		move.w	#$10,d2
00010582 363C 0011                  		move.w	#$11,d3
00010586 3828 0008                  		move.w	8(a0),d4
0001058A 6100 FCEC                  		bsr.w	SolidObject
0001058E 0828 0003 0022             		btst	#3,$22(a0)
00010594 6600                       		bne.s	Obj51_Smash
00010596                            
00010596                            locret_FCFC:
00010596 4E75                       		rts	
00010598                            ; ===========================================================================
00010598                            
00010598                            Obj51_Smash:				; XREF: Obj51_Solid
00010598 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001059E 66F6                       		bne.s	locret_FCFC	; if not, branch
000105A0 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000105A6 08E9 0002 0022             		bset	#2,$22(a1)
000105AC 137C 000E 0016             		move.b	#$E,$16(a1)
000105B2 137C 0007 0017             		move.b	#7,$17(a1)
000105B8 137C 0002 001C             		move.b	#2,$1C(a1)
000105BE 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000105C4 08E9 0001 0022             		bset	#1,$22(a1)
000105CA 08A9 0003 0022             		bclr	#3,$22(a1)
000105D0 137C 0002 0024             		move.b	#2,$24(a1)
000105D6 08A8 0003 0022             		bclr	#3,$22(a0)
000105DC 4228 0025                  		clr.b	$25(a0)
000105E0 117C 0001 001A             		move.b	#1,$1A(a0)
000105E6 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000105EC 7203                       		moveq	#3,d1		; set number of	fragments to 4
000105EE 343C 0038                  		move.w	#$38,d2
000105F2 6100 D45C                  		bsr.w	SmashObject
000105F6 6100 DD36                  		bsr.w	SingleObjLoad
000105FA 6600                       		bne.s	Obj51_Display
000105FC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010600 3368 0008 0008             		move.w	8(a0),8(a1)
00010606 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001060C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010610 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010614 0C42 0006                  		cmpi.w	#6,d2
00010618 6500                       		bcs.s	Obj51_Bonus
0001061A 7406                       		moveq	#6,d2
0001061C                            
0001061C                            Obj51_Bonus:
0001061C 7000                       		moveq	#0,d0
0001061E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010622 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010628 6500                       		bcs.s	loc_FD98	; if not, branch
0001062A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001062E 740A                       		moveq	#10,d2
00010630                            
00010630                            loc_FD98:
00010630 4EB9 0000 0000             		jsr	AddPoints
00010636 E24A                       		lsr.w	#1,d2
00010638 1342 001A                  		move.b	d2,$1A(a1)
0001063C                            
0001063C                            Obj51_Display:				; XREF: Obj51_Index
0001063C 6100 D844                  		bsr.w	SpeedToPos
00010640 0668 0038 0012             		addi.w	#$38,$12(a0)
00010646 6100 D860                  		bsr.w	DisplaySprite
0001064A 4A28 0001                  		tst.b	1(a0)
0001064E 6A00 D894                  		bpl.w	DeleteObject
00010652 4E75                       		rts	
00010654                            ; ===========================================================================
00010654 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010658 FF00 FF00                  		dc.w $FF00, $FF00
0001065C 0200 FE00                  		dc.w $200, $FE00
00010660 0100 FF00                  		dc.w $100, $FF00
00010664                            
00010664 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001066C                            ; ---------------------------------------------------------------------------
0001066C                            ; Sprite mappings - smashable green block (MZ)
0001066C                            ; ---------------------------------------------------------------------------
0001066C                            Map_obj51:
0001066C                            	include "_maps\obj51.asm"
0001066C                            ; ---------------------------------------------------------------------------
0001066C                            ; Sprite mappings - smashable green block (MZ)
0001066C                            ; ---------------------------------------------------------------------------
0001066C 0000                       		dc.w byte_FDD8-Map_obj51
0001066E 0000                       		dc.w byte_FDE3-Map_obj51
00010670 02                         byte_FDD8:	dc.b 2
00010671 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010676 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001067B 04                         byte_FDE3:	dc.b 4
0001067C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010681 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010686 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001068B 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010690                            		even
00010690                            		even
00010690                            
00010690                            ; ===========================================================================
00010690                            ; ---------------------------------------------------------------------------
00010690                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010690                            ; ---------------------------------------------------------------------------
00010690                            
00010690                            Obj52:					; XREF: Obj_Index
00010690 7000                       		moveq	#0,d0
00010692 1028 0024                  		move.b	$24(a0),d0
00010696 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001069A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001069E                            ; ===========================================================================
0001069E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000106A0 0000                       		dc.w Obj52_Platform-Obj52_Index
000106A2 0000                       		dc.w Obj52_StandOn-Obj52_Index
000106A4                            
000106A4 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000106A6 2001                       		dc.b $20, 1
000106A8 2002                       		dc.b $20, 2
000106AA 4003                       		dc.b $40, 3
000106AC 3004                       		dc.b $30, 4
000106AE                            ; ===========================================================================
000106AE                            
000106AE                            Obj52_Main:				; XREF: Obj52_Index
000106AE 5428 0024                  		addq.b	#2,$24(a0)
000106B2 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000106BA 317C 42B8 0002             		move.w	#$42B8,2(a0)
000106C0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000106C6 6600                       		bne.s	loc_FE44
000106C8 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000106D0 317C 43BC 0002             		move.w	#$43BC,2(a0)
000106D6 117C 0007 0016             		move.b	#7,$16(a0)
000106DC                            
000106DC                            loc_FE44:
000106DC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000106E2 6600                       		bne.s	loc_FE60
000106E4 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000106EA 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000106F0 6700                       		beq.s	loc_FE60	; if yes, branch
000106F2 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000106F8                            
000106F8                            loc_FE60:
000106F8 117C 0004 0001             		move.b	#4,1(a0)
000106FE 7000                       		moveq	#0,d0
00010700 1028 0028                  		move.b	$28(a0),d0
00010704 E648                       		lsr.w	#3,d0
00010706 0240 001E                  		andi.w	#$1E,d0
0001070A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001070E 115A 0019                  		move.b	(a2)+,$19(a0)
00010712 115A 001A                  		move.b	(a2)+,$1A(a0)
00010716 117C 0004 0018             		move.b	#4,$18(a0)
0001071C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010722 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010728 0228 000F 0028             		andi.b	#$F,$28(a0)
0001072E                            
0001072E                            Obj52_Platform:				; XREF: Obj52_Index
0001072E 6100 0000                  		bsr.w	Obj52_Move
00010732 7200                       		moveq	#0,d1
00010734 1228 0019                  		move.b	$19(a0),d1
00010738 4EB9 0000 7AE2             		jsr	(PlatformObject).l
0001073E 6000                       		bra.s	Obj52_ChkDel
00010740                            ; ===========================================================================
00010740                            
00010740                            Obj52_StandOn:				; XREF: Obj52_Index
00010740 7200                       		moveq	#0,d1
00010742 1228 0019                  		move.b	$19(a0),d1
00010746 4EB9 0000 7C56             		jsr	(ExitPlatform).l
0001074C 3F28 0008                  		move.w	8(a0),-(sp)
00010750 6100 0000                  		bsr.w	Obj52_Move
00010754 341F                       		move.w	(sp)+,d2
00010756 4EB9 0000 81C0             		jsr	(MvSonicOnPtfm2).l
0001075C                            
0001075C                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001075C 3028 0030                  		move.w	$30(a0),d0
00010760 0240 FF80                  		andi.w	#$FF80,d0
00010764 3238 F700                  		move.w	($FFFFF700).w,d1
00010768 0441 0080                  		subi.w	#$80,d1
0001076C 0241 FF80                  		andi.w	#$FF80,d1
00010770 9041                       		sub.w	d1,d0
00010772 0C40 0280                  		cmpi.w	#$280,d0
00010776 6200 D76C                  		bhi.w	DeleteObject
0001077A 6000 D72C                  		bra.w	DisplaySprite
0001077E                            ; ===========================================================================
0001077E                            
0001077E                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001077E 7000                       		moveq	#0,d0
00010780 1028 0028                  		move.b	$28(a0),d0
00010784 0240 000F                  		andi.w	#$F,d0
00010788 D040                       		add.w	d0,d0
0001078A 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001078E 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010792                            ; ===========================================================================
00010792 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010796 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001079A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001079E 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000107A2 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000107A6 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000107A8                            ; ===========================================================================
000107A8                            
000107A8                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000107A8 4E75                       		rts	
000107AA                            ; ===========================================================================
000107AA                            
000107AA                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000107AA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000107AE 323C 0060                  		move.w	#$60,d1
000107B2 0828 0000 0022             		btst	#0,$22(a0)
000107B8 6700                       		beq.s	loc_FF26
000107BA 4440                       		neg.w	d0
000107BC D041                       		add.w	d1,d0
000107BE                            
000107BE                            loc_FF26:
000107BE 3228 0030                  		move.w	$30(a0),d1
000107C2 9240                       		sub.w	d0,d1
000107C4 3141 0008                  		move.w	d1,8(a0)
000107C8 4E75                       		rts	
000107CA                            ; ===========================================================================
000107CA                            
000107CA                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000107CA 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000107D0 6600                       		bne.s	Obj52_02_Wait
000107D2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000107D6                            
000107D6                            Obj52_02_Wait:
000107D6 4E75                       		rts	
000107D8                            ; ===========================================================================
000107D8                            
000107D8                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000107D8 7600                       		moveq	#0,d3
000107DA 1628 0019                  		move.b	$19(a0),d3
000107DE 6100 0000                  		bsr.w	ObjHitWallRight
000107E2 4A41                       		tst.w	d1		; has the platform hit a wall?
000107E4 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000107E6 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000107EA 3168 0008 0030             		move.w	8(a0),$30(a0)
000107F0 4E75                       		rts	
000107F2                            ; ===========================================================================
000107F2                            
000107F2                            Obj52_03_End:
000107F2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000107F6 4E75                       		rts	
000107F8                            ; ===========================================================================
000107F8                            
000107F8                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000107F8 7600                       		moveq	#0,d3
000107FA 1628 0019                  		move.b	$19(a0),d3
000107FE 6100 0000                  		bsr.w	ObjHitWallRight
00010802 4A41                       		tst.w	d1		; has the platform hit a wall?
00010804 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010806 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001080A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010810 4E75                       		rts	
00010812                            ; ===========================================================================
00010812                            
00010812                            Obj52_05_End:
00010812 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010816 4E75                       		rts	
00010818                            ; ===========================================================================
00010818                            
00010818                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010818 6100 D668                  		bsr.w	SpeedToPos
0001081C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010822 6100 0000                  		bsr.w	ObjHitFloor
00010826 4A41                       		tst.w	d1		; has platform hit the floor?
00010828 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001082C D368 000C                  		add.w	d1,$C(a0)
00010830 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010834 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010838                            
00010838                            locret_FFA0:
00010838 4E75                       		rts	
0001083A                            ; ===========================================================================
0001083A                            
0001083A                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001083A 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001083E 6700                       		beq.s	Obj52_07_ChkDel
00010840 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010844                            
00010844                            Obj52_07_ChkDel:
00010844 588F                       		addq.l	#4,sp
00010846 3028 0030                  		move.w	$30(a0),d0
0001084A 0240 FF80                  		andi.w	#$FF80,d0
0001084E 3238 F700                  		move.w	($FFFFF700).w,d1
00010852 0441 0080                  		subi.w	#$80,d1
00010856 0241 FF80                  		andi.w	#$FF80,d1
0001085A 9041                       		sub.w	d1,d0
0001085C 0C40 0280                  		cmpi.w	#$280,d0
00010860 6200 D682                  		bhi.w	DeleteObject
00010864 4E75                       		rts	
00010866                            ; ===========================================================================
00010866                            
00010866                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010866 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001086A 323C 0080                  		move.w	#$80,d1
0001086E 0828 0000 0022             		btst	#0,$22(a0)
00010874 6700                       		beq.s	loc_FFE2
00010876 4440                       		neg.w	d0
00010878 D041                       		add.w	d1,d0
0001087A                            
0001087A                            loc_FFE2:
0001087A 3228 0032                  		move.w	$32(a0),d1
0001087E 9240                       		sub.w	d0,d1
00010880 3141 000C                  		move.w	d1,$C(a0)
00010884 4E75                       		rts	
00010886                            ; ===========================================================================
00010886                            
00010886                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010886 7600                       		moveq	#0,d3
00010888 1628 0019                  		move.b	$19(a0),d3
0001088C D643                       		add.w	d3,d3
0001088E 7208                       		moveq	#8,d1
00010890 0828 0000 0022             		btst	#0,$22(a0)
00010896 6700                       		beq.s	loc_10004
00010898 4441                       		neg.w	d1
0001089A 4443                       		neg.w	d3
0001089C                            
0001089C                            loc_10004:
0001089C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000108A0 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000108A2 3028 0008                  		move.w	8(a0),d0
000108A6 9068 0030                  		sub.w	$30(a0),d0
000108AA B043                       		cmp.w	d3,d0
000108AC 6700                       		beq.s	Obj52_0A_Wait
000108AE D368 0008                  		add.w	d1,8(a0)	; move platform
000108B2 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000108B8 4E75                       		rts	
000108BA                            ; ===========================================================================
000108BA                            
000108BA                            Obj52_0A_Wait:
000108BA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000108BE 6600                       		bne.s	locret_1002E	; if time remains, branch
000108C0 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000108C6                            
000108C6                            locret_1002E:
000108C6 4E75                       		rts	
000108C8                            ; ===========================================================================
000108C8                            
000108C8                            Obj52_0A_Back:
000108C8 3028 0008                  		move.w	8(a0),d0
000108CC 9068 0030                  		sub.w	$30(a0),d0
000108D0 6700                       		beq.s	Obj52_0A_Reset
000108D2 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000108D6 4E75                       		rts	
000108D8                            ; ===========================================================================
000108D8                            
000108D8                            Obj52_0A_Reset:
000108D8 4268 0036                  		clr.w	$36(a0)
000108DC 5328 0028                  		subq.b	#1,$28(a0)
000108E0 4E75                       		rts	
000108E2                            ; ===========================================================================
000108E2                            ; ---------------------------------------------------------------------------
000108E2                            ; Sprite mappings - moving blocks (MZ, SBZ)
000108E2                            ; ---------------------------------------------------------------------------
000108E2                            Map_obj52:
000108E2                            	include "_maps\obj52mz.asm"
000108E2                            ; ---------------------------------------------------------------------------
000108E2                            ; Sprite mappings - moving blocks (MZ, SBZ)
000108E2                            ; ---------------------------------------------------------------------------
000108E2 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000108E6 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000108EA 0000                       		dc.w byte_1008F-Map_obj52
000108EC 01                         byte_10054:	dc.b 1
000108ED F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000108F2 02                         byte_1005A:	dc.b 2
000108F3 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000108F8 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000108FD 04                         byte_10065:	dc.b 4
000108FE F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010903 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010908 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001090D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010912 04                         byte_1007A:	dc.b 4
00010913 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010918 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001091D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010922 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010927 03                         byte_1008F:	dc.b 3
00010928 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001092D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010932 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010938 00                         		even
00010938 00                         		even
00010938                            
00010938                            ; ---------------------------------------------------------------------------
00010938                            ; Sprite mappings - moving block (LZ)
00010938                            ; ---------------------------------------------------------------------------
00010938                            Map_obj52a:
00010938                            	include "_maps\obj52lz.asm"
00010938                            ; ---------------------------------------------------------------------------
00010938                            ; Sprite mappings - moving block (LZ)
00010938                            ; ---------------------------------------------------------------------------
00010938 0000                       		dc.w byte_100A2-Map_obj52a
0001093A 01                         byte_100A2:	dc.b 1
0001093B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010940                            		even
00010940                            		even
00010940                            
00010940                            ; ===========================================================================
00010940                            ; ---------------------------------------------------------------------------
00010940                            ; Object 55 - Basaran enemy (MZ)
00010940                            ; ---------------------------------------------------------------------------
00010940                            
00010940                            Obj55:					; XREF: Obj_Index
00010940 7000                       		moveq	#0,d0
00010942 1028 0024                  		move.b	$24(a0),d0
00010946 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001094A 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001094E                            ; ===========================================================================
0001094E 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010950 0000                       		dc.w Obj55_Action-Obj55_Index
00010952                            ; ===========================================================================
00010952                            
00010952                            Obj55_Main:				; XREF: Obj55_Index
00010952 5428 0024                  		addq.b	#2,$24(a0)
00010956 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001095E 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010964 117C 0004 0001             		move.b	#4,1(a0)
0001096A 117C 000C 0016             		move.b	#$C,$16(a0)
00010970 117C 0002 0018             		move.b	#2,$18(a0)
00010976 117C 000B 0020             		move.b	#$B,$20(a0)
0001097C 117C 0010 0019             		move.b	#$10,$19(a0)
00010982                            
00010982                            Obj55_Action:				; XREF: Obj55_Index
00010982 7000                       		moveq	#0,d0
00010984 1028 0025                  		move.b	$25(a0),d0
00010988 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001098C 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010990 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010996 6100 A58A                  		bsr.w	AnimateSprite
0001099A 6000 F5B4                  		bra.w	MarkObjGone
0001099E                            ; ===========================================================================
0001099E 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000109A0 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000109A2 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000109A4 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000109A6                            ; ===========================================================================
000109A6                            
000109A6                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000109A6 343C 0080                  		move.w	#$80,d2
000109AA 6100 0000                  		bsr.w	Obj55_ChkSonic
000109AE 6400                       		bcc.s	Obj55_NoDrop
000109B0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000109B4 3140 0036                  		move.w	d0,$36(a0)
000109B8 9068 000C                  		sub.w	$C(a0),d0
000109BC 6500                       		bcs.s	Obj55_NoDrop
000109BE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000109C2 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000109C4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000109C8 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000109CA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000109CE D007                       		add.b	d7,d0
000109D0 0200 0007                  		andi.b	#7,d0
000109D4 6600                       		bne.s	Obj55_NoDrop
000109D6 117C 0001 001C             		move.b	#1,$1C(a0)
000109DC 5428 0025                  		addq.b	#2,$25(a0)
000109E0                            
000109E0                            Obj55_NoDrop:
000109E0 4E75                       		rts	
000109E2                            ; ===========================================================================
000109E2                            
000109E2                            Obj55_DropFly:				; XREF: Obj55_Index2
000109E2 6100 D49E                  		bsr.w	SpeedToPos
000109E6 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000109EC 343C 0080                  		move.w	#$80,d2
000109F0 6100 0000                  		bsr.w	Obj55_ChkSonic
000109F4 3028 0036                  		move.w	$36(a0),d0
000109F8 9068 000C                  		sub.w	$C(a0),d0
000109FC 6500                       		bcs.s	Obj55_ChkDel
000109FE 0C40 0010                  		cmpi.w	#$10,d0
00010A02 6400                       		bcc.s	locret_10180
00010A04 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010A08 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010A0E 117C 0002 001C             		move.b	#2,$1C(a0)
00010A14 5428 0025                  		addq.b	#2,$25(a0)
00010A18                            
00010A18                            locret_10180:
00010A18 4E75                       		rts	
00010A1A                            ; ===========================================================================
00010A1A                            
00010A1A                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010A1A 4A28 0001                  		tst.b	1(a0)
00010A1E 6A00 D4C4                  		bpl.w	DeleteObject
00010A22 4E75                       		rts	
00010A24                            ; ===========================================================================
00010A24                            
00010A24                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010A24 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010A28 0200 000F                  		andi.b	#$F,d0
00010A2C 6600                       		bne.s	loc_101A0
00010A2E 303C 00C0                  		move.w	#$C0,d0
00010A32 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flapping sound
00010A38                            
00010A38                            loc_101A0:
00010A38 6100 D448                  		bsr.w	SpeedToPos
00010A3C 3038 D008                  		move.w	($FFFFD008).w,d0
00010A40 9068 0008                  		sub.w	8(a0),d0
00010A44 6400                       		bcc.s	loc_101B0
00010A46 4440                       		neg.w	d0
00010A48                            
00010A48                            loc_101B0:
00010A48 0C40 0080                  		cmpi.w	#$80,d0
00010A4C 6500                       		bcs.s	locret_101C6
00010A4E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010A52 D007                       		add.b	d7,d0
00010A54 0200 0007                  		andi.b	#7,d0
00010A58 6600                       		bne.s	locret_101C6
00010A5A 5428 0025                  		addq.b	#2,$25(a0)
00010A5E                            
00010A5E                            locret_101C6:
00010A5E 4E75                       		rts	
00010A60                            ; ===========================================================================
00010A60                            
00010A60                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010A60 6100 D420                  		bsr.w	SpeedToPos
00010A64 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010A6A 6100 0000                  		bsr.w	ObjHitCeiling
00010A6E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010A70 6A00                       		bpl.s	locret_101F4	; if not, branch
00010A72 9368 000C                  		sub.w	d1,$C(a0)
00010A76 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010A7C 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010A80 4268 0012                  		clr.w	$12(a0)
00010A84 4228 001C                  		clr.b	$1C(a0)
00010A88 4228 0025                  		clr.b	$25(a0)
00010A8C                            
00010A8C                            locret_101F4:
00010A8C 4E75                       		rts	
00010A8E                            ; ===========================================================================
00010A8E                            
00010A8E                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010A8E 323C 0100                  		move.w	#$100,d1
00010A92 08E8 0000 0022             		bset	#0,$22(a0)
00010A98 3038 D008                  		move.w	($FFFFD008).w,d0
00010A9C 9068 0008                  		sub.w	8(a0),d0
00010AA0 6400                       		bcc.s	loc_10214
00010AA2 4440                       		neg.w	d0
00010AA4 4441                       		neg.w	d1
00010AA6 08A8 0000 0022             		bclr	#0,$22(a0)
00010AAC                            
00010AAC                            loc_10214:
00010AAC B042                       		cmp.w	d2,d0
00010AAE 4E75                       		rts	
00010AB0                            ; ===========================================================================
00010AB0 6100 D3D0                  		bsr.w	SpeedToPos
00010AB4 6100 D3F2                  		bsr.w	DisplaySprite
00010AB8 4A28 0001                  		tst.b	1(a0)
00010ABC 6A00 D426                  		bpl.w	DeleteObject
00010AC0 4E75                       		rts	
00010AC2                            ; ===========================================================================
00010AC2                            Ani_obj55:
00010AC2                            	include "_anim\obj55.asm"
00010AC2                            ; ---------------------------------------------------------------------------
00010AC2                            ; Animation script - Basaran enemy
00010AC2                            ; ---------------------------------------------------------------------------
00010AC2 0000                       		dc.w byte_10230-Ani_obj55
00010AC4 0000                       		dc.w byte_10234-Ani_obj55
00010AC6 0000                       		dc.w byte_10238-Ani_obj55
00010AC8 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010ACC 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010AD0 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010AD6                            		even
00010AD6                            		even
00010AD6                            
00010AD6                            ; ---------------------------------------------------------------------------
00010AD6                            ; Sprite mappings - Basaran enemy (MZ)
00010AD6                            ; ---------------------------------------------------------------------------
00010AD6                            Map_obj55:
00010AD6                            	include "_maps\obj55.asm"
00010AD6                            ; ---------------------------------------------------------------------------
00010AD6                            ; Sprite mappings - Basaran enemy (MZ)
00010AD6                            ; ---------------------------------------------------------------------------
00010AD6 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010ADA 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010ADE 01                         byte_10246:	dc.b 1
00010ADF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010AE4 03                         byte_1024C:	dc.b 3
00010AE5 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010AEA 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010AEF 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010AF4 04                         byte_1025C:	dc.b 4
00010AF5 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010AFA 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010AFF 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010B04 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010B09 04                         byte_10271:	dc.b 4
00010B0A F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010B0F 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010B14 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010B19 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010B1E                            		even
00010B1E                            		even
00010B1E                            
00010B1E                            ; ===========================================================================
00010B1E                            ; ---------------------------------------------------------------------------
00010B1E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010B1E                            ; ---------------------------------------------------------------------------
00010B1E                            
00010B1E                            Obj56:					; XREF: Obj_Index
00010B1E 7000                       		moveq	#0,d0
00010B20 1028 0024                  		move.b	$24(a0),d0
00010B24 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010B28 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010B2C                            ; ===========================================================================
00010B2C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010B2E 0000                       		dc.w Obj56_Action-Obj56_Index
00010B30                            
00010B30 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010B32 2020                       		dc.b  $20, $20
00010B34 1020                       		dc.b  $10, $20
00010B36 201A                       		dc.b  $20, $1A
00010B38 1027                       		dc.b  $10, $27
00010B3A 1010                       		dc.b  $10, $10
00010B3C 0820                       		dc.b	8, $20
00010B3E 4010                       		dc.b  $40, $10
00010B40                            ; ===========================================================================
00010B40                            
00010B40                            Obj56_Main:				; XREF: Obj56_Index
00010B40 5428 0024                  		addq.b	#2,$24(a0)
00010B44 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010B4C 317C 4000 0002             		move.w	#$4000,2(a0)
00010B52 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010B58 6600                       		bne.s	loc_102C8
00010B5A 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010B60                            
00010B60                            loc_102C8:
00010B60 117C 0004 0001             		move.b	#4,1(a0)
00010B66 117C 0003 0018             		move.b	#3,$18(a0)
00010B6C 7000                       		moveq	#0,d0
00010B6E 1028 0028                  		move.b	$28(a0),d0
00010B72 E648                       		lsr.w	#3,d0
00010B74 0240 000E                  		andi.w	#$E,d0
00010B78 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010B7C 115A 0019                  		move.b	(a2)+,$19(a0)
00010B80 1152 0016                  		move.b	(a2),$16(a0)
00010B84 E248                       		lsr.w	#1,d0
00010B86 1140 001A                  		move.b	d0,$1A(a0)
00010B8A 3168 0008 0034             		move.w	8(a0),$34(a0)
00010B90 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010B96 7000                       		moveq	#0,d0
00010B98 1012                       		move.b	(a2),d0
00010B9A D040                       		add.w	d0,d0
00010B9C 3140 003A                  		move.w	d0,$3A(a0)
00010BA0 7000                       		moveq	#0,d0
00010BA2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010BA8 6700                       		beq.s	loc_10332
00010BAA 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010BAE 0240 000F                  		andi.w	#$F,d0
00010BB2 5140                       		subq.w	#8,d0
00010BB4 6500                       		bcs.s	loc_10332
00010BB6 E548                       		lsl.w	#2,d0
00010BB8 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010BBC 45F2 0000                  		lea	(a2,d0.w),a2
00010BC0 4A52                       		tst.w	(a2)
00010BC2 6A00                       		bpl.s	loc_10332
00010BC4 0868 0000 0022             		bchg	#0,$22(a0)
00010BCA                            
00010BCA                            loc_10332:
00010BCA 1028 0028                  		move.b	$28(a0),d0
00010BCE 6A00                       		bpl.s	Obj56_Action
00010BD0 0200 000F                  		andi.b	#$F,d0
00010BD4 1140 003C                  		move.b	d0,$3C(a0)
00010BD8 117C 0005 0028             		move.b	#5,$28(a0)
00010BDE 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010BE4 6600                       		bne.s	Obj56_ChkGone
00010BE6 117C 000C 0028             		move.b	#$C,$28(a0)
00010BEC 317C 0080 003A             		move.w	#$80,$3A(a0)
00010BF2                            
00010BF2                            Obj56_ChkGone:
00010BF2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BF6 7000                       		moveq	#0,d0
00010BF8 1028 0023                  		move.b	$23(a0),d0
00010BFC 6700                       		beq.s	Obj56_Action
00010BFE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010C04 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010C0A 6700                       		beq.s	Obj56_Action
00010C0C 5228 0028                  		addq.b	#1,$28(a0)
00010C10 4268 003A                  		clr.w	$3A(a0)
00010C14                            
00010C14                            Obj56_Action:				; XREF: Obj56_Index
00010C14 3F28 0008                  		move.w	8(a0),-(sp)
00010C18 7000                       		moveq	#0,d0
00010C1A 1028 0028                  		move.b	$28(a0),d0	; get object type
00010C1E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010C22 D040                       		add.w	d0,d0
00010C24 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010C28 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010C2C 381F                       		move.w	(sp)+,d4
00010C2E 4A28 0001                  		tst.b	1(a0)
00010C32 6A00                       		bpl.s	Obj56_ChkDel
00010C34 7200                       		moveq	#0,d1
00010C36 1228 0019                  		move.b	$19(a0),d1
00010C3A 0641 000B                  		addi.w	#$B,d1
00010C3E 7400                       		moveq	#0,d2
00010C40 1428 0016                  		move.b	$16(a0),d2
00010C44 3602                       		move.w	d2,d3
00010C46 5243                       		addq.w	#1,d3
00010C48 6100 F62E                  		bsr.w	SolidObject
00010C4C                            
00010C4C                            Obj56_ChkDel:
00010C4C 3028 0034                  		move.w	$34(a0),d0
00010C50 0240 FF80                  		andi.w	#$FF80,d0
00010C54 3238 F700                  		move.w	($FFFFF700).w,d1
00010C58 0441 0080                  		subi.w	#$80,d1
00010C5C 0241 FF80                  		andi.w	#$FF80,d1
00010C60 9041                       		sub.w	d1,d0
00010C62 0C40 0280                  		cmpi.w	#$280,d0
00010C66 6200 D27C                  		bhi.w	DeleteObject
00010C6A 6000 D23C                  		bra.w	DisplaySprite
00010C6E                            ; ===========================================================================
00010C6E 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010C72 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010C76 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010C7A 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010C7E 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010C82 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010C86 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010C8A                            ; ===========================================================================
00010C8A                            
00010C8A                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010C8A 4E75                       		rts	
00010C8C                            ; ===========================================================================
00010C8C                            
00010C8C                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010C8C 323C 0040                  		move.w	#$40,d1
00010C90 7000                       		moveq	#0,d0
00010C92 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010C96 6000                       		bra.s	Obj56_Move_LR
00010C98                            ; ===========================================================================
00010C98                            
00010C98                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010C98 323C 0080                  		move.w	#$80,d1
00010C9C 7000                       		moveq	#0,d0
00010C9E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010CA2                            
00010CA2                            Obj56_Move_LR:
00010CA2 0828 0000 0022             		btst	#0,$22(a0)
00010CA8 6700                       		beq.s	loc_10416
00010CAA 4440                       		neg.w	d0
00010CAC D041                       		add.w	d1,d0
00010CAE                            
00010CAE                            loc_10416:
00010CAE 3228 0034                  		move.w	$34(a0),d1
00010CB2 9240                       		sub.w	d0,d1
00010CB4 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010CB8 4E75                       		rts	
00010CBA                            ; ===========================================================================
00010CBA                            
00010CBA                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010CBA 323C 0040                  		move.w	#$40,d1
00010CBE 7000                       		moveq	#0,d0
00010CC0 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010CC4 6000                       		bra.s	Obj56_Move_UD
00010CC6                            ; ===========================================================================
00010CC6                            
00010CC6                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010CC6 323C 0080                  		move.w	#$80,d1
00010CCA 7000                       		moveq	#0,d0
00010CCC 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010CD0                            
00010CD0                            Obj56_Move_UD:
00010CD0 0828 0000 0022             		btst	#0,$22(a0)
00010CD6 6700                       		beq.s	loc_10444
00010CD8 4440                       		neg.w	d0
00010CDA D041                       		add.w	d1,d0
00010CDC                            
00010CDC                            loc_10444:
00010CDC 3228 0030                  		move.w	$30(a0),d1
00010CE0 9240                       		sub.w	d0,d1
00010CE2 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010CE6 4E75                       		rts	
00010CE8                            ; ===========================================================================
00010CE8                            
00010CE8                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010CE8 4A28 0038                  		tst.b	$38(a0)
00010CEC 6600                       		bne.s	loc_104A4
00010CEE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010CF4 6600                       		bne.s	loc_1047A	; if not, branch
00010CF6 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010CFC 6600                       		bne.s	loc_1047A
00010CFE 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010D02 3038 D008                  		move.w	($FFFFD008).w,d0
00010D06 B068 0008                  		cmp.w	8(a0),d0
00010D0A 6400                       		bcc.s	loc_1047A
00010D0C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010D12                            
00010D12                            loc_1047A:
00010D12 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D16 7000                       		moveq	#0,d0
00010D18 1028 003C                  		move.b	$3C(a0),d0
00010D1C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010D22 6700                       		beq.s	loc_104AE
00010D24 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010D2A 6600                       		bne.s	loc_1049E	; if not, branch
00010D2C 0C00 0003                  		cmpi.b	#3,d0
00010D30 6600                       		bne.s	loc_1049E
00010D32 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010D36                            
00010D36                            loc_1049E:
00010D36 117C 0001 0038             		move.b	#1,$38(a0)
00010D3C                            
00010D3C                            loc_104A4:
00010D3C 4A68 003A                  		tst.w	$3A(a0)
00010D40 6700                       		beq.s	loc_104C8
00010D42 5568 003A                  		subq.w	#2,$3A(a0)
00010D46                            
00010D46                            loc_104AE:
00010D46 3028 003A                  		move.w	$3A(a0),d0
00010D4A 0828 0000 0022             		btst	#0,$22(a0)
00010D50 6700                       		beq.s	loc_104BC
00010D52 4440                       		neg.w	d0
00010D54                            
00010D54                            loc_104BC:
00010D54 3228 0030                  		move.w	$30(a0),d1
00010D58 D240                       		add.w	d0,d1
00010D5A 3141 000C                  		move.w	d1,$C(a0)
00010D5E 4E75                       		rts	
00010D60                            ; ===========================================================================
00010D60                            
00010D60                            loc_104C8:
00010D60 5228 0028                  		addq.b	#1,$28(a0)
00010D64 4228 0038                  		clr.b	$38(a0)
00010D68 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D6C 7000                       		moveq	#0,d0
00010D6E 1028 0023                  		move.b	$23(a0),d0
00010D72 67D2                       		beq.s	loc_104AE
00010D74 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010D7A 60CA                       		bra.s	loc_104AE
00010D7C                            ; ===========================================================================
00010D7C                            
00010D7C                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010D7C 4A28 0038                  		tst.b	$38(a0)
00010D80 6600                       		bne.s	loc_10500
00010D82 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D86 7000                       		moveq	#0,d0
00010D88 1028 003C                  		move.b	$3C(a0),d0
00010D8C 4A32 0000                  		tst.b	(a2,d0.w)
00010D90 6A00                       		bpl.s	loc_10512
00010D92 117C 0001 0038             		move.b	#1,$38(a0)
00010D98                            
00010D98                            loc_10500:
00010D98 7000                       		moveq	#0,d0
00010D9A 1028 0016                  		move.b	$16(a0),d0
00010D9E D040                       		add.w	d0,d0
00010DA0 B068 003A                  		cmp.w	$3A(a0),d0
00010DA4 6700                       		beq.s	loc_1052C
00010DA6 5468 003A                  		addq.w	#2,$3A(a0)
00010DAA                            
00010DAA                            loc_10512:
00010DAA 3028 003A                  		move.w	$3A(a0),d0
00010DAE 0828 0000 0022             		btst	#0,$22(a0)
00010DB4 6700                       		beq.s	loc_10520
00010DB6 4440                       		neg.w	d0
00010DB8                            
00010DB8                            loc_10520:
00010DB8 3228 0030                  		move.w	$30(a0),d1
00010DBC D240                       		add.w	d0,d1
00010DBE 3141 000C                  		move.w	d1,$C(a0)
00010DC2 4E75                       		rts	
00010DC4                            ; ===========================================================================
00010DC4                            
00010DC4                            loc_1052C:
00010DC4 5328 0028                  		subq.b	#1,$28(a0)
00010DC8 4228 0038                  		clr.b	$38(a0)
00010DCC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010DD0 7000                       		moveq	#0,d0
00010DD2 1028 0023                  		move.b	$23(a0),d0
00010DD6 67D2                       		beq.s	loc_10512
00010DD8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010DDE 60CA                       		bra.s	loc_10512
00010DE0                            ; ===========================================================================
00010DE0                            
00010DE0                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010DE0 4A28 0038                  		tst.b	$38(a0)
00010DE4 6600                       		bne.s	loc_1055E
00010DE6 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010DEA 6700                       		beq.s	locret_10578
00010DEC 117C 0001 0038             		move.b	#1,$38(a0)
00010DF2 4268 003A                  		clr.w	$3A(a0)
00010DF6                            
00010DF6                            loc_1055E:
00010DF6 5268 0008                  		addq.w	#1,8(a0)
00010DFA 3168 0008 0034             		move.w	8(a0),$34(a0)
00010E00 5268 003A                  		addq.w	#1,$3A(a0)
00010E04 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010E0A 6600                       		bne.s	locret_10578
00010E0C 4228 0028                  		clr.b	$28(a0)
00010E10                            
00010E10                            locret_10578:
00010E10 4E75                       		rts	
00010E12                            ; ===========================================================================
00010E12                            
00010E12                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010E12 4A28 0038                  		tst.b	$38(a0)
00010E16 6600                       		bne.s	loc_10598
00010E18 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010E1C 7000                       		moveq	#0,d0
00010E1E 1028 003C                  		move.b	$3C(a0),d0
00010E22 0832 0000 0000             		btst	#0,(a2,d0.w)
00010E28 6700                       		beq.s	loc_105A2
00010E2A 117C 0001 0038             		move.b	#1,$38(a0)
00010E30                            
00010E30                            loc_10598:
00010E30 4A68 003A                  		tst.w	$3A(a0)
00010E34 6700                       		beq.s	loc_105C0
00010E36 5568 003A                  		subq.w	#2,$3A(a0)
00010E3A                            
00010E3A                            loc_105A2:
00010E3A 3028 003A                  		move.w	$3A(a0),d0
00010E3E 0828 0000 0022             		btst	#0,$22(a0)
00010E44 6700                       		beq.s	loc_105B4
00010E46 4440                       		neg.w	d0
00010E48 0640 0080                  		addi.w	#$80,d0
00010E4C                            
00010E4C                            loc_105B4:
00010E4C 3228 0034                  		move.w	$34(a0),d1
00010E50 D240                       		add.w	d0,d1
00010E52 3141 0008                  		move.w	d1,8(a0)
00010E56 4E75                       		rts	
00010E58                            ; ===========================================================================
00010E58                            
00010E58                            loc_105C0:
00010E58 5228 0028                  		addq.b	#1,$28(a0)
00010E5C 4228 0038                  		clr.b	$38(a0)
00010E60 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E64 7000                       		moveq	#0,d0
00010E66 1028 0023                  		move.b	$23(a0),d0
00010E6A 67CE                       		beq.s	loc_105A2
00010E6C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010E72 60C6                       		bra.s	loc_105A2
00010E74                            ; ===========================================================================
00010E74                            
00010E74                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010E74 4A28 0038                  		tst.b	$38(a0)
00010E78 6600                       		bne.s	loc_105F8
00010E7A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010E7E 7000                       		moveq	#0,d0
00010E80 1028 003C                  		move.b	$3C(a0),d0
00010E84 4A32 0000                  		tst.b	(a2,d0.w)
00010E88 6A00                       		bpl.s	loc_10606
00010E8A 117C 0001 0038             		move.b	#1,$38(a0)
00010E90                            
00010E90                            loc_105F8:
00010E90 303C 0080                  		move.w	#$80,d0
00010E94 B068 003A                  		cmp.w	$3A(a0),d0
00010E98 6700                       		beq.s	loc_10624
00010E9A 5468 003A                  		addq.w	#2,$3A(a0)
00010E9E                            
00010E9E                            loc_10606:
00010E9E 3028 003A                  		move.w	$3A(a0),d0
00010EA2 0828 0000 0022             		btst	#0,$22(a0)
00010EA8 6700                       		beq.s	loc_10618
00010EAA 4440                       		neg.w	d0
00010EAC 0640 0080                  		addi.w	#$80,d0
00010EB0                            
00010EB0                            loc_10618:
00010EB0 3228 0034                  		move.w	$34(a0),d1
00010EB4 D240                       		add.w	d0,d1
00010EB6 3141 0008                  		move.w	d1,8(a0)
00010EBA 4E75                       		rts	
00010EBC                            ; ===========================================================================
00010EBC                            
00010EBC                            loc_10624:
00010EBC 5328 0028                  		subq.b	#1,$28(a0)
00010EC0 4228 0038                  		clr.b	$38(a0)
00010EC4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010EC8 7000                       		moveq	#0,d0
00010ECA 1028 0023                  		move.b	$23(a0),d0
00010ECE 67CE                       		beq.s	loc_10606
00010ED0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010ED6 60C6                       		bra.s	loc_10606
00010ED8                            ; ===========================================================================
00010ED8                            
00010ED8                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010ED8 323C 0010                  		move.w	#$10,d1
00010EDC 7000                       		moveq	#0,d0
00010EDE 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010EE2 E248                       		lsr.w	#1,d0
00010EE4 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010EE8 6000                       		bra.s	Obj56_Move_Sqr
00010EEA                            ; ===========================================================================
00010EEA                            
00010EEA                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010EEA 323C 0030                  		move.w	#$30,d1
00010EEE 7000                       		moveq	#0,d0
00010EF0 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010EF4 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010EF8 6000                       		bra.s	Obj56_Move_Sqr
00010EFA                            ; ===========================================================================
00010EFA                            
00010EFA                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010EFA 323C 0050                  		move.w	#$50,d1
00010EFE 7000                       		moveq	#0,d0
00010F00 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010F04 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010F08 6000                       		bra.s	Obj56_Move_Sqr
00010F0A                            ; ===========================================================================
00010F0A                            
00010F0A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010F0A 323C 0070                  		move.w	#$70,d1
00010F0E 7000                       		moveq	#0,d0
00010F10 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010F14 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010F18                            
00010F18                            Obj56_Move_Sqr:
00010F18 4A43                       		tst.w	d3
00010F1A 6600                       		bne.s	loc_1068E
00010F1C 5228 0022                  		addq.b	#1,$22(a0)
00010F20 0228 0003 0022             		andi.b	#3,$22(a0)
00010F26                            
00010F26                            loc_1068E:
00010F26 1428 0022                  		move.b	$22(a0),d2
00010F2A 0202 0003                  		andi.b	#3,d2
00010F2E 6600                       		bne.s	loc_106AE
00010F30 9041                       		sub.w	d1,d0
00010F32 D068 0034                  		add.w	$34(a0),d0
00010F36 3140 0008                  		move.w	d0,8(a0)
00010F3A 4441                       		neg.w	d1
00010F3C D268 0030                  		add.w	$30(a0),d1
00010F40 3141 000C                  		move.w	d1,$C(a0)
00010F44 4E75                       		rts	
00010F46                            ; ===========================================================================
00010F46                            
00010F46                            loc_106AE:
00010F46 5302                       		subq.b	#1,d2
00010F48 6600                       		bne.s	loc_106CC
00010F4A 5341                       		subq.w	#1,d1
00010F4C 9041                       		sub.w	d1,d0
00010F4E 4440                       		neg.w	d0
00010F50 D068 0030                  		add.w	$30(a0),d0
00010F54 3140 000C                  		move.w	d0,$C(a0)
00010F58 5241                       		addq.w	#1,d1
00010F5A D268 0034                  		add.w	$34(a0),d1
00010F5E 3141 0008                  		move.w	d1,8(a0)
00010F62 4E75                       		rts	
00010F64                            ; ===========================================================================
00010F64                            
00010F64                            loc_106CC:
00010F64 5302                       		subq.b	#1,d2
00010F66 6600                       		bne.s	loc_106EA
00010F68 5341                       		subq.w	#1,d1
00010F6A 9041                       		sub.w	d1,d0
00010F6C 4440                       		neg.w	d0
00010F6E D068 0034                  		add.w	$34(a0),d0
00010F72 3140 0008                  		move.w	d0,8(a0)
00010F76 5241                       		addq.w	#1,d1
00010F78 D268 0030                  		add.w	$30(a0),d1
00010F7C 3141 000C                  		move.w	d1,$C(a0)
00010F80 4E75                       		rts	
00010F82                            ; ===========================================================================
00010F82                            
00010F82                            loc_106EA:
00010F82 9041                       		sub.w	d1,d0
00010F84 D068 0030                  		add.w	$30(a0),d0
00010F88 3140 000C                  		move.w	d0,$C(a0)
00010F8C 4441                       		neg.w	d1
00010F8E D268 0034                  		add.w	$34(a0),d1
00010F92 3141 0008                  		move.w	d1,8(a0)
00010F96 4E75                       		rts	
00010F98                            ; ===========================================================================
00010F98                            ; ---------------------------------------------------------------------------
00010F98                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010F98                            ; ---------------------------------------------------------------------------
00010F98                            Map_obj56:
00010F98                            	include "_maps\obj56.asm"
00010F98                            ; ---------------------------------------------------------------------------
00010F98                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010F98                            ; ---------------------------------------------------------------------------
00010F98 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010F9C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010FA0 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010FA4 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010FA8 01                         byte_10710:	dc.b 1
00010FA9 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010FAE 04                         byte_10716:	dc.b 4
00010FAF E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010FB4 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010FB9 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010FBE 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010FC3 02                         byte_1072B:	dc.b 2
00010FC4 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010FC9 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010FCE 04                         byte_10736:	dc.b 4
00010FCF E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010FD4 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010FD9 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010FDE 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010FE3 03                         byte_1074B:	dc.b 3
00010FE4 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010FE9 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010FEE 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010FF3 01                         byte_1075B:	dc.b 1
00010FF4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010FF9 02                         byte_10761:	dc.b 2
00010FFA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010FFF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011004 04                         byte_1076C:	dc.b 4
00011005 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001100A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001100F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00011014 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001101A 00                         		even
0001101A 00                         		even
0001101A                            
0001101A                            ; ===========================================================================
0001101A                            ; ---------------------------------------------------------------------------
0001101A                            ; Object 57 - spiked balls (SYZ, LZ)
0001101A                            ; ---------------------------------------------------------------------------
0001101A                            
0001101A                            Obj57:					; XREF: Obj_Index
0001101A 7000                       		moveq	#0,d0
0001101C 1028 0024                  		move.b	$24(a0),d0
00011020 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00011024 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00011028                            ; ===========================================================================
00011028 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001102A 0000                       		dc.w Obj57_Move-Obj57_Index
0001102C 0000                       		dc.w Obj57_Display-Obj57_Index
0001102E                            ; ===========================================================================
0001102E                            
0001102E                            Obj57_Main:				; XREF: Obj57_Index
0001102E 5428 0024                  		addq.b	#2,$24(a0)
00011032 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001103A 317C 03BA 0002             		move.w	#$3BA,2(a0)
00011040 117C 0004 0001             		move.b	#4,1(a0)
00011046 117C 0004 0018             		move.b	#4,$18(a0)
0001104C 117C 0008 0019             		move.b	#8,$19(a0)
00011052 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011058 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001105E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011064 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001106A 6600                       		bne.s	loc_107E8
0001106C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011072 317C 0310 0002             		move.w	#$310,2(a0)
00011078 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011080                            
00011080                            loc_107E8:
00011080 1228 0028                  		move.b	$28(a0),d1	; get object type
00011084 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011088 4881                       		ext.w	d1
0001108A E741                       		asl.w	#3,d1		; multiply by 8
0001108C 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011090 1028 0022                  		move.b	$22(a0),d0
00011094 E418                       		ror.b	#2,d0
00011096 0200 00C0                  		andi.b	#-$40,d0
0001109A 1140 0026                  		move.b	d0,$26(a0)
0001109E 45E8 0029                  		lea	$29(a0),a2
000110A2 1228 0028                  		move.b	$28(a0),d1	; get object type
000110A6 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000110AA 14FC 0000                  		move.b	#0,(a2)+
000110AE 3601                       		move.w	d1,d3
000110B0 E94B                       		lsl.w	#4,d3
000110B2 1143 003C                  		move.b	d3,$3C(a0)
000110B6 5341                       		subq.w	#1,d1		; set chain length (type-1)
000110B8 6500                       		bcs.s	loc_10894
000110BA 0828 0003 0028             		btst	#3,$28(a0)
000110C0 6700                       		beq.s	Obj57_MakeChain
000110C2 5341                       		subq.w	#1,d1
000110C4 6500                       		bcs.s	loc_10894
000110C6                            
000110C6                            Obj57_MakeChain:
000110C6 6100 D266                  		bsr.w	SingleObjLoad
000110CA 6600                       		bne.s	loc_10894
000110CC 5228 0029                  		addq.b	#1,$29(a0)
000110D0 3A09                       		move.w	a1,d5
000110D2 0445 D000                  		subi.w	#-$3000,d5
000110D6 EC4D                       		lsr.w	#6,d5
000110D8 0245 007F                  		andi.w	#$7F,d5
000110DC 14C5                       		move.b	d5,(a2)+
000110DE 137C 0004 0024             		move.b	#4,$24(a1)
000110E4 1290                       		move.b	0(a0),0(a1)
000110E6 2368 0004 0004             		move.l	4(a0),4(a1)
000110EC 3368 0002 0002             		move.w	2(a0),2(a1)
000110F2 1368 0001 0001             		move.b	1(a0),1(a1)
000110F8 1368 0018 0018             		move.b	$18(a0),$18(a1)
000110FE 1368 0019 0019             		move.b	$19(a0),$19(a1)
00011104 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001110A 0403 0010                  		subi.b	#$10,d3
0001110E 1343 003C                  		move.b	d3,$3C(a1)
00011112 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00011118 6600                       		bne.s	loc_10890
0001111A 4A03                       		tst.b	d3
0001111C 6600                       		bne.s	loc_10890
0001111E 137C 0002 001A             		move.b	#2,$1A(a1)
00011124                            
00011124                            loc_10890:
00011124 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011128                            
00011128                            loc_10894:
00011128 3A08                       		move.w	a0,d5
0001112A 0445 D000                  		subi.w	#-$3000,d5
0001112E EC4D                       		lsr.w	#6,d5
00011130 0245 007F                  		andi.w	#$7F,d5
00011134 14C5                       		move.b	d5,(a2)+
00011136 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001113C 6600                       		bne.s	Obj57_Move
0001113E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00011144 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001114A                            
0001114A                            Obj57_Move:				; XREF: Obj57_Index
0001114A 6100 0000                  		bsr.w	Obj57_MoveSub
0001114E 6000 0000                  		bra.w	Obj57_ChkDel
00011152                            ; ===========================================================================
00011152                            
00011152                            Obj57_MoveSub:				; XREF: Obj57_Move
00011152 3028 003E                  		move.w	$3E(a0),d0
00011156 D168 0026                  		add.w	d0,$26(a0)
0001115A 1028 0026                  		move.b	$26(a0),d0
0001115E 4EB9 0000 2D36             		jsr	(CalcSine).l
00011164 3428 0038                  		move.w	$38(a0),d2
00011168 3628 003A                  		move.w	$3A(a0),d3
0001116C 45E8 0029                  		lea	$29(a0),a2
00011170 7C00                       		moveq	#0,d6
00011172 1C1A                       		move.b	(a2)+,d6
00011174                            
00011174                            Obj57_MoveLoop:
00011174 7800                       		moveq	#0,d4
00011176 181A                       		move.b	(a2)+,d4
00011178 ED4C                       		lsl.w	#6,d4
0001117A 0684 00FF D000             		addi.l	#$FFD000,d4
00011180 2244                       		movea.l	d4,a1
00011182 7800                       		moveq	#0,d4
00011184 1829 003C                  		move.b	$3C(a1),d4
00011188 2A04                       		move.l	d4,d5
0001118A C9C0                       		muls.w	d0,d4
0001118C E084                       		asr.l	#8,d4
0001118E CBC1                       		muls.w	d1,d5
00011190 E085                       		asr.l	#8,d5
00011192 D842                       		add.w	d2,d4
00011194 DA43                       		add.w	d3,d5
00011196 3344 000C                  		move.w	d4,$C(a1)
0001119A 3345 0008                  		move.w	d5,8(a1)
0001119E 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000111A2 4E75                       		rts	
000111A4                            ; ===========================================================================
000111A4                            
000111A4                            Obj57_ChkDel:				; XREF: Obj57_Move
000111A4 3028 003A                  		move.w	$3A(a0),d0
000111A8 0240 FF80                  		andi.w	#$FF80,d0
000111AC 3238 F700                  		move.w	($FFFFF700).w,d1
000111B0 0441 0080                  		subi.w	#$80,d1
000111B4 0241 FF80                  		andi.w	#$FF80,d1
000111B8 9041                       		sub.w	d1,d0
000111BA 0C40 0280                  		cmpi.w	#$280,d0
000111BE 6200 0000                  		bhi.w	Obj57_Delete
000111C2 6000 CCE4                  		bra.w	DisplaySprite
000111C6                            ; ===========================================================================
000111C6                            
000111C6                            Obj57_Delete:				; XREF: Obj57_ChkDel
000111C6 7400                       		moveq	#0,d2
000111C8 45E8 0029                  		lea	$29(a0),a2
000111CC 141A                       		move.b	(a2)+,d2
000111CE                            
000111CE                            Obj57_DelLoop:
000111CE 7000                       		moveq	#0,d0
000111D0 101A                       		move.b	(a2)+,d0
000111D2 ED48                       		lsl.w	#6,d0
000111D4 0680 00FF D000             		addi.l	#$FFD000,d0
000111DA 2240                       		movea.l	d0,a1
000111DC 6100 CD08                  		bsr.w	DeleteObject2
000111E0 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000111E4                            
000111E4 4E75                       		rts	
000111E6                            ; ===========================================================================
000111E6                            
000111E6                            Obj57_Display:				; XREF: Obj57_Index
000111E6 6000 CCC0                  		bra.w	DisplaySprite
000111EA                            ; ===========================================================================
000111EA                            ; ---------------------------------------------------------------------------
000111EA                            ; Sprite mappings - chain of spiked balls (SYZ)
000111EA                            ; ---------------------------------------------------------------------------
000111EA                            Map_obj57:
000111EA                            	include "_maps\obj57syz.asm"
000111EA                            ; ---------------------------------------------------------------------------
000111EA                            ; Sprite mappings - chain of spiked balls (SYZ)
000111EA                            ; ---------------------------------------------------------------------------
000111EA 0000                       		dc.w byte_10958-Map_obj57
000111EC 01                         byte_10958:	dc.b 1
000111ED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000111F2                            		even
000111F2                            		even
000111F2                            
000111F2                            ; ---------------------------------------------------------------------------
000111F2                            ; Sprite mappings - spiked ball	on a chain (LZ)
000111F2                            ; ---------------------------------------------------------------------------
000111F2                            Map_obj57a:
000111F2                            	include "_maps\obj57lz.asm"
000111F2                            ; ---------------------------------------------------------------------------
000111F2                            ; Sprite mappings - spiked ball	on a chain (LZ)
000111F2                            ; ---------------------------------------------------------------------------
000111F2 0000                       		dc.w byte_10964-Map_obj57a
000111F4 0000                       		dc.w byte_1096A-Map_obj57a
000111F6 0000                       		dc.w byte_10970-Map_obj57a
000111F8 01                         byte_10964:	dc.b 1
000111F9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000111FE 01                         byte_1096A:	dc.b 1
000111FF F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011204 01                         byte_10970:	dc.b 1
00011205 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001120A                            		even
0001120A                            		even
0001120A                            
0001120A                            ; ===========================================================================
0001120A                            ; ---------------------------------------------------------------------------
0001120A                            ; Object 58 - giant spiked balls (SYZ)
0001120A                            ; ---------------------------------------------------------------------------
0001120A                            
0001120A                            Obj58:					; XREF: Obj_Index
0001120A 7000                       		moveq	#0,d0
0001120C 1028 0024                  		move.b	$24(a0),d0
00011210 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011214 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011218                            ; ===========================================================================
00011218 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001121A 0000                       		dc.w Obj58_Move-Obj58_Index
0001121C                            ; ===========================================================================
0001121C                            
0001121C                            Obj58_Main:				; XREF: Obj58_Index
0001121C 5428 0024                  		addq.b	#2,$24(a0)
00011220 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011228 317C 0396 0002             		move.w	#$396,2(a0)
0001122E 117C 0004 0001             		move.b	#4,1(a0)
00011234 117C 0004 0018             		move.b	#4,$18(a0)
0001123A 117C 0018 0019             		move.b	#$18,$19(a0)
00011240 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011246 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001124C 117C 0086 0020             		move.b	#$86,$20(a0)
00011252 1228 0028                  		move.b	$28(a0),d1	; get object type
00011256 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001125A 4881                       		ext.w	d1
0001125C E741                       		asl.w	#3,d1		; multiply by 8
0001125E 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011262 1028 0022                  		move.b	$22(a0),d0
00011266 E418                       		ror.b	#2,d0
00011268 0200 00C0                  		andi.b	#$C0,d0
0001126C 1140 0026                  		move.b	d0,$26(a0)
00011270 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011276                            
00011276                            Obj58_Move:				; XREF: Obj58_Index
00011276 7000                       		moveq	#0,d0
00011278 1028 0028                  		move.b	$28(a0),d0	; get object type
0001127C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011280 D040                       		add.w	d0,d0
00011282 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011286 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001128A 3028 003A                  		move.w	$3A(a0),d0
0001128E 0240 FF80                  		andi.w	#$FF80,d0
00011292 3238 F700                  		move.w	($FFFFF700).w,d1
00011296 0441 0080                  		subi.w	#$80,d1
0001129A 0241 FF80                  		andi.w	#$FF80,d1
0001129E 9041                       		sub.w	d1,d0
000112A0 0C40 0280                  		cmpi.w	#$280,d0
000112A4 6200 CC3E                  		bhi.w	DeleteObject
000112A8 6000 CBFE                  		bra.w	DisplaySprite
000112AC                            ; ===========================================================================
000112AC 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000112AE 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000112B0 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000112B2 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000112B4                            ; ===========================================================================
000112B4                            
000112B4                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000112B4 4E75                       		rts	
000112B6                            ; ===========================================================================
000112B6                            
000112B6                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000112B6 323C 0060                  		move.w	#$60,d1
000112BA 7000                       		moveq	#0,d0
000112BC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000112C0 0828 0000 0022             		btst	#0,$22(a0)
000112C6 6700                       		beq.s	loc_10A38
000112C8 4440                       		neg.w	d0
000112CA D041                       		add.w	d1,d0
000112CC                            
000112CC                            loc_10A38:
000112CC 3228 003A                  		move.w	$3A(a0),d1
000112D0 9240                       		sub.w	d0,d1
000112D2 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000112D6 4E75                       		rts	
000112D8                            ; ===========================================================================
000112D8                            
000112D8                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000112D8 323C 0060                  		move.w	#$60,d1
000112DC 7000                       		moveq	#0,d0
000112DE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000112E2 0828 0000 0022             		btst	#0,$22(a0)
000112E8 6700                       		beq.s	loc_10A5C
000112EA 4440                       		neg.w	d0
000112EC 0640 0080                  		addi.w	#$80,d0
000112F0                            
000112F0                            loc_10A5C:
000112F0 3228 0038                  		move.w	$38(a0),d1
000112F4 9240                       		sub.w	d0,d1
000112F6 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000112FA 4E75                       		rts	
000112FC                            ; ===========================================================================
000112FC                            
000112FC                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000112FC 3028 003E                  		move.w	$3E(a0),d0
00011300 D168 0026                  		add.w	d0,$26(a0)
00011304 1028 0026                  		move.b	$26(a0),d0
00011308 4EB9 0000 2D36             		jsr	(CalcSine).l
0001130E 3428 0038                  		move.w	$38(a0),d2
00011312 3628 003A                  		move.w	$3A(a0),d3
00011316 7800                       		moveq	#0,d4
00011318 1828 003C                  		move.b	$3C(a0),d4
0001131C 2A04                       		move.l	d4,d5
0001131E C9C0                       		muls.w	d0,d4
00011320 E084                       		asr.l	#8,d4
00011322 CBC1                       		muls.w	d1,d5
00011324 E085                       		asr.l	#8,d5
00011326 D842                       		add.w	d2,d4
00011328 DA43                       		add.w	d3,d5
0001132A 3144 000C                  		move.w	d4,$C(a0)
0001132E 3145 0008                  		move.w	d5,8(a0)
00011332 4E75                       		rts	
00011334                            ; ===========================================================================
00011334                            ; ---------------------------------------------------------------------------
00011334                            ; Sprite mappings - SBZ	spiked ball on a chain
00011334                            ; ---------------------------------------------------------------------------
00011334                            Map_obj15b:
00011334                            	include "_maps\obj15sbz.asm"
00011334                            ; ---------------------------------------------------------------------------
00011334                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011334                            ; ---------------------------------------------------------------------------
00011334 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011338 0000                       		dc.w byte_10AC6-Map_obj15b
0001133A 05                         byte_10AA6:	dc.b 5
0001133B E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011340 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011345 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001134A F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001134F 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011354 01                         byte_10AC0:	dc.b 1
00011355 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001135A 02                         byte_10AC6:	dc.b 2
0001135B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011360 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011366 00                         		even
00011366 00                         		even
00011366                            
00011366                            ; ===========================================================================
00011366                            ; ---------------------------------------------------------------------------
00011366                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011366                            ; ---------------------------------------------------------------------------
00011366                            
00011366                            Obj59:					; XREF: Obj_Index
00011366 7000                       		moveq	#0,d0
00011368 1028 0024                  		move.b	$24(a0),d0
0001136C 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011370 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011374 3028 0032                  		move.w	$32(a0),d0
00011378 0240 FF80                  		andi.w	#$FF80,d0
0001137C 3238 F700                  		move.w	($FFFFF700).w,d1
00011380 0441 0080                  		subi.w	#$80,d1
00011384 0241 FF80                  		andi.w	#$FF80,d1
00011388 9041                       		sub.w	d1,d0
0001138A 0C40 0280                  		cmpi.w	#$280,d0
0001138E 6200 CB54                  		bhi.w	DeleteObject
00011392 6000 CB14                  		bra.w	DisplaySprite
00011396                            ; ===========================================================================
00011396 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011398 0000                       		dc.w Obj59_Platform-Obj59_Index
0001139A 0000                       		dc.w Obj59_Action-Obj59_Index
0001139C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001139E                            
0001139E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000113A0                            
000113A0 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000113A2 2001                       		dc.b $20, 1
000113A4 3401                       		dc.b $34, 1
000113A6 1003                       		dc.b $10, 3
000113A8 2003                       		dc.b $20, 3
000113AA 3403                       		dc.b $34, 3
000113AC 1401                       		dc.b $14, 1
000113AE 2401                       		dc.b $24, 1
000113B0 2C01                       		dc.b $2C, 1
000113B2 1403                       		dc.b $14, 3
000113B4 2403                       		dc.b $24, 3
000113B6 2C03                       		dc.b $2C, 3
000113B8 2005                       		dc.b $20, 5
000113BA 2007                       		dc.b $20, 7
000113BC 3009                       		dc.b $30, 9
000113BE                            ; ===========================================================================
000113BE                            
000113BE                            Obj59_Main:				; XREF: Obj59_Index
000113BE 5428 0024                  		addq.b	#2,$24(a0)
000113C2 7000                       		moveq	#0,d0
000113C4 1028 0028                  		move.b	$28(a0),d0
000113C8 6A00                       		bpl.s	Obj59_Main2
000113CA 5828 0024                  		addq.b	#4,$24(a0)
000113CE 0240 007F                  		andi.w	#$7F,d0
000113D2 C0FC 0006                  		mulu.w	#6,d0
000113D6 3140 003C                  		move.w	d0,$3C(a0)
000113DA 3140 003E                  		move.w	d0,$3E(a0)
000113DE 588F                       		addq.l	#4,sp
000113E0 4E75                       		rts	
000113E2                            ; ===========================================================================
000113E2                            
000113E2                            Obj59_Main2:
000113E2 E648                       		lsr.w	#3,d0
000113E4 0240 001E                  		andi.w	#$1E,d0
000113E8 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000113EC 115A 0019                  		move.b	(a2)+,$19(a0)
000113F0 115A 001A                  		move.b	(a2)+,$1A(a0)
000113F4 7000                       		moveq	#0,d0
000113F6 1028 0028                  		move.b	$28(a0),d0
000113FA D040                       		add.w	d0,d0
000113FC 0240 001E                  		andi.w	#$1E,d0
00011400 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011404 101A                       		move.b	(a2)+,d0
00011406 E548                       		lsl.w	#2,d0
00011408 3140 003C                  		move.w	d0,$3C(a0)
0001140C 115A 0028                  		move.b	(a2)+,$28(a0)
00011410 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011418 317C 4000 0002             		move.w	#$4000,2(a0)
0001141E 117C 0004 0001             		move.b	#4,1(a0)
00011424 117C 0004 0018             		move.b	#4,$18(a0)
0001142A 3168 0008 0032             		move.w	8(a0),$32(a0)
00011430 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011436                            
00011436                            Obj59_Platform:				; XREF: Obj59_Index
00011436 7200                       		moveq	#0,d1
00011438 1228 0019                  		move.b	$19(a0),d1
0001143C 4EB9 0000 7AE2             		jsr	(PlatformObject).l
00011442 6000 0000                  		bra.w	Obj59_Types
00011446                            ; ===========================================================================
00011446                            
00011446                            Obj59_Action:				; XREF: Obj59_Index
00011446 7200                       		moveq	#0,d1
00011448 1228 0019                  		move.b	$19(a0),d1
0001144C 4EB9 0000 7C56             		jsr	(ExitPlatform).l
00011452 3F28 0008                  		move.w	8(a0),-(sp)
00011456 6100 0000                  		bsr.w	Obj59_Types
0001145A 341F                       		move.w	(sp)+,d2
0001145C 4A10                       		tst.b	0(a0)
0001145E 6700                       		beq.s	locret_10BD4
00011460 4EF9 0000 81C0             		jmp	(MvSonicOnPtfm2).l
00011466                            ; ===========================================================================
00011466                            
00011466                            locret_10BD4:
00011466 4E75                       		rts	
00011468                            ; ===========================================================================
00011468                            
00011468                            Obj59_Types:
00011468 7000                       		moveq	#0,d0
0001146A 1028 0028                  		move.b	$28(a0),d0
0001146E 0240 000F                  		andi.w	#$F,d0
00011472 D040                       		add.w	d0,d0
00011474 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011478 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001147C                            ; ===========================================================================
0001147C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011480 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011484 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011488 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001148C 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011490                            ; ===========================================================================
00011490                            
00011490                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011490 4E75                       		rts	
00011492                            ; ===========================================================================
00011492                            
00011492                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011492 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011498 6600                       		bne.s	locret_10C0C
0001149A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001149E                            
0001149E                            locret_10C0C:
0001149E 4E75                       		rts	
000114A0                            ; ===========================================================================
000114A0                            
000114A0                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000114A0 6100 0000                  		bsr.w	Obj59_Move
000114A4 3028 0034                  		move.w	$34(a0),d0
000114A8 4440                       		neg.w	d0
000114AA D068 0030                  		add.w	$30(a0),d0
000114AE 3140 000C                  		move.w	d0,$C(a0)
000114B2 4E75                       		rts	
000114B4                            ; ===========================================================================
000114B4                            
000114B4                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000114B4 6100 0000                  		bsr.w	Obj59_Move
000114B8 3028 0034                  		move.w	$34(a0),d0
000114BC D068 0030                  		add.w	$30(a0),d0
000114C0 3140 000C                  		move.w	d0,$C(a0)
000114C4 4E75                       		rts	
000114C6                            ; ===========================================================================
000114C6                            
000114C6                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000114C6 6100 0000                  		bsr.w	Obj59_Move
000114CA 3028 0034                  		move.w	$34(a0),d0
000114CE E240                       		asr.w	#1,d0
000114D0 4440                       		neg.w	d0
000114D2 D068 0030                  		add.w	$30(a0),d0
000114D6 3140 000C                  		move.w	d0,$C(a0)
000114DA 3028 0034                  		move.w	$34(a0),d0
000114DE D068 0032                  		add.w	$32(a0),d0
000114E2 3140 0008                  		move.w	d0,8(a0)
000114E6 4E75                       		rts	
000114E8                            ; ===========================================================================
000114E8                            
000114E8                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000114E8 6100 0000                  		bsr.w	Obj59_Move
000114EC 3028 0034                  		move.w	$34(a0),d0
000114F0 E240                       		asr.w	#1,d0
000114F2 D068 0030                  		add.w	$30(a0),d0
000114F6 3140 000C                  		move.w	d0,$C(a0)
000114FA 3028 0034                  		move.w	$34(a0),d0
000114FE 4440                       		neg.w	d0
00011500 D068 0032                  		add.w	$32(a0),d0
00011504 3140 0008                  		move.w	d0,8(a0)
00011508 4E75                       		rts	
0001150A                            ; ===========================================================================
0001150A                            
0001150A                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001150A 6100 0000                  		bsr.w	Obj59_Move
0001150E 3028 0034                  		move.w	$34(a0),d0
00011512 4440                       		neg.w	d0
00011514 D068 0030                  		add.w	$30(a0),d0
00011518 3140 000C                  		move.w	d0,$C(a0)
0001151C 4A28 0028                  		tst.b	$28(a0)
00011520 6700 0000                  		beq.w	loc_10C94
00011524 4E75                       		rts	
00011526                            ; ===========================================================================
00011526                            
00011526                            loc_10C94:
00011526 0828 0003 0022             		btst	#3,$22(a0)
0001152C 6700                       		beq.s	Obj59_Delete
0001152E 08E9 0001 0022             		bset	#1,$22(a1)
00011534 08A9 0003 0022             		bclr	#3,$22(a1)
0001153A 137C 0002 0024             		move.b	#2,$24(a1)
00011540                            
00011540                            Obj59_Delete:
00011540 6000 C9A2                  		bra.w	DeleteObject
00011544                            
00011544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011544                            
00011544                            
00011544                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011544 3028 0038                  		move.w	$38(a0),d0
00011548 4A28 003A                  		tst.b	$3A(a0)
0001154C 6600                       		bne.s	loc_10CC8
0001154E 0C40 0800                  		cmpi.w	#$800,d0
00011552 6400                       		bcc.s	loc_10CD0
00011554 0640 0010                  		addi.w	#$10,d0
00011558 6000                       		bra.s	loc_10CD0
0001155A                            ; ===========================================================================
0001155A                            
0001155A                            loc_10CC8:
0001155A 4A40                       		tst.w	d0
0001155C 6700                       		beq.s	loc_10CD0
0001155E 0440 0010                  		subi.w	#$10,d0
00011562                            
00011562                            loc_10CD0:
00011562 3140 0038                  		move.w	d0,$38(a0)
00011566 48C0                       		ext.l	d0
00011568 E180                       		asl.l	#8,d0
0001156A D0A8 0034                  		add.l	$34(a0),d0
0001156E 2140 0034                  		move.l	d0,$34(a0)
00011572 4840                       		swap	d0
00011574 3428 003C                  		move.w	$3C(a0),d2
00011578 B042                       		cmp.w	d2,d0
0001157A 6300                       		bls.s	loc_10CF0
0001157C 117C 0001 003A             		move.b	#1,$3A(a0)
00011582                            
00011582                            loc_10CF0:
00011582 D442                       		add.w	d2,d2
00011584 B042                       		cmp.w	d2,d0
00011586 6600                       		bne.s	locret_10CFA
00011588 4228 0028                  		clr.b	$28(a0)
0001158C                            
0001158C                            locret_10CFA:
0001158C 4E75                       		rts	
0001158E                            ; End of function Obj59_Move
0001158E                            
0001158E                            ; ===========================================================================
0001158E                            
0001158E                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001158E 5368 003C                  		subq.w	#1,$3C(a0)
00011592 6600                       		bne.s	Obj59_ChkDel
00011594 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001159A 6100 CD92                  		bsr.w	SingleObjLoad
0001159E 6600                       		bne.s	Obj59_ChkDel
000115A0 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000115A4 3368 0008 0008             		move.w	8(a0),8(a1)
000115AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000115B0 137C 000E 0028             		move.b	#$E,$28(a1)
000115B6                            
000115B6                            Obj59_ChkDel:
000115B6 588F                       		addq.l	#4,sp
000115B8 3028 0008                  		move.w	8(a0),d0
000115BC 0240 FF80                  		andi.w	#$FF80,d0
000115C0 3238 F700                  		move.w	($FFFFF700).w,d1
000115C4 0441 0080                  		subi.w	#$80,d1
000115C8 0241 FF80                  		andi.w	#$FF80,d1
000115CC 9041                       		sub.w	d1,d0
000115CE 0C40 0280                  		cmpi.w	#$280,d0
000115D2 6200 C910                  		bhi.w	DeleteObject
000115D6 4E75                       		rts	
000115D8                            ; ===========================================================================
000115D8                            ; ---------------------------------------------------------------------------
000115D8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000115D8                            ; ---------------------------------------------------------------------------
000115D8                            Map_obj59:
000115D8                            	include "_maps\obj59.asm"
000115D8                            ; ---------------------------------------------------------------------------
000115D8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000115D8                            ; ---------------------------------------------------------------------------
000115D8 0000                       		dc.w byte_10D4A-Map_obj59
000115DA 03                         byte_10D4A:	dc.b 3
000115DB F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000115E0 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000115E5 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000115EA                            		even
000115EA                            		even
000115EA                            
000115EA                            ; ===========================================================================
000115EA                            ; ---------------------------------------------------------------------------
000115EA                            ; Object 5A - platforms	moving in circles (SLZ)
000115EA                            ; ---------------------------------------------------------------------------
000115EA                            
000115EA                            Obj5A:					; XREF: Obj_Index
000115EA 7000                       		moveq	#0,d0
000115EC 1028 0024                  		move.b	$24(a0),d0
000115F0 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000115F4 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000115F8 3028 0032                  		move.w	$32(a0),d0
000115FC 0240 FF80                  		andi.w	#$FF80,d0
00011600 3238 F700                  		move.w	($FFFFF700).w,d1
00011604 0441 0080                  		subi.w	#$80,d1
00011608 0241 FF80                  		andi.w	#$FF80,d1
0001160C 9041                       		sub.w	d1,d0
0001160E 0C40 0280                  		cmpi.w	#$280,d0
00011612 6200 C8D0                  		bhi.w	DeleteObject
00011616 6000 C890                  		bra.w	DisplaySprite
0001161A                            ; ===========================================================================
0001161A 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001161C 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001161E 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011620                            ; ===========================================================================
00011620                            
00011620                            Obj5A_Main:				; XREF: Obj5A_Index
00011620 5428 0024                  		addq.b	#2,$24(a0)
00011624 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001162C 317C 4000 0002             		move.w	#$4000,2(a0)
00011632 117C 0004 0001             		move.b	#4,1(a0)
00011638 117C 0004 0018             		move.b	#4,$18(a0)
0001163E 117C 0018 0019             		move.b	#$18,$19(a0)
00011644 3168 0008 0032             		move.w	8(a0),$32(a0)
0001164A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011650                            
00011650                            Obj5A_Platform:				; XREF: Obj5A_Index
00011650 7200                       		moveq	#0,d1
00011652 1228 0019                  		move.b	$19(a0),d1
00011656 4EB9 0000 7AE2             		jsr	(PlatformObject).l
0001165C 6000 0000                  		bra.w	Obj5A_Types
00011660                            ; ===========================================================================
00011660                            
00011660                            Obj5A_Action:				; XREF: Obj5A_Index
00011660 7200                       		moveq	#0,d1
00011662 1228 0019                  		move.b	$19(a0),d1
00011666 4EB9 0000 7C56             		jsr	(ExitPlatform).l
0001166C 3F28 0008                  		move.w	8(a0),-(sp)
00011670 6100 0000                  		bsr.w	Obj5A_Types
00011674 341F                       		move.w	(sp)+,d2
00011676 4EF9 0000 81C0             		jmp	(MvSonicOnPtfm2).l
0001167C                            ; ===========================================================================
0001167C                            
0001167C                            Obj5A_Types:
0001167C 7000                       		moveq	#0,d0
0001167E 1028 0028                  		move.b	$28(a0),d0
00011682 0240 000C                  		andi.w	#$C,d0
00011686 E248                       		lsr.w	#1,d0
00011688 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001168C 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011690                            ; ===========================================================================
00011690 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011692 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011694                            ; ===========================================================================
00011694                            
00011694                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011694 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011698 0401 0050                  		subi.b	#$50,d1
0001169C 4881                       		ext.w	d1
0001169E 1438 FE84                  		move.b	($FFFFFE84).w,d2
000116A2 0402 0050                  		subi.b	#$50,d2
000116A6 4882                       		ext.w	d2
000116A8 0828 0000 0028             		btst	#0,$28(a0)
000116AE 6700                       		beq.s	loc_10E24
000116B0 4441                       		neg.w	d1
000116B2 4442                       		neg.w	d2
000116B4                            
000116B4                            loc_10E24:
000116B4 0828 0001 0028             		btst	#1,$28(a0)
000116BA 6700                       		beq.s	loc_10E30
000116BC 4441                       		neg.w	d1
000116BE C342                       		exg	d1,d2
000116C0                            
000116C0                            loc_10E30:
000116C0 D268 0032                  		add.w	$32(a0),d1
000116C4 3141 0008                  		move.w	d1,8(a0)
000116C8 D468 0030                  		add.w	$30(a0),d2
000116CC 3142 000C                  		move.w	d2,$C(a0)
000116D0 4E75                       		rts	
000116D2                            ; ===========================================================================
000116D2                            
000116D2                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000116D2 1238 FE80                  		move.b	($FFFFFE80).w,d1
000116D6 0401 0050                  		subi.b	#$50,d1
000116DA 4881                       		ext.w	d1
000116DC 1438 FE84                  		move.b	($FFFFFE84).w,d2
000116E0 0402 0050                  		subi.b	#$50,d2
000116E4 4882                       		ext.w	d2
000116E6 0828 0000 0028             		btst	#0,$28(a0)
000116EC 6700                       		beq.s	loc_10E62
000116EE 4441                       		neg.w	d1
000116F0 4442                       		neg.w	d2
000116F2                            
000116F2                            loc_10E62:
000116F2 0828 0001 0028             		btst	#1,$28(a0)
000116F8 6700                       		beq.s	loc_10E6E
000116FA 4441                       		neg.w	d1
000116FC C342                       		exg	d1,d2
000116FE                            
000116FE                            loc_10E6E:
000116FE 4441                       		neg.w	d1
00011700 D268 0032                  		add.w	$32(a0),d1
00011704 3141 0008                  		move.w	d1,8(a0)
00011708 D468 0030                  		add.w	$30(a0),d2
0001170C 3142 000C                  		move.w	d2,$C(a0)
00011710 4E75                       		rts	
00011712                            ; ===========================================================================
00011712                            ; ---------------------------------------------------------------------------
00011712                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011712                            ; ---------------------------------------------------------------------------
00011712                            Map_obj5A:
00011712                            	include "_maps\obj5A.asm"
00011712                            ; ---------------------------------------------------------------------------
00011712                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011712                            ; ---------------------------------------------------------------------------
00011712 0000                       		dc.w byte_10E84-Map_obj5A
00011714 02                         byte_10E84:	dc.b 2
00011715 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001171A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011720 00                         		even
00011720 00                         		even
00011720                            
00011720                            ; ===========================================================================
00011720                            ; ---------------------------------------------------------------------------
00011720                            ; Object 5B - blocks that form a staircase (SLZ)
00011720                            ; ---------------------------------------------------------------------------
00011720                            
00011720                            Obj5B:					; XREF: Obj_Index
00011720 7000                       		moveq	#0,d0
00011722 1028 0024                  		move.b	$24(a0),d0
00011726 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001172A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001172E 3028 0030                  		move.w	$30(a0),d0
00011732 0240 FF80                  		andi.w	#$FF80,d0
00011736 3238 F700                  		move.w	($FFFFF700).w,d1
0001173A 0441 0080                  		subi.w	#$80,d1
0001173E 0241 FF80                  		andi.w	#$FF80,d1
00011742 9041                       		sub.w	d1,d0
00011744 0C40 0280                  		cmpi.w	#$280,d0
00011748 6200 C79A                  		bhi.w	DeleteObject
0001174C 6000 C75A                  		bra.w	DisplaySprite
00011750                            ; ===========================================================================
00011750 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011752 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011754 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011756                            ; ===========================================================================
00011756                            
00011756                            Obj5B_Main:				; XREF: Obj5B_Index
00011756 5428 0024                  		addq.b	#2,$24(a0)
0001175A 7638                       		moveq	#$38,d3
0001175C 7801                       		moveq	#1,d4
0001175E 0828 0000 0022             		btst	#0,$22(a0)
00011764 6700                       		beq.s	loc_10EDA
00011766 763B                       		moveq	#$3B,d3
00011768 78FF                       		moveq	#-1,d4
0001176A                            
0001176A                            loc_10EDA:
0001176A 3428 0008                  		move.w	8(a0),d2
0001176E 2248                       		movea.l	a0,a1
00011770 7203                       		moveq	#3,d1
00011772 6000                       		bra.s	Obj5B_MakeBlocks
00011774                            ; ===========================================================================
00011774                            
00011774                            Obj5B_Loop:
00011774 6100 CBCE                  		bsr.w	SingleObjLoad2
00011778 6600 0000                  		bne.w	Obj5B_Move
0001177C 137C 0004 0024             		move.b	#4,$24(a1)
00011782                            
00011782                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011782 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011786 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001178E 337C 4000 0002             		move.w	#$4000,2(a1)
00011794 137C 0004 0001             		move.b	#4,1(a1)
0001179A 137C 0003 0018             		move.b	#3,$18(a1)
000117A0 137C 0010 0019             		move.b	#$10,$19(a1)
000117A6 1368 0028 0028             		move.b	$28(a0),$28(a1)
000117AC 3342 0008                  		move.w	d2,8(a1)
000117B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000117B6 3368 0008 0030             		move.w	8(a0),$30(a1)
000117BC 3369 000C 0032             		move.w	$C(a1),$32(a1)
000117C2 0642 0020                  		addi.w	#$20,d2
000117C6 1343 0037                  		move.b	d3,$37(a1)
000117CA 2348 003C                  		move.l	a0,$3C(a1)
000117CE D604                       		add.b	d4,d3
000117D0 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000117D4                            
000117D4                            Obj5B_Move:				; XREF: Obj5B_Index
000117D4 7000                       		moveq	#0,d0
000117D6 1028 0028                  		move.b	$28(a0),d0
000117DA 0240 0007                  		andi.w	#7,d0
000117DE D040                       		add.w	d0,d0
000117E0 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000117E4 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000117E8                            
000117E8                            Obj5B_Solid:				; XREF: Obj5B_Index
000117E8 2468 003C                  		movea.l	$3C(a0),a2
000117EC 7000                       		moveq	#0,d0
000117EE 1028 0037                  		move.b	$37(a0),d0
000117F2 1032 0000                  		move.b	(a2,d0.w),d0
000117F6 D068 0032                  		add.w	$32(a0),d0
000117FA 3140 000C                  		move.w	d0,$C(a0)
000117FE 7200                       		moveq	#0,d1
00011800 1228 0019                  		move.b	$19(a0),d1
00011804 0641 000B                  		addi.w	#$B,d1
00011808 343C 0010                  		move.w	#$10,d2
0001180C 363C 0011                  		move.w	#$11,d3
00011810 3828 0008                  		move.w	8(a0),d4
00011814 6100 EA62                  		bsr.w	SolidObject
00011818 4A04                       		tst.b	d4
0001181A 6A00                       		bpl.s	loc_10F92
0001181C 1544 0036                  		move.b	d4,$36(a2)
00011820                            
00011820                            loc_10F92:
00011820 0828 0003 0022             		btst	#3,$22(a0)
00011826 6700                       		beq.s	locret_10FA0
00011828 157C 0001 0036             		move.b	#1,$36(a2)
0001182E                            
0001182E                            locret_10FA0:
0001182E 4E75                       		rts	
00011830                            ; ===========================================================================
00011830 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011832 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011834 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011836 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011838                            ; ===========================================================================
00011838                            
00011838                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011838 4A68 0034                  		tst.w	$34(a0)
0001183C 6600                       		bne.s	loc_10FC0
0001183E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011844 6600                       		bne.s	locret_10FBE
00011846 317C 001E 0034             		move.w	#$1E,$34(a0)
0001184C                            
0001184C                            locret_10FBE:
0001184C 4E75                       		rts	
0001184E                            ; ===========================================================================
0001184E                            
0001184E                            loc_10FC0:
0001184E 5368 0034                  		subq.w	#1,$34(a0)
00011852 66F8                       		bne.s	locret_10FBE
00011854 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011858 4E75                       		rts	
0001185A                            ; ===========================================================================
0001185A                            
0001185A                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001185A 4A68 0034                  		tst.w	$34(a0)
0001185E 6600                       		bne.s	loc_10FE0
00011860 4A28 0036                  		tst.b	$36(a0)
00011864 6A00                       		bpl.s	locret_10FDE
00011866 317C 003C 0034             		move.w	#$3C,$34(a0)
0001186C                            
0001186C                            locret_10FDE:
0001186C 4E75                       		rts	
0001186E                            ; ===========================================================================
0001186E                            
0001186E                            loc_10FE0:
0001186E 5368 0034                  		subq.w	#1,$34(a0)
00011872 6600                       		bne.s	loc_10FEC
00011874 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011878 4E75                       		rts	
0001187A                            ; ===========================================================================
0001187A                            
0001187A                            loc_10FEC:
0001187A 43E8 0038                  		lea	$38(a0),a1
0001187E 3028 0034                  		move.w	$34(a0),d0
00011882 E408                       		lsr.b	#2,d0
00011884 0200 0001                  		andi.b	#1,d0
00011888 12C0                       		move.b	d0,(a1)+
0001188A 0A00 0001                  		eori.b	#1,d0
0001188E 12C0                       		move.b	d0,(a1)+
00011890 0A00 0001                  		eori.b	#1,d0
00011894 12C0                       		move.b	d0,(a1)+
00011896 0A00 0001                  		eori.b	#1,d0
0001189A 12C0                       		move.b	d0,(a1)+
0001189C 4E75                       		rts	
0001189E                            ; ===========================================================================
0001189E                            
0001189E                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001189E 43E8 0038                  		lea	$38(a0),a1
000118A2 0C11 0080                  		cmpi.b	#$80,(a1)
000118A6 6700                       		beq.s	locret_11038
000118A8 5211                       		addq.b	#1,(a1)
000118AA 7200                       		moveq	#0,d1
000118AC 1219                       		move.b	(a1)+,d1
000118AE 4841                       		swap	d1
000118B0 E289                       		lsr.l	#1,d1
000118B2 2401                       		move.l	d1,d2
000118B4 E289                       		lsr.l	#1,d1
000118B6 2601                       		move.l	d1,d3
000118B8 D682                       		add.l	d2,d3
000118BA 4841                       		swap	d1
000118BC 4842                       		swap	d2
000118BE 4843                       		swap	d3
000118C0 12C3                       		move.b	d3,(a1)+
000118C2 12C2                       		move.b	d2,(a1)+
000118C4 12C1                       		move.b	d1,(a1)+
000118C6                            
000118C6                            locret_11038:
000118C6 4E75                       		rts	
000118C8 4E75                       		rts	
000118CA                            ; ===========================================================================
000118CA                            ; ---------------------------------------------------------------------------
000118CA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000118CA                            ; ---------------------------------------------------------------------------
000118CA                            Map_obj5B:
000118CA                            	include "_maps\obj5B.asm"
000118CA                            ; ---------------------------------------------------------------------------
000118CA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000118CA                            ; ---------------------------------------------------------------------------
000118CA 0000                       		dc.w byte_1103E-Map_obj5B
000118CC 01                         byte_1103E:	dc.b 1
000118CD F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000118D2                            		even
000118D2                            		even
000118D2                            
000118D2                            ; ===========================================================================
000118D2                            ; ---------------------------------------------------------------------------
000118D2                            ; Object 5C - metal girders in foreground (SLZ)
000118D2                            ; ---------------------------------------------------------------------------
000118D2                            
000118D2                            Obj5C:					; XREF: Obj_Index
000118D2 7000                       		moveq	#0,d0
000118D4 1028 0024                  		move.b	$24(a0),d0
000118D8 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000118DC 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000118E0                            ; ===========================================================================
000118E0 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000118E2 0000                       		dc.w Obj5C_Display-Obj5C_Index
000118E4                            ; ===========================================================================
000118E4                            
000118E4                            Obj5C_Main:				; XREF: Obj5C_Index
000118E4 5428 0024                  		addq.b	#2,$24(a0)
000118E8 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000118F0 317C 83CC 0002             		move.w	#$83CC,2(a0)
000118F6 117C 0010 0019             		move.b	#$10,$19(a0)
000118FC                            
000118FC                            Obj5C_Display:				; XREF: Obj5C_Index
000118FC 2238 F700                  		move.l	($FFFFF700).w,d1
00011900 D281                       		add.l	d1,d1
00011902 4841                       		swap	d1
00011904 4441                       		neg.w	d1
00011906 3141 0008                  		move.w	d1,8(a0)
0001190A 2238 F704                  		move.l	($FFFFF704).w,d1
0001190E D281                       		add.l	d1,d1
00011910 4841                       		swap	d1
00011912 0241 003F                  		andi.w	#$3F,d1
00011916 4441                       		neg.w	d1
00011918 0641 0100                  		addi.w	#$100,d1
0001191C 3141 000A                  		move.w	d1,$A(a0)
00011920 6000 C586                  		bra.w	DisplaySprite
00011924                            ; ===========================================================================
00011924                            ; ---------------------------------------------------------------------------
00011924                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011924                            ; ---------------------------------------------------------------------------
00011924                            Map_obj5C:
00011924                            	include "_maps\obj5C.asm"
00011924                            ; ---------------------------------------------------------------------------
00011924                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011924                            ; ---------------------------------------------------------------------------
00011924 0000                       		dc.w byte_11098-Map_obj5C
00011926 09                         byte_11098:	dc.b 9
00011927 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001192C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011931 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011936 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001193B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011940 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011945 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001194A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001194F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011954                            		even
00011954                            		even
00011954                            
00011954                            ; ===========================================================================
00011954                            ; ---------------------------------------------------------------------------
00011954                            ; Object 1B - water surface (LZ)
00011954                            ; ---------------------------------------------------------------------------
00011954                            
00011954                            Obj1B:					; XREF: Obj_Index
00011954 7000                       		moveq	#0,d0
00011956 1028 0024                  		move.b	$24(a0),d0
0001195A 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001195E 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011962                            ; ===========================================================================
00011962 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011964 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011966                            ; ===========================================================================
00011966                            
00011966                            Obj1B_Main:				; XREF: Obj1B_Index
00011966 5428 0024                  		addq.b	#2,$24(a0)
0001196A 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011972 317C C300 0002             		move.w	#$C300,2(a0)
00011978 117C 0004 0001             		move.b	#4,1(a0)
0001197E 117C 0080 0019             		move.b	#$80,$19(a0)
00011984 3168 0008 0030             		move.w	8(a0),$30(a0)
0001198A                            
0001198A                            Obj1B_Action:				; XREF: Obj1B_Index
0001198A 3238 F700                  		move.w	($FFFFF700).w,d1
0001198E 0241 FFE0                  		andi.w	#$FFE0,d1
00011992 D268 0030                  		add.w	$30(a0),d1
00011996 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001199C 6700                       		beq.s	loc_11114
0001199E 0641 0020                  		addi.w	#$20,d1
000119A2                            
000119A2                            loc_11114:
000119A2 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000119A6 3238 F646                  		move.w	($FFFFF646).w,d1
000119AA 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000119AE 4A28 0032                  		tst.b	$32(a0)
000119B2 6600                       		bne.s	Obj1B_Animate
000119B4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000119BA 6700                       		beq.s	loc_1114A	; if not, branch
000119BC 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000119C0 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000119C6 6000                       		bra.s	Obj1B_Display
000119C8                            ; ===========================================================================
000119C8                            
000119C8                            Obj1B_Animate:				; XREF: loc_11114
000119C8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000119CC 6600                       		bne.s	Obj1B_Display	; if yes, branch
000119CE 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000119D4 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000119D8                            
000119D8                            loc_1114A:				; XREF: loc_11114
000119D8 5328 001E                  		subq.b	#1,$1E(a0)
000119DC 6A00                       		bpl.s	Obj1B_Display
000119DE 117C 0007 001E             		move.b	#7,$1E(a0)
000119E4 5228 001A                  		addq.b	#1,$1A(a0)
000119E8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000119EE 6500                       		bcs.s	Obj1B_Display
000119F0 117C 0000 001A             		move.b	#0,$1A(a0)
000119F6                            
000119F6                            Obj1B_Display:
000119F6 6000 C4B0                  		bra.w	DisplaySprite
000119FA                            ; ===========================================================================
000119FA                            ; ---------------------------------------------------------------------------
000119FA                            ; Sprite mappings - water surface (LZ)
000119FA                            ; ---------------------------------------------------------------------------
000119FA                            Map_obj1B:
000119FA                            	include "_maps\obj1B.asm"
000119FA                            ; ---------------------------------------------------------------------------
000119FA                            ; Sprite mappings - water surface (LZ)
000119FA                            ; ---------------------------------------------------------------------------
000119FA 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000119FE 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011A02 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011A06 03                         byte_11178:	dc.b 3
00011A07 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011A0C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011A11 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011A16 03                         byte_11188:	dc.b 3
00011A17 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011A1C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011A21 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011A26 03                         byte_11198:	dc.b 3
00011A27 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011A2C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011A31 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011A36 06                         byte_111A8:	dc.b 6
00011A37 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011A3C FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011A41 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011A46 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011A4B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011A50 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011A55 06                         byte_111C7:	dc.b 6
00011A56 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011A5B FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011A60 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011A65 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011A6A FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011A6F FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011A74 06                         byte_111E6:	dc.b 6
00011A75 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011A7A FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011A7F FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011A84 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011A89 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011A8E FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011A94 00                         		even
00011A94 00                         		even
00011A94                            
00011A94                            ; ===========================================================================
00011A94                            ; ---------------------------------------------------------------------------
00011A94                            ; Object 0B - pole that	breaks (LZ)
00011A94                            ; ---------------------------------------------------------------------------
00011A94                            
00011A94                            Obj0B:					; XREF: Obj_Index
00011A94 7000                       		moveq	#0,d0
00011A96 1028 0024                  		move.b	$24(a0),d0
00011A9A 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011A9E 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011AA2                            ; ===========================================================================
00011AA2 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011AA4 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011AA6 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011AA8                            ; ===========================================================================
00011AA8                            
00011AA8                            Obj0B_Main:				; XREF: Obj0B_Index
00011AA8 5428 0024                  		addq.b	#2,$24(a0)
00011AAC 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011AB4 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011ABA 117C 0004 0001             		move.b	#4,1(a0)
00011AC0 117C 0008 0019             		move.b	#8,$19(a0)
00011AC6 117C 0004 0018             		move.b	#4,$18(a0)
00011ACC 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011AD2 7000                       		moveq	#0,d0
00011AD4 1028 0028                  		move.b	$28(a0),d0	; get object type
00011AD8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011ADC 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011AE0                            
00011AE0                            Obj0B_Action:				; XREF: Obj0B_Index
00011AE0 4A28 0032                  		tst.b	$32(a0)
00011AE4 6700                       		beq.s	Obj0B_Grab
00011AE6 4A68 0030                  		tst.w	$30(a0)
00011AEA 6700                       		beq.s	Obj0B_MoveUp
00011AEC 5368 0030                  		subq.w	#1,$30(a0)
00011AF0 6600                       		bne.s	Obj0B_MoveUp
00011AF2 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011AF8 6000                       		bra.s	Obj0B_Release
00011AFA                            ; ===========================================================================
00011AFA                            
00011AFA                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011AFA 43F8 D000                  		lea	($FFFFD000).w,a1
00011AFE 3028 000C                  		move.w	$C(a0),d0
00011B02 0440 0018                  		subi.w	#$18,d0
00011B06 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011B0C 6700                       		beq.s	Obj0B_MoveDown
00011B0E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011B12 B069 000C                  		cmp.w	$C(a1),d0
00011B16 6500                       		bcs.s	Obj0B_MoveDown
00011B18 3340 000C                  		move.w	d0,$C(a1)
00011B1C                            
00011B1C                            Obj0B_MoveDown:
00011B1C 0640 0024                  		addi.w	#$24,d0
00011B20 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011B26 6700                       		beq.s	Obj0B_LetGo
00011B28 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011B2C B069 000C                  		cmp.w	$C(a1),d0
00011B30 6400                       		bcc.s	Obj0B_LetGo
00011B32 3340 000C                  		move.w	d0,$C(a1)
00011B36                            
00011B36                            Obj0B_LetGo:
00011B36 1038 F603                  		move.b	($FFFFF603).w,d0
00011B3A 0240 0070                  		andi.w	#$70,d0
00011B3E 6700                       		beq.s	Obj0B_Display
00011B40                            
00011B40                            Obj0B_Release:				; XREF: Obj0B_Action
00011B40 4228 0020                  		clr.b	$20(a0)
00011B44 5428 0024                  		addq.b	#2,$24(a0)
00011B48 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011B4C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011B50 4228 0032                  		clr.b	$32(a0)
00011B54 6000                       		bra.s	Obj0B_Display
00011B56                            ; ===========================================================================
00011B56                            
00011B56                            Obj0B_Grab:				; XREF: Obj0B_Action
00011B56 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011B5A 6700                       		beq.s	Obj0B_Display	; if not, branch
00011B5C 43F8 D000                  		lea	($FFFFD000).w,a1
00011B60 3028 0008                  		move.w	8(a0),d0
00011B64 0640 0014                  		addi.w	#$14,d0
00011B68 B069 0008                  		cmp.w	8(a1),d0
00011B6C 6400                       		bcc.s	Obj0B_Display
00011B6E 4228 0021                  		clr.b	$21(a0)
00011B72 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011B78 6400                       		bcc.s	Obj0B_Display
00011B7A 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011B7E 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011B82 3028 0008                  		move.w	8(a0),d0
00011B86 0640 0014                  		addi.w	#$14,d0
00011B8A 3340 0008                  		move.w	d0,8(a1)
00011B8E 08A9 0000 0022             		bclr	#0,$22(a1)
00011B94 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011B9A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011BA0 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011BA6 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011BAC                            
00011BAC                            Obj0B_Display:				; XREF: Obj0B_Index
00011BAC 6000 E3A2                  		bra.w	MarkObjGone
00011BB0                            ; ===========================================================================
00011BB0                            ; ---------------------------------------------------------------------------
00011BB0                            ; Sprite mappings - pole that breaks (LZ)
00011BB0                            ; ---------------------------------------------------------------------------
00011BB0                            Map_obj0B:
00011BB0                            	include "_maps\obj0B.asm"
00011BB0                            ; ---------------------------------------------------------------------------
00011BB0                            ; Sprite mappings - pole that breaks (LZ)
00011BB0                            ; ---------------------------------------------------------------------------
00011BB0 0000                       		dc.w byte_11326-Map_obj0B
00011BB2 0000                       		dc.w byte_11331-Map_obj0B
00011BB4 02                         byte_11326:	dc.b 2			; normal pole
00011BB5 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011BBA 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011BBF 04                         byte_11331:	dc.b 4			; broken pole
00011BC0 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011BC5 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011BCA 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011BCF 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011BD4                            		even
00011BD4                            		even
00011BD4                            
00011BD4                            ; ===========================================================================
00011BD4                            ; ---------------------------------------------------------------------------
00011BD4                            ; Object 0C - flapping door (LZ)
00011BD4                            ; ---------------------------------------------------------------------------
00011BD4                            
00011BD4                            Obj0C:					; XREF: Obj_Index
00011BD4 7000                       		moveq	#0,d0
00011BD6 1028 0024                  		move.b	$24(a0),d0
00011BDA 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011BDE 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011BE2                            ; ===========================================================================
00011BE2 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011BE4 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011BE6                            ; ===========================================================================
00011BE6                            
00011BE6                            Obj0C_Main:				; XREF: Obj0C_Index
00011BE6 5428 0024                  		addq.b	#2,$24(a0)
00011BEA 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011BF2 317C 4328 0002             		move.w	#$4328,2(a0)
00011BF8 0028 0004 0001             		ori.b	#4,1(a0)
00011BFE 117C 0028 0019             		move.b	#$28,$19(a0)
00011C04 7000                       		moveq	#0,d0
00011C06 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C0A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011C0E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011C12                            
00011C12                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011C12 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011C16 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011C18 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011C1E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011C24 4A28 0001                  		tst.b	1(a0)
00011C28 6A00                       		bpl.s	Obj0C_Solid
00011C2A 303C 00BB                  		move.w	#$BB,d0
00011C2E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play door sound
00011C34                            
00011C34                            Obj0C_Solid:
00011C34 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011C3A 6100 92E6                  		bsr.w	AnimateSprite
00011C3E 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011C42 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011C46 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011C48 3038 D008                  		move.w	($FFFFD008).w,d0
00011C4C B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011C50 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011C52 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011C58 323C 0013                  		move.w	#$13,d1
00011C5C 343C 0020                  		move.w	#$20,d2
00011C60 3602                       		move.w	d2,d3
00011C62 5243                       		addq.w	#1,d3
00011C64 3828 0008                  		move.w	8(a0),d4
00011C68 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011C6C                            
00011C6C                            Obj0C_Display:
00011C6C 6000 E2E2                  		bra.w	MarkObjGone
00011C70                            ; ===========================================================================
00011C70                            Ani_obj0C:
00011C70                            	include "_anim\obj0C.asm"
00011C70                            ; ---------------------------------------------------------------------------
00011C70                            ; Animation script - flapping door (LZ)
00011C70                            ; ---------------------------------------------------------------------------
00011C70 0000                       		dc.w byte_113E6-Ani_obj0C
00011C72 0000                       		dc.w byte_113EC-Ani_obj0C
00011C74 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011C7A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011C80                            		even
00011C80                            		even
00011C80                            
00011C80                            ; ---------------------------------------------------------------------------
00011C80                            ; Sprite mappings - flapping door (LZ)
00011C80                            ; ---------------------------------------------------------------------------
00011C80                            Map_obj0C:
00011C80                            	include "_maps\obj0C.asm"
00011C80                            ; ---------------------------------------------------------------------------
00011C80                            ; Sprite mappings - flapping door (LZ)
00011C80                            ; ---------------------------------------------------------------------------
00011C80 0000                       		dc.w byte_113F8-Map_obj0C
00011C82 0000                       		dc.w byte_11403-Map_obj0C
00011C84 0000                       		dc.w byte_1140E-Map_obj0C
00011C86 02                         byte_113F8:	dc.b 2
00011C87 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011C8C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011C91 02                         byte_11403:	dc.b 2
00011C92 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011C97 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011C9C 02                         byte_1140E:	dc.b 2
00011C9D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011CA2 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011CA8 00                         		even
00011CA8 00                         		even
00011CA8                            
00011CA8                            ; ===========================================================================
00011CA8                            ; ---------------------------------------------------------------------------
00011CA8                            ; Object 71 - invisible	solid blocks
00011CA8                            ; ---------------------------------------------------------------------------
00011CA8                            
00011CA8                            Obj71:					; XREF: Obj_Index
00011CA8 7000                       		moveq	#0,d0
00011CAA 1028 0024                  		move.b	$24(a0),d0
00011CAE 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011CB2 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011CB6                            ; ===========================================================================
00011CB6 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011CB8 0000                       		dc.w Obj71_Solid-Obj71_Index
00011CBA                            ; ===========================================================================
00011CBA                            
00011CBA                            Obj71_Main:				; XREF: Obj71_Index
00011CBA 5428 0024                  		addq.b	#2,$24(a0)
00011CBE 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011CC6 317C 8680 0002             		move.w	#$8680,2(a0)
00011CCC 0028 0004 0001             		ori.b	#4,1(a0)
00011CD2 1028 0028                  		move.b	$28(a0),d0	; get object type
00011CD6 1200                       		move.b	d0,d1
00011CD8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011CDC 0640 0010                  		addi.w	#$10,d0
00011CE0 E248                       		lsr.w	#1,d0
00011CE2 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011CE6 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011CEA 5241                       		addq.w	#1,d1
00011CEC E749                       		lsl.w	#3,d1
00011CEE 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011CF2                            
00011CF2                            Obj71_Solid:				; XREF: Obj71_Index
00011CF2 6100 C42E                  		bsr.w	ChkObjOnScreen
00011CF6 6600                       		bne.s	Obj71_ChkDel
00011CF8 7200                       		moveq	#0,d1
00011CFA 1228 0019                  		move.b	$19(a0),d1
00011CFE 0641 000B                  		addi.w	#$B,d1
00011D02 7400                       		moveq	#0,d2
00011D04 1428 0016                  		move.b	$16(a0),d2
00011D08 3602                       		move.w	d2,d3
00011D0A 5243                       		addq.w	#1,d3
00011D0C 3828 0008                  		move.w	8(a0),d4
00011D10 6100 E5A8                  		bsr.w	SolidObject71
00011D14                            
00011D14                            Obj71_ChkDel:
00011D14 3028 0008                  		move.w	8(a0),d0
00011D18 0240 FF80                  		andi.w	#$FF80,d0
00011D1C 3238 F700                  		move.w	($FFFFF700).w,d1
00011D20 0441 0080                  		subi.w	#$80,d1
00011D24 0241 FF80                  		andi.w	#$FF80,d1
00011D28 9041                       		sub.w	d1,d0
00011D2A 0C40 0280                  		cmpi.w	#$280,d0
00011D2E 6200                       		bhi.s	Obj71_Delete
00011D30 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011D34 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011D36 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011D3A                            ; ===========================================================================
00011D3A                            
00011D3A                            Obj71_NoDisplay:
00011D3A 4E75                       		rts	
00011D3C                            ; ===========================================================================
00011D3C                            
00011D3C                            Obj71_Delete:
00011D3C 4EFA C1A6                  		jmp	DeleteObject
00011D40                            ; ===========================================================================
00011D40                            ; ---------------------------------------------------------------------------
00011D40                            ; Sprite mappings - invisible solid blocks
00011D40                            ; ---------------------------------------------------------------------------
00011D40                            Map_obj71:
00011D40                            	include "_maps\obj71.asm"
00011D40                            ; ---------------------------------------------------------------------------
00011D40                            ; Sprite mappings - invisible solid blocks
00011D40                            ; ---------------------------------------------------------------------------
00011D40 0000                       		dc.w byte_114BC-Map_obj71
00011D42 0000                       		dc.w byte_114D1-Map_obj71
00011D44 0000                       		dc.w byte_114E6-Map_obj71
00011D46 04                         byte_114BC:	dc.b 4
00011D47 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011D4C F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011D51 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011D56 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011D5B 04                         byte_114D1:	dc.b 4
00011D5C E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011D61 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011D66 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011D6B 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011D70 04                         byte_114E6:	dc.b 4
00011D71 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011D76 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011D7B 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011D80 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011D86 00                         		even
00011D86 00                         		even
00011D86                            
00011D86                            ; ===========================================================================
00011D86                            ; ---------------------------------------------------------------------------
00011D86                            ; Object 5D - fans (SLZ)
00011D86                            ; ---------------------------------------------------------------------------
00011D86                            
00011D86                            Obj5D:					; XREF: Obj_Index
00011D86 7000                       		moveq	#0,d0
00011D88 1028 0024                  		move.b	$24(a0),d0
00011D8C 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011D90 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011D94                            ; ===========================================================================
00011D94 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011D96 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011D98                            ; ===========================================================================
00011D98                            
00011D98                            Obj5D_Main:				; XREF: Obj5D_Index
00011D98 5428 0024                  		addq.b	#2,$24(a0)
00011D9C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011DA4 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011DAA 0028 0004 0001             		ori.b	#4,1(a0)
00011DB0 117C 0010 0019             		move.b	#$10,$19(a0)
00011DB6 117C 0004 0018             		move.b	#4,$18(a0)
00011DBC                            
00011DBC                            Obj5D_Delay:				; XREF: Obj5D_Index
00011DBC 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011DC2 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011DC4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011DC8 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011DCA 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011DD0 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011DD6 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011DD8 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011DDE                            
00011DDE                            Obj5D_Blow:
00011DDE 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011DE2 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011DE6 43F8 D000                  		lea	($FFFFD000).w,a1
00011DEA 3029 0008                  		move.w	8(a1),d0
00011DEE 9068 0008                  		sub.w	8(a0),d0
00011DF2 0828 0000 0022             		btst	#0,$22(a0)
00011DF8 6600                       		bne.s	Obj5D_ChkSonic
00011DFA 4440                       		neg.w	d0
00011DFC                            
00011DFC                            Obj5D_ChkSonic:
00011DFC 0640 0050                  		addi.w	#$50,d0
00011E00 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011E04 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011E06 3229 000C                  		move.w	$C(a1),d1
00011E0A 0641 0060                  		addi.w	#$60,d1
00011E0E 9268 000C                  		sub.w	$C(a0),d1
00011E12 6500                       		bcs.s	Obj5D_Animate
00011E14 0C41 0070                  		cmpi.w	#$70,d1
00011E18 6400                       		bcc.s	Obj5D_Animate
00011E1A 0440 0050                  		subi.w	#$50,d0
00011E1E 6400                       		bcc.s	loc_1159A
00011E20 4640                       		not.w	d0
00011E22 D040                       		add.w	d0,d0
00011E24                            
00011E24                            loc_1159A:
00011E24 0640 0060                  		addi.w	#$60,d0
00011E28 0828 0000 0022             		btst	#0,$22(a0)
00011E2E 6600                       		bne.s	loc_115A8
00011E30 4440                       		neg.w	d0
00011E32                            
00011E32                            loc_115A8:
00011E32 4400                       		neg.b	d0
00011E34 E840                       		asr.w	#4,d0
00011E36 0828 0000 0028             		btst	#0,$28(a0)
00011E3C 6700                       		beq.s	Obj5D_MoveSonic
00011E3E 4440                       		neg.w	d0
00011E40                            
00011E40                            Obj5D_MoveSonic:
00011E40 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011E44                            
00011E44                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011E44 5328 001E                  		subq.b	#1,$1E(a0)
00011E48 6A00                       		bpl.s	Obj5D_ChkDel
00011E4A 117C 0000 001E             		move.b	#0,$1E(a0)
00011E50 5228 001B                  		addq.b	#1,$1B(a0)
00011E54 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011E5A 6500                       		bcs.s	loc_115D8
00011E5C 117C 0000 001B             		move.b	#0,$1B(a0)
00011E62                            
00011E62                            loc_115D8:
00011E62 7000                       		moveq	#0,d0
00011E64 0828 0000 0028             		btst	#0,$28(a0)
00011E6A 6700                       		beq.s	loc_115E4
00011E6C 7002                       		moveq	#2,d0
00011E6E                            
00011E6E                            loc_115E4:
00011E6E D028 001B                  		add.b	$1B(a0),d0
00011E72 1140 001A                  		move.b	d0,$1A(a0)
00011E76                            
00011E76                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011E76 6100 C030                  		bsr.w	DisplaySprite
00011E7A 3028 0008                  		move.w	8(a0),d0
00011E7E 0240 FF80                  		andi.w	#$FF80,d0
00011E82 3238 F700                  		move.w	($FFFFF700).w,d1
00011E86 0441 0080                  		subi.w	#$80,d1
00011E8A 0241 FF80                  		andi.w	#$FF80,d1
00011E8E 9041                       		sub.w	d1,d0
00011E90 0C40 0280                  		cmpi.w	#$280,d0
00011E94 6200 C04E                  		bhi.w	DeleteObject
00011E98 4E75                       		rts	
00011E9A                            ; ===========================================================================
00011E9A                            ; ---------------------------------------------------------------------------
00011E9A                            ; Sprite mappings - fans (SLZ)
00011E9A                            ; ---------------------------------------------------------------------------
00011E9A                            Map_obj5D:
00011E9A                            	include "_maps\obj5D.asm"
00011E9A                            ; ---------------------------------------------------------------------------
00011E9A                            ; Sprite mappings - fans (SLZ)
00011E9A                            ; ---------------------------------------------------------------------------
00011E9A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011E9E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011EA2 0000                       		dc.w byte_1161A-Map_obj5D
00011EA4 02                         byte_1161A:	dc.b 2
00011EA5 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011EAA 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011EAF 02                         byte_11625:	dc.b 2
00011EB0 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011EB5 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011EBA 02                         byte_11630:	dc.b 2
00011EBB F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011EC0 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011EC6 00                         		even
00011EC6 00                         		even
00011EC6                            
00011EC6                            ; ===========================================================================
00011EC6                            ; ---------------------------------------------------------------------------
00011EC6                            ; Object 5E - seesaws (SLZ)
00011EC6                            ; ---------------------------------------------------------------------------
00011EC6                            
00011EC6                            Obj5E:					; XREF: Obj_Index
00011EC6 7000                       		moveq	#0,d0
00011EC8 1028 0024                  		move.b	$24(a0),d0
00011ECC 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011ED0 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011ED4 3028 0030                  		move.w	$30(a0),d0
00011ED8 0240 FF80                  		andi.w	#$FF80,d0
00011EDC 3238 F700                  		move.w	($FFFFF700).w,d1
00011EE0 0441 0080                  		subi.w	#$80,d1
00011EE4 0241 FF80                  		andi.w	#$FF80,d1
00011EE8 9041                       		sub.w	d1,d0
00011EEA 6B00 BFF8                  		bmi.w	DeleteObject
00011EEE 0C40 0280                  		cmpi.w	#$280,d0
00011EF2 6200 BFF0                  		bhi.w	DeleteObject
00011EF6 6000 BFB0                  		bra.w	DisplaySprite
00011EFA                            ; ===========================================================================
00011EFA 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011EFC 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011EFE 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011F00 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011F02 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011F04 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011F06                            ; ===========================================================================
00011F06                            
00011F06                            Obj5E_Main:				; XREF: Obj5E_Index
00011F06 5428 0024                  		addq.b	#2,$24(a0)
00011F0A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011F12 317C 0374 0002             		move.w	#$374,2(a0)
00011F18 0028 0004 0001             		ori.b	#4,1(a0)
00011F1E 117C 0004 0018             		move.b	#4,$18(a0)
00011F24 117C 0030 0019             		move.b	#$30,$19(a0)
00011F2A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011F30 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011F34 6600                       		bne.s	loc_116D2	; if not, branch
00011F36 6100 C40C                  		bsr.w	SingleObjLoad2
00011F3A 6600                       		bne.s	loc_116D2
00011F3C 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011F40 5C29 0024                  		addq.b	#6,$24(a1)
00011F44 3368 0008 0008             		move.w	8(a0),8(a1)
00011F4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011F50 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011F56 2348 003C                  		move.l	a0,$3C(a1)
00011F5A                            
00011F5A                            loc_116D2:
00011F5A 0828 0000 0022             		btst	#0,$22(a0)
00011F60 6700                       		beq.s	loc_116E0
00011F62 117C 0002 001A             		move.b	#2,$1A(a0)
00011F68                            
00011F68                            loc_116E0:
00011F68 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011F6E                            
00011F6E                            Obj5E_Slope:				; XREF: Obj5E_Index
00011F6E 1228 003A                  		move.b	$3A(a0),d1
00011F72 6100 0000                  		bsr.w	loc_11766
00011F76 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011F7C 0828 0000 001A             		btst	#0,$1A(a0)
00011F82 6700                       		beq.s	loc_11702
00011F84 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011F8A                            
00011F8A                            loc_11702:
00011F8A 43F8 D000                  		lea	($FFFFD000).w,a1
00011F8E 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011F94 323C 0030                  		move.w	#$30,d1
00011F98 4EB9 0000 7BB6             		jsr	(SlopeObject).l
00011F9E 4E75                       		rts	
00011FA0                            ; ===========================================================================
00011FA0                            
00011FA0                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011FA0 6100 0000                  		bsr.w	loc_1174A
00011FA4 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011FAA 0828 0000 001A             		btst	#0,$1A(a0)
00011FB0 6700                       		beq.s	loc_11730
00011FB2 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011FB8                            
00011FB8                            loc_11730:
00011FB8 323C 0030                  		move.w	#$30,d1
00011FBC 4EB9 0000 7C56             		jsr	(ExitPlatform).l
00011FC2 323C 0030                  		move.w	#$30,d1
00011FC6 3428 0008                  		move.w	8(a0),d2
00011FCA 4EB9 0000 8C46             		jsr	SlopeObject2
00011FD0 4E75                       		rts	
00011FD2                            ; ===========================================================================
00011FD2                            
00011FD2                            loc_1174A:				; XREF: Obj5E_Slope2
00011FD2 7202                       		moveq	#2,d1
00011FD4 43F8 D000                  		lea	($FFFFD000).w,a1
00011FD8 3028 0008                  		move.w	8(a0),d0
00011FDC 9069 0008                  		sub.w	8(a1),d0
00011FE0 6400                       		bcc.s	loc_1175E
00011FE2 4440                       		neg.w	d0
00011FE4 7200                       		moveq	#0,d1
00011FE6                            
00011FE6                            loc_1175E:
00011FE6 0C40 0008                  		cmpi.w	#8,d0
00011FEA 6400                       		bcc.s	loc_11766
00011FEC 7201                       		moveq	#1,d1
00011FEE                            
00011FEE                            loc_11766:
00011FEE 1028 001A                  		move.b	$1A(a0),d0
00011FF2 B001                       		cmp.b	d1,d0
00011FF4 6700                       		beq.s	locret_11790
00011FF6 6400                       		bcc.s	loc_11772
00011FF8 5400                       		addq.b	#2,d0
00011FFA                            
00011FFA                            loc_11772:
00011FFA 5300                       		subq.b	#1,d0
00011FFC 1140 001A                  		move.b	d0,$1A(a0)
00012000 1141 003A                  		move.b	d1,$3A(a0)
00012004 08A8 0000 0001             		bclr	#0,1(a0)
0001200A 0828 0001 001A             		btst	#1,$1A(a0)
00012010 6700                       		beq.s	locret_11790
00012012 08E8 0000 0001             		bset	#0,1(a0)
00012018                            
00012018                            locret_11790:
00012018 4E75                       		rts	
0001201A                            ; ===========================================================================
0001201A                            
0001201A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001201A 5428 0024                  		addq.b	#2,$24(a0)
0001201E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00012026 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001202C 0028 0004 0001             		ori.b	#4,1(a0)
00012032 117C 0004 0018             		move.b	#4,$18(a0)
00012038 117C 008B 0020             		move.b	#$8B,$20(a0)
0001203E 117C 000C 0019             		move.b	#$C,$19(a0)
00012044 3168 0008 0030             		move.w	8(a0),$30(a0)
0001204A 0668 0028 0008             		addi.w	#$28,8(a0)
00012050 3168 000C 0034             		move.w	$C(a0),$34(a0)
00012056 117C 0001 001A             		move.b	#1,$1A(a0)
0001205C 0828 0000 0022             		btst	#0,$22(a0)
00012062 6700                       		beq.s	Obj5E_MoveSpike
00012064 0468 0050 0008             		subi.w	#$50,8(a0)
0001206A 117C 0002 003A             		move.b	#2,$3A(a0)
00012070                            
00012070                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012070 2268 003C                  		movea.l	$3C(a0),a1
00012074 7000                       		moveq	#0,d0
00012076 1028 003A                  		move.b	$3A(a0),d0
0001207A 9029 003A                  		sub.b	$3A(a1),d0
0001207E 6700                       		beq.s	loc_1183E
00012080 6400                       		bcc.s	loc_117FC
00012082 4400                       		neg.b	d0
00012084                            
00012084                            loc_117FC:
00012084 323C F7E8                  		move.w	#-$818,d1
00012088 343C FEEC                  		move.w	#-$114,d2
0001208C 0C00 0001                  		cmpi.b	#1,d0
00012090 6700                       		beq.s	loc_11822
00012092 323C F510                  		move.w	#-$AF0,d1
00012096 343C FF34                  		move.w	#-$CC,d2
0001209A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000120A0 6D00                       		blt.s	loc_11822
000120A2 323C F200                  		move.w	#-$E00,d1
000120A6 343C FF60                  		move.w	#-$A0,d2
000120AA                            
000120AA                            loc_11822:
000120AA 3141 0012                  		move.w	d1,$12(a0)
000120AE 3142 0010                  		move.w	d2,$10(a0)
000120B2 3028 0008                  		move.w	8(a0),d0
000120B6 9068 0030                  		sub.w	$30(a0),d0
000120BA 6400                       		bcc.s	loc_11838
000120BC 4468 0010                  		neg.w	$10(a0)
000120C0                            
000120C0                            loc_11838:
000120C0 5428 0024                  		addq.b	#2,$24(a0)
000120C4 6000                       		bra.s	Obj5E_SpikeFall
000120C6                            ; ===========================================================================
000120C6                            
000120C6                            loc_1183E:				; XREF: Obj5E_MoveSpike
000120C6 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000120CC 7000                       		moveq	#0,d0
000120CE 1029 001A                  		move.b	$1A(a1),d0
000120D2 343C 0028                  		move.w	#$28,d2
000120D6 3228 0008                  		move.w	8(a0),d1
000120DA 9268 0030                  		sub.w	$30(a0),d1
000120DE 6400                       		bcc.s	loc_1185C
000120E0 4442                       		neg.w	d2
000120E2 5440                       		addq.w	#2,d0
000120E4                            
000120E4                            loc_1185C:
000120E4 D040                       		add.w	d0,d0
000120E6 3228 0034                  		move.w	$34(a0),d1
000120EA D272 0000                  		add.w	(a2,d0.w),d1
000120EE 3141 000C                  		move.w	d1,$C(a0)
000120F2 D468 0030                  		add.w	$30(a0),d2
000120F6 3142 0008                  		move.w	d2,8(a0)
000120FA 4268 000E                  		clr.w	$E(a0)
000120FE 4268 000A                  		clr.w	$A(a0)
00012102 4E75                       		rts	
00012104                            ; ===========================================================================
00012104                            
00012104                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00012104 4A68 0012                  		tst.w	$12(a0)
00012108 6A00                       		bpl.s	loc_1189A
0001210A 6100 BD04                  		bsr.w	ObjectFall
0001210E 3028 0034                  		move.w	$34(a0),d0
00012112 0440 002F                  		subi.w	#$2F,d0
00012116 B068 000C                  		cmp.w	$C(a0),d0
0001211A 6E00                       		bgt.s	locret_11898
0001211C 6100 BCF2                  		bsr.w	ObjectFall
00012120                            
00012120                            locret_11898:
00012120 4E75                       		rts	
00012122                            ; ===========================================================================
00012122                            
00012122                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012122 6100 BCEC                  		bsr.w	ObjectFall
00012126 2268 003C                  		movea.l	$3C(a0),a1
0001212A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012130 7000                       		moveq	#0,d0
00012132 1029 001A                  		move.b	$1A(a1),d0
00012136 3228 0008                  		move.w	8(a0),d1
0001213A 9268 0030                  		sub.w	$30(a0),d1
0001213E 6400                       		bcc.s	loc_118BA
00012140 5440                       		addq.w	#2,d0
00012142                            
00012142                            loc_118BA:
00012142 D040                       		add.w	d0,d0
00012144 3228 0034                  		move.w	$34(a0),d1
00012148 D272 0000                  		add.w	(a2,d0.w),d1
0001214C B268 000C                  		cmp.w	$C(a0),d1
00012150 6E00                       		bgt.s	locret_11938
00012152 2268 003C                  		movea.l	$3C(a0),a1
00012156 7202                       		moveq	#2,d1
00012158 4A68 0010                  		tst.w	$10(a0)
0001215C 6B00                       		bmi.s	Obj5E_Spring
0001215E 7200                       		moveq	#0,d1
00012160                            
00012160                            Obj5E_Spring:
00012160 1341 003A                  		move.b	d1,$3A(a1)
00012164 1141 003A                  		move.b	d1,$3A(a0)
00012168 B229 001A                  		cmp.b	$1A(a1),d1
0001216C 6700                       		beq.s	loc_1192C
0001216E 08A9 0003 0022             		bclr	#3,$22(a1)
00012174 6700                       		beq.s	loc_1192C
00012176 4229 0025                  		clr.b	$25(a1)
0001217A 137C 0002 0024             		move.b	#2,$24(a1)
00012180 45F8 D000                  		lea	($FFFFD000).w,a2
00012184 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001218A 446A 0012                  		neg.w	$12(a2)
0001218E 08EA 0001 0022             		bset	#1,$22(a2)
00012194 08AA 0003 0022             		bclr	#3,$22(a2)
0001219A 422A 003C                  		clr.b	$3C(a2)
0001219E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000121A4 157C 0002 0024             		move.b	#2,$24(a2)
000121AA 303C 00CC                  		move.w	#$CC,d0
000121AE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
000121B4                            
000121B4                            loc_1192C:
000121B4 4268 0010                  		clr.w	$10(a0)
000121B8 4268 0012                  		clr.w	$12(a0)
000121BC 5528 0024                  		subq.b	#2,$24(a0)
000121C0                            
000121C0                            locret_11938:
000121C0 4E75                       		rts	
000121C2                            ; ===========================================================================
000121C2 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000121CC                            
000121CC                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000121FC                            		even
000121FC                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001222C                            		even
0001222C                            ; ---------------------------------------------------------------------------
0001222C                            ; Sprite mappings - seesaws (SLZ)
0001222C                            ; ---------------------------------------------------------------------------
0001222C                            Map_obj5E:
0001222C                            	include "_maps\obj5E.asm"
0001222C                            ; ---------------------------------------------------------------------------
0001222C                            ; Sprite mappings - seesaws (SLZ)
0001222C                            ; ---------------------------------------------------------------------------
0001222C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012230 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012234 07                         byte_119AC:	dc.b 7
00012235 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001223A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001223F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012244 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012249 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001224E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012253 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012258 04                         byte_119D0:	dc.b 4
00012259 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001225E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012263 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012268 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001226E 00                         		even
0001226E 00                         		even
0001226E                            
0001226E                            ; ---------------------------------------------------------------------------
0001226E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001226E                            ; ---------------------------------------------------------------------------
0001226E                            Map_obj5Ea:
0001226E                            	include "_maps\obj5Eballs.asm"
0001226E                            ; ---------------------------------------------------------------------------
0001226E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001226E                            ; ---------------------------------------------------------------------------
0001226E 0000                       		dc.w byte_119EA-Map_obj5Ea
00012270 0000                       		dc.w byte_119F0-Map_obj5Ea
00012272 01                         byte_119EA:	dc.b 1
00012273 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012278 01                         byte_119F0:	dc.b 1
00012279 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001227E                            		even
0001227E                            		even
0001227E                            
0001227E                            ; ===========================================================================
0001227E                            ; ---------------------------------------------------------------------------
0001227E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001227E                            ; ---------------------------------------------------------------------------
0001227E                            
0001227E                            Obj5F:					; XREF: Obj_Index
0001227E 7000                       		moveq	#0,d0
00012280 1028 0024                  		move.b	$24(a0),d0
00012284 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012288 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001228C                            ; ===========================================================================
0001228C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001228E 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012290 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012292 0000                       		dc.w Obj5F_End-Obj5F_Index
00012294                            ; ===========================================================================
00012294                            
00012294                            Obj5F_Main:				; XREF: Obj5F_Index
00012294 5428 0024                  		addq.b	#2,$24(a0)
00012298 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000122A0 317C 0400 0002             		move.w	#$400,2(a0)
000122A6 0028 0004 0001             		ori.b	#4,1(a0)
000122AC 117C 0003 0018             		move.b	#3,$18(a0)
000122B2 117C 000C 0019             		move.b	#$C,$19(a0)
000122B8 1028 0028                  		move.b	$28(a0),d0
000122BC 6700                       		beq.s	loc_11A3C
000122BE 1140 0024                  		move.b	d0,$24(a0)
000122C2 4E75                       		rts	
000122C4                            ; ===========================================================================
000122C4                            
000122C4                            loc_11A3C:
000122C4 117C 009A 0020             		move.b	#$9A,$20(a0)
000122CA 0868 0000 0022             		bchg	#0,$22(a0)
000122D0                            
000122D0                            Obj5F_Action:				; XREF: Obj5F_Index
000122D0 7000                       		moveq	#0,d0
000122D2 1028 0025                  		move.b	$25(a0),d0
000122D6 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000122DA 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000122DE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000122E4 6100 8C3C                  		bsr.w	AnimateSprite
000122E8 6000 DC66                  		bra.w	MarkObjGone
000122EC                            ; ===========================================================================
000122EC 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000122EE 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000122F0 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000122F2                            ; ===========================================================================
000122F2                            
000122F2                            Obj5F_Walk:				; XREF: Obj5F_Index2
000122F2 6100 0000                  		bsr.w	Obj5F_ChkSonic
000122F6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000122FA 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000122FC 5428 0025                  		addq.b	#2,$25(a0)
00012300 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012306 317C 0010 0010             		move.w	#$10,$10(a0)
0001230C 117C 0001 001C             		move.b	#1,$1C(a0)
00012312 0868 0000 0022             		bchg	#0,$22(a0)
00012318 6700                       		beq.s	locret_11A96
0001231A 4468 0010                  		neg.w	$10(a0)		; change direction
0001231E                            
0001231E                            locret_11A96:
0001231E 4E75                       		rts	
00012320                            ; ===========================================================================
00012320                            
00012320                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012320 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012324 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012328 6B00                       		bmi.s	loc_11AA8
0001232A 6100 BB56                  		bsr.w	SpeedToPos
0001232E 4E75                       		rts	
00012330                            ; ===========================================================================
00012330                            
00012330                            loc_11AA8:
00012330 5528 0025                  		subq.b	#2,$25(a0)
00012334 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001233A 4268 0010                  		clr.w	$10(a0)		; stop walking
0001233E 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012344 4E75                       		rts	
00012346                            ; ===========================================================================
00012346                            
00012346                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012346 5368 0030                  		subq.w	#1,$30(a0)
0001234A 6A00                       		bpl.s	locret_11AD0
0001234C 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012350 117C 0000 0024             		move.b	#0,$24(a0)
00012356                            
00012356                            locret_11AD0:
00012356 4E75                       		rts	
00012358                            ; ===========================================================================
00012358                            
00012358                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012358 3038 D008                  		move.w	($FFFFD008).w,d0
0001235C 9068 0008                  		sub.w	8(a0),d0
00012360 6400                       		bcc.s	loc_11ADE
00012362 4440                       		neg.w	d0
00012364                            
00012364                            loc_11ADE:
00012364 0C40 0060                  		cmpi.w	#$60,d0
00012368 6400                       		bcc.s	locret_11B5E
0001236A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001236E 9068 000C                  		sub.w	$C(a0),d0
00012372 6400                       		bcc.s	Obj5F_MakeFuse
00012374 4440                       		neg.w	d0
00012376                            
00012376                            Obj5F_MakeFuse:
00012376 0C40 0060                  		cmpi.w	#$60,d0
0001237A 6400                       		bcc.s	locret_11B5E
0001237C 4A78 FE08                  		tst.w	($FFFFFE08).w
00012380 6600                       		bne.s	locret_11B5E
00012382 117C 0004 0025             		move.b	#4,$25(a0)
00012388 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001238E 4268 0010                  		clr.w	$10(a0)
00012392 117C 0002 001C             		move.b	#2,$1C(a0)
00012398 6100 BFAA                  		bsr.w	SingleObjLoad2
0001239C 6600                       		bne.s	locret_11B5E
0001239E 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000123A2 3368 0008 0008             		move.w	8(a0),8(a1)
000123A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000123AE 3368 000C 0034             		move.w	$C(a0),$34(a1)
000123B4 1368 0022 0022             		move.b	$22(a0),$22(a1)
000123BA 137C 0004 0028             		move.b	#4,$28(a1)
000123C0 137C 0003 001C             		move.b	#3,$1C(a1)
000123C6 337C 0010 0012             		move.w	#$10,$12(a1)
000123CC 0828 0001 0022             		btst	#1,$22(a0)
000123D2 6700                       		beq.s	loc_11B54
000123D4 4469 0012                  		neg.w	$12(a1)
000123D8                            
000123D8                            loc_11B54:
000123D8 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000123DE 2348 003C                  		move.l	a0,$3C(a1)
000123E2                            
000123E2                            locret_11B5E:
000123E2 4E75                       		rts	
000123E4                            ; ===========================================================================
000123E4                            
000123E4                            Obj5F_Display:				; XREF: Obj5F_Index
000123E4 6100                       		bsr.s	loc_11B70
000123E6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000123EC 6100 8B34                  		bsr.w	AnimateSprite
000123F0 6000 DB5E                  		bra.w	MarkObjGone
000123F4                            ; ===========================================================================
000123F4                            
000123F4                            loc_11B70:
000123F4 5368 0030                  		subq.w	#1,$30(a0)
000123F8 6B00                       		bmi.s	loc_11B7C
000123FA 6100 BA86                  		bsr.w	SpeedToPos
000123FE 4E75                       		rts	
00012400                            ; ===========================================================================
00012400                            
00012400                            loc_11B7C:
00012400 4268 0030                  		clr.w	$30(a0)
00012404 4228 0024                  		clr.b	$24(a0)
00012408 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001240E 7203                       		moveq	#3,d1
00012410 2248                       		movea.l	a0,a1
00012412 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012418 6000                       		bra.s	Obj5F_MakeShrap
0001241A                            ; ===========================================================================
0001241A                            
0001241A                            Obj5F_Loop:
0001241A 6100 BF28                  		bsr.w	SingleObjLoad2
0001241E 6600                       		bne.s	loc_11BCE
00012420                            
00012420                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012420 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012424 3368 0008 0008             		move.w	8(a0),8(a1)
0001242A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012430 137C 0006 0028             		move.b	#6,$28(a1)
00012436 137C 0004 001C             		move.b	#4,$1C(a1)
0001243C 335A 0010                  		move.w	(a2)+,$10(a1)
00012440 335A 0012                  		move.w	(a2)+,$12(a1)
00012444 137C 0098 0020             		move.b	#$98,$20(a1)
0001244A 08E9 0007 0001             		bset	#7,1(a1)
00012450                            
00012450                            loc_11BCE:
00012450 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012454                            
00012454 117C 0006 0024             		move.b	#6,$24(a0)
0001245A                            
0001245A                            Obj5F_End:				; XREF: Obj5F_Index
0001245A 6100 BA26                  		bsr.w	SpeedToPos
0001245E 0668 0018 0012             		addi.w	#$18,$12(a0)
00012464 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001246A 6100 8AB6                  		bsr.w	AnimateSprite
0001246E 4A28 0001                  		tst.b	1(a0)
00012472 6A00 BA70                  		bpl.w	DeleteObject
00012476 6000 BA30                  		bra.w	DisplaySprite
0001247A                            ; ===========================================================================
0001247A FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001248A                            
0001248A                            Ani_obj5F:
0001248A                            	include "_anim\obj5F.asm"
0001248A                            ; ---------------------------------------------------------------------------
0001248A                            ; Animation script - Bomb enemy
0001248A                            ; ---------------------------------------------------------------------------
0001248A 0000                       		dc.w byte_11C12-Ani_obj5F
0001248C 0000                       		dc.w byte_11C16-Ani_obj5F
0001248E 0000                       		dc.w byte_11C1C-Ani_obj5F
00012490 0000                       		dc.w byte_11C20-Ani_obj5F
00012492 0000                       		dc.w byte_11C24-Ani_obj5F
00012494 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012498 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001249E 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000124A2 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000124A6 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000124AA                            		even
000124AA                            		even
000124AA                            
000124AA                            ; ---------------------------------------------------------------------------
000124AA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000124AA                            ; ---------------------------------------------------------------------------
000124AA                            Map_obj5F:
000124AA                            	include "_maps\obj5F.asm"
000124AA                            ; ---------------------------------------------------------------------------
000124AA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000124AA                            ; ---------------------------------------------------------------------------
000124AA 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000124AE 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000124B2 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000124B6 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000124BA 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000124BE 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000124C2 03                         byte_11C40:	dc.b 3
000124C3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000124C8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000124CD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124D2 03                         byte_11C50:	dc.b 3
000124D3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124D8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000124DD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124E2 03                         byte_11C60:	dc.b 3
000124E3 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000124E8 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000124ED E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000124F2 03                         byte_11C70:	dc.b 3
000124F3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124F8 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000124FD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012502 03                         byte_11C80:	dc.b 3
00012503 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012508 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001250D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012512 03                         byte_11C90:	dc.b 3
00012513 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012518 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001251D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012522 02                         byte_11CA0:	dc.b 2
00012523 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012528 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001252D 02                         byte_11CAB:	dc.b 2
0001252E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012533 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012538 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012539 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001253E 01                         byte_11CBC:	dc.b 1			; fuse
0001253F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012544 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012545 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001254A 01                         byte_11CC8:	dc.b 1			; fireball
0001254B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012550                            		even
00012550                            		even
00012550                            
00012550                            ; ===========================================================================
00012550                            ; ---------------------------------------------------------------------------
00012550                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012550                            ; ---------------------------------------------------------------------------
00012550                            
00012550                            Obj60:					; XREF: Obj_Index
00012550 7000                       		moveq	#0,d0
00012552 1028 0024                  		move.b	$24(a0),d0
00012556 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001255A 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001255E                            ; ===========================================================================
0001255E 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012560 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012562 0000                       		dc.w Obj60_Display-Obj60_Index
00012564 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012566 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012568                            ; ===========================================================================
00012568                            
00012568                            Obj60_Main:				; XREF: Obj60_Index
00012568 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012570 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012576 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001257C 6700                       		beq.s	loc_11D02
0001257E 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012584                            
00012584                            loc_11D02:
00012584 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001258A 6600                       		bne.s	loc_11D10
0001258C 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012592                            
00012592                            loc_11D10:
00012592 0028 0004 0001             		ori.b	#4,1(a0)
00012598 117C 0004 0018             		move.b	#4,$18(a0)
0001259E 117C 000B 0020             		move.b	#$B,$20(a0)
000125A4 117C 000C 0019             		move.b	#$C,$19(a0)
000125AA 7400                       		moveq	#0,d2
000125AC 45E8 0037                  		lea	$37(a0),a2
000125B0 264A                       		movea.l	a2,a3
000125B2 524A                       		addq.w	#1,a2
000125B4 7203                       		moveq	#3,d1
000125B6                            
000125B6                            Obj60_MakeOrbs:
000125B6 6100 BD8C                  		bsr.w	SingleObjLoad2
000125BA 6600                       		bne.s	loc_11D90
000125BC 5213                       		addq.b	#1,(a3)
000125BE 3A09                       		move.w	a1,d5
000125C0 0445 D000                  		subi.w	#-$3000,d5
000125C4 EC4D                       		lsr.w	#6,d5
000125C6 0245 007F                  		andi.w	#$7F,d5
000125CA 14C5                       		move.b	d5,(a2)+
000125CC 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000125CE 137C 0006 0024             		move.b	#6,$24(a1)
000125D4 2368 0004 0004             		move.l	4(a0),4(a1)
000125DA 3368 0002 0002             		move.w	2(a0),2(a1)
000125E0 0029 0004 0001             		ori.b	#4,1(a1)
000125E6 137C 0004 0018             		move.b	#4,$18(a1)
000125EC 137C 0008 0019             		move.b	#8,$19(a1)
000125F2 137C 0003 001A             		move.b	#3,$1A(a1)
000125F8 137C 0098 0020             		move.b	#$98,$20(a1)
000125FE 1342 0026                  		move.b	d2,$26(a1)
00012602 0602 0040                  		addi.b	#$40,d2
00012606 2348 003C                  		move.l	a0,$3C(a1)
0001260A 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001260E                            
0001260E                            loc_11D90:
0001260E 7001                       		moveq	#1,d0
00012610 0828 0000 0022             		btst	#0,$22(a0)
00012616 6700                       		beq.s	Obj60_Move
00012618 4440                       		neg.w	d0
0001261A                            
0001261A                            Obj60_Move:
0001261A 1140 0036                  		move.b	d0,$36(a0)
0001261E 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012624 5428 0024                  		addq.b	#2,$24(a0)
00012628 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001262E 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012634 6700                       		beq.s	locret_11DBC	; if not, branch
00012636 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001263A                            
0001263A                            locret_11DBC:
0001263A 4E75                       		rts	
0001263C                            ; ===========================================================================
0001263C                            
0001263C                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001263C 3038 D008                  		move.w	($FFFFD008).w,d0
00012640 9068 0008                  		sub.w	8(a0),d0
00012644 6400                       		bcc.s	loc_11DCA
00012646 4440                       		neg.w	d0
00012648                            
00012648                            loc_11DCA:
00012648 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001264C 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001264E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012652 9068 000C                  		sub.w	$C(a0),d0
00012656 6400                       		bcc.s	loc_11DDC
00012658 4440                       		neg.w	d0
0001265A                            
0001265A                            loc_11DDC:
0001265A 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001265E 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012660 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012664 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012666 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001266C                            
0001266C                            Obj60_Animate:
0001266C 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012672 6100 88AE                  		bsr.w	AnimateSprite
00012676 6000 0000                  		bra.w	Obj60_ChkDel
0001267A                            ; ===========================================================================
0001267A                            
0001267A                            Obj60_Display:				; XREF: Obj60_Index
0001267A 6100 B806                  		bsr.w	SpeedToPos
0001267E                            
0001267E                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001267E 3028 0008                  		move.w	8(a0),d0
00012682 0240 FF80                  		andi.w	#$FF80,d0
00012686 3238 F700                  		move.w	($FFFFF700).w,d1
0001268A 0441 0080                  		subi.w	#$80,d1
0001268E 0241 FF80                  		andi.w	#$FF80,d1
00012692 9041                       		sub.w	d1,d0
00012694 0C40 0280                  		cmpi.w	#$280,d0
00012698 6200 0000                  		bhi.w	Obj60_ChkGone
0001269C 6000 B80A                  		bra.w	DisplaySprite
000126A0                            ; ===========================================================================
000126A0                            
000126A0                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000126A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000126A4 7000                       		moveq	#0,d0
000126A6 1028 0023                  		move.b	$23(a0),d0
000126AA 6700                       		beq.s	loc_11E34
000126AC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000126B2                            
000126B2                            loc_11E34:
000126B2 45E8 0037                  		lea	$37(a0),a2
000126B6 7400                       		moveq	#0,d2
000126B8 141A                       		move.b	(a2)+,d2
000126BA 5342                       		subq.w	#1,d2
000126BC 6500                       		bcs.s	Obj60_Delete
000126BE                            
000126BE                            loc_11E40:
000126BE 7000                       		moveq	#0,d0
000126C0 101A                       		move.b	(a2)+,d0
000126C2 ED48                       		lsl.w	#6,d0
000126C4 0680 00FF D000             		addi.l	#$FFD000,d0
000126CA 2240                       		movea.l	d0,a1
000126CC 6100 B818                  		bsr.w	DeleteObject2
000126D0 51CA FFEC                  		dbf	d2,loc_11E40
000126D4                            
000126D4                            Obj60_Delete:
000126D4 6000 B80E                  		bra.w	DeleteObject
000126D8                            ; ===========================================================================
000126D8                            
000126D8                            Obj60_MoveOrb:				; XREF: Obj60_Index
000126D8 2268 003C                  		movea.l	$3C(a0),a1
000126DC 0C11 0060                  		cmpi.b	#$60,0(a1)
000126E0 6600 B802                  		bne.w	DeleteObject
000126E4 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000126EA 6600                       		bne.s	Obj60_Circle
000126EC 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000126F2 6600                       		bne.s	Obj60_Circle
000126F4 5428 0024                  		addq.b	#2,$24(a0)
000126F8 5329 0037                  		subq.b	#1,$37(a1)
000126FC 6600                       		bne.s	Obj60_FireOrb
000126FE 5429 0024                  		addq.b	#2,$24(a1)
00012702                            
00012702                            Obj60_FireOrb:
00012702 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012708 0829 0000 0022             		btst	#0,$22(a1)
0001270E 6700                       		beq.s	Obj60_Display2
00012710 4468 0010                  		neg.w	$10(a0)
00012714                            
00012714                            Obj60_Display2:
00012714 6000 B792                  		bra.w	DisplaySprite
00012718                            ; ===========================================================================
00012718                            
00012718                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012718 1028 0026                  		move.b	$26(a0),d0
0001271C 4EB9 0000 2D36             		jsr	(CalcSine).l
00012722 E841                       		asr.w	#4,d1
00012724 D269 0008                  		add.w	8(a1),d1
00012728 3141 0008                  		move.w	d1,8(a0)
0001272C E840                       		asr.w	#4,d0
0001272E D069 000C                  		add.w	$C(a1),d0
00012732 3140 000C                  		move.w	d0,$C(a0)
00012736 1029 0036                  		move.b	$36(a1),d0
0001273A D128 0026                  		add.b	d0,$26(a0)
0001273E 6000 B768                  		bra.w	DisplaySprite
00012742                            ; ===========================================================================
00012742                            
00012742                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012742 6100 B73E                  		bsr.w	SpeedToPos
00012746 4A28 0001                  		tst.b	1(a0)
0001274A 6A00 B798                  		bpl.w	DeleteObject
0001274E 6000 B758                  		bra.w	DisplaySprite
00012752                            ; ===========================================================================
00012752                            Ani_obj60:
00012752                            	include "_anim\obj60.asm"
00012752                            ; ---------------------------------------------------------------------------
00012752                            ; Animation script - Orbinaut enemy
00012752                            ; ---------------------------------------------------------------------------
00012752 0000                       		dc.w byte_11EDA-Ani_obj60
00012754 0000                       		dc.w byte_11EDE-Ani_obj60
00012756 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001275A 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012760                            		even
00012760                            		even
00012760                            
00012760                            ; ---------------------------------------------------------------------------
00012760                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012760                            ; ---------------------------------------------------------------------------
00012760                            Map_obj60:
00012760                            	include "_maps\obj60.asm"
00012760                            ; ---------------------------------------------------------------------------
00012760                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012760                            ; ---------------------------------------------------------------------------
00012760 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012764 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012768 01                         byte_11EEC:	dc.b 1
00012769 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001276E 01                         byte_11EF2:	dc.b 1
0001276F F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012774 01                         byte_11EF8:	dc.b 1
00012775 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001277A 01                         byte_11EFE:	dc.b 1
0001277B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012780                            		even
00012780                            		even
00012780                            
00012780                            ; ===========================================================================
00012780                            ; ---------------------------------------------------------------------------
00012780                            ; Object 16 - harpoon (LZ)
00012780                            ; ---------------------------------------------------------------------------
00012780                            
00012780                            Obj16:					; XREF: Obj_Index
00012780 7000                       		moveq	#0,d0
00012782 1028 0024                  		move.b	$24(a0),d0
00012786 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001278A 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001278E                            ; ===========================================================================
0001278E 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012790 0000                       		dc.w Obj16_Move-Obj16_Index
00012792 0000                       		dc.w Obj16_Wait-Obj16_Index
00012794                            ; ===========================================================================
00012794                            
00012794                            Obj16_Main:				; XREF: Obj16_Index
00012794 5428 0024                  		addq.b	#2,$24(a0)
00012798 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000127A0 317C 03CC 0002             		move.w	#$3CC,2(a0)
000127A6 0028 0004 0001             		ori.b	#4,1(a0)
000127AC 117C 0004 0018             		move.b	#4,$18(a0)
000127B2 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000127B8 117C 0014 0019             		move.b	#$14,$19(a0)
000127BE 317C 003C 0030             		move.w	#60,$30(a0)
000127C4                            
000127C4                            Obj16_Move:				; XREF: Obj16_Index
000127C4 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000127CA 6100 8756                  		bsr.w	AnimateSprite
000127CE 7000                       		moveq	#0,d0
000127D0 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000127D4 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000127DA 6000 D774                  		bra.w	MarkObjGone
000127DE                            ; ===========================================================================
000127DE 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000127E4                            ; ===========================================================================
000127E4                            
000127E4                            Obj16_Wait:				; XREF: Obj16_Index
000127E4 5368 0030                  		subq.w	#1,$30(a0)
000127E8 6A00                       		bpl.s	Obj16_ChkDel
000127EA 317C 003C 0030             		move.w	#60,$30(a0)
000127F0 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000127F4 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000127FA                            
000127FA                            Obj16_ChkDel:
000127FA 6000 D754                  		bra.w	MarkObjGone
000127FE                            ; ===========================================================================
000127FE                            Ani_obj16:
000127FE                            	include "_anim\obj16.asm"
000127FE                            ; ---------------------------------------------------------------------------
000127FE                            ; Animation script - harpoon (LZ)
000127FE                            ; ---------------------------------------------------------------------------
000127FE 0000                       		dc.w byte_11F8A-Ani_obj16
00012800 0000                       		dc.w byte_11F8E-Ani_obj16
00012802 0000                       		dc.w byte_11F92-Ani_obj16
00012804 0000                       		dc.w byte_11F96-Ani_obj16
00012806 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001280A 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001280E 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012812 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012816                            		even
00012816                            		even
00012816                            
00012816                            ; ---------------------------------------------------------------------------
00012816                            ; Sprite mappings - harpoon (LZ)
00012816                            ; ---------------------------------------------------------------------------
00012816                            Map_obj16:
00012816                            	include "_maps\obj16.asm"
00012816                            ; ---------------------------------------------------------------------------
00012816                            ; Sprite mappings - harpoon (LZ)
00012816                            ; ---------------------------------------------------------------------------
00012816 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001281A 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001281E 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012822 01                         byte_11FA6:	dc.b 1
00012823 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012828 01                         byte_11FAC:	dc.b 1
00012829 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001282E 02                         byte_11FB2:	dc.b 2
0001282F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012834 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012839 01                         byte_11FBD:	dc.b 1
0001283A F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001283F 01                         byte_11FC3:	dc.b 1
00012840 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012845 02                         byte_11FC9:	dc.b 2
00012846 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001284B F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012850                            		even
00012850                            		even
00012850                            
00012850                            ; ===========================================================================
00012850                            ; ---------------------------------------------------------------------------
00012850                            ; Object 61 - blocks (LZ)
00012850                            ; ---------------------------------------------------------------------------
00012850                            
00012850                            Obj61:					; XREF: Obj_Index
00012850 7000                       		moveq	#0,d0
00012852 1028 0024                  		move.b	$24(a0),d0
00012856 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001285A 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001285E                            ; ===========================================================================
0001285E 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012860 0000                       		dc.w Obj61_Action-Obj61_Index
00012862                            
00012862 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012864 200C                       		dc.b $20, $C
00012866 1010                       		dc.b $10, $10
00012868 1010                       		dc.b $10, $10
0001286A                            ; ===========================================================================
0001286A                            
0001286A                            Obj61_Main:				; XREF: Obj61_Index
0001286A 5428 0024                  		addq.b	#2,$24(a0)
0001286E 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012876 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001287C 117C 0004 0001             		move.b	#4,1(a0)
00012882 117C 0003 0018             		move.b	#3,$18(a0)
00012888 7000                       		moveq	#0,d0
0001288A 1028 0028                  		move.b	$28(a0),d0
0001288E E648                       		lsr.w	#3,d0
00012890 0240 000E                  		andi.w	#$E,d0
00012894 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012898 115A 0019                  		move.b	(a2)+,$19(a0)
0001289C 1152 0016                  		move.b	(a2),$16(a0)
000128A0 E248                       		lsr.w	#1,d0
000128A2 1140 001A                  		move.b	d0,$1A(a0)
000128A6 3168 0008 0034             		move.w	8(a0),$34(a0)
000128AC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000128B2 1028 0028                  		move.b	$28(a0),d0
000128B6 0200 000F                  		andi.b	#$F,d0
000128BA 6700                       		beq.s	Obj61_Action
000128BC 0C00 0007                  		cmpi.b	#7,d0
000128C0 6700                       		beq.s	Obj61_Action
000128C2 117C 0001 0038             		move.b	#1,$38(a0)
000128C8                            
000128C8                            Obj61_Action:				; XREF: Obj61_Index
000128C8 3F28 0008                  		move.w	8(a0),-(sp)
000128CC 7000                       		moveq	#0,d0
000128CE 1028 0028                  		move.b	$28(a0),d0
000128D2 0240 000F                  		andi.w	#$F,d0
000128D6 D040                       		add.w	d0,d0
000128D8 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000128DC 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000128E0 381F                       		move.w	(sp)+,d4
000128E2 4A28 0001                  		tst.b	1(a0)
000128E6 6A00                       		bpl.s	Obj61_ChkDel
000128E8 7200                       		moveq	#0,d1
000128EA 1228 0019                  		move.b	$19(a0),d1
000128EE 0641 000B                  		addi.w	#$B,d1
000128F2 7400                       		moveq	#0,d2
000128F4 1428 0016                  		move.b	$16(a0),d2
000128F8 3602                       		move.w	d2,d3
000128FA 5243                       		addq.w	#1,d3
000128FC 6100 D97A                  		bsr.w	SolidObject
00012900 1144 003F                  		move.b	d4,$3F(a0)
00012904 6100 0000                  		bsr.w	loc_12180
00012908                            
00012908                            Obj61_ChkDel:
00012908 3028 0034                  		move.w	$34(a0),d0
0001290C 0240 FF80                  		andi.w	#$FF80,d0
00012910 3238 F700                  		move.w	($FFFFF700).w,d1
00012914 0441 0080                  		subi.w	#$80,d1
00012918 0241 FF80                  		andi.w	#$FF80,d1
0001291C 9041                       		sub.w	d1,d0
0001291E 0C40 0280                  		cmpi.w	#$280,d0
00012922 6200 B5C0                  		bhi.w	DeleteObject
00012926 6000 B580                  		bra.w	DisplaySprite
0001292A                            ; ===========================================================================
0001292A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001292E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012932 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012936 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001293A                            ; ===========================================================================
0001293A                            
0001293A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001293A 4E75                       		rts	
0001293C                            ; ===========================================================================
0001293C                            
0001293C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001293C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012940 6600                       		bne.s	loc_120D6	; if yes, branch
00012942 0828 0003 0022             		btst	#3,$22(a0)
00012948 6700                       		beq.s	locret_120D4
0001294A 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012950                            
00012950                            locret_120D4:
00012950 4E75                       		rts	
00012952                            ; ===========================================================================
00012952                            
00012952                            loc_120D6:
00012952 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012956 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012958 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001295C 4228 0038                  		clr.b	$38(a0)
00012960 4E75                       		rts	
00012962                            ; ===========================================================================
00012962                            
00012962                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012962 6100 B51E                  		bsr.w	SpeedToPos
00012966 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001296A 6100 0000                  		bsr.w	ObjHitFloor
0001296E 4A41                       		tst.w	d1
00012970 6A00 0000                  		bpl.w	locret_12106
00012974 5241                       		addq.w	#1,d1
00012976 D368 000C                  		add.w	d1,$C(a0)
0001297A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001297E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012982                            
00012982                            locret_12106:
00012982 4E75                       		rts	
00012984                            ; ===========================================================================
00012984                            
00012984                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012984 6100 B4FC                  		bsr.w	SpeedToPos
00012988 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001298C 6100 0000                  		bsr.w	ObjHitCeiling
00012990 4A41                       		tst.w	d1
00012992 6A00 0000                  		bpl.w	locret_12126
00012996 9368 000C                  		sub.w	d1,$C(a0)
0001299A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001299E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000129A2                            
000129A2                            locret_12126:
000129A2 4E75                       		rts	
000129A4                            ; ===========================================================================
000129A4                            
000129A4                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000129A4 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000129AA 6600                       		bne.s	locret_12138	; if not, branch
000129AC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000129B0 4228 0038                  		clr.b	$38(a0)
000129B4                            
000129B4                            locret_12138:
000129B4 4E75                       		rts	
000129B6                            ; ===========================================================================
000129B6                            
000129B6                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000129B6 3038 F646                  		move.w	($FFFFF646).w,d0
000129BA 9068 000C                  		sub.w	$C(a0),d0
000129BE 6700                       		beq.s	locret_1217E
000129C0 6400                       		bcc.s	loc_12162
000129C2 0C40 FFFE                  		cmpi.w	#-2,d0
000129C6 6C00                       		bge.s	loc_1214E
000129C8 70FE                       		moveq	#-2,d0
000129CA                            
000129CA                            loc_1214E:
000129CA D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000129CE 6100 0000                  		bsr.w	ObjHitCeiling
000129D2 4A41                       		tst.w	d1
000129D4 6A00 0000                  		bpl.w	locret_12160
000129D8 9368 000C                  		sub.w	d1,$C(a0)
000129DC                            
000129DC                            locret_12160:
000129DC 4E75                       		rts	
000129DE                            ; ===========================================================================
000129DE                            
000129DE                            loc_12162:				; XREF: Obj61_Type07
000129DE 0C40 0002                  		cmpi.w	#2,d0
000129E2 6F00                       		ble.s	loc_1216A
000129E4 7002                       		moveq	#2,d0
000129E6                            
000129E6                            loc_1216A:
000129E6 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000129EA 6100 0000                  		bsr.w	ObjHitFloor
000129EE 4A41                       		tst.w	d1
000129F0 6A00 0000                  		bpl.w	locret_1217E
000129F4 5241                       		addq.w	#1,d1
000129F6 D368 000C                  		add.w	d1,$C(a0)
000129FA                            
000129FA                            locret_1217E:
000129FA 4E75                       		rts	
000129FC                            ; ===========================================================================
000129FC                            
000129FC                            loc_12180:				; XREF: Obj61_Action
000129FC 4A28 0038                  		tst.b	$38(a0)
00012A00 6700                       		beq.s	locret_121C0
00012A02 0828 0003 0022             		btst	#3,$22(a0)
00012A08 6600                       		bne.s	loc_1219A
00012A0A 4A28 003E                  		tst.b	$3E(a0)
00012A0E 6700                       		beq.s	locret_121C0
00012A10 5928 003E                  		subq.b	#4,$3E(a0)
00012A14 6000                       		bra.s	loc_121A6
00012A16                            ; ===========================================================================
00012A16                            
00012A16                            loc_1219A:
00012A16 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012A1C 6700                       		beq.s	locret_121C0
00012A1E 5828 003E                  		addq.b	#4,$3E(a0)
00012A22                            
00012A22                            loc_121A6:
00012A22 1028 003E                  		move.b	$3E(a0),d0
00012A26 4EB9 0000 2D36             		jsr	(CalcSine).l
00012A2C 323C 0400                  		move.w	#$400,d1
00012A30 C1C1                       		muls.w	d1,d0
00012A32 4840                       		swap	d0
00012A34 D068 0030                  		add.w	$30(a0),d0
00012A38 3140 000C                  		move.w	d0,$C(a0)
00012A3C                            
00012A3C                            locret_121C0:
00012A3C 4E75                       		rts	
00012A3E                            ; ===========================================================================
00012A3E                            ; ---------------------------------------------------------------------------
00012A3E                            ; Sprite mappings - blocks (LZ)
00012A3E                            ; ---------------------------------------------------------------------------
00012A3E                            Map_obj61:
00012A3E                            	include "_maps\obj61.asm"
00012A3E                            ; ---------------------------------------------------------------------------
00012A3E                            ; Sprite mappings - blocks (LZ)
00012A3E                            ; ---------------------------------------------------------------------------
00012A3E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012A42 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012A46 01                         byte_121CA:	dc.b 1
00012A47 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012A4C 02                         byte_121D0:	dc.b 2
00012A4D F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012A52 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012A57 01                         byte_121DB:	dc.b 1
00012A58 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012A5D 01                         byte_121E1:	dc.b 1
00012A5E F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012A64 00                         		even
00012A64 00                         		even
00012A64                            
00012A64                            ; ===========================================================================
00012A64                            ; ---------------------------------------------------------------------------
00012A64                            ; Object 62 - gargoyle head (LZ)
00012A64                            ; ---------------------------------------------------------------------------
00012A64                            
00012A64                            Obj62:					; XREF: Obj_Index
00012A64 7000                       		moveq	#0,d0
00012A66 1028 0024                  		move.b	$24(a0),d0
00012A6A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012A6E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012A72 6000 D4DC                  		bra.w	MarkObjGone
00012A76                            ; ===========================================================================
00012A76 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012A78 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012A7A 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012A7C 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012A7E                            
00012A7E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012A86                            ; ===========================================================================
00012A86                            
00012A86                            Obj62_Main:				; XREF: Obj62_Index
00012A86 5428 0024                  		addq.b	#2,$24(a0)
00012A8A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012A92 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012A98 0028 0004 0001             		ori.b	#4,1(a0)
00012A9E 117C 0003 0018             		move.b	#3,$18(a0)
00012AA4 117C 0010 0019             		move.b	#$10,$19(a0)
00012AAA 1028 0028                  		move.b	$28(a0),d0	; get object type
00012AAE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012AB2 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012AB8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012ABE 0228 000F 0028             		andi.b	#$F,$28(a0)
00012AC4                            
00012AC4                            Obj62_MakeFire:				; XREF: Obj62_Index
00012AC4 5328 001E                  		subq.b	#1,$1E(a0)
00012AC8 6600                       		bne.s	Obj62_NoFire
00012ACA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012AD0 6100 B650                  		bsr.w	ChkObjOnScreen
00012AD4 6600                       		bne.s	Obj62_NoFire
00012AD6 6100 B856                  		bsr.w	SingleObjLoad
00012ADA 6600                       		bne.s	Obj62_NoFire
00012ADC 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012AE0 5829 0024                  		addq.b	#4,$24(a1)
00012AE4 3368 0008 0008             		move.w	8(a0),8(a1)
00012AEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012AF0 1368 0001 0001             		move.b	1(a0),1(a1)
00012AF6 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012AFC                            
00012AFC                            Obj62_NoFire:
00012AFC 4E75                       		rts	
00012AFE                            ; ===========================================================================
00012AFE                            
00012AFE                            Obj62_FireBall:				; XREF: Obj62_Index
00012AFE 5428 0024                  		addq.b	#2,$24(a0)
00012B02 117C 0008 0016             		move.b	#8,$16(a0)
00012B08 117C 0008 0017             		move.b	#8,$17(a0)
00012B0E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012B16 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012B1C 0028 0004 0001             		ori.b	#4,1(a0)
00012B22 117C 0004 0018             		move.b	#4,$18(a0)
00012B28 117C 0098 0020             		move.b	#$98,$20(a0)
00012B2E 117C 0008 0019             		move.b	#8,$19(a0)
00012B34 117C 0002 001A             		move.b	#2,$1A(a0)
00012B3A 5068 000C                  		addq.w	#8,$C(a0)
00012B3E 317C 0200 0010             		move.w	#$200,$10(a0)
00012B44 0828 0000 0022             		btst	#0,$22(a0)
00012B4A 6600                       		bne.s	Obj62_Sound
00012B4C 4468 0010                  		neg.w	$10(a0)
00012B50                            
00012B50                            Obj62_Sound:
00012B50 303C 00AE                  		move.w	#$AE,d0
00012B54 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012B5A                            
00012B5A                            Obj62_AniFire:				; XREF: Obj62_Index
00012B5A 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012B5E 0200 0007                  		andi.b	#7,d0
00012B62 6600                       		bne.s	Obj62_StopFire
00012B64 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012B6A                            
00012B6A                            Obj62_StopFire:
00012B6A 6100 B316                  		bsr.w	SpeedToPos
00012B6E 0828 0000 0022             		btst	#0,$22(a0)
00012B74 6600                       		bne.s	Obj62_StopFire2
00012B76 76F8                       		moveq	#-8,d3
00012B78 6100 0000                  		bsr.w	ObjHitWallLeft
00012B7C 4A41                       		tst.w	d1
00012B7E 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012B82 4E75                       		rts	
00012B84                            ; ===========================================================================
00012B84                            
00012B84                            Obj62_StopFire2:
00012B84 7608                       		moveq	#8,d3
00012B86 6100 0000                  		bsr.w	ObjHitWallRight
00012B8A 4A41                       		tst.w	d1
00012B8C 6B00 B356                  		bmi.w	DeleteObject
00012B90 4E75                       		rts	
00012B92                            ; ===========================================================================
00012B92                            ; ---------------------------------------------------------------------------
00012B92                            ; Sprite mappings - gargoyle head (LZ)
00012B92                            ; ---------------------------------------------------------------------------
00012B92                            Map_obj62:
00012B92                            	include "_maps\obj62.asm"
00012B92                            ; ---------------------------------------------------------------------------
00012B92                            ; Sprite mappings - gargoyle head (LZ)
00012B92                            ; ---------------------------------------------------------------------------
00012B92 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012B96 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012B9A 03                         byte_12320:	dc.b 3
00012B9B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012BA0 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012BA5 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012BAA 01                         byte_12330:	dc.b 1
00012BAB FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012BB0 01                         byte_12336:	dc.b 1
00012BB1 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012BB6                            		even
00012BB6                            		even
00012BB6                            
00012BB6                            ; ===========================================================================
00012BB6                            ; ---------------------------------------------------------------------------
00012BB6                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012BB6                            ; ---------------------------------------------------------------------------
00012BB6                            
00012BB6                            Obj63:					; XREF: Obj_Index
00012BB6 7000                       		moveq	#0,d0
00012BB8 1028 0024                  		move.b	$24(a0),d0
00012BBC 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012BC0 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012BC4 3028 0030                  		move.w	$30(a0),d0
00012BC8 0240 FF80                  		andi.w	#$FF80,d0
00012BCC 3238 F700                  		move.w	($FFFFF700).w,d1
00012BD0 0441 0080                  		subi.w	#$80,d1
00012BD4 0241 FF80                  		andi.w	#$FF80,d1
00012BD8 9041                       		sub.w	d1,d0
00012BDA 0C40 0280                  		cmpi.w	#$280,d0
00012BDE 6200                       		bhi.s	loc_1236A
00012BE0                            
00012BE0                            Obj63_Display:				; XREF: loc_1236A
00012BE0 6000 B2C6                  		bra.w	DisplaySprite
00012BE4                            ; ===========================================================================
00012BE4                            
00012BE4                            loc_1236A:				; XREF: Obj63
00012BE4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012BEA 6600                       		bne.s	loc_12378
00012BEC 0C40 FF80                  		cmpi.w	#-$80,d0
00012BF0 64EE                       		bcc.s	Obj63_Display
00012BF2                            
00012BF2                            loc_12378:
00012BF2 1028 002F                  		move.b	$2F(a0),d0
00012BF6 6A00 B2EC                  		bpl.w	DeleteObject
00012BFA 0240 007F                  		andi.w	#$7F,d0
00012BFE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012C02 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012C08 6000 B2DA                  		bra.w	DeleteObject
00012C0C                            ; ===========================================================================
00012C0C 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012C0E 0000                       		dc.w loc_124B2-Obj63_Index
00012C10 0000                       		dc.w loc_124C2-Obj63_Index
00012C12 0000                       		dc.w loc_124DE-Obj63_Index
00012C14                            ; ===========================================================================
00012C14                            
00012C14                            Obj63_Main:				; XREF: Obj63_Index
00012C14 1028 0028                  		move.b	$28(a0),d0
00012C18 6B00 0000                  		bmi.w	loc_12460
00012C1C 5428 0024                  		addq.b	#2,$24(a0)
00012C20 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012C28 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012C2E 0028 0004 0001             		ori.b	#4,1(a0)
00012C34 117C 0010 0019             		move.b	#$10,$19(a0)
00012C3A 117C 0004 0018             		move.b	#4,$18(a0)
00012C40 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012C46 6600                       		bne.s	loc_123E2
00012C48 5828 0024                  		addq.b	#4,$24(a0)
00012C4C 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012C52 117C 0001 0018             		move.b	#1,$18(a0)
00012C58 6000 0000                  		bra.w	loc_124DE
00012C5C                            ; ===========================================================================
00012C5C                            
00012C5C                            loc_123E2:
00012C5C 117C 0004 001A             		move.b	#4,$1A(a0)
00012C62 7000                       		moveq	#0,d0
00012C64 1028 0028                  		move.b	$28(a0),d0
00012C68 3200                       		move.w	d0,d1
00012C6A E648                       		lsr.w	#3,d0
00012C6C 0240 001E                  		andi.w	#$1E,d0
00012C70 45FA 0000                  		lea	Obj63_Data(pc),a2
00012C74 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012C78 315A 0038                  		move.w	(a2)+,$38(a0)
00012C7C 315A 0030                  		move.w	(a2)+,$30(a0)
00012C80 214A 003C                  		move.l	a2,$3C(a0)
00012C84 0241 000F                  		andi.w	#$F,d1
00012C88 E549                       		lsl.w	#2,d1
00012C8A 1141 0038                  		move.b	d1,$38(a0)
00012C8E 117C 0004 003A             		move.b	#4,$3A(a0)
00012C94 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012C98 6700                       		beq.s	loc_1244C
00012C9A 117C 0001 003B             		move.b	#1,$3B(a0)
00012CA0 4428 003A                  		neg.b	$3A(a0)
00012CA4 7200                       		moveq	#0,d1
00012CA6 1228 0038                  		move.b	$38(a0),d1
00012CAA D228 003A                  		add.b	$3A(a0),d1
00012CAE B228 0039                  		cmp.b	$39(a0),d1
00012CB2 6500                       		bcs.s	loc_12448
00012CB4 1001                       		move.b	d1,d0
00012CB6 7200                       		moveq	#0,d1
00012CB8 4A00                       		tst.b	d0
00012CBA 6A00                       		bpl.s	loc_12448
00012CBC 1228 0039                  		move.b	$39(a0),d1
00012CC0 5901                       		subq.b	#4,d1
00012CC2                            
00012CC2                            loc_12448:
00012CC2 1141 0038                  		move.b	d1,$38(a0)
00012CC6                            
00012CC6                            loc_1244C:
00012CC6 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012CCC 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012CD2 6100 0000                  		bsr.w	Obj63_ChangeDir
00012CD6 6000 0000                  		bra.w	loc_124B2
00012CDA                            ; ===========================================================================
00012CDA                            
00012CDA                            loc_12460:				; XREF: Obj63_Main
00012CDA 1140 002F                  		move.b	d0,$2F(a0)
00012CDE 0240 007F                  		andi.w	#$7F,d0
00012CE2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012CE6 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012CEC 6600 B1F6                  		bne.w	DeleteObject
00012CF0 D040                       		add.w	d0,d0
00012CF2 0240 001E                  		andi.w	#$1E,d0
00012CF6 0640 0070                  		addi.w	#$70,d0
00012CFA 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012D00 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012D04 321A                       		move.w	(a2)+,d1
00012D06 2248                       		movea.l	a0,a1
00012D08 6000                       		bra.s	Obj63_MakePtfms
00012D0A                            ; ===========================================================================
00012D0A                            
00012D0A                            Obj63_Loop:
00012D0A 6100 B622                  		bsr.w	SingleObjLoad
00012D0E 6600                       		bne.s	loc_124AA
00012D10                            
00012D10                            Obj63_MakePtfms:			; XREF: loc_12460
00012D10 12BC 0063                  		move.b	#$63,0(a1)
00012D14 335A 0008                  		move.w	(a2)+,8(a1)
00012D18 335A 000C                  		move.w	(a2)+,$C(a1)
00012D1C 301A                       		move.w	(a2)+,d0
00012D1E 1340 0028                  		move.b	d0,$28(a1)
00012D22                            
00012D22                            loc_124AA:
00012D22 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012D26                            
00012D26 588F                       		addq.l	#4,sp
00012D28 4E75                       		rts	
00012D2A                            ; ===========================================================================
00012D2A                            
00012D2A                            loc_124B2:				; XREF: Obj63_Index
00012D2A 7200                       		moveq	#0,d1
00012D2C 1228 0019                  		move.b	$19(a0),d1
00012D30 4EB9 0000 7AE2             		jsr	(PlatformObject).l
00012D36 6000 0000                  		bra.w	sub_12502
00012D3A                            ; ===========================================================================
00012D3A                            
00012D3A                            loc_124C2:				; XREF: Obj63_Index
00012D3A 7200                       		moveq	#0,d1
00012D3C 1228 0019                  		move.b	$19(a0),d1
00012D40 4EB9 0000 7C56             		jsr	(ExitPlatform).l
00012D46 3F28 0008                  		move.w	8(a0),-(sp)
00012D4A 6100 0000                  		bsr.w	sub_12502
00012D4E 341F                       		move.w	(sp)+,d2
00012D50 4EF9 0000 81C0             		jmp	(MvSonicOnPtfm2).l
00012D56                            ; ===========================================================================
00012D56                            
00012D56                            loc_124DE:				; XREF: Obj63_Index
00012D56 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012D5A 0240 0003                  		andi.w	#3,d0
00012D5E 6600                       		bne.s	loc_124FC
00012D60 7201                       		moveq	#1,d1
00012D62 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012D66 6700                       		beq.s	loc_124F2
00012D68 4401                       		neg.b	d1
00012D6A                            
00012D6A                            loc_124F2:
00012D6A D328 001A                  		add.b	d1,$1A(a0)
00012D6E 0228 0003 001A             		andi.b	#3,$1A(a0)
00012D74                            
00012D74                            loc_124FC:
00012D74 588F                       		addq.l	#4,sp
00012D76 6000 D1D8                  		bra.w	MarkObjGone
00012D7A                            
00012D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012D7A                            
00012D7A                            
00012D7A                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012D7A 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012D7E 6700                       		beq.s	loc_12520
00012D80 4A28 003B                  		tst.b	$3B(a0)
00012D84 6600                       		bne.s	loc_12520
00012D86 117C 0001 003B             		move.b	#1,$3B(a0)
00012D8C 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012D92 4428 003A                  		neg.b	$3A(a0)
00012D96 6000                       		bra.s	loc_12534
00012D98                            ; ===========================================================================
00012D98                            
00012D98                            loc_12520:
00012D98 3028 0008                  		move.w	8(a0),d0
00012D9C B068 0034                  		cmp.w	$34(a0),d0
00012DA0 6600                       		bne.s	loc_1256A
00012DA2 3028 000C                  		move.w	$C(a0),d0
00012DA6 B068 0036                  		cmp.w	$36(a0),d0
00012DAA 6600                       		bne.s	loc_1256A
00012DAC                            
00012DAC                            loc_12534:
00012DAC 7200                       		moveq	#0,d1
00012DAE 1228 0038                  		move.b	$38(a0),d1
00012DB2 D228 003A                  		add.b	$3A(a0),d1
00012DB6 B228 0039                  		cmp.b	$39(a0),d1
00012DBA 6500                       		bcs.s	loc_12552
00012DBC 1001                       		move.b	d1,d0
00012DBE 7200                       		moveq	#0,d1
00012DC0 4A00                       		tst.b	d0
00012DC2 6A00                       		bpl.s	loc_12552
00012DC4 1228 0039                  		move.b	$39(a0),d1
00012DC8 5901                       		subq.b	#4,d1
00012DCA                            
00012DCA                            loc_12552:
00012DCA 1141 0038                  		move.b	d1,$38(a0)
00012DCE 2268 003C                  		movea.l	$3C(a0),a1
00012DD2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012DD8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012DDE 6100 0000                  		bsr.w	Obj63_ChangeDir
00012DE2                            
00012DE2                            loc_1256A:
00012DE2 6100 B09E                  		bsr.w	SpeedToPos
00012DE6 4E75                       		rts	
00012DE8                            ; End of function sub_12502
00012DE8                            
00012DE8                            
00012DE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012DE8                            
00012DE8                            
00012DE8                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012DE8 7000                       		moveq	#0,d0
00012DEA 343C FF00                  		move.w	#-$100,d2
00012DEE 3028 0008                  		move.w	8(a0),d0
00012DF2 9068 0034                  		sub.w	$34(a0),d0
00012DF6 6400                       		bcc.s	loc_12584
00012DF8 4440                       		neg.w	d0
00012DFA 4442                       		neg.w	d2
00012DFC                            
00012DFC                            loc_12584:
00012DFC 7200                       		moveq	#0,d1
00012DFE 363C FF00                  		move.w	#-$100,d3
00012E02 3228 000C                  		move.w	$C(a0),d1
00012E06 9268 0036                  		sub.w	$36(a0),d1
00012E0A 6400                       		bcc.s	loc_12598
00012E0C 4441                       		neg.w	d1
00012E0E 4443                       		neg.w	d3
00012E10                            
00012E10                            loc_12598:
00012E10 B240                       		cmp.w	d0,d1
00012E12 6500                       		bcs.s	loc_125C2
00012E14 3028 0008                  		move.w	8(a0),d0
00012E18 9068 0034                  		sub.w	$34(a0),d0
00012E1C 6700                       		beq.s	loc_125AE
00012E1E 48C0                       		ext.l	d0
00012E20 E180                       		asl.l	#8,d0
00012E22 81C1                       		divs.w	d1,d0
00012E24 4440                       		neg.w	d0
00012E26                            
00012E26                            loc_125AE:
00012E26 3140 0010                  		move.w	d0,$10(a0)
00012E2A 3143 0012                  		move.w	d3,$12(a0)
00012E2E 4840                       		swap	d0
00012E30 3140 000A                  		move.w	d0,$A(a0)
00012E34 4268 000E                  		clr.w	$E(a0)
00012E38 4E75                       		rts	
00012E3A                            ; ===========================================================================
00012E3A                            
00012E3A                            loc_125C2:				; XREF: Obj63_ChangeDir
00012E3A 3228 000C                  		move.w	$C(a0),d1
00012E3E 9268 0036                  		sub.w	$36(a0),d1
00012E42 6700                       		beq.s	loc_125D4
00012E44 48C1                       		ext.l	d1
00012E46 E181                       		asl.l	#8,d1
00012E48 83C0                       		divs.w	d0,d1
00012E4A 4441                       		neg.w	d1
00012E4C                            
00012E4C                            loc_125D4:
00012E4C 3141 0012                  		move.w	d1,$12(a0)
00012E50 3142 0010                  		move.w	d2,$10(a0)
00012E54 4841                       		swap	d1
00012E56 3141 000E                  		move.w	d1,$E(a0)
00012E5A 4268 000A                  		clr.w	$A(a0)
00012E5E 4E75                       		rts	
00012E60                            ; End of function Obj63_ChangeDir
00012E60                            
00012E60                            ; ===========================================================================
00012E60 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012E62 0000                       		dc.w word_12610-Obj63_Data
00012E64 0000                       		dc.w word_12628-Obj63_Data
00012E66 0000                       		dc.w word_1263C-Obj63_Data
00012E68 0000                       		dc.w word_12650-Obj63_Data
00012E6A 0000                       		dc.w word_12668-Obj63_Data
00012E6C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012E7C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012E88 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012E98 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012EA0 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012EB4 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012EC8 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012EE0 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012EF4                            
00012EF4                            ; ---------------------------------------------------------------------------
00012EF4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012EF4                            ; ---------------------------------------------------------------------------
00012EF4                            Map_obj63:
00012EF4                            	include "_maps\obj63.asm"
00012EF4                            ; ---------------------------------------------------------------------------
00012EF4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012EF4                            ; ---------------------------------------------------------------------------
00012EF4 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012EF8 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012EFC 0000                       		dc.w byte_1269E-Map_obj63
00012EFE 01                         byte_12686:	dc.b 1
00012EFF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012F04 01                         byte_1268C:	dc.b 1
00012F05 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012F0A 01                         byte_12692:	dc.b 1
00012F0B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012F10 01                         byte_12698:	dc.b 1
00012F11 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012F16 01                         byte_1269E:	dc.b 1
00012F17 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012F1C                            		even
00012F1C                            		even
00012F1C                            
00012F1C                            ; ===========================================================================
00012F1C                            ; ---------------------------------------------------------------------------
00012F1C                            ; Object 64 - bubbles (LZ)
00012F1C                            ; ---------------------------------------------------------------------------
00012F1C                            
00012F1C                            Obj64:					; XREF: Obj_Index
00012F1C 7000                       		moveq	#0,d0
00012F1E 1028 0024                  		move.b	$24(a0),d0
00012F22 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012F26 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012F2A                            ; ===========================================================================
00012F2A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012F2C 0000                       		dc.w Obj64_Animate-Obj64_Index
00012F2E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012F30 0000                       		dc.w Obj64_Display2-Obj64_Index
00012F32 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012F34 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012F36                            ; ===========================================================================
00012F36                            
00012F36                            Obj64_Main:				; XREF: Obj64_Index
00012F36 5428 0024                  		addq.b	#2,$24(a0)
00012F3A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012F42 317C 8348 0002             		move.w	#$8348,2(a0)
00012F48 117C 0084 0001             		move.b	#$84,1(a0)
00012F4E 117C 0010 0019             		move.b	#$10,$19(a0)
00012F54 117C 0001 0018             		move.b	#1,$18(a0)
00012F5A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012F5E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012F60 5028 0024                  		addq.b	#8,$24(a0)
00012F64 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012F68 1140 0032                  		move.b	d0,$32(a0)
00012F6C 1140 0033                  		move.b	d0,$33(a0)
00012F70 117C 0006 001C             		move.b	#6,$1C(a0)
00012F76 6000 0000                  		bra.w	Obj64_BblMaker
00012F7A                            ; ===========================================================================
00012F7A                            
00012F7A                            Obj64_Bubble:				; XREF: Obj64_Main
00012F7A 1140 001C                  		move.b	d0,$1C(a0)
00012F7E 3168 0008 0030             		move.w	8(a0),$30(a0)
00012F84 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012F8A 4EB9 0000 2D10             		jsr	(RandomNumber).l
00012F90 1140 0026                  		move.b	d0,$26(a0)
00012F94                            
00012F94                            Obj64_Animate:				; XREF: Obj64_Index
00012F94 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012F9A 4EB9 0000 AF22             		jsr	AnimateSprite
00012FA0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012FA6 6600                       		bne.s	Obj64_ChkWater
00012FA8 117C 0001 002E             		move.b	#1,$2E(a0)
00012FAE                            
00012FAE                            Obj64_ChkWater:				; XREF: Obj64_Index
00012FAE 3038 F646                  		move.w	($FFFFF646).w,d0
00012FB2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012FB6 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012FB8                            
00012FB8                            Obj64_Burst:				; XREF: Obj64_Wobble
00012FB8 117C 0006 0024             		move.b	#6,$24(a0)
00012FBE 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012FC2 6000 0000                  		bra.w	Obj64_Display2
00012FC6                            ; ===========================================================================
00012FC6                            
00012FC6                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012FC6 1028 0026                  		move.b	$26(a0),d0
00012FCA 5228 0026                  		addq.b	#1,$26(a0)
00012FCE 0240 007F                  		andi.w	#$7F,d0
00012FD2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012FD8 1031 0000                  		move.b	(a1,d0.w),d0
00012FDC 4880                       		ext.w	d0
00012FDE D068 0030                  		add.w	$30(a0),d0
00012FE2 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012FE6 4A28 002E                  		tst.b	$2E(a0)
00012FEA 6700                       		beq.s	Obj64_Display
00012FEC 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012FF0 6700                       		beq.s	Obj64_Display	; if not, branch
00012FF2                            
00012FF2 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012FF6 303C 00AD                  		move.w	#$AD,d0
00012FFA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00013000 43F8 D000                  		lea	($FFFFD000).w,a1
00013004 4269 0010                  		clr.w	$10(a1)
00013008 4269 0012                  		clr.w	$12(a1)
0001300C 4269 0014                  		clr.w	$14(a1)
00013010 137C 0015 001C             		move.b	#$15,$1C(a1)
00013016 337C 0023 003E             		move.w	#$23,$3E(a1)
0001301C 137C 0000 003C             		move.b	#0,$3C(a1)
00013022 08A9 0005 0022             		bclr	#5,$22(a1)
00013028 08A9 0004 0022             		bclr	#4,$22(a1)
0001302E 0829 0002 0022             		btst	#2,$22(a1)
00013034 6700 FF82                  		beq.w	Obj64_Burst
00013038 08A9 0002 0022             		bclr	#2,$22(a1)
0001303E 137C 0013 0016             		move.b	#$13,$16(a1)
00013044 137C 0009 0017             		move.b	#9,$17(a1)
0001304A 5B69 000C                  		subq.w	#5,$C(a1)
0001304E 6000 FF68                  		bra.w	Obj64_Burst
00013052                            ; ===========================================================================
00013052                            
00013052                            Obj64_Display:				; XREF: Obj64_Wobble
00013052 6100 AE2E                  		bsr.w	SpeedToPos
00013056 4A28 0001                  		tst.b	1(a0)
0001305A 6A00                       		bpl.s	Obj64_Delete
0001305C 4EFA AE4A                  		jmp	DisplaySprite
00013060                            ; ===========================================================================
00013060                            
00013060                            Obj64_Delete:
00013060 4EFA AE82                  		jmp	DeleteObject
00013064                            ; ===========================================================================
00013064                            
00013064                            Obj64_Display2:				; XREF: Obj64_Index
00013064 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001306A 4EB9 0000 AF22             		jsr	AnimateSprite
00013070 4A28 0001                  		tst.b	1(a0)
00013074 6A00                       		bpl.s	Obj64_Delete2
00013076 4EFA AE30                  		jmp	DisplaySprite
0001307A                            ; ===========================================================================
0001307A                            
0001307A                            Obj64_Delete2:
0001307A 4EFA AE68                  		jmp	DeleteObject
0001307E                            ; ===========================================================================
0001307E                            
0001307E                            Obj64_Delete3:				; XREF: Obj64_Index
0001307E 6000 AE64                  		bra.w	DeleteObject
00013082                            ; ===========================================================================
00013082                            
00013082                            Obj64_BblMaker:				; XREF: Obj64_Index
00013082 4A68 0036                  		tst.w	$36(a0)
00013086 6600                       		bne.s	loc_12874
00013088 3038 F646                  		move.w	($FFFFF646).w,d0
0001308C B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013090 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013094 4A28 0001                  		tst.b	1(a0)
00013098 6A00 0000                  		bpl.w	Obj64_ChkDel
0001309C 5368 0038                  		subq.w	#1,$38(a0)
000130A0 6A00 0000                  		bpl.w	loc_12914
000130A4 317C 0001 0036             		move.w	#1,$36(a0)
000130AA                            
000130AA                            loc_1283A:
000130AA 4EB9 0000 2D10             		jsr	(RandomNumber).l
000130B0 3200                       		move.w	d0,d1
000130B2 0240 0007                  		andi.w	#7,d0
000130B6 0C40 0006                  		cmpi.w	#6,d0
000130BA 64EE                       		bcc.s	loc_1283A
000130BC                            
000130BC 1140 0034                  		move.b	d0,$34(a0)
000130C0 0241 000C                  		andi.w	#$C,d1
000130C4 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000130CA D2C1                       		adda.w	d1,a1
000130CC 2149 003C                  		move.l	a1,$3C(a0)
000130D0 5328 0032                  		subq.b	#1,$32(a0)
000130D4 6A00                       		bpl.s	loc_12872
000130D6 1168 0033 0032             		move.b	$33(a0),$32(a0)
000130DC 08E8 0007 0036             		bset	#7,$36(a0)
000130E2                            
000130E2                            loc_12872:
000130E2 6000                       		bra.s	loc_1287C
000130E4                            ; ===========================================================================
000130E4                            
000130E4                            loc_12874:				; XREF: Obj64_BblMaker
000130E4 5368 0038                  		subq.w	#1,$38(a0)
000130E8 6A00 0000                  		bpl.w	loc_12914
000130EC                            
000130EC                            loc_1287C:
000130EC 4EB9 0000 2D10             		jsr	(RandomNumber).l
000130F2 0240 001F                  		andi.w	#$1F,d0
000130F6 3140 0038                  		move.w	d0,$38(a0)
000130FA 6100 B232                  		bsr.w	SingleObjLoad
000130FE 6600                       		bne.s	loc_128F8
00013100 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00013104 3368 0008 0008             		move.w	8(a0),8(a1)
0001310A 4EB9 0000 2D10             		jsr	(RandomNumber).l
00013110 0240 000F                  		andi.w	#$F,d0
00013114 5140                       		subq.w	#8,d0
00013116 D169 0008                  		add.w	d0,8(a1)
0001311A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013120 7000                       		moveq	#0,d0
00013122 1028 0034                  		move.b	$34(a0),d0
00013126 2468 003C                  		movea.l	$3C(a0),a2
0001312A 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00013130 0828 0007 0036             		btst	#7,$36(a0)
00013136 6700                       		beq.s	loc_128F8
00013138 4EB9 0000 2D10             		jsr	(RandomNumber).l
0001313E 0240 0003                  		andi.w	#3,d0
00013142 6600                       		bne.s	loc_128E4
00013144 08E8 0006 0036             		bset	#6,$36(a0)
0001314A 6600                       		bne.s	loc_128F8
0001314C 137C 0002 0028             		move.b	#2,$28(a1)
00013152                            
00013152                            loc_128E4:
00013152 4A28 0034                  		tst.b	$34(a0)
00013156 6600                       		bne.s	loc_128F8
00013158 08E8 0006 0036             		bset	#6,$36(a0)
0001315E 6600                       		bne.s	loc_128F8
00013160 137C 0002 0028             		move.b	#2,$28(a1)
00013166                            
00013166                            loc_128F8:
00013166 5328 0034                  		subq.b	#1,$34(a0)
0001316A 6A00                       		bpl.s	loc_12914
0001316C 4EB9 0000 2D10             		jsr	(RandomNumber).l
00013172 0240 007F                  		andi.w	#$7F,d0
00013176 0640 0080                  		addi.w	#$80,d0
0001317A D168 0038                  		add.w	d0,$38(a0)
0001317E 4268 0036                  		clr.w	$36(a0)
00013182                            
00013182                            loc_12914:
00013182 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013188 4EB9 0000 AF22             		jsr	AnimateSprite
0001318E                            
0001318E                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001318E 3028 0008                  		move.w	8(a0),d0
00013192 0240 FF80                  		andi.w	#$FF80,d0
00013196 3238 F700                  		move.w	($FFFFF700).w,d1
0001319A 0441 0080                  		subi.w	#$80,d1
0001319E 0241 FF80                  		andi.w	#$FF80,d1
000131A2 9041                       		sub.w	d1,d0
000131A4 0C40 0280                  		cmpi.w	#$280,d0
000131A8 6200 AD3A                  		bhi.w	DeleteObject
000131AC 3038 F646                  		move.w	($FFFFF646).w,d0
000131B0 B068 000C                  		cmp.w	$C(a0),d0
000131B4 6500 ACF2                  		bcs.w	DisplaySprite
000131B8 4E75                       		rts	
000131BA                            ; ===========================================================================
000131BA                            ; bubble production sequence
000131BA                            
000131BA                            ; 0 = small bubble, 1 =	large bubble
000131BA                            
000131BA 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000131CC                            
000131CC                            ; ===========================================================================
000131CC                            
000131CC                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000131CC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000131D0 6B00                       		bmi.s	loc_12998
000131D2 43F8 D000                  		lea	($FFFFD000).w,a1
000131D6 3029 0008                  		move.w	8(a1),d0
000131DA 3228 0008                  		move.w	8(a0),d1
000131DE 0441 0010                  		subi.w	#$10,d1
000131E2 B240                       		cmp.w	d0,d1
000131E4 6400                       		bcc.s	loc_12998
000131E6 0641 0020                  		addi.w	#$20,d1
000131EA B240                       		cmp.w	d0,d1
000131EC 6500                       		bcs.s	loc_12998
000131EE 3029 000C                  		move.w	$C(a1),d0
000131F2 3228 000C                  		move.w	$C(a0),d1
000131F6 B240                       		cmp.w	d0,d1
000131F8 6400                       		bcc.s	loc_12998
000131FA 0641 0010                  		addi.w	#$10,d1
000131FE B240                       		cmp.w	d0,d1
00013200 6500                       		bcs.s	loc_12998
00013202 7001                       		moveq	#1,d0
00013204 4E75                       		rts	
00013206                            ; ===========================================================================
00013206                            
00013206                            loc_12998:
00013206 7000                       		moveq	#0,d0
00013208 4E75                       		rts	
0001320A                            ; ===========================================================================
0001320A                            Ani_obj64:
0001320A                            	include "_anim\obj64.asm"
0001320A                            ; ---------------------------------------------------------------------------
0001320A                            ; Animation script - bubbles (LZ)
0001320A                            ; ---------------------------------------------------------------------------
0001320A 0000                       		dc.w byte_129AA-Ani_obj64
0001320C 0000                       		dc.w byte_129B0-Ani_obj64
0001320E 0000                       		dc.w byte_129B6-Ani_obj64
00013210 0000                       		dc.w byte_129BE-Ani_obj64
00013212 0000                       		dc.w byte_129BE-Ani_obj64
00013214 0000                       		dc.w byte_129C0-Ani_obj64
00013216 0000                       		dc.w byte_129C6-Ani_obj64
00013218 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001321E 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013224 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001322C 04FC                       byte_129BE:	dc.b 4,	$FC
0001322E 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013234 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001323A 00                         		even
0001323A 00                         		even
0001323A                            
0001323A                            ; ---------------------------------------------------------------------------
0001323A                            ; Sprite mappings - bubbles (LZ)
0001323A                            ; ---------------------------------------------------------------------------
0001323A                            Map_obj64:
0001323A                            	include "_maps\obj64.asm"
0001323A                            ; ---------------------------------------------------------------------------
0001323A                            ; Sprite mappings - bubbles (LZ)
0001323A                            ; ---------------------------------------------------------------------------
0001323A 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001323E 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013242 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013246 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
0001324A 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001324E 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013252 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013256 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
0001325A 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001325E 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013262 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013266 0000                       		dc.w byte_12A9C-Map_obj64
00013268 01                         byte_129FA:	dc.b 1
00013269 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001326E 01                         byte_12A00:	dc.b 1
0001326F FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013274 01                         byte_12A06:	dc.b 1
00013275 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
0001327A 01                         byte_12A0C:	dc.b 1
0001327B F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013280 01                         byte_12A12:	dc.b 1
00013281 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013286 01                         byte_12A18:	dc.b 1
00013287 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001328C 01                         byte_12A1E:	dc.b 1
0001328D F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013292 04                         byte_12A24:	dc.b 4
00013293 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013298 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001329D 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000132A2 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000132A7 04                         byte_12A39:	dc.b 4
000132A8 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
000132AD F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
000132B2 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
000132B7 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
000132BC 01                         byte_12A4E:	dc.b 1
000132BD F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
000132C2 01                         byte_12A54:	dc.b 1
000132C3 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000132C8 01                         byte_12A5A:	dc.b 1
000132C9 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
000132CE 01                         byte_12A60:	dc.b 1
000132CF F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000132D4 01                         byte_12A66:	dc.b 1
000132D5 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000132DA 01                         byte_12A6C:	dc.b 1
000132DB F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000132E0 01                         byte_12A72:	dc.b 1
000132E1 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000132E6 01                         byte_12A78:	dc.b 1
000132E7 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000132EC 01                         byte_12A7E:	dc.b 1
000132ED F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000132F2 01                         byte_12A84:	dc.b 1
000132F3 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000132F8 01                         byte_12A8A:	dc.b 1
000132F9 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000132FE 01                         byte_12A90:	dc.b 1
000132FF F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013304 01                         byte_12A96:	dc.b 1
00013305 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001330A 00                         byte_12A9C:	dc.b 0
0001330C 00                         		even
0001330C 00                         		even
0001330C                            
0001330C                            ; ===========================================================================
0001330C                            ; ---------------------------------------------------------------------------
0001330C                            ; Object 65 - waterfalls (LZ)
0001330C                            ; ---------------------------------------------------------------------------
0001330C                            
0001330C                            Obj65:					; XREF: Obj_Index
0001330C 7000                       		moveq	#0,d0
0001330E 1028 0024                  		move.b	$24(a0),d0
00013312 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013316 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001331A                            ; ===========================================================================
0001331A 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001331C 0000                       		dc.w Obj65_Animate-Obj65_Index
0001331E 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013320 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013322 0000                       		dc.w loc_12B36-Obj65_Index
00013324                            ; ===========================================================================
00013324                            
00013324                            Obj65_Main:				; XREF: Obj65_Index
00013324 5828 0024                  		addq.b	#4,$24(a0)
00013328 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013330 317C 4259 0002             		move.w	#$4259,2(a0)
00013336 0028 0004 0001             		ori.b	#4,1(a0)
0001333C 117C 0018 0019             		move.b	#$18,$19(a0)
00013342 117C 0001 0018             		move.b	#1,$18(a0)
00013348 1028 0028                  		move.b	$28(a0),d0	; get object type
0001334C 6A00                       		bpl.s	loc_12AE6
0001334E 08E8 0007 0002             		bset	#7,2(a0)
00013354                            
00013354                            loc_12AE6:
00013354 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013358 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
0001335C 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013360 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013362 4228 0018                  		clr.b	$18(a0)
00013366 5528 0024                  		subq.b	#2,$24(a0)
0001336A 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013370 6700                       		beq.s	loc_12B0A	; if not, branch
00013372 117C 0006 0024             		move.b	#6,$24(a0)
00013378                            
00013378                            loc_12B0A:
00013378 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001337E 6700                       		beq.s	Obj65_Animate	; if not, branch
00013380 117C 0008 0024             		move.b	#8,$24(a0)
00013386                            
00013386                            Obj65_Animate:				; XREF: Obj65_Index
00013386 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001338C 4EB9 0000 AF22             		jsr	AnimateSprite
00013392                            
00013392                            Obj65_ChkDel:				; XREF: Obj65_Index
00013392 6000 CBBC                  		bra.w	MarkObjGone
00013396                            ; ===========================================================================
00013396                            
00013396                            Obj65_FixHeight:			; XREF: Obj65_Index
00013396 3038 F646                  		move.w	($FFFFF646).w,d0
0001339A 0440 0010                  		subi.w	#$10,d0
0001339E 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000133A2 60E2                       		bra.s	Obj65_Animate
000133A4                            ; ===========================================================================
000133A4                            
000133A4                            loc_12B36:				; XREF: Obj65_Index
000133A4 08A8 0007 0002             		bclr	#7,2(a0)
000133AA 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000133B0 6600                       		bne.s	Obj65_Animate2
000133B2 08E8 0007 0002             		bset	#7,2(a0)
000133B8                            
000133B8                            Obj65_Animate2:
000133B8 60CC                       		bra.s	Obj65_Animate
000133BA                            ; ===========================================================================
000133BA                            Ani_obj65:
000133BA                            	include "_anim\obj65.asm"
000133BA                            ; ---------------------------------------------------------------------------
000133BA                            ; Animation script - waterfall (LZ)
000133BA                            ; ---------------------------------------------------------------------------
000133BA 0000                       		dc.w byte_12B4E-Ani_obj65
000133BC 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000133C2 00                         		even
000133C2 00                         		even
000133C2                            
000133C2                            ; ---------------------------------------------------------------------------
000133C2                            ; Sprite mappings - waterfalls (LZ)
000133C2                            ; ---------------------------------------------------------------------------
000133C2                            Map_obj65:
000133C2                            	include "_maps\obj65.asm"
000133C2                            ; ---------------------------------------------------------------------------
000133C2                            ; Sprite mappings - waterfalls (LZ)
000133C2                            ; ---------------------------------------------------------------------------
000133C2 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000133C6 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000133CA 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000133CE 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000133D2 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000133D6 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000133DA 01                         byte_12B6C:	dc.b 1
000133DB F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000133E0 02                         byte_12B72:	dc.b 2
000133E1 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000133E6 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000133EB 02                         byte_12B7D:	dc.b 2
000133EC F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000133F1 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000133F6 01                         byte_12B88:	dc.b 1
000133F7 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000133FC 02                         byte_12B8E:	dc.b 2
000133FD F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013402 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013407 01                         byte_12B99:	dc.b 1
00013408 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001340D 01                         byte_12B9F:	dc.b 1
0001340E F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013413 01                         byte_12BA5:	dc.b 1
00013414 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013419 02                         byte_12BAB:	dc.b 2
0001341A F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001341F 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013424 02                         byte_12BB6:	dc.b 2
00013425 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001342A F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001342F 02                         byte_12BC1:	dc.b 2
00013430 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013435 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001343A 02                         byte_12BCC:	dc.b 2
0001343B F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013440 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013446 00                         		even
00013446 00                         		even
00013446                            
00013446                            ; ===========================================================================
00013446                            ; ---------------------------------------------------------------------------
00013446                            ; Object 01 - Sonic
00013446                            ; ---------------------------------------------------------------------------
00013446                            
00013446                            Obj01:					; XREF: Obj_Index
00013446 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001344A 6700                       		beq.s	Obj01_Normal	; if not, branch
0001344C 4EF9 0000 0000             		jmp	DebugMode
00013452                            ; ===========================================================================
00013452                            
00013452                            Obj01_Normal:
00013452 7000                       		moveq	#0,d0
00013454 1028 0024                  		move.b	$24(a0),d0
00013458 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001345C 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013460                            ; ===========================================================================
00013460 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013462 0000                       		dc.w Obj01_Control-Obj01_Index
00013464 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013466 0000                       		dc.w Obj01_Death-Obj01_Index
00013468 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001346A                            ; ===========================================================================
0001346A                            
0001346A                            Player_Maps:
0001346A 0000 0000                  	dc.l	Map_Sonic
0001346E 0000 0000                  	dc.l	Map_Sonic ; gronic
00013472 0000 0000                  	dc.l	Map_Sonic ; anakama
00013476 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
0001347A                            	; insert player mapping here
0001347A                            	
0001347A                            Obj01_Main:				; XREF: Obj01_Index
0001347A 5428 0024                  		addq.b	#2,$24(a0)
0001347E 117C 0013 0016             		move.b	#$13,$16(a0)
00013484 117C 0009 0017             		move.b	#9,$17(a0)
0001348A                            		
0001348A 7000                       		moveq	#0,d0
0001348C 1038 FFE8                  		move.b	(v_character),d0
00013490 E548                       		lsl.w	#2,d0
00013492 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013496 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
0001349C                            		
0001349C 317C 0780 0002             		move.w	#$780,2(a0)
000134A2 117C 0002 0018             		move.b	#2,$18(a0)
000134A8 117C 0018 0019             		move.b	#$18,$19(a0)
000134AE 117C 0004 0001             		move.b	#4,1(a0)
000134B4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000134BA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000134C0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000134C6                            
000134C6                            Obj01_Control:				; XREF: Obj01_Index
000134C6 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000134CA 6700                       		beq.s	loc_12C58	; if not, branch
000134CC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000134D2 6700                       		beq.s	loc_12C58	; if not, branch
000134D4 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000134DA 4238 F7CC                  		clr.b	($FFFFF7CC).w
000134DE 4E75                       		rts	
000134E0                            ; ===========================================================================
000134E0                            
000134E0                            loc_12C58:
000134E0 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000134E4 6600                       		bne.s	loc_12C64	; if yes, branch
000134E6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000134EC                            
000134EC                            loc_12C64:
000134EC 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000134F2 6600                       		bne.s	loc_12C7E	; if yes, branch
000134F4 7000                       		moveq	#0,d0
000134F6 1028 0022                  		move.b	$22(a0),d0
000134FA 0240 0006                  		andi.w	#6,d0
000134FE 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013502 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013506                            
00013506                            loc_12C7E:
00013506 6100                       		bsr.s	Sonic_Display
00013508 6100 0000                  		bsr.w	Sonic_RecordPos
0001350C 6100 0000                  		bsr.w	Sonic_Water
00013510 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013516 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001351C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013520 6700                       		beq.s	loc_12CA6
00013522 4A28 001C                  		tst.b	$1C(a0)
00013526 6600                       		bne.s	loc_12CA6
00013528 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001352E                            
0001352E                            loc_12CA6:
0001352E 6100 0000                  		bsr.w	Sonic_Animate
00013532 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013536 6B00                       		bmi.s	loc_12CB6
00013538 4EB9 0000 0000             		jsr	TouchResponse
0001353E                            
0001353E                            loc_12CB6:
0001353E 6100 0000                  		bsr.w	Sonic_Loops
00013542 6100 0000                  		bsr.w	LoadSonicDynPLC
00013546 4E75                       		rts	
00013548                            ; ===========================================================================
00013548 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001354A 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001354C 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001354E 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013550                            ; ---------------------------------------------------------------------------
00013550                            ; Music	to play	after invincibility wears off
00013550                            ; ---------------------------------------------------------------------------
00013550                            ; ===========================================================================
00013550                            
00013550                            Sonic_Display:				; XREF: loc_12C7E
00013550 3028 0030                  		move.w	$30(a0),d0
00013554 6700                       		beq.s	Obj01_Display
00013556 5368 0030                  		subq.w	#1,$30(a0)
0001355A E648                       		lsr.w	#3,d0
0001355C 6400                       		bcc.s	Obj01_ChkInvin
0001355E                            
0001355E                            Obj01_Display:
0001355E 4EBA A948                  		jsr	DisplaySprite
00013562                            
00013562                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013562                             
00013562                            Obj01_ChkInvin:
00013562 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013566 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
0001356A 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001356E 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013572 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013576 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001357A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001357E 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013582 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013588 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001358C 7000                       		moveq	#0,d0
0001358E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013592                             
00013592 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013598 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001359A 43F9 0000 3CBC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000135A0 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000135A2                             
000135A2                            Obj01_GetBgm2:
000135A2 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000135A8 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
000135AA 43F9 0000 3CC4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000135B0 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000135B2                             
000135B2                            Obj01_GetBgm3:
000135B2 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000135B8 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
000135BA 43F9 0000 3CCA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
000135C0 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000135C2                             
000135C2                            Obj01_GetBgm4:
000135C2 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000135C8 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
000135CA 43F9 0000 3CD0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000135D0                             
000135D0                            Obj01_PlayMusic:
000135D0 1031 0000                  		move.b	(a1,d0.w),d0
000135D4 4EB9 0000 15CC             		jsr	(PlaySound).l	; play normal music
000135DA                             
000135DA                            ; NineKode ends here.
000135DA                            
000135DA                            Obj01_RmvInvin:
000135DA 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000135E0                            
000135E0                            Obj01_ChkShoes:
000135E0 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000135E4 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000135E6 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000135EA 6700                       		beq.s	Obj01_ExitChk
000135EC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000135F0 6600                       		bne.s	Obj01_ExitChk
000135F2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000135F8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000135FE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013604 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
0001360A 303C 00E3                  		move.w	#$E3,d0
0001360E 4EF9 0000 15CC             		jmp	(PlaySound).l	; run music at normal speed
00013614                            ; ===========================================================================
00013614                            
00013614                            Obj01_ExitChk:
00013614 4E75                       		rts	
00013616                            
00013616                            ; ---------------------------------------------------------------------------
00013616                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013616                            ; ---------------------------------------------------------------------------
00013616                            
00013616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013616                            
00013616                            
00013616                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013616 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001361A 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001361E 43F1 0000                  		lea	(a1,d0.w),a1
00013622 32E8 0008                  		move.w	8(a0),(a1)+
00013626 32E8 000C                  		move.w	$C(a0),(a1)+
0001362A 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
0001362E 4E75                       		rts	
00013630                            ; End of function Sonic_RecordPos
00013630                            
00013630                            ; ---------------------------------------------------------------------------
00013630                            ; Subroutine for Sonic when he's underwater
00013630                            ; ---------------------------------------------------------------------------
00013630                            
00013630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013630                            
00013630                            
00013630                            Sonic_Water:				; XREF: loc_12C7E
00013630 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013636 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013638                            
00013638                            locret_12D80:
00013638 4E75                       		rts	
0001363A                            ; ===========================================================================
0001363A                            
0001363A                            Obj01_InWater:
0001363A 3038 F646                  		move.w	($FFFFF646).w,d0
0001363E B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013642 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013644 08E8 0006 0022             		bset	#6,$22(a0)
0001364A 66EC                       		bne.s	locret_12D80
0001364C 6100 0000                  		bsr.w	ResumeMusic
00013650 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013656 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001365C 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013662 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013668 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001366E E0E8 0010                  		asr	$10(a0)
00013672 E0E8 0012                  		asr	$12(a0)
00013676 E0E8 0012                  		asr	$12(a0)
0001367A 67BC                       		beq.s	locret_12D80
0001367C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013682 303C 00AA                  		move.w	#$AA,d0
00013686 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play splash sound
0001368C                            ; ===========================================================================
0001368C                            
0001368C                            Obj01_OutWater:
0001368C 08A8 0006 0022             		bclr	#6,$22(a0)
00013692 67A4                       		beq.s	locret_12D80
00013694 6100 0000                  		bsr.w	ResumeMusic
00013698 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001369E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000136A4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000136AA E1E8 0012                  		asl	$12(a0)
000136AE 6700 FF88                  		beq.w	locret_12D80
000136B2 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000136B8 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000136BE 6E00                       		bgt.s	loc_12E0E
000136C0 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000136C6                            
000136C6                            loc_12E0E:
000136C6 303C 00AA                  		move.w	#$AA,d0
000136CA 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play splash sound
000136D0                            ; End of function Sonic_Water
000136D0                            
000136D0                            ; ===========================================================================
000136D0                            ; ---------------------------------------------------------------------------
000136D0                            ; Modes	for controlling	Sonic
000136D0                            ; ---------------------------------------------------------------------------
000136D0                            
000136D0                            Obj01_MdNormal:				; XREF: Obj01_Modes
000136D0 6100 0000                  		bsr.w	Sonic_Jump
000136D4 6100 0000                  		bsr.w	Sonic_SlopeResist
000136D8 6100 0000                  		bsr.w	Sonic_Move
000136DC 6100 0000                  		bsr.w	Sonic_Roll
000136E0 6100 0000                  		bsr.w	Sonic_LevelBound
000136E4 4EBA A79C                  		jsr	SpeedToPos
000136E8 6100 0000                  		bsr.w	Sonic_AnglePos
000136EC 6100 0000                  		bsr.w	Sonic_SlopeRepel
000136F0 4E75                       		rts	
000136F2                            ; ===========================================================================
000136F2                            
000136F2                            Obj01_MdJump:				; XREF: Obj01_Modes
000136F2 6100 0000                  		bsr.w	Sonic_JumpHeight
000136F6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000136FA 6100 0000                  		bsr.w	Sonic_LevelBound
000136FE 4EBA A710                  		jsr	ObjectFall
00013702 0828 0006 0022             		btst	#6,$22(a0)
00013708 6700                       		beq.s	loc_12E5C
0001370A 0468 0028 0012             		subi.w	#$28,$12(a0)
00013710                            
00013710                            loc_12E5C:
00013710 6100 0000                  		bsr.w	Sonic_JumpAngle
00013714 6100 0000                  		bsr.w	Sonic_Floor
00013718 4E75                       		rts	
0001371A                            ; ===========================================================================
0001371A                            
0001371A                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001371A 6100 0000                  		bsr.w	Sonic_Jump
0001371E 6100 0000                  		bsr.w	Sonic_RollRepel
00013722 6100 0000                  		bsr.w	Sonic_RollSpeed
00013726 6100 0000                  		bsr.w	Sonic_LevelBound
0001372A 4EBA A756                  		jsr	SpeedToPos
0001372E 6100 0000                  		bsr.w	Sonic_AnglePos
00013732 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013736 4E75                       		rts	
00013738                            ; ===========================================================================
00013738                            
00013738                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013738 6100 0000                  		bsr.w	Sonic_JumpHeight
0001373C 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013740 6100 0000                  		bsr.w	Sonic_LevelBound
00013744 6100 0000                  		bsr.w	Sonic_AirUnroll
00013748 4EBA A6C6                  		jsr	ObjectFall
0001374C 0828 0006 0022             		btst	#6,$22(a0)
00013752 6700                       		beq.s	loc_12EA6
00013754 0468 0028 0012             		subi.w	#$28,$12(a0)
0001375A                            
0001375A                            loc_12EA6:
0001375A 6100 0000                  		bsr.w	Sonic_JumpAngle
0001375E 6100 0000                  		bsr.w	Sonic_Floor
00013762 4E75                       		rts	
00013764                            ; ---------------------------------------------------------------------------
00013764                            ; Subroutine to	make Sonic walk/run
00013764                            ; ---------------------------------------------------------------------------
00013764                            
00013764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013764                            
00013764                            
00013764                            Sonic_Move:				; XREF: Obj01_MdNormal
00013764 3C38 F760                  		move.w	($FFFFF760).w,d6
00013768 3A38 F762                  		move.w	($FFFFF762).w,d5
0001376C 3838 F764                  		move.w	($FFFFF764).w,d4
00013770 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013774 6600 0000                  		bne.w	loc_12FEE
00013778 4A68 003E                  		tst.w	$3E(a0)
0001377C 6600 0000                  		bne.w	Obj01_ResetScr
00013780 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013786 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013788 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001378E 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013790 6100 0000                  		bsr.w	Sonic_MoveLeft
00013794                            
00013794                            Obj01_NotLeft:
00013794 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001379A 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001379C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000137A2 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000137A4 6100 0000                  		bsr.w	Sonic_MoveLeft
000137A8 6000                       		bra.s	Obj01_NotRight
000137AA                            
000137AA                            Obj01_MoveRight:
000137AA 6100 0000                  		bsr.w	Sonic_MoveRight
000137AE                            
000137AE                            Obj01_NotRight:
000137AE 1028 0026                  		move.b	$26(a0),d0
000137B2 0600 0020                  		addi.b	#$20,d0
000137B6 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000137BA 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000137BE 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000137C2 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000137C6 08A8 0005 0022             		bclr	#5,$22(a0)
000137CC 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000137D2 0828 0003 0022             		btst	#3,$22(a0)
000137D8 6700                       		beq.s	Sonic_Balance
000137DA 7000                       		moveq	#0,d0
000137DC 1028 003D                  		move.b	$3D(a0),d0
000137E0 ED48                       		lsl.w	#6,d0
000137E2 43F8 D000                  		lea	($FFFFD000).w,a1
000137E6 43F1 0000                  		lea	(a1,d0.w),a1
000137EA 4A29 0022                  		tst.b	$22(a1)
000137EE 6B00                       		bmi.s	Sonic_LookUp
000137F0 7200                       		moveq	#0,d1
000137F2 1229 0019                  		move.b	$19(a1),d1
000137F6 3401                       		move.w	d1,d2
000137F8 D442                       		add.w	d2,d2
000137FA 5942                       		subq.w	#4,d2
000137FC D268 0008                  		add.w	8(a0),d1
00013800 9269 0008                  		sub.w	8(a1),d1
00013804 0C41 0004                  		cmpi.w	#4,d1
00013808 6D00                       		blt.s	loc_12F6A
0001380A B242                       		cmp.w	d2,d1
0001380C 6C00                       		bge.s	loc_12F5A
0001380E 6000                       		bra.s	Sonic_LookUp
00013810                            ; ===========================================================================
00013810                            
00013810                            Sonic_Balance:
00013810 4EB9 0000 0000             		jsr	ObjHitFloor
00013816 0C41 000C                  		cmpi.w	#$C,d1
0001381A 6D00                       		blt.s	Sonic_LookUp
0001381C 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013822 6600                       		bne.s	loc_12F62
00013824                            
00013824                            loc_12F5A:
00013824 08A8 0000 0022             		bclr	#0,$22(a0)
0001382A 6000                       		bra.s	loc_12F70
0001382C                            ; ===========================================================================
0001382C                            
0001382C                            loc_12F62:
0001382C 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013832 6600                       		bne.s	Sonic_LookUp
00013834                            
00013834                            loc_12F6A:
00013834 08E8 0000 0022             		bset	#0,$22(a0)
0001383A                            
0001383A                            loc_12F70:
0001383A 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013840 6000                       		bra.s	Obj01_ResetScr
00013842                            ; ===========================================================================
00013842                            
00013842                            Sonic_LookUp:
00013842 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013848 6700                       		beq.s	Sonic_Duck	; if not, branch
0001384A 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013850 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013856 6700                       		beq.s	loc_12FC2
00013858 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001385C 6000                       		bra.s	loc_12FC2
0001385E                            ; ===========================================================================
0001385E                            
0001385E                            Sonic_Duck:
0001385E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013864 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013866 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001386C 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013872 6700                       		beq.s	loc_12FC2
00013874 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013878 6000                       		bra.s	loc_12FC2
0001387A                            ; ===========================================================================
0001387A                            
0001387A                            Obj01_ResetScr:
0001387A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013880 6700                       		beq.s	loc_12FC2	; if yes, branch
00013882 6400                       		bcc.s	loc_12FBE
00013884 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013888                            
00013888                            loc_12FBE:
00013888 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001388C                            
0001388C                            loc_12FC2:
0001388C 1038 F602                  		move.b	($FFFFF602).w,d0
00013890 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013894 6600                       		bne.s	loc_12FEE	; if yes, branch
00013896 3028 0014                  		move.w	$14(a0),d0
0001389A 6700                       		beq.s	loc_12FEE
0001389C 6B00                       		bmi.s	loc_12FE2
0001389E 9045                       		sub.w	d5,d0
000138A0 6400                       		bcc.s	loc_12FDC
000138A2 303C 0000                  		move.w	#0,d0
000138A6                            
000138A6                            loc_12FDC:
000138A6 3140 0014                  		move.w	d0,$14(a0)
000138AA 6000                       		bra.s	loc_12FEE
000138AC                            ; ===========================================================================
000138AC                            
000138AC                            loc_12FE2:
000138AC D045                       		add.w	d5,d0
000138AE 6400                       		bcc.s	loc_12FEA
000138B0 303C 0000                  		move.w	#0,d0
000138B4                            
000138B4                            loc_12FEA:
000138B4 3140 0014                  		move.w	d0,$14(a0)
000138B8                            
000138B8                            loc_12FEE:
000138B8 1028 0026                  		move.b	$26(a0),d0
000138BC 4EB9 0000 2D36             		jsr	(CalcSine).l
000138C2 C3E8 0014                  		muls.w	$14(a0),d1
000138C6 E081                       		asr.l	#8,d1
000138C8 3141 0010                  		move.w	d1,$10(a0)
000138CC C1E8 0014                  		muls.w	$14(a0),d0
000138D0 E080                       		asr.l	#8,d0
000138D2 3140 0012                  		move.w	d0,$12(a0)
000138D6                            
000138D6                            loc_1300C:
000138D6 1028 0026                  		move.b	$26(a0),d0
000138DA 0600 0040                  		addi.b	#$40,d0
000138DE 6B00                       		bmi.s	locret_1307C
000138E0 123C 0040                  		move.b	#$40,d1
000138E4 4A68 0014                  		tst.w	$14(a0)
000138E8 6700                       		beq.s	locret_1307C
000138EA 6B00                       		bmi.s	loc_13024
000138EC 4441                       		neg.w	d1
000138EE                            
000138EE                            loc_13024:
000138EE 1028 0026                  		move.b	$26(a0),d0
000138F2 D001                       		add.b	d1,d0
000138F4 3F00                       		move.w	d0,-(sp)
000138F6 6100 0000                  		bsr.w	Sonic_WalkSpeed
000138FA 301F                       		move.w	(sp)+,d0
000138FC 4A41                       		tst.w	d1
000138FE 6A00                       		bpl.s	locret_1307C
00013900 E141                       		asl.w	#8,d1
00013902 0600 0020                  		addi.b	#$20,d0
00013906 0200 00C0                  		andi.b	#$C0,d0
0001390A 6700                       		beq.s	loc_13078
0001390C 0C00 0040                  		cmpi.b	#$40,d0
00013910 6700                       		beq.s	loc_13066
00013912 0C00 0080                  		cmpi.b	#$80,d0
00013916 6700                       		beq.s	loc_13060
00013918 D368 0010                  		add.w	d1,$10(a0)
0001391C 08E8 0005 0022             		bset	#5,$22(a0)
00013922 317C 0000 0014             		move.w	#0,$14(a0)
00013928 4E75                       		rts	
0001392A                            ; ===========================================================================
0001392A                            
0001392A                            loc_13060:
0001392A 9368 0012                  		sub.w	d1,$12(a0)
0001392E 4E75                       		rts	
00013930                            ; ===========================================================================
00013930                            
00013930                            loc_13066:
00013930 9368 0010                  		sub.w	d1,$10(a0)
00013934 08E8 0005 0022             		bset	#5,$22(a0)
0001393A 317C 0000 0014             		move.w	#0,$14(a0)
00013940 4E75                       		rts	
00013942                            ; ===========================================================================
00013942                            
00013942                            loc_13078:
00013942 D368 0012                  		add.w	d1,$12(a0)
00013946                            
00013946                            locret_1307C:
00013946 4E75                       		rts	
00013948                            ; End of function Sonic_Move
00013948                            
00013948                            
00013948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013948                            
00013948                            
00013948                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013948 3028 0014                  		move.w	$14(a0),d0
0001394C 6700                       		beq.s	loc_13086
0001394E 6A00                       		bpl.s	loc_130B2
00013950                            
00013950                            loc_13086:
00013950 08E8 0000 0022             		bset	#0,$22(a0)
00013956 6600                       		bne.s	loc_1309A
00013958 08A8 0005 0022             		bclr	#5,$22(a0)
0001395E 117C 0001 001D             		move.b	#1,$1D(a0)
00013964                            
00013964                            loc_1309A:
00013964 9045                       		sub.w	d5,d0
00013966 3206                       		move.w	d6,d1
00013968 4441                       		neg.w	d1
0001396A B041                       		cmp.w	d1,d0
0001396C 6E00                       		bgt.s	loc_130A6
0001396E 3001                       		move.w	d1,d0
00013970                            
00013970                            loc_130A6:
00013970 3140 0014                  		move.w	d0,$14(a0)
00013974 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001397A 4E75                       		rts	
0001397C                            ; ===========================================================================
0001397C                            
0001397C                            loc_130B2:				; XREF: Sonic_MoveLeft
0001397C 9044                       		sub.w	d4,d0
0001397E 6400                       		bcc.s	loc_130BA
00013980 303C FF80                  		move.w	#-$80,d0
00013984                            
00013984                            loc_130BA:
00013984 3140 0014                  		move.w	d0,$14(a0)
00013988 1028 0026                  		move.b	$26(a0),d0
0001398C 0600 0020                  		addi.b	#$20,d0
00013990 0200 00C0                  		andi.b	#$C0,d0
00013994 6600                       		bne.s	locret_130E8
00013996 0C40 0400                  		cmpi.w	#$400,d0
0001399A 6D00                       		blt.s	locret_130E8
0001399C 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000139A2 08A8 0000 0022             		bclr	#0,$22(a0)
000139A8 303C 00A4                  		move.w	#$A4,d0
000139AC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stopping sound
000139B2                            
000139B2                            locret_130E8:
000139B2 4E75                       		rts	
000139B4                            ; End of function Sonic_MoveLeft
000139B4                            
000139B4                            
000139B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139B4                            
000139B4                            
000139B4                            Sonic_MoveRight:			; XREF: Sonic_Move
000139B4 3028 0014                  		move.w	$14(a0),d0
000139B8 6B00                       		bmi.s	loc_13118
000139BA 08A8 0000 0022             		bclr	#0,$22(a0)
000139C0 6700                       		beq.s	loc_13104
000139C2 08A8 0005 0022             		bclr	#5,$22(a0)
000139C8 117C 0001 001D             		move.b	#1,$1D(a0)
000139CE                            
000139CE                            loc_13104:
000139CE D045                       		add.w	d5,d0
000139D0 B046                       		cmp.w	d6,d0
000139D2 6D00                       		blt.s	loc_1310C
000139D4 3006                       		move.w	d6,d0
000139D6                            
000139D6                            loc_1310C:
000139D6 3140 0014                  		move.w	d0,$14(a0)
000139DA 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000139E0 4E75                       		rts	
000139E2                            ; ===========================================================================
000139E2                            
000139E2                            loc_13118:				; XREF: Sonic_MoveRight
000139E2 D044                       		add.w	d4,d0
000139E4 6400                       		bcc.s	loc_13120
000139E6 303C 0080                  		move.w	#$80,d0
000139EA                            
000139EA                            loc_13120:
000139EA 3140 0014                  		move.w	d0,$14(a0)
000139EE 1028 0026                  		move.b	$26(a0),d0
000139F2 0600 0020                  		addi.b	#$20,d0
000139F6 0200 00C0                  		andi.b	#$C0,d0
000139FA 6600                       		bne.s	locret_1314E
000139FC 0C40 FC00                  		cmpi.w	#-$400,d0
00013A00 6E00                       		bgt.s	locret_1314E
00013A02 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013A08 08E8 0000 0022             		bset	#0,$22(a0)
00013A0E 303C 00A4                  		move.w	#$A4,d0
00013A12 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stopping sound
00013A18                            
00013A18                            locret_1314E:
00013A18 4E75                       		rts	
00013A1A                            ; End of function Sonic_MoveRight
00013A1A                            
00013A1A                            ; ---------------------------------------------------------------------------
00013A1A                            ; Subroutine to	change Sonic's speed as he rolls
00013A1A                            ; ---------------------------------------------------------------------------
00013A1A                            
00013A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A1A                            
00013A1A                            
00013A1A                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013A1A 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A1E E346                       		asl.w	#1,d6
00013A20 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A24 E245                       		asr.w	#1,d5
00013A26 3838 F764                  		move.w	($FFFFF764).w,d4
00013A2A E444                       		asr.w	#2,d4
00013A2C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013A30 6600 0000                  		bne.w	loc_131CC
00013A34 4A68 003E                  		tst.w	$3E(a0)
00013A38 6600                       		bne.s	loc_13188
00013A3A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A40 6700                       		beq.s	loc_1317C	; if not, branch
00013A42 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A48 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013A4A 6100 0000                  		bsr.w	Sonic_RollLeft
00013A4E                            
00013A4E                            loc_1317C:
00013A4E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A54 6700                       		beq.s	loc_13188	; if not, branch
00013A56 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A5C 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013A5E 6100 0000                  		bsr.w	Sonic_RollLeft
00013A62 6000                       		bra.s	loc_13188
00013A64                            
00013A64                            SonicRS_RollRight:
00013A64 6100 0000                  		bsr.w	Sonic_RollRight
00013A68                            
00013A68                            loc_13188:
00013A68 3028 0014                  		move.w	$14(a0),d0
00013A6C 6700                       		beq.s	loc_131AA
00013A6E 6B00                       		bmi.s	loc_1319E
00013A70 9045                       		sub.w	d5,d0
00013A72 6400                       		bcc.s	loc_13198
00013A74 303C 0000                  		move.w	#0,d0
00013A78                            
00013A78                            loc_13198:
00013A78 3140 0014                  		move.w	d0,$14(a0)
00013A7C 6000                       		bra.s	loc_131AA
00013A7E                            ; ===========================================================================
00013A7E                            
00013A7E                            loc_1319E:				; XREF: Sonic_RollSpeed
00013A7E D045                       		add.w	d5,d0
00013A80 6400                       		bcc.s	loc_131A6
00013A82 303C 0000                  		move.w	#0,d0
00013A86                            
00013A86                            loc_131A6:
00013A86 3140 0014                  		move.w	d0,$14(a0)
00013A8A                            
00013A8A                            loc_131AA:
00013A8A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013A8E 6600                       		bne.s	loc_131CC	; if yes, branch
00013A90 08A8 0002 0022             		bclr	#2,$22(a0)
00013A96 117C 0013 0016             		move.b	#$13,$16(a0)
00013A9C 117C 0009 0017             		move.b	#9,$17(a0)
00013AA2 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013AA8 5B68 000C                  		subq.w	#5,$C(a0)
00013AAC                            
00013AAC                            loc_131CC:
00013AAC 1028 0026                  		move.b	$26(a0),d0
00013AB0 4EB9 0000 2D36             		jsr	(CalcSine).l
00013AB6 C1E8 0014                  		muls.w	$14(a0),d0
00013ABA E080                       		asr.l	#8,d0
00013ABC 3140 0012                  		move.w	d0,$12(a0)
00013AC0 C3E8 0014                  		muls.w	$14(a0),d1
00013AC4 E081                       		asr.l	#8,d1
00013AC6 0C41 1000                  		cmpi.w	#$1000,d1
00013ACA 6F00                       		ble.s	loc_131F0
00013ACC 323C 1000                  		move.w	#$1000,d1
00013AD0                            
00013AD0                            loc_131F0:
00013AD0 0C41 F000                  		cmpi.w	#-$1000,d1
00013AD4 6C00                       		bge.s	loc_131FA
00013AD6 323C F000                  		move.w	#-$1000,d1
00013ADA                            
00013ADA                            loc_131FA:
00013ADA 3141 0010                  		move.w	d1,$10(a0)
00013ADE 6000 FDF6                  		bra.w	loc_1300C
00013AE2                            ; End of function Sonic_RollSpeed
00013AE2                            
00013AE2                            
00013AE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AE2                            
00013AE2                            
00013AE2                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013AE2 3028 0014                  		move.w	$14(a0),d0
00013AE6 6700                       		beq.s	loc_1320A
00013AE8 6A00                       		bpl.s	loc_13218
00013AEA                            
00013AEA                            loc_1320A:
00013AEA 08E8 0000 0022             		bset	#0,$22(a0)
00013AF0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013AF6 4E75                       		rts	
00013AF8                            ; ===========================================================================
00013AF8                            
00013AF8                            loc_13218:
00013AF8 9044                       		sub.w	d4,d0
00013AFA 6400                       		bcc.s	loc_13220
00013AFC 303C FF80                  		move.w	#-$80,d0
00013B00                            
00013B00                            loc_13220:
00013B00 3140 0014                  		move.w	d0,$14(a0)
00013B04 4E75                       		rts	
00013B06                            ; End of function Sonic_RollLeft
00013B06                            
00013B06                            
00013B06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B06                            
00013B06                            
00013B06                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013B06 3028 0014                  		move.w	$14(a0),d0
00013B0A 6B00                       		bmi.s	loc_1323A
00013B0C 08A8 0000 0022             		bclr	#0,$22(a0)
00013B12 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013B18 4E75                       		rts	
00013B1A                            ; ===========================================================================
00013B1A                            
00013B1A                            loc_1323A:
00013B1A D044                       		add.w	d4,d0
00013B1C 6400                       		bcc.s	loc_13242
00013B1E 303C 0080                  		move.w	#$80,d0
00013B22                            
00013B22                            loc_13242:
00013B22 3140 0014                  		move.w	d0,$14(a0)
00013B26 4E75                       		rts	
00013B28                            ; End of function Sonic_RollRight
00013B28                            
00013B28                            Sonic_AirUnroll:
00013B28                            		
00013B28 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013B2C 6600                       		bne.s	@timer
00013B2E 1038 F605                  		move.b	($FFFFF605).w,d0
00013B32 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013B36 6700                       		beq.s	@end	; if not, branch
00013B38 08A8 0002 0022             		bclr	#2,$22(a0)
00013B3E 117C 0013 0016             		move.b	#$13,$16(a0)
00013B44 117C 0009 0017             		move.b	#9,$17(a0)
00013B4A 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013B50 303C 00A5                  		move.w	#$A5,d0
00013B54 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play fart sound
00013B5A 2028 0010                  		move.l	$10(a0),d0
00013B5E D080                       		add.l	d0,d0
00013B60 2140 0010                  		move.l	d0,$10(a0)
00013B64 5B68 000C                  		subq.w	#5,$C(a0)
00013B68                            	@end:
00013B68 4E75                       		rts
00013B6A                            	@timer:
00013B6A 5328 003A                  		subq.b	#1,$3A(a0)
00013B6E 4E75                       		rts
00013B70                            
00013B70                            ; ---------------------------------------------------------------------------
00013B70                            ; Subroutine to	change Sonic's direction while jumping
00013B70                            ; ---------------------------------------------------------------------------
00013B70                            
00013B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B70                            
00013B70                            
00013B70                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B70 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B74 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B78 E345                       		asl.w	#1,d5
00013B7A 0828 0004 0022             		btst	#4,$22(a0)
00013B80 6600                       		bne.s	Obj01_ResetScr2
00013B82 3028 0010                  		move.w	$10(a0),d0
00013B86 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B8C 6700                       		beq.s	loc_13278	; if not, branch
00013B8E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B94 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013B96 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013B9A 6E00                       		bgt.s	loc_13278
00013B9C 3001                       		move.w	d1,d0
00013B9E                            
00013B9E                            loc_13278:
00013B9E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013BA4 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013BA6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013BAC 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013BAE 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013BB2 6E00                       		bgt.s	Obj01_JumpMove
00013BB4 3001                       		move.w	d1,d0
00013BB6 6000                       		bra.s	Obj01_JumpMove
00013BB8                            
00013BB8                            SonicCJD_JumpLeft:
00013BB8 08E8 0000 0022             		bset	#0,$22(a0)
00013BBE 9045                       		sub.w	d5,d0
00013BC0 3206                       		move.w	d6,d1
00013BC2 4441                       		neg.w	d1
00013BC4 B041                       		cmp.w	d1,d0
00013BC6                            		; bgt.s	loc_13278
00013BC6                            		; move.w	d1,d0
00013BC6 4E75                       		rts
00013BC8                            
00013BC8                            SonicCJD_JumpRight:
00013BC8 08A8 0000 0022             		bclr	#0,$22(a0)
00013BCE D045                       		add.w	d5,d0
00013BD0 B046                       		cmp.w	d6,d0
00013BD2 6D00                       		blt.s	Obj01_JumpMove
00013BD4 3006                       		move.w	d6,d0
00013BD6                            
00013BD6                            Obj01_JumpMove:
00013BD6 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013BDA                            
00013BDA                            Obj01_ResetScr2:
00013BDA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013BE0 6700                       		beq.s	loc_132A4	; if yes, branch
00013BE2 6400                       		bcc.s	loc_132A0
00013BE4 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013BE8                            
00013BE8                            loc_132A0:
00013BE8 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013BEC                            
00013BEC                            loc_132A4:
00013BEC 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013BF2 6500                       		bcs.s	locret_132D2	; if yes, branch
00013BF4 3028 0010                  		move.w	$10(a0),d0
00013BF8 3200                       		move.w	d0,d1
00013BFA EA41                       		asr.w	#5,d1
00013BFC 6700                       		beq.s	locret_132D2
00013BFE 6B00                       		bmi.s	loc_132C6
00013C00 9041                       		sub.w	d1,d0
00013C02 6400                       		bcc.s	loc_132C0
00013C04 303C 0000                  		move.w	#0,d0
00013C08                            
00013C08                            loc_132C0:
00013C08 3140 0010                  		move.w	d0,$10(a0)
00013C0C 4E75                       		rts	
00013C0E                            ; ===========================================================================
00013C0E                            
00013C0E                            loc_132C6:
00013C0E 9041                       		sub.w	d1,d0
00013C10 6500                       		bcs.s	loc_132CE
00013C12 303C 0000                  		move.w	#0,d0
00013C16                            
00013C16                            loc_132CE:
00013C16 3140 0010                  		move.w	d0,$10(a0)
00013C1A                            
00013C1A                            locret_132D2:
00013C1A 4E75                       		rts	
00013C1C                            ; End of function Sonic_ChgJumpDir
00013C1C                            
00013C1C                            ; ===========================================================================
00013C1C                            ; ---------------------------------------------------------------------------
00013C1C                            ; Unused subroutine to squash Sonic
00013C1C                            ; ---------------------------------------------------------------------------
00013C1C 1028 0026                  		move.b	$26(a0),d0
00013C20 0600 0020                  		addi.b	#$20,d0
00013C24 0200 00C0                  		andi.b	#$C0,d0
00013C28 6600                       		bne.s	locret_13302
00013C2A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013C2E 4A41                       		tst.w	d1
00013C30 6A00                       		bpl.s	locret_13302
00013C32 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013C38 317C 0000 0010             		move.w	#0,$10(a0)
00013C3E 317C 0000 0012             		move.w	#0,$12(a0)
00013C44 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013C4A                            
00013C4A                            locret_13302:
00013C4A 4E75                       		rts	
00013C4C                            ; ---------------------------------------------------------------------------
00013C4C                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013C4C                            ; ---------------------------------------------------------------------------
00013C4C                            
00013C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C4C                            
00013C4C                            
00013C4C                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013C4C 2228 0008                  		move.l	8(a0),d1
00013C50 3028 0010                  		move.w	$10(a0),d0
00013C54 48C0                       		ext.l	d0
00013C56 E180                       		asl.l	#8,d0
00013C58 D280                       		add.l	d0,d1
00013C5A 4841                       		swap	d1
00013C5C 3038 F728                  		move.w	($FFFFF728).w,d0
00013C60 0640 0010                  		addi.w	#$10,d0
00013C64 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013C66 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013C68 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013C6C 0640 0128                  		addi.w	#$128,d0
00013C70 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013C74 6600                       		bne.s	loc_13332
00013C76 0640 0040                  		addi.w	#$40,d0
00013C7A                            
00013C7A                            loc_13332:
00013C7A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013C7C 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013C7E                            
00013C7E                            loc_13336:
00013C7E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013C82 0640 00E0                  		addi.w	#$E0,d0
00013C86 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013C8A 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013C8C 4E75                       		rts	
00013C8E                            ; ===========================================================================
00013C8E                            
00013C8E                            Boundary_Bottom:
00013C8E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013C94 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013C98 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013C9E 6500 0000                  		bcs.w	KillSonic
00013CA2 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013CA6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013CAC 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013CB2 4E75                       		rts	
00013CB4                            ; ===========================================================================
00013CB4                            
00013CB4                            Boundary_Sides:
00013CB4 3140 0008                  		move.w	d0,8(a0)
00013CB8 317C 0000 000A             		move.w	#0,$A(a0)
00013CBE 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013CC4 317C 0000 0014             		move.w	#0,$14(a0)
00013CCA 60B2                       		bra.s	loc_13336
00013CCC                            ; End of function Sonic_LevelBound
00013CCC                            
00013CCC                            ; ---------------------------------------------------------------------------
00013CCC                            ; Subroutine allowing Sonic to roll when he's moving
00013CCC                            ; ---------------------------------------------------------------------------
00013CCC                            
00013CCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CCC                            
00013CCC                            
00013CCC                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013CCC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013CD0 6600                       		bne.s	Obj01_NoRoll
00013CD2 3028 0014                  		move.w	$14(a0),d0
00013CD6 6A00                       		bpl.s	loc_13392
00013CD8 4440                       		neg.w	d0
00013CDA                            
00013CDA                            loc_13392:
00013CDA 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013CDE 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013CE0 1038 F602                  		move.b	($FFFFF602).w,d0
00013CE4 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013CE8 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013CEA 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013CF0 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013CF2                            
00013CF2                            Obj01_NoRoll:
00013CF2 4E75                       		rts	
00013CF4                            ; ===========================================================================
00013CF4                            
00013CF4                            Obj01_ChkRoll:
00013CF4 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013CFA 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013CFC 4E75                       		rts	
00013CFE                            ; ===========================================================================
00013CFE                            
00013CFE                            Obj01_DoRoll:
00013CFE 08E8 0002 0022             		bset	#2,$22(a0)
00013D04 117C 000E 0016             		move.b	#$E,$16(a0)
00013D0A 117C 0007 0017             		move.b	#7,$17(a0)
00013D10 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013D16 5A68 000C                  		addq.w	#5,$C(a0)
00013D1A 303C 00BE                  		move.w	#$BE,d0
00013D1E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rolling sound
00013D24 4A68 0014                  		tst.w	$14(a0)
00013D28 6600                       		bne.s	locret_133E8
00013D2A 317C 0200 0014             		move.w	#$200,$14(a0)
00013D30                            
00013D30                            locret_133E8:
00013D30 4E75                       		rts	
00013D32                            ; End of function Sonic_Roll
00013D32                            
00013D32                            ; ---------------------------------------------------------------------------
00013D32                            ; Subroutine allowing Sonic to jump
00013D32                            ; ---------------------------------------------------------------------------
00013D32                            
00013D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D32                            
00013D32                            
00013D32                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013D32 1038 F603                  		move.b	($FFFFF603).w,d0
00013D36 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013D3A 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013D3E 7000                       		moveq	#0,d0
00013D40 1028 0026                  		move.b	$26(a0),d0
00013D44 0600 0080                  		addi.b	#$80,d0
00013D48 6100 0000                  		bsr.w	sub_14D48
00013D4C 0C41 0006                  		cmpi.w	#6,d1
00013D50 6D00 0000                  		blt.w	locret_1348E
00013D54 343C 0680                  		move.w	#$680,d2
00013D58 0828 0006 0022             		btst	#6,$22(a0)
00013D5E 6700                       		beq.s	loc_1341C
00013D60 343C 0380                  		move.w	#$380,d2
00013D64                            
00013D64                            loc_1341C:
00013D64 7000                       		moveq	#0,d0
00013D66 1028 0026                  		move.b	$26(a0),d0
00013D6A 0400 0040                  		subi.b	#$40,d0
00013D6E 4EB9 0000 2D36             		jsr	(CalcSine).l
00013D74 C3C2                       		muls.w	d2,d1
00013D76 E081                       		asr.l	#8,d1
00013D78 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013D7C C1C2                       		muls.w	d2,d0
00013D7E E080                       		asr.l	#8,d0
00013D80 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013D84 08E8 0001 0022             		bset	#1,$22(a0)
00013D8A 08A8 0005 0022             		bclr	#5,$22(a0)
00013D90 588F                       		addq.l	#4,sp
00013D92 117C 0001 003C             		move.b	#1,$3C(a0)
00013D98 4228 0038                  		clr.b	$38(a0)
00013D9C 303C 00A0                  		move.w	#$A0,d0
00013DA0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play jumping sound
00013DA6 117C 0013 0016             		move.b	#$13,$16(a0)
00013DAC 117C 0009 0017             		move.b	#9,$17(a0)
00013DB2 0828 0002 0022             		btst	#2,$22(a0)
00013DB8 6600                       		bne.s	loc_13490
00013DBA 117C 000E 0016             		move.b	#$E,$16(a0)
00013DC0 117C 0007 0017             		move.b	#7,$17(a0)
00013DC6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013DCC 08E8 0002 0022             		bset	#2,$22(a0)
00013DD2 5A68 000C                  		addq.w	#5,$C(a0)
00013DD6 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013DDC                            
00013DDC                            locret_1348E:
00013DDC 4E75                       		rts	
00013DDE                            ; ===========================================================================
00013DDE                            
00013DDE                            loc_13490:
00013DDE 08E8 0004 0022             		bset	#4,$22(a0)
00013DE4 4E75                       		rts	
00013DE6                            ; End of function Sonic_Jump
00013DE6                            
00013DE6                            
00013DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DE6                            
00013DE6                            
00013DE6                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013DE6 4A28 003C                  		tst.b	$3C(a0)
00013DEA 6700                       		beq.s	loc_134C4
00013DEC 323C FC00                  		move.w	#-$400,d1
00013DF0 0828 0006 0022             		btst	#6,$22(a0)
00013DF6 6700                       		beq.s	loc_134AE
00013DF8 323C FE00                  		move.w	#-$200,d1
00013DFC                            
00013DFC                            loc_134AE:
00013DFC B268 0012                  		cmp.w	$12(a0),d1
00013E00 6F00                       		ble.s	locret_134C2
00013E02 1038 F602                  		move.b	($FFFFF602).w,d0
00013E06 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013E0A 6600                       		bne.s	locret_134C2	; if yes, branch
00013E0C 3141 0012                  		move.w	d1,$12(a0)
00013E10                            
00013E10                            locret_134C2:
00013E10 4E75                       		rts	
00013E12                            ; ===========================================================================
00013E12                            
00013E12                            loc_134C4:
00013E12 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013E18 6C00                       		bge.s	locret_134D2
00013E1A 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013E20                            
00013E20                            locret_134D2:
00013E20 4E75                       		rts	
00013E22                            ; End of function Sonic_JumpHeight
00013E22                            
00013E22                            ; ---------------------------------------------------------------------------
00013E22                            ; Subroutine to	slow Sonic walking up a	slope
00013E22                            ; ---------------------------------------------------------------------------
00013E22                            
00013E22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E22                            
00013E22                            
00013E22                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013E22 1028 0026                  		move.b	$26(a0),d0
00013E26 0600 0060                  		addi.b	#$60,d0
00013E2A 0C00 00C0                  		cmpi.b	#$C0,d0
00013E2E 6400                       		bcc.s	locret_13508
00013E30 1028 0026                  		move.b	$26(a0),d0
00013E34 4EB9 0000 2D36             		jsr	(CalcSine).l
00013E3A C1FC 0020                  		muls.w	#$20,d0
00013E3E E080                       		asr.l	#8,d0
00013E40 4A68 0014                  		tst.w	$14(a0)
00013E44 6700                       		beq.s	locret_13508
00013E46 6B00                       		bmi.s	loc_13504
00013E48 4A40                       		tst.w	d0
00013E4A 6700                       		beq.s	locret_13502
00013E4C D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013E50                            
00013E50                            locret_13502:
00013E50 4E75                       		rts	
00013E52                            ; ===========================================================================
00013E52                            
00013E52                            loc_13504:
00013E52 D168 0014                  		add.w	d0,$14(a0)
00013E56                            
00013E56                            locret_13508:
00013E56 4E75                       		rts	
00013E58                            ; End of function Sonic_SlopeResist
00013E58                            
00013E58                            ; ---------------------------------------------------------------------------
00013E58                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013E58                            ; ---------------------------------------------------------------------------
00013E58                            
00013E58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E58                            
00013E58                            
00013E58                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013E58 1028 0026                  		move.b	$26(a0),d0
00013E5C 0600 0060                  		addi.b	#$60,d0
00013E60 0C00 00C0                  		cmpi.b	#-$40,d0
00013E64 6400                       		bcc.s	locret_13544
00013E66 1028 0026                  		move.b	$26(a0),d0
00013E6A 4EB9 0000 2D36             		jsr	(CalcSine).l
00013E70 C1FC 0050                  		muls.w	#$50,d0
00013E74 E080                       		asr.l	#8,d0
00013E76 4A68 0014                  		tst.w	$14(a0)
00013E7A 6B00                       		bmi.s	loc_1353A
00013E7C 4A40                       		tst.w	d0
00013E7E 6A00                       		bpl.s	loc_13534
00013E80 E480                       		asr.l	#2,d0
00013E82                            
00013E82                            loc_13534:
00013E82 D168 0014                  		add.w	d0,$14(a0)
00013E86 4E75                       		rts	
00013E88                            ; ===========================================================================
00013E88                            
00013E88                            loc_1353A:
00013E88 4A40                       		tst.w	d0
00013E8A 6B00                       		bmi.s	loc_13540
00013E8C E480                       		asr.l	#2,d0
00013E8E                            
00013E8E                            loc_13540:
00013E8E D168 0014                  		add.w	d0,$14(a0)
00013E92                            
00013E92                            locret_13544:
00013E92 4E75                       		rts	
00013E94                            ; End of function Sonic_RollRepel
00013E94                            
00013E94                            ; ---------------------------------------------------------------------------
00013E94                            ; Subroutine to	push Sonic down	a slope
00013E94                            ; ---------------------------------------------------------------------------
00013E94                            
00013E94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E94                            
00013E94                            
00013E94                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013E94 4E71                       		nop	
00013E96 4A28 0038                  		tst.b	$38(a0)
00013E9A 6600                       		bne.s	locret_13580
00013E9C 4A68 003E                  		tst.w	$3E(a0)
00013EA0 6600                       		bne.s	loc_13582
00013EA2 1028 0026                  		move.b	$26(a0),d0
00013EA6 0600 0020                  		addi.b	#$20,d0
00013EAA 0200 00C0                  		andi.b	#$C0,d0
00013EAE 6700                       		beq.s	locret_13580
00013EB0 3028 0014                  		move.w	$14(a0),d0
00013EB4 6A00                       		bpl.s	loc_1356A
00013EB6 4440                       		neg.w	d0
00013EB8                            
00013EB8                            loc_1356A:
00013EB8 0C40 0280                  		cmpi.w	#$280,d0
00013EBC 6400                       		bcc.s	locret_13580
00013EBE 4268 0014                  		clr.w	$14(a0)
00013EC2 08E8 0001 0022             		bset	#1,$22(a0)
00013EC8 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013ECE                            
00013ECE                            locret_13580:
00013ECE 4E75                       		rts	
00013ED0                            ; ===========================================================================
00013ED0                            
00013ED0                            loc_13582:
00013ED0 5368 003E                  		subq.w	#1,$3E(a0)
00013ED4 4E75                       		rts	
00013ED6                            ; End of function Sonic_SlopeRepel
00013ED6                            
00013ED6                            ; ---------------------------------------------------------------------------
00013ED6                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013ED6                            ; ---------------------------------------------------------------------------
00013ED6                            
00013ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ED6                            
00013ED6                            
00013ED6                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013ED6 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013EDA 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013EDC 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013EDE                            
00013EDE 5400                       		addq.b	#2,d0		; increase angle
00013EE0 6400                       		bcc.s	loc_13596
00013EE2 7000                       		moveq	#0,d0
00013EE4                            
00013EE4                            loc_13596:
00013EE4 6000                       		bra.s	loc_1359E
00013EE6                            ; ===========================================================================
00013EE6                            
00013EE6                            loc_13598:
00013EE6 5500                       		subq.b	#2,d0		; decrease angle
00013EE8 6400                       		bcc.s	loc_1359E
00013EEA 7000                       		moveq	#0,d0
00013EEC                            
00013EEC                            loc_1359E:
00013EEC 1140 0026                  		move.b	d0,$26(a0)
00013EF0                            
00013EF0                            locret_135A2:
00013EF0 4E75                       		rts	
00013EF2                            ; End of function Sonic_JumpAngle
00013EF2                            
00013EF2                            ; ---------------------------------------------------------------------------
00013EF2                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013EF2                            ; ---------------------------------------------------------------------------
00013EF2                            
00013EF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EF2                            
00013EF2                            
00013EF2                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013EF2 3228 0010                  		move.w	$10(a0),d1
00013EF6 3428 0012                  		move.w	$12(a0),d2
00013EFA 4EB9 0000 3004             		jsr	(CalcAngle).l
00013F00 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013F04 0400 0020                  		subi.b	#$20,d0
00013F08 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013F0C 0200 00C0                  		andi.b	#$C0,d0
00013F10 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013F14 0C00 0040                  		cmpi.b	#$40,d0
00013F18 6700 0000                  		beq.w	loc_13680
00013F1C 0C00 0080                  		cmpi.b	#$80,d0
00013F20 6700 0000                  		beq.w	loc_136E2
00013F24 0C00 00C0                  		cmpi.b	#-$40,d0
00013F28 6700 0000                  		beq.w	loc_1373E
00013F2C 6100 0000                  		bsr.w	Sonic_HitWall
00013F30 4A41                       		tst.w	d1
00013F32 6A00                       		bpl.s	loc_135F0
00013F34 9368 0008                  		sub.w	d1,8(a0)
00013F38 317C 0000 0010             		move.w	#0,$10(a0)
00013F3E                            
00013F3E                            loc_135F0:
00013F3E 6100 0000                  		bsr.w	sub_14EB4
00013F42 4A41                       		tst.w	d1
00013F44 6A00                       		bpl.s	loc_13602
00013F46 D368 0008                  		add.w	d1,8(a0)
00013F4A 317C 0000 0010             		move.w	#0,$10(a0)
00013F50                            
00013F50                            loc_13602:
00013F50 6100 0000                  		bsr.w	Sonic_HitFloor
00013F54 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013F58 4A41                       		tst.w	d1
00013F5A 6A00                       		bpl.s	locret_1367E
00013F5C 1428 0012                  		move.b	$12(a0),d2
00013F60 5002                       		addq.b	#8,d2
00013F62 4402                       		neg.b	d2
00013F64 B202                       		cmp.b	d2,d1
00013F66 6C00                       		bge.s	loc_1361E
00013F68 B002                       		cmp.b	d2,d0
00013F6A 6D00                       		blt.s	locret_1367E
00013F6C                            
00013F6C                            loc_1361E:
00013F6C D368 000C                  		add.w	d1,$C(a0)
00013F70 1143 0026                  		move.b	d3,$26(a0)
00013F74 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F78 117C 0000 001C             		move.b	#0,$1C(a0)
00013F7E 1003                       		move.b	d3,d0
00013F80 0600 0020                  		addi.b	#$20,d0
00013F84 0200 0040                  		andi.b	#$40,d0
00013F88 6600                       		bne.s	loc_1365C
00013F8A 1003                       		move.b	d3,d0
00013F8C 0600 0010                  		addi.b	#$10,d0
00013F90 0200 0020                  		andi.b	#$20,d0
00013F94 6700                       		beq.s	loc_1364E
00013F96 E0E8 0012                  		asr	$12(a0)
00013F9A 6000                       		bra.s	loc_13670
00013F9C                            ; ===========================================================================
00013F9C                            
00013F9C                            loc_1364E:
00013F9C 317C 0000 0012             		move.w	#0,$12(a0)
00013FA2 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013FA8 4E75                       		rts	
00013FAA                            ; ===========================================================================
00013FAA                            
00013FAA                            loc_1365C:
00013FAA 317C 0000 0010             		move.w	#0,$10(a0)
00013FB0 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013FB6 6F00                       		ble.s	loc_13670
00013FB8 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013FBE                            
00013FBE                            loc_13670:
00013FBE 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FC4 4A03                       		tst.b	d3
00013FC6 6A00                       		bpl.s	locret_1367E
00013FC8 4468 0014                  		neg.w	$14(a0)
00013FCC                            
00013FCC                            locret_1367E:
00013FCC 4E75                       		rts	
00013FCE                            ; ===========================================================================
00013FCE                            
00013FCE                            loc_13680:
00013FCE 6100 0000                  		bsr.w	Sonic_HitWall
00013FD2 4A41                       		tst.w	d1
00013FD4 6A00                       		bpl.s	loc_1369A
00013FD6 9368 0008                  		sub.w	d1,8(a0)
00013FDA 317C 0000 0010             		move.w	#0,$10(a0)
00013FE0 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FE6 4E75                       		rts	
00013FE8                            ; ===========================================================================
00013FE8                            
00013FE8                            loc_1369A:
00013FE8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FEC 4A41                       		tst.w	d1
00013FEE 6A00                       		bpl.s	loc_136B4
00013FF0 9368 000C                  		sub.w	d1,$C(a0)
00013FF4 4A68 0012                  		tst.w	$12(a0)
00013FF8 6A00                       		bpl.s	locret_136B2
00013FFA 317C 0000 0012             		move.w	#0,$12(a0)
00014000                            
00014000                            locret_136B2:
00014000 4E75                       		rts	
00014002                            ; ===========================================================================
00014002                            
00014002                            loc_136B4:
00014002 4A68 0012                  		tst.w	$12(a0)
00014006 6B00                       		bmi.s	locret_136E0
00014008 6100 0000                  		bsr.w	Sonic_HitFloor
0001400C 4A41                       		tst.w	d1
0001400E 6A00                       		bpl.s	locret_136E0
00014010 D368 000C                  		add.w	d1,$C(a0)
00014014 1143 0026                  		move.b	d3,$26(a0)
00014018 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001401C 117C 0000 001C             		move.b	#0,$1C(a0)
00014022 317C 0000 0012             		move.w	#0,$12(a0)
00014028 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001402E                            
0001402E                            locret_136E0:
0001402E 4E75                       		rts	
00014030                            ; ===========================================================================
00014030                            
00014030                            loc_136E2:
00014030 6100 0000                  		bsr.w	Sonic_HitWall
00014034 4A41                       		tst.w	d1
00014036 6A00                       		bpl.s	loc_136F4
00014038 9368 0008                  		sub.w	d1,8(a0)
0001403C 317C 0000 0010             		move.w	#0,$10(a0)
00014042                            
00014042                            loc_136F4:
00014042 6100 0000                  		bsr.w	sub_14EB4
00014046 4A41                       		tst.w	d1
00014048 6A00                       		bpl.s	loc_13706
0001404A D368 0008                  		add.w	d1,8(a0)
0001404E 317C 0000 0010             		move.w	#0,$10(a0)
00014054                            
00014054                            loc_13706:
00014054 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014058 4A41                       		tst.w	d1
0001405A 6A00                       		bpl.s	locret_1373C
0001405C 9368 000C                  		sub.w	d1,$C(a0)
00014060 1003                       		move.b	d3,d0
00014062 0600 0020                  		addi.b	#$20,d0
00014066 0200 0040                  		andi.b	#$40,d0
0001406A 6600                       		bne.s	loc_13726
0001406C 317C 0000 0012             		move.w	#0,$12(a0)
00014072 4E75                       		rts	
00014074                            ; ===========================================================================
00014074                            
00014074                            loc_13726:
00014074 1143 0026                  		move.b	d3,$26(a0)
00014078 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001407C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014082 4A03                       		tst.b	d3
00014084 6A00                       		bpl.s	locret_1373C
00014086 4468 0014                  		neg.w	$14(a0)
0001408A                            
0001408A                            locret_1373C:
0001408A 4E75                       		rts	
0001408C                            ; ===========================================================================
0001408C                            
0001408C                            loc_1373E:
0001408C 6100 0000                  		bsr.w	sub_14EB4
00014090 4A41                       		tst.w	d1
00014092 6A00                       		bpl.s	loc_13758
00014094 D368 0008                  		add.w	d1,8(a0)
00014098 317C 0000 0010             		move.w	#0,$10(a0)
0001409E 3168 0012 0014             		move.w	$12(a0),$14(a0)
000140A4 4E75                       		rts	
000140A6                            ; ===========================================================================
000140A6                            
000140A6                            loc_13758:
000140A6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000140AA 4A41                       		tst.w	d1
000140AC 6A00                       		bpl.s	loc_13772
000140AE 9368 000C                  		sub.w	d1,$C(a0)
000140B2 4A68 0012                  		tst.w	$12(a0)
000140B6 6A00                       		bpl.s	locret_13770
000140B8 317C 0000 0012             		move.w	#0,$12(a0)
000140BE                            
000140BE                            locret_13770:
000140BE 4E75                       		rts	
000140C0                            ; ===========================================================================
000140C0                            
000140C0                            loc_13772:
000140C0 4A68 0012                  		tst.w	$12(a0)
000140C4 6B00                       		bmi.s	locret_1379E
000140C6 6100 0000                  		bsr.w	Sonic_HitFloor
000140CA 4A41                       		tst.w	d1
000140CC 6A00                       		bpl.s	locret_1379E
000140CE D368 000C                  		add.w	d1,$C(a0)
000140D2 1143 0026                  		move.b	d3,$26(a0)
000140D6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000140DA 117C 0000 001C             		move.b	#0,$1C(a0)
000140E0 317C 0000 0012             		move.w	#0,$12(a0)
000140E6 3168 0010 0014             		move.w	$10(a0),$14(a0)
000140EC                            
000140EC                            locret_1379E:
000140EC 4E75                       		rts	
000140EE                            ; End of function Sonic_Floor
000140EE                            
000140EE                            ; ---------------------------------------------------------------------------
000140EE                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000140EE                            ; ---------------------------------------------------------------------------
000140EE                            
000140EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140EE                            
000140EE                            
000140EE                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000140EE 0828 0004 0022             		btst	#4,$22(a0)
000140F4 6700                       		beq.s	loc_137AE
000140F6 4E71                       		nop	
000140F8 4E71                       		nop	
000140FA 4E71                       		nop	
000140FC                            
000140FC                            loc_137AE:
000140FC 08A8 0005 0022             		bclr	#5,$22(a0)
00014102 08A8 0001 0022             		bclr	#1,$22(a0)
00014108 08A8 0004 0022             		bclr	#4,$22(a0)
0001410E 0828 0002 0022             		btst	#2,$22(a0)
00014114 6700                       		beq.s	loc_137E4
00014116 08A8 0002 0022             		bclr	#2,$22(a0)
0001411C 117C 0013 0016             		move.b	#$13,$16(a0)
00014122 117C 0009 0017             		move.b	#9,$17(a0)
00014128 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001412E 5B68 000C                  		subq.w	#5,$C(a0)
00014132                            
00014132                            loc_137E4:
00014132 117C 0000 003C             		move.b	#0,$3C(a0)
00014138 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001413E 4E75                       		rts	
00014140                            ; End of function Sonic_ResetOnFloor
00014140                            
00014140                            ; ===========================================================================
00014140                            ; ---------------------------------------------------------------------------
00014140                            ; Sonic	when he	gets hurt
00014140                            ; ---------------------------------------------------------------------------
00014140                            
00014140                            Obj01_Hurt:				; XREF: Obj01_Index
00014140 4EBA 9D40                  		jsr	SpeedToPos
00014144 0668 0030 0012             		addi.w	#$30,$12(a0)
0001414A 0828 0006 0022             		btst	#6,$22(a0)
00014150 6700                       		beq.s	loc_1380C
00014152 0468 0020 0012             		subi.w	#$20,$12(a0)
00014158                            
00014158                            loc_1380C:
00014158 6100 0000                  		bsr.w	Sonic_HurtStop
0001415C 6100 FAEE                  		bsr.w	Sonic_LevelBound
00014160 6100 F4B4                  		bsr.w	Sonic_RecordPos
00014164 6100 0000                  		bsr.w	Sonic_Animate
00014168 6100 0000                  		bsr.w	LoadSonicDynPLC
0001416C 4EFA 9D3A                  		jmp	DisplaySprite
00014170                            
00014170                            ; ---------------------------------------------------------------------------
00014170                            ; Subroutine to	stop Sonic falling after he's been hurt
00014170                            ; ---------------------------------------------------------------------------
00014170                            
00014170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014170                            
00014170                            
00014170                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014170 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014174 0640 00E0                  		addi.w	#$E0,d0
00014178 B068 000C                  		cmp.w	$C(a0),d0
0001417C 6500 0000                  		bcs.w	KillSonic
00014180 6100 FD70                  		bsr.w	Sonic_Floor
00014184 0828 0001 0022             		btst	#1,$22(a0)
0001418A 6600                       		bne.s	locret_13860
0001418C 7000                       		moveq	#0,d0
0001418E 3140 0012                  		move.w	d0,$12(a0)
00014192 3140 0010                  		move.w	d0,$10(a0)
00014196 3140 0014                  		move.w	d0,$14(a0)
0001419A 117C 0000 001C             		move.b	#0,$1C(a0)
000141A0 5528 0024                  		subq.b	#2,$24(a0)
000141A4 317C 0078 0030             		move.w	#$78,$30(a0)
000141AA                            
000141AA                            locret_13860:
000141AA 4E75                       		rts	
000141AC                            ; End of function Sonic_HurtStop
000141AC                            
000141AC                            ; ===========================================================================
000141AC                            ; ---------------------------------------------------------------------------
000141AC                            ; Sonic	when he	dies
000141AC                            ; ---------------------------------------------------------------------------
000141AC                            
000141AC                            Obj01_Death:				; XREF: Obj01_Index
000141AC 6100 0000                  		bsr.w	GameOver
000141B0 4EBA 9C5E                  		jsr	ObjectFall
000141B4 6100 F460                  		bsr.w	Sonic_RecordPos
000141B8 6100 0000                  		bsr.w	Sonic_Animate
000141BC 6100 0000                  		bsr.w	LoadSonicDynPLC
000141C0 4EFA 9CE6                  		jmp	DisplaySprite
000141C4                            
000141C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141C4                            
000141C4                            
000141C4                            GameOver:				; XREF: Obj01_Death
000141C4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000141C8 0640 0100                  		addi.w	#$100,d0
000141CC B068 000C                  		cmp.w	$C(a0),d0
000141D0 6400 0000                  		bcc.w	locret_13900
000141D4 317C FFC8 0012             		move.w	#-$38,$12(a0)
000141DA 5428 0024                  		addq.b	#2,$24(a0)
000141DE 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000141E2 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000141E6 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000141EA 6600                       		bne.s	loc_138D4
000141EC 317C 0000 003A             		move.w	#0,$3A(a0)
000141F2 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000141F8 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000141FE 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014204 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014208                            
00014208                            loc_138C2:
00014208 303C 008F                  		move.w	#$8F,d0
0001420C 4EB9 0000 15CC             		jsr	(PlaySound).l	; play game over music
00014212 7003                       		moveq	#3,d0
00014214 4EF9 0000 17B6             		jmp	(LoadPLC).l	; load game over patterns
0001421A                            ; ===========================================================================
0001421A                            
0001421A                            loc_138D4:
0001421A 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014220 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014224 6700                       		beq.s	locret_13900	; if not, branch
00014226 317C 0000 003A             		move.w	#0,$3A(a0)
0001422C 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014232 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014238 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001423E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014244 60C2                       		bra.s	loc_138C2
00014246                            ; ===========================================================================
00014246                            
00014246                            locret_13900:
00014246 4E75                       		rts	
00014248                            ; End of function GameOver
00014248                            
00014248                            ; ===========================================================================
00014248                            ; ---------------------------------------------------------------------------
00014248                            ; Sonic	when the level is restarted
00014248                            ; ---------------------------------------------------------------------------
00014248                            
00014248                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014248 4A68 003A                  		tst.w	$3A(a0)
0001424C 6700                       		beq.s	locret_13914
0001424E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014252 6600                       		bne.s	locret_13914
00014254 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001425A                            
0001425A                            locret_13914:
0001425A 4E75                       		rts	
0001425C                            
0001425C                            ; ---------------------------------------------------------------------------
0001425C                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001425C                            ; ---------------------------------------------------------------------------
0001425C                            
0001425C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001425C                            
0001425C                            
0001425C                            Sonic_Loops:				; XREF: Obj01_Control
0001425C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014262 6700                       		beq.s	loc_13926	; if yes, branch
00014264 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00014268 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001426C                            
0001426C                            loc_13926:
0001426C 3028 000C                  		move.w	$C(a0),d0
00014270 E248                       		lsr.w	#1,d0
00014272 0240 0380                  		andi.w	#$380,d0
00014276 1228 0008                  		move.b	8(a0),d1
0001427A 0241 007F                  		andi.w	#$7F,d1
0001427E D041                       		add.w	d1,d0
00014280 43F8 A400                  		lea	($FFFFA400).w,a1
00014284 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014288 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001428C 6700 FA66                  		beq.w	Obj01_ChkRoll
00014290 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014294 6700 FA5E                  		beq.w	Obj01_ChkRoll
00014298 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
0001429C 6700                       		beq.s	loc_13976
0001429E B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000142A2 6700                       		beq.s	loc_13966
000142A4 08A8 0006 0001             		bclr	#6,1(a0)
000142AA 4E75                       		rts	
000142AC                            ; ===========================================================================
000142AC                            
000142AC                            loc_13966:
000142AC 0828 0001 0022             		btst	#1,$22(a0)
000142B2 6700                       		beq.s	loc_13976
000142B4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000142BA 4E75                       		rts	
000142BC                            ; ===========================================================================
000142BC                            
000142BC                            loc_13976:
000142BC 3428 0008                  		move.w	8(a0),d2
000142C0 0C02 002C                  		cmpi.b	#$2C,d2
000142C4 6400                       		bcc.s	loc_13988
000142C6 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000142CC 4E75                       		rts	
000142CE                            ; ===========================================================================
000142CE                            
000142CE                            loc_13988:
000142CE 0C02 00E0                  		cmpi.b	#-$20,d2
000142D2 6500                       		bcs.s	loc_13996
000142D4 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000142DA 4E75                       		rts	
000142DC                            ; ===========================================================================
000142DC                            
000142DC                            loc_13996:
000142DC 0828 0006 0001             		btst	#6,1(a0)
000142E2 6600                       		bne.s	loc_139B2
000142E4 1228 0026                  		move.b	$26(a0),d1
000142E8 6700                       		beq.s	locret_139C2
000142EA 0C01 0080                  		cmpi.b	#-$80,d1
000142EE 6200                       		bhi.s	locret_139C2
000142F0 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000142F6 4E75                       		rts	
000142F8                            ; ===========================================================================
000142F8                            
000142F8                            loc_139B2:
000142F8 1228 0026                  		move.b	$26(a0),d1
000142FC 0C01 0080                  		cmpi.b	#-$80,d1
00014300 6300                       		bls.s	locret_139C2
00014302 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014308                            
00014308                            locret_139C2:
00014308 4E75                       		rts	
0001430A                            ; End of function Sonic_Loops
0001430A                            
0001430A                            ; ---------------------------------------------------------------------------
0001430A                            ; Subroutine to	animate	Sonic's sprites
0001430A                            ; ---------------------------------------------------------------------------
0001430A                            
0001430A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001430A                            
0001430A                            Player_Anim:
0001430A 0000 0000                  	dc.l	SonicAniData
0001430E 0000 0000                  	dc.l	SonicAniData ; gronic
00014312 0000 0000                  	dc.l	SonicAniData ; anakama
00014316 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
0001431A                            
0001431A                            	; Insert more animation data for other characters here
0001431A                            	
0001431A                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001431A 7000                       			moveq	#0,d0
0001431C 1038 FFE8                  		move.b	(v_character),d0
00014320 E548                       		lsl.w	#2,d0
00014322 43FA FFE6                  		lea 	Player_Anim(pc),a1
00014326                            		
00014326 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
0001432A                            	
0001432A 7000                       		moveq	#0,d0
0001432C 1028 001C                  		move.b	$1C(a0),d0
00014330 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014334 6700                       		beq.s	SAnim_Do	; if not, branch
00014336 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0001433A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014340 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014346                            
00014346                            SAnim_Do:
00014346 D040                       		add.w	d0,d0
00014348 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001434C 1011                       		move.b	(a1),d0
0001434E 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014350 1228 0022                  		move.b	$22(a0),d1
00014354 0201 0001                  		andi.b	#1,d1
00014358 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001435E 8328 0001                  		or.b	d1,1(a0)
00014362 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014366 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014368 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
0001436C                            
0001436C                            SAnim_Do2:
0001436C 7200                       		moveq	#0,d1
0001436E 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014372 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014376 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014378                            
00014378                            SAnim_Next:
00014378 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001437C 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014380                            
00014380                            SAnim_Delay:
00014380 4E75                       		rts	
00014382                            ; ===========================================================================
00014382                            
00014382                            SAnim_End_FF:
00014382 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014384 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014386 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0001438C 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014390 60E6                       		bra.s	SAnim_Next
00014392                            ; ===========================================================================
00014392                            
00014392                            SAnim_End_FE:
00014392 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014394 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014396 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001439A 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001439E 9200                       		sub.b	d0,d1
000143A0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000143A4 60D2                       		bra.s	SAnim_Next
000143A6                            ; ===========================================================================
000143A6                            
000143A6                            SAnim_End_FD:
000143A6 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000143A8 6600                       		bne.s	SAnim_End	; if not, branch
000143AA 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000143B0                            
000143B0                            SAnim_End:
000143B0 4E75                       		rts	
000143B2                            ; ===========================================================================
000143B2                            
000143B2                            SAnim_WalkRun:				; XREF: SAnim_Do
000143B2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000143B6 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000143B8 5200                       		addq.b	#1,d0		; is animation walking/running?
000143BA 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000143BE 7200                       		moveq	#0,d1
000143C0 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000143C4 1428 0022                  		move.b	$22(a0),d2
000143C8 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000143CC 6600                       		bne.s	loc_13A70	; if yes, branch
000143CE 4600                       		not.b	d0		; reverse angle
000143D0                            
000143D0                            loc_13A70:
000143D0 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000143D4 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000143D6 7203                       		moveq	#3,d1
000143D8                            
000143D8                            loc_13A78:
000143D8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000143DE B302                       		eor.b	d1,d2
000143E0 8528 0001                  		or.b	d2,1(a0)
000143E4 0828 0005 0022             		btst	#5,$22(a0)
000143EA 6600 0000                  		bne.w	SAnim_Push
000143EE E808                       		lsr.b	#4,d0		; divide angle by $10
000143F0 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000143F4 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000143F8 6A00                       		bpl.s	loc_13A9C
000143FA 4442                       		neg.w	d2
000143FC                            
000143FC                            loc_13A9C:
000143FC 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014402 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014406 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014408 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
0001440E 1200                       		move.b	d0,d1
00014410 E209                       		lsr.b	#1,d1
00014412 D001                       		add.b	d1,d0
00014414                            
00014414                            loc_13AB4:
00014414 D000                       		add.b	d0,d0
00014416 1600                       		move.b	d0,d3
00014418 4442                       		neg.w	d2
0001441A 0642 0800                  		addi.w	#$800,d2
0001441E 6A00                       		bpl.s	loc_13AC2
00014420 7400                       		moveq	#0,d2
00014422                            
00014422                            loc_13AC2:
00014422 E04A                       		lsr.w	#8,d2
00014424 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014428 6100 FF42                  		bsr.w	SAnim_Do2
0001442C D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014430 4E75                       		rts	
00014432                            ; ===========================================================================
00014432                            
00014432                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014432 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014434 6600                       		bne.s	SAnim_Push	; if not, branch
00014436 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001443A 6A00                       		bpl.s	loc_13ADE
0001443C 4442                       		neg.w	d2
0001443E                            
0001443E                            loc_13ADE:
0001443E 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014444 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014448 6400                       		bcc.s	loc_13AF0	; if yes, branch
0001444A 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014450                            
00014450                            loc_13AF0:
00014450 4442                       		neg.w	d2
00014452 0642 0400                  		addi.w	#$400,d2
00014456 6A00                       		bpl.s	loc_13AFA
00014458 7400                       		moveq	#0,d2
0001445A                            
0001445A                            loc_13AFA:
0001445A E04A                       		lsr.w	#8,d2
0001445C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014460 1228 0022                  		move.b	$22(a0),d1
00014464 0201 0001                  		andi.b	#1,d1
00014468 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001446E 8328 0001                  		or.b	d1,1(a0)
00014472 6000 FEF8                  		bra.w	SAnim_Do2
00014476                            ; ===========================================================================
00014476                            
00014476                            SAnim_Push:				; XREF: SAnim_RollJump
00014476 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001447A 6B00                       		bmi.s	loc_13B1E
0001447C 4442                       		neg.w	d2
0001447E                            
0001447E                            loc_13B1E:
0001447E 0642 0800                  		addi.w	#$800,d2
00014482 6A00                       		bpl.s	loc_13B26
00014484 7400                       		moveq	#0,d2
00014486                            
00014486                            loc_13B26:
00014486 EC4A                       		lsr.w	#6,d2
00014488 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001448C 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014492 1228 0022                  		move.b	$22(a0),d1
00014496 0201 0001                  		andi.b	#1,d1
0001449A 0228 00FC 0001             		andi.b	#$FC,1(a0)
000144A0 8328 0001                  		or.b	d1,1(a0)
000144A4 6000 FEC6                  		bra.w	SAnim_Do2
000144A8                            ; End of function Sonic_Animate
000144A8                            
000144A8                            ; ===========================================================================
000144A8                            SonicAniData:
000144A8                            	include "_anim\Sonic.asm"
000144A8                            ; ---------------------------------------------------------------------------
000144A8                            ; Animation script - Sonic
000144A8                            ; ---------------------------------------------------------------------------
000144A8 0000                       		dc.w SonAni_Walk-SonicAniData
000144AA 0000                       		dc.w SonAni_Run-SonicAniData
000144AC 0000                       		dc.w SonAni_Roll-SonicAniData
000144AE 0000                       		dc.w SonAni_Roll2-SonicAniData
000144B0 0000                       		dc.w SonAni_Push-SonicAniData
000144B2 0000                       		dc.w SonAni_Wait-SonicAniData
000144B4 0000                       		dc.w SonAni_Balance-SonicAniData
000144B6 0000                       		dc.w SonAni_LookUp-SonicAniData
000144B8 0000                       		dc.w SonAni_Duck-SonicAniData
000144BA 0000                       		dc.w SonAni_Warp1-SonicAniData
000144BC 0000                       		dc.w SonAni_Warp2-SonicAniData
000144BE 0000                       		dc.w SonAni_Warp3-SonicAniData
000144C0 0000                       		dc.w SonAni_Warp4-SonicAniData
000144C2 0000                       		dc.w SonAni_Stop-SonicAniData
000144C4 0000                       		dc.w SonAni_Float1-SonicAniData
000144C6 0000                       		dc.w SonAni_Float2-SonicAniData
000144C8 0000                       		dc.w SonAni_Spring-SonicAniData
000144CA 0000                       		dc.w SonAni_LZHang-SonicAniData
000144CC 0000                       		dc.w SonAni_Leap1-SonicAniData
000144CE 0000                       		dc.w SonAni_Leap2-SonicAniData
000144D0 0000                       		dc.w SonAni_Surf-SonicAniData
000144D2 0000                       		dc.w SonAni_Bubble-SonicAniData
000144D4 0000                       		dc.w SonAni_Death1-SonicAniData
000144D6 0000                       		dc.w SonAni_Drown-SonicAniData
000144D8 0000                       		dc.w SonAni_Death2-SonicAniData
000144DA 0000                       		dc.w SonAni_Shrink-SonicAniData
000144DC 0000                       		dc.w SonAni_Hurt-SonicAniData
000144DE 0000                       		dc.w SonAni_LZSlide-SonicAniData
000144E0 0000                       		dc.w SonAni_Blank-SonicAniData
000144E2 0000                       		dc.w SonAni_Float3-SonicAniData
000144E4 0000                       		dc.w SonAni_Float4-SonicAniData
000144E6 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
000144F0 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000144F8 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014500 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014508 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014510 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014526 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
0001452A 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
0001452E 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014532 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014536 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
0001453A 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
0001453E 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014542 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014546 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001454A 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014552 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014556 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001455A 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014560 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014566 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001456A 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014572 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014576 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
0001457A 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
0001457E 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014588 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
0001458C 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014590 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014594 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
0001459C 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000145A0                            		even
000145A0                            		even
000145A0                            
000145A0                            ; ---------------------------------------------------------------------------
000145A0                            ; Sonic	pattern	loading	subroutine
000145A0                            ; ---------------------------------------------------------------------------
000145A0                            
000145A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000145A0                            Player_DPLC:
000145A0 0000 0000                  	dc.l	SonicDynPLC
000145A4 0000 0000                  	dc.l	SonicDynPLC ; gronic
000145A8 0000 0000                  	dc.l	SonicDynPLC ; anakama
000145AC 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
000145B0                            	; add pointers for player dplc here
000145B0                            Player_Art:
000145B0 0000 0000                  	dc.l	Art_Sonic
000145B4 0000 0000                  	dc.l	Art_Sonic ; gronic
000145B8 0000 0000                  	dc.l	Art_Sonic ; anakama
000145BC 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
000145C0                            	; add pointers for player art here
000145C0                            
000145C0                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000145C0 7000                       		moveq	#0,d0
000145C2 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000145C6 B038 F766                  		cmp.b	($FFFFF766).w,d0
000145CA 6700                       		beq.s	locret_13C96
000145CC 11C0 F766                  		move.b	d0,($FFFFF766).w
000145D0                            		
000145D0 323C 0000                  		move.w	#0,d1
000145D4 1238 FFE8                  		move.b	(v_character),d1
000145D8 E549                       		lsl.w	#2,d1
000145DA 45FA FFC4                  		lea 	Player_DPLC(pc),a2
000145DE                            
000145DE 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
000145E2                            		
000145E2 D040                       		add.w	d0,d0
000145E4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000145E8 7200                       		moveq	#0,d1
000145EA 121A                       		move.b	(a2)+,d1	; read "number of entries" value
000145EC 5301                       		subq.b	#1,d1
000145EE 6B00                       		bmi.s	locret_13C96
000145F0 47F8 C800                  		lea	($FFFFC800).w,a3
000145F4 11FC 0001 F767             		move.b	#1,($FFFFF767).w
000145FA                            
000145FA                            SPLC_ReadEntry:
000145FA 303C 0000                  		move.w	#0,d0
000145FE 1038 FFE8                  		move.b	(v_character),d0
00014602 E548                       		lsl.w	#2,d0
00014604 43FA FFAA                  		lea 	Player_Art(pc),a1
00014608                            
00014608 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
0001460C                            
0001460C 7400                       		moveq	#0,d2
0001460E 141A                       		move.b	(a2)+,d2
00014610 3002                       		move.w	d2,d0
00014612 E808                       		lsr.b	#4,d0
00014614 E14A                       		lsl.w	#8,d2
00014616 141A                       		move.b	(a2)+,d2
00014618 EB4A                       		lsl.w	#5,d2
0001461A D3C2                       		adda.l	d2,a1
0001461C                            
0001461C                            SPLC_LoadTile:
0001461C 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014620 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014624 47EB 0020                  		lea	$20(a3),a3	; next tile
00014628 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
0001462C                            
0001462C 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014630                            
00014630                            locret_13C96:
00014630 4E75                       		rts	
00014632                            ; End of function LoadSonicDynPLC
00014632                            
00014632                            ; ===========================================================================
00014632                            ; ---------------------------------------------------------------------------
00014632                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014632                            ; ---------------------------------------------------------------------------
00014632                            
00014632                            Obj0A:					; XREF: Obj_Index
00014632 7000                       		moveq	#0,d0
00014634 1028 0024                  		move.b	$24(a0),d0
00014638 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001463C 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014640                            ; ===========================================================================
00014640 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014644 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014648 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001464C 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014650 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014652                            ; ===========================================================================
00014652                            
00014652                            Obj0A_Main:				; XREF: Obj0A_Index
00014652 5428 0024                  		addq.b	#2,$24(a0)
00014656 217C 0001 323A 0004        		move.l	#Map_obj64,4(a0)
0001465E 317C 8348 0002             		move.w	#$8348,2(a0)
00014664 117C 0084 0001             		move.b	#$84,1(a0)
0001466A 117C 0010 0019             		move.b	#$10,$19(a0)
00014670 117C 0001 0018             		move.b	#1,$18(a0)
00014676 1028 0028                  		move.b	$28(a0),d0
0001467A 6A00                       		bpl.s	loc_13D00
0001467C 5028 0024                  		addq.b	#8,$24(a0)
00014680 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014688 317C 0440 0002             		move.w	#$440,2(a0)
0001468E 0240 007F                  		andi.w	#$7F,d0
00014692 1140 0033                  		move.b	d0,$33(a0)
00014696 6000 0000                  		bra.w	Obj0A_Countdown
0001469A                            ; ===========================================================================
0001469A                            
0001469A                            loc_13D00:
0001469A 1140 001C                  		move.b	d0,$1C(a0)
0001469E 3168 0008 0030             		move.w	8(a0),$30(a0)
000146A4 317C FF78 0012             		move.w	#-$88,$12(a0)
000146AA                            
000146AA                            Obj0A_Animate:				; XREF: Obj0A_Index
000146AA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000146B0 4EB9 0000 AF22             		jsr	AnimateSprite
000146B6                            
000146B6                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000146B6 3038 F646                  		move.w	($FFFFF646).w,d0
000146BA B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000146BE 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000146C0 117C 0006 0024             		move.b	#6,$24(a0)
000146C6 5E28 001C                  		addq.b	#7,$1C(a0)
000146CA 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000146D0 6700                       		beq.s	Obj0A_Display
000146D2 6000                       		bra.s	Obj0A_Display
000146D4                            ; ===========================================================================
000146D4                            
000146D4                            Obj0A_Wobble:
000146D4 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000146D8 6700                       		beq.s	loc_13D44
000146DA 5868 0030                  		addq.w	#4,$30(a0)
000146DE                            
000146DE                            loc_13D44:
000146DE 1028 0026                  		move.b	$26(a0),d0
000146E2 5228 0026                  		addq.b	#1,$26(a0)
000146E6 0240 007F                  		andi.w	#$7F,d0
000146EA 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000146F0 1031 0000                  		move.b	(a1,d0.w),d0
000146F4 4880                       		ext.w	d0
000146F6 D068 0030                  		add.w	$30(a0),d0
000146FA 3140 0008                  		move.w	d0,8(a0)
000146FE 6100                       		bsr.s	Obj0A_ShowNumber
00014700 4EBA 9780                  		jsr	SpeedToPos
00014704 4A28 0001                  		tst.b	1(a0)
00014708 6A00                       		bpl.s	Obj0A_Delete
0001470A 4EFA 979C                  		jmp	DisplaySprite
0001470E                            ; ===========================================================================
0001470E                            
0001470E                            Obj0A_Delete:
0001470E 4EFA 97D4                  		jmp	DeleteObject
00014712                            ; ===========================================================================
00014712                            
00014712                            Obj0A_Display:				; XREF: Obj0A_Index
00014712 6100                       		bsr.s	Obj0A_ShowNumber
00014714 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001471A 4EB9 0000 AF22             		jsr	AnimateSprite
00014720 4EFA 9786                  		jmp	DisplaySprite
00014724                            ; ===========================================================================
00014724                            
00014724                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014724 4EFA 97BE                  		jmp	DeleteObject
00014728                            ; ===========================================================================
00014728                            
00014728                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014728 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001472E 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014730 5368 0038                  		subq.w	#1,$38(a0)
00014734 6600                       		bne.s	Obj0A_Display2
00014736 117C 000E 0024             		move.b	#$E,$24(a0)
0001473C 5E28 001C                  		addq.b	#7,$1C(a0)
00014740 60D0                       		bra.s	Obj0A_Display
00014742                            ; ===========================================================================
00014742                            
00014742                            Obj0A_Display2:
00014742 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014748 4EB9 0000 AF22             		jsr	AnimateSprite
0001474E 4A28 0001                  		tst.b	1(a0)
00014752 6A00                       		bpl.s	Obj0A_Delete3
00014754 4EFA 9752                  		jmp	DisplaySprite
00014758                            ; ===========================================================================
00014758                            
00014758                            Obj0A_Delete3:
00014758 4EFA 978A                  		jmp	DeleteObject
0001475C                            ; ===========================================================================
0001475C                            
0001475C                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001475C 4A68 0038                  		tst.w	$38(a0)
00014760 6700                       		beq.s	locret_13E1A
00014762 5368 0038                  		subq.w	#1,$38(a0)
00014766 6600                       		bne.s	locret_13E1A
00014768 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
0001476E 6400                       		bcc.s	locret_13E1A
00014770 317C 000F 0038             		move.w	#$F,$38(a0)
00014776 4268 0012                  		clr.w	$12(a0)
0001477A 117C 0080 0001             		move.b	#$80,1(a0)
00014780 3028 0008                  		move.w	8(a0),d0
00014784 9078 F700                  		sub.w	($FFFFF700).w,d0
00014788 0640 0080                  		addi.w	#$80,d0
0001478C 3140 0008                  		move.w	d0,8(a0)
00014790 3028 000C                  		move.w	$C(a0),d0
00014794 9078 F704                  		sub.w	($FFFFF704).w,d0
00014798 0640 0080                  		addi.w	#$80,d0
0001479C 3140 000A                  		move.w	d0,$A(a0)
000147A0 117C 000C 0024             		move.b	#$C,$24(a0)
000147A6                            
000147A6                            locret_13E1A:
000147A6 4E75                       		rts	
000147A8                            ; ===========================================================================
000147A8                            Obj0A_WobbleData:
000147A8 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000147B9 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000147CA 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000147DB 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000147EB FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000147F8 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014805 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014812 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001481F FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014828                            ; ===========================================================================
00014828                            
00014828                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014828 4A68 002C                  		tst.w	$2C(a0)
0001482C 6600 0000                  		bne.w	loc_13F86
00014830 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014836 6400 0000                  		bcc.w	locret_1408C
0001483A 0838 0006 D022             		btst	#6,($FFFFD022).w
00014840 6700 0000                  		beq.w	locret_1408C
00014844 5368 0038                  		subq.w	#1,$38(a0)
00014848 6A00 0000                  		bpl.w	loc_13FAC
0001484C 317C 003B 0038             		move.w	#59,$38(a0)
00014852 317C 0001 0036             		move.w	#1,$36(a0)
00014858 4EB9 0000 2D10             		jsr	(RandomNumber).l
0001485E 0240 0001                  		andi.w	#1,d0
00014862 1140 0034                  		move.b	d0,$34(a0)
00014866 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001486A 0C40 0019                  		cmpi.w	#$19,d0
0001486E 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014870 0C40 0014                  		cmpi.w	#$14,d0
00014874 6700                       		beq.s	Obj0A_WarnSound
00014876 0C40 000F                  		cmpi.w	#$F,d0
0001487A 6700                       		beq.s	Obj0A_WarnSound
0001487C 0C40 000C                  		cmpi.w	#$C,d0
00014880 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014882 6600                       		bne.s	loc_13F02
00014884 303C 0092                  		move.w	#$92,d0
00014888 4EB9 0000 15CC             		jsr	(PlaySound).l	; play countdown music
0001488E                            
0001488E                            loc_13F02:
0001488E 5328 0032                  		subq.b	#1,$32(a0)
00014892 6A00                       		bpl.s	Obj0A_ReduceAir
00014894 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001489A 08E8 0007 0036             		bset	#7,$36(a0)
000148A0 6000                       		bra.s	Obj0A_ReduceAir
000148A2                            ; ===========================================================================
000148A2                            
000148A2                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000148A2 303C 00C2                  		move.w	#$C2,d0
000148A6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000148AC                            
000148AC                            Obj0A_ReduceAir:
000148AC 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000148B0 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000148B4 6100 0000                  		bsr.w	ResumeMusic
000148B8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000148BE 303C 00B2                  		move.w	#$B2,d0
000148C2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play drowning sound
000148C8 117C 000A 0034             		move.b	#$A,$34(a0)
000148CE 317C 0001 0036             		move.w	#1,$36(a0)
000148D4 317C 0078 002C             		move.w	#$78,$2C(a0)
000148DA 2F08                       		move.l	a0,-(sp)
000148DC 41F8 D000                  		lea	($FFFFD000).w,a0
000148E0 6100 F80C                  		bsr.w	Sonic_ResetOnFloor
000148E4 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000148EA 08E8 0001 0022             		bset	#1,$22(a0)
000148F0 08E8 0007 0002             		bset	#7,2(a0)
000148F6 317C 0000 0012             		move.w	#0,$12(a0)
000148FC 317C 0000 0010             		move.w	#0,$10(a0)
00014902 317C 0000 0014             		move.w	#0,$14(a0)
00014908 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001490E 205F                       		movea.l	(sp)+,a0
00014910 4E75                       		rts	
00014912                            ; ===========================================================================
00014912                            
00014912                            loc_13F86:
00014912 5368 002C                  		subq.w	#1,$2C(a0)
00014916 6600                       		bne.s	loc_13F94
00014918 11FC 0006 D024             		move.b	#6,($FFFFD024).w
0001491E 4E75                       		rts	
00014920                            ; ===========================================================================
00014920                            
00014920                            loc_13F94:
00014920 2F08                       		move.l	a0,-(sp)
00014922 41F8 D000                  		lea	($FFFFD000).w,a0
00014926 4EBA 955A                  		jsr	SpeedToPos
0001492A 0668 0010 0012             		addi.w	#$10,$12(a0)
00014930 205F                       		movea.l	(sp)+,a0
00014932 6000                       		bra.s	loc_13FAC
00014934                            ; ===========================================================================
00014934                            
00014934                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014934 6000                       		bra.s	Obj0A_MakeItem
00014936                            ; ===========================================================================
00014936                            
00014936                            loc_13FAC:
00014936 4A68 0036                  		tst.w	$36(a0)
0001493A 6700 0000                  		beq.w	locret_1408C
0001493E 5368 003A                  		subq.w	#1,$3A(a0)
00014942 6A00 0000                  		bpl.w	locret_1408C
00014946                            
00014946                            Obj0A_MakeItem:
00014946 4EB9 0000 2D10             		jsr	(RandomNumber).l
0001494C 0240 000F                  		andi.w	#$F,d0
00014950 3140 003A                  		move.w	d0,$3A(a0)
00014954 4EBA 99D8                  		jsr	SingleObjLoad
00014958 6600 0000                  		bne.w	locret_1408C
0001495C 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014960 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014966 7006                       		moveq	#6,d0
00014968 0838 0000 D022             		btst	#0,($FFFFD022).w
0001496E 6700                       		beq.s	loc_13FF2
00014970 4440                       		neg.w	d0
00014972 137C 0040 0026             		move.b	#$40,$26(a1)
00014978                            
00014978                            loc_13FF2:
00014978 D169 0008                  		add.w	d0,8(a1)
0001497C 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014982 137C 0006 0028             		move.b	#6,$28(a1)
00014988 4A68 002C                  		tst.w	$2C(a0)
0001498C 6700 0000                  		beq.w	loc_1403E
00014990 0268 0007 003A             		andi.w	#7,$3A(a0)
00014996 0668 0000 003A             		addi.w	#0,$3A(a0)
0001499C 3038 D00C                  		move.w	($FFFFD00C).w,d0
000149A0 0440 000C                  		subi.w	#$C,d0
000149A4 3340 000C                  		move.w	d0,$C(a1)
000149A8 4EB9 0000 2D10             		jsr	(RandomNumber).l
000149AE 1340 0026                  		move.b	d0,$26(a1)
000149B2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000149B6 0200 0003                  		andi.b	#3,d0
000149BA 6600                       		bne.s	loc_14082
000149BC 137C 000E 0028             		move.b	#$E,$28(a1)
000149C2 6000                       		bra.s	loc_14082
000149C4                            ; ===========================================================================
000149C4                            
000149C4                            loc_1403E:
000149C4 0828 0007 0036             		btst	#7,$36(a0)
000149CA 6700                       		beq.s	loc_14082
000149CC 3438 FE14                  		move.w	($FFFFFE14).w,d2
000149D0 E24A                       		lsr.w	#1,d2
000149D2 4EB9 0000 2D10             		jsr	(RandomNumber).l
000149D8 0240 0003                  		andi.w	#3,d0
000149DC 6600                       		bne.s	loc_1406A
000149DE 08E8 0006 0036             		bset	#6,$36(a0)
000149E4 6600                       		bne.s	loc_14082
000149E6 1342 0028                  		move.b	d2,$28(a1)
000149EA 337C 001C 0038             		move.w	#$1C,$38(a1)
000149F0                            
000149F0                            loc_1406A:
000149F0 4A28 0034                  		tst.b	$34(a0)
000149F4 6600                       		bne.s	loc_14082
000149F6 08E8 0006 0036             		bset	#6,$36(a0)
000149FC 6600                       		bne.s	loc_14082
000149FE 1342 0028                  		move.b	d2,$28(a1)
00014A02 337C 001C 0038             		move.w	#$1C,$38(a1)
00014A08                            
00014A08                            loc_14082:
00014A08 5328 0034                  		subq.b	#1,$34(a0)
00014A0C 6A00                       		bpl.s	locret_1408C
00014A0E 4268 0036                  		clr.w	$36(a0)
00014A12                            
00014A12                            locret_1408C:
00014A12 4E75                       		rts	
00014A14                            
00014A14                            ; ---------------------------------------------------------------------------
00014A14                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014A14                            ; ---------------------------------------------------------------------------
00014A14                            
00014A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A14                            
00014A14                            
00014A14                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014A14 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014A1A                             
00014A1A                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014A1A                             
00014A1A 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014A1E                             
00014A1E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014A24 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014A26 43F9 0000 3CBC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014A2C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014A2E                             
00014A2E                            Air_GetBgm2:
00014A2E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014A34 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014A36 43F9 0000 3CC4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014A3C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014A3E                             
00014A3E                            Air_GetBgm3:
00014A3E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014A44 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014A46 43F9 0000 3CCA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014A4C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014A4E                             
00014A4E                            Air_GetBgm4:
00014A4E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014A54 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014A56 43F9 0000 3CD0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014A5C                             
00014A5C                            Air_PlayMusic:
00014A5C 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014A60                             
00014A60                            loc_140A6:
00014A60 4EB9 0000 15CC             		jsr	(PlaySound).l
00014A66                             
00014A66                            ; NineKode ends here
00014A66                            
00014A66                            loc_140AC:
00014A66 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014A6C 4238 D372                  		clr.b	($FFFFD372).w
00014A70 4E75                       		rts	
00014A72                            ; End of function ResumeMusic
00014A72                            
00014A72                            ; ===========================================================================
00014A72                            Ani_obj0A:
00014A72                            	include "_anim\obj0A.asm"
00014A72                            ; ---------------------------------------------------------------------------
00014A72                            ; Animation script - countdown numbers and bubbles (LZ)
00014A72                            ; ---------------------------------------------------------------------------
00014A72 0000                       		dc.w byte_140D6-Ani_obj0A
00014A74 0000                       		dc.w byte_140E0-Ani_obj0A
00014A76 0000                       		dc.w byte_140EA-Ani_obj0A
00014A78 0000                       		dc.w byte_140F4-Ani_obj0A
00014A7A 0000                       		dc.w byte_140FE-Ani_obj0A
00014A7C 0000                       		dc.w byte_14108-Ani_obj0A
00014A7E 0000                       		dc.w byte_14112-Ani_obj0A
00014A80 0000                       		dc.w byte_14118-Ani_obj0A
00014A82 0000                       		dc.w byte_14120-Ani_obj0A
00014A84 0000                       		dc.w byte_14128-Ani_obj0A
00014A86 0000                       		dc.w byte_14130-Ani_obj0A
00014A88 0000                       		dc.w byte_14138-Ani_obj0A
00014A8A 0000                       		dc.w byte_14140-Ani_obj0A
00014A8C 0000                       		dc.w byte_14148-Ani_obj0A
00014A8E 0000                       		dc.w byte_1414A-Ani_obj0A
00014A90 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014A9A 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014AA4 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014AAE 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014AB8 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014AC2 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014ACC 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014AD2 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014ADA 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014AE2 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014AEA 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014AF2 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014AFA 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014B02 0EFC                       byte_14148:	dc.b $E, $FC
00014B04 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014B0A                            		even
00014B0A                            		even
00014B0A                            
00014B0A                            ; ---------------------------------------------------------------------------
00014B0A                            ; Sprite mappings - drowning countdown numbers (LZ)
00014B0A                            ; ---------------------------------------------------------------------------
00014B0A                            Map_obj0A:
00014B0A                            	include "_maps\obj0A.asm"
00014B0A                            ; ---------------------------------------------------------------------------
00014B0A                            ; Sprite mappings - drowning countdown numbers (LZ)
00014B0A                            ; ---------------------------------------------------------------------------
00014B0A 0000                       		dc.w byte_14152-Map_obj0A
00014B0C 01                         byte_14152:	dc.b 1
00014B0D E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014B12                            		even
00014B12                            		even
00014B12                            
00014B12                            ; ===========================================================================
00014B12                            ; ---------------------------------------------------------------------------
00014B12                            ; Object 38 - shield and invincibility stars
00014B12                            ; ---------------------------------------------------------------------------
00014B12                            
00014B12                            Obj38:					; XREF: Obj_Index
00014B12 7000                       		moveq	#0,d0
00014B14 1028 0024                  		move.b	$24(a0),d0
00014B18 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014B1C 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014B20                            ; ===========================================================================
00014B20 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014B22 0000                       		dc.w Obj38_Shield-Obj38_Index
00014B24 0000                       		dc.w Obj38_Stars-Obj38_Index
00014B26                            ; ===========================================================================
00014B26                            
00014B26                            Obj38_Main:				; XREF: Obj38_Index
00014B26 5428 0024                  		addq.b	#2,$24(a0)
00014B2A 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014B32 117C 0004 0001             		move.b	#4,1(a0)
00014B38 117C 0001 0018             		move.b	#1,$18(a0)
00014B3E 117C 0010 0019             		move.b	#$10,$19(a0)
00014B44 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014B48 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014B4A 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014B50 4E75                       		rts	
00014B52                            ; ===========================================================================
00014B52                            
00014B52                            Obj38_DoStars:
00014B52 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014B56 317C 055C 0002             		move.w	#$55C,2(a0)
00014B5C 4E75                       		rts	
00014B5E                            ; ===========================================================================
00014B5E                            
00014B5E                            Obj38_Shield:				; XREF: Obj38_Index
00014B5E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014B62 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014B64 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014B68 6700                       		beq.s	Obj38_Delete	; if not, branch
00014B6A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014B70 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014B76 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B7C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014B82 4EB9 0000 AF22             		jsr	AnimateSprite
00014B88 4EFA 931E                  		jmp	DisplaySprite
00014B8C                            ; ===========================================================================
00014B8C                            
00014B8C                            Obj38_RmvShield:
00014B8C 4E75                       		rts	
00014B8E                            ; ===========================================================================
00014B8E                            
00014B8E                            Obj38_Delete:
00014B8E 4EFA 9354                  		jmp	DeleteObject
00014B92                            ; ===========================================================================
00014B92                            
00014B92                            Obj38_Stars:				; XREF: Obj38_Index
00014B92 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014B96 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014B98 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014B9C 1228 001C                  		move.b	$1C(a0),d1
00014BA0 5301                       		subq.b	#1,d1
00014BA2 6000                       		bra.s	Obj38_StarTrail
00014BA4                            ; ===========================================================================
00014BA4 E909                       		lsl.b	#4,d1
00014BA6 5801                       		addq.b	#4,d1
00014BA8 9001                       		sub.b	d1,d0
00014BAA 1228 0030                  		move.b	$30(a0),d1
00014BAE 9001                       		sub.b	d1,d0
00014BB0 5801                       		addq.b	#4,d1
00014BB2 0201 000F                  		andi.b	#$F,d1
00014BB6 1141 0030                  		move.b	d1,$30(a0)
00014BBA 6000                       		bra.s	Obj38_StarTrail2a
00014BBC                            ; ===========================================================================
00014BBC                            
00014BBC                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014BBC E709                       		lsl.b	#3,d1
00014BBE 1401                       		move.b	d1,d2
00014BC0 D201                       		add.b	d1,d1
00014BC2 D202                       		add.b	d2,d1
00014BC4 5801                       		addq.b	#4,d1
00014BC6 9001                       		sub.b	d1,d0
00014BC8 1228 0030                  		move.b	$30(a0),d1
00014BCC 9001                       		sub.b	d1,d0
00014BCE 5801                       		addq.b	#4,d1
00014BD0 0C01 0018                  		cmpi.b	#$18,d1
00014BD4 6500                       		bcs.s	Obj38_StarTrail2
00014BD6 7200                       		moveq	#0,d1
00014BD8                            
00014BD8                            Obj38_StarTrail2:
00014BD8 1141 0030                  		move.b	d1,$30(a0)
00014BDC                            
00014BDC                            Obj38_StarTrail2a:
00014BDC 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014BE0 43F1 0000                  		lea	(a1,d0.w),a1
00014BE4 3159 0008                  		move.w	(a1)+,8(a0)
00014BE8 3159 000C                  		move.w	(a1)+,$C(a0)
00014BEC 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014BF2 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014BF8 4EB9 0000 AF22             		jsr	AnimateSprite
00014BFE 4EFA 92A8                  		jmp	DisplaySprite
00014C02                            ; ===========================================================================
00014C02                            
00014C02                            Obj38_Delete2:				; XREF: Obj38_Stars
00014C02 4EFA 92E0                  		jmp	DeleteObject
00014C06                            ; ===========================================================================
00014C06                            ; ---------------------------------------------------------------------------
00014C06                            ; Object 4A - special stage entry from beta
00014C06                            ; ---------------------------------------------------------------------------
00014C06                            
00014C06                            Obj4A:					; XREF: Obj_Index
00014C06 7000                       		moveq	#0,d0
00014C08 1028 0024                  		move.b	$24(a0),d0
00014C0C 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014C10 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014C14                            ; ===========================================================================
00014C14 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014C16 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014C18 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014C1A                            ; ===========================================================================
00014C1A                            
00014C1A                            Obj4A_Main:				; XREF: Obj4A_Index
00014C1A 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014C1E 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014C20 4E75                       		rts	
00014C22                            ; ===========================================================================
00014C22                            
00014C22                            Obj4A_Main2:
00014C22 5428 0024                  		addq.b	#2,$24(a0)
00014C26 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014C2E 117C 0004 0001             		move.b	#4,1(a0)
00014C34 117C 0001 0018             		move.b	#1,$18(a0)
00014C3A 117C 0038 0019             		move.b	#$38,$19(a0)
00014C40 317C 0541 0002             		move.w	#$541,2(a0)
00014C46 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014C4C                            
00014C4C                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014C4C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014C52 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014C58 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014C5E 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014C64 4EB9 0000 AF22             		jsr	AnimateSprite
00014C6A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014C70 6600                       		bne.s	Obj4A_Display
00014C72 4A38 D000                  		tst.b	($FFFFD000).w
00014C76 6700                       		beq.s	Obj4A_Display
00014C78 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014C7E 303C 00A8                  		move.w	#$A8,d0
00014C82 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014C88                            
00014C88                            Obj4A_Display:
00014C88 4EFA 921E                  		jmp	DisplaySprite
00014C8C                            ; ===========================================================================
00014C8C                            
00014C8C                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014C8C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014C90 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014C92 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014C98 4EFA 924A                  		jmp	DeleteObject
00014C9C                            ; ===========================================================================
00014C9C                            
00014C9C                            Obj4A_Wait:
00014C9C 4E75                       		rts	
00014C9E                            ; ===========================================================================
00014C9E                            ; ---------------------------------------------------------------------------
00014C9E                            ; Object 08 - water splash (LZ)
00014C9E                            ; ---------------------------------------------------------------------------
00014C9E                            
00014C9E                            Obj08:					; XREF: Obj_Index
00014C9E 7000                       		moveq	#0,d0
00014CA0 1028 0024                  		move.b	$24(a0),d0
00014CA4 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014CA8 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014CAC                            ; ===========================================================================
00014CAC 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014CAE 0000                       		dc.w Obj08_Display-Obj08_Index
00014CB0 0000                       		dc.w Obj08_Delete-Obj08_Index
00014CB2                            ; ===========================================================================
00014CB2                            
00014CB2                            Obj08_Main:				; XREF: Obj08_Index
00014CB2 5428 0024                  		addq.b	#2,$24(a0)
00014CB6 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014CBE 0028 0004 0001             		ori.b	#4,1(a0)
00014CC4 117C 0001 0018             		move.b	#1,$18(a0)
00014CCA 117C 0010 0019             		move.b	#$10,$19(a0)
00014CD0 317C 4259 0002             		move.w	#$4259,2(a0)
00014CD6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014CDC                            
00014CDC                            Obj08_Display:				; XREF: Obj08_Index
00014CDC 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014CE2 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014CE8 4EB9 0000 AF22             		jsr	AnimateSprite
00014CEE 4EFA 91B8                  		jmp	DisplaySprite
00014CF2                            ; ===========================================================================
00014CF2                            
00014CF2                            Obj08_Delete:				; XREF: Obj08_Index
00014CF2 4EFA 91F0                  		jmp	DeleteObject	; delete when animation	is complete
00014CF6                            ; ===========================================================================
00014CF6                            Ani_obj38:
00014CF6                            	include "_anim\obj38.asm"
00014CF6                            ; ---------------------------------------------------------------------------
00014CF6                            ; Animation script - shield and invincibility stars
00014CF6                            ; ---------------------------------------------------------------------------
00014CF6 0000                       		dc.w byte_14356-Ani_obj38
00014CF8 0000                       		dc.w byte_1435E-Ani_obj38
00014CFA 0000                       		dc.w byte_14364-Ani_obj38
00014CFC 0000                       		dc.w byte_1437E-Ani_obj38
00014CFE 0000                       		dc.w byte_14398-Ani_obj38
00014D00 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014D08 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014D0E 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014D1F 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014D28 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014D39 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014D42 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014D53 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014D5C                            		even
00014D5C                            		even
00014D5C                            
00014D5C                            ; ---------------------------------------------------------------------------
00014D5C                            ; Sprite mappings - shield and invincibility stars
00014D5C                            ; ---------------------------------------------------------------------------
00014D5C                            Map_obj38:
00014D5C                            	include "_maps\obj38.asm"
00014D5C                            ; ---------------------------------------------------------------------------
00014D5C                            ; Sprite mappings - shield and invincibility stars
00014D5C                            ; ---------------------------------------------------------------------------
00014D5C 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014D60 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014D64 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014D68 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014D6C 04                         byte_143C2:	dc.b 4
00014D6D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014D72 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014D77 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014D7C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014D81 04                         byte_143D7:	dc.b 4
00014D82 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014D87 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014D8C 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014D91 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014D96 04                         byte_143EC:	dc.b 4
00014D97 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014D9C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014DA1 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014DA6 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014DAB 04                         byte_14401:	dc.b 4
00014DAC E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014DB1 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014DB6 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014DBB 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014DC0 04                         byte_14416:	dc.b 4
00014DC1 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014DC6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014DCB 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014DD0 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014DD5 04                         byte_1442B:	dc.b 4
00014DD6 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014DDB E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014DE0 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014DE5 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014DEA 04                         byte_14440:	dc.b 4
00014DEB E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014DF0 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014DF5 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014DFA 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014E00 00                         		even
00014E00 00                         		even
00014E00                            
00014E00                            Ani_obj4A:
00014E00                            	include "_anim\obj4A.asm"
00014E00                            ; ---------------------------------------------------------------------------
00014E00                            ; Animation script - special stage entry effect from beta
00014E00                            ; ---------------------------------------------------------------------------
00014E00 0000                       		dc.w byte_14458-Ani_obj4A
00014E02 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014E16                            		even
00014E16                            		even
00014E16                            
00014E16                            ; ---------------------------------------------------------------------------
00014E16                            ; Sprite mappings - special stage entry	from beta
00014E16                            ; ---------------------------------------------------------------------------
00014E16                            Map_obj4A:
00014E16                            	include "_maps\obj4A.asm"
00014E16                            ; ---------------------------------------------------------------------------
00014E16                            ; Sprite mappings - special stage entry	from beta
00014E16                            ; ---------------------------------------------------------------------------
00014E16 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014E1A 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014E1E 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014E22 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014E26 03                         byte_1447C:	dc.b 3
00014E27 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014E2C 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014E31 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014E36 03                         byte_1448C:	dc.b 3
00014E37 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014E3C 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014E41 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014E46 05                         byte_1449C:	dc.b 5
00014E47 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014E4C EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014E51 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014E56 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014E5B 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014E60 09                         byte_144B6:	dc.b 9
00014E61 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014E66 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014E6B 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014E70 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014E75 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014E7A F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014E7F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014E84 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014E89 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014E8E 12                         byte_144E4:	dc.b $12
00014E8F 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014E94 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014E99 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014E9E 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014EA3 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014EA8 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014EAD 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014EB2 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014EB7 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014EBC 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014EC1 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014EC6 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014ECB F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014ED0 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014ED5 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014EDA F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014EDF 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014EE4 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014EE9 11                         byte_1453F:	dc.b $11
00014EEA F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014EEF F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014EF4 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014EF9 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014EFE 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014F03 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014F08 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014F0D F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014F12 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014F17 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014F1C 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014F21 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014F26 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014F2B 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014F30 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014F35 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014F3A 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014F3F 09                         byte_14595:	dc.b 9
00014F40 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014F45 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014F4A 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014F4F 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014F54 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014F59 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014F5E 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014F63 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014F68 04                         		dc.b 4
00014F69 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014F6E                            		even
00014F6E                            		even
00014F6E                            
00014F6E                            Ani_obj08:
00014F6E                            	include "_anim\obj08.asm"
00014F6E                            ; ---------------------------------------------------------------------------
00014F6E                            ; Animation script - water splash (LZ)
00014F6E                            ; ---------------------------------------------------------------------------
00014F6E 0000                       		dc.w byte_145C6-Ani_obj08
00014F70 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014F76                            		even
00014F76                            		even
00014F76                            
00014F76                            ; ---------------------------------------------------------------------------
00014F76                            ; Sprite mappings - water splash (LZ)
00014F76                            ; ---------------------------------------------------------------------------
00014F76                            Map_obj08:
00014F76                            	include "_maps\obj08.asm"
00014F76                            ; ---------------------------------------------------------------------------
00014F76                            ; Sprite mappings - water splash (LZ)
00014F76                            ; ---------------------------------------------------------------------------
00014F76 0000                       		dc.w byte_145D2-Map_obj08
00014F78 0000                       		dc.w byte_145DD-Map_obj08
00014F7A 0000                       		dc.w byte_145E8-Map_obj08
00014F7C 02                         byte_145D2:	dc.b 2
00014F7D F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014F82 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014F87 02                         byte_145DD:	dc.b 2
00014F88 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014F8D EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014F92 01                         byte_145E8:	dc.b 1
00014F93 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014F98                            		even
00014F98                            		even
00014F98                            
00014F98                            ; ---------------------------------------------------------------------------
00014F98                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014F98                            ; ---------------------------------------------------------------------------
00014F98                            
00014F98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F98                            
00014F98                            
00014F98                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014F98 0828 0003 0022             		btst	#3,$22(a0)
00014F9E 6700                       		beq.s	loc_14602
00014FA0 7000                       		moveq	#0,d0
00014FA2 11C0 F768                  		move.b	d0,($FFFFF768).w
00014FA6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014FAA 4E75                       		rts	
00014FAC                            ; ===========================================================================
00014FAC                            
00014FAC                            loc_14602:
00014FAC 7003                       		moveq	#3,d0
00014FAE 11C0 F768                  		move.b	d0,($FFFFF768).w
00014FB2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014FB6 1028 0026                  		move.b	$26(a0),d0
00014FBA 0600 0020                  		addi.b	#$20,d0
00014FBE 6A00                       		bpl.s	loc_14624
00014FC0 1028 0026                  		move.b	$26(a0),d0
00014FC4 6A00                       		bpl.s	loc_1461E
00014FC6 5300                       		subq.b	#1,d0
00014FC8                            
00014FC8                            loc_1461E:
00014FC8 0600 0020                  		addi.b	#$20,d0
00014FCC 6000                       		bra.s	loc_14630
00014FCE                            ; ===========================================================================
00014FCE                            
00014FCE                            loc_14624:
00014FCE 1028 0026                  		move.b	$26(a0),d0
00014FD2 6A00                       		bpl.s	loc_1462C
00014FD4 5200                       		addq.b	#1,d0
00014FD6                            
00014FD6                            loc_1462C:
00014FD6 0600 001F                  		addi.b	#$1F,d0
00014FDA                            
00014FDA                            loc_14630:
00014FDA 0200 00C0                  		andi.b	#$C0,d0
00014FDE 0C00 0040                  		cmpi.b	#$40,d0
00014FE2 6700 0000                  		beq.w	Sonic_WalkVertL
00014FE6 0C00 0080                  		cmpi.b	#$80,d0
00014FEA 6700 0000                  		beq.w	Sonic_WalkCeiling
00014FEE 0C00 00C0                  		cmpi.b	#$C0,d0
00014FF2 6700 0000                  		beq.w	Sonic_WalkVertR
00014FF6 3428 000C                  		move.w	$C(a0),d2
00014FFA 3628 0008                  		move.w	8(a0),d3
00014FFE 7000                       		moveq	#0,d0
00015000 1028 0016                  		move.b	$16(a0),d0
00015004 4880                       		ext.w	d0
00015006 D440                       		add.w	d0,d2
00015008 1028 0017                  		move.b	$17(a0),d0
0001500C 4880                       		ext.w	d0
0001500E D640                       		add.w	d0,d3
00015010 49F8 F768                  		lea	($FFFFF768).w,a4
00015014 367C 0010                  		movea.w	#$10,a3
00015018 3C3C 0000                  		move.w	#0,d6
0001501C 7A0D                       		moveq	#$D,d5
0001501E 6100 0000                  		bsr.w	FindFloor
00015022 3F01                       		move.w	d1,-(sp)
00015024 3428 000C                  		move.w	$C(a0),d2
00015028 3628 0008                  		move.w	8(a0),d3
0001502C 7000                       		moveq	#0,d0
0001502E 1028 0016                  		move.b	$16(a0),d0
00015032 4880                       		ext.w	d0
00015034 D440                       		add.w	d0,d2
00015036 1028 0017                  		move.b	$17(a0),d0
0001503A 4880                       		ext.w	d0
0001503C 4440                       		neg.w	d0
0001503E D640                       		add.w	d0,d3
00015040 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015044 367C 0010                  		movea.w	#$10,a3
00015048 3C3C 0000                  		move.w	#0,d6
0001504C 7A0D                       		moveq	#$D,d5
0001504E 6100 0000                  		bsr.w	FindFloor
00015052 301F                       		move.w	(sp)+,d0
00015054 6100 0000                  		bsr.w	Sonic_Angle
00015058 4A41                       		tst.w	d1
0001505A 6700                       		beq.s	locret_146BE
0001505C 6A00                       		bpl.s	loc_146C0
0001505E 0C41 FFF2                  		cmpi.w	#-$E,d1
00015062 6D00                       		blt.s	locret_146E6
00015064 D368 000C                  		add.w	d1,$C(a0)
00015068                            
00015068                            locret_146BE:
00015068 4E75                       		rts	
0001506A                            ; ===========================================================================
0001506A                            
0001506A                            loc_146C0:
0001506A 0C41 000E                  		cmpi.w	#$E,d1
0001506E 6E00                       		bgt.s	loc_146CC
00015070                            
00015070                            loc_146C6:
00015070 D368 000C                  		add.w	d1,$C(a0)
00015074 4E75                       		rts	
00015076                            ; ===========================================================================
00015076                            
00015076                            loc_146CC:
00015076 4A28 0038                  		tst.b	$38(a0)
0001507A 66F4                       		bne.s	loc_146C6
0001507C 08E8 0001 0022             		bset	#1,$22(a0)
00015082 08A8 0005 0022             		bclr	#5,$22(a0)
00015088 117C 0001 001D             		move.b	#1,$1D(a0)
0001508E 4E75                       		rts	
00015090                            ; ===========================================================================
00015090                            
00015090                            locret_146E6:
00015090 4E75                       		rts	
00015092                            ; End of function Sonic_AnglePos
00015092                            
00015092                            ; ===========================================================================
00015092 2428 0008                  		move.l	8(a0),d2
00015096 3028 0010                  		move.w	$10(a0),d0
0001509A 48C0                       		ext.l	d0
0001509C E180                       		asl.l	#8,d0
0001509E 9480                       		sub.l	d0,d2
000150A0 2142 0008                  		move.l	d2,8(a0)
000150A4 303C 0038                  		move.w	#$38,d0
000150A8 48C0                       		ext.l	d0
000150AA E180                       		asl.l	#8,d0
000150AC 9680                       		sub.l	d0,d3
000150AE 2143 000C                  		move.l	d3,$C(a0)
000150B2 4E75                       		rts	
000150B4                            ; ===========================================================================
000150B4                            
000150B4                            locret_1470A:
000150B4 4E75                       		rts	
000150B6                            ; ===========================================================================
000150B6 2628 000C                  		move.l	$C(a0),d3
000150BA 3028 0012                  		move.w	$12(a0),d0
000150BE 0440 0038                  		subi.w	#$38,d0
000150C2 3140 0012                  		move.w	d0,$12(a0)
000150C6 48C0                       		ext.l	d0
000150C8 E180                       		asl.l	#8,d0
000150CA 9680                       		sub.l	d0,d3
000150CC 2143 000C                  		move.l	d3,$C(a0)
000150D0 4E75                       		rts	
000150D2 4E75                       		rts	
000150D4                            ; ===========================================================================
000150D4 2428 0008                  		move.l	8(a0),d2
000150D8 2628 000C                  		move.l	$C(a0),d3
000150DC 3028 0010                  		move.w	$10(a0),d0
000150E0 48C0                       		ext.l	d0
000150E2 E180                       		asl.l	#8,d0
000150E4 9480                       		sub.l	d0,d2
000150E6 3028 0012                  		move.w	$12(a0),d0
000150EA 48C0                       		ext.l	d0
000150EC E180                       		asl.l	#8,d0
000150EE 9680                       		sub.l	d0,d3
000150F0 2142 0008                  		move.l	d2,8(a0)
000150F4 2143 000C                  		move.l	d3,$C(a0)
000150F8 4E75                       		rts	
000150FA                            
000150FA                            ; ---------------------------------------------------------------------------
000150FA                            ; Subroutine to	change Sonic's angle as he walks along the floor
000150FA                            ; ---------------------------------------------------------------------------
000150FA                            
000150FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150FA                            
000150FA                            
000150FA                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000150FA 1438 F76A                  		move.b	($FFFFF76A).w,d2
000150FE B240                       		cmp.w	d0,d1
00015100 6F00                       		ble.s	loc_1475E
00015102 1438 F768                  		move.b	($FFFFF768).w,d2
00015106 3200                       		move.w	d0,d1
00015108                            
00015108                            loc_1475E:
00015108 0802 0000                  		btst	#0,d2
0001510C 6600                       		bne.s	loc_1476A
0001510E 1142 0026                  		move.b	d2,$26(a0)
00015112 4E75                       		rts	
00015114                            ; ===========================================================================
00015114                            
00015114                            loc_1476A:
00015114 1428 0026                  		move.b	$26(a0),d2
00015118 0602 0020                  		addi.b	#$20,d2
0001511C 0202 00C0                  		andi.b	#$C0,d2
00015120 1142 0026                  		move.b	d2,$26(a0)
00015124 4E75                       		rts	
00015126                            ; End of function Sonic_Angle
00015126                            
00015126                            ; ---------------------------------------------------------------------------
00015126                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00015126                            ; ---------------------------------------------------------------------------
00015126                            
00015126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015126                            
00015126                            
00015126                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00015126 3428 000C                  		move.w	$C(a0),d2
0001512A 3628 0008                  		move.w	8(a0),d3
0001512E 7000                       		moveq	#0,d0
00015130 1028 0017                  		move.b	$17(a0),d0
00015134 4880                       		ext.w	d0
00015136 4440                       		neg.w	d0
00015138 D440                       		add.w	d0,d2
0001513A 1028 0016                  		move.b	$16(a0),d0
0001513E 4880                       		ext.w	d0
00015140 D640                       		add.w	d0,d3
00015142 49F8 F768                  		lea	($FFFFF768).w,a4
00015146 367C 0010                  		movea.w	#$10,a3
0001514A 3C3C 0000                  		move.w	#0,d6
0001514E 7A0D                       		moveq	#$D,d5
00015150 6100 0000                  		bsr.w	FindWall
00015154 3F01                       		move.w	d1,-(sp)
00015156 3428 000C                  		move.w	$C(a0),d2
0001515A 3628 0008                  		move.w	8(a0),d3
0001515E 7000                       		moveq	#0,d0
00015160 1028 0017                  		move.b	$17(a0),d0
00015164 4880                       		ext.w	d0
00015166 D440                       		add.w	d0,d2
00015168 1028 0016                  		move.b	$16(a0),d0
0001516C 4880                       		ext.w	d0
0001516E D640                       		add.w	d0,d3
00015170 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015174 367C 0010                  		movea.w	#$10,a3
00015178 3C3C 0000                  		move.w	#0,d6
0001517C 7A0D                       		moveq	#$D,d5
0001517E 6100 0000                  		bsr.w	FindWall
00015182 301F                       		move.w	(sp)+,d0
00015184 6100 FF74                  		bsr.w	Sonic_Angle
00015188 4A41                       		tst.w	d1
0001518A 6700                       		beq.s	locret_147F0
0001518C 6A00                       		bpl.s	loc_147F2
0001518E 0C41 FFF2                  		cmpi.w	#-$E,d1
00015192 6D00 FF20                  		blt.w	locret_1470A
00015196 D368 0008                  		add.w	d1,8(a0)
0001519A                            
0001519A                            locret_147F0:
0001519A 4E75                       		rts	
0001519C                            ; ===========================================================================
0001519C                            
0001519C                            loc_147F2:
0001519C 0C41 000E                  		cmpi.w	#$E,d1
000151A0 6E00                       		bgt.s	loc_147FE
000151A2                            
000151A2                            loc_147F8:
000151A2 D368 0008                  		add.w	d1,8(a0)
000151A6 4E75                       		rts	
000151A8                            ; ===========================================================================
000151A8                            
000151A8                            loc_147FE:
000151A8 4A28 0038                  		tst.b	$38(a0)
000151AC 66F4                       		bne.s	loc_147F8
000151AE 08E8 0001 0022             		bset	#1,$22(a0)
000151B4 08A8 0005 0022             		bclr	#5,$22(a0)
000151BA 117C 0001 001D             		move.b	#1,$1D(a0)
000151C0 4E75                       		rts	
000151C2                            ; End of function Sonic_WalkVertR
000151C2                            
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            ; Subroutine allowing Sonic to walk upside-down
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            
000151C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151C2                            
000151C2                            
000151C2                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000151C2 3428 000C                  		move.w	$C(a0),d2
000151C6 3628 0008                  		move.w	8(a0),d3
000151CA 7000                       		moveq	#0,d0
000151CC 1028 0016                  		move.b	$16(a0),d0
000151D0 4880                       		ext.w	d0
000151D2 9440                       		sub.w	d0,d2
000151D4 0A42 000F                  		eori.w	#$F,d2
000151D8 1028 0017                  		move.b	$17(a0),d0
000151DC 4880                       		ext.w	d0
000151DE D640                       		add.w	d0,d3
000151E0 49F8 F768                  		lea	($FFFFF768).w,a4
000151E4 367C FFF0                  		movea.w	#-$10,a3
000151E8 3C3C 1000                  		move.w	#$1000,d6
000151EC 7A0D                       		moveq	#$D,d5
000151EE 6100 0000                  		bsr.w	FindFloor
000151F2 3F01                       		move.w	d1,-(sp)
000151F4 3428 000C                  		move.w	$C(a0),d2
000151F8 3628 0008                  		move.w	8(a0),d3
000151FC 7000                       		moveq	#0,d0
000151FE 1028 0016                  		move.b	$16(a0),d0
00015202 4880                       		ext.w	d0
00015204 9440                       		sub.w	d0,d2
00015206 0A42 000F                  		eori.w	#$F,d2
0001520A 1028 0017                  		move.b	$17(a0),d0
0001520E 4880                       		ext.w	d0
00015210 9640                       		sub.w	d0,d3
00015212 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015216 367C FFF0                  		movea.w	#-$10,a3
0001521A 3C3C 1000                  		move.w	#$1000,d6
0001521E 7A0D                       		moveq	#$D,d5
00015220 6100 0000                  		bsr.w	FindFloor
00015224 301F                       		move.w	(sp)+,d0
00015226 6100 FED2                  		bsr.w	Sonic_Angle
0001522A 4A41                       		tst.w	d1
0001522C 6700                       		beq.s	locret_14892
0001522E 6A00                       		bpl.s	loc_14894
00015230 0C41 FFF2                  		cmpi.w	#-$E,d1
00015234 6D00 FE5A                  		blt.w	locret_146E6
00015238 9368 000C                  		sub.w	d1,$C(a0)
0001523C                            
0001523C                            locret_14892:
0001523C 4E75                       		rts	
0001523E                            ; ===========================================================================
0001523E                            
0001523E                            loc_14894:
0001523E 0C41 000E                  		cmpi.w	#$E,d1
00015242 6E00                       		bgt.s	loc_148A0
00015244                            
00015244                            loc_1489A:
00015244 9368 000C                  		sub.w	d1,$C(a0)
00015248 4E75                       		rts	
0001524A                            ; ===========================================================================
0001524A                            
0001524A                            loc_148A0:
0001524A 4A28 0038                  		tst.b	$38(a0)
0001524E 66F4                       		bne.s	loc_1489A
00015250 08E8 0001 0022             		bset	#1,$22(a0)
00015256 08A8 0005 0022             		bclr	#5,$22(a0)
0001525C 117C 0001 001D             		move.b	#1,$1D(a0)
00015262 4E75                       		rts	
00015264                            ; End of function Sonic_WalkCeiling
00015264                            
00015264                            ; ---------------------------------------------------------------------------
00015264                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015264                            ; ---------------------------------------------------------------------------
00015264                            
00015264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015264                            
00015264                            
00015264                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00015264 3428 000C                  		move.w	$C(a0),d2
00015268 3628 0008                  		move.w	8(a0),d3
0001526C 7000                       		moveq	#0,d0
0001526E 1028 0017                  		move.b	$17(a0),d0
00015272 4880                       		ext.w	d0
00015274 9440                       		sub.w	d0,d2
00015276 1028 0016                  		move.b	$16(a0),d0
0001527A 4880                       		ext.w	d0
0001527C 9640                       		sub.w	d0,d3
0001527E 0A43 000F                  		eori.w	#$F,d3
00015282 49F8 F768                  		lea	($FFFFF768).w,a4
00015286 367C FFF0                  		movea.w	#-$10,a3
0001528A 3C3C 0800                  		move.w	#$800,d6
0001528E 7A0D                       		moveq	#$D,d5
00015290 6100 0000                  		bsr.w	FindWall
00015294 3F01                       		move.w	d1,-(sp)
00015296 3428 000C                  		move.w	$C(a0),d2
0001529A 3628 0008                  		move.w	8(a0),d3
0001529E 7000                       		moveq	#0,d0
000152A0 1028 0017                  		move.b	$17(a0),d0
000152A4 4880                       		ext.w	d0
000152A6 D440                       		add.w	d0,d2
000152A8 1028 0016                  		move.b	$16(a0),d0
000152AC 4880                       		ext.w	d0
000152AE 9640                       		sub.w	d0,d3
000152B0 0A43 000F                  		eori.w	#$F,d3
000152B4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000152B8 367C FFF0                  		movea.w	#-$10,a3
000152BC 3C3C 0800                  		move.w	#$800,d6
000152C0 7A0D                       		moveq	#$D,d5
000152C2 6100 0000                  		bsr.w	FindWall
000152C6 301F                       		move.w	(sp)+,d0
000152C8 6100 FE30                  		bsr.w	Sonic_Angle
000152CC 4A41                       		tst.w	d1
000152CE 6700                       		beq.s	locret_14934
000152D0 6A00                       		bpl.s	loc_14936
000152D2 0C41 FFF2                  		cmpi.w	#-$E,d1
000152D6 6D00 FDDC                  		blt.w	locret_1470A
000152DA 9368 0008                  		sub.w	d1,8(a0)
000152DE                            
000152DE                            locret_14934:
000152DE 4E75                       		rts	
000152E0                            ; ===========================================================================
000152E0                            
000152E0                            loc_14936:
000152E0 0C41 000E                  		cmpi.w	#$E,d1
000152E4 6E00                       		bgt.s	loc_14942
000152E6                            
000152E6                            loc_1493C:
000152E6 9368 0008                  		sub.w	d1,8(a0)
000152EA 4E75                       		rts	
000152EC                            ; ===========================================================================
000152EC                            
000152EC                            loc_14942:
000152EC 4A28 0038                  		tst.b	$38(a0)
000152F0 66F4                       		bne.s	loc_1493C
000152F2 08E8 0001 0022             		bset	#1,$22(a0)
000152F8 08A8 0005 0022             		bclr	#5,$22(a0)
000152FE 117C 0001 001D             		move.b	#1,$1D(a0)
00015304 4E75                       		rts	
00015306                            ; End of function Sonic_WalkVertL
00015306                            
00015306                            ; ---------------------------------------------------------------------------
00015306                            ; Subroutine to	find which tile	the object is standing on
00015306                            ; ---------------------------------------------------------------------------
00015306                            
00015306                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015306                            
00015306                            
00015306                            Floor_ChkTile:				; XREF: FindFloor; et al
00015306 3002                       		move.w	d2,d0
00015308 E248                       		lsr.w	#1,d0
0001530A 0240 0380                  		andi.w	#$380,d0
0001530E 3203                       		move.w	d3,d1
00015310 E049                       		lsr.w	#8,d1
00015312 0241 007F                  		andi.w	#$7F,d1
00015316 D041                       		add.w	d1,d0
00015318 72FF                       		moveq	#-1,d1
0001531A 43F8 A400                  		lea	($FFFFA400).w,a1
0001531E 1231 0000                  		move.b	(a1,d0.w),d1
00015322 6700                       		beq.s	loc_14996
00015324 6B00                       		bmi.s	loc_1499A
00015326 5301                       		subq.b	#1,d1
00015328 4881                       		ext.w	d1
0001532A EE59                       		ror.w	#7,d1
0001532C 3002                       		move.w	d2,d0
0001532E D040                       		add.w	d0,d0
00015330 0240 01E0                  		andi.w	#$1E0,d0
00015334 D240                       		add.w	d0,d1
00015336 3003                       		move.w	d3,d0
00015338 E648                       		lsr.w	#3,d0
0001533A 0240 001E                  		andi.w	#$1E,d0
0001533E D240                       		add.w	d0,d1
00015340                            
00015340                            loc_14996:
00015340 2241                       		movea.l	d1,a1
00015342 4E75                       		rts	
00015344                            ; ===========================================================================
00015344                            
00015344                            loc_1499A:
00015344 0241 007F                  		andi.w	#$7F,d1
00015348 0828 0006 0001             		btst	#6,1(a0)
0001534E 6700                       		beq.s	loc_149B2
00015350 5241                       		addq.w	#1,d1
00015352 0C41 0029                  		cmpi.w	#$29,d1
00015356 6600                       		bne.s	loc_149B2
00015358 323C 0051                  		move.w	#$51,d1
0001535C                            
0001535C                            loc_149B2:
0001535C 5301                       		subq.b	#1,d1
0001535E EE59                       		ror.w	#7,d1
00015360 3002                       		move.w	d2,d0
00015362 D040                       		add.w	d0,d0
00015364 0240 01E0                  		andi.w	#$1E0,d0
00015368 D240                       		add.w	d0,d1
0001536A 3003                       		move.w	d3,d0
0001536C E648                       		lsr.w	#3,d0
0001536E 0240 001E                  		andi.w	#$1E,d0
00015372 D240                       		add.w	d0,d1
00015374 2241                       		movea.l	d1,a1
00015376 4E75                       		rts	
00015378                            ; End of function Floor_ChkTile
00015378                            
00015378                            
00015378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015378                            
00015378                            
00015378                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015378 618C                       		bsr.s	Floor_ChkTile
0001537A 3011                       		move.w	(a1),d0
0001537C 3800                       		move.w	d0,d4
0001537E 0240 07FF                  		andi.w	#$7FF,d0
00015382 6700                       		beq.s	loc_149DE
00015384 0B04                       		btst	d5,d4
00015386 6600                       		bne.s	loc_149EC
00015388                            
00015388                            loc_149DE:
00015388 D44B                       		add.w	a3,d2
0001538A 6100 0000                  		bsr.w	FindFloor2
0001538E 944B                       		sub.w	a3,d2
00015390 0641 0010                  		addi.w	#$10,d1
00015394 4E75                       		rts	
00015396                            ; ===========================================================================
00015396                            
00015396                            loc_149EC:
00015396 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
0001539A 1032 0000                  		move.b	(a2,d0.w),d0
0001539E 0240 00FF                  		andi.w	#$FF,d0
000153A2 67E4                       		beq.s	loc_149DE
000153A4 45F9 0000 0000             		lea	(AngleMap).l,a2
000153AA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000153AE E948                       		lsl.w	#4,d0
000153B0 3203                       		move.w	d3,d1
000153B2 0804 000B                  		btst	#$B,d4
000153B6 6700                       		beq.s	loc_14A12
000153B8 4641                       		not.w	d1
000153BA 4414                       		neg.b	(a4)
000153BC                            
000153BC                            loc_14A12:
000153BC 0804 000C                  		btst	#$C,d4
000153C0 6700                       		beq.s	loc_14A22
000153C2 0614 0040                  		addi.b	#$40,(a4)
000153C6 4414                       		neg.b	(a4)
000153C8 0414 0040                  		subi.b	#$40,(a4)
000153CC                            
000153CC                            loc_14A22:
000153CC 0241 000F                  		andi.w	#$F,d1
000153D0 D240                       		add.w	d0,d1
000153D2 45F9 0000 0000             		lea	(CollArray1).l,a2
000153D8 1032 1000                  		move.b	(a2,d1.w),d0
000153DC 4880                       		ext.w	d0
000153DE BD44                       		eor.w	d6,d4
000153E0 0804 000C                  		btst	#$C,d4
000153E4 6700                       		beq.s	loc_14A3E
000153E6 4440                       		neg.w	d0
000153E8                            
000153E8                            loc_14A3E:
000153E8 4A40                       		tst.w	d0
000153EA 679C                       		beq.s	loc_149DE
000153EC 6B00                       		bmi.s	loc_14A5A
000153EE 0C00 0010                  		cmpi.b	#$10,d0
000153F2 6700                       		beq.s	loc_14A66
000153F4 3202                       		move.w	d2,d1
000153F6 0241 000F                  		andi.w	#$F,d1
000153FA D041                       		add.w	d1,d0
000153FC 323C 000F                  		move.w	#$F,d1
00015400 9240                       		sub.w	d0,d1
00015402 4E75                       		rts	
00015404                            ; ===========================================================================
00015404                            
00015404                            loc_14A5A:
00015404 3202                       		move.w	d2,d1
00015406 0241 000F                  		andi.w	#$F,d1
0001540A D041                       		add.w	d1,d0
0001540C 6A00 FF7A                  		bpl.w	loc_149DE
00015410                            
00015410                            loc_14A66:
00015410 944B                       		sub.w	a3,d2
00015412 6100 0000                  		bsr.w	FindFloor2
00015416 D44B                       		add.w	a3,d2
00015418 0441 0010                  		subi.w	#$10,d1
0001541C 4E75                       		rts	
0001541E                            ; End of function FindFloor
0001541E                            
0001541E                            
0001541E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001541E                            
0001541E                            
0001541E                            FindFloor2:				; XREF: FindFloor
0001541E 6100 FEE6                  		bsr.w	Floor_ChkTile
00015422 3011                       		move.w	(a1),d0
00015424 3800                       		move.w	d0,d4
00015426 0240 07FF                  		andi.w	#$7FF,d0
0001542A 6700                       		beq.s	loc_14A86
0001542C 0B04                       		btst	d5,d4
0001542E 6600                       		bne.s	loc_14A94
00015430                            
00015430                            loc_14A86:
00015430 323C 000F                  		move.w	#$F,d1
00015434 3002                       		move.w	d2,d0
00015436 0240 000F                  		andi.w	#$F,d0
0001543A 9240                       		sub.w	d0,d1
0001543C 4E75                       		rts	
0001543E                            ; ===========================================================================
0001543E                            
0001543E                            loc_14A94:
0001543E 2478 F796                  		movea.l	($FFFFF796).w,a2
00015442 1032 0000                  		move.b	(a2,d0.w),d0
00015446 0240 00FF                  		andi.w	#$FF,d0
0001544A 67E4                       		beq.s	loc_14A86
0001544C 45F9 0000 0000             		lea	(AngleMap).l,a2
00015452 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015456 E948                       		lsl.w	#4,d0
00015458 3203                       		move.w	d3,d1
0001545A 0804 000B                  		btst	#$B,d4
0001545E 6700                       		beq.s	loc_14ABA
00015460 4641                       		not.w	d1
00015462 4414                       		neg.b	(a4)
00015464                            
00015464                            loc_14ABA:
00015464 0804 000C                  		btst	#$C,d4
00015468 6700                       		beq.s	loc_14ACA
0001546A 0614 0040                  		addi.b	#$40,(a4)
0001546E 4414                       		neg.b	(a4)
00015470 0414 0040                  		subi.b	#$40,(a4)
00015474                            
00015474                            loc_14ACA:
00015474 0241 000F                  		andi.w	#$F,d1
00015478 D240                       		add.w	d0,d1
0001547A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015480 1032 1000                  		move.b	(a2,d1.w),d0
00015484 4880                       		ext.w	d0
00015486 BD44                       		eor.w	d6,d4
00015488 0804 000C                  		btst	#$C,d4
0001548C 6700                       		beq.s	loc_14AE6
0001548E 4440                       		neg.w	d0
00015490                            
00015490                            loc_14AE6:
00015490 4A40                       		tst.w	d0
00015492 679C                       		beq.s	loc_14A86
00015494 6B00                       		bmi.s	loc_14AFC
00015496 3202                       		move.w	d2,d1
00015498 0241 000F                  		andi.w	#$F,d1
0001549C D041                       		add.w	d1,d0
0001549E 323C 000F                  		move.w	#$F,d1
000154A2 9240                       		sub.w	d0,d1
000154A4 4E75                       		rts	
000154A6                            ; ===========================================================================
000154A6                            
000154A6                            loc_14AFC:
000154A6 3202                       		move.w	d2,d1
000154A8 0241 000F                  		andi.w	#$F,d1
000154AC D041                       		add.w	d1,d0
000154AE 6A00 FF80                  		bpl.w	loc_14A86
000154B2 4641                       		not.w	d1
000154B4 4E75                       		rts	
000154B6                            ; End of function FindFloor2
000154B6                            
000154B6                            
000154B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154B6                            
000154B6                            
000154B6                            FindWall:				; XREF: Sonic_WalkVertR; et al
000154B6 6100 FE4E                  		bsr.w	Floor_ChkTile
000154BA 3011                       		move.w	(a1),d0
000154BC 3800                       		move.w	d0,d4
000154BE 0240 07FF                  		andi.w	#$7FF,d0
000154C2 6700                       		beq.s	loc_14B1E
000154C4 0B04                       		btst	d5,d4
000154C6 6600                       		bne.s	loc_14B2C
000154C8                            
000154C8                            loc_14B1E:
000154C8 D64B                       		add.w	a3,d3
000154CA 6100 0000                  		bsr.w	FindWall2
000154CE 964B                       		sub.w	a3,d3
000154D0 0641 0010                  		addi.w	#$10,d1
000154D4 4E75                       		rts	
000154D6                            ; ===========================================================================
000154D6                            
000154D6                            loc_14B2C:
000154D6 2478 F796                  		movea.l	($FFFFF796).w,a2
000154DA 1032 0000                  		move.b	(a2,d0.w),d0
000154DE 0240 00FF                  		andi.w	#$FF,d0
000154E2 67E4                       		beq.s	loc_14B1E
000154E4 45F9 0000 0000             		lea	(AngleMap).l,a2
000154EA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000154EE E948                       		lsl.w	#4,d0
000154F0 3202                       		move.w	d2,d1
000154F2 0804 000C                  		btst	#$C,d4
000154F6 6700                       		beq.s	loc_14B5A
000154F8 4641                       		not.w	d1
000154FA 0614 0040                  		addi.b	#$40,(a4)
000154FE 4414                       		neg.b	(a4)
00015500 0414 0040                  		subi.b	#$40,(a4)
00015504                            
00015504                            loc_14B5A:
00015504 0804 000B                  		btst	#$B,d4
00015508 6700                       		beq.s	loc_14B62
0001550A 4414                       		neg.b	(a4)
0001550C                            
0001550C                            loc_14B62:
0001550C 0241 000F                  		andi.w	#$F,d1
00015510 D240                       		add.w	d0,d1
00015512 45F9 0000 0000             		lea	(CollArray2).l,a2
00015518 1032 1000                  		move.b	(a2,d1.w),d0
0001551C 4880                       		ext.w	d0
0001551E BD44                       		eor.w	d6,d4
00015520 0804 000B                  		btst	#$B,d4
00015524 6700                       		beq.s	loc_14B7E
00015526 4440                       		neg.w	d0
00015528                            
00015528                            loc_14B7E:
00015528 4A40                       		tst.w	d0
0001552A 679C                       		beq.s	loc_14B1E
0001552C 6B00                       		bmi.s	loc_14B9A
0001552E 0C00 0010                  		cmpi.b	#$10,d0
00015532 6700                       		beq.s	loc_14BA6
00015534 3203                       		move.w	d3,d1
00015536 0241 000F                  		andi.w	#$F,d1
0001553A D041                       		add.w	d1,d0
0001553C 323C 000F                  		move.w	#$F,d1
00015540 9240                       		sub.w	d0,d1
00015542 4E75                       		rts	
00015544                            ; ===========================================================================
00015544                            
00015544                            loc_14B9A:
00015544 3203                       		move.w	d3,d1
00015546 0241 000F                  		andi.w	#$F,d1
0001554A D041                       		add.w	d1,d0
0001554C 6A00 FF7A                  		bpl.w	loc_14B1E
00015550                            
00015550                            loc_14BA6:
00015550 964B                       		sub.w	a3,d3
00015552 6100 0000                  		bsr.w	FindWall2
00015556 D64B                       		add.w	a3,d3
00015558 0441 0010                  		subi.w	#$10,d1
0001555C 4E75                       		rts	
0001555E                            ; End of function FindWall
0001555E                            
0001555E                            
0001555E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001555E                            
0001555E                            
0001555E                            FindWall2:				; XREF: FindWall
0001555E 6100 FDA6                  		bsr.w	Floor_ChkTile
00015562 3011                       		move.w	(a1),d0
00015564 3800                       		move.w	d0,d4
00015566 0240 07FF                  		andi.w	#$7FF,d0
0001556A 6700                       		beq.s	loc_14BC6
0001556C 0B04                       		btst	d5,d4
0001556E 6600                       		bne.s	loc_14BD4
00015570                            
00015570                            loc_14BC6:
00015570 323C 000F                  		move.w	#$F,d1
00015574 3003                       		move.w	d3,d0
00015576 0240 000F                  		andi.w	#$F,d0
0001557A 9240                       		sub.w	d0,d1
0001557C 4E75                       		rts	
0001557E                            ; ===========================================================================
0001557E                            
0001557E                            loc_14BD4:
0001557E 2478 F796                  		movea.l	($FFFFF796).w,a2
00015582 1032 0000                  		move.b	(a2,d0.w),d0
00015586 0240 00FF                  		andi.w	#$FF,d0
0001558A 67E4                       		beq.s	loc_14BC6
0001558C 45F9 0000 0000             		lea	(AngleMap).l,a2
00015592 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015596 E948                       		lsl.w	#4,d0
00015598 3202                       		move.w	d2,d1
0001559A 0804 000C                  		btst	#$C,d4
0001559E 6700                       		beq.s	loc_14C02
000155A0 4641                       		not.w	d1
000155A2 0614 0040                  		addi.b	#$40,(a4)
000155A6 4414                       		neg.b	(a4)
000155A8 0414 0040                  		subi.b	#$40,(a4)
000155AC                            
000155AC                            loc_14C02:
000155AC 0804 000B                  		btst	#$B,d4
000155B0 6700                       		beq.s	loc_14C0A
000155B2 4414                       		neg.b	(a4)
000155B4                            
000155B4                            loc_14C0A:
000155B4 0241 000F                  		andi.w	#$F,d1
000155B8 D240                       		add.w	d0,d1
000155BA 45F9 0000 0000             		lea	(CollArray2).l,a2
000155C0 1032 1000                  		move.b	(a2,d1.w),d0
000155C4 4880                       		ext.w	d0
000155C6 BD44                       		eor.w	d6,d4
000155C8 0804 000B                  		btst	#$B,d4
000155CC 6700                       		beq.s	loc_14C26
000155CE 4440                       		neg.w	d0
000155D0                            
000155D0                            loc_14C26:
000155D0 4A40                       		tst.w	d0
000155D2 679C                       		beq.s	loc_14BC6
000155D4 6B00                       		bmi.s	loc_14C3C
000155D6 3203                       		move.w	d3,d1
000155D8 0241 000F                  		andi.w	#$F,d1
000155DC D041                       		add.w	d1,d0
000155DE 323C 000F                  		move.w	#$F,d1
000155E2 9240                       		sub.w	d0,d1
000155E4 4E75                       		rts	
000155E6                            ; ===========================================================================
000155E6                            
000155E6                            loc_14C3C:
000155E6 3203                       		move.w	d3,d1
000155E8 0241 000F                  		andi.w	#$F,d1
000155EC D041                       		add.w	d1,d0
000155EE 6A00 FF80                  		bpl.w	loc_14BC6
000155F2 4641                       		not.w	d1
000155F4 4E75                       		rts	
000155F6                            ; End of function FindWall2
000155F6                            
000155F6                            ; ---------------------------------------------------------------------------
000155F6                            ; Unused floor/wall subroutine - logs something	to do with collision
000155F6                            ; ---------------------------------------------------------------------------
000155F6                            
000155F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155F6                            
000155F6                            
000155F6                            FloorLog_Unk:				; XREF: Level
000155F6 4E75                       		rts	
000155F8                            
000155F8 43F9 0000 0000             		lea	(CollArray1).l,a1
000155FE 45F9 0000 0000             		lea	(CollArray1).l,a2
00015604 363C 00FF                  		move.w	#$FF,d3
00015608                            
00015608                            loc_14C5E:
00015608 7A10                       		moveq	#$10,d5
0001560A 343C 000F                  		move.w	#$F,d2
0001560E                            
0001560E                            loc_14C64:
0001560E 7800                       		moveq	#0,d4
00015610 323C 000F                  		move.w	#$F,d1
00015614                            
00015614                            loc_14C6A:
00015614 3019                       		move.w	(a1)+,d0
00015616 EAA8                       		lsr.l	d5,d0
00015618 D944                       		addx.w	d4,d4
0001561A 51C9 FFF8                  		dbf	d1,loc_14C6A
0001561E                            
0001561E 34C4                       		move.w	d4,(a2)+
00015620 92FC 0020                  		suba.w	#$20,a1
00015624 5345                       		subq.w	#1,d5
00015626 51CA FFE6                  		dbf	d2,loc_14C64
0001562A                            
0001562A D2FC 0020                  		adda.w	#$20,a1
0001562E 51CB FFD8                  		dbf	d3,loc_14C5E
00015632                            
00015632 43F9 0000 0000             		lea	(CollArray1).l,a1
00015638 45F9 0000 0000             		lea	(CollArray2).l,a2
0001563E 6100                       		bsr.s	FloorLog_Unk2
00015640 43F9 0000 0000             		lea	(CollArray1).l,a1
00015646 45F9 0000 0000             		lea	(CollArray1).l,a2
0001564C                            
0001564C                            ; End of function FloorLog_Unk
0001564C                            
0001564C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001564C                            
0001564C                            
0001564C                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001564C 363C 0FFF                  		move.w	#$FFF,d3
00015650                            
00015650                            loc_14CA6:
00015650 7400                       		moveq	#0,d2
00015652 323C 000F                  		move.w	#$F,d1
00015656 3019                       		move.w	(a1)+,d0
00015658 6700                       		beq.s	loc_14CD4
0001565A 6B00                       		bmi.s	loc_14CBE
0001565C                            
0001565C                            loc_14CB2:
0001565C E248                       		lsr.w	#1,d0
0001565E 6400                       		bcc.s	loc_14CB8
00015660 5202                       		addq.b	#1,d2
00015662                            
00015662                            loc_14CB8:
00015662 51C9 FFF8                  		dbf	d1,loc_14CB2
00015666                            
00015666 6000                       		bra.s	loc_14CD6
00015668                            ; ===========================================================================
00015668                            
00015668                            loc_14CBE:
00015668 0C40 FFFF                  		cmpi.w	#-1,d0
0001566C 6700                       		beq.s	loc_14CD0
0001566E                            
0001566E                            loc_14CC4:
0001566E E348                       		lsl.w	#1,d0
00015670 6400                       		bcc.s	loc_14CCA
00015672 5302                       		subq.b	#1,d2
00015674                            
00015674                            loc_14CCA:
00015674 51C9 FFF8                  		dbf	d1,loc_14CC4
00015678                            
00015678 6000                       		bra.s	loc_14CD6
0001567A                            ; ===========================================================================
0001567A                            
0001567A                            loc_14CD0:
0001567A 303C 0010                  		move.w	#$10,d0
0001567E                            
0001567E                            loc_14CD4:
0001567E 3400                       		move.w	d0,d2
00015680                            
00015680                            loc_14CD6:
00015680 14C2                       		move.b	d2,(a2)+
00015682 51CB FFCC                  		dbf	d3,loc_14CA6
00015686                            
00015686 4E75                       		rts	
00015688                            
00015688                            ; End of function FloorLog_Unk2
00015688                            
00015688                            
00015688                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015688                            
00015688                            
00015688                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015688 2628 0008                  		move.l	8(a0),d3
0001568C 2428 000C                  		move.l	$C(a0),d2
00015690 3228 0010                  		move.w	$10(a0),d1
00015694 48C1                       		ext.l	d1
00015696 E181                       		asl.l	#8,d1
00015698 D681                       		add.l	d1,d3
0001569A 3228 0012                  		move.w	$12(a0),d1
0001569E 48C1                       		ext.l	d1
000156A0 E181                       		asl.l	#8,d1
000156A2 D481                       		add.l	d1,d2
000156A4 4842                       		swap	d2
000156A6 4843                       		swap	d3
000156A8 11C0 F768                  		move.b	d0,($FFFFF768).w
000156AC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000156B0 1200                       		move.b	d0,d1
000156B2 0600 0020                  		addi.b	#$20,d0
000156B6 6A00                       		bpl.s	loc_14D1A
000156B8 1001                       		move.b	d1,d0
000156BA 6A00                       		bpl.s	loc_14D14
000156BC 5300                       		subq.b	#1,d0
000156BE                            
000156BE                            loc_14D14:
000156BE 0600 0020                  		addi.b	#$20,d0
000156C2 6000                       		bra.s	loc_14D24
000156C4                            ; ===========================================================================
000156C4                            
000156C4                            loc_14D1A:
000156C4 1001                       		move.b	d1,d0
000156C6 6A00                       		bpl.s	loc_14D20
000156C8 5200                       		addq.b	#1,d0
000156CA                            
000156CA                            loc_14D20:
000156CA 0600 001F                  		addi.b	#$1F,d0
000156CE                            
000156CE                            loc_14D24:
000156CE 0200 00C0                  		andi.b	#$C0,d0
000156D2 6700 0000                  		beq.w	loc_14DF0
000156D6 0C00 0080                  		cmpi.b	#$80,d0
000156DA 6700 0000                  		beq.w	loc_14F7C
000156DE 0201 0038                  		andi.b	#$38,d1
000156E2 6600                       		bne.s	loc_14D3C
000156E4 5042                       		addq.w	#8,d2
000156E6                            
000156E6                            loc_14D3C:
000156E6 0C00 0040                  		cmpi.b	#$40,d0
000156EA 6700 0000                  		beq.w	loc_1504A
000156EE 6000 0000                  		bra.w	loc_14EBC
000156F2                            
000156F2                            ; End of function Sonic_WalkSpeed
000156F2                            
000156F2                            
000156F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156F2                            
000156F2                            
000156F2                            sub_14D48:				; XREF: Sonic_Jump
000156F2 11C0 F768                  		move.b	d0,($FFFFF768).w
000156F6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000156FA 0600 0020                  		addi.b	#$20,d0
000156FE 0200 00C0                  		andi.b	#$C0,d0
00015702 0C00 0040                  		cmpi.b	#$40,d0
00015706 6700 0000                  		beq.w	loc_14FD6
0001570A 0C00 0080                  		cmpi.b	#$80,d0
0001570E 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015712 0C00 00C0                  		cmpi.b	#$C0,d0
00015716 6700 0000                  		beq.w	sub_14E50
0001571A                            
0001571A                            ; End of function sub_14D48
0001571A                            
0001571A                            ; ---------------------------------------------------------------------------
0001571A                            ; Subroutine to	make Sonic land	on the floor after jumping
0001571A                            ; ---------------------------------------------------------------------------
0001571A                            
0001571A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001571A                            
0001571A                            
0001571A                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001571A 3428 000C                  		move.w	$C(a0),d2
0001571E 3628 0008                  		move.w	8(a0),d3
00015722 7000                       		moveq	#0,d0
00015724 1028 0016                  		move.b	$16(a0),d0
00015728 4880                       		ext.w	d0
0001572A D440                       		add.w	d0,d2
0001572C 1028 0017                  		move.b	$17(a0),d0
00015730 4880                       		ext.w	d0
00015732 D640                       		add.w	d0,d3
00015734 49F8 F768                  		lea	($FFFFF768).w,a4
00015738 367C 0010                  		movea.w	#$10,a3
0001573C 3C3C 0000                  		move.w	#0,d6
00015740 7A0D                       		moveq	#$D,d5
00015742 6100 FC34                  		bsr.w	FindFloor
00015746 3F01                       		move.w	d1,-(sp)
00015748 3428 000C                  		move.w	$C(a0),d2
0001574C 3628 0008                  		move.w	8(a0),d3
00015750 7000                       		moveq	#0,d0
00015752 1028 0016                  		move.b	$16(a0),d0
00015756 4880                       		ext.w	d0
00015758 D440                       		add.w	d0,d2
0001575A 1028 0017                  		move.b	$17(a0),d0
0001575E 4880                       		ext.w	d0
00015760 9640                       		sub.w	d0,d3
00015762 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015766 367C 0010                  		movea.w	#$10,a3
0001576A 3C3C 0000                  		move.w	#0,d6
0001576E 7A0D                       		moveq	#$D,d5
00015770 6100 FC06                  		bsr.w	FindFloor
00015774 301F                       		move.w	(sp)+,d0
00015776 143C 0000                  		move.b	#0,d2
0001577A                            
0001577A                            loc_14DD0:
0001577A 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001577E B240                       		cmp.w	d0,d1
00015780 6F00                       		ble.s	loc_14DDE
00015782 1638 F768                  		move.b	($FFFFF768).w,d3
00015786 C141                       		exg	d0,d1
00015788                            
00015788                            loc_14DDE:
00015788 0803 0000                  		btst	#0,d3
0001578C 6700                       		beq.s	locret_14DE6
0001578E 1602                       		move.b	d2,d3
00015790                            
00015790                            locret_14DE6:
00015790 4E75                       		rts	
00015792                            
00015792                            ; End of function Sonic_HitFloor
00015792                            
00015792                            ; ===========================================================================
00015792 3428 000C                  		move.w	$C(a0),d2
00015796 3628 0008                  		move.w	8(a0),d3
0001579A                            
0001579A                            loc_14DF0:				; XREF: Sonic_WalkSpeed
0001579A 0642 000A                  		addi.w	#$A,d2
0001579E 49F8 F768                  		lea	($FFFFF768).w,a4
000157A2 367C 0010                  		movea.w	#$10,a3
000157A6 3C3C 0000                  		move.w	#0,d6
000157AA 7A0E                       		moveq	#$E,d5
000157AC 6100 FBCA                  		bsr.w	FindFloor
000157B0 143C 0000                  		move.b	#0,d2
000157B4                            
000157B4                            loc_14E0A:				; XREF: sub_14EB4
000157B4 1638 F768                  		move.b	($FFFFF768).w,d3
000157B8 0803 0000                  		btst	#0,d3
000157BC 6700                       		beq.s	locret_14E16
000157BE 1602                       		move.b	d2,d3
000157C0                            
000157C0                            locret_14E16:
000157C0 4E75                       		rts	
000157C2                            
000157C2                            ; ---------------------------------------------------------------------------
000157C2                            ; Subroutine allowing objects to interact with the floor
000157C2                            ; ---------------------------------------------------------------------------
000157C2                            
000157C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C2                            
000157C2                            
000157C2                            ObjHitFloor:
000157C2 3628 0008                  		move.w	8(a0),d3
000157C6                            
000157C6                            ; End of function ObjHitFloor
000157C6                            
000157C6                            
000157C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C6                            
000157C6                            
000157C6                            ObjHitFloor2:
000157C6 3428 000C                  		move.w	$C(a0),d2
000157CA 7000                       		moveq	#0,d0
000157CC 1028 0016                  		move.b	$16(a0),d0
000157D0 4880                       		ext.w	d0
000157D2 D440                       		add.w	d0,d2
000157D4 49F8 F768                  		lea	($FFFFF768).w,a4
000157D8 18BC 0000                  		move.b	#0,(a4)
000157DC 367C 0010                  		movea.w	#$10,a3
000157E0 3C3C 0000                  		move.w	#0,d6
000157E4 7A0D                       		moveq	#$D,d5
000157E6 6100 FB90                  		bsr.w	FindFloor
000157EA 1638 F768                  		move.b	($FFFFF768).w,d3
000157EE 0803 0000                  		btst	#0,d3
000157F2 6700                       		beq.s	locret_14E4E
000157F4 163C 0000                  		move.b	#0,d3
000157F8                            
000157F8                            locret_14E4E:
000157F8 4E75                       		rts	
000157FA                            ; End of function ObjHitFloor2
000157FA                            
000157FA                            
000157FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157FA                            
000157FA                            
000157FA                            sub_14E50:				; XREF: sub_14D48
000157FA 3428 000C                  		move.w	$C(a0),d2
000157FE 3628 0008                  		move.w	8(a0),d3
00015802 7000                       		moveq	#0,d0
00015804 1028 0017                  		move.b	$17(a0),d0
00015808 4880                       		ext.w	d0
0001580A 9440                       		sub.w	d0,d2
0001580C 1028 0016                  		move.b	$16(a0),d0
00015810 4880                       		ext.w	d0
00015812 D640                       		add.w	d0,d3
00015814 49F8 F768                  		lea	($FFFFF768).w,a4
00015818 367C 0010                  		movea.w	#$10,a3
0001581C 3C3C 0000                  		move.w	#0,d6
00015820 7A0E                       		moveq	#$E,d5
00015822 6100 FC92                  		bsr.w	FindWall
00015826 3F01                       		move.w	d1,-(sp)
00015828 3428 000C                  		move.w	$C(a0),d2
0001582C 3628 0008                  		move.w	8(a0),d3
00015830 7000                       		moveq	#0,d0
00015832 1028 0017                  		move.b	$17(a0),d0
00015836 4880                       		ext.w	d0
00015838 D440                       		add.w	d0,d2
0001583A 1028 0016                  		move.b	$16(a0),d0
0001583E 4880                       		ext.w	d0
00015840 D640                       		add.w	d0,d3
00015842 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015846 367C 0010                  		movea.w	#$10,a3
0001584A 3C3C 0000                  		move.w	#0,d6
0001584E 7A0E                       		moveq	#$E,d5
00015850 6100 FC64                  		bsr.w	FindWall
00015854 301F                       		move.w	(sp)+,d0
00015856 143C 00C0                  		move.b	#-$40,d2
0001585A 6000 FF1E                  		bra.w	loc_14DD0
0001585E                            
0001585E                            ; End of function sub_14E50
0001585E                            
0001585E                            
0001585E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001585E                            
0001585E                            
0001585E                            sub_14EB4:				; XREF: Sonic_Floor
0001585E 3428 000C                  		move.w	$C(a0),d2
00015862 3628 0008                  		move.w	8(a0),d3
00015866                            
00015866                            loc_14EBC:
00015866 0643 000A                  		addi.w	#$A,d3
0001586A 49F8 F768                  		lea	($FFFFF768).w,a4
0001586E 367C 0010                  		movea.w	#$10,a3
00015872 3C3C 0000                  		move.w	#0,d6
00015876 7A0E                       		moveq	#$E,d5
00015878 6100 FC3C                  		bsr.w	FindWall
0001587C 143C 00C0                  		move.b	#-$40,d2
00015880 6000 FF32                  		bra.w	loc_14E0A
00015884                            
00015884                            ; End of function sub_14EB4
00015884                            
00015884                            ; ---------------------------------------------------------------------------
00015884                            ; Subroutine to	detect when an object hits a wall to its right
00015884                            ; ---------------------------------------------------------------------------
00015884                            
00015884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015884                            
00015884                            
00015884                            ObjHitWallRight:
00015884 D668 0008                  		add.w	8(a0),d3
00015888 3428 000C                  		move.w	$C(a0),d2
0001588C 49F8 F768                  		lea	($FFFFF768).w,a4
00015890 18BC 0000                  		move.b	#0,(a4)
00015894 367C 0010                  		movea.w	#$10,a3
00015898 3C3C 0000                  		move.w	#0,d6
0001589C 7A0E                       		moveq	#$E,d5
0001589E 6100 FC16                  		bsr.w	FindWall
000158A2 1638 F768                  		move.b	($FFFFF768).w,d3
000158A6 0803 0000                  		btst	#0,d3
000158AA 6700                       		beq.s	locret_14F06
000158AC 163C 00C0                  		move.b	#-$40,d3
000158B0                            
000158B0                            locret_14F06:
000158B0 4E75                       		rts	
000158B2                            
000158B2                            ; End of function ObjHitWallRight
000158B2                            
000158B2                            ; ---------------------------------------------------------------------------
000158B2                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000158B2                            ; touches them
000158B2                            ; ---------------------------------------------------------------------------
000158B2                            
000158B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158B2                            
000158B2                            
000158B2                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000158B2 3428 000C                  		move.w	$C(a0),d2
000158B6 3628 0008                  		move.w	8(a0),d3
000158BA 7000                       		moveq	#0,d0
000158BC 1028 0016                  		move.b	$16(a0),d0
000158C0 4880                       		ext.w	d0
000158C2 9440                       		sub.w	d0,d2
000158C4 0A42 000F                  		eori.w	#$F,d2
000158C8 1028 0017                  		move.b	$17(a0),d0
000158CC 4880                       		ext.w	d0
000158CE D640                       		add.w	d0,d3
000158D0 49F8 F768                  		lea	($FFFFF768).w,a4
000158D4 367C FFF0                  		movea.w	#-$10,a3
000158D8 3C3C 1000                  		move.w	#$1000,d6
000158DC 7A0E                       		moveq	#$E,d5
000158DE 6100 FA98                  		bsr.w	FindFloor
000158E2 3F01                       		move.w	d1,-(sp)
000158E4 3428 000C                  		move.w	$C(a0),d2
000158E8 3628 0008                  		move.w	8(a0),d3
000158EC 7000                       		moveq	#0,d0
000158EE 1028 0016                  		move.b	$16(a0),d0
000158F2 4880                       		ext.w	d0
000158F4 9440                       		sub.w	d0,d2
000158F6 0A42 000F                  		eori.w	#$F,d2
000158FA 1028 0017                  		move.b	$17(a0),d0
000158FE 4880                       		ext.w	d0
00015900 9640                       		sub.w	d0,d3
00015902 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015906 367C FFF0                  		movea.w	#-$10,a3
0001590A 3C3C 1000                  		move.w	#$1000,d6
0001590E 7A0E                       		moveq	#$E,d5
00015910 6100 FA66                  		bsr.w	FindFloor
00015914 301F                       		move.w	(sp)+,d0
00015916 143C 0080                  		move.b	#-$80,d2
0001591A 6000 FE5E                  		bra.w	loc_14DD0
0001591E                            ; End of function Sonic_DontRunOnWalls
0001591E                            
0001591E                            ; ===========================================================================
0001591E 3428 000C                  		move.w	$C(a0),d2
00015922 3628 0008                  		move.w	8(a0),d3
00015926                            
00015926                            loc_14F7C:
00015926 0442 000A                  		subi.w	#$A,d2
0001592A 0A42 000F                  		eori.w	#$F,d2
0001592E 49F8 F768                  		lea	($FFFFF768).w,a4
00015932 367C FFF0                  		movea.w	#-$10,a3
00015936 3C3C 1000                  		move.w	#$1000,d6
0001593A 7A0E                       		moveq	#$E,d5
0001593C 6100 FA3A                  		bsr.w	FindFloor
00015940 143C 0080                  		move.b	#-$80,d2
00015944 6000 FE6E                  		bra.w	loc_14E0A
00015948                            
00015948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015948                            
00015948                            
00015948                            ObjHitCeiling:
00015948 3428 000C                  		move.w	$C(a0),d2
0001594C 3628 0008                  		move.w	8(a0),d3
00015950 7000                       		moveq	#0,d0
00015952 1028 0016                  		move.b	$16(a0),d0
00015956 4880                       		ext.w	d0
00015958 9440                       		sub.w	d0,d2
0001595A 0A42 000F                  		eori.w	#$F,d2
0001595E 49F8 F768                  		lea	($FFFFF768).w,a4
00015962 367C FFF0                  		movea.w	#-$10,a3
00015966 3C3C 1000                  		move.w	#$1000,d6
0001596A 7A0E                       		moveq	#$E,d5
0001596C 6100 FA0A                  		bsr.w	FindFloor
00015970 1638 F768                  		move.b	($FFFFF768).w,d3
00015974 0803 0000                  		btst	#0,d3
00015978 6700                       		beq.s	locret_14FD4
0001597A 163C 0080                  		move.b	#-$80,d3
0001597E                            
0001597E                            locret_14FD4:
0001597E 4E75                       		rts	
00015980                            ; End of function ObjHitCeiling
00015980                            
00015980                            ; ===========================================================================
00015980                            
00015980                            loc_14FD6:				; XREF: sub_14D48
00015980 3428 000C                  		move.w	$C(a0),d2
00015984 3628 0008                  		move.w	8(a0),d3
00015988 7000                       		moveq	#0,d0
0001598A 1028 0017                  		move.b	$17(a0),d0
0001598E 4880                       		ext.w	d0
00015990 9440                       		sub.w	d0,d2
00015992 1028 0016                  		move.b	$16(a0),d0
00015996 4880                       		ext.w	d0
00015998 9640                       		sub.w	d0,d3
0001599A 0A43 000F                  		eori.w	#$F,d3
0001599E 49F8 F768                  		lea	($FFFFF768).w,a4
000159A2 367C FFF0                  		movea.w	#-$10,a3
000159A6 3C3C 0800                  		move.w	#$800,d6
000159AA 7A0E                       		moveq	#$E,d5
000159AC 6100 FB08                  		bsr.w	FindWall
000159B0 3F01                       		move.w	d1,-(sp)
000159B2 3428 000C                  		move.w	$C(a0),d2
000159B6 3628 0008                  		move.w	8(a0),d3
000159BA 7000                       		moveq	#0,d0
000159BC 1028 0017                  		move.b	$17(a0),d0
000159C0 4880                       		ext.w	d0
000159C2 D440                       		add.w	d0,d2
000159C4 1028 0016                  		move.b	$16(a0),d0
000159C8 4880                       		ext.w	d0
000159CA 9640                       		sub.w	d0,d3
000159CC 0A43 000F                  		eori.w	#$F,d3
000159D0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000159D4 367C FFF0                  		movea.w	#-$10,a3
000159D8 3C3C 0800                  		move.w	#$800,d6
000159DC 7A0E                       		moveq	#$E,d5
000159DE 6100 FAD6                  		bsr.w	FindWall
000159E2 301F                       		move.w	(sp)+,d0
000159E4 143C 0040                  		move.b	#$40,d2
000159E8 6000 FD90                  		bra.w	loc_14DD0
000159EC                            
000159EC                            ; ---------------------------------------------------------------------------
000159EC                            ; Subroutine to	stop Sonic when	he jumps at a wall
000159EC                            ; ---------------------------------------------------------------------------
000159EC                            
000159EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159EC                            
000159EC                            
000159EC                            Sonic_HitWall:				; XREF: Sonic_Floor
000159EC 3428 000C                  		move.w	$C(a0),d2
000159F0 3628 0008                  		move.w	8(a0),d3
000159F4                            
000159F4                            loc_1504A:
000159F4 0443 000A                  		subi.w	#$A,d3
000159F8 0A43 000F                  		eori.w	#$F,d3
000159FC 49F8 F768                  		lea	($FFFFF768).w,a4
00015A00 367C FFF0                  		movea.w	#-$10,a3
00015A04 3C3C 0800                  		move.w	#$800,d6
00015A08 7A0E                       		moveq	#$E,d5
00015A0A 6100 FAAA                  		bsr.w	FindWall
00015A0E 143C 0040                  		move.b	#$40,d2
00015A12 6000 FDA0                  		bra.w	loc_14E0A
00015A16                            ; End of function Sonic_HitWall
00015A16                            
00015A16                            ; ---------------------------------------------------------------------------
00015A16                            ; Subroutine to	detect when an object hits a wall to its left
00015A16                            ; ---------------------------------------------------------------------------
00015A16                            
00015A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A16                            
00015A16                            
00015A16                            ObjHitWallLeft:
00015A16 D668 0008                  		add.w	8(a0),d3
00015A1A 3428 000C                  		move.w	$C(a0),d2
00015A1E 49F8 F768                  		lea	($FFFFF768).w,a4
00015A22 18BC 0000                  		move.b	#0,(a4)
00015A26 367C FFF0                  		movea.w	#-$10,a3
00015A2A 3C3C 0800                  		move.w	#$800,d6
00015A2E 7A0E                       		moveq	#$E,d5
00015A30 6100 FA84                  		bsr.w	FindWall
00015A34 1638 F768                  		move.b	($FFFFF768).w,d3
00015A38 0803 0000                  		btst	#0,d3
00015A3C 6700                       		beq.s	locret_15098
00015A3E 163C 0040                  		move.b	#$40,d3
00015A42                            
00015A42                            locret_15098:
00015A42 4E75                       		rts	
00015A44                            ; End of function ObjHitWallLeft
00015A44                            
00015A44                            ; ===========================================================================
00015A44                            ; ---------------------------------------------------------------------------
00015A44                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015A44                            ; ---------------------------------------------------------------------------
00015A44                            
00015A44                            Obj66:					; XREF: Obj_Index
00015A44 7000                       		moveq	#0,d0
00015A46 1028 0024                  		move.b	$24(a0),d0
00015A4A 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015A4E 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015A52                            ; ===========================================================================
00015A52 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015A54 0000                       		dc.w Obj66_Action-Obj66_Index
00015A56 0000                       		dc.w Obj66_Display-Obj66_Index
00015A58 0000                       		dc.w Obj66_Release-Obj66_Index
00015A5A                            ; ===========================================================================
00015A5A                            
00015A5A                            Obj66_Main:				; XREF: Obj66_Index
00015A5A 5428 0024                  		addq.b	#2,$24(a0)
00015A5E 323C 0001                  		move.w	#1,d1
00015A62 2248                       		movea.l	a0,a1
00015A64 6000                       		bra.s	Obj66_MakeItem
00015A66                            ; ===========================================================================
00015A66                            
00015A66                            Obj66_Loop:
00015A66 6100 88C6                  		bsr.w	SingleObjLoad
00015A6A 6600                       		bne.s	loc_150FE
00015A6C 12BC 0066                  		move.b	#$66,0(a1)
00015A70 5829 0024                  		addq.b	#4,$24(a1)
00015A74 3368 0008 0008             		move.w	8(a0),8(a1)
00015A7A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015A80 137C 0003 0018             		move.b	#3,$18(a1)
00015A86 137C 0010 001A             		move.b	#$10,$1A(a1)
00015A8C                            
00015A8C                            Obj66_MakeItem:				; XREF: Obj66_Main
00015A8C 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015A94 337C 4348 0002             		move.w	#$4348,2(a1)
00015A9A 0029 0004 0001             		ori.b	#4,1(a1)
00015AA0 137C 0038 0019             		move.b	#$38,$19(a1)
00015AA6                            
00015AA6                            loc_150FE:
00015AA6 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015AAA                            
00015AAA 117C 0030 0019             		move.b	#$30,$19(a0)
00015AB0 117C 0004 0018             		move.b	#4,$18(a0)
00015AB6 317C 003C 0030             		move.w	#$3C,$30(a0)
00015ABC 117C 0001 0034             		move.b	#1,$34(a0)
00015AC2 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015AC8                            
00015AC8                            Obj66_Action:				; XREF: Obj66_Index
00015AC8 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015ACC 4A28 0001                  		tst.b	1(a0)
00015AD0 6A00 0000                  		bpl.w	Obj66_Display
00015AD4 323C 0030                  		move.w	#$30,d1
00015AD8 3401                       		move.w	d1,d2
00015ADA 3602                       		move.w	d2,d3
00015ADC 5243                       		addq.w	#1,d3
00015ADE 3828 0008                  		move.w	8(a0),d4
00015AE2 6100 A794                  		bsr.w	SolidObject
00015AE6 0828 0005 0022             		btst	#5,$22(a0)
00015AEC 6700 0000                  		beq.w	Obj66_Display
00015AF0 43F8 D000                  		lea	($FFFFD000).w,a1
00015AF4 720E                       		moveq	#$E,d1
00015AF6 3029 0008                  		move.w	8(a1),d0
00015AFA B068 0008                  		cmp.w	8(a0),d0
00015AFE 6500                       		bcs.s	Obj66_GrabSonic
00015B00 7207                       		moveq	#7,d1
00015B02                            
00015B02                            Obj66_GrabSonic:
00015B02 B228 001A                  		cmp.b	$1A(a0),d1
00015B06 6600                       		bne.s	Obj66_Display
00015B08 1141 0032                  		move.b	d1,$32(a0)
00015B0C 5828 0024                  		addq.b	#4,$24(a0)
00015B10 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015B16 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015B1C 337C 0800 0014             		move.w	#$800,$14(a1)
00015B22 337C 0000 0010             		move.w	#0,$10(a1)
00015B28 337C 0000 0012             		move.w	#0,$12(a1)
00015B2E 08A8 0005 0022             		bclr	#5,$22(a0)
00015B34 08A9 0005 0022             		bclr	#5,$22(a1)
00015B3A 08E9 0001 0022             		bset	#1,$22(a1)
00015B40 3429 0008                  		move.w	8(a1),d2
00015B44 3629 000C                  		move.w	$C(a1),d3
00015B48 6100 0000                  		bsr.w	Obj66_ChgPos
00015B4C D569 0008                  		add.w	d2,8(a1)
00015B50 D769 000C                  		add.w	d3,$C(a1)
00015B54 E0E9 0008                  		asr	8(a1)
00015B58 E0E9 000C                  		asr	$C(a1)
00015B5C                            
00015B5C                            Obj66_Display:				; XREF: Obj66_Index
00015B5C 6000 A3F2                  		bra.w	MarkObjGone
00015B60                            ; ===========================================================================
00015B60                            
00015B60                            Obj66_Release:				; XREF: Obj66_Index
00015B60 1028 001A                  		move.b	$1A(a0),d0
00015B64 0C00 0004                  		cmpi.b	#4,d0
00015B68 6700                       		beq.s	loc_151C8
00015B6A 0C00 0007                  		cmpi.b	#7,d0
00015B6E 6600                       		bne.s	loc_151F8
00015B70                            
00015B70                            loc_151C8:
00015B70 B028 0032                  		cmp.b	$32(a0),d0
00015B74 6700                       		beq.s	loc_151F8
00015B76 43F8 D000                  		lea	($FFFFD000).w,a1
00015B7A 337C 0000 0010             		move.w	#0,$10(a1)
00015B80 337C 0800 0012             		move.w	#$800,$12(a1)
00015B86 0C00 0004                  		cmpi.b	#4,d0
00015B8A 6700                       		beq.s	loc_151F0
00015B8C 337C 0800 0010             		move.w	#$800,$10(a1)
00015B92 337C 0800 0012             		move.w	#$800,$12(a1)
00015B98                            
00015B98                            loc_151F0:
00015B98 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015B9C 5928 0024                  		subq.b	#4,$24(a0)
00015BA0                            
00015BA0                            loc_151F8:
00015BA0 6100                       		bsr.s	Obj66_ChkSwitch
00015BA2 6100                       		bsr.s	Obj66_ChgPos
00015BA4 6000 A3AA                  		bra.w	MarkObjGone
00015BA8                            
00015BA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BA8                            
00015BA8                            
00015BA8                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015BA8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015BAC 7000                       		moveq	#0,d0
00015BAE 1028 0038                  		move.b	$38(a0),d0
00015BB2 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015BB8 6700                       		beq.s	loc_15224	; if not, branch
00015BBA 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015BBE 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015BC0 4428 0034                  		neg.b	$34(a0)
00015BC4 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015BCA 6000                       		bra.s	Obj66_Animate
00015BCC                            ; ===========================================================================
00015BCC                            
00015BCC                            loc_15224:
00015BCC 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015BD0                            
00015BD0                            Obj66_Animate:
00015BD0 5328 001E                  		subq.b	#1,$1E(a0)
00015BD4 6A00                       		bpl.s	locret_15246
00015BD6 117C 0007 001E             		move.b	#7,$1E(a0)
00015BDC 1228 0034                  		move.b	$34(a0),d1
00015BE0 1028 001A                  		move.b	$1A(a0),d0
00015BE4 D001                       		add.b	d1,d0
00015BE6 0200 000F                  		andi.b	#$F,d0
00015BEA 1140 001A                  		move.b	d0,$1A(a0)
00015BEE                            
00015BEE                            locret_15246:
00015BEE 4E75                       		rts	
00015BF0                            ; End of function Obj66_ChkSwitch
00015BF0                            
00015BF0                            
00015BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BF0                            
00015BF0                            
00015BF0                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015BF0 43F8 D000                  		lea	($FFFFD000).w,a1
00015BF4 7000                       		moveq	#0,d0
00015BF6 1028 001A                  		move.b	$1A(a0),d0
00015BFA D040                       		add.w	d0,d0
00015BFC 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015C00 101A                       		move.b	(a2)+,d0
00015C02 4880                       		ext.w	d0
00015C04 D068 0008                  		add.w	8(a0),d0
00015C08 3340 0008                  		move.w	d0,8(a1)
00015C0C 101A                       		move.b	(a2)+,d0
00015C0E 4880                       		ext.w	d0
00015C10 D068 000C                  		add.w	$C(a0),d0
00015C14 3340 000C                  		move.w	d0,$C(a1)
00015C18 4E75                       		rts	
00015C1A                            ; End of function Obj66_ChgPos
00015C1A                            
00015C1A                            ; ===========================================================================
00015C1A E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015C1E E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015C22 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015C26 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015C2A 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015C2E 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015C32 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015C36 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015C3A                            ; ---------------------------------------------------------------------------
00015C3A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015C3A                            ; ---------------------------------------------------------------------------
00015C3A                            Map_obj66:
00015C3A                            	include "_maps\obj66.asm"
00015C3A                            ; ---------------------------------------------------------------------------
00015C3A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015C3A                            ; ---------------------------------------------------------------------------
00015C3A 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015C3E 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015C42 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015C46 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015C4A 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015C4E 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015C52 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015C56 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015C5A 0000                       		dc.w byte_154A4-Map_obj66
00015C5C 06                         byte_152B4:	dc.b 6
00015C5D E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015C62 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015C67 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015C6C E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015C71 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015C76 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015C7B 06                         byte_152D3:	dc.b 6
00015C7C F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015C81 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015C86 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015C8B F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015C90 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015C95 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015C9A 06                         byte_152F2:	dc.b 6
00015C9B 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015CA0 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015CA5 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015CAA 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015CAF 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015CB4 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015CB9 06                         byte_15311:	dc.b 6
00015CBA 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015CBF 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015CC4 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015CC9 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015CCE 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015CD3 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015CD8 06                         byte_15330:	dc.b 6
00015CD9 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015CDE 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015CE3 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015CE8 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015CED 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015CF2 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015CF7 06                         byte_1534F:	dc.b 6
00015CF8 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015CFD 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015D02 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015D07 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015D0C 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015D11 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015D16 06                         byte_1536E:	dc.b 6
00015D17 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015D1C 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015D21 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015D26 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015D2B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015D30 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015D35 06                         byte_1538D:	dc.b 6
00015D36 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015D3B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015D40 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015D45 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015D4A 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015D4F 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015D54 06                         byte_153AC:	dc.b 6
00015D55 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015D5A 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015D5F E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015D64 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015D69 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015D6E 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015D73 06                         byte_153CB:	dc.b 6
00015D74 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015D79 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015D7E DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015D83 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015D88 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015D8D F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015D92 06                         byte_153EA:	dc.b 6
00015D93 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015D98 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015D9D D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015DA2 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015DA7 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015DAC E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015DB1 06                         byte_15409:	dc.b 6
00015DB2 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015DB7 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015DBC CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015DC1 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015DC6 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015DCB E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015DD0 06                         byte_15428:	dc.b 6
00015DD1 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015DD6 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015DDB C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015DE0 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015DE5 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015DEA E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015DEF 06                         byte_15447:	dc.b 6
00015DF0 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015DF5 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015DFA CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015DFF CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015E04 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015E09 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015E0E 06                         byte_15466:	dc.b 6
00015E0F E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015E14 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015E19 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015E1E D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015E23 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015E28 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015E2D 06                         byte_15485:	dc.b 6
00015E2E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015E33 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015E38 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015E3D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015E42 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015E47 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015E4C 0C                         byte_154A4:	dc.b $C
00015E4D C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015E52 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015E57 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015E5C C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015E61 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015E66 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015E6B 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015E70 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015E75 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015E7A 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015E7F 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015E84 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015E8A 00                         		even
00015E8A 00                         		even
00015E8A                            
00015E8A                            ; ===========================================================================
00015E8A                            ; ---------------------------------------------------------------------------
00015E8A                            ; Object 67 - disc that	you run	around (SBZ)
00015E8A                            ; ---------------------------------------------------------------------------
00015E8A                            
00015E8A                            Obj67:					; XREF: Obj_Index
00015E8A 7000                       		moveq	#0,d0
00015E8C 1028 0024                  		move.b	$24(a0),d0
00015E90 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015E94 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015E98                            ; ===========================================================================
00015E98 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015E9A 0000                       		dc.w Obj67_Action-Obj67_Index
00015E9C                            ; ===========================================================================
00015E9C                            
00015E9C                            Obj67_Main:				; XREF: Obj67_Index
00015E9C 5428 0024                  		addq.b	#2,$24(a0)
00015EA0 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015EA8 317C C344 0002             		move.w	#$C344,2(a0)
00015EAE 117C 0004 0001             		move.b	#4,1(a0)
00015EB4 117C 0004 0018             		move.b	#4,$18(a0)
00015EBA 117C 0008 0019             		move.b	#8,$19(a0)
00015EC0 3168 0008 0032             		move.w	8(a0),$32(a0)
00015EC6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015ECC 117C 0018 0034             		move.b	#$18,$34(a0)
00015ED2 117C 0048 0038             		move.b	#$48,$38(a0)
00015ED8 1228 0028                  		move.b	$28(a0),d1	; get object type
00015EDC 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015EE0 6700                       		beq.s	loc_15546
00015EE2 117C 0010 0034             		move.b	#$10,$34(a0)
00015EE8 117C 0038 0038             		move.b	#$38,$38(a0)
00015EEE                            
00015EEE                            loc_15546:
00015EEE 1228 0028                  		move.b	$28(a0),d1	; get object type
00015EF2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015EF6 4881                       		ext.w	d1
00015EF8 E741                       		asl.w	#3,d1
00015EFA 3141 0036                  		move.w	d1,$36(a0)
00015EFE 1028 0022                  		move.b	$22(a0),d0
00015F02 E418                       		ror.b	#2,d0
00015F04 0200 00C0                  		andi.b	#-$40,d0
00015F08 1140 0026                  		move.b	d0,$26(a0)
00015F0C                            
00015F0C                            Obj67_Action:				; XREF: Obj67_Index
00015F0C 6100 0000                  		bsr.w	Obj67_MoveSonic
00015F10 6100 0000                  		bsr.w	Obj67_MoveSpot
00015F14 6000 0000                  		bra.w	Obj67_ChkDel
00015F18                            ; ===========================================================================
00015F18                            
00015F18                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015F18 7400                       		moveq	#0,d2
00015F1A 1428 0038                  		move.b	$38(a0),d2
00015F1E 3602                       		move.w	d2,d3
00015F20 D643                       		add.w	d3,d3
00015F22 43F8 D000                  		lea	($FFFFD000).w,a1
00015F26 3029 0008                  		move.w	8(a1),d0
00015F2A 9068 0032                  		sub.w	$32(a0),d0
00015F2E D042                       		add.w	d2,d0
00015F30 B043                       		cmp.w	d3,d0
00015F32 6400                       		bcc.s	loc_155A8
00015F34 3229 000C                  		move.w	$C(a1),d1
00015F38 9268 0030                  		sub.w	$30(a0),d1
00015F3C D242                       		add.w	d2,d1
00015F3E B243                       		cmp.w	d3,d1
00015F40 6400                       		bcc.s	loc_155A8
00015F42 0829 0001 0022             		btst	#1,$22(a1)
00015F48 6700                       		beq.s	loc_155B8
00015F4A 4228 003A                  		clr.b	$3A(a0)
00015F4E 4E75                       		rts	
00015F50                            ; ===========================================================================
00015F50                            
00015F50                            loc_155A8:
00015F50 4A28 003A                  		tst.b	$3A(a0)
00015F54 6700                       		beq.s	locret_155B6
00015F56 4229 0038                  		clr.b	$38(a1)
00015F5A 4228 003A                  		clr.b	$3A(a0)
00015F5E                            
00015F5E                            locret_155B6:
00015F5E 4E75                       		rts	
00015F60                            ; ===========================================================================
00015F60                            
00015F60                            loc_155B8:
00015F60 4A28 003A                  		tst.b	$3A(a0)
00015F64 6600                       		bne.s	loc_155E2
00015F66 117C 0001 003A             		move.b	#1,$3A(a0)
00015F6C 0829 0002 0022             		btst	#2,$22(a1)
00015F72 6600                       		bne.s	loc_155D0
00015F74 4229 001C                  		clr.b	$1C(a1)
00015F78                            
00015F78                            loc_155D0:
00015F78 08A9 0005 0022             		bclr	#5,$22(a1)
00015F7E 137C 0001 001D             		move.b	#1,$1D(a1)
00015F84 137C 0001 0038             		move.b	#1,$38(a1)
00015F8A                            
00015F8A                            loc_155E2:
00015F8A 3029 0014                  		move.w	$14(a1),d0
00015F8E 4A68 0036                  		tst.w	$36(a0)
00015F92 6A00                       		bpl.s	loc_15608
00015F94 0C40 FC00                  		cmpi.w	#-$400,d0
00015F98 6F00                       		ble.s	loc_155FA
00015F9A 337C FC00 0014             		move.w	#-$400,$14(a1)
00015FA0 4E75                       		rts	
00015FA2                            ; ===========================================================================
00015FA2                            
00015FA2                            loc_155FA:
00015FA2 0C40 F100                  		cmpi.w	#-$F00,d0
00015FA6 6C00                       		bge.s	locret_15606
00015FA8 337C F100 0014             		move.w	#-$F00,$14(a1)
00015FAE                            
00015FAE                            locret_15606:
00015FAE 4E75                       		rts	
00015FB0                            ; ===========================================================================
00015FB0                            
00015FB0                            loc_15608:
00015FB0 0C40 0400                  		cmpi.w	#$400,d0
00015FB4 6C00                       		bge.s	loc_15616
00015FB6 337C 0400 0014             		move.w	#$400,$14(a1)
00015FBC 4E75                       		rts	
00015FBE                            ; ===========================================================================
00015FBE                            
00015FBE                            loc_15616:
00015FBE 0C40 0F00                  		cmpi.w	#$F00,d0
00015FC2 6F00                       		ble.s	locret_15622
00015FC4 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015FCA                            
00015FCA                            locret_15622:
00015FCA 4E75                       		rts	
00015FCC                            ; ===========================================================================
00015FCC                            
00015FCC                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015FCC 3028 0036                  		move.w	$36(a0),d0
00015FD0 D168 0026                  		add.w	d0,$26(a0)
00015FD4 1028 0026                  		move.b	$26(a0),d0
00015FD8 4EB9 0000 2D36             		jsr	(CalcSine).l
00015FDE 3428 0030                  		move.w	$30(a0),d2
00015FE2 3628 0032                  		move.w	$32(a0),d3
00015FE6 7800                       		moveq	#0,d4
00015FE8 1828 0034                  		move.b	$34(a0),d4
00015FEC E14C                       		lsl.w	#8,d4
00015FEE 2A04                       		move.l	d4,d5
00015FF0 C9C0                       		muls.w	d0,d4
00015FF2 4844                       		swap	d4
00015FF4 CBC1                       		muls.w	d1,d5
00015FF6 4845                       		swap	d5
00015FF8 D842                       		add.w	d2,d4
00015FFA DA43                       		add.w	d3,d5
00015FFC 3144 000C                  		move.w	d4,$C(a0)
00016000 3145 0008                  		move.w	d5,8(a0)
00016004 4E75                       		rts	
00016006                            ; ===========================================================================
00016006                            
00016006                            Obj67_ChkDel:				; XREF: Obj67_Action
00016006 3028 0032                  		move.w	$32(a0),d0
0001600A 0240 FF80                  		andi.w	#-$80,d0
0001600E 3238 F700                  		move.w	($FFFFF700).w,d1
00016012 0441 0080                  		subi.w	#$80,d1
00016016 0241 FF80                  		andi.w	#-$80,d1
0001601A 9041                       		sub.w	d1,d0
0001601C 0C40 0280                  		cmpi.w	#$280,d0
00016020 6200                       		bhi.s	Obj67_Delete
00016022 4EF9 0000 DEA8             		jmp	DisplaySprite
00016028                            ; ===========================================================================
00016028                            
00016028                            Obj67_Delete:
00016028 4EF9 0000 DEE4             		jmp	DeleteObject
0001602E                            ; ===========================================================================
0001602E                            ; ---------------------------------------------------------------------------
0001602E                            ; Sprite mappings - disc that you run around (SBZ)
0001602E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001602E                            ; part of the level tiles.)
0001602E                            ; ---------------------------------------------------------------------------
0001602E                            Map_obj67:
0001602E                            	include "_maps\obj67.asm"
0001602E                            ; ---------------------------------------------------------------------------
0001602E                            ; Sprite mappings - disc that you run around (SBZ)
0001602E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001602E                            ; part of the level tiles.)
0001602E                            ; ---------------------------------------------------------------------------
0001602E 0000                       		dc.w byte_15688-Map_obj67
00016030 01                         byte_15688:	dc.b 1
00016031 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00016036                            		even
00016036                            		even
00016036                            
00016036                            ; ===========================================================================
00016036                            ; ---------------------------------------------------------------------------
00016036                            ; Object 68 - conveyor belts (SBZ)
00016036                            ; ---------------------------------------------------------------------------
00016036                            
00016036                            Obj68:					; XREF: Obj_Index
00016036 7000                       		moveq	#0,d0
00016038 1028 0024                  		move.b	$24(a0),d0
0001603C 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00016040 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00016044                            ; ===========================================================================
00016044 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00016046 0000                       		dc.w Obj68_Action-Obj68_Index
00016048                            ; ===========================================================================
00016048                            
00016048                            Obj68_Main:				; XREF: Obj68_Index
00016048 5428 0024                  		addq.b	#2,$24(a0)
0001604C 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00016052 1228 0028                  		move.b	$28(a0),d1	; get object type
00016056 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001605A 6700                       		beq.s	loc_156BA	; if zero, branch
0001605C 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00016062                            
00016062                            loc_156BA:
00016062 1228 0028                  		move.b	$28(a0),d1	; get object type
00016066 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001606A 4881                       		ext.w	d1
0001606C E841                       		asr.w	#4,d1
0001606E 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00016072                            
00016072                            Obj68_Action:				; XREF: Obj68_Index
00016072 6100                       		bsr.s	Obj68_MoveSonic
00016074 3028 0008                  		move.w	8(a0),d0
00016078 0240 FF80                  		andi.w	#$FF80,d0
0001607C 3238 F700                  		move.w	($FFFFF700).w,d1
00016080 0441 0080                  		subi.w	#$80,d1
00016084 0241 FF80                  		andi.w	#$FF80,d1
00016088 9041                       		sub.w	d1,d0
0001608A 0C40 0280                  		cmpi.w	#$280,d0
0001608E 6200                       		bhi.s	Obj68_Delete
00016090 4E75                       		rts	
00016092                            ; ===========================================================================
00016092                            
00016092                            Obj68_Delete:
00016092 4EF9 0000 DEE4             		jmp	DeleteObject
00016098                            ; ===========================================================================
00016098                            
00016098                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016098 7400                       		moveq	#0,d2
0001609A 1428 0038                  		move.b	$38(a0),d2
0001609E 3602                       		move.w	d2,d3
000160A0 D643                       		add.w	d3,d3
000160A2 43F8 D000                  		lea	($FFFFD000).w,a1
000160A6 3029 0008                  		move.w	8(a1),d0
000160AA 9068 0008                  		sub.w	8(a0),d0
000160AE D042                       		add.w	d2,d0
000160B0 B043                       		cmp.w	d3,d0
000160B2 6400                       		bcc.s	locret_1572E
000160B4 3229 000C                  		move.w	$C(a1),d1
000160B8 9268 000C                  		sub.w	$C(a0),d1
000160BC 0641 0030                  		addi.w	#$30,d1
000160C0 0C41 0030                  		cmpi.w	#$30,d1
000160C4 6400                       		bcc.s	locret_1572E
000160C6 0829 0001 0022             		btst	#1,$22(a1)
000160CC 6600                       		bne.s	locret_1572E
000160CE 3028 0036                  		move.w	$36(a0),d0
000160D2 D169 0008                  		add.w	d0,8(a1)
000160D6                            
000160D6                            locret_1572E:
000160D6 4E75                       		rts	
000160D8                            
000160D8                            ; ===========================================================================
000160D8                            ; ---------------------------------------------------------------------------
000160D8                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000160D8                            ; ---------------------------------------------------------------------------
000160D8                            
000160D8                            Obj69:					; XREF: Obj_Index
000160D8 7000                       		moveq	#0,d0
000160DA 1028 0024                  		move.b	$24(a0),d0
000160DE 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000160E2 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000160E6                            ; ===========================================================================
000160E6 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000160E8 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000160EA 0000                       		dc.w Obj69_Spinner-Obj69_Index
000160EC                            ; ===========================================================================
000160EC                            
000160EC                            Obj69_Main:				; XREF: Obj69_Index
000160EC 5428 0024                  		addq.b	#2,$24(a0)
000160F0 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000160F8 317C 4492 0002             		move.w	#$4492,2(a0)
000160FE 0028 0004 0001             		ori.b	#4,1(a0)
00016104 117C 0080 0019             		move.b	#$80,$19(a0)
0001610A 7000                       		moveq	#0,d0
0001610C 1028 0028                  		move.b	$28(a0),d0
00016110 0240 000F                  		andi.w	#$F,d0
00016114 C0FC 003C                  		mulu.w	#$3C,d0
00016118 3140 0032                  		move.w	d0,$32(a0)
0001611C 4A28 0028                  		tst.b	$28(a0)
00016120 6A00                       		bpl.s	Obj69_Trapdoor
00016122 5428 0024                  		addq.b	#2,$24(a0)
00016126 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001612E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016134 117C 0010 0019             		move.b	#$10,$19(a0)
0001613A 117C 0002 001C             		move.b	#2,$1C(a0)
00016140 7000                       		moveq	#0,d0
00016142 1028 0028                  		move.b	$28(a0),d0	; get object type
00016146 3200                       		move.w	d0,d1
00016148 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001614C C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016150 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00016154 3140 0032                  		move.w	d0,$32(a0)
00016158 0241 0070                  		andi.w	#$70,d1
0001615C 0641 0010                  		addi.w	#$10,d1
00016160 E549                       		lsl.w	#2,d1
00016162 5341                       		subq.w	#1,d1
00016164 3141 0036                  		move.w	d1,$36(a0)
00016168 6000                       		bra.s	Obj69_Spinner
0001616A                            ; ===========================================================================
0001616A                            
0001616A                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001616A 5368 0030                  		subq.w	#1,$30(a0)
0001616E 6A00                       		bpl.s	Obj69_Animate
00016170 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016176 0868 0000 001C             		bchg	#0,$1C(a0)
0001617C 4A28 0001                  		tst.b	1(a0)
00016180 6A00                       		bpl.s	Obj69_Animate
00016182 303C 00BB                  		move.w	#$BB,d0
00016186 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play door sound
0001618C                            
0001618C                            Obj69_Animate:
0001618C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016192 4EB9 0000 AF22             		jsr	AnimateSprite
00016198 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
0001619C 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0001619E 323C 004B                  		move.w	#$4B,d1
000161A2 343C 000C                  		move.w	#$C,d2
000161A6 3602                       		move.w	d2,d3
000161A8 5243                       		addq.w	#1,d3
000161AA 3828 0008                  		move.w	8(a0),d4
000161AE 6100 A0C8                  		bsr.w	SolidObject
000161B2 6000 9D9C                  		bra.w	MarkObjGone
000161B6                            ; ===========================================================================
000161B6                            
000161B6                            Obj69_NotSolid:
000161B6 0828 0003 0022             		btst	#3,$22(a0)
000161BC 6700                       		beq.s	Obj69_Display
000161BE 43F8 D000                  		lea	($FFFFD000).w,a1
000161C2 08A9 0003 0022             		bclr	#3,$22(a1)
000161C8 08A8 0003 0022             		bclr	#3,$22(a0)
000161CE 4228 0025                  		clr.b	$25(a0)
000161D2                            
000161D2                            Obj69_Display:
000161D2 6000 9D7C                  		bra.w	MarkObjGone
000161D6                            ; ===========================================================================
000161D6                            
000161D6                            Obj69_Spinner:				; XREF: Obj69_Index
000161D6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000161DA C068 0036                  		and.w	$36(a0),d0
000161DE 6600                       		bne.s	Obj69_Delay
000161E0 117C 0001 0034             		move.b	#1,$34(a0)
000161E6                            
000161E6                            Obj69_Delay:
000161E6 4A28 0034                  		tst.b	$34(a0)
000161EA 6700                       		beq.s	Obj69_Animate2
000161EC 5368 0030                  		subq.w	#1,$30(a0)
000161F0 6A00                       		bpl.s	Obj69_Animate2
000161F2 3168 0032 0030             		move.w	$32(a0),$30(a0)
000161F8 4228 0034                  		clr.b	$34(a0)
000161FC 0868 0000 001C             		bchg	#0,$1C(a0)
00016202                            
00016202                            Obj69_Animate2:
00016202 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016208 4EB9 0000 AF22             		jsr	AnimateSprite
0001620E 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00016212 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00016214 323C 001B                  		move.w	#$1B,d1
00016218 343C 0007                  		move.w	#7,d2
0001621C 3602                       		move.w	d2,d3
0001621E 5243                       		addq.w	#1,d3
00016220 3828 0008                  		move.w	8(a0),d4
00016224 6100 A052                  		bsr.w	SolidObject
00016228 6000 9D26                  		bra.w	MarkObjGone
0001622C                            ; ===========================================================================
0001622C                            
0001622C                            Obj69_NotSolid2:
0001622C 0828 0003 0022             		btst	#3,$22(a0)
00016232 6700                       		beq.s	Obj69_Display2
00016234 43F8 D000                  		lea	($FFFFD000).w,a1
00016238 08A9 0003 0022             		bclr	#3,$22(a1)
0001623E 08A8 0003 0022             		bclr	#3,$22(a0)
00016244 4228 0025                  		clr.b	$25(a0)
00016248                            
00016248                            Obj69_Display2:
00016248 6000 9D06                  		bra.w	MarkObjGone
0001624C                            ; ===========================================================================
0001624C                            Ani_obj69:
0001624C                            	include "_anim\obj69.asm"
0001624C                            ; ---------------------------------------------------------------------------
0001624C                            ; Animation script - trapdoor (SBZ)
0001624C                            ; ---------------------------------------------------------------------------
0001624C 0000                       		dc.w byte_158AC-Ani_obj69
0001624E 0000                       		dc.w byte_158B2-Ani_obj69
00016250 0000                       		dc.w byte_158B8-Ani_obj69
00016252 0000                       		dc.w byte_158CC-Ani_obj69
00016254 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001625A 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016260 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001626D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016274 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016281 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016288                            		even
00016288                            		even
00016288                            
00016288                            ; ---------------------------------------------------------------------------
00016288                            ; Sprite mappings - trapdoor (SBZ)
00016288                            ; ---------------------------------------------------------------------------
00016288                            Map_obj69:
00016288                            	include "_maps\obj69.asm"
00016288                            ; ---------------------------------------------------------------------------
00016288                            ; Sprite mappings - trapdoor (SBZ)
00016288                            ; ---------------------------------------------------------------------------
00016288 0000                       		dc.w byte_158E6-Map_obj69
0001628A 0000                       		dc.w byte_158FB-Map_obj69
0001628C 0000                       		dc.w byte_15924-Map_obj69
0001628E 04                         byte_158E6:	dc.b 4
0001628F F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016294 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016299 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001629E F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000162A3 08                         byte_158FB:	dc.b 8
000162A4 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000162A9 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000162AE 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000162B3 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000162B8 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000162BD 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000162C2 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000162C7 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000162CC 04                         byte_15924:	dc.b 4
000162CD 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000162D2 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000162D7 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000162DC 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000162E2 00                         		even
000162E2 00                         		even
000162E2                            
000162E2                            ; ---------------------------------------------------------------------------
000162E2                            ; Sprite mappings - spinning platforms (SBZ)
000162E2                            ; ---------------------------------------------------------------------------
000162E2                            Map_obj69a:
000162E2                            	include "_maps\obj69a.asm"
000162E2                            ; ---------------------------------------------------------------------------
000162E2                            ; Sprite mappings - spinning platforms (SBZ)
000162E2                            ; ---------------------------------------------------------------------------
000162E2 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000162E6 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000162EA 0000                       		dc.w byte_15970-Map_obj69a
000162EC 02                         byte_15944:	dc.b 2
000162ED F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000162F2 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000162F7 02                         byte_1594F:	dc.b 2
000162F8 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000162FD 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016302 02                         byte_1595A:	dc.b 2
00016303 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016308 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001630D 02                         byte_15965:	dc.b 2
0001630E F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016313 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016318 02                         byte_15970:	dc.b 2
00016319 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001631E 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00016324 00                         		even
00016324 00                         		even
00016324                            
00016324                            ; ===========================================================================
00016324                            ; ---------------------------------------------------------------------------
00016324                            ; Object 6A - ground saws and pizza cutters (SBZ)
00016324                            ; ---------------------------------------------------------------------------
00016324                            
00016324                            Obj6A:					; XREF: Obj_Index
00016324 7000                       		moveq	#0,d0
00016326 1028 0024                  		move.b	$24(a0),d0
0001632A 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0001632E 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016332                            ; ===========================================================================
00016332 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00016334 0000                       		dc.w Obj6A_Action-Obj6A_Index
00016336                            ; ===========================================================================
00016336                            
00016336                            Obj6A_Main:				; XREF: Obj6A_Index
00016336 5428 0024                  		addq.b	#2,$24(a0)
0001633A 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016342 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016348 117C 0004 0001             		move.b	#4,1(a0)
0001634E 117C 0004 0018             		move.b	#4,$18(a0)
00016354 117C 0020 0019             		move.b	#$20,$19(a0)
0001635A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016360 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016366 0C28 0003 0028             		cmpi.b	#3,$28(a0)
0001636C 6400                       		bcc.s	Obj6A_Action
0001636E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016374                            
00016374                            Obj6A_Action:				; XREF: Obj6A_Index
00016374 7000                       		moveq	#0,d0
00016376 1028 0028                  		move.b	$28(a0),d0
0001637A 0240 0007                  		andi.w	#7,d0
0001637E D040                       		add.w	d0,d0
00016380 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016384 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016388 3028 003A                  		move.w	$3A(a0),d0
0001638C 0240 FF80                  		andi.w	#$FF80,d0
00016390 3238 F700                  		move.w	($FFFFF700).w,d1
00016394 0441 0080                  		subi.w	#$80,d1
00016398 0241 FF80                  		andi.w	#$FF80,d1
0001639C 9041                       		sub.w	d1,d0
0001639E 0C40 0280                  		cmpi.w	#$280,d0
000163A2 6200                       		bhi.s	Obj6A_Delete
000163A4 4EF9 0000 DEA8             		jmp	DisplaySprite
000163AA                            ; ===========================================================================
000163AA                            
000163AA                            Obj6A_Delete:
000163AA 4EF9 0000 DEE4             		jmp	DeleteObject
000163B0                            ; ===========================================================================
000163B0 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000163B4 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000163B8 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000163BA                            ; ===========================================================================
000163BA                            
000163BA                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000163BA 4E75                       		rts	
000163BC                            ; ===========================================================================
000163BC                            
000163BC                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000163BC 323C 0060                  		move.w	#$60,d1
000163C0 7000                       		moveq	#0,d0
000163C2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000163C6 0828 0000 0022             		btst	#0,$22(a0)
000163CC 6700                       		beq.s	Obj6A_Animate01
000163CE 4440                       		neg.w	d0
000163D0 D041                       		add.w	d1,d0
000163D2                            
000163D2                            Obj6A_Animate01:
000163D2 3228 003A                  		move.w	$3A(a0),d1
000163D6 9240                       		sub.w	d0,d1
000163D8 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000163DC 5328 001E                  		subq.b	#1,$1E(a0)
000163E0 6A00                       		bpl.s	loc_15A46
000163E2 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000163E8 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000163EE                            
000163EE                            loc_15A46:
000163EE 4A28 0001                  		tst.b	1(a0)
000163F2 6A00                       		bpl.s	locret_15A60
000163F4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000163F8 0240 000F                  		andi.w	#$F,d0
000163FC 6600                       		bne.s	locret_15A60
000163FE 303C 00B0                  		move.w	#$B0,d0
00016402 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
00016408                            
00016408                            locret_15A60:
00016408 4E75                       		rts	
0001640A                            ; ===========================================================================
0001640A                            
0001640A                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001640A 323C 0030                  		move.w	#$30,d1
0001640E 7000                       		moveq	#0,d0
00016410 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016414 0828 0000 0022             		btst	#0,$22(a0)
0001641A 6700                       		beq.s	Obj6A_Animate02
0001641C 4440                       		neg.w	d0
0001641E 0640 0080                  		addi.w	#$80,d0
00016422                            
00016422                            Obj6A_Animate02:
00016422 3228 0038                  		move.w	$38(a0),d1
00016426 9240                       		sub.w	d0,d1
00016428 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
0001642C 5328 001E                  		subq.b	#1,$1E(a0)
00016430 6A00                       		bpl.s	loc_15A96
00016432 117C 0002 001E             		move.b	#2,$1E(a0)
00016438 0868 0000 001A             		bchg	#0,$1A(a0)
0001643E                            
0001643E                            loc_15A96:
0001643E 4A28 0001                  		tst.b	1(a0)
00016442 6A00                       		bpl.s	locret_15AB0
00016444 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016448 0C00 0018                  		cmpi.b	#$18,d0
0001644C 6600                       		bne.s	locret_15AB0
0001644E 303C 00B0                  		move.w	#$B0,d0
00016452 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
00016458                            
00016458                            locret_15AB0:
00016458 4E75                       		rts	
0001645A                            ; ===========================================================================
0001645A                            
0001645A                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001645A 4A28 003D                  		tst.b	$3D(a0)
0001645E 6600                       		bne.s	Obj6A_Animate03
00016460 3038 D008                  		move.w	($FFFFD008).w,d0
00016464 0440 00C0                  		subi.w	#$C0,d0
00016468 6500                       		bcs.s	loc_15B02
0001646A 9068 0008                  		sub.w	8(a0),d0
0001646E 6500                       		bcs.s	loc_15B02
00016470 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016474 0440 0080                  		subi.w	#$80,d0
00016478 B068 000C                  		cmp.w	$C(a0),d0
0001647C 6400                       		bcc.s	locret_15B04
0001647E 0640 0100                  		addi.w	#$100,d0
00016482 B068 000C                  		cmp.w	$C(a0),d0
00016486 6500                       		bcs.s	locret_15B04
00016488 117C 0001 003D             		move.b	#1,$3D(a0)
0001648E 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016494 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001649A 117C 0002 001A             		move.b	#2,$1A(a0)
000164A0 303C 00B0                  		move.w	#$B0,d0
000164A4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
000164AA                            
000164AA                            loc_15B02:
000164AA 588F                       		addq.l	#4,sp
000164AC                            
000164AC                            locret_15B04:
000164AC 4E75                       		rts	
000164AE                            ; ===========================================================================
000164AE                            
000164AE                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000164AE 4EB9 0000 DE82             		jsr	SpeedToPos
000164B4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000164BA 5328 001E                  		subq.b	#1,$1E(a0)
000164BE 6A00                       		bpl.s	locret_15B24
000164C0 117C 0002 001E             		move.b	#2,$1E(a0)
000164C6 0868 0000 001A             		bchg	#0,$1A(a0)
000164CC                            
000164CC                            locret_15B24:
000164CC 4E75                       		rts	
000164CE                            ; ===========================================================================
000164CE                            
000164CE                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000164CE 4A28 003D                  		tst.b	$3D(a0)
000164D2 6600                       		bne.s	Obj6A_Animate04
000164D4 3038 D008                  		move.w	($FFFFD008).w,d0
000164D8 0640 00E0                  		addi.w	#$E0,d0
000164DC 9068 0008                  		sub.w	8(a0),d0
000164E0 6400                       		bcc.s	loc_15B74
000164E2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000164E6 0440 0080                  		subi.w	#$80,d0
000164EA B068 000C                  		cmp.w	$C(a0),d0
000164EE 6400                       		bcc.s	locret_15B76
000164F0 0640 0100                  		addi.w	#$100,d0
000164F4 B068 000C                  		cmp.w	$C(a0),d0
000164F8 6500                       		bcs.s	locret_15B76
000164FA 117C 0001 003D             		move.b	#1,$3D(a0)
00016500 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016506 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001650C 117C 0002 001A             		move.b	#2,$1A(a0)
00016512 303C 00B0                  		move.w	#$B0,d0
00016516 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
0001651C                            
0001651C                            loc_15B74:
0001651C 588F                       		addq.l	#4,sp
0001651E                            
0001651E                            locret_15B76:
0001651E 4E75                       		rts	
00016520                            ; ===========================================================================
00016520                            
00016520                            Obj6A_Animate04:
00016520 4EB9 0000 DE82             		jsr	SpeedToPos
00016526 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001652C 5328 001E                  		subq.b	#1,$1E(a0)
00016530 6A00                       		bpl.s	locret_15B96
00016532 117C 0002 001E             		move.b	#2,$1E(a0)
00016538 0868 0000 001A             		bchg	#0,$1A(a0)
0001653E                            
0001653E                            locret_15B96:
0001653E 4E75                       		rts	
00016540                            ; ===========================================================================
00016540                            ; ---------------------------------------------------------------------------
00016540                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016540                            ; ---------------------------------------------------------------------------
00016540                            Map_obj6A:
00016540                            	include "_maps\obj6A.asm"
00016540                            ; ---------------------------------------------------------------------------
00016540                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016540                            ; ---------------------------------------------------------------------------
00016540 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016544 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016548 07                         byte_15BA0:	dc.b 7
00016549 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001654E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016553 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016558 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001655D E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016562 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016567 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001656C 07                         byte_15BC4:	dc.b 7
0001656D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016572 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016577 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001657C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016581 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016586 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001658B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016590 04                         byte_15BE8:	dc.b 4
00016591 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016596 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001659B 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000165A0 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000165A5 04                         byte_15BFD:	dc.b 4
000165A6 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000165AB E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000165B0 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000165B5 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000165BA                            		even
000165BA                            		even
000165BA                            
000165BA                            ; ===========================================================================
000165BA                            ; ---------------------------------------------------------------------------
000165BA                            ; Object 6B - stomper (SBZ)
000165BA                            ; ---------------------------------------------------------------------------
000165BA                            
000165BA                            Obj6B:					; XREF: Obj_Index
000165BA 7000                       		moveq	#0,d0
000165BC 1028 0024                  		move.b	$24(a0),d0
000165C0 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000165C4 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000165C8                            ; ===========================================================================
000165C8 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000165CA 0000                       		dc.w Obj6B_Action-Obj6B_Index
000165CC                            
000165CC 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000165D0 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000165D4 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000165D8 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000165DC 8040 0005                  		dc.b  $80, $40,	  0,   5
000165E0                            ; ===========================================================================
000165E0                            
000165E0                            Obj6B_Main:				; XREF: Obj6B_Index
000165E0 5428 0024                  		addq.b	#2,$24(a0)
000165E4 7000                       		moveq	#0,d0
000165E6 1028 0028                  		move.b	$28(a0),d0
000165EA E448                       		lsr.w	#2,d0
000165EC 0240 001C                  		andi.w	#$1C,d0
000165F0 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000165F4 115B 0019                  		move.b	(a3)+,$19(a0)
000165F8 115B 0016                  		move.b	(a3)+,$16(a0)
000165FC E448                       		lsr.w	#2,d0
000165FE 1140 001A                  		move.b	d0,$1A(a0)
00016602 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001660A 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016610 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016616 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016618 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0001661E 6700                       		beq.s	Obj6B_SBZ3
00016620                            
00016620                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016620 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016624 7000                       		moveq	#0,d0
00016626 1028 0023                  		move.b	$23(a0),d0
0001662A 6700                       		beq.s	Obj6B_Delete
0001662C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016632                            
00016632                            Obj6B_Delete:
00016632 4EF9 0000 DEE4             		jmp	DeleteObject
00016638                            ; ===========================================================================
00016638                            
00016638                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016638 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001663E 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016644 6600                       		bne.s	Obj6B_SBZ12
00016646 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001664A 7000                       		moveq	#0,d0
0001664C 1028 0023                  		move.b	$23(a0),d0
00016650 6700                       		beq.s	Obj6B_SBZ12
00016652 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016658 6700                       		beq.s	Obj6B_SBZ12
0001665A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001665E 60C0                       		bra.s	Obj6B_ChkGone
00016660                            ; ===========================================================================
00016660                            
00016660                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016660 0028 0004 0001             		ori.b	#4,1(a0)
00016666 117C 0004 0018             		move.b	#4,$18(a0)
0001666C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016672 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016678 7000                       		moveq	#0,d0
0001667A 101B                       		move.b	(a3)+,d0
0001667C 3140 003C                  		move.w	d0,$3C(a0)
00016680 7000                       		moveq	#0,d0
00016682 1028 0028                  		move.b	$28(a0),d0
00016686 6A00                       		bpl.s	Obj6B_Action
00016688 0200 000F                  		andi.b	#$F,d0
0001668C 1140 003E                  		move.b	d0,$3E(a0)
00016690 1153 0028                  		move.b	(a3),$28(a0)
00016694 0C13 0005                  		cmpi.b	#5,(a3)
00016698 6600                       		bne.s	Obj6B_ChkGone2
0001669A 08E8 0004 0001             		bset	#4,1(a0)
000166A0                            
000166A0                            Obj6B_ChkGone2:
000166A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000166A4 7000                       		moveq	#0,d0
000166A6 1028 0023                  		move.b	$23(a0),d0
000166AA 6700                       		beq.s	Obj6B_Action
000166AC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000166B2                            
000166B2                            Obj6B_Action:				; XREF: Obj6B_Index
000166B2 3F28 0008                  		move.w	8(a0),-(sp)
000166B6 7000                       		moveq	#0,d0
000166B8 1028 0028                  		move.b	$28(a0),d0
000166BC 0240 000F                  		andi.w	#$F,d0
000166C0 D040                       		add.w	d0,d0
000166C2 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000166C6 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000166CA 381F                       		move.w	(sp)+,d4
000166CC 4A28 0001                  		tst.b	1(a0)
000166D0 6A00                       		bpl.s	Obj6B_ChkDel
000166D2 7200                       		moveq	#0,d1
000166D4 1228 0019                  		move.b	$19(a0),d1
000166D8 0641 000B                  		addi.w	#$B,d1
000166DC 7400                       		moveq	#0,d2
000166DE 1428 0016                  		move.b	$16(a0),d2
000166E2 3602                       		move.w	d2,d3
000166E4 5243                       		addq.w	#1,d3
000166E6 6100 9B90                  		bsr.w	SolidObject
000166EA                            
000166EA                            Obj6B_ChkDel:
000166EA 3028 0034                  		move.w	$34(a0),d0
000166EE 0240 FF80                  		andi.w	#$FF80,d0
000166F2 3238 F700                  		move.w	($FFFFF700).w,d1
000166F6 0441 0080                  		subi.w	#$80,d1
000166FA 0241 FF80                  		andi.w	#$FF80,d1
000166FE 9041                       		sub.w	d1,d0
00016700 0C40 0280                  		cmpi.w	#$280,d0
00016704 6200                       		bhi.s	loc_15D64
00016706 4EF9 0000 DEA8             		jmp	DisplaySprite
0001670C                            ; ===========================================================================
0001670C                            
0001670C                            loc_15D64:
0001670C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016712 6600                       		bne.s	Obj6B_Delete2
00016714 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016718 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001671C 7000                       		moveq	#0,d0
0001671E 1028 0023                  		move.b	$23(a0),d0
00016722 6700                       		beq.s	Obj6B_Delete2
00016724 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001672A                            
0001672A                            Obj6B_Delete2:
0001672A 4EF9 0000 DEE4             		jmp	DeleteObject
00016730                            ; ===========================================================================
00016730 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016734 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016738 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001673C                            ; ===========================================================================
0001673C                            
0001673C                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001673C 4E75                       		rts	
0001673E                            ; ===========================================================================
0001673E                            
0001673E                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001673E 4A28 0038                  		tst.b	$38(a0)
00016742 6600                       		bne.s	loc_15DB4
00016744 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016748 7000                       		moveq	#0,d0
0001674A 1028 003E                  		move.b	$3E(a0),d0
0001674E 0832 0000 0000             		btst	#0,(a2,d0.w)
00016754 6700                       		beq.s	loc_15DC2
00016756 117C 0001 0038             		move.b	#1,$38(a0)
0001675C                            
0001675C                            loc_15DB4:
0001675C 3028 003C                  		move.w	$3C(a0),d0
00016760 B068 003A                  		cmp.w	$3A(a0),d0
00016764 6700                       		beq.s	loc_15DE0
00016766 5468 003A                  		addq.w	#2,$3A(a0)
0001676A                            
0001676A                            loc_15DC2:
0001676A 3028 003A                  		move.w	$3A(a0),d0
0001676E 0828 0000 0022             		btst	#0,$22(a0)
00016774 6700                       		beq.s	loc_15DD4
00016776 4440                       		neg.w	d0
00016778 0640 0080                  		addi.w	#$80,d0
0001677C                            
0001677C                            loc_15DD4:
0001677C 3228 0034                  		move.w	$34(a0),d1
00016780 9240                       		sub.w	d0,d1
00016782 3141 0008                  		move.w	d1,8(a0)
00016786 4E75                       		rts	
00016788                            ; ===========================================================================
00016788                            
00016788                            loc_15DE0:
00016788 5228 0028                  		addq.b	#1,$28(a0)
0001678C 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016792 4228 0038                  		clr.b	$38(a0)
00016796 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001679A 7000                       		moveq	#0,d0
0001679C 1028 0023                  		move.b	$23(a0),d0
000167A0 67C8                       		beq.s	loc_15DC2
000167A2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000167A8 60C0                       		bra.s	loc_15DC2
000167AA                            ; ===========================================================================
000167AA                            
000167AA                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000167AA 4A28 0038                  		tst.b	$38(a0)
000167AE 6600                       		bne.s	loc_15E14
000167B0 5368 0036                  		subq.w	#1,$36(a0)
000167B4 6600                       		bne.s	loc_15E1E
000167B6 117C 0001 0038             		move.b	#1,$38(a0)
000167BC                            
000167BC                            loc_15E14:
000167BC 4A68 003A                  		tst.w	$3A(a0)
000167C0 6700                       		beq.s	loc_15E3C
000167C2 5568 003A                  		subq.w	#2,$3A(a0)
000167C6                            
000167C6                            loc_15E1E:
000167C6 3028 003A                  		move.w	$3A(a0),d0
000167CA 0828 0000 0022             		btst	#0,$22(a0)
000167D0 6700                       		beq.s	loc_15E30
000167D2 4440                       		neg.w	d0
000167D4 0640 0080                  		addi.w	#$80,d0
000167D8                            
000167D8                            loc_15E30:
000167D8 3228 0034                  		move.w	$34(a0),d1
000167DC 9240                       		sub.w	d0,d1
000167DE 3141 0008                  		move.w	d1,8(a0)
000167E2 4E75                       		rts	
000167E4                            ; ===========================================================================
000167E4                            
000167E4                            loc_15E3C:
000167E4 5328 0028                  		subq.b	#1,$28(a0)
000167E8 4228 0038                  		clr.b	$38(a0)
000167EC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167F0 7000                       		moveq	#0,d0
000167F2 1028 0023                  		move.b	$23(a0),d0
000167F6 67CE                       		beq.s	loc_15E1E
000167F8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000167FE 60C6                       		bra.s	loc_15E1E
00016800                            ; ===========================================================================
00016800                            
00016800                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016800 4A28 0038                  		tst.b	$38(a0)
00016804 6600                       		bne.s	loc_15E7C
00016806 4A68 003A                  		tst.w	$3A(a0)
0001680A 6700                       		beq.s	loc_15E6A
0001680C 5368 003A                  		subq.w	#1,$3A(a0)
00016810 6000                       		bra.s	loc_15E8E
00016812                            ; ===========================================================================
00016812                            
00016812                            loc_15E6A:
00016812 5368 0036                  		subq.w	#1,$36(a0)
00016816 6A00                       		bpl.s	loc_15E8E
00016818 317C 003C 0036             		move.w	#$3C,$36(a0)
0001681E 117C 0001 0038             		move.b	#1,$38(a0)
00016824                            
00016824                            loc_15E7C:
00016824 5068 003A                  		addq.w	#8,$3A(a0)
00016828 3028 003A                  		move.w	$3A(a0),d0
0001682C B068 003C                  		cmp.w	$3C(a0),d0
00016830 6600                       		bne.s	loc_15E8E
00016832 4228 0038                  		clr.b	$38(a0)
00016836                            
00016836                            loc_15E8E:
00016836 3028 003A                  		move.w	$3A(a0),d0
0001683A 0828 0000 0022             		btst	#0,$22(a0)
00016840 6700                       		beq.s	loc_15EA0
00016842 4440                       		neg.w	d0
00016844 0640 0038                  		addi.w	#$38,d0
00016848                            
00016848                            loc_15EA0:
00016848 3228 0030                  		move.w	$30(a0),d1
0001684C D240                       		add.w	d0,d1
0001684E 3141 000C                  		move.w	d1,$C(a0)
00016852 4E75                       		rts	
00016854                            ; ===========================================================================
00016854                            
00016854                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016854 4A28 0038                  		tst.b	$38(a0)
00016858 6600                       		bne.s	loc_15ED0
0001685A 4A68 003A                  		tst.w	$3A(a0)
0001685E 6700                       		beq.s	loc_15EBE
00016860 5168 003A                  		subq.w	#8,$3A(a0)
00016864 6000                       		bra.s	loc_15EF0
00016866                            ; ===========================================================================
00016866                            
00016866                            loc_15EBE:
00016866 5368 0036                  		subq.w	#1,$36(a0)
0001686A 6A00                       		bpl.s	loc_15EF0
0001686C 317C 003C 0036             		move.w	#$3C,$36(a0)
00016872 117C 0001 0038             		move.b	#1,$38(a0)
00016878                            
00016878                            loc_15ED0:
00016878 3028 003A                  		move.w	$3A(a0),d0
0001687C B068 003C                  		cmp.w	$3C(a0),d0
00016880 6700                       		beq.s	loc_15EE0
00016882 5068 003A                  		addq.w	#8,$3A(a0)
00016886 6000                       		bra.s	loc_15EF0
00016888                            ; ===========================================================================
00016888                            
00016888                            loc_15EE0:
00016888 5368 0036                  		subq.w	#1,$36(a0)
0001688C 6A00                       		bpl.s	loc_15EF0
0001688E 317C 003C 0036             		move.w	#$3C,$36(a0)
00016894 4228 0038                  		clr.b	$38(a0)
00016898                            
00016898                            loc_15EF0:
00016898 3028 003A                  		move.w	$3A(a0),d0
0001689C 0828 0000 0022             		btst	#0,$22(a0)
000168A2 6700                       		beq.s	loc_15F02
000168A4 4440                       		neg.w	d0
000168A6 0640 0038                  		addi.w	#$38,d0
000168AA                            
000168AA                            loc_15F02:
000168AA 3228 0030                  		move.w	$30(a0),d1
000168AE D240                       		add.w	d0,d1
000168B0 3141 000C                  		move.w	d1,$C(a0)
000168B4 4E75                       		rts	
000168B6                            ; ===========================================================================
000168B6                            
000168B6                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000168B6 4A28 0038                  		tst.b	$38(a0)
000168BA 6600                       		bne.s	loc_15F3E
000168BC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000168C0 7000                       		moveq	#0,d0
000168C2 1028 003E                  		move.b	$3E(a0),d0
000168C6 0832 0000 0000             		btst	#0,(a2,d0.w)
000168CC 6700                       		beq.s	locret_15F5C
000168CE 117C 0001 0038             		move.b	#1,$38(a0)
000168D4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000168D8 7000                       		moveq	#0,d0
000168DA 1028 0023                  		move.b	$23(a0),d0
000168DE 6700                       		beq.s	loc_15F3E
000168E0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000168E6                            
000168E6                            loc_15F3E:
000168E6 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000168EE 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000168F6 3168 0008 0034             		move.w	8(a0),$34(a0)
000168FC 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016902 6700                       		beq.s	loc_15F5E
00016904                            
00016904                            locret_15F5C:
00016904 4E75                       		rts	
00016906                            ; ===========================================================================
00016906                            
00016906                            loc_15F5E:
00016906 4228 0028                  		clr.b	$28(a0)
0001690A 4228 0038                  		clr.b	$38(a0)
0001690E 4E75                       		rts	
00016910                            ; ===========================================================================
00016910                            ; ---------------------------------------------------------------------------
00016910                            ; Sprite mappings - stomper and	platforms (SBZ)
00016910                            ; ---------------------------------------------------------------------------
00016910                            Map_obj6B:
00016910                            	include "_maps\obj6B.asm"
00016910                            ; ---------------------------------------------------------------------------
00016910                            ; Sprite mappings - stomper and	platforms (SBZ)
00016910                            ; ---------------------------------------------------------------------------
00016910 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016914 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016918 0000                       		dc.w byte_15FB0-Map_obj6B
0001691A 04                         byte_15F72:	dc.b 4
0001691B F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016920 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016925 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001692A F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001692F 08                         byte_15F87:	dc.b 8
00016930 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016935 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001693A E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001693F E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016944 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016949 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001694E 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016953 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016958 0E                         byte_15FB0:	dc.b $E
00016959 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001695E C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016963 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016968 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001696D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016972 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016977 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001697C C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016981 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016986 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001698B E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016990 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016995 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001699A 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000169A0 00                         		even
000169A0 00                         		even
000169A0                            
000169A0                            ; ===========================================================================
000169A0                            ; ---------------------------------------------------------------------------
000169A0                            ; Object 6C - vanishing	platforms (SBZ)
000169A0                            ; ---------------------------------------------------------------------------
000169A0                            
000169A0                            Obj6C:					; XREF: Obj_Index
000169A0 7000                       		moveq	#0,d0
000169A2 1028 0024                  		move.b	$24(a0),d0
000169A6 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000169AA 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000169AE                            ; ===========================================================================
000169AE 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000169B0 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000169B2 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000169B4 0000                       		dc.w loc_16068-Obj6C_Index
000169B6                            ; ===========================================================================
000169B6                            
000169B6                            Obj6C_Main:				; XREF: Obj6C_Index
000169B6 5C28 0024                  		addq.b	#6,$24(a0)
000169BA 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000169C2 317C 44C3 0002             		move.w	#$44C3,2(a0)
000169C8 0028 0004 0001             		ori.b	#4,1(a0)
000169CE 117C 0010 0019             		move.b	#$10,$19(a0)
000169D4 117C 0004 0018             		move.b	#4,$18(a0)
000169DA 7000                       		moveq	#0,d0
000169DC 1028 0028                  		move.b	$28(a0),d0	; get object type
000169E0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000169E4 5240                       		addq.w	#1,d0		; add 1
000169E6 EF48                       		lsl.w	#7,d0		; multiply by $80
000169E8 3200                       		move.w	d0,d1
000169EA 5340                       		subq.w	#1,d0
000169EC 3140 0030                  		move.w	d0,$30(a0)
000169F0 3140 0032                  		move.w	d0,$32(a0)
000169F4 7000                       		moveq	#0,d0
000169F6 1028 0028                  		move.b	$28(a0),d0	; get object type
000169FA 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000169FE 0641 0080                  		addi.w	#$80,d1
00016A02 C0C1                       		mulu.w	d1,d0
00016A04 E088                       		lsr.l	#8,d0
00016A06 3140 0036                  		move.w	d0,$36(a0)
00016A0A 5341                       		subq.w	#1,d1
00016A0C 3141 0038                  		move.w	d1,$38(a0)
00016A10                            
00016A10                            loc_16068:				; XREF: Obj6C_Index
00016A10 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016A14 9068 0036                  		sub.w	$36(a0),d0
00016A18 C068 0038                  		and.w	$38(a0),d0
00016A1C 6600                       		bne.s	Obj6C_Animate
00016A1E 5928 0024                  		subq.b	#4,$24(a0)
00016A22 6000                       		bra.s	Obj6C_Vanish
00016A24                            ; ===========================================================================
00016A24                            
00016A24                            Obj6C_Animate:
00016A24 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016A2A 4EB9 0000 AF22             		jsr	AnimateSprite
00016A30 6000 951E                  		bra.w	MarkObjGone
00016A34                            ; ===========================================================================
00016A34                            
00016A34                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016A34 5368 0030                  		subq.w	#1,$30(a0)
00016A38 6A00                       		bpl.s	loc_160AA
00016A3A 317C 007F 0030             		move.w	#127,$30(a0)
00016A40 4A28 001C                  		tst.b	$1C(a0)
00016A44 6700                       		beq.s	loc_160A4
00016A46 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016A4C                            
00016A4C                            loc_160A4:
00016A4C 0868 0000 001C             		bchg	#0,$1C(a0)
00016A52                            
00016A52                            loc_160AA:
00016A52 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016A58 4EB9 0000 AF22             		jsr	AnimateSprite
00016A5E 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016A64 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016A66 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016A6C 6600                       		bne.s	loc_160D6
00016A6E 7200                       		moveq	#0,d1
00016A70 1228 0019                  		move.b	$19(a0),d1
00016A74 4EB9 0000 7AE2             		jsr	(PlatformObject).l
00016A7A 6000 94D4                  		bra.w	MarkObjGone
00016A7E                            ; ===========================================================================
00016A7E                            
00016A7E                            loc_160D6:
00016A7E 7200                       		moveq	#0,d1
00016A80 1228 0019                  		move.b	$19(a0),d1
00016A84 4EB9 0000 7C56             		jsr	(ExitPlatform).l
00016A8A 3428 0008                  		move.w	8(a0),d2
00016A8E 4EB9 0000 81C0             		jsr	(MvSonicOnPtfm2).l
00016A94 6000 94BA                  		bra.w	MarkObjGone
00016A98                            ; ===========================================================================
00016A98                            
00016A98                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016A98 0828 0003 0022             		btst	#3,$22(a0)
00016A9E 6700                       		beq.s	Obj6C_Display
00016AA0 43F8 D000                  		lea	($FFFFD000).w,a1
00016AA4 08A9 0003 0022             		bclr	#3,$22(a1)
00016AAA 08A8 0003 0022             		bclr	#3,$22(a0)
00016AB0 117C 0002 0024             		move.b	#2,$24(a0)
00016AB6 4228 0025                  		clr.b	$25(a0)
00016ABA                            
00016ABA                            Obj6C_Display:
00016ABA 6000 9494                  		bra.w	MarkObjGone
00016ABE                            ; ===========================================================================
00016ABE                            Ani_obj6C:
00016ABE                            	include "_anim\obj6C.asm"
00016ABE                            ; ---------------------------------------------------------------------------
00016ABE                            ; Animation script - vanishing platforms (SBZ)
00016ABE                            ; ---------------------------------------------------------------------------
00016ABE 0000                       		dc.w byte_1611A-Ani_obj6C
00016AC0 0000                       		dc.w byte_16122-Ani_obj6C
00016AC2 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016ACA 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016AD2                            		even
00016AD2                            		even
00016AD2                            
00016AD2                            ; ---------------------------------------------------------------------------
00016AD2                            ; Sprite mappings - vanishing platforms	(SBZ)
00016AD2                            ; ---------------------------------------------------------------------------
00016AD2                            Map_obj6C:
00016AD2                            	include "_maps\obj6C.asm"
00016AD2                            ; ---------------------------------------------------------------------------
00016AD2                            ; Sprite mappings - vanishing platforms	(SBZ)
00016AD2                            ; ---------------------------------------------------------------------------
00016AD2 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016AD6 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016ADA 01                         byte_16132:	dc.b 1
00016ADB F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016AE0 01                         byte_16138:	dc.b 1
00016AE1 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016AE6 01                         byte_1613E:	dc.b 1
00016AE7 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016AEC 00                         byte_16144:	dc.b 0
00016AEE 00                         		even
00016AEE 00                         		even
00016AEE                            
00016AEE                            ; ===========================================================================
00016AEE                            ; ---------------------------------------------------------------------------
00016AEE                            ; Object 6E - electrocution orbs (SBZ)
00016AEE                            ; ---------------------------------------------------------------------------
00016AEE                            
00016AEE                            Obj6E:					; XREF: Obj_Index
00016AEE 7000                       		moveq	#0,d0
00016AF0 1028 0024                  		move.b	$24(a0),d0
00016AF4 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016AF8 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016AFC                            ; ===========================================================================
00016AFC 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016AFE 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016B00                            ; ===========================================================================
00016B00                            
00016B00                            Obj6E_Main:				; XREF: Obj6E_Index
00016B00 5428 0024                  		addq.b	#2,$24(a0)
00016B04 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016B0C 317C 047E 0002             		move.w	#$47E,2(a0)
00016B12 0028 0004 0001             		ori.b	#4,1(a0)
00016B18 117C 0028 0019             		move.b	#$28,$19(a0)
00016B1E 7000                       		moveq	#0,d0
00016B20 1028 0028                  		move.b	$28(a0),d0	; read object type
00016B24 E948                       		lsl.w	#4,d0		; multiply by $10
00016B26 5340                       		subq.w	#1,d0
00016B28 3140 0034                  		move.w	d0,$34(a0)
00016B2C                            
00016B2C                            Obj6E_Shock:				; XREF: Obj6E_Index
00016B2C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016B30 C068 0034                  		and.w	$34(a0),d0
00016B34 6600                       		bne.s	Obj6E_Animate
00016B36 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016B3C 4A28 0001                  		tst.b	1(a0)
00016B40 6A00                       		bpl.s	Obj6E_Animate
00016B42 303C 00B1                  		move.w	#$B1,d0
00016B46 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play electricity sound
00016B4C                            
00016B4C                            Obj6E_Animate:
00016B4C 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016B52 4EB9 0000 AF22             		jsr	AnimateSprite
00016B58 117C 0000 0020             		move.b	#0,$20(a0)
00016B5E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016B64 6600                       		bne.s	Obj6E_Display	; if not, branch
00016B66 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016B6C                            
00016B6C                            Obj6E_Display:
00016B6C 6000 93E2                  		bra.w	MarkObjGone
00016B70                            ; ===========================================================================
00016B70                            Ani_obj6E:
00016B70                            	include "_anim\obj6E.asm"
00016B70                            ; ---------------------------------------------------------------------------
00016B70                            ; Animation script - electrocution orbs (SBZ)
00016B70                            ; ---------------------------------------------------------------------------
00016B70 0000                       		dc.w byte_161CC-Ani_obj6E
00016B72 0000                       		dc.w byte_161D0-Ani_obj6E
00016B74 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016B78 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016B88                            		even
00016B88                            		even
00016B88                            
00016B88                            ; ---------------------------------------------------------------------------
00016B88                            ; Sprite mappings - electrocution orbs (SBZ)
00016B88                            ; ---------------------------------------------------------------------------
00016B88                            Map_obj6E:
00016B88                            	include "_maps\obj6E.asm"
00016B88                            Map_26ed:
00016B88 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016B8A 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016B8C 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016B8E 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016B90 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016B92 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016B94 01                         Map_26ed_C: 	dc.b $1
00016B95 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016B9A 02                         Map_26ed_12: 	dc.b $2
00016B9B F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016BA0 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BA5 06                         Map_26ed_1D: 	dc.b $6
00016BA6 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016BAB 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BB0 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016BB5 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016BBA F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016BBF F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016BC4 08                         Map_26ed_3C: 	dc.b $8
00016BC5 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016BCA 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BCF F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016BD4 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016BD9 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016BDE F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016BE3 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016BE8 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016BED 06                         Map_26ed_65: 	dc.b $6
00016BEE F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016BF3 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BF8 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016BFD F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016C02 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016C07 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016C0C 04                         Map_26ed_84: 	dc.b $4
00016C0D F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016C12 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016C17 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016C1C F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016C22 00                         	even
00016C22 00                         	even
00016C22                            
00016C22                            ; ===========================================================================
00016C22                            ; ---------------------------------------------------------------------------
00016C22                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016C22                            ; ---------------------------------------------------------------------------
00016C22                            
00016C22                            Obj6F:					; XREF: Obj_Index
00016C22 7000                       		moveq	#0,d0
00016C24 1028 0024                  		move.b	$24(a0),d0
00016C28 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016C2C 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016C30 3028 0030                  		move.w	$30(a0),d0
00016C34 0240 FF80                  		andi.w	#$FF80,d0
00016C38 3238 F700                  		move.w	($FFFFF700).w,d1
00016C3C 0441 0080                  		subi.w	#$80,d1
00016C40 0241 FF80                  		andi.w	#$FF80,d1
00016C44 9041                       		sub.w	d1,d0
00016C46 0C40 0280                  		cmpi.w	#$280,d0
00016C4A 6200                       		bhi.s	loc_1629A
00016C4C                            
00016C4C                            Obj6F_Display:
00016C4C 4EF9 0000 DEA8             		jmp	DisplaySprite
00016C52                            ; ===========================================================================
00016C52                            
00016C52                            loc_1629A:
00016C52 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016C58 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016C5A 0C40 FF80                  		cmpi.w	#-$80,d0
00016C5E 64EC                       		bcc.s	Obj6F_Display
00016C60                            
00016C60                            Obj6F_Act1or2:
00016C60 1028 002F                  		move.b	$2F(a0),d0
00016C64 6A00                       		bpl.s	Obj6F_Delete
00016C66 0240 007F                  		andi.w	#$7F,d0
00016C6A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016C6E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016C74                            
00016C74                            Obj6F_Delete:
00016C74 4EF9 0000 DEE4             		jmp	DeleteObject
00016C7A                            ; ===========================================================================
00016C7A 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016C7C 0000                       		dc.w loc_163D8-Obj6F_Index
00016C7E                            ; ===========================================================================
00016C7E                            
00016C7E                            Obj6F_Main:				; XREF: Obj6F_Index
00016C7E 1028 0028                  		move.b	$28(a0),d0
00016C82 6B00 0000                  		bmi.w	loc_16380
00016C86 5428 0024                  		addq.b	#2,$24(a0)
00016C8A 217C 0001 62E2 0004        		move.l	#Map_obj69a,4(a0)
00016C92 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016C98 117C 0010 0019             		move.b	#$10,$19(a0)
00016C9E 0028 0004 0001             		ori.b	#4,1(a0)
00016CA4 117C 0004 0018             		move.b	#4,$18(a0)
00016CAA 7000                       		moveq	#0,d0
00016CAC 1028 0028                  		move.b	$28(a0),d0
00016CB0 3200                       		move.w	d0,d1
00016CB2 E648                       		lsr.w	#3,d0
00016CB4 0240 001E                  		andi.w	#$1E,d0
00016CB8 45FA 0000                  		lea	off_164A6(pc),a2
00016CBC D4F2 0000                  		adda.w	(a2,d0.w),a2
00016CC0 315A 0038                  		move.w	(a2)+,$38(a0)
00016CC4 315A 0030                  		move.w	(a2)+,$30(a0)
00016CC8 214A 003C                  		move.l	a2,$3C(a0)
00016CCC 0241 000F                  		andi.w	#$F,d1
00016CD0 E549                       		lsl.w	#2,d1
00016CD2 1141 0038                  		move.b	d1,$38(a0)
00016CD6 117C 0004 003A             		move.b	#4,$3A(a0)
00016CDC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016CE0 6700                       		beq.s	loc_16356
00016CE2 117C 0001 003B             		move.b	#1,$3B(a0)
00016CE8 4428 003A                  		neg.b	$3A(a0)
00016CEC 7200                       		moveq	#0,d1
00016CEE 1228 0038                  		move.b	$38(a0),d1
00016CF2 D228 003A                  		add.b	$3A(a0),d1
00016CF6 B228 0039                  		cmp.b	$39(a0),d1
00016CFA 6500                       		bcs.s	loc_16352
00016CFC 1001                       		move.b	d1,d0
00016CFE 7200                       		moveq	#0,d1
00016D00 4A00                       		tst.b	d0
00016D02 6A00                       		bpl.s	loc_16352
00016D04 1228 0039                  		move.b	$39(a0),d1
00016D08 5901                       		subq.b	#4,d1
00016D0A                            
00016D0A                            loc_16352:
00016D0A 1141 0038                  		move.b	d1,$38(a0)
00016D0E                            
00016D0E                            loc_16356:
00016D0E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016D14 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016D1A 4A41                       		tst.w	d1
00016D1C 6600                       		bne.s	loc_1636C
00016D1E 117C 0001 001C             		move.b	#1,$1C(a0)
00016D24                            
00016D24                            loc_1636C:
00016D24 0C41 0008                  		cmpi.w	#8,d1
00016D28 6600                       		bne.s	loc_16378
00016D2A 117C 0000 001C             		move.b	#0,$1C(a0)
00016D30                            
00016D30                            loc_16378:
00016D30 6100 C0B6                  		bsr.w	Obj63_ChangeDir
00016D34 6000 0000                  		bra.w	loc_163D8
00016D38                            ; ===========================================================================
00016D38                            
00016D38                            loc_16380:				; XREF: Obj6F_Main
00016D38 1140 002F                  		move.b	d0,$2F(a0)
00016D3C 0240 007F                  		andi.w	#$7F,d0
00016D40 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016D44 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016D4A 6700                       		beq.s	loc_1639A
00016D4C 4EF9 0000 DEE4             		jmp	DeleteObject
00016D52                            ; ===========================================================================
00016D52                            
00016D52                            loc_1639A:
00016D52 D040                       		add.w	d0,d0
00016D54 0240 001E                  		andi.w	#$1E,d0
00016D58 0640 0080                  		addi.w	#$80,d0
00016D5C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016D62 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016D66 321A                       		move.w	(a2)+,d1
00016D68 2248                       		movea.l	a0,a1
00016D6A 6000                       		bra.s	Obj6F_LoadPform
00016D6C                            ; ===========================================================================
00016D6C                            
00016D6C                            Obj6F_Loop:
00016D6C 4EB9 0000 E32E             		jsr	SingleObjLoad
00016D72 6600                       		bne.s	loc_163D0
00016D74                            
00016D74                            Obj6F_LoadPform:			; XREF: loc_1639A
00016D74 12BC 006F                  		move.b	#$6F,0(a1)
00016D78 335A 0008                  		move.w	(a2)+,8(a1)
00016D7C 335A 000C                  		move.w	(a2)+,$C(a1)
00016D80 301A                       		move.w	(a2)+,d0
00016D82 1340 0028                  		move.b	d0,$28(a1)
00016D86                            
00016D86                            loc_163D0:
00016D86 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016D8A                            
00016D8A 588F                       		addq.l	#4,sp
00016D8C 4E75                       		rts	
00016D8E                            ; ===========================================================================
00016D8E                            
00016D8E                            loc_163D8:				; XREF: Obj6F_Index
00016D8E 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016D94 4EB9 0000 AF22             		jsr	AnimateSprite
00016D9A 4A28 001A                  		tst.b	$1A(a0)
00016D9E 6600                       		bne.s	loc_16404
00016DA0 3F28 0008                  		move.w	8(a0),-(sp)
00016DA4 6100 0000                  		bsr.w	loc_16424
00016DA8 323C 001B                  		move.w	#$1B,d1
00016DAC 343C 0007                  		move.w	#7,d2
00016DB0 3602                       		move.w	d2,d3
00016DB2 5243                       		addq.w	#1,d3
00016DB4 381F                       		move.w	(sp)+,d4
00016DB6 6000 94C0                  		bra.w	SolidObject
00016DBA                            ; ===========================================================================
00016DBA                            
00016DBA                            loc_16404:
00016DBA 0828 0003 0022             		btst	#3,$22(a0)
00016DC0 6700                       		beq.s	loc_16420
00016DC2 43F8 D000                  		lea	($FFFFD000).w,a1
00016DC6 08A9 0003 0022             		bclr	#3,$22(a1)
00016DCC 08A8 0003 0022             		bclr	#3,$22(a0)
00016DD2 4228 0025                  		clr.b	$25(a0)
00016DD6                            
00016DD6                            loc_16420:
00016DD6 6000 0002                  		bra.w	*+4
00016DDA                            
00016DDA                            loc_16424:
00016DDA 3028 0008                  		move.w	8(a0),d0
00016DDE B068 0034                  		cmp.w	$34(a0),d0
00016DE2 6600                       		bne.s	loc_16484
00016DE4 3028 000C                  		move.w	$C(a0),d0
00016DE8 B068 0036                  		cmp.w	$36(a0),d0
00016DEC 6600                       		bne.s	loc_16484
00016DEE 7200                       		moveq	#0,d1
00016DF0 1228 0038                  		move.b	$38(a0),d1
00016DF4 D228 003A                  		add.b	$3A(a0),d1
00016DF8 B228 0039                  		cmp.b	$39(a0),d1
00016DFC 6500                       		bcs.s	loc_16456
00016DFE 1001                       		move.b	d1,d0
00016E00 7200                       		moveq	#0,d1
00016E02 4A00                       		tst.b	d0
00016E04 6A00                       		bpl.s	loc_16456
00016E06 1228 0039                  		move.b	$39(a0),d1
00016E0A 5901                       		subq.b	#4,d1
00016E0C                            
00016E0C                            loc_16456:
00016E0C 1141 0038                  		move.b	d1,$38(a0)
00016E10 2268 003C                  		movea.l	$3C(a0),a1
00016E14 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016E1A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016E20 4A41                       		tst.w	d1
00016E22 6600                       		bne.s	loc_16474
00016E24 117C 0001 001C             		move.b	#1,$1C(a0)
00016E2A                            
00016E2A                            loc_16474:
00016E2A 0C41 0008                  		cmpi.w	#8,d1
00016E2E 6600                       		bne.s	loc_16480
00016E30 117C 0000 001C             		move.b	#0,$1C(a0)
00016E36                            
00016E36                            loc_16480:
00016E36 6100 BFB0                  		bsr.w	Obj63_ChangeDir
00016E3A                            
00016E3A                            loc_16484:
00016E3A 4EF9 0000 DE82             		jmp	SpeedToPos
00016E40                            ; ===========================================================================
00016E40                            Ani_obj6F:
00016E40                            	include "_anim\obj6F.asm"
00016E40                            ; ---------------------------------------------------------------------------
00016E40                            ; Animation script - platform on conveyor belt (SBZ)
00016E40                            ; ---------------------------------------------------------------------------
00016E40 0000                       		dc.w byte_1648E-Ani_obj6F
00016E42 0000                       		dc.w byte_164A2-Ani_obj6F
00016E44 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016E51 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016E58 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016E5C 00                         		even
00016E5C 00                         		even
00016E5C                            
00016E5C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016E62 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016E68 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016E7C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016E90 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016EA4 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016EB8 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016ECC 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016EE0                            ; ===========================================================================
00016EE0                            ; ---------------------------------------------------------------------------
00016EE0                            ; Object 70 - large girder block (SBZ)
00016EE0                            ; ---------------------------------------------------------------------------
00016EE0                            
00016EE0                            Obj70:					; XREF: Obj_Index
00016EE0 7000                       		moveq	#0,d0
00016EE2 1028 0024                  		move.b	$24(a0),d0
00016EE6 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016EEA 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016EEE                            ; ===========================================================================
00016EEE 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016EF0 0000                       		dc.w Obj70_Action-Obj70_Index
00016EF2                            ; ===========================================================================
00016EF2                            
00016EF2                            Obj70_Main:				; XREF: Obj70_Index
00016EF2 5428 0024                  		addq.b	#2,$24(a0)
00016EF6 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016EFE 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016F04 0028 0004 0001             		ori.b	#4,1(a0)
00016F0A 117C 0004 0018             		move.b	#4,$18(a0)
00016F10 117C 0060 0019             		move.b	#$60,$19(a0)
00016F16 117C 0018 0016             		move.b	#$18,$16(a0)
00016F1C 3168 0008 0032             		move.w	8(a0),$32(a0)
00016F22 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016F28 6100 0000                  		bsr.w	Obj70_Move2
00016F2C                            
00016F2C                            Obj70_Action:				; XREF: Obj70_Index
00016F2C 3F28 0008                  		move.w	8(a0),-(sp)
00016F30 4A68 003A                  		tst.w	$3A(a0)
00016F34 6700                       		beq.s	Obj70_Move
00016F36 5368 003A                  		subq.w	#1,$3A(a0)
00016F3A 6600                       		bne.s	Obj70_Solid
00016F3C                            
00016F3C                            Obj70_Move:
00016F3C 4EB9 0000 DE82             		jsr	SpeedToPos
00016F42 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016F46 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016F48 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016F4C                            
00016F4C                            Obj70_Solid:
00016F4C 381F                       		move.w	(sp)+,d4
00016F4E 4A28 0001                  		tst.b	1(a0)
00016F52 6A00                       		bpl.s	Obj70_ChkDel
00016F54 7200                       		moveq	#0,d1
00016F56 1228 0019                  		move.b	$19(a0),d1
00016F5A 0641 000B                  		addi.w	#$B,d1
00016F5E 7400                       		moveq	#0,d2
00016F60 1428 0016                  		move.b	$16(a0),d2
00016F64 3602                       		move.w	d2,d3
00016F66 5243                       		addq.w	#1,d3
00016F68 6100 930E                  		bsr.w	SolidObject
00016F6C                            
00016F6C                            Obj70_ChkDel:
00016F6C 3028 0032                  		move.w	$32(a0),d0
00016F70 0240 FF80                  		andi.w	#$FF80,d0
00016F74 3238 F700                  		move.w	($FFFFF700).w,d1
00016F78 0441 0080                  		subi.w	#$80,d1
00016F7C 0241 FF80                  		andi.w	#$FF80,d1
00016F80 9041                       		sub.w	d1,d0
00016F82 0C40 0280                  		cmpi.w	#$280,d0
00016F86 6200                       		bhi.s	Obj70_Delete
00016F88 4EF9 0000 DEA8             		jmp	DisplaySprite
00016F8E                            ; ===========================================================================
00016F8E                            
00016F8E                            Obj70_Delete:
00016F8E 4EF9 0000 DEE4             		jmp	DeleteObject
00016F94                            ; ===========================================================================
00016F94                            
00016F94                            Obj70_Move2:				; XREF: Obj70_Main
00016F94 1028 0038                  		move.b	$38(a0),d0
00016F98 0240 0018                  		andi.w	#$18,d0
00016F9C 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016FA2 43F1 0000                  		lea	(a1,d0.w),a1
00016FA6 3159 0010                  		move.w	(a1)+,$10(a0)
00016FAA 3159 0012                  		move.w	(a1)+,$12(a0)
00016FAE 3159 0034                  		move.w	(a1)+,$34(a0)
00016FB2 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016FB6 317C 0007 003A             		move.w	#7,$3A(a0)
00016FBC 4E75                       		rts	
00016FBE                            ; ===========================================================================
00016FBE 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016FC6 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016FCE FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016FD6 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016FDE                            ; ---------------------------------------------------------------------------
00016FDE                            ; Sprite mappings - large girder block (SBZ)
00016FDE                            ; ---------------------------------------------------------------------------
00016FDE                            Map_obj70:
00016FDE                            	include "_maps\obj70.asm"
00016FDE                            ; ---------------------------------------------------------------------------
00016FDE                            ; Sprite mappings - large girder block (SBZ)
00016FDE                            ; ---------------------------------------------------------------------------
00016FDE 0000                       		dc.w byte_1662A-Map_obj70
00016FE0 0C                         byte_1662A:	dc.b $C
00016FE1 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016FE6 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016FEB E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016FF0 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016FF5 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016FFA 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016FFF E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00017004 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00017009 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001700E 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00017013 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00017018 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001701E 00                         		even
0001701E 00                         		even
0001701E                            
0001701E                            ; ===========================================================================
0001701E                            ; ---------------------------------------------------------------------------
0001701E                            ; Object 72 - teleporter (SBZ)
0001701E                            ; ---------------------------------------------------------------------------
0001701E                            
0001701E                            Obj72:					; XREF: Obj_Index
0001701E 7000                       		moveq	#0,d0
00017020 1028 0024                  		move.b	$24(a0),d0
00017024 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00017028 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
0001702C 3028 0008                  		move.w	8(a0),d0
00017030 0240 FF80                  		andi.w	#$FF80,d0
00017034 3238 F700                  		move.w	($FFFFF700).w,d1
00017038 0441 0080                  		subi.w	#$80,d1
0001703C 0241 FF80                  		andi.w	#$FF80,d1
00017040 9041                       		sub.w	d1,d0
00017042 0C40 0280                  		cmpi.w	#$280,d0
00017046 6200                       		bhi.s	Obj72_Delete
00017048 4E75                       		rts	
0001704A                            ; ===========================================================================
0001704A                            
0001704A                            Obj72_Delete:
0001704A 4EF9 0000 DEE4             		jmp	DeleteObject
00017050                            ; ===========================================================================
00017050 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00017052 0000                       		dc.w loc_166C8-Obj72_Index
00017054 0000                       		dc.w loc_1675E-Obj72_Index
00017056 0000                       		dc.w loc_16798-Obj72_Index
00017058                            ; ===========================================================================
00017058                            
00017058                            Obj72_Main:				; XREF: Obj72_Index
00017058 5428 0024                  		addq.b	#2,$24(a0)
0001705C 1028 0028                  		move.b	$28(a0),d0
00017060 D040                       		add.w	d0,d0
00017062 0240 001E                  		andi.w	#$1E,d0
00017066 45FA 0000                  		lea	Obj72_Data(pc),a2
0001706A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001706E 315A 003A                  		move.w	(a2)+,$3A(a0)
00017072 214A 003C                  		move.l	a2,$3C(a0)
00017076 315A 0036                  		move.w	(a2)+,$36(a0)
0001707A 315A 0038                  		move.w	(a2)+,$38(a0)
0001707E                            
0001707E                            loc_166C8:				; XREF: Obj72_Index
0001707E 43F8 D000                  		lea	($FFFFD000).w,a1
00017082 3029 0008                  		move.w	8(a1),d0
00017086 9068 0008                  		sub.w	8(a0),d0
0001708A 0828 0000 0022             		btst	#0,$22(a0)
00017090 6700                       		beq.s	loc_166E0
00017092 0640 000F                  		addi.w	#$F,d0
00017096                            
00017096                            loc_166E0:
00017096 0C40 0010                  		cmpi.w	#$10,d0
0001709A 6400                       		bcc.s	locret_1675C
0001709C 3229 000C                  		move.w	$C(a1),d1
000170A0 9268 000C                  		sub.w	$C(a0),d1
000170A4 0641 0020                  		addi.w	#$20,d1
000170A8 0C41 0040                  		cmpi.w	#$40,d1
000170AC 6400                       		bcc.s	locret_1675C
000170AE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000170B2 6600                       		bne.s	locret_1675C
000170B4 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000170BA 6600                       		bne.s	loc_1670E
000170BC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000170C2 6500                       		bcs.s	locret_1675C
000170C4                            
000170C4                            loc_1670E:
000170C4 5428 0024                  		addq.b	#2,$24(a0)
000170C8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000170CE 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000170D4 337C 0800 0014             		move.w	#$800,$14(a1)
000170DA 337C 0000 0010             		move.w	#0,$10(a1)
000170E0 337C 0000 0012             		move.w	#0,$12(a1)
000170E6 08A8 0005 0022             		bclr	#5,$22(a0)
000170EC 08A9 0005 0022             		bclr	#5,$22(a1)
000170F2 08E9 0001 0022             		bset	#1,$22(a1)
000170F8 3368 0008 0008             		move.w	8(a0),8(a1)
000170FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017104 4228 0032                  		clr.b	$32(a0)
00017108 303C 00BE                  		move.w	#$BE,d0
0001710C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00017112                            
00017112                            locret_1675C:
00017112 4E75                       		rts	
00017114                            ; ===========================================================================
00017114                            
00017114                            loc_1675E:				; XREF: Obj72_Index
00017114 43F8 D000                  		lea	($FFFFD000).w,a1
00017118 1028 0032                  		move.b	$32(a0),d0
0001711C 5428 0032                  		addq.b	#2,$32(a0)
00017120 4EB9 0000 2D36             		jsr	(CalcSine).l
00017126 EA40                       		asr.w	#5,d0
00017128 3428 000C                  		move.w	$C(a0),d2
0001712C 9440                       		sub.w	d0,d2
0001712E 3342 000C                  		move.w	d2,$C(a1)
00017132 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00017138 6600                       		bne.s	locret_16796
0001713A 6100 0000                  		bsr.w	sub_1681C
0001713E 5428 0024                  		addq.b	#2,$24(a0)
00017142 303C 00BC                  		move.w	#$BC,d0
00017146 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play teleport sound
0001714C                            
0001714C                            locret_16796:
0001714C 4E75                       		rts	
0001714E                            ; ===========================================================================
0001714E                            
0001714E                            loc_16798:				; XREF: Obj72_Index
0001714E 588F                       		addq.l	#4,sp
00017150 43F8 D000                  		lea	($FFFFD000).w,a1
00017154 5328 002E                  		subq.b	#1,$2E(a0)
00017158 6A00                       		bpl.s	loc_167DA
0001715A 3368 0036 0008             		move.w	$36(a0),8(a1)
00017160 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017166 7200                       		moveq	#0,d1
00017168 1228 003A                  		move.b	$3A(a0),d1
0001716C 5801                       		addq.b	#4,d1
0001716E B228 003B                  		cmp.b	$3B(a0),d1
00017172 6500                       		bcs.s	loc_167C2
00017174 7200                       		moveq	#0,d1
00017176 6000                       		bra.s	loc_16800
00017178                            ; ===========================================================================
00017178                            
00017178                            loc_167C2:
00017178 1141 003A                  		move.b	d1,$3A(a0)
0001717C 2468 003C                  		movea.l	$3C(a0),a2
00017180 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017186 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001718C 6000 0000                  		bra.w	sub_1681C
00017190                            ; ===========================================================================
00017190                            
00017190                            loc_167DA:
00017190 2429 0008                  		move.l	8(a1),d2
00017194 2629 000C                  		move.l	$C(a1),d3
00017198 3029 0010                  		move.w	$10(a1),d0
0001719C 48C0                       		ext.l	d0
0001719E E180                       		asl.l	#8,d0
000171A0 D480                       		add.l	d0,d2
000171A2 3029 0012                  		move.w	$12(a1),d0
000171A6 48C0                       		ext.l	d0
000171A8 E180                       		asl.l	#8,d0
000171AA D680                       		add.l	d0,d3
000171AC 2342 0008                  		move.l	d2,8(a1)
000171B0 2343 000C                  		move.l	d3,$C(a1)
000171B4 4E75                       		rts	
000171B6                            ; ===========================================================================
000171B6                            
000171B6                            loc_16800:
000171B6 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000171BC 4228 0024                  		clr.b	$24(a0)
000171C0 4238 F7C8                  		clr.b	($FFFFF7C8).w
000171C4 337C 0000 0010             		move.w	#0,$10(a1)
000171CA 337C 0200 0012             		move.w	#$200,$12(a1)
000171D0 4E75                       		rts	
000171D2                            
000171D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000171D2                            
000171D2                            
000171D2                            sub_1681C:
000171D2 7000                       		moveq	#0,d0
000171D4 343C 1000                  		move.w	#$1000,d2
000171D8 3028 0036                  		move.w	$36(a0),d0
000171DC 9069 0008                  		sub.w	8(a1),d0
000171E0 6C00                       		bge.s	loc_16830
000171E2 4440                       		neg.w	d0
000171E4 4442                       		neg.w	d2
000171E6                            
000171E6                            loc_16830:
000171E6 7200                       		moveq	#0,d1
000171E8 363C 1000                  		move.w	#$1000,d3
000171EC 3228 0038                  		move.w	$38(a0),d1
000171F0 9269 000C                  		sub.w	$C(a1),d1
000171F4 6C00                       		bge.s	loc_16844
000171F6 4441                       		neg.w	d1
000171F8 4443                       		neg.w	d3
000171FA                            
000171FA                            loc_16844:
000171FA B240                       		cmp.w	d0,d1
000171FC 6500                       		bcs.s	loc_1687A
000171FE 7200                       		moveq	#0,d1
00017200 3228 0038                  		move.w	$38(a0),d1
00017204 9269 000C                  		sub.w	$C(a1),d1
00017208 4841                       		swap	d1
0001720A 83C3                       		divs.w	d3,d1
0001720C 7000                       		moveq	#0,d0
0001720E 3028 0036                  		move.w	$36(a0),d0
00017212 9069 0008                  		sub.w	8(a1),d0
00017216 6700                       		beq.s	loc_16866
00017218 4840                       		swap	d0
0001721A 81C1                       		divs.w	d1,d0
0001721C                            
0001721C                            loc_16866:
0001721C 3340 0010                  		move.w	d0,$10(a1)
00017220 3343 0012                  		move.w	d3,$12(a1)
00017224 4A41                       		tst.w	d1
00017226 6A00                       		bpl.s	loc_16874
00017228 4441                       		neg.w	d1
0001722A                            
0001722A                            loc_16874:
0001722A 3141 002E                  		move.w	d1,$2E(a0)
0001722E 4E75                       		rts	
00017230                            ; ===========================================================================
00017230                            
00017230                            loc_1687A:
00017230 7000                       		moveq	#0,d0
00017232 3028 0036                  		move.w	$36(a0),d0
00017236 9069 0008                  		sub.w	8(a1),d0
0001723A 4840                       		swap	d0
0001723C 81C2                       		divs.w	d2,d0
0001723E 7200                       		moveq	#0,d1
00017240 3228 0038                  		move.w	$38(a0),d1
00017244 9269 000C                  		sub.w	$C(a1),d1
00017248 6700                       		beq.s	loc_16898
0001724A 4841                       		swap	d1
0001724C 83C0                       		divs.w	d0,d1
0001724E                            
0001724E                            loc_16898:
0001724E 3341 0012                  		move.w	d1,$12(a1)
00017252 3342 0010                  		move.w	d2,$10(a1)
00017256 4A40                       		tst.w	d0
00017258 6A00                       		bpl.s	loc_168A6
0001725A 4440                       		neg.w	d0
0001725C                            
0001725C                            loc_168A6:
0001725C 3140 002E                  		move.w	d0,$2E(a0)
00017260 4E75                       		rts	
00017262                            ; End of function sub_1681C
00017262                            
00017262                            ; ===========================================================================
00017262 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017268 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001726E 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017272 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017278 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001727E 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017284 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001728A 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017290 0884 0298 0894             		dc.w $884, $298, $894
00017296 0270 0894 0190             		dc.w $270, $894, $190
0001729C 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000172A2 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000172A8 1184 0498 1158             		dc.w $1184, $498, $1158
000172AE 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000172B4 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000172BA 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000172C0 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000172C6 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000172CC 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000172D2 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000172D8 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000172DE FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000172E4 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000172EA                            ; ===========================================================================
000172EA                            ; ---------------------------------------------------------------------------
000172EA                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000172EA                            ; ---------------------------------------------------------------------------
000172EA                            
000172EA                            Obj78:					; XREF: Obj_Index
000172EA 7000                       		moveq	#0,d0
000172EC 1028 0024                  		move.b	$24(a0),d0
000172F0 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000172F4 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000172F8                            ; ===========================================================================
000172F8 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000172FA 0000                       		dc.w Obj78_Action-Obj78_Index
000172FC 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000172FE 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017300 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017302 0000                       		dc.w Obj78_Delete-Obj78_Index
00017304 0000                       		dc.w loc_16CC0-Obj78_Index
00017306                            ; ===========================================================================
00017306                            
00017306                            locret_16950:
00017306 4E75                       		rts	
00017308                            ; ===========================================================================
00017308                            
00017308                            Obj78_Main:				; XREF: Obj78_Index
00017308 117C 0007 0016             		move.b	#7,$16(a0)
0001730E 117C 0008 0017             		move.b	#8,$17(a0)
00017314 4EB9 0000 DE10             		jsr	ObjectFall
0001731A 4EBA E4A6                  		jsr	ObjHitFloor
0001731E 4A41                       		tst.w	d1
00017320 6AE4                       		bpl.s	locret_16950
00017322 D368 000C                  		add.w	d1,$C(a0)
00017326 4268 0012                  		clr.w	$12(a0)
0001732A 5428 0024                  		addq.b	#2,$24(a0)
0001732E 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00017336 317C 22B0 0002             		move.w	#$22B0,2(a0)
0001733C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017342 6700                       		beq.s	loc_16996
00017344 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001734A                            
0001734A                            loc_16996:
0001734A 0228 0003 0001             		andi.b	#3,1(a0)
00017350 0028 0004 0001             		ori.b	#4,1(a0)
00017356 1168 0001 0022             		move.b	1(a0),$22(a0)
0001735C 117C 0004 0018             		move.b	#4,$18(a0)
00017362 117C 0008 0019             		move.b	#8,$19(a0)
00017368 117C 000B 0020             		move.b	#$B,$20(a0)
0001736E 3428 0008                  		move.w	8(a0),d2
00017372 7A0C                       		moveq	#$C,d5
00017374 0828 0000 0022             		btst	#0,$22(a0)
0001737A 6700                       		beq.s	loc_169CA
0001737C 4445                       		neg.w	d5
0001737E                            
0001737E                            loc_169CA:
0001737E 1C3C 0004                  		move.b	#4,d6
00017382 7600                       		moveq	#0,d3
00017384 7804                       		moveq	#4,d4
00017386 2448                       		movea.l	a0,a2
00017388 7202                       		moveq	#2,d1
0001738A                            
0001738A                            Obj78_LoadBody:
0001738A 4EB9 0000 E344             		jsr	SingleObjLoad2
00017390 6600                       		bne.s	Obj78_QuitLoad
00017392 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017396 1346 0024                  		move.b	d6,$24(a1)
0001739A 5406                       		addq.b	#2,d6
0001739C 2368 0004 0004             		move.l	4(a0),4(a1)
000173A2 3368 0002 0002             		move.w	2(a0),2(a1)
000173A8 137C 0005 0018             		move.b	#5,$18(a1)
000173AE 137C 0008 0019             		move.b	#8,$19(a1)
000173B4 137C 00CB 0020             		move.b	#$CB,$20(a1)
000173BA D445                       		add.w	d5,d2
000173BC 3342 0008                  		move.w	d2,8(a1)
000173C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000173C6 1368 0022 0022             		move.b	$22(a0),$22(a1)
000173CC 1368 0022 0001             		move.b	$22(a0),1(a1)
000173D2 137C 0008 001A             		move.b	#8,$1A(a1)
000173D8 234A 003C                  		move.l	a2,$3C(a1)
000173DC 1344 003C                  		move.b	d4,$3C(a1)
000173E0 5804                       		addq.b	#4,d4
000173E2 2449                       		movea.l	a1,a2
000173E4                            
000173E4                            Obj78_QuitLoad:
000173E4 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000173E8                            
000173E8 117C 0007 002A             		move.b	#7,$2A(a0)
000173EE 4228 003C                  		clr.b	$3C(a0)
000173F2                            
000173F2                            Obj78_Action:				; XREF: Obj78_Index
000173F2 4A28 0022                  		tst.b	$22(a0)
000173F6 6B00 0000                  		bmi.w	loc_16C96
000173FA 7000                       		moveq	#0,d0
000173FC 1028 0025                  		move.b	$25(a0),d0
00017400 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017404 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017408 1228 002B                  		move.b	$2B(a0),d1
0001740C 6A00                       		bpl.s	Obj78_Display
0001740E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017414 1028 0026                  		move.b	$26(a0),d0
00017418 0240 007F                  		andi.w	#$7F,d0
0001741C 5828 0026                  		addq.b	#4,$26(a0)
00017420 1031 0000                  		move.b	(a1,d0.w),d0
00017424 6A00                       		bpl.s	Obj78_AniHead
00017426 08A8 0007 002B             		bclr	#7,$2B(a0)
0001742C 6000                       		bra.s	Obj78_Display
0001742E                            ; ===========================================================================
0001742E                            
0001742E                            Obj78_AniHead:
0001742E 0201 0010                  		andi.b	#$10,d1
00017432 D001                       		add.b	d1,d0
00017434 1140 001A                  		move.b	d0,$1A(a0)
00017438                            
00017438                            Obj78_Display:
00017438 3028 0008                  		move.w	8(a0),d0
0001743C 0240 FF80                  		andi.w	#$FF80,d0
00017440 3238 F700                  		move.w	($FFFFF700).w,d1
00017444 0441 0080                  		subi.w	#$80,d1
00017448 0241 FF80                  		andi.w	#$FF80,d1
0001744C 9041                       		sub.w	d1,d0
0001744E 0C40 0280                  		cmpi.w	#$280,d0
00017452 6200 0000                  		bhi.w	Obj78_ChkGone
00017456 4EF9 0000 DEA8             		jmp	DisplaySprite
0001745C                            ; ===========================================================================
0001745C                            
0001745C                            Obj78_ChkGone:
0001745C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017460 7000                       		moveq	#0,d0
00017462 1028 0023                  		move.b	$23(a0),d0
00017466 6700                       		beq.s	loc_16ABC
00017468 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001746E                            
0001746E                            loc_16ABC:
0001746E 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017474 4E75                       		rts	
00017476                            ; ===========================================================================
00017476                            
00017476                            Obj78_Delete:				; XREF: Obj78_Index
00017476 4EF9 0000 DEE4             		jmp	DeleteObject
0001747C                            ; ===========================================================================
0001747C 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001747E 0000                       		dc.w loc_16B02-Obj78_Index2
00017480                            ; ===========================================================================
00017480                            
00017480                            Obj78_Move:				; XREF: Obj78_Index2
00017480 5328 002A                  		subq.b	#1,$2A(a0)
00017484 6B00                       		bmi.s	Obj78_Move2
00017486 4E75                       		rts	
00017488                            ; ===========================================================================
00017488                            
00017488                            Obj78_Move2:
00017488 5428 0025                  		addq.b	#2,$25(a0)
0001748C 117C 0010 002A             		move.b	#$10,$2A(a0)
00017492 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017498 317C 0040 0014             		move.w	#$40,$14(a0)
0001749E 0868 0004 002B             		bchg	#4,$2B(a0)
000174A4 6600                       		bne.s	loc_16AFC
000174A6 4268 0010                  		clr.w	$10(a0)
000174AA 4468 0014                  		neg.w	$14(a0)
000174AE                            
000174AE                            loc_16AFC:
000174AE 08E8 0007 002B             		bset	#7,$2B(a0)
000174B4                            
000174B4                            loc_16B02:				; XREF: Obj78_Index2
000174B4 5328 002A                  		subq.b	#1,$2A(a0)
000174B8 6B00                       		bmi.s	loc_16B5E
000174BA 2F28 0008                  		move.l	8(a0),-(sp)
000174BE 2428 0008                  		move.l	8(a0),d2
000174C2 3028 0010                  		move.w	$10(a0),d0
000174C6 0828 0000 0022             		btst	#0,$22(a0)
000174CC 6700                       		beq.s	loc_16B1E
000174CE 4440                       		neg.w	d0
000174D0                            
000174D0                            loc_16B1E:
000174D0 48C0                       		ext.l	d0
000174D2 E180                       		asl.l	#8,d0
000174D4 D480                       		add.l	d0,d2
000174D6 2142 0008                  		move.l	d2,8(a0)
000174DA 4EBA E2E6                  		jsr	ObjHitFloor
000174DE 241F                       		move.l	(sp)+,d2
000174E0 0C41 FFF8                  		cmpi.w	#-8,d1
000174E4 6D00                       		blt.s	loc_16B70
000174E6 0C41 000C                  		cmpi.w	#$C,d1
000174EA 6C00                       		bge.s	loc_16B70
000174EC D368 000C                  		add.w	d1,$C(a0)
000174F0 4842                       		swap	d2
000174F2 B468 0008                  		cmp.w	8(a0),d2
000174F6 6700                       		beq.s	locret_16B5C
000174F8 7000                       		moveq	#0,d0
000174FA 1028 003C                  		move.b	$3C(a0),d0
000174FE 5228 003C                  		addq.b	#1,$3C(a0)
00017502 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017508 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001750C                            
0001750C                            locret_16B5C:
0001750C 4E75                       		rts	
0001750E                            ; ===========================================================================
0001750E                            
0001750E                            loc_16B5E:
0001750E 5528 0025                  		subq.b	#2,$25(a0)
00017512 117C 0007 002A             		move.b	#7,$2A(a0)
00017518 317C 0000 0010             		move.w	#0,$10(a0)
0001751E 4E75                       		rts	
00017520                            ; ===========================================================================
00017520                            
00017520                            loc_16B70:
00017520 2142 0008                  		move.l	d2,8(a0)
00017524 0868 0000 0022             		bchg	#0,$22(a0)
0001752A 1168 0022 0001             		move.b	$22(a0),1(a0)
00017530 7000                       		moveq	#0,d0
00017532 1028 003C                  		move.b	$3C(a0),d0
00017536 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001753C 5228 003C                  		addq.b	#1,$3C(a0)
00017540 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017546 4E75                       		rts	
00017548                            ; ===========================================================================
00017548                            
00017548                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017548 2268 003C                  		movea.l	$3C(a0),a1
0001754C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017552 6A00                       		bpl.s	Obj78_BodySeg1
00017554 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001755A 1028 0026                  		move.b	$26(a0),d0
0001755E 0240 007F                  		andi.w	#$7F,d0
00017562 5828 0026                  		addq.b	#4,$26(a0)
00017566 4A31 0004                  		tst.b	4(a1,d0.w)
0001756A 6A00                       		bpl.s	Obj78_AniBody
0001756C 5828 0026                  		addq.b	#4,$26(a0)
00017570                            
00017570                            Obj78_AniBody:
00017570 1031 0000                  		move.b	(a1,d0.w),d0
00017574 5000                       		addq.b	#8,d0
00017576 1140 001A                  		move.b	d0,$1A(a0)
0001757A                            
0001757A                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001757A 2268 003C                  		movea.l	$3C(a0),a1
0001757E 4A28 0022                  		tst.b	$22(a0)
00017582 6B00 0000                  		bmi.w	loc_16C90
00017586 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001758C 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017592 6700 0000                  		beq.w	loc_16C64
00017596 3169 0014 0014             		move.w	$14(a1),$14(a0)
0001759C 3029 0010                  		move.w	$10(a1),d0
000175A0 D069 0014                  		add.w	$14(a1),d0
000175A4 3140 0010                  		move.w	d0,$10(a0)
000175A8 2428 0008                  		move.l	8(a0),d2
000175AC 2602                       		move.l	d2,d3
000175AE 3028 0010                  		move.w	$10(a0),d0
000175B2 0828 0000 0022             		btst	#0,$22(a0)
000175B8 6700                       		beq.s	loc_16C0C
000175BA 4440                       		neg.w	d0
000175BC                            
000175BC                            loc_16C0C:
000175BC 48C0                       		ext.l	d0
000175BE E180                       		asl.l	#8,d0
000175C0 D480                       		add.l	d0,d2
000175C2 2142 0008                  		move.l	d2,8(a0)
000175C6 4843                       		swap	d3
000175C8 B668 0008                  		cmp.w	8(a0),d3
000175CC 6700                       		beq.s	loc_16C64
000175CE 7000                       		moveq	#0,d0
000175D0 1028 003C                  		move.b	$3C(a0),d0
000175D4 1231 002C                  		move.b	$2C(a1,d0.w),d1
000175D8 0C01 0080                  		cmpi.b	#-$80,d1
000175DC 6600                       		bne.s	loc_16C50
000175DE 4843                       		swap	d3
000175E0 2143 0008                  		move.l	d3,8(a0)
000175E4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000175E8 0868 0000 0022             		bchg	#0,$22(a0)
000175EE 1168 0022 0001             		move.b	$22(a0),1(a0)
000175F4 5228 003C                  		addq.b	#1,$3C(a0)
000175F8 0228 000F 003C             		andi.b	#$F,$3C(a0)
000175FE 6000                       		bra.s	loc_16C64
00017600                            ; ===========================================================================
00017600                            
00017600                            loc_16C50:
00017600 4881                       		ext.w	d1
00017602 D368 000C                  		add.w	d1,$C(a0)
00017606 5228 003C                  		addq.b	#1,$3C(a0)
0001760A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017610 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017614                            
00017614                            loc_16C64:
00017614 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001761A 6700                       		beq.s	loc_16C90
0001761C 0C11 0027                  		cmpi.b	#$27,0(a1)
00017620 6700                       		beq.s	loc_16C7C
00017622 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017628 6600                       		bne.s	loc_16C82
0001762A                            
0001762A                            loc_16C7C:
0001762A 117C 000A 0024             		move.b	#$A,$24(a0)
00017630                            
00017630                            loc_16C82:
00017630 4EF9 0000 DEA8             		jmp	DisplaySprite
00017636                            
00017636                            ; ===========================================================================
00017636 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001763E                            ; ===========================================================================
0001763E                            
0001763E                            loc_16C90:
0001763E 08E9 0007 0022             		bset	#7,$22(a1)
00017644                            
00017644                            loc_16C96:
00017644 7000                       		moveq	#0,d0
00017646 1028 0024                  		move.b	$24(a0),d0
0001764A 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001764E 0828 0000 0022             		btst	#0,$22(a0)
00017654 6700                       		beq.s	loc_16CAA
00017656 4440                       		neg.w	d0
00017658                            
00017658                            loc_16CAA:
00017658 3140 0010                  		move.w	d0,$10(a0)
0001765C 317C FC00 0012             		move.w	#-$400,$12(a0)
00017662 117C 000C 0024             		move.b	#$C,$24(a0)
00017668 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001766E                            
0001766E                            loc_16CC0:				; XREF: Obj78_Index
0001766E 4EB9 0000 DE10             		jsr	ObjectFall
00017674 4A68 0012                  		tst.w	$12(a0)
00017678 6B00                       		bmi.s	loc_16CE0
0001767A 4EBA E146                  		jsr	ObjHitFloor
0001767E 4A41                       		tst.w	d1
00017680 6A00                       		bpl.s	loc_16CE0
00017682 D368 000C                  		add.w	d1,$C(a0)
00017686 317C FC00 0012             		move.w	#-$400,$12(a0)
0001768C                            
0001768C                            loc_16CE0:
0001768C 4A28 0001                  		tst.b	1(a0)
00017690 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017694 4EF9 0000 DEA8             		jmp	DisplaySprite
0001769A                            ; ===========================================================================
0001769A                            Ani_obj78:
0001769A                            	include "_anim\obj78.asm"
0001769A                            ; ---------------------------------------------------------------------------
0001769A                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001769A                            ; ---------------------------------------------------------------------------
0001769A 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000176AA 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000176BA 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000176CA 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000176DA 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000176EA 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000176FA 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001770A 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001771A                            	even
0001771A                            	even
0001771A                            
0001771A                            ; ---------------------------------------------------------------------------
0001771A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001771A                            ; ---------------------------------------------------------------------------
0001771A                            Map_obj78:
0001771A                            	include "_maps\obj78.asm"
0001771A                            ; ---------------------------------------------------------------------------
0001771A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001771A                            ; ---------------------------------------------------------------------------
0001771A 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001771E 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017722 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017726 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001772A 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001772E 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017732 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017736 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001773A 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001773E 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017742 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017746 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001774A 01                         byte_16D9E:	dc.b 1
0001774B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017750 01                         byte_16DA4:	dc.b 1
00017751 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017756 01                         byte_16DAA:	dc.b 1
00017757 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001775C 01                         byte_16DB0:	dc.b 1
0001775D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017762 01                         byte_16DB6:	dc.b 1
00017763 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017768 01                         byte_16DBC:	dc.b 1
00017769 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001776E 01                         byte_16DC2:	dc.b 1
0001776F EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017774 01                         byte_16DC8:	dc.b 1
00017775 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001777A 01                         byte_16DCE:	dc.b 1
0001777B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017780 01                         byte_16DD4:	dc.b 1
00017781 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017786 01                         byte_16DDA:	dc.b 1
00017787 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001778C 01                         byte_16DE0:	dc.b 1
0001778D F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017792 01                         byte_16DE6:	dc.b 1
00017793 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017798 01                         byte_16DEC:	dc.b 1
00017799 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001779E 01                         byte_16DF2:	dc.b 1
0001779F F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000177A4 01                         byte_16DF8:	dc.b 1
000177A5 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000177AA 01                         byte_16DFE:	dc.b 1
000177AB F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000177B0 01                         byte_16E04:	dc.b 1
000177B1 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000177B6 01                         byte_16E0A:	dc.b 1
000177B7 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000177BC 01                         byte_16E10:	dc.b 1
000177BD EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000177C2 01                         byte_16E16:	dc.b 1
000177C3 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000177C8 01                         byte_16E1C:	dc.b 1
000177C9 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000177CE 01                         byte_16E22:	dc.b 1
000177CF EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000177D4 01                         byte_16E28:	dc.b 1
000177D5 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000177DA                            		even
000177DA                            		even
000177DA                            
000177DA                            ; ===========================================================================
000177DA                            ; ---------------------------------------------------------------------------
000177DA                            ; Object 79 - lamppost
000177DA                            ; ---------------------------------------------------------------------------
000177DA                            
000177DA                            Obj79:					; XREF: Obj_Index
000177DA 7000                       		moveq	#0,d0
000177DC 1028 0024                  		move.b	$24(a0),d0
000177E0 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000177E4 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000177E8 4EFA 8766                  		jmp	MarkObjGone
000177EC                            ; ===========================================================================
000177EC 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000177EE 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000177F0 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000177F2 0000                       		dc.w Obj79_Twirl-Obj79_Index
000177F4                            ; ===========================================================================
000177F4                            
000177F4                            Obj79_Main:				; XREF: Obj79_Index
000177F4 5428 0024                  		addq.b	#2,$24(a0)
000177F8 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017800 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017806 117C 0004 0001             		move.b	#4,1(a0)
0001780C 117C 0008 0019             		move.b	#8,$19(a0)
00017812 117C 0005 0018             		move.b	#5,$18(a0)
00017818 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001781C 7000                       		moveq	#0,d0
0001781E 1028 0023                  		move.b	$23(a0),d0
00017822 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017828 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001782E 6600                       		bne.s	Obj79_RedLamp
00017830 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017834 0201 007F                  		andi.b	#$7F,d1
00017838 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001783C 0202 007F                  		andi.b	#$7F,d2
00017840 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017842 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017844                            
00017844                            Obj79_RedLamp:
00017844 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001784A 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017850 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017856 4E75                       		rts	
00017858                            ; ===========================================================================
00017858                            
00017858                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017858 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001785C 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017860 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017864 6B00 0000                  		bmi.w	locret_16F90
00017868 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001786C 0201 007F                  		andi.b	#$7F,d1
00017870 1428 0028                  		move.b	$28(a0),d2
00017874 0202 007F                  		andi.b	#$7F,d2
00017878 B202                       		cmp.b	d2,d1
0001787A 6500                       		bcs.s	Obj79_HitLamp
0001787C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017880 7000                       		moveq	#0,d0
00017882 1028 0023                  		move.b	$23(a0),d0
00017886 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001788C 117C 0004 0024             		move.b	#4,$24(a0)
00017892 117C 0003 001A             		move.b	#3,$1A(a0)
00017898 6000 0000                  		bra.w	locret_16F90
0001789C                            ; ===========================================================================
0001789C                            
0001789C                            Obj79_HitLamp:
0001789C 3038 D008                  		move.w	($FFFFD008).w,d0
000178A0 9068 0008                  		sub.w	8(a0),d0
000178A4 5040                       		addq.w	#8,d0
000178A6 0C40 0010                  		cmpi.w	#$10,d0
000178AA 6400 0000                  		bcc.w	locret_16F90
000178AE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000178B2 9068 000C                  		sub.w	$C(a0),d0
000178B6 0640 0040                  		addi.w	#$40,d0
000178BA 0C40 0068                  		cmpi.w	#$68,d0
000178BE 6400                       		bcc.s	locret_16F90
000178C0 303C 00A1                  		move.w	#$A1,d0
000178C4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lamppost sound
000178CA 5428 0024                  		addq.b	#2,$24(a0)
000178CE 4EB9 0000 E32E             		jsr	SingleObjLoad
000178D4 6600                       		bne.s	loc_16F76
000178D6 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000178DA 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000178E0 3368 0008 0030             		move.w	8(a0),$30(a1)
000178E6 3368 000C 0032             		move.w	$C(a0),$32(a1)
000178EC 0469 0018 0032             		subi.w	#$18,$32(a1)
000178F2 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000178FA 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017900 137C 0004 0001             		move.b	#4,1(a1)
00017906 137C 0008 0019             		move.b	#8,$19(a1)
0001790C 137C 0004 0018             		move.b	#4,$18(a1)
00017912 137C 0002 001A             		move.b	#2,$1A(a1)
00017918 337C 0020 0036             		move.w	#$20,$36(a1)
0001791E                            
0001791E                            loc_16F76:
0001791E 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017924 6100 0000                  		bsr.w	Obj79_StoreInfo
00017928 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001792C 7000                       		moveq	#0,d0
0001792E 1028 0023                  		move.b	$23(a0),d0
00017932 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017938                            
00017938                            locret_16F90:
00017938 4E75                       		rts	
0001793A                            ; ===========================================================================
0001793A                            
0001793A                            Obj79_AfterHit:				; XREF: Obj79_Index
0001793A 4E75                       		rts	
0001793C                            ; ===========================================================================
0001793C                            
0001793C                            Obj79_Twirl:				; XREF: Obj79_Index
0001793C 5368 0036                  		subq.w	#1,$36(a0)
00017940 6A00                       		bpl.s	loc_16FA0
00017942 117C 0004 0024             		move.b	#4,$24(a0)
00017948                            
00017948                            loc_16FA0:
00017948 1028 0026                  		move.b	$26(a0),d0
0001794C 0428 0010 0026             		subi.b	#$10,$26(a0)
00017952 0400 0040                  		subi.b	#$40,d0
00017956 4EB9 0000 2D36             		jsr	(CalcSine).l
0001795C C3FC 0C00                  		muls.w	#$C00,d1
00017960 4841                       		swap	d1
00017962 D268 0030                  		add.w	$30(a0),d1
00017966 3141 0008                  		move.w	d1,8(a0)
0001796A C1FC 0C00                  		muls.w	#$C00,d0
0001796E 4840                       		swap	d0
00017970 D068 0032                  		add.w	$32(a0),d0
00017974 3140 000C                  		move.w	d0,$C(a0)
00017978 4E75                       		rts	
0001797A                            ; ===========================================================================
0001797A                            ; ---------------------------------------------------------------------------
0001797A                            ; Subroutine to	store information when you hit a lamppost
0001797A                            ; ---------------------------------------------------------------------------
0001797A                            
0001797A                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001797A 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017980 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017986 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001798C 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017992 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017998 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001799E 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000179A4 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000179AA 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000179B0 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000179B6 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000179BC 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000179C2 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000179C8 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000179CE 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000179D4 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000179DA 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000179E0 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000179E6 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000179EC 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000179F2 4E75                       		rts	
000179F4                            
000179F4                            ; ---------------------------------------------------------------------------
000179F4                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000179F4                            ; ---------------------------------------------------------------------------
000179F4                            
000179F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000179F4                            
000179F4                            
000179F4                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000179F4 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000179FA 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017A00 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017A06 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017A0C 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017A12 4278 FE20                  		clr.w	($FFFFFE20).w
00017A16 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017A1A 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017A20 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017A26 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017A2A 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017A30 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017A36 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017A3C 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017A42 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017A48 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017A4E 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017A54 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017A5A 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017A60 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017A66 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017A6C 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017A72 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017A78 6600                       		bne.s	loc_170E4
00017A7A 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017A80 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017A86 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017A8C                            
00017A8C                            loc_170E4:
00017A8C 4A38 FE30                  		tst.b	($FFFFFE30).w
00017A90 6A00                       		bpl.s	locret_170F6
00017A92 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017A96 0440 00A0                  		subi.w	#$A0,d0
00017A9A 31C0 F728                  		move.w	d0,($FFFFF728).w
00017A9E                            
00017A9E                            locret_170F6:
00017A9E 4E75                       		rts	
00017AA0                            ; End of function Obj79_LoadInfo
00017AA0                            
00017AA0                            ; ===========================================================================
00017AA0                            ; ---------------------------------------------------------------------------
00017AA0                            ; Sprite mappings - lamppost
00017AA0                            ; ---------------------------------------------------------------------------
00017AA0                            Map_obj79:
00017AA0                            	include "_maps\obj79.asm"
00017AA0                            ; ---------------------------------------------------------------------------
00017AA0                            ; Sprite mappings - lamppost
00017AA0                            ; ---------------------------------------------------------------------------
00017AA0 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017AA4 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017AA8 06                         byte_17100:	dc.b 6
00017AA9 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017AAE E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017AB3 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017AB8 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017ABD D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017AC2 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017AC7 04                         byte_1711F:	dc.b 4
00017AC8 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017ACD E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017AD2 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017AD7 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017ADC 02                         byte_17134:	dc.b 2
00017ADD F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017AE2 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017AE7 06                         byte_1713F:	dc.b 6
00017AE8 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017AED E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017AF2 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017AF7 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017AFC D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017B01 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017B06                            		even
00017B06                            		even
00017B06                            
00017B06                            ; ===========================================================================
00017B06                            ; ---------------------------------------------------------------------------
00017B06                            ; Object 7D - hidden points at the end of a level
00017B06                            ; ---------------------------------------------------------------------------
00017B06                            
00017B06                            Obj7D:					; XREF: Obj_Index
00017B06 7000                       		moveq	#0,d0
00017B08 1028 0024                  		move.b	$24(a0),d0
00017B0C 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017B10 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017B14                            ; ===========================================================================
00017B14 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017B16 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017B18                            ; ===========================================================================
00017B18                            
00017B18                            Obj7D_Main:				; XREF: Obj7D_Index
00017B18 7410                       		moveq	#$10,d2
00017B1A 3602                       		move.w	d2,d3
00017B1C D643                       		add.w	d3,d3
00017B1E 43F8 D000                  		lea	($FFFFD000).w,a1
00017B22 3029 0008                  		move.w	8(a1),d0
00017B26 9068 0008                  		sub.w	8(a0),d0
00017B2A D042                       		add.w	d2,d0
00017B2C B043                       		cmp.w	d3,d0
00017B2E 6400                       		bcc.s	Obj7D_ChkDel
00017B30 3229 000C                  		move.w	$C(a1),d1
00017B34 9268 000C                  		sub.w	$C(a0),d1
00017B38 D242                       		add.w	d2,d1
00017B3A B243                       		cmp.w	d3,d1
00017B3C 6400                       		bcc.s	Obj7D_ChkDel
00017B3E 4A78 FE08                  		tst.w	($FFFFFE08).w
00017B42 6600                       		bne.s	Obj7D_ChkDel
00017B44 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017B48 6600                       		bne.s	Obj7D_ChkDel
00017B4A 5428 0024                  		addq.b	#2,$24(a0)
00017B4E 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017B56 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017B5C 0028 0004 0001             		ori.b	#4,1(a0)
00017B62 117C 0000 0018             		move.b	#0,$18(a0)
00017B68 117C 0010 0019             		move.b	#$10,$19(a0)
00017B6E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017B74 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017B7A 303C 00C9                  		move.w	#$C9,d0
00017B7E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play bonus sound
00017B84 7000                       		moveq	#0,d0
00017B86 1028 0028                  		move.b	$28(a0),d0
00017B8A D040                       		add.w	d0,d0
00017B8C 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017B90 4EB9 0000 0000             		jsr	AddPoints
00017B96                            
00017B96                            Obj7D_ChkDel:
00017B96 3028 0008                  		move.w	8(a0),d0
00017B9A 0240 FF80                  		andi.w	#$FF80,d0
00017B9E 3238 F700                  		move.w	($FFFFF700).w,d1
00017BA2 0441 0080                  		subi.w	#$80,d1
00017BA6 0241 FF80                  		andi.w	#$FF80,d1
00017BAA 9041                       		sub.w	d1,d0
00017BAC 0C40 0280                  		cmpi.w	#$280,d0
00017BB0 6200                       		bhi.s	Obj7D_Delete
00017BB2 4E75                       		rts	
00017BB4                            ; ===========================================================================
00017BB4                            
00017BB4                            Obj7D_Delete:
00017BB4 4EF9 0000 DEE4             		jmp	DeleteObject
00017BBA                            ; ===========================================================================
00017BBA 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017BBC 03E8                       		dc.w 1000
00017BBE 0064                       		dc.w 100
00017BC0 0001                       		dc.w 1
00017BC2                            ; ===========================================================================
00017BC2                            
00017BC2                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017BC2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017BC6 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017BC8 3028 0008                  		move.w	8(a0),d0
00017BCC 0240 FF80                  		andi.w	#-$80,d0
00017BD0 3238 F700                  		move.w	($FFFFF700).w,d1
00017BD4 0441 0080                  		subi.w	#$80,d1
00017BD8 0241 FF80                  		andi.w	#-$80,d1
00017BDC 9041                       		sub.w	d1,d0
00017BDE 0C40 0280                  		cmpi.w	#$280,d0
00017BE2 6200                       		bhi.s	Obj7D_Delete2
00017BE4 4EF9 0000 DEA8             		jmp	DisplaySprite
00017BEA                            ; ===========================================================================
00017BEA                            
00017BEA                            Obj7D_Delete2:
00017BEA 4EF9 0000 DEE4             		jmp	DeleteObject
00017BF0                            ; ===========================================================================
00017BF0                            ; ---------------------------------------------------------------------------
00017BF0                            ; Sprite mappings - hidden points at the end of	a level
00017BF0                            ; ---------------------------------------------------------------------------
00017BF0                            Map_obj7D:
00017BF0                            	include "_maps\obj7D.asm"
00017BF0                            ; ---------------------------------------------------------------------------
00017BF0                            ; Sprite mappings - hidden points at the end of	a level
00017BF0                            ; ---------------------------------------------------------------------------
00017BF0 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017BF4 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017BF8 00                         byte_17250:	dc.b 0
00017BF9 01                         byte_17251:	dc.b 1
00017BFA F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017BFF 01                         byte_17257:	dc.b 1
00017C00 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017C05 01                         byte_1725D:	dc.b 1
00017C06 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017C0C 00                         		even
00017C0C 00                         		even
00017C0C                            
00017C0C                            ; ===========================================================================
00017C0C                            ; ---------------------------------------------------------------------------
00017C0C                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017C0C                            ; ---------------------------------------------------------------------------
00017C0C                            
00017C0C                            Obj8A:					; XREF: Obj_Index
00017C0C 7000                       		moveq	#0,d0
00017C0E 1028 0024                  		move.b	$24(a0),d0
00017C12 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017C16 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017C1A                            ; ===========================================================================
00017C1A 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017C1C 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017C1E                            ; ===========================================================================
00017C1E                            
00017C1E                            Obj8A_Main:				; XREF: Obj8A_Index
00017C1E 5428 0024                  		addq.b	#2,$24(a0)
00017C22 317C 0120 0008             		move.w	#$120,8(a0)
00017C28 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017C2E 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017C36 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017C3C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017C40 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017C44 117C 0000 0001             		move.b	#0,1(a0)
00017C4A 117C 0000 0018             		move.b	#0,$18(a0)
00017C50 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017C56 6600                       		bne.s	Obj8A_Display	; if not, branch
00017C58 317C 00A6 0002             		move.w	#$A6,2(a0)
00017C5E 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017C64 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017C68 6700                       		beq.s	Obj8A_Display	; if not, branch
00017C6A 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017C70 6600                       		bne.s	Obj8A_Display	; if not, branch
00017C72 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017C78 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017C7E 4EF9 0000 DEE4             		jmp	DeleteObject
00017C84                            ; ===========================================================================
00017C84                            
00017C84                            Obj8A_Display:				; XREF: Obj8A_Index
00017C84 4EF9 0000 DEA8             		jmp	DisplaySprite
00017C8A                            ; ===========================================================================
00017C8A                            ; ---------------------------------------------------------------------------
00017C8A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017C8A                            ; ---------------------------------------------------------------------------
00017C8A                            Map_obj8A:
00017C8A                            	include "_maps\obj8A.asm"
00017C8A                            Map_ca8f:
00017C8A 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017C8C 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017C8E 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017C90 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017C92 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017C94 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017C96 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017C98 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017C9A 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017C9C 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017C9E 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017CA0 08                         Map_ca8f_16: 	dc.b $8
00017CA1 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017CA6 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017CAB F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017CB0 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017CB5 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017CBA B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017CBF B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017CC4 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017CC9 10                         Map_ca8f_3F: 	dc.b $10
00017CCA D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017CCF D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017CD4 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017CD9 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017CDE D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017CE3 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017CE8 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017CED D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017CF2 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017CF7 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017CFC 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017D01 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017D06 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017D0B 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017D10 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017D15 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017D1A 0A                         Map_ca8f_90: 	dc.b $A
00017D1B D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017D20 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017D25 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017D2A D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017D2F D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017D34 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017D39 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017D3E 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017D43 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017D48 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017D4D 18                         Map_ca8f_C3: 	dc.b $18
00017D4E D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017D53 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017D58 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017D5D D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017D62 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017D67 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017D6C D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017D71 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017D76 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017D7B D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017D80 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017D85 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017D8A D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017D8F D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017D94 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017D99 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017D9E 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017DA3 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017DA8 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017DAD 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017DB2 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017DB7 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017DBC 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017DC1 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017DC6 14                         Map_ca8f_13C: 	dc.b $14
00017DC7 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017DCC D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017DD1 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017DD6 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017DDB D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017DE0 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017DE5 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017DEA 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017DEF 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017DF4 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017DF9 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017DFE 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017E03 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017E08 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017E0D 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017E12 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017E17 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017E1C 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017E21 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017E26 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017E2B 1A                         Map_ca8f_1A1: 	dc.b $1A
00017E2C D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017E31 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017E36 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017E3B D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017E40 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017E45 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017E4A D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017E4F D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017E54 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017E59 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017E5E D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017E63 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017E68 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017E6D 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017E72 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017E77 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017E7C 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017E81 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017E86 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017E8B 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017E90 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017E95 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017E9A 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017E9F 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017EA4 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017EA9 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017EAE 17                         Map_ca8f_224: 	dc.b $17
00017EAF D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017EB4 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017EB9 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017EBE D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017EC3 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017EC8 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017ECD D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017ED2 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017ED7 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017EDC D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017EE1 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017EE6 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017EEB 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017EF0 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017EF5 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017EFA 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017EFF 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017F04 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017F09 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017F0E 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017F13 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017F18 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017F1D 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017F22 1F                         Map_ca8f_298: 	dc.b $1F
00017F23 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017F28 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017F2D D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017F32 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017F37 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017F3C D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017F41 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017F46 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017F4B D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017F50 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017F55 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017F5A D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017F5F D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017F64 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017F69 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017F6E 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017F73 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017F78 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017F7D 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017F82 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017F87 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017F8C 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017F91 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017F96 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017F9B 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017FA0 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017FA5 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017FAA 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017FAF 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017FB4 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017FB9 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017FBE 0F                         Map_ca8f_334: 	dc.b $F
00017FBF F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017FC4 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017FC9 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017FCE F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017FD3 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017FD8 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017FDD F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017FE2 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017FE7 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017FEC F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017FF1 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017FF6 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017FFB F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00018000 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00018005 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
0001800A 08                         Map_ca8f_380: 	dc.b $8
0001800B 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00018010 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00018015 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
0001801A 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
0001801F 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00018024 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00018029 3001 0046 28               	dc.b $30, $1, $0, $46, $28
0001802E 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00018033 20                         Map_ca8f_3A9: 	dc.b $20
00018034 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00018039 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
0001803E ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00018043 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00018048 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
0001804D ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00018052 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00018057 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
0001805C FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00018061 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00018066 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
0001806B FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00018070 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00018075 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
0001807A 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
0001807F 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00018084 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00018089 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
0001808E 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00018093 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00018098 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
0001809D 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
000180A2 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
000180A7 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
000180AC 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
000180B1 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
000180B6 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
000180BB 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
000180C0 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
000180C5 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
000180CA 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
000180CF 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
000180D4                            	even
000180D4                            	even
000180D4                            
000180D4                            ; ===========================================================================
000180D4                            ; ---------------------------------------------------------------------------
000180D4                            ; Object 3D - matthew boss - modified by GK89
000180D4                            ; ---------------------------------------------------------------------------
000180D4                            
000180D4                            Obj3D:					; XREF: Obj_Index
000180D4 7000                       		moveq	#0,d0
000180D6 1028 0024                  		move.b	$24(a0),d0
000180DA 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000180DE 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000180E2                            ; ===========================================================================
000180E2 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000180E4 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000180E6 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000180E8 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000180EA                            
000180EA 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000180EC 0401                       		dc.b 4,	1
000180EE 0607                       		dc.b 6,	7
000180F0                            ; ===========================================================================
000180F0                            
000180F0                            Obj3D_Main:				; XREF: Obj3D_Index
000180F0 45F9 0001 80EA             		lea	(Obj3D_ObjData).l,a2
000180F6 2248                       		movea.l	a0,a1
000180F8 7202                       		moveq	#2,d1
000180FA 6000                       		bra.s	Obj3D_LoadBoss
000180FC                            ; ===========================================================================
000180FC                            
000180FC                            Obj3D_Loop:
000180FC 4EB9 0000 E344             		jsr	SingleObjLoad2
00018102 6600                       		bne.s	loc_17772
00018104                            
00018104                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018104 135A 0024                  		move.b	(a2)+,$24(a1)
00018108 12BC 003D                  		move.b	#$3D,0(a1)
0001810C 3368 0008 0008             		move.w	8(a0),8(a1)
00018112 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018118 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018120 337C 0400 0002             		move.w	#$400,2(a1)
00018126 137C 0004 0001             		move.b	#4,1(a1)
0001812C 137C 0020 0019             		move.b	#$20,$19(a1)
00018132 137C 0003 0018             		move.b	#3,$18(a1)
00018138 135A 001C                  		move.b	(a2)+,$1C(a1)
0001813C 2348 0034                  		move.l	a0,$34(a1)
00018140 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018144                            
00018144                            loc_17772:
00018144 3168 0008 0030             		move.w	8(a0),$30(a0)
0001814A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018150 117C 000F 0020             		move.b	#$F,$20(a0)
00018156 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
0001815C                            
0001815C                            Obj3D_ShipMain:				; XREF: Obj3D_Index
0001815C 7000                       		moveq	#0,d0
0001815E 1028 0025                  		move.b	$25(a0),d0
00018162 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00018166 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
0001816A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018170 4EB9 0000 AF22             		jsr	AnimateSprite
00018176 1028 0022                  		move.b	$22(a0),d0
0001817A 0200 0003                  		andi.b	#3,d0
0001817E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018184 8128 0001                  		or.b	d0,1(a0)
00018188 4EF9 0000 DEA8             		jmp	DisplaySprite
0001818E                            ; ===========================================================================
0001818E 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00018190 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00018192 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00018194 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00018196 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018198 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
0001819A 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
0001819C                            ; ===========================================================================
0001819C                            
0001819C                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
0001819C 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000181A2 6100 0000                  		bsr.w	BossMove
000181A6 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000181AC 6600                       		bne.s	loc_177E6
000181AE 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000181B4 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000181B8                            
000181B8                            loc_177E6:
000181B8 1028 003F                  		move.b	$3F(a0),d0
000181BC 4EB9 0000 2D36             		jsr	(CalcSine).l
000181C2 EC40                       		asr.w	#6,d0
000181C4 D068 0038                  		add.w	$38(a0),d0
000181C8 3140 000C                  		move.w	d0,$C(a0)
000181CC 3168 0030 0008             		move.w	$30(a0),8(a0)
000181D2 5428 003F                  		addq.b	#2,$3F(a0)
000181D6 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000181DC 6400                       		bcc.s	locret_1784A
000181DE 4A28 0022                  		tst.b	$22(a0)
000181E2 6B00                       		bmi.s	loc_1784C
000181E4 4A28 0020                  		tst.b	$20(a0)
000181E8 6600                       		bne.s	locret_1784A
000181EA 4A28 003E                  		tst.b	$3E(a0)
000181EE 6600                       		bne.s	Obj3D_ShipFlash
000181F0 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000181F6 303C 00AC                  		move.w	#$AC,d0
000181FA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018200                            
00018200                            Obj3D_ShipFlash:
00018200 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018204 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018206 4A51                       		tst.w	(a1)
00018208 6600                       		bne.s	loc_1783C
0001820A 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001820E                            
0001820E                            loc_1783C:
0001820E 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018210 5328 003E                  		subq.b	#1,$3E(a0)
00018214 6600                       		bne.s	locret_1784A
00018216 117C 000F 0020             		move.b	#$F,$20(a0)
0001821C                            
0001821C                            locret_1784A:
0001821C 4E75                       		rts	
0001821E                            ; ===========================================================================
0001821E                            
0001821E                            loc_1784C:				; XREF: loc_177E6
0001821E 7064                       		moveq	#100,d0
00018220 6100 0000                  		bsr.w	AddPoints
00018224 117C 0008 0025             		move.b	#8,$25(a0)
0001822A 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018230 4E75                       		rts	
00018232                            
00018232                            ; ---------------------------------------------------------------------------
00018232                            ; Defeated boss	subroutine
00018232                            ; ---------------------------------------------------------------------------
00018232                            
00018232                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018232                            
00018232                            
00018232                            BossDefeated:
00018232 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018236 0200 0007                  		andi.b	#7,d0
0001823A 6600                       		bne.s	locret_178A2
0001823C 4EB9 0000 E32E             		jsr	SingleObjLoad
00018242 6600                       		bne.s	locret_178A2
00018244 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018248 3368 0008 0008             		move.w	8(a0),8(a1)
0001824E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018254 4EB9 0000 2D10             		jsr	(RandomNumber).l
0001825A 3200                       		move.w	d0,d1
0001825C 7200                       		moveq	#0,d1
0001825E 1200                       		move.b	d0,d1
00018260 E409                       		lsr.b	#2,d1
00018262 0441 0020                  		subi.w	#$20,d1
00018266 D369 0008                  		add.w	d1,8(a1)
0001826A E048                       		lsr.w	#8,d0
0001826C E608                       		lsr.b	#3,d0
0001826E D169 000C                  		add.w	d0,$C(a1)
00018272                            
00018272                            locret_178A2:
00018272 4E75                       		rts	
00018274                            ; End of function BossDefeated
00018274                            
00018274                            ; ---------------------------------------------------------------------------
00018274                            ; Subroutine to	move a boss
00018274                            ; ---------------------------------------------------------------------------
00018274                            
00018274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018274                            
00018274                            
00018274                            BossMove:
00018274 2428 0030                  		move.l	$30(a0),d2
00018278 2628 0038                  		move.l	$38(a0),d3
0001827C 3028 0010                  		move.w	$10(a0),d0
00018280 48C0                       		ext.l	d0
00018282 E180                       		asl.l	#8,d0
00018284 D480                       		add.l	d0,d2
00018286 3028 0012                  		move.w	$12(a0),d0
0001828A 48C0                       		ext.l	d0
0001828C E180                       		asl.l	#8,d0
0001828E D680                       		add.l	d0,d3
00018290 2142 0030                  		move.l	d2,$30(a0)
00018294 2143 0038                  		move.l	d3,$38(a0)
00018298 4E75                       		rts	
0001829A                            ; End of function BossMove
0001829A                            
0001829A                            ; ===========================================================================
0001829A                            
0001829A                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
0001829A 6100 FFD8                  		bsr.w	BossMove
0001829E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000182A4 6600                       		bne.s	loc_17916
000182A6 317C 0000 0010             		move.w	#0,$10(a0)
000182AC 317C 0000 0012             		move.w	#0,$12(a0)
000182B2 5428 0025                  		addq.b	#2,$25(a0)
000182B6 4EB9 0000 E344             		jsr	SingleObjLoad2
000182BC 6600                       		bne.s	loc_17910
000182BE 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000182C2 3368 0030 0008             		move.w	$30(a0),8(a1)
000182C8 3368 0038 000C             		move.w	$38(a0),$C(a1)
000182CE 2348 0034                  		move.l	a0,$34(a1)
000182D2                            
000182D2                            loc_17910:
000182D2 317C 0077 003C             		move.w	#$77,$3C(a0)
000182D8                            
000182D8                            loc_17916:
000182D8 6000 FEDE                  		bra.w	loc_177E6
000182DC                            ; ===========================================================================
000182DC                            
000182DC                            Obj3D_ShipMove:				; XREF:  sonic follow move
000182DC 5368 003C                  		subq.w	#1,$3C(a0)
000182E0 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
000182E6 5428 0025                  		addq.b	#2,$25(a0)
000182EA 317C 003F 003C             		move.w	#$3F,$3C(a0)
000182F0 3038 D008                  		move.w	($FFFFD008).w,d0	 
000182F4 9068 0008                  		sub.w	8(a0),d0		 
000182F8 6A00                       		bpl.s	Obj3D_left			 
000182FA 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018300 6000                       		bra.s	Obj3D_right		 
00018302 08A8 0005 0022             		bclr	#5,$22(a0)
00018308 4EB9 0000 0000              		jsr     loc_17950
0001830E 4E75                       		rts
00018310                            ; ===========================================================================
00018310                            
00018310                            Obj3D_right:
00018310 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018316 4E75                       		Rts
00018318                            
00018318                            Obj3D_left:
00018318 317C 0100 0010             		move.w	#$100,$10(a0)	 
0001831E 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018324 6600                       		bne.s	RTSboss  	; if not, branch
00018326 0868 0000 0022              		bchg	#0,$22(a0)
0001832C                            
0001832C                            RTSboss:	    
0001832C 4E75                       		rts
0001832E                             ; ===========================================================================
0001832E                            
0001832E                            Obj3D_UpStuff:
0001832E 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018332 9068 000C                  		sub.w	$C(a0),d0		 
00018336 6A00                       		bpl.s	Obj3D_down			 
00018338 6000                        		bra.s	Obj3D_up		 
0001833A 08A8 0005 0022             		bclr	#5,$22(a0)
00018340                             
00018340                            Obj3D_up:		
00018340 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018346 4E75                        	    rts
00018348                            
00018348                            Obj3D_down:
00018348 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
0001834E                            
0001834E                            loc_17950:
0001834E 6000 FE68                  		bra.w	loc_177E6
00018352                            ; ===========================================================================
00018352                            
00018352                            loc_17954:				; XREF: Obj3D_ShipIndex
00018352 5368 003C                  		subq.w	#1,$3C(a0)
00018356 6B00                       		bmi.s	loc_17960
00018358 6100 FF1A                  		bsr.w	BossMove
0001835C 6000                       		bra.s	loc_17976
0001835E                            ; ===========================================================================
0001835E                            
0001835E                            loc_17960:
0001835E 0868 0000 0022             		bchg	#0,$22(a0)
00018364 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001836A 5528 0025                  		subq.b	#2,$25(a0)
0001836E 317C 0000 0010             		move.w	#0,$10(a0)
00018374                            
00018374                            loc_17976:
00018374 6000 FE42                  		bra.w	loc_177E6
00018378                            ; ===========================================================================
00018378                            
00018378                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018378 5368 003C                  		subq.w	#1,$3C(a0)
0001837C 6B00                       		bmi.s	loc_17984
0001837E 6000 FEB2                  		bra.w	BossDefeated
00018382                            ; ===========================================================================
00018382                            
00018382                            loc_17984:
00018382 08E8 0000 0022             		bset	#0,$22(a0)
00018388 08A8 0007 0022             		bclr	#7,$22(a0)
0001838E 4268 0010                  		clr.w	$10(a0)
00018392 5428 0025                  		addq.b	#2,$25(a0)
00018396 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001839C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000183A0 6600                       		bne.s	locret_179AA
000183A2 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000183A8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000183AE 6000 FE82                  		bra.w	BossDefeated
000183B2                            
000183B2                            locret_179AA:
000183B2 4E75                       		rts	
000183B4                            ; ===========================================================================
000183B4                            
000183B4                            loc_179AC:				; XREF: Obj3D_ShipIndex
000183B4 4EB9 0000 DE10             		jsr ObjectFall		
000183BA 5268 003C                  		addq.w	#1,$3C(a0)
000183BE 6700                       		beq.s	loc_179BC
000183C0 6A00                       		bpl.s	loc_179C2
000183C2 6000                       		bra.s	loc_179EE
000183C4                            ; ===========================================================================
000183C4                            
000183C4                            loc_179BC:
000183C4 4268 0012                  		clr.w	$12(a0)
000183C8 6000                       		bra.s	loc_179EE
000183CA                            ; ===========================================================================
000183CA                            
000183CA                            loc_179C2:
000183CA 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000183D0 6500                       		bcs.s	loc_179DA
000183D2 6700                       		beq.s	loc_179E0
000183D4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000183DA 6500                       		bcs.s	loc_179EE
000183DC 5428 0025                  		addq.b	#2,$25(a0)
000183E0 6000                       		bra.s	loc_179EE
000183E2                            ; ===========================================================================
000183E2                            
000183E2                            loc_179DA:
000183E2 5168 0012                  		subq.w	#8,$12(a0)
000183E6 6000                       		bra.s	loc_179EE
000183E8 6000 FE48                  		bra.w	BossDefeated
000183EC                            ; ===========================================================================
000183EC                            
000183EC                            loc_179E0:
000183EC 4268 0012                  		clr.w	$12(a0)
000183F0 303C 0081                  		move.w	#$81,d0
000183F4 4EB9 0000 15CC             		jsr	(PlaySound).l	; play GHZ music
000183FA                            
000183FA                            loc_179EE:
000183FA 6100 FE78                  		bsr.w	BossMove
000183FE 6000 FDB8                  		bra.w	loc_177E6
00018402                            ; ===========================================================================
00018402                            
00018402                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018402 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018408 6700                       		beq.s	loc_17A10
0001840A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001840E 6000                       		bra.s	loc_17A16
00018410                            ; ===========================================================================
00018410                            
00018410                            loc_17A10:
00018410 4A28 0001                  		tst.b	1(a0)
00018414 6A00                       		bpl.s	Obj3D_ShipDel
00018416                            
00018416                            loc_17A16:
00018416 6100 FE5C                  		bsr.w	BossMove
0001841A 6000 FD9C                  		bra.w	loc_177E6
0001841E                            ; ===========================================================================
0001841E                            
0001841E                            Obj3D_ShipDel:
0001841E 4EF9 0000 DEE4             		jmp	DeleteObject
00018424                            ; ===========================================================================
00018424                            
00018424                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018424 7000                       		moveq	#0,d0
00018426 7201                       		moveq	#1,d1
00018428 2268 0034                  		movea.l	$34(a0),a1
0001842C 1029 0025                  		move.b	$25(a1),d0
00018430 5900                       		subq.b	#4,d0
00018432 6600                       		bne.s	loc_17A3E
00018434 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001843A 6600                       		bne.s	loc_17A46
0001843C 7204                       		moveq	#4,d1
0001843E                            
0001843E                            loc_17A3E:
0001843E 5D00                       		subq.b	#6,d0
00018440 6B00                       		bmi.s	loc_17A46
00018442 720A                       		moveq	#$A,d1
00018444 6000                       		bra.s	loc_17A5A
00018446                            ; ===========================================================================
00018446                            
00018446                            loc_17A46:
00018446 4A29 0020                  		tst.b	$20(a1)
0001844A 6600                       		bne.s	loc_17A50
0001844C 7205                       		moveq	#5,d1
0001844E 6000                       		bra.s	loc_17A5A
00018450                            ; ===========================================================================
00018450                            
00018450                            loc_17A50:
00018450 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018456 6500                       		bcs.s	loc_17A5A
00018458 7204                       		moveq	#4,d1
0001845A                            
0001845A                            loc_17A5A:
0001845A 1141 001C                  		move.b	d1,$1C(a0)
0001845E 5500                       		subq.b	#2,d0
00018460 6600                       		bne.s	Obj3D_FaceDisp
00018462 117C 0006 001C             		move.b	#6,$1C(a0)
00018468 4A28 0001                  		tst.b	1(a0)
0001846C 6A00                       		bpl.s	Obj3D_FaceDel
0001846E                            
0001846E                            Obj3D_FaceDisp:
0001846E 6000                       		bra.s	Obj3D_Display
00018470                            ; ===========================================================================
00018470                            
00018470                            Obj3D_FaceDel:
00018470 4EF9 0000 DEE4             		jmp	DeleteObject
00018476                            ; ===========================================================================
00018476                            
00018476                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018476 117C 0007 001C             		move.b	#7,$1C(a0)
0001847C 2268 0034                  		movea.l	$34(a0),a1
00018480 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018486 6600                       		bne.s	loc_17A96
00018488 117C 000B 001C             		move.b	#$B,$1C(a0)
0001848E 4A28 0001                  		tst.b	1(a0)
00018492 6A00                       		bpl.s	Obj3D_FlameDel
00018494 6000                       		bra.s	Obj3D_FlameDisp
00018496                            ; ===========================================================================
00018496                            
00018496                            loc_17A96:
00018496 3029 0010                  		move.w	$10(a1),d0
0001849A 6700                       		beq.s	Obj3D_FlameDisp
0001849C 117C 0008 001C             		move.b	#8,$1C(a0)
000184A2                            
000184A2                            Obj3D_FlameDisp:
000184A2 6000                       		bra.s	Obj3D_Display
000184A4                            ; ===========================================================================
000184A4                            
000184A4                            Obj3D_FlameDel:
000184A4 4EF9 0000 DEE4             		jmp	DeleteObject
000184AA                            ; ===========================================================================
000184AA                            
000184AA                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000184AA 2268 0034                  		movea.l	$34(a0),a1
000184AE 3169 0008 0008             		move.w	8(a1),8(a0)
000184B4 3169 000C 000C             		move.w	$C(a1),$C(a0)
000184BA 1169 0022 0022             		move.b	$22(a1),$22(a0)
000184C0 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000184C6 4EB9 0000 AF22             		jsr	AnimateSprite
000184CC 1028 0022                  		move.b	$22(a0),d0
000184D0 0200 0003                  		andi.b	#3,d0
000184D4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000184DA 8128 0001                  		or.b	d0,1(a0)
000184DE 4EF9 0000 DEA8             		jmp	DisplaySprite
000184E4                            ; ===========================================================================
000184E4                            ; ---------------------------------------------------------------------------
000184E4                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000184E4                            ; ---------------------------------------------------------------------------
000184E4                            
000184E4                            Obj48:					; XREF: Obj_Index
000184E4 7000                       		moveq	#0,d0
000184E6 1028 0024                  		move.b	$24(a0),d0
000184EA 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000184EE 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000184F2                            ; ===========================================================================
000184F2 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000184F4 0000                       		dc.w Obj48_Base-Obj48_Index
000184F6 0000                       		dc.w Obj48_Display2-Obj48_Index
000184F8 0000                       		dc.w loc_17C68-Obj48_Index
000184FA 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000184FC                            ; ===========================================================================
000184FC                            
000184FC                            Obj48_Main:				; XREF: Obj48_Index
000184FC 5428 0024                  		addq.b	#2,$24(a0)
00018500 317C 4080 0026             		move.w	#$4080,$26(a0)
00018506 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001850C 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018514 317C 046C 0002             		move.w	#$46C,2(a0)
0001851A 45E8 0028                  		lea	$28(a0),a2
0001851E 14FC 0000                  		move.b	#0,(a2)+
00018522 7205                       		moveq	#5,d1
00018524 2248                       		movea.l	a0,a1
00018526 6000                       		bra.s	loc_17B60
00018528                            ; ===========================================================================
00018528                            
00018528                            Obj48_MakeLinks:
00018528 4EB9 0000 E344             		jsr	SingleObjLoad2
0001852E 6600                       		bne.s	Obj48_MakeBall
00018530 3368 0008 0008             		move.w	8(a0),8(a1)
00018536 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001853C 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018540 137C 0006 0024             		move.b	#6,$24(a1)
00018546 237C 0000 82DA 0004        		move.l	#Map_obj15,4(a1)
0001854E 337C 0380 0002             		move.w	#$380,2(a1)
00018554 137C 0001 001A             		move.b	#1,$1A(a1)
0001855A 5228 0028                  		addq.b	#1,$28(a0)
0001855E                            
0001855E                            loc_17B60:				; XREF: Obj48_Main
0001855E 3A09                       		move.w	a1,d5
00018560 0445 D000                  		subi.w	#$D000,d5
00018564 EC4D                       		lsr.w	#6,d5
00018566 0245 007F                  		andi.w	#$7F,d5
0001856A 14C5                       		move.b	d5,(a2)+
0001856C 137C 0004 0001             		move.b	#4,1(a1)
00018572 137C 0008 0019             		move.b	#8,$19(a1)
00018578 137C 0006 0018             		move.b	#6,$18(a1)
0001857E 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018584 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018588                            
00018588                            Obj48_MakeBall:
00018588 137C 0008 0024             		move.b	#8,$24(a1)
0001858E 237C 0000 88CA 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018596 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
0001859C 137C 0001 001A             		move.b	#1,$1A(a1)
000185A2 137C 0005 0018             		move.b	#5,$18(a1)
000185A8 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000185AE 4E75                       		rts	
000185B0                            ; ===========================================================================
000185B0                            
000185B0 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000185B6                            
000185B6                            ; ===========================================================================
000185B6                            
000185B6                            Obj48_Base:				; XREF: Obj48_Index
000185B6 47F9 0001 85B0             		lea	(Obj48_PosData).l,a3
000185BC 45E8 0028                  		lea	$28(a0),a2
000185C0 7C00                       		moveq	#0,d6
000185C2 1C1A                       		move.b	(a2)+,d6
000185C4                            
000185C4                            loc_17BC6:
000185C4 7800                       		moveq	#0,d4
000185C6 181A                       		move.b	(a2)+,d4
000185C8 ED4C                       		lsl.w	#6,d4
000185CA 0684 00FF D000             		addi.l	#$FFD000,d4
000185D0 2244                       		movea.l	d4,a1
000185D2 101B                       		move.b	(a3)+,d0
000185D4 B029 003C                  		cmp.b	$3C(a1),d0
000185D8 6700                       		beq.s	loc_17BE0
000185DA 5229 003C                  		addq.b	#1,$3C(a1)
000185DE                            
000185DE                            loc_17BE0:
000185DE 51CE FFE4                  		dbf	d6,loc_17BC6
000185E2                            
000185E2 B029 003C                  		cmp.b	$3C(a1),d0
000185E6 6600                       		bne.s	loc_17BFA
000185E8 2268 0034                  		movea.l	$34(a0),a1
000185EC 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000185F2 6600                       		bne.s	loc_17BFA
000185F4 5428 0024                  		addq.b	#2,$24(a0)
000185F8                            
000185F8                            loc_17BFA:
000185F8 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000185FE 6700                       		beq.s	Obj48_Display
00018600 5268 0032                  		addq.w	#1,$32(a0)
00018604                            
00018604                            Obj48_Display:
00018604 6100 0000                  		bsr.w	sub_17C2A
00018608 1028 0026                  		move.b	$26(a0),d0
0001860C 4EB9 0000 824C             		jsr	(Obj15_Move2).l
00018612 4EF9 0000 DEA8             		jmp	DisplaySprite
00018618                            ; ===========================================================================
00018618                            
00018618                            Obj48_Display2:				; XREF: Obj48_Index
00018618 6100 0000                  		bsr.w	sub_17C2A
0001861C 4EB9 0000 820C             		jsr	(Obj48_Move).l
00018622 4EF9 0000 DEA8             		jmp	DisplaySprite
00018628                            
00018628                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018628                            
00018628                            
00018628                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018628 2268 0034                  		movea.l	$34(a0),a1
0001862C 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018632 6400                       		bcc.s	loc_17C3C
00018634 0868 0000 001A             		bchg	#0,$1A(a0)
0001863A                            
0001863A                            loc_17C3C:
0001863A 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018640 3029 000C                  		move.w	$C(a1),d0
00018644 D068 0032                  		add.w	$32(a0),d0
00018648 3140 0038                  		move.w	d0,$38(a0)
0001864C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018652 4A29 0022                  		tst.b	$22(a1)
00018656 6A00                       		bpl.s	locret_17C66
00018658 10BC 003F                  		move.b	#$3F,0(a0)
0001865C 117C 0000 0024             		move.b	#0,$24(a0)
00018662                            
00018662                            locret_17C66:
00018662 4E75                       		rts	
00018664                            ; End of function sub_17C2A
00018664                            
00018664                            ; ===========================================================================
00018664                            
00018664                            loc_17C68:				; XREF: Obj48_Index
00018664 2268 0034                  		movea.l	$34(a0),a1
00018668 4A29 0022                  		tst.b	$22(a1)
0001866C 6A00                       		bpl.s	Obj48_Display3
0001866E 10BC 003F                  		move.b	#$3F,0(a0)
00018672 117C 0000 0024             		move.b	#0,$24(a0)
00018678                            
00018678                            Obj48_Display3:
00018678 4EF9 0000 DEA8             		jmp	DisplaySprite
0001867E                            ; ===========================================================================
0001867E                            
0001867E                            Obj48_ChkVanish:			; XREF: Obj48_Index
0001867E 7000                       		moveq	#0,d0
00018680 4A28 001A                  		tst.b	$1A(a0)
00018684 6600                       		bne.s	Obj48_Vanish
00018686 5200                       		addq.b	#1,d0
00018688                            
00018688                            Obj48_Vanish:
00018688 1140 001A                  		move.b	d0,$1A(a0)
0001868C 2268 0034                  		movea.l	$34(a0),a1
00018690 4A29 0022                  		tst.b	$22(a1)
00018694 6A00                       		bpl.s	Obj48_Display4
00018696 117C 0000 0020             		move.b	#0,$20(a0)
0001869C 6100 FB94                  		bsr.w	BossDefeated
000186A0 5328 003C                  		subq.b	#1,$3C(a0)
000186A4 6A00                       		bpl.s	Obj48_Display4
000186A6 10BC 003F                  		move.b	#$3F,(a0)
000186AA 117C 0000 0024             		move.b	#0,$24(a0)
000186B0                            
000186B0                            Obj48_Display4:
000186B0 4EF9 0000 DEA8             		jmp	DisplaySprite
000186B6                            ; ===========================================================================
000186B6                            Ani_Eggman:
000186B6                            	include "_anim\Eggman.asm"
000186B6                            ; ---------------------------------------------------------------------------
000186B6                            ; Animation script - Eggman (bosses)
000186B6                            ; ---------------------------------------------------------------------------
000186B6 0000                       		dc.w byte_17CD4-Ani_Eggman
000186B8 0000                       		dc.w byte_17CD8-Ani_Eggman
000186BA 0000                       		dc.w byte_17CDC-Ani_Eggman
000186BC 0000                       		dc.w byte_17CE0-Ani_Eggman
000186BE 0000                       		dc.w byte_17CE4-Ani_Eggman
000186C0 0000                       		dc.w byte_17CE8-Ani_Eggman
000186C2 0000                       		dc.w byte_17CEC-Ani_Eggman
000186C4 0000                       		dc.w byte_17CF0-Ani_Eggman
000186C6 0000                       		dc.w byte_17CF4-Ani_Eggman
000186C8 0000                       		dc.w byte_17CF8-Ani_Eggman
000186CA 0000                       		dc.w byte_17CFC-Ani_Eggman
000186CC 0000                       		dc.w byte_17D00-Ani_Eggman
000186CE 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000186D2 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000186D6 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000186DA 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000186DE 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000186E2 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000186E6 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000186EA 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000186EE 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000186F2 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000186F6 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000186FA 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018706                            		even
00018706                            		even
00018706                            Ani_TetoB:
00018706                            	include "_anim\TetoB.asm"
00018706                            ; ---------------------------------------------------------------------------
00018706                            ; Animation script - Eggman (bosses)
00018706                            ; ---------------------------------------------------------------------------
00018706 0000                       		dc.w spin-Ani_TetoB
00018708 0000                       		dc.w static-Ani_TetoB
0001870A 0000                       		dc.w static2-Ani_TetoB
0001870C 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018713 0500 FF                    static:	dc.b 5,	0, $FF
00018716 0501 FF                    static2:	dc.b 5,	1, $FF
0001871A 00                         		even
0001871A 00                         		even
0001871A                            ; ---------------------------------------------------------------------------
0001871A                            ; Sprite mappings - Eggman (boss levels)
0001871A                            ; ---------------------------------------------------------------------------
0001871A                            Map_Eggman:
0001871A                            	include "_maps\Eggman.asm"
0001871A                            Map_dc7e:
0001871A 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001871C 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001871E 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018720 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018722 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018724 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018726 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018728 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001872A 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001872C 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001872E 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018730 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018732 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018734 06                         Map_dc7e_1A: 	dc.b $6
00018735 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001873A EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001873F FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018744 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018749 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001874E 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018753 02                         Map_dc7e_39: 	dc.b $2
00018754 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018759 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001875E 02                         Map_dc7e_44: 	dc.b $2
0001875F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018764 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018769 03                         Map_dc7e_4F: 	dc.b $3
0001876A E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
0001876F EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018774 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018779 03                         Map_dc7e_5F: 	dc.b $3
0001877A E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
0001877F EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018784 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018789 03                         Map_dc7e_6F: 	dc.b $3
0001878A E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001878F EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018794 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018799 03                         Map_dc7e_7F: 	dc.b $3
0001879A E404 0064 04               	dc.b $E4, $4, $0, $64, $4
0001879F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000187A4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000187A9 04                         Map_dc7e_8F: 	dc.b $4
000187AA E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000187AF E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000187B4 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000187B9 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000187BE 01                         Map_dc7e_A4: 	dc.b $1
000187BF 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000187C4 01                         Map_dc7e_AA: 	dc.b $1
000187C5 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000187CA 00                         Map_dc7e_B0: 	dc.b $0
000187CB 02                         Map_dc7e_B1: 	dc.b $2
000187CC 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000187D1 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000187D6 02                         Map_dc7e_BC: 	dc.b $2
000187D7 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000187DC 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000187E2 00                         	even
000187E2 00                         	even
000187E2                            
000187E2                            ; ---------------------------------------------------------------------------
000187E2                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000187E2                            ; ---------------------------------------------------------------------------
000187E2                            Map_BossItems:
000187E2                            	include "_maps\Boss items.asm"
000187E2                            ; ---------------------------------------------------------------------------
000187E2                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000187E2                            ; ---------------------------------------------------------------------------
000187E2 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000187E6 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000187EA 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000187EE 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000187F2 01                         byte_17DE4:	dc.b 1
000187F3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000187F8 02                         byte_17DEA:	dc.b 2
000187F9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000187FE F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018803 00                         		dc.b 0
00018804 01                         byte_17DF6:	dc.b 1
00018805 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001880A 01                         byte_17DFC:	dc.b 1
0001880B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018810 01                         byte_17E02:	dc.b 1
00018811 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018816 04                         byte_17E08:	dc.b 4
00018817 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001881C F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018821 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018826 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001882B 00                         		dc.b 0
0001882C 02                         byte_17E1E:	dc.b 2
0001882D 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018832 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018837 00                         		dc.b 0
00018838 02                         byte_17E2A:	dc.b 2
00018839 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001883E 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018844 00                         		even
00018844 00                         		even
00018844                            
00018844                            ; ===========================================================================
00018844                            ; ---------------------------------------------------------------------------
00018844                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00018844                            ; ---------------------------------------------------------------------------
00018844                            
00018844                            
00018844                            obj77:					; XREF: Obj_Index
00018844 7000                       		moveq	#0,d0
00018846 1028 0024                  		move.b	$24(a0),d0
0001884A 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
0001884E 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018852                            ; ===========================================================================
00018852 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00018854 0000                       		dc.w obj77_ShipMain-obj77_Index
00018856 0000                       		dc.w obj77_FaceMain-obj77_Index
00018858 0000                       		dc.w obj77_FlameMain-obj77_Index
0001885A                            
0001885A 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
0001885C 0401                       		dc.b 4,	1
0001885E 0607                       		dc.b 6,	7
00018860                            ; ===========================================================================
00018860                            
00018860                            obj77_Main:				; XREF: obj77_Index
00018860 45F9 0001 885A             		lea	(obj77_ObjData).l,a2
00018866 2248                       		movea.l	a0,a1
00018868 7202                       		moveq	#2,d1
0001886A 6000                       		bra.s	obj77_LoadBoss
0001886C                            ; ===========================================================================
0001886C                            
0001886C                            obj77_Loop:
0001886C 4EB9 0000 E344             		jsr	SingleObjLoad2
00018872 6600                       		bne.s	loc2_17772
00018874                            
00018874                            obj77_LoadBoss:				; XREF: obj77_Main
00018874 135A 0024                  		move.b	(a2)+,$24(a1)
00018878 12BC 0077                  		move.b	#$77,0(a1)
0001887C 3368 0008 0008             		move.w	8(a0),8(a1)
00018882 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018888 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018890 337C 0400 0002             		move.w	#$400,2(a1)
00018896 137C 0004 0001             		move.b	#4,1(a1)
0001889C 137C 0020 0019             		move.b	#$20,$19(a1)
000188A2 137C 0003 0018             		move.b	#3,$18(a1)
000188A8 135A 001C                  		move.b	(a2)+,$1C(a1)
000188AC 2348 0034                  		move.l	a0,$34(a1)
000188B0 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
000188B4                            
000188B4                            loc2_17772:
000188B4 3168 0008 0030             		move.w	8(a0),$30(a0)
000188BA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000188C0 117C 000F 0020             		move.b	#$F,$20(a0)
000188C6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000188CC                            
000188CC                            obj77_ShipMain:				; XREF: obj77_Index
000188CC 7000                       		moveq	#0,d0
000188CE 1028 0025                  		move.b	$25(a0),d0
000188D2 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
000188D6 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
000188DA 43F9 0001 8706             		lea	(Ani_TetoB).l,a1
000188E0 4EB9 0000 AF22             		jsr	AnimateSprite
000188E6 1028 0022                  		move.b	$22(a0),d0
000188EA 0200 0003                  		andi.b	#3,d0
000188EE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000188F4 8128 0001                  		or.b	d0,1(a0)
000188F8 4EF9 0000 DEA8             		jmp	DisplaySprite
000188FE                            ; ===========================================================================
000188FE 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018900 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018902 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018904 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018906 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018908 0000                       		dc.w loc2_1797A-obj77_ShipIndex
0001890A 0000                       		dc.w loc2_179AC-obj77_ShipIndex
0001890C 0000                       		dc.w loc2_179F6-obj77_ShipIndex
0001890E                            ; ===========================================================================
0001890E                            
0001890E                            obj77_ShipStart:			; XREF: obj77_ShipIndex
0001890E                            	;	move.w	#$100,$12(a0)	; move ship down
0001890E 6100 F964                  		bsr.w	BossMove
00018912 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018918 6600                       		bne.s	loc2_177E6
0001891A 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018920 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018924                            
00018924                            loc2_177E6:
00018924                            ;		move.b	$3F(a0),d0
00018924                            ;		jsr	(CalcSine).l
00018924 EC40                       		asr.w	#6,d0
00018926 D068 0038                  		add.w	$38(a0),d0
0001892A 3140 000C                  		move.w	d0,$C(a0)
0001892E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018934 5428 003F                  		addq.b	#2,$3F(a0)
00018938 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
0001893E 6400                       		bcc.s	locret_1784A2
00018940 4A28 0022                  		tst.b	$22(a0)
00018944 6B00                       		bmi.s	loc2_1784C
00018946 4A28 0020                  		tst.b	$20(a0)
0001894A 6600                       		bne.s	locret_1784A2
0001894C 4A28 003E                  		tst.b	$3E(a0)
00018950 6600                       		bne.s	obj77_ShipFlash
00018952 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018958 303C 00AC                  		move.w	#$AC,d0
0001895C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018962                            
00018962                            obj77_ShipFlash:
00018962 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018966 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018968 4A51                       		tst.w	(a1)
0001896A 6600                       		bne.s	loc2_1783C
0001896C 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018970                            
00018970                            loc2_1783C:
00018970 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018972 5328 003E                  		subq.b	#1,$3E(a0)
00018976 6600                       		bne.s	locret_1784A2
00018978 117C 000F 0020             		move.b	#$F,$20(a0)
0001897E                            
0001897E                            locret_1784A2:
0001897E 4E75                       		rts	
00018980                            ; ===========================================================================
00018980                            
00018980                            loc2_1784C:				; XREF: loc2_177E6
00018980 7064                       		moveq	#100,d0
00018982 6100 0000                  		bsr.w	AddPoints
00018986 117C 000A 0025             		move.b	#$A,$25(a0)
0001898C 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018992 4E75                       		rts	
00018994                            ; ===========================================================================
00018994                            
00018994                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018994 317C FF00 0010             		move.w	#-$100,$10(a0)
0001899A 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
000189A0 6100 F8D2                  		bsr.w	BossMove
000189A4 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
000189AA 6600                       		bne.s	loc2_17916
000189AC 317C 0000 0010             		move.w	#0,$10(a0)
000189B2 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
000189B8 317C 0000 0012             		move.w	#0,$12(a0)
000189BE 5428 0025                  		addq.b	#2,$25(a0)
000189C2                            
000189C2                            loc2_17910:
000189C2 317C 0077 003C             		move.w	#$77,$3C(a0)
000189C8                            
000189C8                            loc2_17916:
000189C8 6000 FF5A                  		bra.w	loc2_177E6
000189CC                            ; ===========================================================================
000189CC                            
000189CC                            obj77_ShipMove:				; XREF: obj77_ShipIndex
000189CC 6100 F8A6                  		bsr.w	BossMove
000189D0 5368 003C                  		subq.w	#1,$3C(a0)
000189D4 6A00                       		bpl.s	loc2_17950 ; if time remains go here
000189D6 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
000189DC 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
000189E2 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
000189E8 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
000189EE 6600                       		bne.s	loc2_17950 ; if not branch
000189F0                            
000189F0                            fatass_attack:
000189F0 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
000189F6 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
000189FC 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018A02 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018A04 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018A08 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018A0E                            
00018A0E                            loc2_17950:
00018A0E 6000 FF14                  		bra.w	loc2_177E6
00018A12                            ; ===========================================================================
00018A12                            
00018A12                            loc2_17954:				; XREF: obj77_ShipIndex
00018A12 6100 F860                  		bsr.w	BossMove
00018A16 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018A1C                            		; i suck at programming
00018A1C 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018A22 6600                       		bne.s	loc2_17976    ; if not blah blah
00018A24 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018A2A 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018A2E 303C 00B9                  		move.w	#$B9,d0
00018A32 4EB9 0000 15CC             		jsr	(PlaySound).l	; play the earthquake sound
00018A38                            
00018A38                            Peartobombs:	
00018A38 4EB9 0000 E344                		jsr	SingleObjLoad2
00018A3E 6600                       		bne.s	secondone
00018A40 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018A44 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018A4A 337C 0670 000C             		move.w	#$670,$C(a1)
00018A50                            secondone:		
00018A50 4EB9 0000 E344                		jsr	SingleObjLoad2
00018A56 6600                       		bne.s	loc2_17976		
00018A58 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018A5C 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018A62 337C 0670 000C             		move.w	#$670,$C(a1)
00018A68                            lastone:
00018A68 4EB9 0000 E344                		jsr	SingleObjLoad2
00018A6E 6600                       		bne.s	loc2_17976		
00018A70 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018A74 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018A7A 337C 0670 000C             		move.w	#$670,$C(a1)
00018A80                            		
00018A80                            loc2_17976:
00018A80 6000 FEA2                  		bra.w	loc2_177E6
00018A84                            		
00018A84                            ; ===========================================================================
00018A84                            Fatassruns:
00018A84 6100 F7EE                   		bsr.w	BossMove
00018A88 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018A8E 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018A94 6600                       		bne.s	processstuff ; is not go here
00018A96 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018A9C 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018AA2 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018AA6 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018AAC 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018AB2                            		
00018AB2                            		
00018AB2                            processstuff:
00018AB2 6000 FE70                  		bra.w	loc2_177E6
00018AB6                            ; ===========================================================================
00018AB6                            
00018AB6                            loc2_1797A:				; XREF: obj77_ShipIndex
00018AB6 5368 003C                  		subq.w	#1,$3C(a0)
00018ABA 6B00                       		bmi.s	loc2_17984
00018ABC 6000 F774                  		bra.w	BossDefeated
00018AC0                            ; ===========================================================================
00018AC0                            
00018AC0                            loc2_17984:
00018AC0 08E8 0000 0022             		bset	#0,$22(a0)
00018AC6 08A8 0007 0022             		bclr	#7,$22(a0)
00018ACC 4268 0010                  		clr.w	$10(a0)
00018AD0 5428 0025                  		addq.b	#2,$25(a0)
00018AD4 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018ADA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018ADE 6600                       		bne.s	locret_179AA2
00018AE0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018AE6                            
00018AE6                            locret_179AA2:
00018AE6 4E75                       		rts	
00018AE8                            ; ===========================================================================
00018AE8                            
00018AE8                            loc2_179AC:				; XREF: obj77_ShipIndex
00018AE8 5268 003C                  		addq.w	#1,$3C(a0)
00018AEC 6700                       		beq.s	loc2_179BC
00018AEE 6A00                       		bpl.s	loc2_179C2
00018AF0 0668 0018 0012             		addi.w	#$18,$12(a0)
00018AF6 6000                       		bra.s	loc2_179EE
00018AF8                            ; ===========================================================================
00018AF8                            
00018AF8                            loc2_179BC:
00018AF8 4268 0012                  		clr.w	$12(a0)
00018AFC 6000                       		bra.s	loc2_179EE
00018AFE                            ; ===========================================================================
00018AFE                            
00018AFE                            loc2_179C2:
00018AFE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018B04 6500                       		bcs.s	loc2_179DA
00018B06 6700                       		beq.s	loc2_179E0
00018B08 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018B0E 6500                       		bcs.s	loc2_179EE
00018B10 5428 0025                  		addq.b	#2,$25(a0)
00018B14 6000                       		bra.s	loc2_179EE
00018B16                            ; ===========================================================================
00018B16                            
00018B16                            loc2_179DA:
00018B16 5168 0012                  		subq.w	#8,$12(a0)
00018B1A 6000                       		bra.s	loc2_179EE
00018B1C                            ; ===========================================================================
00018B1C                            
00018B1C                            loc2_179E0:
00018B1C 4268 0012                  		clr.w	$12(a0)
00018B20 303C 0097                  		move.w	#$97,d0
00018B24 4EB9 0000 15CC             		jsr	(PlaySound).l	; play lz3 music
00018B2A                            
00018B2A                            loc2_179EE:
00018B2A 6100 F748                  		bsr.w	BossMove
00018B2E 6000 FDF4                  		bra.w	loc2_177E6
00018B32                            ; ===========================================================================
00018B32                            
00018B32                            loc2_179F6:				; XREF: obj77_ShipIndex
00018B32 317C 0400 0010             		move.w	#$400,$10(a0)
00018B38 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018B3E 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018B44 6700                       		beq.s	loc2_17A10
00018B46 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018B4A 6000                       		bra.s	loc2_17A16
00018B4C                            ; ===========================================================================
00018B4C                            
00018B4C                            loc2_17A10:
00018B4C 4A28 0001                  		tst.b	1(a0)
00018B50 6A00                       		bpl.s	obj77_ShipDel
00018B52                            
00018B52                            loc2_17A16:
00018B52 6100 F720                  		bsr.w	BossMove
00018B56 6000 FDCC                  		bra.w	loc2_177E6
00018B5A                            ; ===========================================================================
00018B5A                            
00018B5A                            obj77_ShipDel:
00018B5A 4EF9 0000 DEE4             		jmp	DeleteObject
00018B60                            ; ===========================================================================
00018B60                            
00018B60                            obj77_FaceMain:				; XREF: obj77_Index
00018B60 4E75                       		rts
00018B62                            ; ===========================================================================
00018B62                            
00018B62                            obj77_FlameMain:			; XREF: obj77_Index
00018B62 4E75                       		rts
00018B64                            ; ===========================================================================
00018B64                            
00018B64                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018B64 43F9 0001 8706             		lea	(Ani_TetoB).l,a1
00018B6A 4EB9 0000 AF22             		jsr	AnimateSprite
00018B70 4EF9 0000 DEA8             		jmp	DisplaySprite
00018B76                            ; ---------------------------------------------------------------------------
00018B76                            ; Sprite mappings - Fatass teto boss
00018B76                            ; ---------------------------------------------------------------------------
00018B76                            Map_TetoBoss:
00018B76                            	include "_maps\tetoboss.asm"
00018B76                            Map_f09a:
00018B76 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018B78 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018B7A 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018B7C 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018B7E 03                         Map_f09a_8: 	dc.b $3
00018B7F E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018B84 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018B89 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018B8E 06                         Map_f09a_18: 	dc.b $6
00018B8F EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018B94 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018B99 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018B9E 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018BA3 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018BA8 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018BAD 03                         Map_f09a_37: 	dc.b $3
00018BAE E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018BB3 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018BB8 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018BBD 06                         Map_f09a_47: 	dc.b $6
00018BBE ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018BC3 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018BC8 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018BCD DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018BD2 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018BD7 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018BDC                            	even
00018BDC                            	even
00018BDC                            ; ===========================================================================
00018BDC                            ; ---------------------------------------------------------------------------
00018BDC                            ; Object 73 - Eggman (MZ)
00018BDC                            ; ---------------------------------------------------------------------------
00018BDC                            
00018BDC                            Obj73:					; XREF: Obj_Index
00018BDC 7000                       		moveq	#0,d0
00018BDE 1028 0024                  		move.b	$24(a0),d0
00018BE2 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018BE6 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018BEA                            ; ===========================================================================
00018BEA 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018BEC 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018BEE 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018BF0 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018BF2 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018BF4                            
00018BF4 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018BF7 0401 04                    		dc.b 4,	1, 4
00018BFA 0607 04                    		dc.b 6,	7, 4
00018BFD 0800 03                    		dc.b 8,	0, 3
00018C00                            ; ===========================================================================
00018C00                            
00018C00                            Obj73_Main:				; XREF: Obj73_Index
00018C00 3168 0008 0030             		move.w	8(a0),$30(a0)
00018C06 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018C0C 117C 000F 0020             		move.b	#$F,$20(a0)
00018C12 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018C18 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018C1C 2248                       		movea.l	a0,a1
00018C1E 7203                       		moveq	#3,d1
00018C20 6000                       		bra.s	Obj73_LoadBoss
00018C22                            ; ===========================================================================
00018C22                            
00018C22                            Obj73_Loop:
00018C22 4EB9 0000 E344             		jsr	SingleObjLoad2
00018C28 6600                       		bne.s	Obj73_ShipMain
00018C2A 12BC 0073                  		move.b	#$73,0(a1)
00018C2E 3368 0008 0008             		move.w	8(a0),8(a1)
00018C34 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018C3A                            
00018C3A                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018C3A 08A8 0000 0022             		bclr	#0,$22(a0)
00018C40 4229 0025                  		clr.b	$25(a1)
00018C44 135A 0024                  		move.b	(a2)+,$24(a1)
00018C48 135A 001C                  		move.b	(a2)+,$1C(a1)
00018C4C 135A 0018                  		move.b	(a2)+,$18(a1)
00018C50 237C 0001 871A 0004        		move.l	#Map_Eggman,4(a1)
00018C58 337C 0400 0002             		move.w	#$400,2(a1)
00018C5E 137C 0004 0001             		move.b	#4,1(a1)
00018C64 137C 0020 0019             		move.b	#$20,$19(a1)
00018C6A 2348 0034                  		move.l	a0,$34(a1)
00018C6E 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018C72                            
00018C72                            Obj73_ShipMain:
00018C72 7000                       		moveq	#0,d0
00018C74 1028 0025                  		move.b	$25(a0),d0
00018C78 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018C7C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018C80 43F9 0001 86B6             		lea	(Ani_Eggman).l,a1
00018C86 4EB9 0000 AF22             		jsr	AnimateSprite
00018C8C 7003                       		moveq	#3,d0
00018C8E C028 0022                  		and.b	$22(a0),d0
00018C92 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018C98 8128 0001                  		or.b	d0,1(a0)
00018C9C 4EF9 0000 DEA8             		jmp	DisplaySprite
00018CA2                            ; ===========================================================================
00018CA2 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018CA4 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018CA6 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018CA8 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018CAA 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018CAC                            ; ===========================================================================
00018CAC                            
00018CAC                            loc_18302:				; XREF: Obj73_ShipIndex
00018CAC 1028 003F                  		move.b	$3F(a0),d0
00018CB0 5428 003F                  		addq.b	#2,$3F(a0)
00018CB4 4EB9 0000 2D36             		jsr	(CalcSine).l
00018CBA E440                       		asr.w	#2,d0
00018CBC 3140 0012                  		move.w	d0,$12(a0)
00018CC0 317C FF00 0010             		move.w	#-$100,$10(a0)
00018CC6 6100 F5AC                  		bsr.w	BossMove
00018CCA 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018CD0 6600                       		bne.s	loc_18334
00018CD2 5428 0025                  		addq.b	#2,$25(a0)
00018CD6 4228 0028                  		clr.b	$28(a0)
00018CDA 42A8 0010                  		clr.l	$10(a0)
00018CDE                            
00018CDE                            loc_18334:
00018CDE 4EB9 0000 2D10             		jsr	(RandomNumber).l
00018CE4 1140 0034                  		move.b	d0,$34(a0)
00018CE8                            
00018CE8                            loc_1833E:
00018CE8 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018CEE 3168 0030 0008             		move.w	$30(a0),8(a0)
00018CF4 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018CFA 6400                       		bcc.s	locret_18390
00018CFC 4A28 0022                  		tst.b	$22(a0)
00018D00 6B00                       		bmi.s	loc_18392
00018D02 4A28 0020                  		tst.b	$20(a0)
00018D06 6600                       		bne.s	locret_18390
00018D08 4A28 003E                  		tst.b	$3E(a0)
00018D0C 6600                       		bne.s	loc_18374
00018D0E 117C 0028 003E             		move.b	#$28,$3E(a0)
00018D14 303C 00AC                  		move.w	#$AC,d0
00018D18 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018D1E                            
00018D1E                            loc_18374:
00018D1E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018D22 7000                       		moveq	#0,d0
00018D24 4A51                       		tst.w	(a1)
00018D26 6600                       		bne.s	loc_18382
00018D28 303C 0EEE                  		move.w	#$EEE,d0
00018D2C                            
00018D2C                            loc_18382:
00018D2C 3280                       		move.w	d0,(a1)
00018D2E 5328 003E                  		subq.b	#1,$3E(a0)
00018D32 6600                       		bne.s	locret_18390
00018D34 117C 000F 0020             		move.b	#$F,$20(a0)
00018D3A                            
00018D3A                            locret_18390:
00018D3A 4E75                       		rts	
00018D3C                            ; ===========================================================================
00018D3C                            
00018D3C                            loc_18392:				; XREF: loc_1833E
00018D3C 7064                       		moveq	#100,d0
00018D3E 6100 0000                  		bsr.w	AddPoints
00018D42 117C 0004 0025             		move.b	#4,$25(a0)
00018D48 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018D4E 4268 0010                  		clr.w	$10(a0)
00018D52 4E75                       		rts	
00018D54                            ; ===========================================================================
00018D54                            
00018D54                            loc_183AA:				; XREF: Obj73_ShipIndex
00018D54 7000                       		moveq	#0,d0
00018D56 1028 0028                  		move.b	$28(a0),d0
00018D5A 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018D5E 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018D62 0228 0006 0028             		andi.b	#6,$28(a0)
00018D68 6000 FF7E                  		bra.w	loc_1833E
00018D6C                            ; ===========================================================================
00018D6C 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018D6E 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018D70 0000                       		dc.w loc_183CA-off_183C2
00018D72 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018D74                            ; ===========================================================================
00018D74                            
00018D74                            loc_183CA:				; XREF: off_183C2
00018D74 4A68 0010                  		tst.w	$10(a0)
00018D78 6600                       		bne.s	loc_183FE
00018D7A 7040                       		moveq	#$40,d0
00018D7C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018D82 6700                       		beq.s	loc_183E6
00018D84 6500                       		bcs.s	loc_183DE
00018D86 4440                       		neg.w	d0
00018D88                            
00018D88                            loc_183DE:
00018D88 3140 0012                  		move.w	d0,$12(a0)
00018D8C 6000 F4E6                  		bra.w	BossMove
00018D90                            ; ===========================================================================
00018D90                            
00018D90                            loc_183E6:
00018D90 317C 0200 0010             		move.w	#$200,$10(a0)
00018D96 317C 0100 0012             		move.w	#$100,$12(a0)
00018D9C 0828 0000 0022             		btst	#0,$22(a0)
00018DA2 6600                       		bne.s	loc_183FE
00018DA4 4468 0010                  		neg.w	$10(a0)
00018DA8                            
00018DA8                            loc_183FE:
00018DA8 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018DAE 6400                       		bcc.s	Obj73_MakeLava
00018DB0 6100 F4C2                  		bsr.w	BossMove
00018DB4 5968 0012                  		subq.w	#4,$12(a0)
00018DB8                            
00018DB8                            Obj73_MakeLava:
00018DB8 5328 0034                  		subq.b	#1,$34(a0)
00018DBC 6400                       		bcc.s	loc_1845C
00018DBE 4EB9 0000 E32E             		jsr	SingleObjLoad
00018DC4 6600                       		bne.s	loc_1844A
00018DC6 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018DCA 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018DD0 4EB9 0000 2D10             		jsr	(RandomNumber).l
00018DD6 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018DDC 80FC 0050                  		divu.w	#$50,d0
00018DE0 4840                       		swap	d0
00018DE2 0640 1878                  		addi.w	#$1878,d0
00018DE6 3340 0008                  		move.w	d0,8(a1)
00018DEA EE09                       		lsr.b	#7,d1
00018DEC 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018DF2                            
00018DF2                            loc_1844A:
00018DF2 4EB9 0000 2D10             		jsr	(RandomNumber).l
00018DF8 0200 001F                  		andi.b	#$1F,d0
00018DFC 0600 0040                  		addi.b	#$40,d0
00018E00 1140 0034                  		move.b	d0,$34(a0)
00018E04                            
00018E04                            loc_1845C:
00018E04 0828 0000 0022             		btst	#0,$22(a0)
00018E0A 6700                       		beq.s	loc_18474
00018E0C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018E12 6D00                       		blt.s	locret_1849C
00018E14 317C 1910 0030             		move.w	#$1910,$30(a0)
00018E1A 6000                       		bra.s	loc_18482
00018E1C                            ; ===========================================================================
00018E1C                            
00018E1C                            loc_18474:
00018E1C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018E22 6E00                       		bgt.s	locret_1849C
00018E24 317C 1830 0030             		move.w	#$1830,$30(a0)
00018E2A                            
00018E2A                            loc_18482:
00018E2A 4268 0010                  		clr.w	$10(a0)
00018E2E 317C FE80 0012             		move.w	#-$180,$12(a0)
00018E34 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018E3A 6400                       		bcc.s	loc_18498
00018E3C 4468 0012                  		neg.w	$12(a0)
00018E40                            
00018E40                            loc_18498:
00018E40 5428 0028                  		addq.b	#2,$28(a0)
00018E44                            
00018E44                            locret_1849C:
00018E44 4E75                       		rts	
00018E46                            ; ===========================================================================
00018E46                            
00018E46                            Obj73_MakeLava2:			; XREF: off_183C2
00018E46 6100 F42C                  		bsr.w	BossMove
00018E4A 3028 0038                  		move.w	$38(a0),d0
00018E4E 0440 022C                  		subi.w	#$22C,d0
00018E52 6E00                       		bgt.s	locret_184F4
00018E54 303C 022C                  		move.w	#$22C,d0
00018E58 4A68 0012                  		tst.w	$12(a0)
00018E5C 6700                       		beq.s	loc_184EA
00018E5E 4268 0012                  		clr.w	$12(a0)
00018E62 317C 0050 003C             		move.w	#$50,$3C(a0)
00018E68 0868 0000 0022             		bchg	#0,$22(a0)
00018E6E 4EB9 0000 E32E             		jsr	SingleObjLoad
00018E74 6600                       		bne.s	loc_184EA
00018E76 3368 0030 0008             		move.w	$30(a0),8(a1)
00018E7C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018E82 0669 0018 000C             		addi.w	#$18,$C(a1)
00018E88 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018E8C 137C 0001 0028             		move.b	#1,$28(a1)
00018E92                            
00018E92                            loc_184EA:
00018E92 5368 003C                  		subq.w	#1,$3C(a0)
00018E96 6600                       		bne.s	locret_184F4
00018E98 5428 0028                  		addq.b	#2,$28(a0)
00018E9C                            
00018E9C                            locret_184F4:
00018E9C 4E75                       		rts	
00018E9E                            ; ===========================================================================
00018E9E                            
00018E9E                            loc_184F6:				; XREF: Obj73_ShipIndex
00018E9E 5368 003C                  		subq.w	#1,$3C(a0)
00018EA2 6B00                       		bmi.s	loc_18500
00018EA4 6000 F38C                  		bra.w	BossDefeated
00018EA8                            ; ===========================================================================
00018EA8                            
00018EA8                            loc_18500:
00018EA8 08E8 0000 0022             		bset	#0,$22(a0)
00018EAE 08A8 0007 0022             		bclr	#7,$22(a0)
00018EB4 4268 0010                  		clr.w	$10(a0)
00018EB8 5428 0025                  		addq.b	#2,$25(a0)
00018EBC 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018EC2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018EC6 6600                       		bne.s	locret_1852A
00018EC8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018ECE 4268 0012                  		clr.w	$12(a0)
00018ED2                            
00018ED2                            locret_1852A:
00018ED2 4E75                       		rts	
00018ED4                            ; ===========================================================================
00018ED4                            
00018ED4                            loc_1852C:				; XREF: Obj73_ShipIndex
00018ED4 5268 003C                  		addq.w	#1,$3C(a0)
00018ED8 6700                       		beq.s	loc_18544
00018EDA 6A00                       		bpl.s	loc_1854E
00018EDC 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018EE2 6400                       		bcc.s	loc_18544
00018EE4 0668 0018 0012             		addi.w	#$18,$12(a0)
00018EEA 6000                       		bra.s	loc_1857A
00018EEC                            ; ===========================================================================
00018EEC                            
00018EEC                            loc_18544:
00018EEC 4268 0012                  		clr.w	$12(a0)
00018EF0 4268 003C                  		clr.w	$3C(a0)
00018EF4 6000                       		bra.s	loc_1857A
00018EF6                            ; ===========================================================================
00018EF6                            
00018EF6                            loc_1854E:
00018EF6 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018EFC 6500                       		bcs.s	loc_18566
00018EFE 6700                       		beq.s	loc_1856C
00018F00 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018F06 6500                       		bcs.s	loc_1857A
00018F08 5428 0025                  		addq.b	#2,$25(a0)
00018F0C 6000                       		bra.s	loc_1857A
00018F0E                            ; ===========================================================================
00018F0E                            
00018F0E                            loc_18566:
00018F0E 5168 0012                  		subq.w	#8,$12(a0)
00018F12 6000                       		bra.s	loc_1857A
00018F14                            ; ===========================================================================
00018F14                            
00018F14                            loc_1856C:
00018F14 4268 0012                  		clr.w	$12(a0)
00018F18 303C 0083                  		move.w	#$83,d0
00018F1C 4EB9 0000 15CC             		jsr	(PlaySound).l	; play MZ music
00018F22                            
00018F22                            loc_1857A:
00018F22 6100 F350                  		bsr.w	BossMove
00018F26 6000 FDC0                  		bra.w	loc_1833E
00018F2A                            ; ===========================================================================
00018F2A                            
00018F2A                            loc_18582:				; XREF: Obj73_ShipIndex
00018F2A 317C 0500 0010             		move.w	#$500,$10(a0)
00018F30 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018F36 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018F3C 6400                       		bcc.s	loc_1859C
00018F3E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018F42 6000                       		bra.s	loc_185A2
00018F44                            ; ===========================================================================
00018F44                            
00018F44                            loc_1859C:
00018F44 4A28 0001                  		tst.b	1(a0)
00018F48 6A00                       		bpl.s	Obj73_ShipDel
00018F4A                            
00018F4A                            loc_185A2:
00018F4A 6100 F328                  		bsr.w	BossMove
00018F4E 6000 FD98                  		bra.w	loc_1833E
00018F52                            ; ===========================================================================
00018F52                            
00018F52                            Obj73_ShipDel:
00018F52 4EF9 0000 DEE4             		jmp	DeleteObject
00018F58                            ; ===========================================================================
00018F58                            
00018F58                            Obj73_FaceMain:				; XREF: Obj73_Index
00018F58 7000                       		moveq	#0,d0
00018F5A 7201                       		moveq	#1,d1
00018F5C 2268 0034                  		movea.l	$34(a0),a1
00018F60 1029 0025                  		move.b	$25(a1),d0
00018F64 5540                       		subq.w	#2,d0
00018F66 6600                       		bne.s	loc_185D2
00018F68 0829 0001 0028             		btst	#1,$28(a1)
00018F6E 6700                       		beq.s	loc_185DA
00018F70 4A69 0012                  		tst.w	$12(a1)
00018F74 6600                       		bne.s	loc_185DA
00018F76 7204                       		moveq	#4,d1
00018F78 6000                       		bra.s	loc_185EE
00018F7A                            ; ===========================================================================
00018F7A                            
00018F7A                            loc_185D2:
00018F7A 5500                       		subq.b	#2,d0
00018F7C 6B00                       		bmi.s	loc_185DA
00018F7E 720A                       		moveq	#$A,d1
00018F80 6000                       		bra.s	loc_185EE
00018F82                            ; ===========================================================================
00018F82                            
00018F82                            loc_185DA:
00018F82 4A29 0020                  		tst.b	$20(a1)
00018F86 6600                       		bne.s	loc_185E4
00018F88 7205                       		moveq	#5,d1
00018F8A 6000                       		bra.s	loc_185EE
00018F8C                            ; ===========================================================================
00018F8C                            
00018F8C                            loc_185E4:
00018F8C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018F92 6500                       		bcs.s	loc_185EE
00018F94 7204                       		moveq	#4,d1
00018F96                            
00018F96                            loc_185EE:
00018F96 1141 001C                  		move.b	d1,$1C(a0)
00018F9A 5900                       		subq.b	#4,d0
00018F9C 6600                       		bne.s	loc_18602
00018F9E 117C 0006 001C             		move.b	#6,$1C(a0)
00018FA4 4A28 0001                  		tst.b	1(a0)
00018FA8 6A00                       		bpl.s	Obj73_FaceDel
00018FAA                            
00018FAA                            loc_18602:
00018FAA 6000                       		bra.s	Obj73_Display
00018FAC                            ; ===========================================================================
00018FAC                            
00018FAC                            Obj73_FaceDel:
00018FAC 4EF9 0000 DEE4             		jmp	DeleteObject
00018FB2                            ; ===========================================================================
00018FB2                            
00018FB2                            Obj73_FlameMain:			; XREF: Obj73_Index
00018FB2 117C 0007 001C             		move.b	#7,$1C(a0)
00018FB8 2268 0034                  		movea.l	$34(a0),a1
00018FBC 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018FC2 6D00                       		blt.s	loc_1862A
00018FC4 117C 000B 001C             		move.b	#$B,$1C(a0)
00018FCA 4A28 0001                  		tst.b	1(a0)
00018FCE 6A00                       		bpl.s	Obj73_FlameDel
00018FD0 6000                       		bra.s	loc_18636
00018FD2                            ; ===========================================================================
00018FD2                            
00018FD2                            loc_1862A:
00018FD2 4A69 0010                  		tst.w	$10(a1)
00018FD6 6700                       		beq.s	loc_18636
00018FD8 117C 0008 001C             		move.b	#8,$1C(a0)
00018FDE                            
00018FDE                            loc_18636:
00018FDE 6000                       		bra.s	Obj73_Display
00018FE0                            ; ===========================================================================
00018FE0                            
00018FE0                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018FE0 4EF9 0000 DEE4             		jmp	DeleteObject
00018FE6                            ; ===========================================================================
00018FE6                            
00018FE6                            Obj73_Display:
00018FE6 43F9 0001 86B6             		lea	(Ani_Eggman).l,a1
00018FEC 4EB9 0000 AF22             		jsr	AnimateSprite
00018FF2                            
00018FF2                            loc_1864A:
00018FF2 2268 0034                  		movea.l	$34(a0),a1
00018FF6 3169 0008 0008             		move.w	8(a1),8(a0)
00018FFC 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019002 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019008 7003                       		moveq	#3,d0
0001900A C028 0022                  		and.b	$22(a0),d0
0001900E 0228 00FC 0001             		andi.b	#-4,1(a0)
00019014 8128 0001                  		or.b	d0,1(a0)
00019018 4EF9 0000 DEA8             		jmp	DisplaySprite
0001901E                            ; ===========================================================================
0001901E                            
0001901E                            Obj73_TubeMain:				; XREF: Obj73_Index
0001901E 2268 0034                  		movea.l	$34(a0),a1
00019022 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019028 6600                       		bne.s	loc_18688
0001902A 4A28 0001                  		tst.b	1(a0)
0001902E 6A00                       		bpl.s	Obj73_TubeDel
00019030                            
00019030                            loc_18688:
00019030 217C 0001 87E2 0004        		move.l	#Map_BossItems,4(a0)
00019038 317C 246C 0002             		move.w	#$246C,2(a0)
0001903E 117C 0004 001A             		move.b	#4,$1A(a0)
00019044 60AC                       		bra.s	loc_1864A
00019046                            ; ===========================================================================
00019046                            
00019046                            Obj73_TubeDel:
00019046 4EF9 0000 DEE4             		jmp	DeleteObject
0001904C                            ; ===========================================================================
0001904C                            ; ---------------------------------------------------------------------------
0001904C                            ; Object 74 - lava that	Eggman drops (MZ)
0001904C                            ; ---------------------------------------------------------------------------
0001904C                            
0001904C                            Obj74:					; XREF: Obj_Index
0001904C 7000                       		moveq	#0,d0
0001904E 1028 0024                  		move.b	$24(a0),d0
00019052 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00019056 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001905A 4EF9 0000 DEA8             		jmp	DisplaySprite
00019060                            ; ===========================================================================
00019060 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00019062 0000                       		dc.w Obj74_Action-Obj74_Index
00019064 0000                       		dc.w loc_18886-Obj74_Index
00019066 0000                       		dc.w Obj74_Delete3-Obj74_Index
00019068                            ; ===========================================================================
00019068                            
00019068                            Obj74_Main:				; XREF: Obj74_Index
00019068 117C 0008 0016             		move.b	#8,$16(a0)
0001906E 117C 0008 0017             		move.b	#8,$17(a0)
00019074 217C 0000 BB20 0004        		move.l	#Map_obj14,4(a0)
0001907C 317C 0345 0002             		move.w	#$345,2(a0)
00019082 117C 0004 0001             		move.b	#4,1(a0)
00019088 117C 0005 0018             		move.b	#5,$18(a0)
0001908E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019094 117C 0008 0019             		move.b	#8,$19(a0)
0001909A 5428 0024                  		addq.b	#2,$24(a0)
0001909E 4A28 0028                  		tst.b	$28(a0)
000190A2 6600                       		bne.s	loc_1870A
000190A4 117C 008B 0020             		move.b	#$8B,$20(a0)
000190AA 5428 0024                  		addq.b	#2,$24(a0)
000190AE 6000 0000                  		bra.w	loc_18886
000190B2                            ; ===========================================================================
000190B2                            
000190B2                            loc_1870A:
000190B2 117C 001E 0029             		move.b	#$1E,$29(a0)
000190B8 303C 00AE                  		move.w	#$AE,d0
000190BC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava sound
000190C2                            
000190C2                            Obj74_Action:				; XREF: Obj74_Index
000190C2 7000                       		moveq	#0,d0
000190C4 1028 0025                  		move.b	$25(a0),d0
000190C8 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
000190CC 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
000190D0 4EB9 0000 DE82             		jsr	SpeedToPos
000190D6 43F9 0000 ED62             		lea	(Ani_obj14).l,a1
000190DC 4EB9 0000 AF22             		jsr	AnimateSprite
000190E2 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
000190E8 6200                       		bhi.s	Obj74_Delete
000190EA 4E75                       		rts	
000190EC                            ; ===========================================================================
000190EC                            
000190EC                            Obj74_Delete:
000190EC 4EF9 0000 DEE4             		jmp	DeleteObject
000190F2                            ; ===========================================================================
000190F2 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
000190F4 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
000190F6 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
000190F8 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
000190FA                            ; ===========================================================================
000190FA                            
000190FA                            Obj74_Drop:				; XREF: Obj74_Index2
000190FA 08E8 0001 0022             		bset	#1,$22(a0)
00019100 5328 0029                  		subq.b	#1,$29(a0)
00019104 6A00                       		bpl.s	locret_18780
00019106 117C 008B 0020             		move.b	#$8B,$20(a0)
0001910C 4228 0028                  		clr.b	$28(a0)
00019110 0668 0018 0012             		addi.w	#$18,$12(a0)
00019116 08A8 0001 0022             		bclr	#1,$22(a0)
0001911C 6100 C6A4                  		bsr.w	ObjHitFloor
00019120 4A41                       		tst.w	d1
00019122 6A00                       		bpl.s	locret_18780
00019124 5428 0025                  		addq.b	#2,$25(a0)
00019128                            
00019128                            locret_18780:
00019128 4E75                       		rts	
0001912A                            ; ===========================================================================
0001912A                            
0001912A                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001912A 5568 000C                  		subq.w	#2,$C(a0)
0001912E 08E8 0007 0002             		bset	#7,2(a0)
00019134 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001913A 4268 0012                  		clr.w	$12(a0)
0001913E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019144 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001914A 117C 0003 0029             		move.b	#3,$29(a0)
00019150 4EB9 0000 E344             		jsr	SingleObjLoad2
00019156 6600                       		bne.s	loc_187CA
00019158 47D1                       		lea	(a1),a3
0001915A 45D0                       		lea	(a0),a2
0001915C 7003                       		moveq	#3,d0
0001915E                            
0001915E                            Obj74_Loop:
0001915E 26DA                       		move.l	(a2)+,(a3)+
00019160 26DA                       		move.l	(a2)+,(a3)+
00019162 26DA                       		move.l	(a2)+,(a3)+
00019164 26DA                       		move.l	(a2)+,(a3)+
00019166 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001916A                            
0001916A 4469 0010                  		neg.w	$10(a1)
0001916E 5429 0025                  		addq.b	#2,$25(a1)
00019172                            
00019172                            loc_187CA:
00019172 5428 0025                  		addq.b	#2,$25(a0)
00019176 4E75                       		rts	
00019178                            
00019178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019178                            
00019178                            
00019178                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019178 4EB9 0000 E344             		jsr	SingleObjLoad2
0001917E 6600                       		bne.s	locret_187EE
00019180 3368 0008 0008             		move.w	8(a0),8(a1)
00019186 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001918C 12BC 0074                  		move.b	#$74,(a1)
00019190 337C 0067 0028             		move.w	#$67,$28(a1)
00019196                            
00019196                            locret_187EE:
00019196 4E75                       		rts	
00019198                            ; End of function Obj74_Duplicate2
00019198                            
00019198                            ; ===========================================================================
00019198                            
00019198                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019198 6100 C628                  		bsr.w	ObjHitFloor
0001919C 4A41                       		tst.w	d1
0001919E 6A00                       		bpl.s	loc_18826
000191A0 3028 0008                  		move.w	8(a0),d0
000191A4 0C40 1940                  		cmpi.w	#$1940,d0
000191A8 6E00                       		bgt.s	loc_1882C
000191AA 3228 0030                  		move.w	$30(a0),d1
000191AE B240                       		cmp.w	d0,d1
000191B0 6700                       		beq.s	loc_1881E
000191B2 0240 0010                  		andi.w	#$10,d0
000191B6 0241 0010                  		andi.w	#$10,d1
000191BA B240                       		cmp.w	d0,d1
000191BC 6700                       		beq.s	loc_1881E
000191BE 61B8                       		bsr.s	Obj74_Duplicate2
000191C0 3168 0008 0032             		move.w	8(a0),$32(a0)
000191C6                            
000191C6                            loc_1881E:
000191C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000191CC 4E75                       		rts	
000191CE                            ; ===========================================================================
000191CE                            
000191CE                            loc_18826:
000191CE 5428 0025                  		addq.b	#2,$25(a0)
000191D2 4E75                       		rts	
000191D4                            ; ===========================================================================
000191D4                            
000191D4                            loc_1882C:
000191D4 5428 0024                  		addq.b	#2,$24(a0)
000191D8 4E75                       		rts	
000191DA                            ; ===========================================================================
000191DA                            
000191DA                            Obj74_FallEdge:				; XREF: Obj74_Index2
000191DA 08A8 0001 0022             		bclr	#1,$22(a0)
000191E0 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
000191E6 3028 0008                  		move.w	8(a0),d0
000191EA 9068 0032                  		sub.w	$32(a0),d0
000191EE 6A00                       		bpl.s	loc_1884A
000191F0 4440                       		neg.w	d0
000191F2                            
000191F2                            loc_1884A:
000191F2 0C40 0012                  		cmpi.w	#$12,d0
000191F6 6600                       		bne.s	loc_18856
000191F8 08A8 0007 0002             		bclr	#7,2(a0)
000191FE                            
000191FE                            loc_18856:
000191FE 6100 C5C2                  		bsr.w	ObjHitFloor
00019202 4A41                       		tst.w	d1
00019204 6A00                       		bpl.s	locret_1887E
00019206 5328 0029                  		subq.b	#1,$29(a0)
0001920A 6700                       		beq.s	Obj74_Delete2
0001920C 4268 0012                  		clr.w	$12(a0)
00019210 3168 0032 0008             		move.w	$32(a0),8(a0)
00019216 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001921C 08E8 0007 0002             		bset	#7,2(a0)
00019222 5528 0025                  		subq.b	#2,$25(a0)
00019226                            
00019226                            locret_1887E:
00019226 4E75                       		rts	
00019228                            ; ===========================================================================
00019228                            
00019228                            Obj74_Delete2:
00019228 4EF9 0000 DEE4             		jmp	DeleteObject
0001922E                            ; ===========================================================================
0001922E                            
0001922E                            loc_18886:				; XREF: Obj74_Index
0001922E 08E8 0007 0002             		bset	#7,2(a0)
00019234 5328 0029                  		subq.b	#1,$29(a0)
00019238 6600                       		bne.s	Obj74_Animate
0001923A 117C 0001 001C             		move.b	#1,$1C(a0)
00019240 5968 000C                  		subq.w	#4,$C(a0)
00019244 4228 0020                  		clr.b	$20(a0)
00019248                            
00019248                            Obj74_Animate:
00019248 43F9 0000 ED62             		lea	(Ani_obj14).l,a1
0001924E 4EF9 0000 AF22             		jmp	AnimateSprite
00019254                            ; ===========================================================================
00019254                            
00019254                            Obj74_Delete3:				; XREF: Obj74_Index
00019254 4EF9 0000 DEE4             		jmp	DeleteObject
0001925A                            ; ===========================================================================
0001925A                            
0001925A                            Obj7A_Delete:
0001925A 4EF9 0000 DEE4             		jmp	DeleteObject
00019260                            ; ===========================================================================
00019260                            ; ---------------------------------------------------------------------------
00019260                            ; Object 7A - Eggman (SLZ)
00019260                            ; ---------------------------------------------------------------------------
00019260                            
00019260                            Obj7A:					; XREF: Obj_Index
00019260 7000                       		moveq	#0,d0
00019262 1028 0024                  		move.b	$24(a0),d0
00019266 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001926A 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001926E                            ; ===========================================================================
0001926E 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019270 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00019272 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00019274 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00019276 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019278                            
00019278 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001927B 0401 04                    		dc.b 4,	1, 4
0001927E 0607 04                    		dc.b 6,	7, 4
00019281 0800 03                    		dc.b 8,	0, 3
00019284                            ; ===========================================================================
00019284                            
00019284                            Obj7A_Main:				; XREF: Obj7A_Index
00019284 317C 2188 0008             		move.w	#$2188,8(a0)
0001928A 317C 0228 000C             		move.w	#$228,$C(a0)
00019290 3168 0008 0030             		move.w	8(a0),$30(a0)
00019296 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001929C 117C 000F 0020             		move.b	#$F,$20(a0)
000192A2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000192A8 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000192AC 2248                       		movea.l	a0,a1
000192AE 7203                       		moveq	#3,d1
000192B0 6000                       		bra.s	Obj7A_LoadBoss
000192B2                            ; ===========================================================================
000192B2                            
000192B2                            Obj7A_Loop:
000192B2 4EB9 0000 E344             		jsr	SingleObjLoad2
000192B8 6600                       		bne.s	loc_1895C
000192BA 12BC 007A                  		move.b	#$7A,0(a1)
000192BE 3368 0008 0008             		move.w	8(a0),8(a1)
000192C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000192CA                            
000192CA                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
000192CA 08A8 0000 0022             		bclr	#0,$22(a0)
000192D0 4229 0025                  		clr.b	$25(a1)
000192D4 135A 0024                  		move.b	(a2)+,$24(a1)
000192D8 135A 001C                  		move.b	(a2)+,$1C(a1)
000192DC 135A 0018                  		move.b	(a2)+,$18(a1)
000192E0 237C 0001 871A 0004        		move.l	#Map_Eggman,4(a1)
000192E8 337C 0400 0002             		move.w	#$400,2(a1)
000192EE 137C 0004 0001             		move.b	#4,1(a1)
000192F4 137C 0020 0019             		move.b	#$20,$19(a1)
000192FA 2348 0034                  		move.l	a0,$34(a1)
000192FE 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019302                            
00019302                            loc_1895C:
00019302 43F8 D040                  		lea	($FFFFD040).w,a1
00019306 45E8 002A                  		lea	$2A(a0),a2
0001930A 705E                       		moveq	#$5E,d0
0001930C 723E                       		moveq	#$3E,d1
0001930E                            
0001930E                            loc_18968:
0001930E B011                       		cmp.b	(a1),d0
00019310 6600                       		bne.s	loc_18974
00019312 4A29 0028                  		tst.b	$28(a1)
00019316 6700                       		beq.s	loc_18974
00019318 34C9                       		move.w	a1,(a2)+
0001931A                            
0001931A                            loc_18974:
0001931A D2FC 0040                  		adda.w	#$40,a1
0001931E 51C9 FFEE                  		dbf	d1,loc_18968
00019322                            
00019322                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019322 7000                       		moveq	#0,d0
00019324 1028 0025                  		move.b	$25(a0),d0
00019328 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001932C 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019330 43F9 0001 86B6             		lea	(Ani_Eggman).l,a1
00019336 4EB9 0000 AF22             		jsr	AnimateSprite
0001933C 7003                       		moveq	#3,d0
0001933E C028 0022                  		and.b	$22(a0),d0
00019342 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019348 8128 0001                  		or.b	d0,1(a0)
0001934C 4EF9 0000 DEA8             		jmp	DisplaySprite
00019352                            ; ===========================================================================
00019352 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019354 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00019356 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019358 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001935A 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001935C 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001935E                            ; ===========================================================================
0001935E                            
0001935E                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001935E 317C FF00 0010             		move.w	#-$100,$10(a0)
00019364 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001936A 6400                       		bcc.s	loc_189CA
0001936C 5428 0025                  		addq.b	#2,$25(a0)
00019370                            
00019370                            loc_189CA:
00019370 6100 EF02                  		bsr.w	BossMove
00019374 1028 003F                  		move.b	$3F(a0),d0
00019378 5428 003F                  		addq.b	#2,$3F(a0)
0001937C 4EB9 0000 2D36             		jsr	(CalcSine).l
00019382 EC40                       		asr.w	#6,d0
00019384 D068 0038                  		add.w	$38(a0),d0
00019388 3140 000C                  		move.w	d0,$C(a0)
0001938C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019392 6000                       		bra.s	loc_189FE
00019394                            ; ===========================================================================
00019394                            
00019394                            loc_189EE:
00019394 6100 EEDE                  		bsr.w	BossMove
00019398 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001939E 3168 0030 0008             		move.w	$30(a0),8(a0)
000193A4                            
000193A4                            loc_189FE:
000193A4 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000193AA 6400                       		bcc.s	locret_18A44
000193AC 4A28 0022                  		tst.b	$22(a0)
000193B0 6B00                       		bmi.s	loc_18A46
000193B2 4A28 0020                  		tst.b	$20(a0)
000193B6 6600                       		bne.s	locret_18A44
000193B8 4A28 003E                  		tst.b	$3E(a0)
000193BC 6600                       		bne.s	loc_18A28
000193BE 117C 0020 003E             		move.b	#$20,$3E(a0)
000193C4 303C 00AC                  		move.w	#$AC,d0
000193C8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
000193CE                            
000193CE                            loc_18A28:
000193CE 43F8 FB22                  		lea	($FFFFFB22).w,a1
000193D2 7000                       		moveq	#0,d0
000193D4 4A51                       		tst.w	(a1)
000193D6 6600                       		bne.s	loc_18A36
000193D8 303C 0EEE                  		move.w	#$EEE,d0
000193DC                            
000193DC                            loc_18A36:
000193DC 3280                       		move.w	d0,(a1)
000193DE 5328 003E                  		subq.b	#1,$3E(a0)
000193E2 6600                       		bne.s	locret_18A44
000193E4 117C 000F 0020             		move.b	#$F,$20(a0)
000193EA                            
000193EA                            locret_18A44:
000193EA 4E75                       		rts	
000193EC                            ; ===========================================================================
000193EC                            
000193EC                            loc_18A46:
000193EC 7064                       		moveq	#100,d0
000193EE 6100 0000                  		bsr.w	AddPoints
000193F2 117C 0006 0025             		move.b	#6,$25(a0)
000193F8 117C 0078 003C             		move.b	#$78,$3C(a0)
000193FE 4268 0010                  		clr.w	$10(a0)
00019402 4E75                       		rts	
00019404                            ; ===========================================================================
00019404                            
00019404                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019404 3028 0030                  		move.w	$30(a0),d0
00019408 317C 0200 0010             		move.w	#$200,$10(a0)
0001940E 0828 0000 0022             		btst	#0,$22(a0)
00019414 6600                       		bne.s	loc_18A7C
00019416 4468 0010                  		neg.w	$10(a0)
0001941A 0C40 2008                  		cmpi.w	#$2008,d0
0001941E 6E00                       		bgt.s	loc_18A88
00019420 6000                       		bra.s	loc_18A82
00019422                            ; ===========================================================================
00019422                            
00019422                            loc_18A7C:
00019422 0C40 2138                  		cmpi.w	#$2138,d0
00019426 6D00                       		blt.s	loc_18A88
00019428                            
00019428                            loc_18A82:
00019428 0868 0000 0022             		bchg	#0,$22(a0)
0001942E                            
0001942E                            loc_18A88:
0001942E 3028 0008                  		move.w	8(a0),d0
00019432 72FF                       		moveq	#-1,d1
00019434 7402                       		moveq	#2,d2
00019436 45E8 002A                  		lea	$2A(a0),a2
0001943A 7828                       		moveq	#$28,d4
0001943C 4A68 0010                  		tst.w	$10(a0)
00019440 6A00                       		bpl.s	loc_18A9E
00019442 4444                       		neg.w	d4
00019444                            
00019444                            loc_18A9E:
00019444 321A                       		move.w	(a2)+,d1
00019446 2641                       		movea.l	d1,a3
00019448 082B 0003 0022             		btst	#3,$22(a3)
0001944E 6600                       		bne.s	loc_18AB4
00019450 362B 0008                  		move.w	8(a3),d3
00019454 D644                       		add.w	d4,d3
00019456 9640                       		sub.w	d0,d3
00019458 6700                       		beq.s	loc_18AC0
0001945A                            
0001945A                            loc_18AB4:
0001945A 51CA FFE8                  		dbf	d2,loc_18A9E
0001945E                            
0001945E 1142 0028                  		move.b	d2,$28(a0)
00019462 6000 FF0C                  		bra.w	loc_189CA
00019466                            ; ===========================================================================
00019466                            
00019466                            loc_18AC0:
00019466 1142 0028                  		move.b	d2,$28(a0)
0001946A 5428 0025                  		addq.b	#2,$25(a0)
0001946E 117C 0028 003C             		move.b	#$28,$3C(a0)
00019474 6000 FEFA                  		bra.w	loc_189CA
00019478                            ; ===========================================================================
00019478                            
00019478                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019478 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001947E 6600                       		bne.s	loc_18B36
00019480 70FF                       		moveq	#-1,d0
00019482 1028 0028                  		move.b	$28(a0),d0
00019486 4880                       		ext.w	d0
00019488 6B00                       		bmi.s	loc_18B40
0001948A 5540                       		subq.w	#2,d0
0001948C 4440                       		neg.w	d0
0001948E D040                       		add.w	d0,d0
00019490 43E8 002A                  		lea	$2A(a0),a1
00019494 3031 0000                  		move.w	(a1,d0.w),d0
00019498 2440                       		movea.l	d0,a2
0001949A 43F8 D040                  		lea	($FFFFD040).w,a1
0001949E 723E                       		moveq	#$3E,d1
000194A0                            
000194A0                            loc_18AFA:
000194A0 B0A9 003C                  		cmp.l	$3C(a1),d0
000194A4 6700                       		beq.s	loc_18B40
000194A6 D2FC 0040                  		adda.w	#$40,a1
000194AA 51C9 FFF4                  		dbf	d1,loc_18AFA
000194AE                            
000194AE 2F08                       		move.l	a0,-(sp)
000194B0 41D2                       		lea	(a2),a0
000194B2 4EB9 0000 E344             		jsr	SingleObjLoad2
000194B8 205F                       		movea.l	(sp)+,a0
000194BA 6600                       		bne.s	loc_18B40
000194BC 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000194C0 3368 0008 0008             		move.w	8(a0),8(a1)
000194C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000194CC 0669 0020 000C             		addi.w	#$20,$C(a1)
000194D2 136A 0022 0022             		move.b	$22(a2),$22(a1)
000194D8 234A 003C                  		move.l	a2,$3C(a1)
000194DC                            
000194DC                            loc_18B36:
000194DC 5328 003C                  		subq.b	#1,$3C(a0)
000194E0 6700                       		beq.s	loc_18B40
000194E2 6000 FEC0                  		bra.w	loc_189FE
000194E6                            ; ===========================================================================
000194E6                            
000194E6                            loc_18B40:
000194E6 5528 0025                  		subq.b	#2,$25(a0)
000194EA 6000 FE84                  		bra.w	loc_189CA
000194EE                            ; ===========================================================================
000194EE                            
000194EE                            loc_18B48:				; XREF: Obj7A_ShipIndex
000194EE 5328 003C                  		subq.b	#1,$3C(a0)
000194F2 6B00                       		bmi.s	loc_18B52
000194F4 6000 ED3C                  		bra.w	BossDefeated
000194F8                            ; ===========================================================================
000194F8                            
000194F8                            loc_18B52:
000194F8 5428 0025                  		addq.b	#2,$25(a0)
000194FC 4268 0012                  		clr.w	$12(a0)
00019500 08E8 0000 0022             		bset	#0,$22(a0)
00019506 08A8 0007 0022             		bclr	#7,$22(a0)
0001950C 4268 0010                  		clr.w	$10(a0)
00019510 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019516 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001951A 6600                       		bne.s	loc_18B7C
0001951C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019522                            
00019522                            loc_18B7C:
00019522 6000 FE80                  		bra.w	loc_189FE
00019526                            ; ===========================================================================
00019526                            
00019526                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019526 5228 003C                  		addq.b	#1,$3C(a0)
0001952A 6700                       		beq.s	loc_18B90
0001952C 6A00                       		bpl.s	loc_18B96
0001952E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019534 6000                       		bra.s	loc_18BC2
00019536                            ; ===========================================================================
00019536                            
00019536                            loc_18B90:
00019536 4268 0012                  		clr.w	$12(a0)
0001953A 6000                       		bra.s	loc_18BC2
0001953C                            ; ===========================================================================
0001953C                            
0001953C                            loc_18B96:
0001953C 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019542 6500                       		bcs.s	loc_18BAE
00019544 6700                       		beq.s	loc_18BB4
00019546 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001954C 6500                       		bcs.s	loc_18BC2
0001954E 5428 0025                  		addq.b	#2,$25(a0)
00019552 6000                       		bra.s	loc_18BC2
00019554                            ; ===========================================================================
00019554                            
00019554                            loc_18BAE:
00019554 5168 0012                  		subq.w	#8,$12(a0)
00019558 6000                       		bra.s	loc_18BC2
0001955A                            ; ===========================================================================
0001955A                            
0001955A                            loc_18BB4:
0001955A 4268 0012                  		clr.w	$12(a0)
0001955E 303C 0084                  		move.w	#$84,d0
00019562 4EB9 0000 15CC             		jsr	(PlaySound).l	; play SLZ music
00019568                            
00019568                            loc_18BC2:
00019568 6000 FE2A                  		bra.w	loc_189EE
0001956C                            ; ===========================================================================
0001956C                            
0001956C                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001956C 317C 0400 0010             		move.w	#$400,$10(a0)
00019572 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019578 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001957E 6400                       		bcc.s	loc_18BE0
00019580 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019584 6000                       		bra.s	loc_18BE8
00019586                            ; ===========================================================================
00019586                            
00019586                            loc_18BE0:
00019586 4A28 0001                  		tst.b	1(a0)
0001958A 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001958E                            
0001958E                            loc_18BE8:
0001958E 6100 ECE4                  		bsr.w	BossMove
00019592 6000 FDDC                  		bra.w	loc_189CA
00019596                            ; ===========================================================================
00019596                            
00019596                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019596 7000                       		moveq	#0,d0
00019598 7201                       		moveq	#1,d1
0001959A 2268 0034                  		movea.l	$34(a0),a1
0001959E 1029 0025                  		move.b	$25(a1),d0
000195A2 0C00 0006                  		cmpi.b	#6,d0
000195A6 6B00                       		bmi.s	loc_18C06
000195A8 720A                       		moveq	#$A,d1
000195AA 6000                       		bra.s	loc_18C1A
000195AC                            ; ===========================================================================
000195AC                            
000195AC                            loc_18C06:
000195AC 4A29 0020                  		tst.b	$20(a1)
000195B0 6600                       		bne.s	loc_18C10
000195B2 7205                       		moveq	#5,d1
000195B4 6000                       		bra.s	loc_18C1A
000195B6                            ; ===========================================================================
000195B6                            
000195B6                            loc_18C10:
000195B6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000195BC 6500                       		bcs.s	loc_18C1A
000195BE 7204                       		moveq	#4,d1
000195C0                            
000195C0                            loc_18C1A:
000195C0 1141 001C                  		move.b	d1,$1C(a0)
000195C4 0C00 000A                  		cmpi.b	#$A,d0
000195C8 6600                       		bne.s	loc_18C32
000195CA 117C 0006 001C             		move.b	#6,$1C(a0)
000195D0 4A28 0001                  		tst.b	1(a0)
000195D4 6A00 FC84                  		bpl.w	Obj7A_Delete
000195D8                            
000195D8                            loc_18C32:
000195D8 6000                       		bra.s	loc_18C6C
000195DA                            ; ===========================================================================
000195DA                            
000195DA                            Obj7A_FlameMain:			; XREF: Obj7A_Index
000195DA 117C 0008 001C             		move.b	#8,$1C(a0)
000195E0 2268 0034                  		movea.l	$34(a0),a1
000195E4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000195EA 6600                       		bne.s	loc_18C56
000195EC 4A28 0001                  		tst.b	1(a0)
000195F0 6A00 FC68                  		bpl.w	Obj7A_Delete
000195F4 117C 000B 001C             		move.b	#$B,$1C(a0)
000195FA 6000                       		bra.s	loc_18C6C
000195FC                            ; ===========================================================================
000195FC                            
000195FC                            loc_18C56:
000195FC 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019602 6E00                       		bgt.s	loc_18C6C
00019604 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001960A 6D00                       		blt.s	loc_18C6C
0001960C 117C 0007 001C             		move.b	#7,$1C(a0)
00019612                            
00019612                            loc_18C6C:
00019612 43F9 0001 86B6             		lea	(Ani_Eggman).l,a1
00019618 4EB9 0000 AF22             		jsr	AnimateSprite
0001961E                            
0001961E                            loc_18C78:
0001961E 2268 0034                  		movea.l	$34(a0),a1
00019622 3169 0008 0008             		move.w	8(a1),8(a0)
00019628 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001962E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019634 7003                       		moveq	#3,d0
00019636 C028 0022                  		and.b	$22(a0),d0
0001963A 0228 00FC 0001             		andi.b	#-4,1(a0)
00019640 8128 0001                  		or.b	d0,1(a0)
00019644 4EF9 0000 DEA8             		jmp	DisplaySprite
0001964A                            ; ===========================================================================
0001964A                            
0001964A                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001964A 2268 0034                  		movea.l	$34(a0),a1
0001964E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019654 6600                       		bne.s	loc_18CB8
00019656 4A28 0001                  		tst.b	1(a0)
0001965A 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001965E                            
0001965E                            loc_18CB8:
0001965E 217C 0001 87E2 0004        		move.l	#Map_BossItems,4(a0)
00019666 317C 246C 0002             		move.w	#$246C,2(a0)
0001966C 117C 0003 001A             		move.b	#3,$1A(a0)
00019672 60AA                       		bra.s	loc_18C78
00019674                            ; ===========================================================================
00019674                            ; ---------------------------------------------------------------------------
00019674                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019674                            ; ---------------------------------------------------------------------------
00019674                            
00019674                            Obj7B:					; XREF: Obj_Index
00019674 7000                       		moveq	#0,d0
00019676 1028 0024                  		move.b	$24(a0),d0
0001967A 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001967E 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019682 3028 0030                  		move.w	$30(a0),d0
00019686 0240 FF80                  		andi.w	#$FF80,d0
0001968A 3238 F700                  		move.w	($FFFFF700).w,d1
0001968E 0441 0080                  		subi.w	#$80,d1
00019692 0241 FF80                  		andi.w	#$FF80,d1
00019696 9041                       		sub.w	d1,d0
00019698 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001969C 0C40 0280                  		cmpi.w	#$280,d0
000196A0 6200 FBB8                  		bhi.w	Obj7A_Delete
000196A4 4EF9 0000 DEA8             		jmp	DisplaySprite
000196AA                            ; ===========================================================================
000196AA 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000196AC 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000196AE 0000                       		dc.w loc_18DC6-Obj7B_Index
000196B0 0000                       		dc.w loc_18EAA-Obj7B_Index
000196B2 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000196B4 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000196B6                            ; ===========================================================================
000196B6                            
000196B6                            Obj7B_Main:				; XREF: Obj7B_Index
000196B6 217C 0001 226E 0004        		move.l	#Map_obj5Ea,4(a0)
000196BE 317C 0518 0002             		move.w	#$518,2(a0)
000196C4 117C 0001 001A             		move.b	#1,$1A(a0)
000196CA 0028 0004 0001             		ori.b	#4,1(a0)
000196D0 117C 0004 0018             		move.b	#4,$18(a0)
000196D6 117C 008B 0020             		move.b	#$8B,$20(a0)
000196DC 117C 000C 0019             		move.b	#$C,$19(a0)
000196E2 2268 003C                  		movea.l	$3C(a0),a1
000196E6 3169 0008 0030             		move.w	8(a1),$30(a0)
000196EC 3169 000C 0034             		move.w	$C(a1),$34(a0)
000196F2 08E8 0000 0022             		bset	#0,$22(a0)
000196F8 3028 0008                  		move.w	8(a0),d0
000196FC B069 0008                  		cmp.w	8(a1),d0
00019700 6E00                       		bgt.s	loc_18D68
00019702 08A8 0000 0022             		bclr	#0,$22(a0)
00019708 117C 0002 003A             		move.b	#2,$3A(a0)
0001970E                            
0001970E                            loc_18D68:
0001970E 5428 0024                  		addq.b	#2,$24(a0)
00019712                            
00019712                            Obj7B_Fall:				; XREF: Obj7B_Index
00019712 4EB9 0000 DE10             		jsr	ObjectFall
00019718 2268 003C                  		movea.l	$3C(a0),a1
0001971C 45F9 0000 0000             		lea	(word_19018).l,a2
00019722 7000                       		moveq	#0,d0
00019724 1029 001A                  		move.b	$1A(a1),d0
00019728 3228 0008                  		move.w	8(a0),d1
0001972C 9268 0030                  		sub.w	$30(a0),d1
00019730 6400                       		bcc.s	loc_18D8E
00019732 5440                       		addq.w	#2,d0
00019734                            
00019734                            loc_18D8E:
00019734 D040                       		add.w	d0,d0
00019736 3228 0034                  		move.w	$34(a0),d1
0001973A D272 0000                  		add.w	(a2,d0.w),d1
0001973E B268 000C                  		cmp.w	$C(a0),d1
00019742 6E00                       		bgt.s	locret_18DC4
00019744 2268 003C                  		movea.l	$3C(a0),a1
00019748 7202                       		moveq	#2,d1
0001974A 0828 0000 0022             		btst	#0,$22(a0)
00019750 6700                       		beq.s	loc_18DAE
00019752 7200                       		moveq	#0,d1
00019754                            
00019754                            loc_18DAE:
00019754 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001975A 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019760 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019766 6000 0000                  		bra.w	loc_18FA2
0001976A                            ; ===========================================================================
0001976A                            
0001976A                            locret_18DC4:
0001976A 4E75                       		rts	
0001976C                            ; ===========================================================================
0001976C                            
0001976C                            loc_18DC6:				; XREF: Obj7B_Index
0001976C 2268 003C                  		movea.l	$3C(a0),a1
00019770 7000                       		moveq	#0,d0
00019772 1028 003A                  		move.b	$3A(a0),d0
00019776 9029 003A                  		sub.b	$3A(a1),d0
0001977A 6700                       		beq.s	loc_18E2A
0001977C 6400                       		bcc.s	loc_18DDA
0001977E 4400                       		neg.b	d0
00019780                            
00019780                            loc_18DDA:
00019780 323C F7E8                  		move.w	#-$818,d1
00019784 343C FEEC                  		move.w	#-$114,d2
00019788 0C00 0001                  		cmpi.b	#1,d0
0001978C 6700                       		beq.s	loc_18E00
0001978E 323C F6A0                  		move.w	#-$960,d1
00019792 343C FF0C                  		move.w	#-$F4,d2
00019796 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001979C 6D00                       		blt.s	loc_18E00
0001979E 323C F5E0                  		move.w	#-$A20,d1
000197A2 343C FF80                  		move.w	#-$80,d2
000197A6                            
000197A6                            loc_18E00:
000197A6 3141 0012                  		move.w	d1,$12(a0)
000197AA 3142 0010                  		move.w	d2,$10(a0)
000197AE 3028 0008                  		move.w	8(a0),d0
000197B2 9068 0030                  		sub.w	$30(a0),d0
000197B6 6400                       		bcc.s	loc_18E16
000197B8 4468 0010                  		neg.w	$10(a0)
000197BC                            
000197BC                            loc_18E16:
000197BC 117C 0001 001A             		move.b	#1,$1A(a0)
000197C2 317C 0020 0028             		move.w	#$20,$28(a0)
000197C8 5428 0024                  		addq.b	#2,$24(a0)
000197CC 6000 0000                  		bra.w	loc_18EAA
000197D0                            ; ===========================================================================
000197D0                            
000197D0                            loc_18E2A:				; XREF: loc_18DC6
000197D0 45F9 0000 0000             		lea	(word_19018).l,a2
000197D6 7000                       		moveq	#0,d0
000197D8 1029 001A                  		move.b	$1A(a1),d0
000197DC 343C 0028                  		move.w	#$28,d2
000197E0 3228 0008                  		move.w	8(a0),d1
000197E4 9268 0030                  		sub.w	$30(a0),d1
000197E8 6400                       		bcc.s	loc_18E48
000197EA 4442                       		neg.w	d2
000197EC 5440                       		addq.w	#2,d0
000197EE                            
000197EE                            loc_18E48:
000197EE D040                       		add.w	d0,d0
000197F0 3228 0034                  		move.w	$34(a0),d1
000197F4 D272 0000                  		add.w	(a2,d0.w),d1
000197F8 3141 000C                  		move.w	d1,$C(a0)
000197FC D468 0030                  		add.w	$30(a0),d2
00019800 3142 0008                  		move.w	d2,8(a0)
00019804 4268 000E                  		clr.w	$E(a0)
00019808 4268 000A                  		clr.w	$A(a0)
0001980C 5368 0028                  		subq.w	#1,$28(a0)
00019810 6600                       		bne.s	loc_18E7A
00019812 317C 0020 0028             		move.w	#$20,$28(a0)
00019818 117C 0008 0024             		move.b	#8,$24(a0)
0001981E 4E75                       		rts	
00019820                            ; ===========================================================================
00019820                            
00019820                            loc_18E7A:
00019820 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019826 6600                       		bne.s	loc_18E88
00019828 117C 0005 001F             		move.b	#5,$1F(a0)
0001982E                            
0001982E                            loc_18E88:
0001982E 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019834 6600                       		bne.s	loc_18E96
00019836 117C 0002 001F             		move.b	#2,$1F(a0)
0001983C                            
0001983C                            loc_18E96:
0001983C 5328 001E                  		subq.b	#1,$1E(a0)
00019840 6E00                       		bgt.s	locret_18EA8
00019842 0868 0000 001A             		bchg	#0,$1A(a0)
00019848 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001984E                            
0001984E                            locret_18EA8:
0001984E 4E75                       		rts	
00019850                            ; ===========================================================================
00019850                            
00019850                            loc_18EAA:				; XREF: Obj7B_Index
00019850 43F8 D040                  		lea	($FFFFD040).w,a1
00019854 707A                       		moveq	#$7A,d0
00019856 7240                       		moveq	#$40,d1
00019858 743E                       		moveq	#$3E,d2
0001985A                            
0001985A                            loc_18EB4:
0001985A B011                       		cmp.b	(a1),d0
0001985C 6700                       		beq.s	loc_18EC0
0001985E D2C1                       		adda.w	d1,a1
00019860 51CA FFF8                  		dbf	d2,loc_18EB4
00019864                            
00019864 6000                       		bra.s	loc_18F38
00019866                            ; ===========================================================================
00019866                            
00019866                            loc_18EC0:
00019866 3029 0008                  		move.w	8(a1),d0
0001986A 3229 000C                  		move.w	$C(a1),d1
0001986E 3428 0008                  		move.w	8(a0),d2
00019872 3628 000C                  		move.w	$C(a0),d3
00019876 45FA 0000                  		lea	byte_19022(pc),a2
0001987A 47FA 0000                  		lea	byte_19026(pc),a3
0001987E 181A                       		move.b	(a2)+,d4
00019880 4884                       		ext.w	d4
00019882 D044                       		add.w	d4,d0
00019884 181B                       		move.b	(a3)+,d4
00019886 4884                       		ext.w	d4
00019888 D444                       		add.w	d4,d2
0001988A B440                       		cmp.w	d0,d2
0001988C 6500                       		bcs.s	loc_18F38
0001988E 181A                       		move.b	(a2)+,d4
00019890 4884                       		ext.w	d4
00019892 D044                       		add.w	d4,d0
00019894 181B                       		move.b	(a3)+,d4
00019896 4884                       		ext.w	d4
00019898 D444                       		add.w	d4,d2
0001989A B042                       		cmp.w	d2,d0
0001989C 6500                       		bcs.s	loc_18F38
0001989E 181A                       		move.b	(a2)+,d4
000198A0 4884                       		ext.w	d4
000198A2 D244                       		add.w	d4,d1
000198A4 181B                       		move.b	(a3)+,d4
000198A6 4884                       		ext.w	d4
000198A8 D644                       		add.w	d4,d3
000198AA B641                       		cmp.w	d1,d3
000198AC 6500                       		bcs.s	loc_18F38
000198AE 181A                       		move.b	(a2)+,d4
000198B0 4884                       		ext.w	d4
000198B2 D244                       		add.w	d4,d1
000198B4 181B                       		move.b	(a3)+,d4
000198B6 4884                       		ext.w	d4
000198B8 D644                       		add.w	d4,d3
000198BA B243                       		cmp.w	d3,d1
000198BC 6500                       		bcs.s	loc_18F38
000198BE 5428 0024                  		addq.b	#2,$24(a0)
000198C2 4268 0028                  		clr.w	$28(a0)
000198C6 4229 0020                  		clr.b	$20(a1)
000198CA 5329 0021                  		subq.b	#1,$21(a1)
000198CE 6600                       		bne.s	loc_18F38
000198D0 08E9 0007 0022             		bset	#7,$22(a1)
000198D6 4268 0010                  		clr.w	$10(a0)
000198DA 4268 0012                  		clr.w	$12(a0)
000198DE                            
000198DE                            loc_18F38:
000198DE 4A68 0012                  		tst.w	$12(a0)
000198E2 6A00                       		bpl.s	loc_18F5C
000198E4 4EB9 0000 DE10             		jsr	ObjectFall
000198EA 3028 0034                  		move.w	$34(a0),d0
000198EE 0440 002F                  		subi.w	#$2F,d0
000198F2 B068 000C                  		cmp.w	$C(a0),d0
000198F6 6E00                       		bgt.s	loc_18F58
000198F8 4EB9 0000 DE10             		jsr	ObjectFall
000198FE                            
000198FE                            loc_18F58:
000198FE 6000 FF20                  		bra.w	loc_18E7A
00019902                            ; ===========================================================================
00019902                            
00019902                            loc_18F5C:
00019902 4EB9 0000 DE10             		jsr	ObjectFall
00019908 2268 003C                  		movea.l	$3C(a0),a1
0001990C 45F9 0000 0000             		lea	(word_19018).l,a2
00019912 7000                       		moveq	#0,d0
00019914 1029 001A                  		move.b	$1A(a1),d0
00019918 3228 0008                  		move.w	8(a0),d1
0001991C 9268 0030                  		sub.w	$30(a0),d1
00019920 6400                       		bcc.s	loc_18F7E
00019922 5440                       		addq.w	#2,d0
00019924                            
00019924                            loc_18F7E:
00019924 D040                       		add.w	d0,d0
00019926 3228 0034                  		move.w	$34(a0),d1
0001992A D272 0000                  		add.w	(a2,d0.w),d1
0001992E B268 000C                  		cmp.w	$C(a0),d1
00019932 6ECA                       		bgt.s	loc_18F58
00019934 2268 003C                  		movea.l	$3C(a0),a1
00019938 7202                       		moveq	#2,d1
0001993A 4A68 0010                  		tst.w	$10(a0)
0001993E 6B00                       		bmi.s	loc_18F9C
00019940 7200                       		moveq	#0,d1
00019942                            
00019942                            loc_18F9C:
00019942 317C 0000 0028             		move.w	#0,$28(a0)
00019948                            
00019948                            loc_18FA2:
00019948 1341 003A                  		move.b	d1,$3A(a1)
0001994C 1141 003A                  		move.b	d1,$3A(a0)
00019950 B229 001A                  		cmp.b	$1A(a1),d1
00019954 6700                       		beq.s	loc_19008
00019956 08A9 0003 0022             		bclr	#3,$22(a1)
0001995C 6700                       		beq.s	loc_19008
0001995E 4229 0025                  		clr.b	$25(a1)
00019962 137C 0002 0024             		move.b	#2,$24(a1)
00019968 45F8 D000                  		lea	($FFFFD000).w,a2
0001996C 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019972 446A 0012                  		neg.w	$12(a2)
00019976 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001997C 6600                       		bne.s	loc_18FDC
0001997E E0EA 0012                  		asr	$12(a2)
00019982                            
00019982                            loc_18FDC:
00019982 08EA 0001 0022             		bset	#1,$22(a2)
00019988 08AA 0003 0022             		bclr	#3,$22(a2)
0001998E 422A 003C                  		clr.b	$3C(a2)
00019992 2F08                       		move.l	a0,-(sp)
00019994 41D2                       		lea	(a2),a0
00019996 4EBA A35C                  		jsr	Obj01_ChkRoll
0001999A 205F                       		movea.l	(sp)+,a0
0001999C 157C 0002 0024             		move.b	#2,$24(a2)
000199A2 303C 00CC                  		move.w	#$CC,d0
000199A6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "spring" sound
000199AC                            
000199AC                            loc_19008:
000199AC 4268 0010                  		clr.w	$10(a0)
000199B0 4268 0012                  		clr.w	$12(a0)
000199B4 5428 0024                  		addq.b	#2,$24(a0)
000199B8 6000 FE66                  		bra.w	loc_18E7A
000199BC                            ; ===========================================================================
000199BC FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000199C6                            		even
000199C6 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000199CA                            		even
000199CA 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000199CE                            		even
000199CE                            ; ===========================================================================
000199CE                            
000199CE                            Obj7B_Explode:				; XREF: Obj7B_Index
000199CE 10BC 003F                  		move.b	#$3F,(a0)
000199D2 4228 0024                  		clr.b	$24(a0)
000199D6 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
000199DC 6700                       		beq.s	Obj7B_MakeFrag
000199DE 4E75                       		rts	
000199E0                            ; ===========================================================================
000199E0                            
000199E0                            Obj7B_MakeFrag:
000199E0 3168 0034 000C             		move.w	$34(a0),$C(a0)
000199E6 7203                       		moveq	#3,d1
000199E8 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
000199EC                            
000199EC                            Obj7B_Loop:
000199EC 4EB9 0000 E32E             		jsr	SingleObjLoad
000199F2 6600                       		bne.s	loc_1909A
000199F4 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
000199F8 137C 000A 0024             		move.b	#$A,$24(a1)
000199FE 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019A06 137C 0003 0018             		move.b	#3,$18(a1)
00019A0C 337C 0518 0002             		move.w	#$518,2(a1)
00019A12 3368 0008 0008             		move.w	8(a0),8(a1)
00019A18 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019A1E 335A 0010                  		move.w	(a2)+,$10(a1)
00019A22 335A 0012                  		move.w	(a2)+,$12(a1)
00019A26 137C 0098 0020             		move.b	#$98,$20(a1)
00019A2C 0029 0004 0001             		ori.b	#4,1(a1)
00019A32 08E9 0007 0001             		bset	#7,1(a1)
00019A38 137C 000C 0019             		move.b	#$C,$19(a1)
00019A3E                            
00019A3E                            loc_1909A:
00019A3E 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019A42                            
00019A42 4E75                       		rts	
00019A44                            ; ===========================================================================
00019A44 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019A48 FF60 FDC0                  		dc.w $FF60, $FDC0
00019A4C 0100 FCC0                  		dc.w $100, $FCC0
00019A50 00A0 FDC0                  		dc.w $A0, $FDC0
00019A54                            ; ===========================================================================
00019A54                            
00019A54                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019A54 4EB9 0000 DE82             		jsr	SpeedToPos
00019A5A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019A60 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019A66 0668 0018 0012             		addi.w	#$18,$12(a0)
00019A6C 7004                       		moveq	#4,d0
00019A6E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019A72 E448                       		lsr.w	#2,d0
00019A74 1140 001A                  		move.b	d0,$1A(a0)
00019A78 4A28 0001                  		tst.b	1(a0)
00019A7C 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019A80 4E75                       		rts	
00019A82                            ; ===========================================================================
00019A82                            ; ---------------------------------------------------------------------------
00019A82                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019A82                            ; ---------------------------------------------------------------------------
00019A82                            Map_obj7B:
00019A82                            	include "_maps\obj7B.asm"
00019A82                            ; ---------------------------------------------------------------------------
00019A82                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019A82                            ; ---------------------------------------------------------------------------
00019A82 0000                       		dc.w byte_190E2-Map_obj7B
00019A84 0000                       		dc.w byte_190E8-Map_obj7B
00019A86 01                         byte_190E2:	dc.b 1
00019A87 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019A8C 01                         byte_190E8:	dc.b 1
00019A8D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019A92                            		even
00019A92                            		even
00019A92                            
00019A92                            ; ===========================================================================
00019A92                            ; ---------------------------------------------------------------------------
00019A92                            ; Object 75 - Eggman (SYZ)
00019A92                            ; ---------------------------------------------------------------------------
00019A92                            
00019A92                            Obj75:					; XREF: Obj_Index
00019A92 7000                       		moveq	#0,d0
00019A94 1028 0024                  		move.b	$24(a0),d0
00019A98 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019A9C 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019AA0                            ; ===========================================================================
00019AA0 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019AA2 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019AA4 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019AA6 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019AA8 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019AAA                            
00019AAA 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019AAD 0401 05                    		dc.b 4,	1, 5
00019AB0 0607 05                    		dc.b 6,	7, 5
00019AB3 0800 05                    		dc.b 8,	0, 5
00019AB6                            ; ===========================================================================
00019AB6                            
00019AB6                            Obj75_Main:				; XREF: Obj75_Index
00019AB6 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019ABC 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019AC2 3168 0008 0030             		move.w	8(a0),$30(a0)
00019AC8 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019ACE 117C 000F 0020             		move.b	#$F,$20(a0)
00019AD4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019ADA 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019ADE 2248                       		movea.l	a0,a1
00019AE0 7203                       		moveq	#3,d1
00019AE2 6000                       		bra.s	Obj75_LoadBoss
00019AE4                            ; ===========================================================================
00019AE4                            
00019AE4                            Obj75_Loop:
00019AE4 4EB9 0000 E344             		jsr	SingleObjLoad2
00019AEA 6600                       		bne.s	Obj75_ShipMain
00019AEC 12BC 0075                  		move.b	#$75,(a1)
00019AF0 3368 0008 0008             		move.w	8(a0),8(a1)
00019AF6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019AFC                            
00019AFC                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019AFC 08A8 0000 0022             		bclr	#0,$22(a0)
00019B02 4229 0025                  		clr.b	$25(a1)
00019B06 135A 0024                  		move.b	(a2)+,$24(a1)
00019B0A 135A 001C                  		move.b	(a2)+,$1C(a1)
00019B0E 135A 0018                  		move.b	(a2)+,$18(a1)
00019B12 237C 0001 871A 0004        		move.l	#Map_Eggman,4(a1)
00019B1A 337C 0400 0002             		move.w	#$400,2(a1)
00019B20 137C 0004 0001             		move.b	#4,1(a1)
00019B26 137C 0020 0019             		move.b	#$20,$19(a1)
00019B2C 2348 0034                  		move.l	a0,$34(a1)
00019B30 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019B34                            
00019B34                            Obj75_ShipMain:				; XREF: Obj75_Index
00019B34 7000                       		moveq	#0,d0
00019B36 1028 0025                  		move.b	$25(a0),d0
00019B3A 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019B3E 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019B42 43F9 0001 86B6             		lea	(Ani_Eggman).l,a1
00019B48 4EB9 0000 AF22             		jsr	AnimateSprite
00019B4E 7003                       		moveq	#3,d0
00019B50 C028 0022                  		and.b	$22(a0),d0
00019B54 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019B5A 8128 0001                  		or.b	d0,1(a0)
00019B5E 4EF9 0000 DEA8             		jmp	DisplaySprite
00019B64                            ; ===========================================================================
00019B64 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019B68 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019B6C 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019B70                            ; ===========================================================================
00019B70                            
00019B70                            loc_191CC:				; XREF: Obj75_ShipIndex
00019B70 317C FF00 0010             		move.w	#-$100,$10(a0)
00019B76 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019B7C 6400                       		bcc.s	loc_191DE
00019B7E 5428 0025                  		addq.b	#2,$25(a0)
00019B82                            
00019B82                            loc_191DE:
00019B82 1028 003F                  		move.b	$3F(a0),d0
00019B86 5428 003F                  		addq.b	#2,$3F(a0)
00019B8A 4EB9 0000 2D36             		jsr	(CalcSine).l
00019B90 E440                       		asr.w	#2,d0
00019B92 3140 0012                  		move.w	d0,$12(a0)
00019B96                            
00019B96                            loc_191F2:
00019B96 6100 E6DC                  		bsr.w	BossMove
00019B9A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019BA0 3168 0030 0008             		move.w	$30(a0),8(a0)
00019BA6                            
00019BA6                            loc_19202:
00019BA6 3028 0008                  		move.w	8(a0),d0
00019BAA 0440 2C00                  		subi.w	#$2C00,d0
00019BAE EA48                       		lsr.w	#5,d0
00019BB0 1140 0034                  		move.b	d0,$34(a0)
00019BB4 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019BBA 6400                       		bcc.s	locret_19256
00019BBC 4A28 0022                  		tst.b	$22(a0)
00019BC0 6B00                       		bmi.s	loc_19258
00019BC2 4A28 0020                  		tst.b	$20(a0)
00019BC6 6600                       		bne.s	locret_19256
00019BC8 4A28 003E                  		tst.b	$3E(a0)
00019BCC 6600                       		bne.s	loc_1923A
00019BCE 117C 0020 003E             		move.b	#$20,$3E(a0)
00019BD4 303C 00AC                  		move.w	#$AC,d0
00019BD8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019BDE                            
00019BDE                            loc_1923A:
00019BDE 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019BE2 7000                       		moveq	#0,d0
00019BE4 4A51                       		tst.w	(a1)
00019BE6 6600                       		bne.s	loc_19248
00019BE8 303C 0EEE                  		move.w	#$EEE,d0
00019BEC                            
00019BEC                            loc_19248:
00019BEC 3280                       		move.w	d0,(a1)
00019BEE 5328 003E                  		subq.b	#1,$3E(a0)
00019BF2 6600                       		bne.s	locret_19256
00019BF4 117C 000F 0020             		move.b	#$F,$20(a0)
00019BFA                            
00019BFA                            locret_19256:
00019BFA 4E75                       		rts	
00019BFC                            ; ===========================================================================
00019BFC                            
00019BFC                            loc_19258:				; XREF: loc_19202
00019BFC 7064                       		moveq	#100,d0
00019BFE 6100 0000                  		bsr.w	AddPoints
00019C02 117C 0006 0025             		move.b	#6,$25(a0)
00019C08 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019C0E 4268 0010                  		clr.w	$10(a0)
00019C12 4E75                       		rts	
00019C14                            ; ===========================================================================
00019C14                            
00019C14                            loc_19270:				; XREF: Obj75_ShipIndex
00019C14 3028 0030                  		move.w	$30(a0),d0
00019C18 317C 0140 0010             		move.w	#$140,$10(a0)
00019C1E 0828 0000 0022             		btst	#0,$22(a0)
00019C24 6600                       		bne.s	loc_1928E
00019C26 4468 0010                  		neg.w	$10(a0)
00019C2A 0C40 2C08                  		cmpi.w	#$2C08,d0
00019C2E 6E00                       		bgt.s	loc_1929E
00019C30 6000                       		bra.s	loc_19294
00019C32                            ; ===========================================================================
00019C32                            
00019C32                            loc_1928E:
00019C32 0C40 2D38                  		cmpi.w	#$2D38,d0
00019C36 6D00                       		blt.s	loc_1929E
00019C38                            
00019C38                            loc_19294:
00019C38 0868 0000 0022             		bchg	#0,$22(a0)
00019C3E 4228 003D                  		clr.b	$3D(a0)
00019C42                            
00019C42                            loc_1929E:
00019C42 0440 2C10                  		subi.w	#$2C10,d0
00019C46 0240 001F                  		andi.w	#$1F,d0
00019C4A 0440 001F                  		subi.w	#$1F,d0
00019C4E 6A00                       		bpl.s	loc_192AE
00019C50 4440                       		neg.w	d0
00019C52                            
00019C52                            loc_192AE:
00019C52 5340                       		subq.w	#1,d0
00019C54 6E00                       		bgt.s	loc_192E8
00019C56 4A28 003D                  		tst.b	$3D(a0)
00019C5A 6600                       		bne.s	loc_192E8
00019C5C 3238 D008                  		move.w	($FFFFD008).w,d1
00019C60 0441 2C00                  		subi.w	#$2C00,d1
00019C64 EA41                       		asr.w	#5,d1
00019C66 B228 0034                  		cmp.b	$34(a0),d1
00019C6A 6600                       		bne.s	loc_192E8
00019C6C 7000                       		moveq	#0,d0
00019C6E 1028 0034                  		move.b	$34(a0),d0
00019C72 EB40                       		asl.w	#5,d0
00019C74 0640 2C10                  		addi.w	#$2C10,d0
00019C78 3140 0030                  		move.w	d0,$30(a0)
00019C7C 6100 0000                  		bsr.w	Obj75_FindBlocks
00019C80 5428 0025                  		addq.b	#2,$25(a0)
00019C84 4268 0028                  		clr.w	$28(a0)
00019C88 4268 0010                  		clr.w	$10(a0)
00019C8C                            
00019C8C                            loc_192E8:
00019C8C 6000 FEF4                  		bra.w	loc_191DE
00019C90                            ; ===========================================================================
00019C90                            
00019C90                            loc_192EC:				; XREF: Obj75_ShipIndex
00019C90 7000                       		moveq	#0,d0
00019C92 1028 0028                  		move.b	$28(a0),d0
00019C96 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019C9A 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019C9E                            ; ===========================================================================
00019C9E 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019CA0 0000                       		dc.w loc_19348-off_192FA
00019CA2 0000                       		dc.w loc_1938E-off_192FA
00019CA4 0000                       		dc.w loc_193D0-off_192FA
00019CA6                            ; ===========================================================================
00019CA6                            
00019CA6                            loc_19302:				; XREF: off_192FA
00019CA6 317C 0180 0012             		move.w	#$180,$12(a0)
00019CAC 3028 0038                  		move.w	$38(a0),d0
00019CB0 0C40 0556                  		cmpi.w	#$556,d0
00019CB4 6500                       		bcs.s	loc_19344
00019CB6 317C 0556 0038             		move.w	#$556,$38(a0)
00019CBC 4268 003C                  		clr.w	$3C(a0)
00019CC0 70FF                       		moveq	#-1,d0
00019CC2 3028 0036                  		move.w	$36(a0),d0
00019CC6 6700                       		beq.s	loc_1933C
00019CC8 2240                       		movea.l	d0,a1
00019CCA 137C 00FF 0029             		move.b	#-1,$29(a1)
00019CD0 117C 00FF 0029             		move.b	#-1,$29(a0)
00019CD6 2348 0034                  		move.l	a0,$34(a1)
00019CDA 317C 0032 003C             		move.w	#$32,$3C(a0)
00019CE0                            
00019CE0                            loc_1933C:
00019CE0 4268 0012                  		clr.w	$12(a0)
00019CE4 5428 0028                  		addq.b	#2,$28(a0)
00019CE8                            
00019CE8                            loc_19344:
00019CE8 6000 FEAC                  		bra.w	loc_191F2
00019CEC                            ; ===========================================================================
00019CEC                            
00019CEC                            loc_19348:				; XREF: off_192FA
00019CEC 5368 003C                  		subq.w	#1,$3C(a0)
00019CF0 6A00                       		bpl.s	loc_19366
00019CF2 5428 0028                  		addq.b	#2,$28(a0)
00019CF6 317C F800 0012             		move.w	#-$800,$12(a0)
00019CFC 4A68 0036                  		tst.w	$36(a0)
00019D00 6600                       		bne.s	loc_19362
00019D02 E0E8 0012                  		asr	$12(a0)
00019D06                            
00019D06                            loc_19362:
00019D06 7000                       		moveq	#0,d0
00019D08 6000                       		bra.s	loc_1937C
00019D0A                            ; ===========================================================================
00019D0A                            
00019D0A                            loc_19366:
00019D0A 7000                       		moveq	#0,d0
00019D0C 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019D12 6E00                       		bgt.s	loc_1937C
00019D14 7002                       		moveq	#2,d0
00019D16 0828 0001 003D             		btst	#1,$3D(a0)
00019D1C 6700                       		beq.s	loc_1937C
00019D1E 4440                       		neg.w	d0
00019D20                            
00019D20                            loc_1937C:
00019D20 D068 0038                  		add.w	$38(a0),d0
00019D24 3140 000C                  		move.w	d0,$C(a0)
00019D28 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D2E 6000 FE76                  		bra.w	loc_19202
00019D32                            ; ===========================================================================
00019D32                            
00019D32                            loc_1938E:				; XREF: off_192FA
00019D32 303C 04DA                  		move.w	#$4DA,d0
00019D36 4A68 0036                  		tst.w	$36(a0)
00019D3A 6700                       		beq.s	loc_1939C
00019D3C 0440 0018                  		subi.w	#$18,d0
00019D40                            
00019D40                            loc_1939C:
00019D40 B068 0038                  		cmp.w	$38(a0),d0
00019D44 6D00                       		blt.s	loc_193BE
00019D46 317C 0008 003C             		move.w	#8,$3C(a0)
00019D4C 4A68 0036                  		tst.w	$36(a0)
00019D50 6700                       		beq.s	loc_193B4
00019D52 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019D58                            
00019D58                            loc_193B4:
00019D58 5428 0028                  		addq.b	#2,$28(a0)
00019D5C 4268 0012                  		clr.w	$12(a0)
00019D60 6000                       		bra.s	loc_193CC
00019D62                            ; ===========================================================================
00019D62                            
00019D62                            loc_193BE:
00019D62 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019D68 6C00                       		bge.s	loc_193CC
00019D6A 0668 000C 0012             		addi.w	#$C,$12(a0)
00019D70                            
00019D70                            loc_193CC:
00019D70 6000 FE24                  		bra.w	loc_191F2
00019D74                            ; ===========================================================================
00019D74                            
00019D74                            loc_193D0:				; XREF: off_192FA
00019D74 5368 003C                  		subq.w	#1,$3C(a0)
00019D78 6E00                       		bgt.s	loc_19406
00019D7A 6B00                       		bmi.s	loc_193EE
00019D7C 70FF                       		moveq	#-1,d0
00019D7E 3028 0036                  		move.w	$36(a0),d0
00019D82 6700                       		beq.s	loc_193E8
00019D84 2240                       		movea.l	d0,a1
00019D86 137C 000A 0029             		move.b	#$A,$29(a1)
00019D8C                            
00019D8C                            loc_193E8:
00019D8C 4268 0036                  		clr.w	$36(a0)
00019D90 6000                       		bra.s	loc_19406
00019D92                            ; ===========================================================================
00019D92                            
00019D92                            loc_193EE:
00019D92 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019D98 6600                       		bne.s	loc_19406
00019D9A 4228 0029                  		clr.b	$29(a0)
00019D9E 5528 0025                  		subq.b	#2,$25(a0)
00019DA2 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019DA8 6000                       		bra.s	loc_19446
00019DAA                            ; ===========================================================================
00019DAA                            
00019DAA                            loc_19406:
00019DAA 7001                       		moveq	#1,d0
00019DAC 4A68 0036                  		tst.w	$36(a0)
00019DB0 6700                       		beq.s	loc_19410
00019DB2 7002                       		moveq	#2,d0
00019DB4                            
00019DB4                            loc_19410:
00019DB4 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019DBA 6700                       		beq.s	loc_19424
00019DBC 6D00                       		blt.s	loc_1941C
00019DBE 4440                       		neg.w	d0
00019DC0                            
00019DC0                            loc_1941C:
00019DC0 4A68 0036                  		tst.w	$36(a0)
00019DC4 D168 0038                  		add.w	d0,$38(a0)
00019DC8                            
00019DC8                            loc_19424:
00019DC8 7000                       		moveq	#0,d0
00019DCA 4A68 0036                  		tst.w	$36(a0)
00019DCE 6700                       		beq.s	loc_19438
00019DD0 7002                       		moveq	#2,d0
00019DD2 0828 0000 003D             		btst	#0,$3D(a0)
00019DD8 6700                       		beq.s	loc_19438
00019DDA 4440                       		neg.w	d0
00019DDC                            
00019DDC                            loc_19438:
00019DDC D068 0038                  		add.w	$38(a0),d0
00019DE0 3140 000C                  		move.w	d0,$C(a0)
00019DE4 3168 0030 0008             		move.w	$30(a0),8(a0)
00019DEA                            
00019DEA                            loc_19446:
00019DEA 6000 FDBA                  		bra.w	loc_19202
00019DEE                            
00019DEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019DEE                            
00019DEE                            
00019DEE                            Obj75_FindBlocks:			; XREF: loc_192AE
00019DEE 4268 0036                  		clr.w	$36(a0)
00019DF2 43F8 D040                  		lea	($FFFFD040).w,a1
00019DF6 703E                       		moveq	#$3E,d0
00019DF8 7276                       		moveq	#$76,d1
00019DFA 1428 0034                  		move.b	$34(a0),d2
00019DFE                            
00019DFE                            Obj75_FindLoop:
00019DFE B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019E00 6600                       		bne.s	loc_1946A	; if not, branch
00019E02 B429 0028                  		cmp.b	$28(a1),d2
00019E06 6600                       		bne.s	loc_1946A
00019E08 3149 0036                  		move.w	a1,$36(a0)
00019E0C 6000                       		bra.s	locret_19472
00019E0E                            ; ===========================================================================
00019E0E                            
00019E0E                            loc_1946A:
00019E0E 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019E12 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019E16                            
00019E16                            locret_19472:
00019E16 4E75                       		rts	
00019E18                            ; End of function Obj75_FindBlocks
00019E18                            
00019E18                            ; ===========================================================================
00019E18                            
00019E18                            loc_19474:				; XREF: Obj75_ShipIndex
00019E18 5368 003C                  		subq.w	#1,$3C(a0)
00019E1C 6B00                       		bmi.s	loc_1947E
00019E1E 6000 E412                  		bra.w	BossDefeated
00019E22                            ; ===========================================================================
00019E22                            
00019E22                            loc_1947E:
00019E22 5428 0025                  		addq.b	#2,$25(a0)
00019E26 4268 0012                  		clr.w	$12(a0)
00019E2A 08E8 0000 0022             		bset	#0,$22(a0)
00019E30 08A8 0007 0022             		bclr	#7,$22(a0)
00019E36 4268 0010                  		clr.w	$10(a0)
00019E3A 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019E40 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019E44 6600                       		bne.s	loc_194A8
00019E46 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019E4C                            
00019E4C                            loc_194A8:
00019E4C 6000 FD58                  		bra.w	loc_19202
00019E50                            ; ===========================================================================
00019E50                            
00019E50                            loc_194AC:				; XREF: Obj75_ShipIndex
00019E50 5268 003C                  		addq.w	#1,$3C(a0)
00019E54 6700                       		beq.s	loc_194BC
00019E56 6A00                       		bpl.s	loc_194C2
00019E58 0668 0018 0012             		addi.w	#$18,$12(a0)
00019E5E 6000                       		bra.s	loc_194EE
00019E60                            ; ===========================================================================
00019E60                            
00019E60                            loc_194BC:
00019E60 4268 0012                  		clr.w	$12(a0)
00019E64 6000                       		bra.s	loc_194EE
00019E66                            ; ===========================================================================
00019E66                            
00019E66                            loc_194C2:
00019E66 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019E6C 6500                       		bcs.s	loc_194DA
00019E6E 6700                       		beq.s	loc_194E0
00019E70 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019E76 6500                       		bcs.s	loc_194EE
00019E78 5428 0025                  		addq.b	#2,$25(a0)
00019E7C 6000                       		bra.s	loc_194EE
00019E7E                            ; ===========================================================================
00019E7E                            
00019E7E                            loc_194DA:
00019E7E 5168 0012                  		subq.w	#8,$12(a0)
00019E82 6000                       		bra.s	loc_194EE
00019E84                            ; ===========================================================================
00019E84                            
00019E84                            loc_194E0:
00019E84 4268 0012                  		clr.w	$12(a0)
00019E88 303C 0085                  		move.w	#$85,d0
00019E8C 4EB9 0000 15CC             		jsr	(PlaySound).l	; play SYZ music
00019E92                            
00019E92                            loc_194EE:
00019E92 6000 FD02                  		bra.w	loc_191F2
00019E96                            ; ===========================================================================
00019E96                            
00019E96                            loc_194F2:				; XREF: Obj75_ShipIndex
00019E96 317C 0400 0010             		move.w	#$400,$10(a0)
00019E9C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019EA2 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019EA8 6400                       		bcc.s	loc_1950C
00019EAA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019EAE 6000                       		bra.s	loc_19512
00019EB0                            ; ===========================================================================
00019EB0                            
00019EB0                            loc_1950C:
00019EB0 4A28 0001                  		tst.b	1(a0)
00019EB4 6A00                       		bpl.s	Obj75_ShipDelete
00019EB6                            
00019EB6                            loc_19512:
00019EB6 6100 E3BC                  		bsr.w	BossMove
00019EBA 6000 FCC6                  		bra.w	loc_191DE
00019EBE                            ; ===========================================================================
00019EBE                            
00019EBE                            Obj75_ShipDelete:
00019EBE 4EF9 0000 DEE4             		jmp	DeleteObject
00019EC4                            ; ===========================================================================
00019EC4                            
00019EC4                            Obj75_FaceMain:				; XREF: Obj75_Index
00019EC4 7201                       		moveq	#1,d1
00019EC6 2268 0034                  		movea.l	$34(a0),a1
00019ECA 7000                       		moveq	#0,d0
00019ECC 1029 0025                  		move.b	$25(a1),d0
00019ED0 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019ED4 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019ED8 1141 001C                  		move.b	d1,$1C(a0)
00019EDC 1010                       		move.b	(a0),d0
00019EDE B011                       		cmp.b	(a1),d0
00019EE0 6600                       		bne.s	Obj75_FaceDelete
00019EE2 6000                       		bra.s	loc_195BE
00019EE4                            ; ===========================================================================
00019EE4                            
00019EE4                            Obj75_FaceDelete:
00019EE4 4EF9 0000 DEE4             		jmp	DeleteObject
00019EEA                            ; ===========================================================================
00019EEA 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019EEE 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019EF2 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019EF6                            ; ===========================================================================
00019EF6                            
00019EF6                            loc_19552:				; XREF: off_19546
00019EF6 720A                       		moveq	#$A,d1
00019EF8 4E75                       		rts	
00019EFA                            ; ===========================================================================
00019EFA                            
00019EFA                            loc_19556:				; XREF: off_19546
00019EFA 7206                       		moveq	#6,d1
00019EFC 4E75                       		rts	
00019EFE                            ; ===========================================================================
00019EFE                            
00019EFE                            loc_1955A:				; XREF: off_19546
00019EFE 7000                       		moveq	#0,d0
00019F00 1029 0028                  		move.b	$28(a1),d0
00019F04 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019F08 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019F0C                            ; ===========================================================================
00019F0C 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019F10 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019F14                            ; ===========================================================================
00019F14                            
00019F14                            loc_19570:				; XREF: off_19568
00019F14 6000                       		bra.s	loc_19574
00019F16                            ; ===========================================================================
00019F16                            
00019F16                            loc_19572:				; XREF: off_19568
00019F16 7206                       		moveq	#6,d1
00019F18                            
00019F18                            loc_19574:				; XREF: off_19546
00019F18 4A29 0020                  		tst.b	$20(a1)
00019F1C 6600                       		bne.s	loc_1957E
00019F1E 7205                       		moveq	#5,d1
00019F20 4E75                       		rts	
00019F22                            ; ===========================================================================
00019F22                            
00019F22                            loc_1957E:
00019F22 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019F28 6500                       		bcs.s	locret_19588
00019F2A 7204                       		moveq	#4,d1
00019F2C                            
00019F2C                            locret_19588:
00019F2C 4E75                       		rts	
00019F2E                            ; ===========================================================================
00019F2E                            
00019F2E                            Obj75_FlameMain:			; XREF: Obj75_Index
00019F2E 117C 0007 001C             		move.b	#7,$1C(a0)
00019F34 2268 0034                  		movea.l	$34(a0),a1
00019F38 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F3E 6600                       		bne.s	loc_195AA
00019F40 117C 000B 001C             		move.b	#$B,$1C(a0)
00019F46 4A28 0001                  		tst.b	1(a0)
00019F4A 6A00                       		bpl.s	Obj75_FlameDelete
00019F4C 6000                       		bra.s	loc_195B6
00019F4E                            ; ===========================================================================
00019F4E                            
00019F4E                            loc_195AA:
00019F4E 4A69 0010                  		tst.w	$10(a1)
00019F52 6700                       		beq.s	loc_195B6
00019F54 117C 0008 001C             		move.b	#8,$1C(a0)
00019F5A                            
00019F5A                            loc_195B6:
00019F5A 6000                       		bra.s	loc_195BE
00019F5C                            ; ===========================================================================
00019F5C                            
00019F5C                            Obj75_FlameDelete:
00019F5C 4EF9 0000 DEE4             		jmp	DeleteObject
00019F62                            ; ===========================================================================
00019F62                            
00019F62                            loc_195BE:
00019F62 43F9 0001 86B6             		lea	(Ani_Eggman).l,a1
00019F68 4EB9 0000 AF22             		jsr	AnimateSprite
00019F6E 2268 0034                  		movea.l	$34(a0),a1
00019F72 3169 0008 0008             		move.w	8(a1),8(a0)
00019F78 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F7E                            
00019F7E                            loc_195DA:
00019F7E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019F84 7003                       		moveq	#3,d0
00019F86 C028 0022                  		and.b	$22(a0),d0
00019F8A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019F90 8128 0001                  		or.b	d0,1(a0)
00019F94 4EF9 0000 DEA8             		jmp	DisplaySprite
00019F9A                            ; ===========================================================================
00019F9A                            
00019F9A                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019F9A 217C 0001 87E2 0004        		move.l	#Map_BossItems,4(a0)
00019FA2 317C 246C 0002             		move.w	#$246C,2(a0)
00019FA8 117C 0005 001A             		move.b	#5,$1A(a0)
00019FAE 2268 0034                  		movea.l	$34(a0),a1
00019FB2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019FB8 6600                       		bne.s	loc_1961C
00019FBA 4A28 0001                  		tst.b	1(a0)
00019FBE 6A00                       		bpl.s	Obj75_SpikeDelete
00019FC0                            
00019FC0                            loc_1961C:
00019FC0 3169 0008 0008             		move.w	8(a1),8(a0)
00019FC6 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019FCC 3028 003C                  		move.w	$3C(a0),d0
00019FD0 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019FD6 6600                       		bne.s	loc_19652
00019FD8 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019FDE 6700                       		beq.s	loc_1964C
00019FE0 4A29 0028                  		tst.b	$28(a1)
00019FE4 6600                       		bne.s	loc_19658
00019FE6 0C40 0094                  		cmpi.w	#$94,d0
00019FEA 6C00                       		bge.s	loc_19658
00019FEC 5E40                       		addq.w	#7,d0
00019FEE 6000                       		bra.s	loc_19658
00019FF0                            ; ===========================================================================
00019FF0                            
00019FF0                            loc_1964C:
00019FF0 4A69 003C                  		tst.w	$3C(a1)
00019FF4 6A00                       		bpl.s	loc_19658
00019FF6                            
00019FF6                            loc_19652:
00019FF6 4A40                       		tst.w	d0
00019FF8 6F00                       		ble.s	loc_19658
00019FFA 5B40                       		subq.w	#5,d0
00019FFC                            
00019FFC                            loc_19658:
00019FFC 3140 003C                  		move.w	d0,$3C(a0)
0001A000 E440                       		asr.w	#2,d0
0001A002 D168 000C                  		add.w	d0,$C(a0)
0001A006 117C 0008 0019             		move.b	#8,$19(a0)
0001A00C 117C 000C 0016             		move.b	#$C,$16(a0)
0001A012 4228 0020                  		clr.b	$20(a0)
0001A016 2268 0034                  		movea.l	$34(a0),a1
0001A01A 4A29 0020                  		tst.b	$20(a1)
0001A01E 6700                       		beq.s	loc_19688
0001A020 4A29 0029                  		tst.b	$29(a1)
0001A024 6600                       		bne.s	loc_19688
0001A026 117C 0084 0020             		move.b	#$84,$20(a0)
0001A02C                            
0001A02C                            loc_19688:
0001A02C 6000 FF50                  		bra.w	loc_195DA
0001A030                            ; ===========================================================================
0001A030                            
0001A030                            Obj75_SpikeDelete:
0001A030 4EF9 0000 DEE4             		jmp	DeleteObject
0001A036                            ; ===========================================================================
0001A036                            ; ---------------------------------------------------------------------------
0001A036                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A036                            ; ---------------------------------------------------------------------------
0001A036                            
0001A036                            Obj76:					; XREF: Obj_Index
0001A036 7000                       		moveq	#0,d0
0001A038 1028 0024                  		move.b	$24(a0),d0
0001A03C 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A040 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A044                            ; ===========================================================================
0001A044 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A046 0000                       		dc.w Obj76_Action-Obj76_Index
0001A048 0000                       		dc.w loc_19762-Obj76_Index
0001A04A                            ; ===========================================================================
0001A04A                            
0001A04A                            Obj76_Main:				; XREF: Obj76_Index
0001A04A 7800                       		moveq	#0,d4
0001A04C 3A3C 2C10                  		move.w	#$2C10,d5
0001A050 7C09                       		moveq	#9,d6
0001A052 43D0                       		lea	(a0),a1
0001A054 6000                       		bra.s	Obj76_MakeBlock
0001A056                            ; ===========================================================================
0001A056                            
0001A056                            Obj76_Loop:
0001A056 4EB9 0000 E32E             		jsr	SingleObjLoad
0001A05C 6600                       		bne.s	Obj76_ExitLoop
0001A05E                            
0001A05E                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A05E 12BC 0076                  		move.b	#$76,(a1)
0001A062 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A06A 337C 4000 0002             		move.w	#$4000,2(a1)
0001A070 137C 0004 0001             		move.b	#4,1(a1)
0001A076 137C 0010 0019             		move.b	#$10,$19(a1)
0001A07C 137C 0010 0016             		move.b	#$10,$16(a1)
0001A082 137C 0003 0018             		move.b	#3,$18(a1)
0001A088 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A08C 337C 0582 000C             		move.w	#$582,$C(a1)
0001A092 3344 0028                  		move.w	d4,$28(a1)
0001A096 0644 0101                  		addi.w	#$101,d4
0001A09A 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A09E 5429 0024                  		addq.b	#2,$24(a1)
0001A0A2 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A0A6                            
0001A0A6                            Obj76_ExitLoop:
0001A0A6 4E75                       		rts	
0001A0A8                            ; ===========================================================================
0001A0A8                            
0001A0A8                            Obj76_Action:				; XREF: Obj76_Index
0001A0A8 1028 0029                  		move.b	$29(a0),d0
0001A0AC B028 0028                  		cmp.b	$28(a0),d0
0001A0B0 6700                       		beq.s	Obj76_Solid
0001A0B2 4A00                       		tst.b	d0
0001A0B4 6B00                       		bmi.s	loc_19718
0001A0B6                            
0001A0B6                            loc_19712:
0001A0B6 6100 0000                  		bsr.w	Obj76_Break
0001A0BA 6000                       		bra.s	Obj76_Display
0001A0BC                            ; ===========================================================================
0001A0BC                            
0001A0BC                            loc_19718:
0001A0BC 2268 0034                  		movea.l	$34(a0),a1
0001A0C0 4A29 0021                  		tst.b	$21(a1)
0001A0C4 67F0                       		beq.s	loc_19712
0001A0C6 3169 0008 0008             		move.w	8(a1),8(a0)
0001A0CC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A0D2 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A0D8 B2C8                       		cmpa.w	a0,a1
0001A0DA 6500                       		bcs.s	Obj76_Display
0001A0DC 3029 0012                  		move.w	$12(a1),d0
0001A0E0 48C0                       		ext.l	d0
0001A0E2 E080                       		asr.l	#8,d0
0001A0E4 D168 000C                  		add.w	d0,$C(a0)
0001A0E8 6000                       		bra.s	Obj76_Display
0001A0EA                            ; ===========================================================================
0001A0EA                            
0001A0EA                            Obj76_Solid:				; XREF: Obj76_Action
0001A0EA 323C 001B                  		move.w	#$1B,d1
0001A0EE 343C 0010                  		move.w	#$10,d2
0001A0F2 363C 0011                  		move.w	#$11,d3
0001A0F6 3828 0008                  		move.w	8(a0),d4
0001A0FA 4EB9 0001 0278             		jsr	SolidObject
0001A100                            
0001A100                            Obj76_Display:				; XREF: Obj76_Action
0001A100 4EF9 0000 DEA8             		jmp	DisplaySprite
0001A106                            ; ===========================================================================
0001A106                            
0001A106                            loc_19762:				; XREF: Obj76_Index
0001A106 4A28 0001                  		tst.b	1(a0)
0001A10A 6A00                       		bpl.s	Obj76_Delete
0001A10C 4EB9 0000 DE10             		jsr	ObjectFall
0001A112 4EF9 0000 DEA8             		jmp	DisplaySprite
0001A118                            ; ===========================================================================
0001A118                            
0001A118                            Obj76_Delete:
0001A118 4EF9 0000 DEE4             		jmp	DeleteObject
0001A11E                            
0001A11E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A11E                            
0001A11E                            
0001A11E                            Obj76_Break:				; XREF: Obj76_Action
0001A11E 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A122 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A126 7801                       		moveq	#1,d4
0001A128 7203                       		moveq	#3,d1
0001A12A 7438                       		moveq	#$38,d2
0001A12C 5428 0024                  		addq.b	#2,$24(a0)
0001A130 117C 0008 0019             		move.b	#8,$19(a0)
0001A136 117C 0008 0016             		move.b	#8,$16(a0)
0001A13C 43D0                       		lea	(a0),a1
0001A13E 6000                       		bra.s	Obj76_MakeFrag
0001A140                            ; ===========================================================================
0001A140                            
0001A140                            Obj76_LoopFrag:
0001A140 4EB9 0000 E344             		jsr	SingleObjLoad2
0001A146 6600                       		bne.s	loc_197D4
0001A148                            
0001A148                            Obj76_MakeFrag:
0001A148 45D0                       		lea	(a0),a2
0001A14A 47D1                       		lea	(a1),a3
0001A14C 7603                       		moveq	#3,d3
0001A14E                            
0001A14E                            loc_197AA:
0001A14E 26DA                       		move.l	(a2)+,(a3)+
0001A150 26DA                       		move.l	(a2)+,(a3)+
0001A152 26DA                       		move.l	(a2)+,(a3)+
0001A154 26DA                       		move.l	(a2)+,(a3)+
0001A156 51CB FFF6                  		dbf	d3,loc_197AA
0001A15A                            
0001A15A 335C 0010                  		move.w	(a4)+,$10(a1)
0001A15E 335C 0012                  		move.w	(a4)+,$12(a1)
0001A162 361D                       		move.w	(a5)+,d3
0001A164 D769 0008                  		add.w	d3,8(a1)
0001A168 361D                       		move.w	(a5)+,d3
0001A16A D769 000C                  		add.w	d3,$C(a1)
0001A16E 1344 001A                  		move.b	d4,$1A(a1)
0001A172 5244                       		addq.w	#1,d4
0001A174 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A178                            
0001A178                            loc_197D4:
0001A178 303C 00CB                  		move.w	#$CB,d0
0001A17C 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A182                            ; End of function Obj76_Break
0001A182                            
0001A182                            ; ===========================================================================
0001A182 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A186 0180 FE00                  		dc.w $180, $FE00
0001A18A FF00 FF00                  		dc.w $FF00, $FF00
0001A18E 0100 FF00                  		dc.w $100, $FF00
0001A192 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A196 0010 0000                  		dc.w $10, 0
0001A19A 0000 0010                  		dc.w 0,	$10
0001A19E 0010 0010                  		dc.w $10, $10
0001A1A2                            ; ---------------------------------------------------------------------------
0001A1A2                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A1A2                            ; ---------------------------------------------------------------------------
0001A1A2                            Map_obj76:
0001A1A2                            	include "_maps\obj76.asm"
0001A1A2                            ; ---------------------------------------------------------------------------
0001A1A2                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A1A2                            ; ---------------------------------------------------------------------------
0001A1A2 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A1A6 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A1AA 0000                       		dc.w byte_19826-Map_obj76
0001A1AC 02                         byte_19808:	dc.b 2
0001A1AD F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A1B2 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A1B7 00                         		dc.b 0
0001A1B8 01                         byte_19814:	dc.b 1
0001A1B9 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A1BE 01                         byte_1981A:	dc.b 1
0001A1BF F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A1C4 01                         byte_19820:	dc.b 1
0001A1C5 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A1CA 01                         byte_19826:	dc.b 1
0001A1CB F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A1D0                            		even
0001A1D0                            		even
0001A1D0                            
0001A1D0                            ; ===========================================================================
0001A1D0                            
0001A1D0                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A1D0 4EF9 0000 DEE4             		jmp	DeleteObject
0001A1D6                            ; ===========================================================================
0001A1D6                            ; ---------------------------------------------------------------------------
0001A1D6                            ; Object 82 - Eggman (SBZ2)
0001A1D6                            ; ---------------------------------------------------------------------------
0001A1D6                            
0001A1D6                            Obj82:					; XREF: Obj_Index
0001A1D6 7000                       		moveq	#0,d0
0001A1D8 1028 0024                  		move.b	$24(a0),d0
0001A1DC 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A1E0 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A1E4                            ; ===========================================================================
0001A1E4 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A1E6 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A1E8 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A1EA                            
0001A1EA 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A1ED 0400 03                    		dc.b 4,	0, 3
0001A1F0                            ; ===========================================================================
0001A1F0                            
0001A1F0                            Obj82_Main:				; XREF: Obj82_Index
0001A1F0 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A1F4 317C 2160 0008             		move.w	#$2160,8(a0)
0001A1FA 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A200 117C 000F 0020             		move.b	#$F,$20(a0)
0001A206 117C 0010 0021             		move.b	#$10,$21(a0)
0001A20C 08A8 0000 0022             		bclr	#0,$22(a0)
0001A212 4228 0025                  		clr.b	$25(a0)
0001A216 115A 0024                  		move.b	(a2)+,$24(a0)
0001A21A 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A21E 115A 0018                  		move.b	(a2)+,$18(a0)
0001A222 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A22A 317C 0400 0002             		move.w	#$400,2(a0)
0001A230 117C 0004 0001             		move.b	#4,1(a0)
0001A236 08E8 0007 0001             		bset	#7,1(a0)
0001A23C 117C 0020 0019             		move.b	#$20,$19(a0)
0001A242 4EB9 0000 E344             		jsr	SingleObjLoad2
0001A248 6600                       		bne.s	Obj82_Eggman
0001A24A 2348 0034                  		move.l	a0,$34(a1)
0001A24E 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A252 337C 2130 0008             		move.w	#$2130,8(a1)
0001A258 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A25E 4228 0025                  		clr.b	$25(a0)
0001A262 135A 0024                  		move.b	(a2)+,$24(a1)
0001A266 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A26A 135A 0018                  		move.b	(a2)+,$18(a1)
0001A26E 237C 0000 C656 0004        		move.l	#Map_obj32,4(a1)
0001A276 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A27C 137C 0004 0001             		move.b	#4,1(a1)
0001A282 08E9 0007 0001             		bset	#7,1(a1)
0001A288 137C 0010 0019             		move.b	#$10,$19(a1)
0001A28E 137C 0000 001A             		move.b	#0,$1A(a1)
0001A294                            
0001A294                            Obj82_Eggman:				; XREF: Obj82_Index
0001A294 7000                       		moveq	#0,d0
0001A296 1028 0025                  		move.b	$25(a0),d0
0001A29A 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A29E 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A2A2 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A2A6 4EB9 0000 AF22             		jsr	AnimateSprite
0001A2AC 4EF9 0000 DEA8             		jmp	DisplaySprite
0001A2B2                            ; ===========================================================================
0001A2B2 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A2B4 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A2B6 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A2B8 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A2BA                            ; ===========================================================================
0001A2BA                            
0001A2BA                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A2BA 3028 0008                  		move.w	8(a0),d0
0001A2BE 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A2C2 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A2C6 6400                       		bcc.s	loc_19934	; if not, branch
0001A2C8 5428 0025                  		addq.b	#2,$25(a0)
0001A2CC 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A2D2 117C 0001 001C             		move.b	#1,$1C(a0)
0001A2D8                            
0001A2D8                            loc_19934:				; XREF: Obj82_EggIndex
0001A2D8 4EF9 0000 DE82             		jmp	SpeedToPos
0001A2DE                            ; ===========================================================================
0001A2DE                            
0001A2DE                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A2DE 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A2E2 6600                       		bne.s	loc_19954	; if time remains, branch
0001A2E4 5428 0025                  		addq.b	#2,$25(a0)
0001A2E8 117C 0002 001C             		move.b	#2,$1C(a0)
0001A2EE 5868 000C                  		addq.w	#4,$C(a0)
0001A2F2 317C 000F 003C             		move.w	#15,$3C(a0)
0001A2F8                            
0001A2F8                            loc_19954:
0001A2F8 60DE                       		bra.s	loc_19934
0001A2FA                            ; ===========================================================================
0001A2FA                            
0001A2FA                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A2FA 5368 003C                  		subq.w	#1,$3C(a0)
0001A2FE 6E00                       		bgt.s	loc_199D0
0001A300 6600                       		bne.s	loc_1996A
0001A302 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A308 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A30E                            
0001A30E                            loc_1996A:
0001A30E 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A314 6E00                       		bgt.s	loc_19976
0001A316 4268 0010                  		clr.w	$10(a0)
0001A31A                            
0001A31A                            loc_19976:
0001A31A 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A320 4A68 0012                  		tst.w	$12(a0)
0001A324 6B00                       		bmi.s	Obj82_FindBlocks
0001A326 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A32C 6500                       		bcs.s	Obj82_FindBlocks
0001A32E 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A334 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A33A 6500                       		bcs.s	Obj82_FindBlocks
0001A33C 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A342 4268 0012                  		clr.w	$12(a0)
0001A346                            
0001A346                            Obj82_FindBlocks:
0001A346 3028 0010                  		move.w	$10(a0),d0
0001A34A 8068 0012                  		or.w	$12(a0),d0
0001A34E 6600                       		bne.s	loc_199D0
0001A350 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A354 703E                       		moveq	#$3E,d0
0001A356 7240                       		moveq	#$40,d1
0001A358                            
0001A358                            Obj82_FindLoop:	
0001A358 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A35A 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A35E 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A362                            
0001A362 6600                       		bne.s	loc_199D0
0001A364 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A36A 5428 0025                  		addq.b	#2,$25(a0)
0001A36E 117C 0001 001C             		move.b	#1,$1C(a0)
0001A374                            
0001A374                            loc_199D0:
0001A374 6000 FF62                  		bra.w	loc_19934
0001A378                            ; ===========================================================================
0001A378                            
0001A378                            Obj82_Switch:				; XREF: Obj82_Index
0001A378 7000                       		moveq	#0,d0
0001A37A 1028 0025                  		move.b	$25(a0),d0
0001A37E 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A382 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A386                            ; ===========================================================================
0001A386 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A388 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A38A                            ; ===========================================================================
0001A38A                            
0001A38A                            loc_199E6:				; XREF: Obj82_SwIndex
0001A38A 2268 0034                  		movea.l	$34(a0),a1
0001A38E 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A394 6600                       		bne.s	Obj82_SwDisplay
0001A396 117C 0001 001A             		move.b	#1,$1A(a0)
0001A39C 5428 0025                  		addq.b	#2,$25(a0)
0001A3A0                            
0001A3A0                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A3A0 4EF9 0000 DEA8             		jmp	DisplaySprite
0001A3A6                            ; ===========================================================================
0001A3A6                            Ani_obj82:
0001A3A6                            	include "_anim\obj82.asm"
0001A3A6                            ; ---------------------------------------------------------------------------
0001A3A6                            ; Animation script - Eggman (SBZ2)
0001A3A6                            ; ---------------------------------------------------------------------------
0001A3A6 0000                       		dc.w byte_19A10-Ani_obj82
0001A3A8 0000                       		dc.w byte_19A14-Ani_obj82
0001A3AA 0000                       		dc.w byte_19A18-Ani_obj82
0001A3AC 0000                       		dc.w byte_19A20-Ani_obj82
0001A3AE 0000                       		dc.w byte_19A24-Ani_obj82
0001A3B0 0000                       		dc.w byte_19A2A-Ani_obj82
0001A3B2 0000                       		dc.w byte_19A30-Ani_obj82
0001A3B4 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A3B8 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A3BC 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A3C4 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A3C8 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A3CE 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A3D4 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A3D8                            		even
0001A3D8                            		even
0001A3D8                            
0001A3D8                            ; ---------------------------------------------------------------------------
0001A3D8                            ; Sprite mappings - Eggman (SBZ2)
0001A3D8                            ; ---------------------------------------------------------------------------
0001A3D8                            Map_obj82:
0001A3D8                            	include "_maps\obj82.asm"
0001A3D8                            ; ================================================================================
0001A3D8                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A3D8                            ; ================================================================================
0001A3D8                            
0001A3D8                            DATAA16Z12RYSAF:
0001A3D8 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A3DC 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A3E0 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A3E4 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A3E8 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A3EC 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A3EE 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A3EF FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A3F4 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A3F9 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A3FE 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A3FF E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A404 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A409 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A40E FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A413 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A414 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A419 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A41E 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A423 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A428 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A429 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A42E 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A433 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A438 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A439 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A43E 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A443 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A448 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A44D 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A44E E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A453 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A458 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A45D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A462 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A463 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A468 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A46D 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A472 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A477 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A47C F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A481 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A486 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A487 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A48C E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A491 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A496 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A49B 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A49C 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A4A1 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A4A6 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A4AB 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A4B0 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A4B5 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A4B6 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A4BB E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A4C0 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A4C5 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A4CA E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A4CF F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A4D4 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A4D9 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A4DE 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A4DF EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A4E4 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A4E9 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A4EE                            	even
0001A4EE                            	even
0001A4EE                            
0001A4EE                            ; ===========================================================================
0001A4EE                            ; ---------------------------------------------------------------------------
0001A4EE                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A4EE                            ; ---------------------------------------------------------------------------
0001A4EE                            
0001A4EE                            Obj83:					; XREF: Obj_Index
0001A4EE 7000                       		moveq	#0,d0
0001A4F0 1028 0024                  		move.b	$24(a0),d0
0001A4F4 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A4F8 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A4FC                            ; ===========================================================================
0001A4FC 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A4FE 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A500 0000                       		dc.w loc_19C36-Obj83_Index
0001A502 0000                       		dc.w loc_19C62-Obj83_Index
0001A504 0000                       		dc.w loc_19C72-Obj83_Index
0001A506 0000                       		dc.w loc_19C80-Obj83_Index
0001A508                            ; ===========================================================================
0001A508                            
0001A508                            Obj83_Main:				; XREF: Obj83_Index
0001A508 317C 2080 0008             		move.w	#$2080,8(a0)
0001A50E 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A514 117C 0080 0019             		move.b	#$80,$19(a0)
0001A51A 117C 0010 0016             		move.b	#$10,$16(a0)
0001A520 117C 0004 0001             		move.b	#4,1(a0)
0001A526 08E8 0007 0001             		bset	#7,1(a0)
0001A52C 7800                       		moveq	#0,d4
0001A52E 3A3C 2010                  		move.w	#$2010,d5
0001A532 7C07                       		moveq	#7,d6
0001A534 45E8 0030                  		lea	$30(a0),a2
0001A538                            
0001A538                            Obj83_MakeBlock:
0001A538 4EB9 0000 E32E             		jsr	SingleObjLoad
0001A53E 6600                       		bne.s	Obj83_ExitMake
0001A540 34C9                       		move.w	a1,(a2)+
0001A542 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A546 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A54E 337C 4518 0002             		move.w	#$4518,2(a1)
0001A554 137C 0004 0001             		move.b	#4,1(a1)
0001A55A 137C 0010 0019             		move.b	#$10,$19(a1)
0001A560 137C 0010 0016             		move.b	#$10,$16(a1)
0001A566 137C 0003 0018             		move.b	#3,$18(a1)
0001A56C 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A570 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A576 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A57A 137C 0008 0024             		move.b	#8,$24(a1)
0001A580 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A584                            
0001A584                            Obj83_ExitMake:
0001A584 5428 0024                  		addq.b	#2,$24(a0)
0001A588 4E75                       		rts	
0001A58A                            ; ===========================================================================
0001A58A                            
0001A58A                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A58A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A590 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A592 4228 001A                  		clr.b	$1A(a0)
0001A596 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A59A                            
0001A59A                            Obj83_Solid:
0001A59A 7000                       		moveq	#0,d0
0001A59C 1028 001A                  		move.b	$1A(a0),d0
0001A5A0 4400                       		neg.b	d0
0001A5A2 4880                       		ext.w	d0
0001A5A4 5040                       		addq.w	#8,d0
0001A5A6 E940                       		asl.w	#4,d0
0001A5A8 383C 2100                  		move.w	#$2100,d4
0001A5AC 9840                       		sub.w	d0,d4
0001A5AE 1140 0019                  		move.b	d0,$19(a0)
0001A5B2 3144 0008                  		move.w	d4,8(a0)
0001A5B6 720B                       		moveq	#$B,d1
0001A5B8 D240                       		add.w	d0,d1
0001A5BA 7410                       		moveq	#$10,d2
0001A5BC 7611                       		moveq	#$11,d3
0001A5BE 4EF9 0001 0278             		jmp	SolidObject
0001A5C4                            ; ===========================================================================
0001A5C4                            
0001A5C4                            loc_19C36:				; XREF: Obj83_Index
0001A5C4 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A5CA 6400                       		bcc.s	Obj83_Solid2
0001A5CC 70FF                       		moveq	#-1,d0
0001A5CE 1028 001A                  		move.b	$1A(a0),d0
0001A5D2 4880                       		ext.w	d0
0001A5D4 D040                       		add.w	d0,d0
0001A5D6 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A5DA 2240                       		movea.l	d0,a1
0001A5DC 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A5E2 5228 001A                  		addq.b	#1,$1A(a0)
0001A5E6 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A5EC 6700                       		beq.s	loc_19C62
0001A5EE                            
0001A5EE                            Obj83_Solid2:
0001A5EE 60AA                       		bra.s	Obj83_Solid
0001A5F0                            ; ===========================================================================
0001A5F0                            
0001A5F0                            loc_19C62:				; XREF: Obj83_Index
0001A5F0 08A8 0003 0022             		bclr	#3,$22(a0)
0001A5F6 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A5FC 6000 FBD2                  		bra.w	loc_1982C
0001A600                            ; ===========================================================================
0001A600                            
0001A600                            loc_19C72:				; XREF: Obj83_Index
0001A600 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A606 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A608 4EF9 0000 DEA8             		jmp	DisplaySprite
0001A60E                            ; ===========================================================================
0001A60E                            
0001A60E                            loc_19C80:				; XREF: Obj83_Index
0001A60E 4A28 0001                  		tst.b	1(a0)
0001A612 6A00 FBBC                  		bpl.w	loc_1982C
0001A616 4EB9 0000 DE10             		jsr	ObjectFall
0001A61C 4EF9 0000 DEA8             		jmp	DisplaySprite
0001A622                            ; ===========================================================================
0001A622                            
0001A622                            Obj83_Break:				; XREF: loc_19C72
0001A622 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A626 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A62A 7801                       		moveq	#1,d4
0001A62C 7203                       		moveq	#3,d1
0001A62E 7438                       		moveq	#$38,d2
0001A630 5428 0024                  		addq.b	#2,$24(a0)
0001A634 117C 0008 0019             		move.b	#8,$19(a0)
0001A63A 117C 0008 0016             		move.b	#8,$16(a0)
0001A640 43D0                       		lea	(a0),a1
0001A642 6000                       		bra.s	Obj83_MakeFrag
0001A644                            ; ===========================================================================
0001A644                            
0001A644                            Obj83_LoopFrag:
0001A644 4EB9 0000 E344             		jsr	SingleObjLoad2
0001A64A 6600                       		bne.s	Obj83_BreakSnd
0001A64C                            
0001A64C                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A64C 45D0                       		lea	(a0),a2
0001A64E 47D1                       		lea	(a1),a3
0001A650 7603                       		moveq	#3,d3
0001A652                            
0001A652                            loc_19CC4:
0001A652 26DA                       		move.l	(a2)+,(a3)+
0001A654 26DA                       		move.l	(a2)+,(a3)+
0001A656 26DA                       		move.l	(a2)+,(a3)+
0001A658 26DA                       		move.l	(a2)+,(a3)+
0001A65A 51CB FFF6                  		dbf	d3,loc_19CC4
0001A65E                            
0001A65E 335C 0012                  		move.w	(a4)+,$12(a1)
0001A662 361D                       		move.w	(a5)+,d3
0001A664 D769 0008                  		add.w	d3,8(a1)
0001A668 361D                       		move.w	(a5)+,d3
0001A66A D769 000C                  		add.w	d3,$C(a1)
0001A66E 1344 001A                  		move.b	d4,$1A(a1)
0001A672 5244                       		addq.w	#1,d4
0001A674 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A678                            
0001A678                            Obj83_BreakSnd:
0001A678 303C 00CB                  		move.w	#$CB,d0
0001A67C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A682 4EF9 0000 DEA8             		jmp	DisplaySprite
0001A688                            ; ===========================================================================
0001A688 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A68C 0120 00C0                  		dc.w $120, $C0
0001A690 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A694 0010 0000                  		dc.w $10, 0
0001A698 0000 0010                  		dc.w 0,	$10
0001A69C 0010 0010                  		dc.w $10, $10
0001A6A0                            ; ---------------------------------------------------------------------------
0001A6A0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A6A0                            ; ---------------------------------------------------------------------------
0001A6A0                            Map_obj83:
0001A6A0                            	include "_maps\obj83.asm"
0001A6A0                            ; ---------------------------------------------------------------------------
0001A6A0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A6A0                            ; ---------------------------------------------------------------------------
0001A6A0 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A6A4 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A6A8 0000                       		dc.w byte_19D46-Map_obj83
0001A6AA 01                         byte_19D1C:	dc.b 1
0001A6AB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A6B0 02                         byte_19D22:	dc.b 2
0001A6B1 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A6B6 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A6BB 00                         		dc.b 0
0001A6BC 02                         byte_19D2E:	dc.b 2
0001A6BD F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A6C2 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A6C7 00                         		dc.b 0
0001A6C8 02                         byte_19D3A:	dc.b 2
0001A6C9 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A6CE F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A6D3 00                         		dc.b 0
0001A6D4 02                         byte_19D46:	dc.b 2
0001A6D5 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A6DA F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A6E0 00                         		even
0001A6E0 00                         		even
0001A6E0                            
0001A6E0                            ; ===========================================================================
0001A6E0                            ; ---------------------------------------------------------------------------
0001A6E0                            ; Object 85 - Eggman (FZ)
0001A6E0                            ; ---------------------------------------------------------------------------
0001A6E0                            
0001A6E0                            Obj85_Delete:
0001A6E0 4EF9 0000 DEE4             		jmp	DeleteObject
0001A6E6                            ; ===========================================================================
0001A6E6                            
0001A6E6                            Obj85:					; XREF: Obj_Index
0001A6E6 7000                       		moveq	#0,d0
0001A6E8 1028 0024                  		move.b	$24(a0),d0
0001A6EC 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A6F0 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A6F4                            ; ===========================================================================
0001A6F4 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A6F6 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A6F8 0000                       		dc.w loc_1A38E-Obj85_Index
0001A6FA 0000                       		dc.w loc_1A346-Obj85_Index
0001A6FC 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A6FE 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A700 0000                       		dc.w loc_1A264-Obj85_Index
0001A702                            
0001A702 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A708 0001 A3D8                  		dc.l Map_obj82		; mappings pointer
0001A70C 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A712 0000 0000                  		dc.l Map_obj84
0001A716 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A71C 0000 0000                  		dc.l Map_FZBoss
0001A720 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A726 0001 A3D8                  		dc.l Map_obj82
0001A72A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A730 0001 871A                  		dc.l Map_Eggman
0001A734 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A73A 0001 871A                  		dc.l Map_Eggman
0001A73E                            
0001A73E 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A743 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A748 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A74D 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A752 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A757 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A75C                            ; ===========================================================================
0001A75C                            
0001A75C                            Obj85_Main:				; XREF: Obj85_Index
0001A75C 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A760 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A764 2248                       		movea.l	a0,a1
0001A766 7205                       		moveq	#5,d1
0001A768 6000                       		bra.s	Obj85_LoadBoss
0001A76A                            ; ===========================================================================
0001A76A                            
0001A76A                            Obj85_Loop:
0001A76A 4EB9 0000 E344             		jsr	SingleObjLoad2
0001A770 6600                       		bne.s	loc_19E20
0001A772                            
0001A772                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A772 12BC 0085                  		move.b	#$85,(a1)
0001A776 335A 0008                  		move.w	(a2)+,8(a1)
0001A77A 335A 000C                  		move.w	(a2)+,$C(a1)
0001A77E 335A 0002                  		move.w	(a2)+,2(a1)
0001A782 235A 0004                  		move.l	(a2)+,4(a1)
0001A786 135B 0024                  		move.b	(a3)+,$24(a1)
0001A78A 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A78E 135B 0018                  		move.b	(a3)+,$18(a1)
0001A792 135B 0017                  		move.b	(a3)+,$17(a1)
0001A796 135B 0016                  		move.b	(a3)+,$16(a1)
0001A79A 137C 0004 0001             		move.b	#4,1(a1)
0001A7A0 08E8 0007 0001             		bset	#7,1(a0)
0001A7A6 2348 0034                  		move.l	a0,$34(a1)
0001A7AA 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A7AE                            
0001A7AE                            loc_19E20:
0001A7AE 45E8 0036                  		lea	$36(a0),a2
0001A7B2 4EB9 0000 E32E             		jsr	SingleObjLoad
0001A7B8 6600                       		bne.s	loc_19E5A
0001A7BA 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A7BE 3489                       		move.w	a1,(a2)
0001A7C0 2348 0034                  		move.l	a0,$34(a1)
0001A7C4 45E8 0038                  		lea	$38(a0),a2
0001A7C8 7400                       		moveq	#0,d2
0001A7CA 7203                       		moveq	#3,d1
0001A7CC                            
0001A7CC                            loc_19E3E:
0001A7CC 4EB9 0000 E344             		jsr	SingleObjLoad2
0001A7D2 6600                       		bne.s	loc_19E5A
0001A7D4 34C9                       		move.w	a1,(a2)+
0001A7D6 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A7DA 2348 0034                  		move.l	a0,$34(a1)
0001A7DE 1342 0028                  		move.b	d2,$28(a1)
0001A7E2 5442                       		addq.w	#2,d2
0001A7E4 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A7E8                            
0001A7E8                            loc_19E5A:
0001A7E8 317C 0000 0034             		move.w	#0,$34(a0)
0001A7EE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A7F4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A7FA                            
0001A7FA                            Obj85_Eggman:				; XREF: Obj85_Index
0001A7FA 7000                       		moveq	#0,d0
0001A7FC 1028 0034                  		move.b	$34(a0),d0
0001A800 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A804 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A808 4EF9 0000 DEA8             		jmp	DisplaySprite
0001A80E                            ; ===========================================================================
0001A80E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A812 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A816 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A81A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A81E                            ; ===========================================================================
0001A81E                            
0001A81E                            loc_19E90:				; XREF: off_19E80
0001A81E 4AB8 F680                  		tst.l	($FFFFF680).w
0001A822 6600                       		bne.s	loc_19EA2
0001A824 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A82A 6500                       		bcs.s	loc_19EA2
0001A82C 5428 0034                  		addq.b	#2,$34(a0)
0001A830                            
0001A830                            loc_19EA2:
0001A830 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A834 4E75                       		rts	
0001A836                            ; ===========================================================================
0001A836                            
0001A836                            loc_19EA8:				; XREF: off_19E80
0001A836 4A68 0030                  		tst.w	$30(a0)
0001A83A 6A00                       		bpl.s	loc_19F10
0001A83C 4268 0030                  		clr.w	$30(a0)
0001A840 4EB9 0000 2D10             		jsr	(RandomNumber).l
0001A846 0240 000C                  		andi.w	#$C,d0
0001A84A 3200                       		move.w	d0,d1
0001A84C 5441                       		addq.w	#2,d1
0001A84E 4A80                       		tst.l	d0
0001A850 6A00                       		bpl.s	loc_19EC6
0001A852 C141                       		exg	d1,d0
0001A854                            
0001A854                            loc_19EC6:
0001A854 43FA 0000                  		lea	word_19FD6(pc),a1
0001A858 3031 0000                  		move.w	(a1,d0.w),d0
0001A85C 3231 1000                  		move.w	(a1,d1.w),d1
0001A860 3140 0030                  		move.w	d0,$30(a0)
0001A864 74FF                       		moveq	#-1,d2
0001A866 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A86A 2242                       		movea.l	d2,a1
0001A86C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A872 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A878 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A87C 2242                       		movea.l	d2,a1
0001A87E 137C 0001 0029             		move.b	#1,$29(a1)
0001A884 337C 0000 0030             		move.w	#0,$30(a1)
0001A88A 317C 0001 0032             		move.w	#1,$32(a0)
0001A890 4228 0035                  		clr.b	$35(a0)
0001A894 303C 00B7                  		move.w	#$B7,d0
0001A898 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A89E                            
0001A89E                            loc_19F10:
0001A89E 4A68 0032                  		tst.w	$32(a0)
0001A8A2 6B00 0000                  		bmi.w	loc_19FA6
0001A8A6 08A8 0000 0022             		bclr	#0,$22(a0)
0001A8AC 3038 D008                  		move.w	($FFFFD008).w,d0
0001A8B0 9068 0008                  		sub.w	8(a0),d0
0001A8B4 6500                       		bcs.s	loc_19F2E
0001A8B6 08E8 0000 0022             		bset	#0,$22(a0)
0001A8BC                            
0001A8BC                            loc_19F2E:
0001A8BC 323C 002B                  		move.w	#$2B,d1
0001A8C0 343C 0014                  		move.w	#$14,d2
0001A8C4 363C 0014                  		move.w	#$14,d3
0001A8C8 3828 0008                  		move.w	8(a0),d4
0001A8CC 4EB9 0001 0278             		jsr	SolidObject
0001A8D2 4A44                       		tst.w	d4
0001A8D4 6E00                       		bgt.s	loc_19F50
0001A8D6                            
0001A8D6                            loc_19F48:
0001A8D6 4A28 0035                  		tst.b	$35(a0)
0001A8DA 6600                       		bne.s	loc_19F88
0001A8DC 6000                       		bra.s	loc_19F96
0001A8DE                            ; ===========================================================================
0001A8DE                            
0001A8DE                            loc_19F50:
0001A8DE 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A8E2 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A8E8 66EC                       		bne.s	loc_19F48
0001A8EA 303C 0300                  		move.w	#$300,d0
0001A8EE 0828 0000 0022             		btst	#0,$22(a0)
0001A8F4 6600                       		bne.s	loc_19F6A
0001A8F6 4440                       		neg.w	d0
0001A8F8                            
0001A8F8                            loc_19F6A:
0001A8F8 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A8FC 4A28 0035                  		tst.b	$35(a0)
0001A900 6600                       		bne.s	loc_19F88
0001A902 5328 0021                  		subq.b	#1,$21(a0)
0001A906 117C 0064 0035             		move.b	#$64,$35(a0)
0001A90C 303C 00AC                  		move.w	#$AC,d0
0001A910 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A916                            
0001A916                            loc_19F88:
0001A916 5328 0035                  		subq.b	#1,$35(a0)
0001A91A 6700                       		beq.s	loc_19F96
0001A91C 117C 0003 001C             		move.b	#3,$1C(a0)
0001A922 6000                       		bra.s	loc_19F9C
0001A924                            ; ===========================================================================
0001A924                            
0001A924                            loc_19F96:
0001A924 117C 0001 001C             		move.b	#1,$1C(a0)
0001A92A                            
0001A92A                            loc_19F9C:
0001A92A 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A92E 4EF9 0000 AF22             		jmp	AnimateSprite
0001A934                            ; ===========================================================================
0001A934                            
0001A934                            loc_19FA6:
0001A934 4A28 0021                  		tst.b	$21(a0)
0001A938 6700                       		beq.s	loc_19FBC
0001A93A 5428 0034                  		addq.b	#2,$34(a0)
0001A93E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A944 4268 0032                  		clr.w	$32(a0)
0001A948 4E75                       		rts	
0001A94A                            ; ===========================================================================
0001A94A                            
0001A94A                            loc_19FBC:
0001A94A 117C 0006 0034             		move.b	#6,$34(a0)
0001A950 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A956 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A95C 117C 0014 0016             		move.b	#$14,$16(a0)
0001A962 4E75                       		rts	
0001A964                            ; ===========================================================================
0001A964 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A974                            ; ===========================================================================
0001A974                            
0001A974                            loc_19FE6:				; XREF: off_19E80
0001A974 70FF                       		moveq	#-1,d0
0001A976 3028 0036                  		move.w	$36(a0),d0
0001A97A 2240                       		movea.l	d0,a1
0001A97C 4A68 0030                  		tst.w	$30(a0)
0001A980 6A00                       		bpl.s	loc_1A000
0001A982 4268 0030                  		clr.w	$30(a0)
0001A986 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A98C 6100                       		bsr.s	loc_1A020
0001A98E                            
0001A98E                            loc_1A000:
0001A98E 700F                       		moveq	#$F,d0
0001A990 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A994 6600                       		bne.s	loc_1A00A
0001A996 6100                       		bsr.s	loc_1A020
0001A998                            
0001A998                            loc_1A00A:
0001A998 4A68 0032                  		tst.w	$32(a0)
0001A99C 6700                       		beq.s	locret_1A01E
0001A99E 5528 0034                  		subq.b	#2,$34(a0)
0001A9A2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A9A8 4268 0032                  		clr.w	$32(a0)
0001A9AC                            
0001A9AC                            locret_1A01E:
0001A9AC 4E75                       		rts	
0001A9AE                            ; ===========================================================================
0001A9AE                            
0001A9AE                            loc_1A020:
0001A9AE 303C 00B1                  		move.w	#$B1,d0
0001A9B2 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A9B8                            ; ===========================================================================
0001A9B8                            
0001A9B8                            loc_1A02A:				; XREF: off_19E80
0001A9B8 117C 0030 0017             		move.b	#$30,$17(a0)
0001A9BE 08E8 0000 0022             		bset	#0,$22(a0)
0001A9C4 4EB9 0000 DE82             		jsr	SpeedToPos
0001A9CA 117C 0006 001A             		move.b	#6,$1A(a0)
0001A9D0 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A9D6 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A9DC 6500                       		bcs.s	loc_1A070
0001A9DE 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A9E4 5428 0034                  		addq.b	#2,$34(a0)
0001A9E8 117C 0020 0017             		move.b	#$20,$17(a0)
0001A9EE 317C 0100 0010             		move.w	#$100,$10(a0)
0001A9F4 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A9FA 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A9FE                            
0001A9FE                            loc_1A070:
0001A9FE 6000 0000                  		bra.w	loc_1A166
0001AA02                            ; ===========================================================================
0001AA02                            
0001AA02                            loc_1A074:				; XREF: off_19E80
0001AA02 08E8 0000 0022             		bset	#0,$22(a0)
0001AA08 117C 0004 001C             		move.b	#4,$1C(a0)
0001AA0E 4EB9 0000 DE82             		jsr	SpeedToPos
0001AA14 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AA1A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AA20 6500                       		bcs.s	loc_1A09A
0001AA22 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AA28                            
0001AA28                            loc_1A09A:
0001AA28 317C 0400 0010             		move.w	#$400,$10(a0)
0001AA2E 3028 0008                  		move.w	8(a0),d0
0001AA32 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AA36 6A00                       		bpl.s	loc_1A0B4
0001AA38 317C 0500 0010             		move.w	#$500,$10(a0)
0001AA3E 6000 0000                  		bra.w	loc_1A0F2
0001AA42                            ; ===========================================================================
0001AA42                            
0001AA42                            loc_1A0B4:
0001AA42 0440 0070                  		subi.w	#$70,d0
0001AA46 6500                       		bcs.s	loc_1A0F2
0001AA48 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AA4E 5140                       		subq.w	#8,d0
0001AA50 6500                       		bcs.s	loc_1A0F2
0001AA52 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AA58 5140                       		subq.w	#8,d0
0001AA5A 6500                       		bcs.s	loc_1A0F2
0001AA5C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AA62 5140                       		subq.w	#8,d0
0001AA64 6500                       		bcs.s	loc_1A0F2
0001AA66 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AA6C 5140                       		subq.w	#8,d0
0001AA6E 6500                       		bcs.s	loc_1A0F2
0001AA70 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AA76 0440 0038                  		subi.w	#$38,d0
0001AA7A 6500                       		bcs.s	loc_1A0F2
0001AA7C 4268 0010                  		clr.w	$10(a0)
0001AA80                            
0001AA80                            loc_1A0F2:
0001AA80 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001AA86 6500                       		bcs.s	loc_1A110
0001AA88 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001AA8E 317C 0240 0010             		move.w	#$240,$10(a0)
0001AA94 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001AA9A 5428 0034                  		addq.b	#2,$34(a0)
0001AA9E                            
0001AA9E                            loc_1A110:
0001AA9E 6000                       		bra.s	loc_1A15C
0001AAA0                            ; ===========================================================================
0001AAA0                            
0001AAA0                            loc_1A112:				; XREF: off_19E80
0001AAA0 4EB9 0000 DE82             		jsr	SpeedToPos
0001AAA6 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001AAAC 6500                       		bcs.s	loc_1A124
0001AAAE 4268 0010                  		clr.w	$10(a0)
0001AAB2                            
0001AAB2                            loc_1A124:
0001AAB2 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AAB8 4A68 0012                  		tst.w	$12(a0)
0001AABC 6B00                       		bmi.s	loc_1A142
0001AABE 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AAC4 6500                       		bcs.s	loc_1A142
0001AAC6 317C 0592 000C             		move.w	#$592,$C(a0)
0001AACC 4268 0012                  		clr.w	$12(a0)
0001AAD0                            
0001AAD0                            loc_1A142:
0001AAD0 3028 0010                  		move.w	$10(a0),d0
0001AAD4 8068 0012                  		or.w	$12(a0),d0
0001AAD8 6600                       		bne.s	loc_1A15C
0001AADA 5428 0034                  		addq.b	#2,$34(a0)
0001AADE 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AAE4 117C 0001 0021             		move.b	#1,$21(a0)
0001AAEA                            
0001AAEA                            loc_1A15C:
0001AAEA 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001AAEE 4EB9 0000 AF22             		jsr	AnimateSprite
0001AAF4                            
0001AAF4                            loc_1A166:
0001AAF4 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AAFA 6C00                       		bge.s	loc_1A172
0001AAFC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AB00                            
0001AB00                            loc_1A172:
0001AB00 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AB06 6C00                       		bge.s	locret_1A190
0001AB08 323C 001B                  		move.w	#$1B,d1
0001AB0C 343C 0070                  		move.w	#$70,d2
0001AB10 363C 0071                  		move.w	#$71,d3
0001AB14 3828 0008                  		move.w	8(a0),d4
0001AB18 4EF9 0001 0278             		jmp	SolidObject
0001AB1E                            ; ===========================================================================
0001AB1E                            
0001AB1E                            locret_1A190:
0001AB1E 4E75                       		rts	
0001AB20                            ; ===========================================================================
0001AB20                            
0001AB20                            loc_1A192:				; XREF: off_19E80
0001AB20 217C 0001 871A 0004        		move.l	#Map_Eggman,4(a0)
0001AB28 317C 0400 0002             		move.w	#$400,2(a0)
0001AB2E 117C 0000 001C             		move.b	#0,$1C(a0)
0001AB34 08E8 0000 0022             		bset	#0,$22(a0)
0001AB3A 4EB9 0000 DE82             		jsr	SpeedToPos
0001AB40 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AB46 6400                       		bcc.s	loc_1A1D0
0001AB48 317C 0180 0010             		move.w	#$180,$10(a0)
0001AB4E 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AB54 117C 000F 0020             		move.b	#$F,$20(a0)
0001AB5A 5428 0034                  		addq.b	#2,$34(a0)
0001AB5E                            
0001AB5E                            loc_1A1D0:
0001AB5E 6000 FF8A                  		bra.w	loc_1A15C
0001AB62                            ; ===========================================================================
0001AB62                            
0001AB62                            loc_1A1D4:				; XREF: off_19E80
0001AB62 08E8 0000 0022             		bset	#0,$22(a0)
0001AB68 4EB9 0000 DE82             		jsr	SpeedToPos
0001AB6E 4A68 0030                  		tst.w	$30(a0)
0001AB72 6600                       		bne.s	loc_1A1FC
0001AB74 4A28 0020                  		tst.b	$20(a0)
0001AB78 6600                       		bne.s	loc_1A216
0001AB7A 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AB80 303C 00AC                  		move.w	#$AC,d0
0001AB84 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AB8A                            
0001AB8A                            loc_1A1FC:
0001AB8A 5368 0030                  		subq.w	#1,$30(a0)
0001AB8E 6600                       		bne.s	loc_1A216
0001AB90 4A28 0022                  		tst.b	$22(a0)
0001AB94 6A00                       		bpl.s	loc_1A210
0001AB96 317C 0060 0012             		move.w	#$60,$12(a0)
0001AB9C 6000                       		bra.s	loc_1A216
0001AB9E                            ; ===========================================================================
0001AB9E                            
0001AB9E                            loc_1A210:
0001AB9E 117C 000F 0020             		move.b	#$F,$20(a0)
0001ABA4                            
0001ABA4                            loc_1A216:
0001ABA4 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001ABAA 6D00                       		blt.s	loc_1A23A
0001ABAC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001ABB2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001ABB8 4278 D014                  		clr.w	($FFFFD014).w
0001ABBC 4A68 0012                  		tst.w	$12(a0)
0001ABC0 6A00                       		bpl.s	loc_1A248
0001ABC2 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001ABC8                            
0001ABC8                            loc_1A23A:
0001ABC8 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001ABCE 6D00                       		blt.s	loc_1A248
0001ABD0 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001ABD6                            
0001ABD6                            loc_1A248:
0001ABD6 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001ABDC 6500                       		bcs.s	loc_1A260
0001ABDE 4A28 0001                  		tst.b	1(a0)
0001ABE2 6B00                       		bmi.s	loc_1A260
0001ABE4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001ABEA 6000 FAF4                  		bra.w	Obj85_Delete
0001ABEE                            ; ===========================================================================
0001ABEE                            
0001ABEE                            loc_1A260:
0001ABEE 6000 FEFA                  		bra.w	loc_1A15C
0001ABF2                            ; ===========================================================================
0001ABF2                            
0001ABF2                            loc_1A264:				; XREF: Obj85_Index
0001ABF2 2268 0034                  		movea.l	$34(a0),a1
0001ABF6 1011                       		move.b	(a1),d0
0001ABF8 B010                       		cmp.b	(a0),d0
0001ABFA 6600 FAE4                  		bne.w	Obj85_Delete
0001ABFE 117C 0007 001C             		move.b	#7,$1C(a0)
0001AC04 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AC0A 6C00                       		bge.s	loc_1A280
0001AC0C 6000                       		bra.s	loc_1A2A6
0001AC0E                            ; ===========================================================================
0001AC0E                            
0001AC0E                            loc_1A280:
0001AC0E 4A69 0010                  		tst.w	$10(a1)
0001AC12 6700                       		beq.s	loc_1A28C
0001AC14 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AC1A                            
0001AC1A                            loc_1A28C:
0001AC1A 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001AC1E 4EB9 0000 AF22             		jsr	AnimateSprite
0001AC24                            
0001AC24                            loc_1A296:
0001AC24 2268 0034                  		movea.l	$34(a0),a1
0001AC28 3169 0008 0008             		move.w	8(a1),8(a0)
0001AC2E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AC34                            
0001AC34                            loc_1A2A6:
0001AC34 2268 0034                  		movea.l	$34(a0),a1
0001AC38 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AC3E 7003                       		moveq	#3,d0
0001AC40 C028 0022                  		and.b	$22(a0),d0
0001AC44 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AC4A 8128 0001                  		or.b	d0,1(a0)
0001AC4E 4EF9 0000 DEA8             		jmp	DisplaySprite
0001AC54                            ; ===========================================================================
0001AC54                            
0001AC54                            loc_1A2C6:				; XREF: Obj85_Index
0001AC54 2268 0034                  		movea.l	$34(a0),a1
0001AC58 1011                       		move.b	(a1),d0
0001AC5A B010                       		cmp.b	(a0),d0
0001AC5C 6600 FA82                  		bne.w	Obj85_Delete
0001AC60 0CA9 0001 871A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC68 6700                       		beq.s	loc_1A2E4
0001AC6A 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AC70 60C2                       		bra.s	loc_1A2A6
0001AC72                            ; ===========================================================================
0001AC72                            
0001AC72                            loc_1A2E4:
0001AC72 117C 0001 001C             		move.b	#1,$1C(a0)
0001AC78 4A29 0021                  		tst.b	$21(a1)
0001AC7C 6F00                       		ble.s	loc_1A312
0001AC7E 117C 0006 001C             		move.b	#6,$1C(a0)
0001AC84 217C 0001 871A 0004        		move.l	#Map_Eggman,4(a0)
0001AC8C 317C 0400 0002             		move.w	#$400,2(a0)
0001AC92 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001AC96 4EB9 0000 AF22             		jsr	AnimateSprite
0001AC9C 6000 FF86                  		bra.w	loc_1A296
0001ACA0                            ; ===========================================================================
0001ACA0                            
0001ACA0                            loc_1A312:
0001ACA0 4A28 0001                  		tst.b	1(a0)
0001ACA4 6A00 FA3A                  		bpl.w	Obj85_Delete
0001ACA8 6100 D588                  		bsr.w	BossDefeated
0001ACAC 117C 0002 0018             		move.b	#2,$18(a0)
0001ACB2 117C 0000 001C             		move.b	#0,$1C(a0)
0001ACB8 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001ACC0 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001ACC6 43FA 0000                  		lea	Ani_obj85(pc),a1
0001ACCA 4EB9 0000 AF22             		jsr	AnimateSprite
0001ACD0 6000 FF52                  		bra.w	loc_1A296
0001ACD4                            ; ===========================================================================
0001ACD4                            
0001ACD4                            loc_1A346:				; XREF: Obj85_Index
0001ACD4 08E8 0000 0022             		bset	#0,$22(a0)
0001ACDA 2268 0034                  		movea.l	$34(a0),a1
0001ACDE 0CA9 0001 871A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ACE6 6700                       		beq.s	loc_1A35E
0001ACE8 6000 FF4A                  		bra.w	loc_1A2A6
0001ACEC                            ; ===========================================================================
0001ACEC                            
0001ACEC                            loc_1A35E:
0001ACEC 3169 0008 0008             		move.w	8(a1),8(a0)
0001ACF2 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ACF8 4A28 001E                  		tst.b	$1E(a0)
0001ACFC 6600                       		bne.s	loc_1A376
0001ACFE 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AD04                            
0001AD04                            loc_1A376:
0001AD04 5328 001E                  		subq.b	#1,$1E(a0)
0001AD08 6E00                       		bgt.s	loc_1A38A
0001AD0A 5228 001A                  		addq.b	#1,$1A(a0)
0001AD0E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AD14 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AD18                            
0001AD18                            loc_1A38A:
0001AD18 6000 FF0A                  		bra.w	loc_1A296
0001AD1C                            ; ===========================================================================
0001AD1C                            
0001AD1C                            loc_1A38E:				; XREF: Obj85_Index
0001AD1C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AD22 3038 D008                  		move.w	($FFFFD008).w,d0
0001AD26 9068 0008                  		sub.w	8(a0),d0
0001AD2A 6500                       		bcs.s	loc_1A3A6
0001AD2C 4A28 0001                  		tst.b	1(a0)
0001AD30 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AD34                            
0001AD34                            loc_1A3A6:
0001AD34 4EF9 0000 DEA8             		jmp	DisplaySprite
0001AD3A                            ; ===========================================================================
0001AD3A                            
0001AD3A                            loc_1A3AC:				; XREF: Obj85_Index
0001AD3A 117C 0000 001A             		move.b	#0,$1A(a0)
0001AD40 08E8 0000 0022             		bset	#0,$22(a0)
0001AD46 2268 0034                  		movea.l	$34(a0),a1
0001AD4A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AD50 6600                       		bne.s	loc_1A3D0
0001AD52 0CA9 0001 871A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AD5A 6700 F984                  		beq.w	Obj85_Delete
0001AD5E                            
0001AD5E                            loc_1A3D0:
0001AD5E 6000 FED4                  		bra.w	loc_1A2A6
0001AD62                            ; ===========================================================================
0001AD62                            Ani_obj85:
0001AD62                            	include "_anim\obj85.asm"
0001AD62                            ; ---------------------------------------------------------------------------
0001AD62                            ; Animation script - Eggman (FZ)
0001AD62                            ; ---------------------------------------------------------------------------
0001AD62 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AD64 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AD68                            		even
0001AD68                            		even
0001AD68                            
0001AD68                            Map_Eggman2:
0001AD68                            	include "_maps\Eggman2.asm"
0001AD68                            ; ---------------------------------------------------------------------------
0001AD68                            ; Sprite mappings - Eggman (FZ)
0001AD68                            ; ---------------------------------------------------------------------------
0001AD68 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AD6A 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AD6C 06                         byte_1A3DE:	dc.b 6
0001AD6D E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AD72 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AD77 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AD7C FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AD81 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AD86 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AD8B 06                         byte_1A3FD:	dc.b 6
0001AD8C E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AD91 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AD96 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AD9B FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ADA0 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ADA5 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ADAA                            		even
0001ADAA                            		even
0001ADAA                            
0001ADAA                            Map_FZBoss:
0001ADAA                            	include "_maps\FZ boss.asm"
0001ADAA                            ; ---------------------------------------------------------------------------
0001ADAA                            ; Sprite mappings - boss (FZ)
0001ADAA                            ; ---------------------------------------------------------------------------
0001ADAA 0000                       		dc.w byte_1A422-Map_FZBoss
0001ADAC 0000                       		dc.w byte_1A42D-Map_FZBoss
0001ADAE 0000                       		dc.w byte_1A43D-Map_FZBoss
0001ADB0 02                         byte_1A422:	dc.b 2
0001ADB1 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001ADB6 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001ADBB 03                         byte_1A42D:	dc.b 3
0001ADBC 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001ADC1 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001ADC6 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001ADCB 02                         byte_1A43D:	dc.b 2
0001ADCC 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001ADD1 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001ADD6                            		even
0001ADD6                            		even
0001ADD6                            
0001ADD6                            ; ===========================================================================
0001ADD6                            
0001ADD6                            Obj84_Delete:
0001ADD6 4EF9 0000 DEE4             		jmp	DeleteObject
0001ADDC                            ; ===========================================================================
0001ADDC                            ; ---------------------------------------------------------------------------
0001ADDC                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001ADDC                            ; ---------------------------------------------------------------------------
0001ADDC                            
0001ADDC                            Obj84:					; XREF: Obj_Index
0001ADDC 7000                       		moveq	#0,d0
0001ADDE 1028 0024                  		move.b	$24(a0),d0
0001ADE2 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001ADE6 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001ADEA                            ; ===========================================================================
0001ADEA 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001ADEC 0000                       		dc.w loc_1A4CE-Obj84_Index
0001ADEE 0000                       		dc.w loc_1A57E-Obj84_Index
0001ADF0                            
0001ADF0 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001ADF4 2550 0620                  		dc.w $2550, $620
0001ADF8 2490 04C0                  		dc.w $2490, $4C0
0001ADFC 2510 04C0                  		dc.w $2510, $4C0
0001AE00                            ; ===========================================================================
0001AE00                            
0001AE00                            Obj84_Main:				; XREF: Obj84_Index
0001AE00 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AE04 7000                       		moveq	#0,d0
0001AE06 1028 0028                  		move.b	$28(a0),d0
0001AE0A D040                       		add.w	d0,d0
0001AE0C D2C0                       		adda.w	d0,a1
0001AE0E 117C 0004 0001             		move.b	#4,1(a0)
0001AE14 08E8 0007 0001             		bset	#7,1(a0)
0001AE1A 08E8 0004 0001             		bset	#4,1(a0)
0001AE20 317C 0300 0002             		move.w	#$300,2(a0)
0001AE26 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AE2E 3159 0008                  		move.w	(a1)+,8(a0)
0001AE32 3151 000C                  		move.w	(a1),$C(a0)
0001AE36 3159 0038                  		move.w	(a1)+,$38(a0)
0001AE3A 117C 0020 0016             		move.b	#$20,$16(a0)
0001AE40 117C 0060 0017             		move.b	#$60,$17(a0)
0001AE46 117C 0020 0019             		move.b	#$20,$19(a0)
0001AE4C 117C 0060 0016             		move.b	#$60,$16(a0)
0001AE52 117C 0003 0018             		move.b	#3,$18(a0)
0001AE58 5428 0024                  		addq.b	#2,$24(a0)
0001AE5C                            
0001AE5C                            loc_1A4CE:				; XREF: Obj84_Index
0001AE5C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AE62 6F00                       		ble.s	loc_1A4DC
0001AE64 08E8 0001 0001             		bset	#1,1(a0)
0001AE6A                            
0001AE6A                            loc_1A4DC:
0001AE6A 42A8 003C                  		clr.l	$3C(a0)
0001AE6E 4A28 0029                  		tst.b	$29(a0)
0001AE72 6700                       		beq.s	loc_1A4EA
0001AE74 5428 0024                  		addq.b	#2,$24(a0)
0001AE78                            
0001AE78                            loc_1A4EA:
0001AE78 2028 003C                  		move.l	$3C(a0),d0
0001AE7C 2228 0038                  		move.l	$38(a0),d1
0001AE80 D280                       		add.l	d0,d1
0001AE82 4841                       		swap	d1
0001AE84 3141 000C                  		move.w	d1,$C(a0)
0001AE88 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AE8E 6600                       		bne.s	loc_1A524
0001AE90 4A68 0030                  		tst.w	$30(a0)
0001AE94 6A00                       		bpl.s	loc_1A524
0001AE96 70F6                       		moveq	#-$A,d0
0001AE98 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AE9E 6F00                       		ble.s	loc_1A514
0001AEA0 700E                       		moveq	#$E,d0
0001AEA2                            
0001AEA2                            loc_1A514:
0001AEA2 D240                       		add.w	d0,d1
0001AEA4 2268 0034                  		movea.l	$34(a0),a1
0001AEA8 3341 000C                  		move.w	d1,$C(a1)
0001AEAC 3368 0008 0008             		move.w	8(a0),8(a1)
0001AEB2                            
0001AEB2                            loc_1A524:
0001AEB2 323C 002B                  		move.w	#$2B,d1
0001AEB6 343C 0060                  		move.w	#$60,d2
0001AEBA 363C 0061                  		move.w	#$61,d3
0001AEBE 3828 0008                  		move.w	8(a0),d4
0001AEC2 4EB9 0001 0278             		jsr	SolidObject
0001AEC8 7000                       		moveq	#0,d0
0001AECA 3228 003C                  		move.w	$3C(a0),d1
0001AECE 6A00                       		bpl.s	loc_1A550
0001AED0 4441                       		neg.w	d1
0001AED2 5141                       		subq.w	#8,d1
0001AED4 6500                       		bcs.s	loc_1A55C
0001AED6 5200                       		addq.b	#1,d0
0001AED8 E841                       		asr.w	#4,d1
0001AEDA D041                       		add.w	d1,d0
0001AEDC 6000                       		bra.s	loc_1A55C
0001AEDE                            ; ===========================================================================
0001AEDE                            
0001AEDE                            loc_1A550:
0001AEDE 0441 0027                  		subi.w	#$27,d1
0001AEE2 6500                       		bcs.s	loc_1A55C
0001AEE4 5200                       		addq.b	#1,d0
0001AEE6 E841                       		asr.w	#4,d1
0001AEE8 D041                       		add.w	d1,d0
0001AEEA                            
0001AEEA                            loc_1A55C:
0001AEEA 1140 001A                  		move.b	d0,$1A(a0)
0001AEEE 3038 D008                  		move.w	($FFFFD008).w,d0
0001AEF2 9068 0008                  		sub.w	8(a0),d0
0001AEF6 6B00                       		bmi.s	loc_1A578
0001AEF8 0440 0140                  		subi.w	#$140,d0
0001AEFC 6B00                       		bmi.s	loc_1A578
0001AEFE 4A28 0001                  		tst.b	1(a0)
0001AF02 6A00 FED2                  		bpl.w	Obj84_Delete
0001AF06                            
0001AF06                            loc_1A578:
0001AF06 4EF9 0000 DEA8             		jmp	DisplaySprite
0001AF0C                            ; ===========================================================================
0001AF0C                            
0001AF0C                            loc_1A57E:				; XREF: Obj84_Index
0001AF0C 7000                       		moveq	#0,d0
0001AF0E 1028 0028                  		move.b	$28(a0),d0
0001AF12 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AF16 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AF1A 6000 FF5C                  		bra.w	loc_1A4EA
0001AF1E                            ; ===========================================================================
0001AF1E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AF20 0000                       		dc.w loc_1A598-off_1A590
0001AF22 0000                       		dc.w loc_1A604-off_1A590
0001AF24 0000                       		dc.w loc_1A604-off_1A590
0001AF26                            ; ===========================================================================
0001AF26                            
0001AF26                            loc_1A598:				; XREF: off_1A590
0001AF26 4A28 0029                  		tst.b	$29(a0)
0001AF2A 6600                       		bne.s	loc_1A5D4
0001AF2C 2268 0034                  		movea.l	$34(a0),a1
0001AF30 4A29 0021                  		tst.b	$21(a1)
0001AF34 6600                       		bne.s	loc_1A5B4
0001AF36 6100 D2FA                  		bsr.w	BossDefeated
0001AF3A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AF42                            
0001AF42                            loc_1A5B4:
0001AF42 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AF4A 6400                       		bcc.s	locret_1A602
0001AF4C 42A8 003C                  		clr.l	$3C(a0)
0001AF50 2268 0034                  		movea.l	$34(a0),a1
0001AF54 5369 0032                  		subq.w	#1,$32(a1)
0001AF58 4269 0030                  		clr.w	$30(a1)
0001AF5C 5528 0024                  		subq.b	#2,$24(a0)
0001AF60 4E75                       		rts	
0001AF62                            ; ===========================================================================
0001AF62                            
0001AF62                            loc_1A5D4:
0001AF62 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AF68 6C00                       		bge.s	loc_1A5E4
0001AF6A 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AF72                            
0001AF72                            loc_1A5E4:
0001AF72 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AF7A 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AF80 6E00                       		bgt.s	locret_1A602
0001AF82 4268 003E                  		clr.w	$3E(a0)
0001AF86 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AF8C 4228 0029                  		clr.b	$29(a0)
0001AF90                            
0001AF90                            locret_1A602:
0001AF90 4E75                       		rts	
0001AF92                            ; ===========================================================================
0001AF92                            
0001AF92                            loc_1A604:				; XREF: off_1A590
0001AF92 08E8 0001 0001             		bset	#1,1(a0)
0001AF98 4A28 0029                  		tst.b	$29(a0)
0001AF9C 6600                       		bne.s	loc_1A646
0001AF9E 2268 0034                  		movea.l	$34(a0),a1
0001AFA2 4A29 0021                  		tst.b	$21(a1)
0001AFA6 6600                       		bne.s	loc_1A626
0001AFA8 6100 D288                  		bsr.w	BossDefeated
0001AFAC 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AFB4                            
0001AFB4                            loc_1A626:
0001AFB4 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AFBC 6400                       		bcc.s	locret_1A674
0001AFBE 42A8 003C                  		clr.l	$3C(a0)
0001AFC2 2268 0034                  		movea.l	$34(a0),a1
0001AFC6 5369 0032                  		subq.w	#1,$32(a1)
0001AFCA 4269 0030                  		clr.w	$30(a1)
0001AFCE 5528 0024                  		subq.b	#2,$24(a0)
0001AFD2 4E75                       		rts	
0001AFD4                            ; ===========================================================================
0001AFD4                            
0001AFD4                            loc_1A646:
0001AFD4 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AFDA 6D00                       		blt.s	loc_1A656
0001AFDC 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AFE4                            
0001AFE4                            loc_1A656:
0001AFE4 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AFEC 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AFF2 6D00                       		blt.s	locret_1A674
0001AFF4 4268 003E                  		clr.w	$3E(a0)
0001AFF8 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AFFE 4228 0029                  		clr.b	$29(a0)
0001B002                            
0001B002                            locret_1A674:
0001B002 4E75                       		rts	
0001B004                            ; ===========================================================================
0001B004                            ; ---------------------------------------------------------------------------
0001B004                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B004                            ; ---------------------------------------------------------------------------
0001B004                            Map_obj84:
0001B004                            	include "_maps\obj84.asm"
0001B004                            ; ---------------------------------------------------------------------------
0001B004                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B004                            ; ---------------------------------------------------------------------------
0001B004 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B008 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B00C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B010 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B014 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B018 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B01C 06                         byte_1A68E:	dc.b 6
0001B01D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B022 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B027 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B02C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B031 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B036 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B03B 08                         byte_1A6AD:	dc.b 8
0001B03C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B041 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B046 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B04B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B050 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B055 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B05A D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B05F D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B064 0A                         byte_1A6D6:	dc.b $A
0001B065 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B06A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B06F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B074 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B079 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B07E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B083 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B088 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B08D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B092 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B097 0C                         byte_1A709:	dc.b $C
0001B098 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B09D A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B0A2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B0A7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B0AC B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B0B1 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B0B6 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B0BB D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B0C0 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B0C5 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B0CA 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B0CF 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B0D4 0D                         byte_1A746:	dc.b $D
0001B0D5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B0DA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B0DF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B0E4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B0E9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B0EE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B0F3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B0F8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B0FD F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B102 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B107 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B10C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B111 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B116 0E                         byte_1A788:	dc.b $E
0001B117 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B11C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B121 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B126 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B12B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B130 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B135 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B13A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B13F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B144 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B149 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B14E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B153 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B158 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B15D 02                         byte_1A7CF:	dc.b 2
0001B15E F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B163 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B168                            		even
0001B168                            		even
0001B168                            
0001B168                            ; ===========================================================================
0001B168                            ; ---------------------------------------------------------------------------
0001B168                            ; Object 86 - energy balls (FZ)
0001B168                            ; ---------------------------------------------------------------------------
0001B168                            
0001B168                            Obj86:					; XREF: Obj_Index
0001B168 7000                       		moveq	#0,d0
0001B16A 1028 0024                  		move.b	$24(a0),d0
0001B16E 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B172 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B176                            ; ===========================================================================
0001B176 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B178 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B17A 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B17C 0000                       		dc.w loc_1A962-Obj86_Index
0001B17E 0000                       		dc.w loc_1A982-Obj86_Index
0001B180                            ; ===========================================================================
0001B180                            
0001B180                            Obj86_Main:				; XREF: Obj86_Index
0001B180 317C 2588 0008             		move.w	#$2588,8(a0)
0001B186 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B18C 317C 0300 0002             		move.w	#$300,2(a0)
0001B192 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B19A 117C 0000 001C             		move.b	#0,$1C(a0)
0001B1A0 117C 0003 0018             		move.b	#3,$18(a0)
0001B1A6 117C 0008 0017             		move.b	#8,$17(a0)
0001B1AC 117C 0008 0016             		move.b	#8,$16(a0)
0001B1B2 117C 0004 0001             		move.b	#4,1(a0)
0001B1B8 08E8 0007 0001             		bset	#7,1(a0)
0001B1BE 5428 0024                  		addq.b	#2,$24(a0)
0001B1C2                            
0001B1C2                            Obj86_Generator:			; XREF: Obj86_Index
0001B1C2 2268 0034                  		movea.l	$34(a0),a1
0001B1C6 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B1CC 6600                       		bne.s	loc_1A850
0001B1CE 10BC 003F                  		move.b	#$3F,(a0)
0001B1D2 117C 0000 0024             		move.b	#0,$24(a0)
0001B1D8 4EF9 0000 DEA8             		jmp	DisplaySprite
0001B1DE                            ; ===========================================================================
0001B1DE                            
0001B1DE                            loc_1A850:
0001B1DE 117C 0000 001C             		move.b	#0,$1C(a0)
0001B1E4 4A28 0029                  		tst.b	$29(a0)
0001B1E8 6700                       		beq.s	loc_1A86C
0001B1EA 5428 0024                  		addq.b	#2,$24(a0)
0001B1EE 117C 0001 001C             		move.b	#1,$1C(a0)
0001B1F4 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B1FA                            
0001B1FA                            loc_1A86C:
0001B1FA 323C 0013                  		move.w	#$13,d1
0001B1FE 343C 0008                  		move.w	#8,d2
0001B202 363C 0011                  		move.w	#$11,d3
0001B206 3828 0008                  		move.w	8(a0),d4
0001B20A 4EB9 0001 0278             		jsr	SolidObject
0001B210 3038 D008                  		move.w	($FFFFD008).w,d0
0001B214 9068 0008                  		sub.w	8(a0),d0
0001B218 6B00                       		bmi.s	loc_1A89A
0001B21A 0440 0140                  		subi.w	#$140,d0
0001B21E 6B00                       		bmi.s	loc_1A89A
0001B220 4A28 0001                  		tst.b	1(a0)
0001B224 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B228                            
0001B228                            loc_1A89A:
0001B228 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B22C 4EB9 0000 AF22             		jsr	AnimateSprite
0001B232 4EF9 0000 DEA8             		jmp	DisplaySprite
0001B238                            ; ===========================================================================
0001B238                            
0001B238                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B238 4A28 0029                  		tst.b	$29(a0)
0001B23C 6700 0000                  		beq.w	loc_1A954
0001B240 4228 0029                  		clr.b	$29(a0)
0001B244 D068 0030                  		add.w	$30(a0),d0
0001B248 0240 001E                  		andi.w	#$1E,d0
0001B24C D4C0                       		adda.w	d0,a2
0001B24E 5868 0030                  		addq.w	#4,$30(a0)
0001B252 4268 0032                  		clr.w	$32(a0)
0001B256 7403                       		moveq	#3,d2
0001B258                            
0001B258                            Obj86_Loop:
0001B258 4EB9 0000 E344             		jsr	SingleObjLoad2
0001B25E 6600 0000                  		bne.w	loc_1A954
0001B262 12BC 0086                  		move.b	#$86,(a1)
0001B266 3368 0008 0008             		move.w	8(a0),8(a1)
0001B26C 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B272 137C 0008 0024             		move.b	#8,$24(a1)
0001B278 337C 2300 0002             		move.w	#$2300,2(a1)
0001B27E 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B286 137C 000C 0016             		move.b	#$C,$16(a1)
0001B28C 137C 000C 0017             		move.b	#$C,$17(a1)
0001B292 137C 0000 0020             		move.b	#0,$20(a1)
0001B298 137C 0003 0018             		move.b	#3,$18(a1)
0001B29E 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B2A4 137C 0004 0001             		move.b	#4,1(a1)
0001B2AA 08E9 0007 0001             		bset	#7,1(a1)
0001B2B0 2348 0034                  		move.l	a0,$34(a1)
0001B2B4 4EB9 0000 2D10             		jsr	(RandomNumber).l
0001B2BA 3228 0032                  		move.w	$32(a0),d1
0001B2BE C3FC FFB1                  		muls.w	#-$4F,d1
0001B2C2 0641 2578                  		addi.w	#$2578,d1
0001B2C6 0240 001F                  		andi.w	#$1F,d0
0001B2CA 0440 0010                  		subi.w	#$10,d0
0001B2CE D041                       		add.w	d1,d0
0001B2D0 3340 0030                  		move.w	d0,$30(a1)
0001B2D4 5268 0032                  		addq.w	#1,$32(a0)
0001B2D8 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B2DE 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B2E2                            
0001B2E2                            loc_1A954:
0001B2E2 4A68 0032                  		tst.w	$32(a0)
0001B2E6 6600                       		bne.s	loc_1A95E
0001B2E8 5428 0024                  		addq.b	#2,$24(a0)
0001B2EC                            
0001B2EC                            loc_1A95E:
0001B2EC 6000 FF0C                  		bra.w	loc_1A86C
0001B2F0                            ; ===========================================================================
0001B2F0                            
0001B2F0                            loc_1A962:				; XREF: Obj86_Index
0001B2F0 117C 0002 001C             		move.b	#2,$1C(a0)
0001B2F6 4A68 0038                  		tst.w	$38(a0)
0001B2FA 6600                       		bne.s	loc_1A97E
0001B2FC 117C 0002 0024             		move.b	#2,$24(a0)
0001B302 2268 0034                  		movea.l	$34(a0),a1
0001B306 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B30C                            
0001B30C                            loc_1A97E:
0001B30C 6000 FEEC                  		bra.w	loc_1A86C
0001B310                            ; ===========================================================================
0001B310                            
0001B310                            loc_1A982:				; XREF: Obj86_Index
0001B310 7000                       		moveq	#0,d0
0001B312 1028 0025                  		move.b	$25(a0),d0
0001B316 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B31A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B31E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B322 4EB9 0000 AF22             		jsr	AnimateSprite
0001B328 4EF9 0000 DEA8             		jmp	DisplaySprite
0001B32E                            ; ===========================================================================
0001B32E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B330 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B332 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B334                            ; ===========================================================================
0001B334                            
0001B334                            loc_1A9A6:				; XREF: Obj86_Index2
0001B334 3028 0030                  		move.w	$30(a0),d0
0001B338 9068 0008                  		sub.w	8(a0),d0
0001B33C E940                       		asl.w	#4,d0
0001B33E 3140 0010                  		move.w	d0,$10(a0)
0001B342 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B348 5428 0025                  		addq.b	#2,$25(a0)
0001B34C 4E75                       		rts	
0001B34E                            ; ===========================================================================
0001B34E                            
0001B34E                            loc_1A9C0:				; XREF: Obj86_Index2
0001B34E 4A68 0010                  		tst.w	$10(a0)
0001B352 6700                       		beq.s	loc_1A9E6
0001B354 4EB9 0000 DE82             		jsr	SpeedToPos
0001B35A 3028 0008                  		move.w	8(a0),d0
0001B35E 9068 0030                  		sub.w	$30(a0),d0
0001B362 6400                       		bcc.s	loc_1A9E6
0001B364 4268 0010                  		clr.w	$10(a0)
0001B368 D168 0008                  		add.w	d0,8(a0)
0001B36C 2268 0034                  		movea.l	$34(a0),a1
0001B370 5369 0032                  		subq.w	#1,$32(a1)
0001B374                            
0001B374                            loc_1A9E6:
0001B374 117C 0000 001C             		move.b	#0,$1C(a0)
0001B37A 5368 0028                  		subq.w	#1,$28(a0)
0001B37E 6600                       		bne.s	locret_1AA1C
0001B380 5428 0025                  		addq.b	#2,$25(a0)
0001B384 117C 0001 001C             		move.b	#1,$1C(a0)
0001B38A 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B390 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B396 7000                       		moveq	#0,d0
0001B398 3038 D008                  		move.w	($FFFFD008).w,d0
0001B39C 9068 0008                  		sub.w	8(a0),d0
0001B3A0 3140 0010                  		move.w	d0,$10(a0)
0001B3A4 317C 0140 0012             		move.w	#$140,$12(a0)
0001B3AA                            
0001B3AA                            locret_1AA1C:
0001B3AA 4E75                       		rts	
0001B3AC                            ; ===========================================================================
0001B3AC                            
0001B3AC                            loc_1AA1E:				; XREF: Obj86_Index2
0001B3AC 4EB9 0000 DE82             		jsr	SpeedToPos
0001B3B2 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B3B8 6400                       		bcc.s	loc_1AA34
0001B3BA 5368 0028                  		subq.w	#1,$28(a0)
0001B3BE 6700                       		beq.s	loc_1AA34
0001B3C0 4E75                       		rts	
0001B3C2                            ; ===========================================================================
0001B3C2                            
0001B3C2                            loc_1AA34:
0001B3C2 2268 0034                  		movea.l	$34(a0),a1
0001B3C6 5369 0038                  		subq.w	#1,$38(a1)
0001B3CA 6000 FA0A                  		bra.w	Obj84_Delete
0001B3CE                            ; ===========================================================================
0001B3CE                            Ani_obj86:
0001B3CE                            	include "_anim\obj86.asm"
0001B3CE                            ; ---------------------------------------------------------------------------
0001B3CE                            ; Animation script - energy ball launcher (FZ)
0001B3CE                            ; ---------------------------------------------------------------------------
0001B3CE 0000                       		dc.w byte_1AA46-Ani_obj86
0001B3D0 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B3D2 0000                       		dc.w byte_1AA50-Ani_obj86
0001B3D4 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B3D8 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B3DE 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B3E4                            		even
0001B3E4                            		even
0001B3E4                            
0001B3E4                            ; ---------------------------------------------------------------------------
0001B3E4                            ; Sprite mappings - energy ball	launcher (FZ)
0001B3E4                            ; ---------------------------------------------------------------------------
0001B3E4                            Map_obj86:
0001B3E4                            	include "_maps\obj86.asm"
0001B3E4                            ; ---------------------------------------------------------------------------
0001B3E4                            ; Sprite mappings - energy ball	launcher (FZ)
0001B3E4                            ; ---------------------------------------------------------------------------
0001B3E4 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B3E8 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B3EC 01                         byte_1AA5E:	dc.b 1
0001B3ED F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B3F2 01                         byte_1AA64:	dc.b 1
0001B3F3 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B3F8 01                         byte_1AA6A:	dc.b 1
0001B3F9 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B3FE 01                         byte_1AA70:	dc.b 1
0001B3FF F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B404                            		even
0001B404                            		even
0001B404                            
0001B404                            Ani_obj86a:
0001B404                            	include "_anim\obj86a.asm"
0001B404                            ; ---------------------------------------------------------------------------
0001B404                            ; Animation script - energy balls (FZ)
0001B404                            ; ---------------------------------------------------------------------------
0001B404 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B406 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B408 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B417 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B426 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B42A 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B434                            		even
0001B434                            		even
0001B434                            
0001B434                            ; ---------------------------------------------------------------------------
0001B434                            ; Sprite mappings - energy balls (FZ)
0001B434                            ; ---------------------------------------------------------------------------
0001B434                            Map_obj86a:
0001B434                            	include "_maps\obj86a.asm"
0001B434                            ; ---------------------------------------------------------------------------
0001B434                            ; Sprite mappings - energy balls (FZ)
0001B434                            ; ---------------------------------------------------------------------------
0001B434 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B438 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B43C 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B440 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B444 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B448 0000                       		dc.w byte_1AB20-Map_obj86a
0001B44A 02                         byte_1AABC:	dc.b 2
0001B44B F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B450 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B455 02                         byte_1AAC7:	dc.b 2
0001B456 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B45B F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B460 02                         byte_1AAD2:	dc.b 2
0001B461 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B466 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B46B 02                         byte_1AADD:	dc.b 2
0001B46C F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B471 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B476 02                         byte_1AAE8:	dc.b 2
0001B477 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B47C 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B481 02                         byte_1AAF3:	dc.b 2
0001B482 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B487 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B48C 01                         byte_1AAFE:	dc.b 1
0001B48D F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B492 01                         byte_1AB04:	dc.b 1
0001B493 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B498 02                         byte_1AB0A:	dc.b 2
0001B499 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B49E 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B4A3 02                         byte_1AB15:	dc.b 2
0001B4A4 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B4A9 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B4AE 00                         byte_1AB20:	dc.b 0
0001B4B0 00                         		even
0001B4B0 00                         		even
0001B4B0                            
0001B4B0                            ; ===========================================================================
0001B4B0                            ; ---------------------------------------------------------------------------
0001B4B0                            ; Object 3E - prison capsule
0001B4B0                            ; ---------------------------------------------------------------------------
0001B4B0                            
0001B4B0                            Obj3E:					; XREF: Obj_Index
0001B4B0 7000                       		moveq	#0,d0
0001B4B2 1028 0024                  		move.b	$24(a0),d0
0001B4B6 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B4BA 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B4BE 3028 0008                  		move.w	8(a0),d0
0001B4C2 0240 FF80                  		andi.w	#$FF80,d0
0001B4C6 3238 F700                  		move.w	($FFFFF700).w,d1
0001B4CA 0441 0080                  		subi.w	#$80,d1
0001B4CE 0241 FF80                  		andi.w	#$FF80,d1
0001B4D2 9041                       		sub.w	d1,d0
0001B4D4 0C40 0280                  		cmpi.w	#$280,d0
0001B4D8 6200                       		bhi.s	Obj3E_Delete
0001B4DA 4EF9 0000 DEA8             		jmp	DisplaySprite
0001B4E0                            ; ===========================================================================
0001B4E0                            
0001B4E0                            Obj3E_Delete:
0001B4E0 4EF9 0000 DEE4             		jmp	DeleteObject
0001B4E6                            ; ===========================================================================
0001B4E6 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B4E8 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B4EA 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B4EC 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B4EE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B4F0 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B4F2 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B4F4 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B4F6                            
0001B4F6 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B4FA 040C 0501                  		dc.b 4,	$C, 5, 1
0001B4FE 0610 0403                  		dc.b 6,	$10, 4,	3
0001B502 0810 0305                  		dc.b 8,	$10, 3,	5
0001B506                            ; ===========================================================================
0001B506                            
0001B506                            Obj3E_Main:				; XREF: Obj3E_Index
0001B506 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B50E 317C 049D 0002             		move.w	#$49D,2(a0)
0001B514 117C 0004 0001             		move.b	#4,1(a0)
0001B51A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B520 7000                       		moveq	#0,d0
0001B522 1028 0028                  		move.b	$28(a0),d0
0001B526 E548                       		lsl.w	#2,d0
0001B528 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B52C 1159 0024                  		move.b	(a1)+,$24(a0)
0001B530 1159 0019                  		move.b	(a1)+,$19(a0)
0001B534 1159 0018                  		move.b	(a1)+,$18(a0)
0001B538 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B53C 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B540 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B542 117C 0006 0020             		move.b	#6,$20(a0)
0001B548 117C 0008 0021             		move.b	#8,$21(a0)
0001B54E                            
0001B54E                            Obj3E_Not02:
0001B54E 4E75                       		rts	
0001B550                            ; ===========================================================================
0001B550                            
0001B550                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B550 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B556 6700                       		beq.s	Obj3E_ChkOpened
0001B558 323C 002B                  		move.w	#$2B,d1
0001B55C 343C 0018                  		move.w	#$18,d2
0001B560 363C 0018                  		move.w	#$18,d3
0001B564 3828 0008                  		move.w	8(a0),d4
0001B568 4EF9 0001 0278             		jmp	SolidObject
0001B56E                            ; ===========================================================================
0001B56E                            
0001B56E                            Obj3E_ChkOpened:
0001B56E 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B572 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B574 4228 0025                  		clr.b	$25(a0)
0001B578 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B57E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B584                            
0001B584                            Obj3E_DoOpen:
0001B584 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B58A 4E75                       		rts	
0001B58C                            ; ===========================================================================
0001B58C                            
0001B58C                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B58C 323C 0017                  		move.w	#$17,d1
0001B590 343C 0008                  		move.w	#8,d2
0001B594 363C 0008                  		move.w	#8,d3
0001B598 3828 0008                  		move.w	8(a0),d4
0001B59C 4EB9 0001 0278             		jsr	SolidObject
0001B5A2 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B5A8 4EB9 0000 AF22             		jsr	AnimateSprite
0001B5AE 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B5B4 4A28 0025                  		tst.b	$25(a0)
0001B5B8 6700                       		beq.s	locret_1AC60
0001B5BA 5068 000C                  		addq.w	#8,$C(a0)
0001B5BE 117C 000A 0024             		move.b	#$A,$24(a0)
0001B5C4 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B5CA 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B5CE 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B5D2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B5D8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B5DE 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B5E0 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B5E6 6000                       		bra.s	Obj3E_ContinueCode
0001B5E8                            
0001B5E8                            Obj3E_MoveLeft:
0001B5E8 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B5EE                            
0001B5EE                            Obj3E_ContinueCode:
0001B5EE 4228 0025                  		clr.b	$25(a0)
0001B5F2 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B5F8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B5FE                            
0001B5FE                            locret_1AC60:
0001B5FE 4E75                       		rts	
0001B600                            ; ===========================================================================
0001B600                            
0001B600                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B600 7007                       		moveq	#7,d0
0001B602 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B606 6600                       		bne.s	loc_1ACA0
0001B608 4EB9 0000 E32E             		jsr	SingleObjLoad
0001B60E 6600                       		bne.s	loc_1ACA0
0001B610 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B614 3368 0008 0008             		move.w	8(a0),8(a1)
0001B61A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B620 4EB9 0000 2D10             		jsr	(RandomNumber).l
0001B626 7200                       		moveq	#0,d1
0001B628 1200                       		move.b	d0,d1
0001B62A E409                       		lsr.b	#2,d1
0001B62C 0441 0020                  		subi.w	#$20,d1
0001B630 D369 0008                  		add.w	d1,8(a1)
0001B634 E048                       		lsr.w	#8,d0
0001B636 E608                       		lsr.b	#3,d0
0001B638 D169 000C                  		add.w	d0,$C(a1)
0001B63C                            
0001B63C                            loc_1ACA0:
0001B63C 5368 001E                  		subq.w	#1,$1E(a0)
0001B640 6700                       		beq.s	Obj3E_MakeAnimal
0001B642 4E75                       		rts	
0001B644                            ; ===========================================================================
0001B644                            
0001B644                            Obj3E_MakeAnimal:
0001B644 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B64A 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B650 117C 0006 001A             		move.b	#6,$1A(a0)
0001B656 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B65C 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B662 7C07                       		moveq	#7,d6
0001B664 3A3C 009A                  		move.w	#$9A,d5
0001B668 78E4                       		moveq	#-$1C,d4
0001B66A                            
0001B66A                            Obj3E_Loop:
0001B66A 4EB9 0000 E32E             		jsr	SingleObjLoad
0001B670 6600                       		bne.s	locret_1ACF8
0001B672 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B676 3368 0008 0008             		move.w	8(a0),8(a1)
0001B67C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B682 D969 0008                  		add.w	d4,8(a1)
0001B686 5E44                       		addq.w	#7,d4
0001B688 3345 0036                  		move.w	d5,$36(a1)
0001B68C 5145                       		subq.w	#8,d5
0001B68E 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B692                            
0001B692                            locret_1ACF8:
0001B692 4E75                       		rts	
0001B694                            ; ===========================================================================
0001B694                            
0001B694                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B694 7007                       		moveq	#7,d0
0001B696 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B69A 6600                       		bne.s	loc_1AD38
0001B69C 4EB9 0000 E32E             		jsr	SingleObjLoad
0001B6A2 6600                       		bne.s	loc_1AD38
0001B6A4 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B6A8 3368 0008 0008             		move.w	8(a0),8(a1)
0001B6AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B6B4 4EB9 0000 2D10             		jsr	(RandomNumber).l
0001B6BA 0240 001F                  		andi.w	#$1F,d0
0001B6BE 5D40                       		subq.w	#6,d0
0001B6C0 4A41                       		tst.w	d1
0001B6C2 6A00                       		bpl.s	loc_1AD2E
0001B6C4 4440                       		neg.w	d0
0001B6C6                            
0001B6C6                            loc_1AD2E:
0001B6C6 D169 0008                  		add.w	d0,8(a1)
0001B6CA 337C 000C 0036             		move.w	#$C,$36(a1)
0001B6D0                            
0001B6D0                            loc_1AD38:
0001B6D0 5368 001E                  		subq.w	#1,$1E(a0)
0001B6D4 6600                       		bne.s	locret_1AD48
0001B6D6 5428 0024                  		addq.b	#2,$24(a0)
0001B6DA 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B6E0                            
0001B6E0                            locret_1AD48:
0001B6E0 4E75                       		rts	
0001B6E2                            ; ===========================================================================
0001B6E2                            
0001B6E2                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B6E2 703E                       		moveq	#$3E,d0
0001B6E4 7228                       		moveq	#$28,d1
0001B6E6 7440                       		moveq	#$40,d2
0001B6E8 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B6EC                            
0001B6EC                            Obj3E_FindObj28:
0001B6EC B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B6EE 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B6F0 D2C2                       		adda.w	d2,a1		; next object RAM
0001B6F2 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B6F6                            
0001B6F6 4EB9 0000 F534             		jsr	GotThroughAct
0001B6FC 4EF9 0000 DEE4             		jmp	DeleteObject
0001B702                            ; ===========================================================================
0001B702                            
0001B702                            Obj3E_Obj28Found:
0001B702 4E75                       		rts	
0001B704                            ; ===========================================================================
0001B704                            Ani_obj3E:
0001B704                            	include "_anim\obj3E.asm"
0001B704                            ; ---------------------------------------------------------------------------
0001B704                            ; Animation script - prison capsule
0001B704                            ; ---------------------------------------------------------------------------
0001B704 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B706 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B708 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B70C                            		even
0001B70C                            		even
0001B70C                            
0001B70C                            ; ---------------------------------------------------------------------------
0001B70C                            ; Sprite mappings - prison capsule
0001B70C                            ; ---------------------------------------------------------------------------
0001B70C                            Map_obj3E:
0001B70C                            	include "_maps\obj3E.asm"
0001B70C                            ; ---------------------------------------------------------------------------
0001B70C                            ; Sprite mappings - prison capsule
0001B70C                            ; ---------------------------------------------------------------------------
0001B70C 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B710 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B714 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B718 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B71A 07                         byte_1AD82:	dc.b 7
0001B71B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B720 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B725 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B72A F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B72F F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B734 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B739 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B73E 01                         byte_1ADA6:	dc.b 1
0001B73F F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B744 06                         byte_1ADAC:	dc.b 6
0001B745 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B74A 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B74F 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B754 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B759 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B75E 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B763 01                         byte_1ADCB:	dc.b 1
0001B764 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B769 02                         byte_1ADD1:	dc.b 2
0001B76A E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B76F 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B774 01                         byte_1ADDC:	dc.b 1
0001B775 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B77A 00                         byte_1ADE2:	dc.b 0
0001B77C 00                         		even
0001B77C 00                         		even
0001B77C                            
0001B77C                            ; ---------------------------------------------------------------------------
0001B77C                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B77C                            ; ---------------------------------------------------------------------------
0001B77C                            
0001B77C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B77C                            
0001B77C                            
0001B77C                            TouchResponse:				; XREF: Obj01
0001B77C 4E71                       		nop	
0001B77E 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B782 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B786 5142                       		subq.w	#8,d2
0001B788 7A00                       		moveq	#0,d5
0001B78A 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B78E 5705                       		subq.b	#3,d5
0001B790 9645                       		sub.w	d5,d3
0001B792 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B798 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B79A 0643 000C                  		addi.w	#$C,d3
0001B79E 7A0A                       		moveq	#$A,d5
0001B7A0                            
0001B7A0                            Touch_NoDuck:
0001B7A0 383C 0010                  		move.w	#$10,d4
0001B7A4 DA45                       		add.w	d5,d5
0001B7A6 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B7AA 3C3C 005F                  		move.w	#$5F,d6
0001B7AE                            
0001B7AE                            Touch_Loop:
0001B7AE 4A29 0001                  		tst.b	1(a1)
0001B7B2 6A00                       		bpl.s	Touch_NextObj
0001B7B4 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B7B8 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B7BA                            
0001B7BA                            Touch_NextObj:
0001B7BA 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B7BE 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B7C2                            
0001B7C2 7000                       		moveq	#0,d0
0001B7C4 4E75                       		rts	
0001B7C6                            ; ===========================================================================
0001B7C6 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B7C8 0C14                       		dc.b   $C, $14
0001B7CA 140C                       		dc.b  $14,  $C
0001B7CC 0410                       		dc.b	4, $10
0001B7CE 0C12                       		dc.b   $C, $12
0001B7D0 1010                       		dc.b  $10, $10
0001B7D2 0606                       		dc.b	6,   6
0001B7D4 180C                       		dc.b  $18,  $C
0001B7D6 0C10                       		dc.b   $C, $10
0001B7D8 100C                       		dc.b  $10,  $C
0001B7DA 0808                       		dc.b	8,   8
0001B7DC 1410                       		dc.b  $14, $10
0001B7DE 1408                       		dc.b  $14,   8
0001B7E0 0E0E                       		dc.b   $E,  $E
0001B7E2 1818                       		dc.b  $18, $18
0001B7E4 2810                       		dc.b  $28, $10
0001B7E6 1018                       		dc.b  $10, $18
0001B7E8 0810                       		dc.b	8, $10
0001B7EA 2070                       		dc.b  $20, $70
0001B7EC 4020                       		dc.b  $40, $20
0001B7EE 8020                       		dc.b  $80, $20
0001B7F0 2020                       		dc.b  $20, $20
0001B7F2 0808                       		dc.b	8,   8
0001B7F4 0404                       		dc.b	4,   4
0001B7F6 2008                       		dc.b  $20,   8
0001B7F8 0C0C                       		dc.b   $C,  $C
0001B7FA 0804                       		dc.b	8,   4
0001B7FC 1804                       		dc.b  $18,   4
0001B7FE 2804                       		dc.b  $28,   4
0001B800 0408                       		dc.b	4,   8
0001B802 0418                       		dc.b	4, $18
0001B804 0428                       		dc.b	4, $28
0001B806 0420                       		dc.b	4, $20
0001B808 1818                       		dc.b  $18, $18
0001B80A 0C18                       		dc.b   $C, $18
0001B80C 4808                       		dc.b  $48,   8
0001B80E                            ; ===========================================================================
0001B80E                            
0001B80E                            Touch_Height:				; XREF: TouchResponse
0001B80E 0240 003F                  		andi.w	#$3F,d0
0001B812 D040                       		add.w	d0,d0
0001B814 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B818 7200                       		moveq	#0,d1
0001B81A 121A                       		move.b	(a2)+,d1
0001B81C 3029 0008                  		move.w	8(a1),d0
0001B820 9041                       		sub.w	d1,d0
0001B822 9042                       		sub.w	d2,d0
0001B824 6400                       		bcc.s	loc_1AE98
0001B826 D241                       		add.w	d1,d1
0001B828 D041                       		add.w	d1,d0
0001B82A 6500                       		bcs.s	Touch_Width
0001B82C 6000 FF8C                  		bra.w	Touch_NextObj
0001B830                            ; ===========================================================================
0001B830                            
0001B830                            loc_1AE98:
0001B830 B044                       		cmp.w	d4,d0
0001B832 6200 FF86                  		bhi.w	Touch_NextObj
0001B836                            
0001B836                            Touch_Width:
0001B836 7200                       		moveq	#0,d1
0001B838 121A                       		move.b	(a2)+,d1
0001B83A 3029 000C                  		move.w	$C(a1),d0
0001B83E 9041                       		sub.w	d1,d0
0001B840 9043                       		sub.w	d3,d0
0001B842 6400                       		bcc.s	loc_1AEB6
0001B844 D241                       		add.w	d1,d1
0001B846 D240                       		add.w	d0,d1
0001B848 6500                       		bcs.s	Touch_ChkValue
0001B84A 6000 FF6E                  		bra.w	Touch_NextObj
0001B84E                            ; ===========================================================================
0001B84E                            
0001B84E                            loc_1AEB6:
0001B84E B045                       		cmp.w	d5,d0
0001B850 6200 FF68                  		bhi.w	Touch_NextObj
0001B854                            
0001B854                            Touch_ChkValue:
0001B854 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B858 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B85C 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B860 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B864 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B868 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B86A 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B86E                            
0001B86E                            ; touch	response is $40-$7F
0001B86E                            
0001B86E 1029 0020                  		move.b	$20(a1),d0
0001B872 0200 003F                  		andi.b	#$3F,d0
0001B876 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B87A 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B87C 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B882 6400 0000                  		bcc.w	locret_1AEF2
0001B886 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B88A                            
0001B88A                            locret_1AEF2:
0001B88A 4E75                       		rts	
0001B88C                            ; ===========================================================================
0001B88C                            
0001B88C                            Touch_Monitor:
0001B88C 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B890 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B892 3028 000C                  		move.w	$C(a0),d0
0001B896 0440 0010                  		subi.w	#$10,d0
0001B89A B069 000C                  		cmp.w	$C(a1),d0
0001B89E 6500                       		bcs.s	locret_1AF2E
0001B8A0 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B8A4 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B8AA 4A29 0025                  		tst.b	$25(a1)
0001B8AE 6600                       		bne.s	locret_1AF2E
0001B8B0 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B8B4 4E75                       		rts	
0001B8B6                            ; ===========================================================================
0001B8B6                            
0001B8B6                            loc_1AF1E:
0001B8B6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B8BC 6600                       		bne.s	locret_1AF2E
0001B8BE 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B8C2 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B8C6                            
0001B8C6                            locret_1AF2E:
0001B8C6 4E75                       		rts	
0001B8C8                            ; ===========================================================================
0001B8C8                            
0001B8C8                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B8C8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B8CC 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B8CE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B8D4 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B8D8                            
0001B8D8                            loc_1AF40:
0001B8D8 4A29 0021                  		tst.b	$21(a1)
0001B8DC 6700                       		beq.s	Touch_KillEnemy
0001B8DE 4468 0010                  		neg.w	$10(a0)
0001B8E2 4468 0012                  		neg.w	$12(a0)
0001B8E6 E0E8 0010                  		asr	$10(a0)
0001B8EA E0E8 0012                  		asr	$12(a0)
0001B8EE 137C 0000 0020             		move.b	#0,$20(a1)
0001B8F4 5329 0021                  		subq.b	#1,$21(a1)
0001B8F8 6600                       		bne.s	locret_1AF68
0001B8FA 08E9 0007 0022             		bset	#7,$22(a1)
0001B900                            
0001B900                            locret_1AF68:
0001B900 4E75                       		rts	
0001B902                            ; ===========================================================================
0001B902                            
0001B902                            Touch_KillEnemy:
0001B902 08E9 0007 0022             		bset	#7,$22(a1)
0001B908 7000                       		moveq	#0,d0
0001B90A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B90E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B912 0C40 0006                  		cmpi.w	#6,d0
0001B916 6500                       		bcs.s	loc_1AF82
0001B918 7006                       		moveq	#6,d0
0001B91A                            
0001B91A                            loc_1AF82:
0001B91A 3340 003E                  		move.w	d0,$3E(a1)
0001B91E 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B922 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B928 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B92A 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B92E 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B934                            
0001B934                            loc_1AF9C:
0001B934 6100 0000                  		bsr.w	AddPoints
0001B938 7400                       		moveq	#0,d2	; GMZ
0001B93A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B93C 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B93E                            
0001B93E                            TouchKE_Explode:
0001B93E 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B942 137C 0000 0024             		move.b	#0,$24(a1)
0001B948 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B94C                            
0001B94C                            TouchKE_NextExplosion:
0001B94C 5802                       		addq.b	#4,d2
0001B94E 4EB9 0000 E32E             		jsr	SingleObjLoad
0001B954 6600                       		bne.s	TouchKE_NoExplosion
0001B956 336A 0008 0008             		move.w	8(a2),8(a1)
0001B95C 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B962 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B966                            
0001B966                            TouchKE_NoExplosion:
0001B966 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B968 4A68 0012                  		tst.w	$12(a0)
0001B96C 6B00                       		bmi.s	loc_1AFC2
0001B96E 3028 000C                  		move.w	$C(a0),d0
0001B972 B069 000C                  		cmp.w	$C(a1),d0
0001B976 6400                       		bcc.s	loc_1AFCA
0001B978 4468 0012                  		neg.w	$12(a0)
0001B97C 4E75                       		rts	
0001B97E                            ; ===========================================================================
0001B97E                            
0001B97E                            loc_1AFC2:
0001B97E 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B984 4E75                       		rts	
0001B986                            ; ===========================================================================
0001B986                            
0001B986                            loc_1AFCA:
0001B986 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B98C 4E75                       		rts	
0001B98E                            ; ===========================================================================
0001B98E 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B996                            ; ===========================================================================
0001B996                            
0001B996                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B996 08E9 0007 0022             		bset	#7,$22(a1)
0001B99C                            
0001B99C                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B99C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B9A0 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B9A2                            
0001B9A2                            loc_1AFE6:				; XREF: Touch_Hurt
0001B9A2 70FF                       		moveq	#-1,d0
0001B9A4 4E75                       		rts	
0001B9A6                            ; ===========================================================================
0001B9A6                            
0001B9A6                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B9A6 4E71                       		nop	
0001B9A8 4A68 0030                  		tst.w	$30(a0)
0001B9AC 66F4                       		bne.s	loc_1AFE6
0001B9AE 2449                       		movea.l	a1,a2
0001B9B0                            
0001B9B0                            ; End of function TouchResponse
0001B9B0                            ; continue straight to HurtSonic
0001B9B0                            
0001B9B0                            ; ---------------------------------------------------------------------------
0001B9B0                            ; Hurting Sonic	subroutine
0001B9B0                            ; ---------------------------------------------------------------------------
0001B9B0                            
0001B9B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9B0                            
0001B9B0                            
0001B9B0                            HurtSonic:
0001B9B0 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B9B4 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B9B6 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B9BA 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B9BE 4EB9 0000 E32E             		jsr	SingleObjLoad
0001B9C4 6600                       		bne.s	Hurt_Shield
0001B9C6 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B9CA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B9D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B9D6                            
0001B9D6                            Hurt_Shield:
0001B9D6 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B9DC 117C 0004 0024             		move.b	#4,$24(a0)
0001B9E2 6100 870A                  		bsr.w	Sonic_ResetOnFloor
0001B9E6 08E8 0001 0022             		bset	#1,$22(a0)
0001B9EC 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B9F2 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B9F8 0828 0006 0022             		btst	#6,$22(a0)
0001B9FE 6700                       		beq.s	Hurt_Reverse
0001BA00 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BA06 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BA0C                            
0001BA0C                            Hurt_Reverse:
0001BA0C 3028 0008                  		move.w	8(a0),d0
0001BA10 B06A 0008                  		cmp.w	8(a2),d0
0001BA14 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BA16 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BA1A                            
0001BA1A                            Hurt_ChkSpikes:
0001BA1A 317C 0000 0014             		move.w	#0,$14(a0)
0001BA20 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BA26 317C 0078 0030             		move.w	#$78,$30(a0)
0001BA2C 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BA30 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BA34 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BA36 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BA3A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BA3C 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BA40                            
0001BA40                            Hurt_Sound:
0001BA40 4EB9 0000 15D2             		jsr	(PlaySound_Special).l
0001BA46 70FF                       		moveq	#-1,d0
0001BA48 4E75                       		rts	
0001BA4A                            ; ===========================================================================
0001BA4A                            
0001BA4A                            Hurt_NoRings:
0001BA4A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BA4E 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BA52                            ; End of function HurtSonic
0001BA52                            
0001BA52                            ; ---------------------------------------------------------------------------
0001BA52                            ; Subroutine to	kill Sonic
0001BA52                            ; ---------------------------------------------------------------------------
0001BA52                            
0001BA52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA52                            
0001BA52                            
0001BA52                            KillSonic:
0001BA52 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BA56 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BA58 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BA5E 117C 0006 0024             		move.b	#6,$24(a0)
0001BA64 6100 8688                  		bsr.w	Sonic_ResetOnFloor
0001BA68 08E8 0001 0022             		bset	#1,$22(a0)
0001BA6E 317C F900 0012             		move.w	#-$700,$12(a0)
0001BA74 317C 0000 0010             		move.w	#0,$10(a0)
0001BA7A 317C 0000 0014             		move.w	#0,$14(a0)
0001BA80 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BA86 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BA8C 08E8 0007 0002             		bset	#7,2(a0)
0001BA92 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BA96 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BA9A 6600                       		bne.s	Kill_Sound
0001BA9C 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BAA0                            
0001BAA0                            Kill_Sound:
0001BAA0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l
0001BAA6                            
0001BAA6                            Kill_NoDeath:
0001BAA6 70FF                       		moveq	#-1,d0
0001BAA8 4E75                       		rts	
0001BAAA                            ; End of function KillSonic
0001BAAA                            
0001BAAA                            
0001BAAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAAA                            
0001BAAA                            
0001BAAA                            Touch_Special:				; XREF: Touch_ChkValue
0001BAAA 1229 0020                  		move.b	$20(a1),d1
0001BAAE 0201 003F                  		andi.b	#$3F,d1
0001BAB2 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BAB6 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BAB8 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BABC 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BABE 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BAC2 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BAC4 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BAC8 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BACA 4E75                       		rts	
0001BACC                            ; ===========================================================================
0001BACC                            
0001BACC                            Touch_CatKiller:			; XREF: Touch_Special
0001BACC 6000 FEC8                  		bra.w	loc_1AFDA
0001BAD0                            ; ===========================================================================
0001BAD0                            
0001BAD0                            Touch_Yadrin:				; XREF: Touch_Special
0001BAD0 9A40                       		sub.w	d0,d5
0001BAD2 0C45 0008                  		cmpi.w	#8,d5
0001BAD6 6400                       		bcc.s	loc_1B144
0001BAD8 3029 0008                  		move.w	8(a1),d0
0001BADC 5940                       		subq.w	#4,d0
0001BADE 0829 0000 0022             		btst	#0,$22(a1)
0001BAE4 6700                       		beq.s	loc_1B130
0001BAE6 0440 0010                  		subi.w	#$10,d0
0001BAEA                            
0001BAEA                            loc_1B130:
0001BAEA 9042                       		sub.w	d2,d0
0001BAEC 6400                       		bcc.s	loc_1B13C
0001BAEE 0640 0018                  		addi.w	#$18,d0
0001BAF2 6500                       		bcs.s	loc_1B140
0001BAF4 6000                       		bra.s	loc_1B144
0001BAF6                            ; ===========================================================================
0001BAF6                            
0001BAF6                            loc_1B13C:
0001BAF6 B044                       		cmp.w	d4,d0
0001BAF8 6200                       		bhi.s	loc_1B144
0001BAFA                            
0001BAFA                            loc_1B140:
0001BAFA 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BAFE                            ; ===========================================================================
0001BAFE                            
0001BAFE                            loc_1B144:
0001BAFE 6000 FDC8                  		bra.w	Touch_Enemy
0001BB02                            ; ===========================================================================
0001BB02                            
0001BB02                            Touch_D7orE1:				; XREF: Touch_Special
0001BB02 5229 0021                  		addq.b	#1,$21(a1)
0001BB06 4E75                       		rts	
0001BB08                            ; End of function Touch_Special
0001BB08                            
0001BB08                            ; ---------------------------------------------------------------------------
0001BB08                            ; Subroutine to	show the special stage layout
0001BB08                            ; ---------------------------------------------------------------------------
0001BB08                            
0001BB08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB08                            
0001BB08                            
0001BB08                            SS_ShowLayout:				; XREF: SpecialStage
0001BB08 6100 0000                  		bsr.w	SS_AniWallsRings
0001BB0C 6100 0000                  		bsr.w	SS_AniItems
0001BB10 3F05                       		move.w	d5,-(sp)
0001BB12 43F8 8000                  		lea	($FFFF8000).w,a1
0001BB16 1038 F780                  		move.b	($FFFFF780).w,d0
0001BB1A 0200 00FC                  		andi.b	#$FC,d0
0001BB1E 4EB9 0000 2D36             		jsr	(CalcSine).l
0001BB24 3800                       		move.w	d0,d4
0001BB26 3A01                       		move.w	d1,d5
0001BB28 C9FC 0018                  		muls.w	#$18,d4
0001BB2C CBFC 0018                  		muls.w	#$18,d5
0001BB30 7400                       		moveq	#0,d2
0001BB32 3438 F700                  		move.w	($FFFFF700).w,d2
0001BB36 84FC 0018                  		divu.w	#$18,d2
0001BB3A 4842                       		swap	d2
0001BB3C 4442                       		neg.w	d2
0001BB3E 0642 FF4C                  		addi.w	#-$B4,d2
0001BB42 7600                       		moveq	#0,d3
0001BB44 3638 F704                  		move.w	($FFFFF704).w,d3
0001BB48 86FC 0018                  		divu.w	#$18,d3
0001BB4C 4843                       		swap	d3
0001BB4E 4443                       		neg.w	d3
0001BB50 0643 FF4C                  		addi.w	#-$B4,d3
0001BB54 3E3C 000F                  		move.w	#$F,d7
0001BB58                            
0001BB58                            loc_1B19E:
0001BB58 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BB5C 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BB60 4440                       		neg.w	d0
0001BB62 C3C2                       		muls.w	d2,d1
0001BB64 C1C3                       		muls.w	d3,d0
0001BB66 2C00                       		move.l	d0,d6
0001BB68 DC81                       		add.l	d1,d6
0001BB6A 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BB6E C1C2                       		muls.w	d2,d0
0001BB70 C3C3                       		muls.w	d3,d1
0001BB72 D280                       		add.l	d0,d1
0001BB74 2406                       		move.l	d6,d2
0001BB76 3C3C 000F                  		move.w	#$F,d6
0001BB7A                            
0001BB7A                            loc_1B1C0:
0001BB7A 2002                       		move.l	d2,d0
0001BB7C E080                       		asr.l	#8,d0
0001BB7E 32C0                       		move.w	d0,(a1)+
0001BB80 2001                       		move.l	d1,d0
0001BB82 E080                       		asr.l	#8,d0
0001BB84 32C0                       		move.w	d0,(a1)+
0001BB86 D485                       		add.l	d5,d2
0001BB88 D284                       		add.l	d4,d1
0001BB8A 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BB8E                            
0001BB8E 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BB92 0643 0018                  		addi.w	#$18,d3
0001BB96 51CF FFC0                  		dbf	d7,loc_1B19E
0001BB9A                            
0001BB9A 3A1F                       		move.w	(sp)+,d5
0001BB9C 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BBA2 7000                       		moveq	#0,d0
0001BBA4 3038 F704                  		move.w	($FFFFF704).w,d0
0001BBA8 80FC 0018                  		divu.w	#$18,d0
0001BBAC C0FC 0080                  		mulu.w	#$80,d0
0001BBB0 D1C0                       		adda.l	d0,a0
0001BBB2 7000                       		moveq	#0,d0
0001BBB4 3038 F700                  		move.w	($FFFFF700).w,d0
0001BBB8 80FC 0018                  		divu.w	#$18,d0
0001BBBC D0C0                       		adda.w	d0,a0
0001BBBE 49F8 8000                  		lea	($FFFF8000).w,a4
0001BBC2 3E3C 000F                  		move.w	#$F,d7
0001BBC6                            
0001BBC6                            loc_1B20C:
0001BBC6 3C3C 000F                  		move.w	#$F,d6
0001BBCA                            
0001BBCA                            loc_1B210:
0001BBCA 7000                       		moveq	#0,d0
0001BBCC 1018                       		move.b	(a0)+,d0
0001BBCE 6700                       		beq.s	loc_1B268
0001BBD0 0C00 004E                  		cmpi.b	#$4E,d0
0001BBD4 6200                       		bhi.s	loc_1B268
0001BBD6 3614                       		move.w	(a4),d3
0001BBD8 0643 0120                  		addi.w	#$120,d3
0001BBDC 0C43 0070                  		cmpi.w	#$70,d3
0001BBE0 6500                       		bcs.s	loc_1B268
0001BBE2 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BBE6 6400                       		bcc.s	loc_1B268
0001BBE8 342C 0002                  		move.w	2(a4),d2
0001BBEC 0642 00F0                  		addi.w	#$F0,d2
0001BBF0 0C42 0070                  		cmpi.w	#$70,d2
0001BBF4 6500                       		bcs.s	loc_1B268
0001BBF6 0C42 0170                  		cmpi.w	#$170,d2
0001BBFA 6400                       		bcc.s	loc_1B268
0001BBFC 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BC02 E748                       		lsl.w	#3,d0
0001BC04 4BF5 0000                  		lea	(a5,d0.w),a5
0001BC08 225D                       		movea.l	(a5)+,a1
0001BC0A 321D                       		move.w	(a5)+,d1
0001BC0C D241                       		add.w	d1,d1
0001BC0E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BC12 365D                       		movea.w	(a5)+,a3
0001BC14 7200                       		moveq	#0,d1
0001BC16 1219                       		move.b	(a1)+,d1
0001BC18 5301                       		subq.b	#1,d1
0001BC1A 6B00                       		bmi.s	loc_1B268
0001BC1C 4EB9 0000 E006             		jsr	sub_D762
0001BC22                            
0001BC22                            loc_1B268:
0001BC22 584C                       		addq.w	#4,a4
0001BC24 51CE FFA4                  		dbf	d6,loc_1B210
0001BC28                            
0001BC28 41E8 0070                  		lea	$70(a0),a0
0001BC2C 51CF FF98                  		dbf	d7,loc_1B20C
0001BC30                            
0001BC30 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BC34 0C05 0050                  		cmpi.b	#$50,d5
0001BC38 6700                       		beq.s	loc_1B288
0001BC3A 24BC 0000 0000             		move.l	#0,(a2)
0001BC40 4E75                       		rts	
0001BC42                            ; ===========================================================================
0001BC42                            
0001BC42                            loc_1B288:
0001BC42 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BC48 4E75                       		rts	
0001BC4A                            ; End of function SS_ShowLayout
0001BC4A                            
0001BC4A                            ; ---------------------------------------------------------------------------
0001BC4A                            ; Subroutine to	animate	walls and rings	in the special stage
0001BC4A                            ; ---------------------------------------------------------------------------
0001BC4A                            
0001BC4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC4A                            
0001BC4A                            
0001BC4A                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BC4A 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BC50 7000                       		moveq	#0,d0
0001BC52 1038 F780                  		move.b	($FFFFF780).w,d0
0001BC56 E408                       		lsr.b	#2,d0
0001BC58 0240 000F                  		andi.w	#$F,d0
0001BC5C 7223                       		moveq	#$23,d1
0001BC5E                            
0001BC5E                            loc_1B2A4:
0001BC5E 3280                       		move.w	d0,(a1)
0001BC60 5049                       		addq.w	#8,a1
0001BC62 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BC66                            
0001BC66 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BC6C 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BC70 6A00                       		bpl.s	loc_1B2C8
0001BC72 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BC78 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BC7C 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BC82                            
0001BC82                            loc_1B2C8:
0001BC82 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BC88 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BC8C 6A00                       		bpl.s	loc_1B2E4
0001BC8E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BC94 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BC98 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BC9E                            
0001BC9E                            loc_1B2E4:
0001BC9E 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BCA2 1340 0138                  		move.b	d0,$138(a1)
0001BCA6 1340 0160                  		move.b	d0,$160(a1)
0001BCAA 1340 0148                  		move.b	d0,$148(a1)
0001BCAE 1340 0150                  		move.b	d0,$150(a1)
0001BCB2 1340 01D8                  		move.b	d0,$1D8(a1)
0001BCB6 1340 01E0                  		move.b	d0,$1E0(a1)
0001BCBA 1340 01E8                  		move.b	d0,$1E8(a1)
0001BCBE 1340 01F0                  		move.b	d0,$1F0(a1)
0001BCC2 1340 01F8                  		move.b	d0,$1F8(a1)
0001BCC6 1340 0200                  		move.b	d0,$200(a1)
0001BCCA 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BCCE 6A00                       		bpl.s	loc_1B326
0001BCD0 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BCD6 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BCDA 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BCE0                            
0001BCE0                            loc_1B326:
0001BCE0 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BCE4 1340 0168                  		move.b	d0,$168(a1)
0001BCE8 1340 0170                  		move.b	d0,$170(a1)
0001BCEC 1340 0178                  		move.b	d0,$178(a1)
0001BCF0 1340 0180                  		move.b	d0,$180(a1)
0001BCF4 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BCF8 6A00                       		bpl.s	loc_1B350
0001BCFA 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BD00 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BD04 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BD0A                            
0001BD0A                            loc_1B350:
0001BD0A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BD10 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BD16 7000                       		moveq	#0,d0
0001BD18 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BD1C D040                       		add.w	d0,d0
0001BD1E 41F0 0000                  		lea	(a0,d0.w),a0
0001BD22 3290                       		move.w	(a0),(a1)
0001BD24 3368 0002 0008             		move.w	2(a0),8(a1)
0001BD2A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BD30 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD36 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD3C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD42 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD48 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD4E D0FC 0020                  		adda.w	#$20,a0
0001BD52 D2FC 0048                  		adda.w	#$48,a1
0001BD56 3290                       		move.w	(a0),(a1)
0001BD58 3368 0002 0008             		move.w	2(a0),8(a1)
0001BD5E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BD64 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD6A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD70 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD76 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD7C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD82 D0FC 0020                  		adda.w	#$20,a0
0001BD86 D2FC 0048                  		adda.w	#$48,a1
0001BD8A 3290                       		move.w	(a0),(a1)
0001BD8C 3368 0002 0008             		move.w	2(a0),8(a1)
0001BD92 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BD98 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD9E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BDA4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BDAA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BDB0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BDB6 D0FC 0020                  		adda.w	#$20,a0
0001BDBA D2FC 0048                  		adda.w	#$48,a1
0001BDBE 3290                       		move.w	(a0),(a1)
0001BDC0 3368 0002 0008             		move.w	2(a0),8(a1)
0001BDC6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BDCC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BDD2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BDD8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BDDE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BDE4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BDEA D0FC 0020                  		adda.w	#$20,a0
0001BDEE D2FC 0048                  		adda.w	#$48,a1
0001BDF2 4E75                       		rts	
0001BDF4                            ; End of function SS_AniWallsRings
0001BDF4                            
0001BDF4                            ; ===========================================================================
0001BDF4 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BE04 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BE14 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BE24 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BE34 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BE44 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BE54 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BE64 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BE74                            ; ---------------------------------------------------------------------------
0001BE74                            ; Subroutine to	remove items when you collect them in the special stage
0001BE74                            ; ---------------------------------------------------------------------------
0001BE74                            
0001BE74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE74                            
0001BE74                            
0001BE74                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BE74 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BE7A 303C 001F                  		move.w	#$1F,d0
0001BE7E                            
0001BE7E                            loc_1B4C4:
0001BE7E 4A12                       		tst.b	(a2)
0001BE80 6700                       		beq.s	locret_1B4CE
0001BE82 504A                       		addq.w	#8,a2
0001BE84 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BE88                            
0001BE88                            locret_1B4CE:
0001BE88 4E75                       		rts	
0001BE8A                            ; End of function SS_RemoveCollectedItem
0001BE8A                            
0001BE8A                            ; ---------------------------------------------------------------------------
0001BE8A                            ; Subroutine to	animate	special	stage items when you touch them
0001BE8A                            ; ---------------------------------------------------------------------------
0001BE8A                            
0001BE8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE8A                            
0001BE8A                            
0001BE8A                            SS_AniItems:				; XREF: SS_ShowLayout
0001BE8A 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BE90 3E3C 001F                  		move.w	#$1F,d7
0001BE94                            
0001BE94                            loc_1B4DA:
0001BE94 7000                       		moveq	#0,d0
0001BE96 1010                       		move.b	(a0),d0
0001BE98 6700                       		beq.s	loc_1B4E8
0001BE9A E548                       		lsl.w	#2,d0
0001BE9C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BEA0 4E91                       		jsr	(a1)
0001BEA2                            
0001BEA2                            loc_1B4E8:
0001BEA2 5048                       		addq.w	#8,a0
0001BEA4                            
0001BEA4                            loc_1B4EA:
0001BEA4 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BEA8                            
0001BEA8 4E75                       		rts	
0001BEAA                            ; End of function SS_AniItems
0001BEAA                            
0001BEAA                            ; ===========================================================================
0001BEAA 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BEAE 0000 0000                  		dc.l SS_AniBumper
0001BEB2 0000 0000                  		dc.l SS_Ani1Up
0001BEB6 0000 0000                  		dc.l SS_AniReverse
0001BEBA 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BEBE 0000 0000                  		dc.l SS_AniGlassBlock
0001BEC2                            ; ===========================================================================
0001BEC2                            
0001BEC2                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BEC2 5328 0002                  		subq.b	#1,2(a0)
0001BEC6 6A00                       		bpl.s	locret_1B530
0001BEC8 117C 0005 0002             		move.b	#5,2(a0)
0001BECE 7000                       		moveq	#0,d0
0001BED0 1028 0003                  		move.b	3(a0),d0
0001BED4 5228 0003                  		addq.b	#1,3(a0)
0001BED8 2268 0004                  		movea.l	4(a0),a1
0001BEDC 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BEE0 1280                       		move.b	d0,(a1)
0001BEE2 6600                       		bne.s	locret_1B530
0001BEE4 4290                       		clr.l	(a0)
0001BEE6 42A8 0004                  		clr.l	4(a0)
0001BEEA                            
0001BEEA                            locret_1B530:
0001BEEA 4E75                       		rts	
0001BEEC                            ; ===========================================================================
0001BEEC 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BEF2                            ; ===========================================================================
0001BEF2                            
0001BEF2                            SS_AniBumper:				; XREF: SS_AniIndex
0001BEF2 5328 0002                  		subq.b	#1,2(a0)
0001BEF6 6A00                       		bpl.s	locret_1B566
0001BEF8 117C 0007 0002             		move.b	#7,2(a0)
0001BEFE 7000                       		moveq	#0,d0
0001BF00 1028 0003                  		move.b	3(a0),d0
0001BF04 5228 0003                  		addq.b	#1,3(a0)
0001BF08 2268 0004                  		movea.l	4(a0),a1
0001BF0C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BF10 6600                       		bne.s	loc_1B564
0001BF12 4290                       		clr.l	(a0)
0001BF14 42A8 0004                  		clr.l	4(a0)
0001BF18 12BC 0025                  		move.b	#$25,(a1)
0001BF1C 4E75                       		rts	
0001BF1E                            ; ===========================================================================
0001BF1E                            
0001BF1E                            loc_1B564:
0001BF1E 1280                       		move.b	d0,(a1)
0001BF20                            
0001BF20                            locret_1B566:
0001BF20 4E75                       		rts	
0001BF22                            ; ===========================================================================
0001BF22 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BF28                            ; ===========================================================================
0001BF28                            
0001BF28                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BF28 5328 0002                  		subq.b	#1,2(a0)
0001BF2C 6A00                       		bpl.s	locret_1B596
0001BF2E 117C 0005 0002             		move.b	#5,2(a0)
0001BF34 7000                       		moveq	#0,d0
0001BF36 1028 0003                  		move.b	3(a0),d0
0001BF3A 5228 0003                  		addq.b	#1,3(a0)
0001BF3E 2268 0004                  		movea.l	4(a0),a1
0001BF42 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BF46 1280                       		move.b	d0,(a1)
0001BF48 6600                       		bne.s	locret_1B596
0001BF4A 4290                       		clr.l	(a0)
0001BF4C 42A8 0004                  		clr.l	4(a0)
0001BF50                            
0001BF50                            locret_1B596:
0001BF50 4E75                       		rts	
0001BF52                            ; ===========================================================================
0001BF52 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BF58                            ; ===========================================================================
0001BF58                            
0001BF58                            SS_AniReverse:				; XREF: SS_AniIndex
0001BF58 5328 0002                  		subq.b	#1,2(a0)
0001BF5C 6A00                       		bpl.s	locret_1B5CC
0001BF5E 117C 0007 0002             		move.b	#7,2(a0)
0001BF64 7000                       		moveq	#0,d0
0001BF66 1028 0003                  		move.b	3(a0),d0
0001BF6A 5228 0003                  		addq.b	#1,3(a0)
0001BF6E 2268 0004                  		movea.l	4(a0),a1
0001BF72 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BF76 6600                       		bne.s	loc_1B5CA
0001BF78 4290                       		clr.l	(a0)
0001BF7A 42A8 0004                  		clr.l	4(a0)
0001BF7E 12BC 002B                  		move.b	#$2B,(a1)
0001BF82 4E75                       		rts	
0001BF84                            ; ===========================================================================
0001BF84                            
0001BF84                            loc_1B5CA:
0001BF84 1280                       		move.b	d0,(a1)
0001BF86                            
0001BF86                            locret_1B5CC:
0001BF86 4E75                       		rts	
0001BF88                            ; ===========================================================================
0001BF88 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BF8E                            ; ===========================================================================
0001BF8E                            
0001BF8E                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BF8E 5328 0002                  		subq.b	#1,2(a0)
0001BF92 6A00                       		bpl.s	locret_1B60C
0001BF94 117C 0005 0002             		move.b	#5,2(a0)
0001BF9A 7000                       		moveq	#0,d0
0001BF9C 1028 0003                  		move.b	3(a0),d0
0001BFA0 5228 0003                  		addq.b	#1,3(a0)
0001BFA4 2268 0004                  		movea.l	4(a0),a1
0001BFA8 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BFAC 1280                       		move.b	d0,(a1)
0001BFAE 6600                       		bne.s	locret_1B60C
0001BFB0 4290                       		clr.l	(a0)
0001BFB2 42A8 0004                  		clr.l	4(a0)
0001BFB6 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BFBC 303C 00A8                  		move.w	#$A8,d0
0001BFC0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BFC6                            
0001BFC6                            locret_1B60C:
0001BFC6 4E75                       		rts	
0001BFC8                            ; ===========================================================================
0001BFC8 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BFCE                            ; ===========================================================================
0001BFCE                            
0001BFCE                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BFCE 5328 0002                  		subq.b	#1,2(a0)
0001BFD2 6A00                       		bpl.s	locret_1B640
0001BFD4 117C 0001 0002             		move.b	#1,2(a0)
0001BFDA 7000                       		moveq	#0,d0
0001BFDC 1028 0003                  		move.b	3(a0),d0
0001BFE0 5228 0003                  		addq.b	#1,3(a0)
0001BFE4 2268 0004                  		movea.l	4(a0),a1
0001BFE8 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BFEC 1280                       		move.b	d0,(a1)
0001BFEE 6600                       		bne.s	locret_1B640
0001BFF0 12A8 0004                  		move.b	4(a0),(a1)
0001BFF4 4290                       		clr.l	(a0)
0001BFF6 42A8 0004                  		clr.l	4(a0)
0001BFFA                            
0001BFFA                            locret_1B640:
0001BFFA 4E75                       		rts	
0001BFFC                            ; ===========================================================================
0001BFFC 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C006                            ; ---------------------------------------------------------------------------
0001C006                            ; Special stage	layout pointers
0001C006                            ; ---------------------------------------------------------------------------
0001C006                            SS_LayoutIndex:
0001C006                            	include "_inc\Special stage layout pointers.asm"
0001C006                            ; ---------------------------------------------------------------------------
0001C006                            ; Special stage	layout pointers
0001C006                            ; ---------------------------------------------------------------------------
0001C006 0000 0000                  	dc.l SS_1
0001C00A 0000 0000                  	dc.l SS_2
0001C00E 0000 0000                  	dc.l SS_3
0001C012 0000 0000                  	dc.l SS_4
0001C016 0000 0000                  	dc.l SS_5
0001C01A 0000 0000                  	dc.l SS_6
0001C01E                            	even
0001C01E                            	even
0001C01E                            
0001C01E                            ; ---------------------------------------------------------------------------
0001C01E                            ; Special stage	start locations
0001C01E                            ; ---------------------------------------------------------------------------
0001C01E                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C036                            		even
0001C036                            
0001C036                            ; ---------------------------------------------------------------------------
0001C036                            ; Subroutine to	load special stage layout
0001C036                            ; ---------------------------------------------------------------------------
0001C036                            
0001C036                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C036                            
0001C036                            
0001C036                            SS_Load:				; XREF: SpecialStage
0001C036 7000                       		moveq	#0,d0
0001C038 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C03C 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C040 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C046 6500                       		bcs.s	SS_ChkEmldNum
0001C048 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C04E                            
0001C04E                            SS_ChkEmldNum:
0001C04E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C054 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C056 7200                       		moveq	#0,d1
0001C058 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C05C 5301                       		subq.b	#1,d1
0001C05E 6500                       		bcs.s	SS_LoadData
0001C060 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C064                            
0001C064                            SS_ChkEmldLoop:	
0001C064 B033 1000                  		cmp.b	(a3,d1.w),d0
0001C068 6600                       		bne.s	SS_ChkEmldRepeat
0001C06A 60CA                       		bra.s	SS_Load
0001C06C                            ; ===========================================================================
0001C06C                            
0001C06C                            SS_ChkEmldRepeat:
0001C06C 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C070                            
0001C070                            SS_LoadData:
0001C070 E548                       		lsl.w	#2,d0
0001C072 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C076 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C07A 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C07E 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C082 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C088 303C 0000                  		move.w	#0,d0
0001C08C 4EB9 0000 1954             		jsr	(EniDec).l
0001C092 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C098 303C 0FFF                  		move.w	#$FFF,d0
0001C09C                            
0001C09C                            SS_ClrRAM3:
0001C09C 4299                       		clr.l	(a1)+
0001C09E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C0A2                            
0001C0A2 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C0A8 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C0AE 723F                       		moveq	#$3F,d1
0001C0B0                            
0001C0B0                            loc_1B6F6:
0001C0B0 743F                       		moveq	#$3F,d2
0001C0B2                            
0001C0B2                            loc_1B6F8:
0001C0B2 12D8                       		move.b	(a0)+,(a1)+
0001C0B4 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C0B8                            
0001C0B8 43E9 0040                  		lea	$40(a1),a1
0001C0BC 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C0C0                            
0001C0C0 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C0C6 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C0CC 724D                       		moveq	#$4D,d1
0001C0CE                            
0001C0CE                            loc_1B714:
0001C0CE 22D8                       		move.l	(a0)+,(a1)+
0001C0D0 32FC 0000                  		move.w	#0,(a1)+
0001C0D4 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C0DA 32D8                       		move.w	(a0)+,(a1)+
0001C0DC 51C9 FFF0                  		dbf	d1,loc_1B714
0001C0E0                            
0001C0E0 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C0E6 323C 003F                  		move.w	#$3F,d1
0001C0EA                            
0001C0EA                            loc_1B730:
0001C0EA                            
0001C0EA 4299                       		clr.l	(a1)+
0001C0EC 51C9 FFFC                  		dbf	d1,loc_1B730
0001C0F0                            
0001C0F0 4E75                       		rts	
0001C0F2                            ; End of function SS_Load
0001C0F2                            
0001C0F2                            ; ===========================================================================
0001C0F2                            ; ---------------------------------------------------------------------------
0001C0F2                            ; Special stage	mappings and VRAM pointers
0001C0F2                            ; ---------------------------------------------------------------------------
0001C0F2                            SS_MapIndex:
0001C0F2                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C0F2                            ; ---------------------------------------------------------------------------
0001C0F2                            ; Special stage	mappings and VRAM pointers
0001C0F2                            ; ---------------------------------------------------------------------------
0001C0F2 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C0F6 0142                       	dc.w $142		; VRAM setting
0001C0F8 0000 0000                  	dc.l Map_SSWalls
0001C0FC 0142                       	dc.w $142
0001C0FE 0000 0000                  	dc.l Map_SSWalls
0001C102 0142                       	dc.w $142
0001C104 0000 0000                  	dc.l Map_SSWalls
0001C108 0142                       	dc.w $142
0001C10A 0000 0000                  	dc.l Map_SSWalls
0001C10E 0142                       	dc.w $142
0001C110 0000 0000                  	dc.l Map_SSWalls
0001C114 0142                       	dc.w $142
0001C116 0000 0000                  	dc.l Map_SSWalls
0001C11A 0142                       	dc.w $142
0001C11C 0000 0000                  	dc.l Map_SSWalls
0001C120 0142                       	dc.w $142
0001C122 0000 0000                  	dc.l Map_SSWalls
0001C126 0142                       	dc.w $142
0001C128 0000 0000                  	dc.l Map_SSWalls
0001C12C 2142                       	dc.w $2142
0001C12E 0000 0000                  	dc.l Map_SSWalls
0001C132 2142                       	dc.w $2142
0001C134 0000 0000                  	dc.l Map_SSWalls
0001C138 2142                       	dc.w $2142
0001C13A 0000 0000                  	dc.l Map_SSWalls
0001C13E 2142                       	dc.w $2142
0001C140 0000 0000                  	dc.l Map_SSWalls
0001C144 2142                       	dc.w $2142
0001C146 0000 0000                  	dc.l Map_SSWalls
0001C14A 2142                       	dc.w $2142
0001C14C 0000 0000                  	dc.l Map_SSWalls
0001C150 2142                       	dc.w $2142
0001C152 0000 0000                  	dc.l Map_SSWalls
0001C156 2142                       	dc.w $2142
0001C158 0000 0000                  	dc.l Map_SSWalls
0001C15C 2142                       	dc.w $2142
0001C15E 0000 0000                  	dc.l Map_SSWalls
0001C162 4142                       	dc.w $4142
0001C164 0000 0000                  	dc.l Map_SSWalls
0001C168 4142                       	dc.w $4142
0001C16A 0000 0000                  	dc.l Map_SSWalls
0001C16E 4142                       	dc.w $4142
0001C170 0000 0000                  	dc.l Map_SSWalls
0001C174 4142                       	dc.w $4142
0001C176 0000 0000                  	dc.l Map_SSWalls
0001C17A 4142                       	dc.w $4142
0001C17C 0000 0000                  	dc.l Map_SSWalls
0001C180 4142                       	dc.w $4142
0001C182 0000 0000                  	dc.l Map_SSWalls
0001C186 4142                       	dc.w $4142
0001C188 0000 0000                  	dc.l Map_SSWalls
0001C18C 4142                       	dc.w $4142
0001C18E 0000 0000                  	dc.l Map_SSWalls
0001C192 4142                       	dc.w $4142
0001C194 0000 0000                  	dc.l Map_SSWalls
0001C198 6142                       	dc.w $6142
0001C19A 0000 0000                  	dc.l Map_SSWalls
0001C19E 6142                       	dc.w $6142
0001C1A0 0000 0000                  	dc.l Map_SSWalls
0001C1A4 6142                       	dc.w $6142
0001C1A6 0000 0000                  	dc.l Map_SSWalls
0001C1AA 6142                       	dc.w $6142
0001C1AC 0000 0000                  	dc.l Map_SSWalls
0001C1B0 6142                       	dc.w $6142
0001C1B2 0000 0000                  	dc.l Map_SSWalls
0001C1B6 6142                       	dc.w $6142
0001C1B8 0000 0000                  	dc.l Map_SSWalls
0001C1BC 6142                       	dc.w $6142
0001C1BE 0000 0000                  	dc.l Map_SSWalls
0001C1C2 6142                       	dc.w $6142
0001C1C4 0000 0000                  	dc.l Map_SSWalls
0001C1C8 6142                       	dc.w $6142
0001C1CA 0000 F39C                  	dc.l Map_obj47
0001C1CE 023B                       	dc.w $23B
0001C1D0 0000 0000                  	dc.l Map_SS_R
0001C1D4 0570                       	dc.w $570
0001C1D6 0000 0000                  	dc.l Map_SS_R
0001C1DA 0251                       	dc.w $251
0001C1DC 0000 0000                  	dc.l Map_SS_R
0001C1E0 0370                       	dc.w $370
0001C1E2 0000 0000                  	dc.l Map_SS_Up
0001C1E6 0263                       	dc.w $263
0001C1E8 0000 0000                  	dc.l Map_SS_Down
0001C1EC 0263                       	dc.w $263
0001C1EE 0000 0000                  	dc.l Map_SS_R
0001C1F2 22F0                       	dc.w $22F0
0001C1F4 0000 0000                  	dc.l Map_SS_Glass
0001C1F8 0470                       	dc.w $470
0001C1FA 0000 0000                  	dc.l Map_SS_Glass
0001C1FE 05F0                       	dc.w $5F0
0001C200 0000 0000                  	dc.l Map_SS_Glass
0001C204 65F0                       	dc.w $65F0
0001C206 0000 0000                  	dc.l Map_SS_Glass
0001C20A 25F0                       	dc.w $25F0
0001C20C 0000 0000                  	dc.l Map_SS_Glass
0001C210 45F0                       	dc.w $45F0
0001C212 0000 0000                  	dc.l Map_SS_R
0001C216 02F0                       	dc.w $2F0
0001C218 0100 F39C                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C21C 023B                       	dc.w $23B
0001C21E 0200 F39C                  	dc.l Map_obj47+$2000000
0001C222 023B                       	dc.w $23B
0001C224 0000 0000                  	dc.l Map_SS_R
0001C228 0797                       	dc.w $797
0001C22A 0000 0000                  	dc.l Map_SS_R
0001C22E 07A0                       	dc.w $7A0
0001C230 0000 0000                  	dc.l Map_SS_R
0001C234 07A9                       	dc.w $7A9
0001C236 0000 0000                  	dc.l Map_SS_R
0001C23A 0797                       	dc.w $797
0001C23C 0000 0000                  	dc.l Map_SS_R
0001C240 07A0                       	dc.w $7A0
0001C242 0000 0000                  	dc.l Map_SS_R
0001C246 07A9                       	dc.w $7A9
0001C248 0000 A6C0                  	dc.l Map_obj25
0001C24C 27B2                       	dc.w $27B2
0001C24E 0000 0000                  	dc.l Map_SS_Chaos3
0001C252 0770                       	dc.w $770
0001C254 0000 0000                  	dc.l Map_SS_Chaos3
0001C258 2770                       	dc.w $2770
0001C25A 0000 0000                  	dc.l Map_SS_Chaos3
0001C25E 4770                       	dc.w $4770
0001C260 0000 0000                  	dc.l Map_SS_Chaos3
0001C264 6770                       	dc.w $6770
0001C266 0000 0000                  	dc.l Map_SS_Chaos1
0001C26A 0770                       	dc.w $770
0001C26C 0000 0000                  	dc.l Map_SS_Chaos2
0001C270 0770                       	dc.w $770
0001C272 0000 0000                  	dc.l Map_SS_R
0001C276 04F0                       	dc.w $4F0
0001C278 0400 A6C0                  	dc.l Map_obj25+$4000000
0001C27C 27B2                       	dc.w $27B2
0001C27E 0500 A6C0                  	dc.l Map_obj25+$5000000
0001C282 27B2                       	dc.w $27B2
0001C284 0600 A6C0                  	dc.l Map_obj25+$6000000
0001C288 27B2                       	dc.w $27B2
0001C28A 0700 A6C0                  	dc.l Map_obj25+$7000000
0001C28E 27B2                       	dc.w $27B2
0001C290 0000 0000                  	dc.l Map_SS_Glass
0001C294 23F0                       	dc.w $23F0
0001C296 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C29A 23F0                       	dc.w $23F0
0001C29C 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C2A0 23F0                       	dc.w $23F0
0001C2A2 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C2A6 23F0                       	dc.w $23F0
0001C2A8 0000 0000                  	dc.l Map_SS_R+$2000000
0001C2AC 04F0                       	dc.w $4F0
0001C2AE 0000 0000                  	dc.l Map_SS_Glass
0001C2B2 05F0                       	dc.w $5F0
0001C2B4 0000 0000                  	dc.l Map_SS_Glass
0001C2B8 65F0                       	dc.w $65F0
0001C2BA 0000 0000                  	dc.l Map_SS_Glass
0001C2BE 25F0                       	dc.w $25F0
0001C2C0 0000 0000                  	dc.l Map_SS_Glass
0001C2C4 45F0                       	dc.w $45F0
0001C2C4 45F0                       	dc.w $45F0
0001C2C6                            
0001C2C6                            ; ---------------------------------------------------------------------------
0001C2C6                            ; Sprite mappings - special stage "R" block
0001C2C6                            ; ---------------------------------------------------------------------------
0001C2C6                            Map_SS_R:
0001C2C6                            	include "_maps\SSRblock.asm"
0001C2C6                            ; ---------------------------------------------------------------------------
0001C2C6                            ; Sprite mappings - special stage "R" block
0001C2C6                            ; ---------------------------------------------------------------------------
0001C2C6 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C2CA 0000                       		dc.w byte_1B91E-Map_SS_R
0001C2CC 01                         byte_1B912:	dc.b 1
0001C2CD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C2D2 01                         byte_1B918:	dc.b 1
0001C2D3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C2D8 00                         byte_1B91E:	dc.b 0
0001C2DA 00                         		even
0001C2DA 00                         		even
0001C2DA                            
0001C2DA                            ; ---------------------------------------------------------------------------
0001C2DA                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C2DA                            ; ---------------------------------------------------------------------------
0001C2DA                            Map_SS_Glass:
0001C2DA                            	include "_maps\SSglassblock.asm"
0001C2DA                            ; ---------------------------------------------------------------------------
0001C2DA                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C2DA                            ; ---------------------------------------------------------------------------
0001C2DA 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C2DE 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C2E2 01                         byte_1B928:	dc.b 1
0001C2E3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C2E8 01                         byte_1B92E:	dc.b 1
0001C2E9 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C2EE 01                         byte_1B934:	dc.b 1
0001C2EF F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C2F4 01                         byte_1B93A:	dc.b 1
0001C2F5 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C2FA                            		even
0001C2FA                            		even
0001C2FA                            
0001C2FA                            ; ---------------------------------------------------------------------------
0001C2FA                            ; Sprite mappings - special stage "UP" block
0001C2FA                            ; ---------------------------------------------------------------------------
0001C2FA                            Map_SS_Up:
0001C2FA                            	include "_maps\SSUPblock.asm"
0001C2FA                            ; ---------------------------------------------------------------------------
0001C2FA                            ; Sprite mappings - special stage "UP" block
0001C2FA                            ; ---------------------------------------------------------------------------
0001C2FA 0000                       		dc.w byte_1B944-Map_SS_Up
0001C2FC 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C2FE 01                         byte_1B944:	dc.b 1
0001C2FF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C304 01                         byte_1B94A:	dc.b 1
0001C305 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C30A                            		even
0001C30A                            		even
0001C30A                            
0001C30A                            ; ---------------------------------------------------------------------------
0001C30A                            ; Sprite mappings - special stage "DOWN" block
0001C30A                            ; ---------------------------------------------------------------------------
0001C30A                            Map_SS_Down:
0001C30A                            	include "_maps\SSDOWNblock.asm"
0001C30A                            ; ---------------------------------------------------------------------------
0001C30A                            ; Sprite mappings - special stage "DOWN" block
0001C30A                            ; ---------------------------------------------------------------------------
0001C30A 0000                       		dc.w byte_1B954-Map_SS_Down
0001C30C 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C30E 01                         byte_1B954:	dc.b 1
0001C30F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C314 01                         byte_1B95A:	dc.b 1
0001C315 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C31A                            		even
0001C31A                            		even
0001C31A                            
0001C31A                            ; ---------------------------------------------------------------------------
0001C31A                            ; Sprite mappings - special stage chaos	emeralds
0001C31A                            ; ---------------------------------------------------------------------------
0001C31A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C31C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C31E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C320 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C322 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C324 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C326 01                         byte_1B96C:	dc.b 1
0001C327 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C32C 01                         byte_1B972:	dc.b 1
0001C32D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C332 01                         byte_1B978:	dc.b 1
0001C333 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C338 01                         byte_1B97E:	dc.b 1
0001C339 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C33E                            		even
0001C33E                            ; ===========================================================================
0001C33E                            ; ---------------------------------------------------------------------------
0001C33E                            ; Object 09 - Sonic (special stage)
0001C33E                            ; ---------------------------------------------------------------------------
0001C33E                            
0001C33E                            Obj09:					; XREF: Obj_Index
0001C33E                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C33E                            ;		beq.s	Obj09_Normal	; if not, branch
0001C33E 6100 0000                  		bsr.w	SS_FixCamera
0001C342                            ;		bra.w	DebugMode
0001C342                            ; ===========================================================================
0001C342                            
0001C342                            Obj09_Normal:
0001C342 7000                       		moveq	#0,d0
0001C344 1028 0024                  		move.b	$24(a0),d0
0001C348 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C34C 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C350                            ; ===========================================================================
0001C350 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C352 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C354 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C356 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C358                            ; ===========================================================================
0001C358                            
0001C358                            Obj09_Main:				; XREF: Obj09_Index
0001C358 5428 0024                  		addq.b	#2,$24(a0)
0001C35C 117C 000E 0016             		move.b	#$E,$16(a0)
0001C362 117C 0007 0017             		move.b	#7,$17(a0)
0001C368 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C370 317C 0780 0002             		move.w	#$780,2(a0)
0001C376 117C 0004 0001             		move.b	#4,1(a0)
0001C37C 117C 0000 0018             		move.b	#0,$18(a0)
0001C382 117C 0002 001C             		move.b	#2,$1C(a0)
0001C388 08E8 0002 0022             		bset	#2,$22(a0)
0001C38E 08E8 0001 0022             		bset	#1,$22(a0)
0001C394                            
0001C394                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C394                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C394                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C394                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C394                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C394                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C394                            
0001C394                            Obj09_NoDebug:
0001C394 117C 0000 0030             		move.b	#0,$30(a0)
0001C39A 7000                       		moveq	#0,d0
0001C39C 1028 0022                  		move.b	$22(a0),d0
0001C3A0 0240 0002                  		andi.w	#2,d0
0001C3A4 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C3A8 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C3AC 4EBA 8212                  		jsr	LoadSonicDynPLC
0001C3B0 4EF9 0000 DEA8             		jmp	DisplaySprite
0001C3B6                            ; ===========================================================================
0001C3B6 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C3B8 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C3BA                            ; ===========================================================================
0001C3BA                            
0001C3BA                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C3BA 6100 0000                  		bsr.w	Obj09_Rise
0001C3BE 6100 0000                  		bsr.w	Obj09_Move
0001C3C2 6100 0000                  		bsr.w	Obj09_Fall
0001C3C6 6000                       		bra.s	Obj09_Display
0001C3C8                            ; ===========================================================================
0001C3C8                            
0001C3C8                            Obj09_InAir:				; XREF: Obj09_Modes
0001C3C8 6100 0000                  		bsr.w	Obj09_Rise
0001C3CC 6100 0000                  		bsr.w	Obj09_Move
0001C3D0 6100 0000                  		bsr.w	Obj09_Fall
0001C3D4                            
0001C3D4                            Obj09_Display:				; XREF: Obj09_OnWall
0001C3D4 6100 0000                  		bsr.w	Obj09_ChkItems
0001C3D8 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C3DC 4EB9 0000 DE82             		jsr	SpeedToPos
0001C3E2 6100 0000                  		bsr.w	SS_FixCamera
0001C3E6 3038 F780                  		move.w	($FFFFF780).w,d0
0001C3EA D078 F782                  		add.w	($FFFFF782).w,d0
0001C3EE 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C3F2 4EB9 0001 431A             		jsr	Sonic_Animate
0001C3F8 4E75                       		rts	
0001C3FA                            
0001C3FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3FA                            
0001C3FA                            
0001C3FA                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C3FA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C400 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C402 4A78 F784                          tst.w   ($FFFFF784).w
0001C406 6600                               bne.s   @corereverse1
0001C408 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C40C 6000                               bra.s   Obj09_ChkRight          
0001C40E                            
0001C40E                            @corereverse1:
0001C40E 6100 0000                          bsr.w	Obj09_MoveRight
0001C412                            
0001C412                            Obj09_ChkRight:
0001C412 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C418 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C41A 4A78 F784                          tst.w   ($FFFFF784).w
0001C41E 6600                               bne.s   @corereverse2
0001C420 6100 0000                  		bsr.w	Obj09_MoveRight
0001C424 6000                               bra.s   Obj09_MoveSpeed 
0001C426                            
0001C426                            @corereverse2:
0001C426 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C42A                            
0001C42A                            Obj09_MoveSpeed:
0001C42A 1038 F602                  		move.b	($FFFFF602).w,d0
0001C42E 0200 000C                  		andi.b	#$C,d0
0001C432 6600                       		bne.s	Obj09_MoveCollision
0001C434 3028 0010                  		move.w	$10(a0),d0
0001C438 6700                       		beq.s	Obj09_MoveCollision
0001C43A 317C 0000 0010             		move.w	#0,$10(a0)
0001C440                            
0001C440                            Obj09_MoveCollision:
0001C440 1038 F780                  		move.b	($FFFFF780).w,d0
0001C444 0600 0020                  		addi.b	#$20,d0
0001C448 0200 00C0                  		andi.b	#$C0,d0
0001C44C 4400                       		neg.b	d0
0001C44E 4EB9 0000 2D36             		jsr	(CalcSine).l
0001C454 C3E8 0010                  		muls.w	$10(a0),d1
0001C458 D3A8 0008                  		add.l	d1,8(a0)
0001C45C C1E8 0012                  		muls.w	$12(a0),d0
0001C460 D1A8 000C                  		add.l	d0,$C(a0)
0001C464 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C468 2428 000C                  		move.l	$C(a0),d2
0001C46C 2628 0008                  		move.l	8(a0),d3
0001C470 6100 0000                  		bsr.w	sub_1BCE8
0001C474 6700                       		beq.s	loc_1BAF2
0001C476 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C47A 93A8 0008                  		sub.l	d1,8(a0)
0001C47E 91A8 000C                  		sub.l	d0,$C(a0)
0001C482 317C 0000 0010             		move.w	#0,$10(a0)
0001C488 4E75                       		rts	
0001C48A                            ; ===========================================================================
0001C48A                            
0001C48A                            loc_1BAF2:
0001C48A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C48E 4E75                       		rts	
0001C490                            ; End of function Obj09_Move
0001C490                            
0001C490                            
0001C490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C490                            
0001C490                            
0001C490                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C490 08E8 0000 0022             		bset	#0,$22(a0)
0001C496 4240                               clr.w   d0
0001C498 3038 F786                          move.w  ($FFFFF786).w,d0
0001C49C D040                               add.w   d0,d0
0001C49E 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C4A4 4468 0010                          neg.w   $10(a0)
0001C4A8 4E75                               rts
0001C4AA                            
0001C4AA                            ; End of function Obj09_MoveLeft
0001C4AA                            
0001C4AA                            
0001C4AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4AA                            
0001C4AA                            
0001C4AA                            Obj09_MoveRight:
0001C4AA 08A8 0000 0022             		bclr	#0,$22(a0)
0001C4B0 4240                               clr.w   d0
0001C4B2 3038 F786                          move.w  ($FFFFF786).w,d0
0001C4B6 D040                               add.w   d0,d0
0001C4B8 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C4BE 4E75                       		rts
0001C4C0                            
0001C4C0                            ; End of function Obj09_MoveRight
0001C4C0                            
0001C4C0                            ; ---------------------------------------------------------------------------
0001C4C0                            
0001C4C0                            SS_XSpdIndex:
0001C4C0 0032                       		dc.w 50
0001C4C2 0064                       		dc.w 100
0001C4C4 0096                       		dc.w 150
0001C4C6 00C8                       		dc.w 200
0001C4C8 00FA                       		dc.w 250
0001C4CA                            
0001C4CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4CA                            
0001C4CA                            
0001C4CA                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C4CA 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C4D0 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C4D2 4A78 F784                          tst.w   ($FFFFF784).w
0001C4D6 6600 0000                          bne.w   @corereverse1
0001C4DA 6100 0000                  		bsr.w	Obj09_MoveUp
0001C4DE 6000                               bra.s   Obj09_NoRise
0001C4E0                            
0001C4E0                            @corereverse1:
0001C4E0 6100 0000                  		bsr.w	Obj09_Falling 
0001C4E4                                    
0001C4E4                            Obj09_NoRise:
0001C4E4 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C4EA 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C4EC 4A78 F784                          tst.w   ($FFFFF784).w
0001C4F0 6600 0000                          bne.w   @corereverse2
0001C4F4 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C4F8 6000                               bra.s   Obj09_MoveYSpeed
0001C4FA                            
0001C4FA                            @corereverse2:
0001C4FA 6100 0000                  		bsr.w	Obj09_MoveUp
0001C4FE                            		
0001C4FE                            Obj09_MoveYSpeed:
0001C4FE 1038 F602                  		move.b	($FFFFF602).w,d0
0001C502 0200 0003                  		andi.b	#3,d0
0001C506 6600                       		bne.s	Obj09_MoveYCollision
0001C508 3028 0012                  		move.w	$12(a0),d0
0001C50C 6700                       		beq.s	Obj09_MoveYCollision
0001C50E 317C 0000 0012             		move.w	#0,$12(a0)
0001C514                            
0001C514                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C514 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C518 0600 0020                  		addi.b	#$20,d0					;	?
0001C51C 0200 00C0                  		andi.b	#$C0,d0					;	
0001C520 4400                       		neg.b	d0						;	?
0001C522 4EB9 0000 2D36             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C528 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C52C D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C530 C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C534 D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C538 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C53C 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C540 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C544 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C548 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C54C 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C550 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C554 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C558 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C55E 4E75                       		rts								;	end routine
0001C560                            
0001C560                            Obj09_MoveUp:
0001C560 4240                               clr.w   d0
0001C562 3038 F786                          move.w  ($FFFFF786).w,d0
0001C566 D040                               add.w   d0,d0
0001C568 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C56E 4468 0012                          neg.w   $12(a0)
0001C572 4E75                               rts
0001C574                            
0001C574                            Obj09_Falling:
0001C574 4240                               clr.w   d0
0001C576 3038 F786                          move.w  ($FFFFF786).w,d0
0001C57A D040                               add.w   d0,d0
0001C57C 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C582 4E75                       		rts
0001C584                            ; End of function Obj09_Jump
0001C584                            
0001C584                            ; ---------------------------------------------------------------------------
0001C584                            SS_YSpdIndex:
0001C584 0080                       		dc.w $80
0001C586 0100                       		dc.w $100
0001C588 0180                       		dc.w $180
0001C58A 0200                       		dc.w $200
0001C58C 0280                       		dc.w $280
0001C58E                            
0001C58E                            
0001C58E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C58E                            
0001C58E                            
0001C58E                            nullsub_2:				; XREF: Obj09_InAir
0001C58E 4E75                       		rts	
0001C590                            ; End of function nullsub_2
0001C590                            
0001C590                            ; ===========================================================================
0001C590                            ; ---------------------------------------------------------------------------
0001C590                            ; unused subroutine to limit Sonic's upward vertical speed
0001C590                            ; ---------------------------------------------------------------------------
0001C590 323C FC00                  		move.w	#-$400,d1
0001C594 B268 0012                  		cmp.w	$12(a0),d1
0001C598 6F00                       		ble.s	locret_1BBB4
0001C59A 1038 F602                  		move.b	($FFFFF602).w,d0
0001C59E 0200 0070                  		andi.b	#$70,d0
0001C5A2 6600                       		bne.s	locret_1BBB4
0001C5A4 3141 0012                  		move.w	d1,$12(a0)
0001C5A8                            
0001C5A8                            locret_1BBB4:
0001C5A8 4E75                       		rts	
0001C5AA                            ; ---------------------------------------------------------------------------
0001C5AA                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C5AA                            ; ---------------------------------------------------------------------------
0001C5AA                            
0001C5AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5AA                            
0001C5AA                            
0001C5AA                            SS_FixCamera:				; XREF: Obj09
0001C5AA 3428 000C                  		move.w	$C(a0),d2
0001C5AE 3628 0008                  		move.w	8(a0),d3
0001C5B2 3038 F700                  		move.w	($FFFFF700).w,d0
0001C5B6 0443 00A0                  		subi.w	#$A0,d3
0001C5BA 6500                       		bcs.s	loc_1BBCE
0001C5BC 9043                       		sub.w	d3,d0
0001C5BE 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C5C2                            
0001C5C2                            loc_1BBCE:
0001C5C2 3038 F704                  		move.w	($FFFFF704).w,d0
0001C5C6 0442 0070                  		subi.w	#$70,d2
0001C5CA 6500                       		bcs.s	locret_1BBDE
0001C5CC 9042                       		sub.w	d2,d0
0001C5CE 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C5D2                            
0001C5D2                            locret_1BBDE:
0001C5D2 4E75                       		rts	
0001C5D4                            ; End of function SS_FixCamera
0001C5D4                            
0001C5D4                            ; ===========================================================================
0001C5D4                            
0001C5D4                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C5D4 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C5DA 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C5E0 6600                       		bne.s	loc_1BBF4
0001C5E2 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C5E8                            
0001C5E8                            loc_1BBF4:
0001C5E8 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C5EE 6D00                       		blt.s	loc_1BC12
0001C5F0 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C5F6                            ;		move.w	#$4000,($FFFFF780).w
0001C5F6 5428 0024                  		addq.b	#2,$24(a0)
0001C5FA 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C600                            
0001C600                            loc_1BC12:
0001C600                            ;		move.w	($FFFFF780).w,d0
0001C600                            ;		add.w	($FFFFF782).w,d0
0001C600                            ;		move.w	d0,($FFFFF780).w
0001C600 4EB9 0001 431A             		jsr	Sonic_Animate
0001C606 4EB9 0001 45C0             		jsr	LoadSonicDynPLC
0001C60C 6100 FF9C                  		bsr.w	SS_FixCamera
0001C610 4EF9 0000 DEA8             		jmp	DisplaySprite
0001C616                            ; ===========================================================================
0001C616                            
0001C616                            Obj09_Exit2:				; XREF: Obj09_Index
0001C616 5368 0038                  		subq.w	#1,$38(a0)
0001C61A 6600                       		bne.s	loc_1BC40
0001C61C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C622                            
0001C622                            loc_1BC40:
0001C622 4EB9 0001 431A             		jsr	Sonic_Animate
0001C628 4EB9 0001 45C0             		jsr	LoadSonicDynPLC
0001C62E 6100 FF7A                  		bsr.w	SS_FixCamera
0001C632 4EF9 0000 DEA8             		jmp	DisplaySprite
0001C638                            
0001C638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C638                            
0001C638                            
0001C638                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C638 2428 000C                  		move.l	$C(a0),d2
0001C63C 2628 0008                  		move.l	8(a0),d3
0001C640 1038 F780                  		move.b	($FFFFF780).w,d0
0001C644 0200 00FC                  		andi.b	#$FC,d0
0001C648 4EB9 0000 2D36             		jsr	(CalcSine).l
0001C64E 3828 0010                  		move.w	$10(a0),d4
0001C652 48C4                       		ext.l	d4
0001C654 E184                       		asl.l	#8,d4
0001C656 C1FC 002A                  		muls.w	#$2A,d0
0001C65A D084                       		add.l	d4,d0
0001C65C 3828 0012                  		move.w	$12(a0),d4
0001C660 48C4                       		ext.l	d4
0001C662 E184                       		asl.l	#8,d4
0001C664 C3FC 002A                  		muls.w	#$2A,d1
0001C668 D284                       		add.l	d4,d1
0001C66A 7A00                       		moveq	#0,d5
0001C66C 3A28 0010                  		move.w	$10(a0),d5
0001C670 6700                       		beq.s	Obj09_NoXFall
0001C672 D680                       		add.l	d0,d3
0001C674 6100 0000                  		bsr.w	sub_1BCE8
0001C678 6700                       		beq.s	loc_1BCB0
0001C67A 9680                       		sub.l	d0,d3
0001C67C 7000                       		moveq	#0,d0
0001C67E 3140 0010                  		move.w	d0,$10(a0)
0001C682 08A8 0001 0022             		bclr	#1,$22(a0)
0001C688                            
0001C688                            Obj09_NoXFall
0001C688 7C00                       		moveq	#0,d6
0001C68A 3C28 0012                  		move.w	$12(a0),d6
0001C68E 6700                       		beq.s	Obj09_NoYFall
0001C690 D481                       		add.l	d1,d2
0001C692 6100 0000                  		bsr.w	sub_1BCE8
0001C696 6700                       		beq.s	loc_1BCC6
0001C698 9481                       		sub.l	d1,d2
0001C69A 7200                       		moveq	#0,d1
0001C69C 3141 0012                  		move.w	d1,$12(a0)
0001C6A0 4E75                       		rts	
0001C6A2                            ; ===========================================================================
0001C6A2                            
0001C6A2                            loc_1BCB0:
0001C6A2 7C00                       		moveq	#0,d6
0001C6A4 3C28 0012                  		move.w	$12(a0),d6
0001C6A8 6700                       		beq.s	Obj09_NoYFall
0001C6AA D481                       		add.l	d1,d2
0001C6AC 6100 0000                  		bsr.w	sub_1BCE8
0001C6B0 6700                       		beq.s	loc_1BCD4
0001C6B2 9481                       		sub.l	d1,d2
0001C6B4 7200                       		moveq	#0,d1
0001C6B6 3141 0012                  		move.w	d1,$12(a0)
0001C6BA 08A8 0001 0022             		bclr	#1,$22(a0)
0001C6C0                            
0001C6C0                            loc_1BCC6:
0001C6C0 E080                       		asr.l	#8,d0
0001C6C2 E081                       		asr.l	#8,d1
0001C6C4 3140 0010                  		move.w	d0,$10(a0)
0001C6C8 3141 0012                  		move.w	d1,$12(a0)
0001C6CC 4E75                       		rts	
0001C6CE                            ; ===========================================================================
0001C6CE                            
0001C6CE                            loc_1BCD4:
0001C6CE E080                       		asr.l	#8,d0
0001C6D0 E081                       		asr.l	#8,d1
0001C6D2 3140 0010                  		move.w	d0,$10(a0)
0001C6D6 3141 0012                  		move.w	d1,$12(a0)
0001C6DA 08E8 0001 0022             		bset	#1,$22(a0)
0001C6E0 4E75                       		rts	
0001C6E2                            
0001C6E2                            Obj09_NoYFall:
0001C6E2 4E75                       		rts
0001C6E4                            ; End of function Obj09_Fall
0001C6E4                            
0001C6E4                            
0001C6E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6E4                            
0001C6E4                            
0001C6E4                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C6E4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C6EA 7800                       		moveq	#0,d4
0001C6EC 4842                       		swap	d2
0001C6EE 3802                       		move.w	d2,d4
0001C6F0 4842                       		swap	d2
0001C6F2 0644 0044                  		addi.w	#$44,d4
0001C6F6 88FC 0018                  		divu.w	#$18,d4
0001C6FA C8FC 0080                  		mulu.w	#$80,d4
0001C6FE D3C4                       		adda.l	d4,a1
0001C700 7800                       		moveq	#0,d4
0001C702 4843                       		swap	d3
0001C704 3803                       		move.w	d3,d4
0001C706 4843                       		swap	d3
0001C708 0644 0014                  		addi.w	#$14,d4
0001C70C 88FC 0018                  		divu.w	#$18,d4
0001C710 D2C4                       		adda.w	d4,a1
0001C712 7A00                       		moveq	#0,d5
0001C714 1819                       		move.b	(a1)+,d4
0001C716 6100                       		bsr.s	sub_1BD30
0001C718 1819                       		move.b	(a1)+,d4
0001C71A 6100                       		bsr.s	sub_1BD30
0001C71C D2FC 007E                  		adda.w	#$7E,a1
0001C720 1819                       		move.b	(a1)+,d4
0001C722 6100                       		bsr.s	sub_1BD30
0001C724 1819                       		move.b	(a1)+,d4
0001C726 6100                       		bsr.s	sub_1BD30
0001C728 4A05                       		tst.b	d5
0001C72A 4E75                       		rts	
0001C72C                            ; End of function sub_1BCE8
0001C72C                            
0001C72C                            
0001C72C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C72C                            
0001C72C                            
0001C72C                            sub_1BD30:				; XREF: sub_1BCE8
0001C72C 6700                       		beq.s	locret_1BD44
0001C72E 0C04 0028                  		cmpi.b	#$28,d4
0001C732 6500                       		blo.s	loc_1BD46
0001C734 0C04 004B                  		cmpi.b	#$4B,d4
0001C738 6400                       		bhs.s	loc_1BD46
0001C73A 0C04 003A                  		cmpi.b	#$3A,d4
0001C73E 6400                       		bhs.s	locret_1BD44
0001C740 0C04 002C                  		cmpi.b	#$2C,d4
0001C744 6400                       		bhs.s	loc_1BD46
0001C746                            
0001C746                            locret_1BD44:
0001C746 4E75                       		rts	
0001C748                            ; ===========================================================================
0001C748                            
0001C748                            loc_1BD46:
0001C748 1144 0030                  		move.b	d4,$30(a0)
0001C74C 2149 0032                  		move.l	a1,$32(a0)
0001C750 7AFF                       		moveq	#-1,d5
0001C752 4E75                       		rts	
0001C754                            ; End of function sub_1BD30
0001C754                            
0001C754                            
0001C754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C754                            
0001C754                            
0001C754                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C754 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C75A 7800                       		moveq	#0,d4
0001C75C 3828 000C                  		move.w	$C(a0),d4
0001C760 0644 0050                  		addi.w	#$50,d4
0001C764 88FC 0018                  		divu.w	#$18,d4
0001C768 C8FC 0080                  		mulu.w	#$80,d4
0001C76C D3C4                       		adda.l	d4,a1
0001C76E 7800                       		moveq	#0,d4
0001C770 3828 0008                  		move.w	8(a0),d4
0001C774 0644 0020                  		addi.w	#$20,d4
0001C778 88FC 0018                  		divu.w	#$18,d4
0001C77C D2C4                       		adda.w	d4,a1
0001C77E 1811                       		move.b	(a1),d4
0001C780 6600                       		bne.s	Obj09_ChkCont
0001C782 4A28 003A                  		tst.b	$3A(a0)
0001C786 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C78A 7800                       		moveq	#0,d4
0001C78C 4E75                       		rts	
0001C78E                            ; ===========================================================================
0001C78E                            
0001C78E                            Obj09_ChkCont:
0001C78E 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C792 6600                       		bne.s	Obj09_Chk1Up
0001C794 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001C798 6600                       		bne.s	Obj09_GetCont
0001C79A 14BC 0001                  		move.b	#1,(a2)
0001C79E 2549 0004                  		move.l	a1,4(a2)
0001C7A2                            
0001C7A2                            Obj09_GetCont:
0001C7A2 4EB9 0000 A3A8             		jsr	CollectRing
0001C7A8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C7AE 6500                       		bcs.s	Obj09_NoCont
0001C7B0 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C7B6 6600                       		bne.s	Obj09_NoCont
0001C7B8 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C7BC 303C 00BF                  		move.w	#$BF,d0
0001C7C0 4EB9 0000 15CC             		jsr	(PlaySound).l	; play extra continue sound
0001C7C6                            
0001C7C6                            Obj09_NoCont:
0001C7C6 7800                       		moveq	#0,d4
0001C7C8 4E75                       		rts	
0001C7CA                            ; ===========================================================================
0001C7CA                            
0001C7CA                            Obj09_Chk1Up:
0001C7CA 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C7CE 6600                       		bne.s	Obj09_ChkEmer
0001C7D0 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001C7D4 6600                       		bne.s	Obj09_Get1Up
0001C7D6 14BC 0003                  		move.b	#3,(a2)
0001C7DA 2549 0004                  		move.l	a1,4(a2)
0001C7DE                            
0001C7DE                            Obj09_Get1Up:
0001C7DE 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C7E2 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C7E6 303C 0088                  		move.w	#$88,d0
0001C7EA 4EB9 0000 15CC             		jsr	(PlaySound).l	; play extra life music
0001C7F0 7800                       		moveq	#0,d4
0001C7F2 4E75                       		rts	
0001C7F4                            ; ===========================================================================
0001C7F4                            
0001C7F4                            Obj09_ChkEmer:
0001C7F4 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C7F8 6500                       		bcs.s	Obj09_UPblock
0001C7FA 0C04 0040                  		cmpi.b	#$40,d4
0001C7FE 6200                       		bhi.s	Obj09_UPblock
0001C800 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001C804 6600                       		bne.s	Obj09_GetEmer
0001C806 14BC 0005                  		move.b	#5,(a2)
0001C80A 2549 0004                  		move.l	a1,4(a2)
0001C80E                            
0001C80E                            Obj09_GetEmer:
0001C80E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C814 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C816 0404 003B                  		subi.b	#$3B,d4
0001C81A 7000                       		moveq	#0,d0
0001C81C 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C820 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C824 1584 0000                  		move.b	d4,(a2,d0.w)
0001C828 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C82C                            
0001C82C                            Obj09_NoEmer:
0001C82C 303C 0093                  		move.w	#$93,d0
0001C830 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play emerald music
0001C836 7800                       		moveq	#0,d4
0001C838 4E75                       		rts	
0001C83A                            
0001C83A                            ; ===========================================================================
0001C83A                            
0001C83A                            Obj09_UPblock:
0001C83A 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001C83E 6600                       		bne.s	Obj09_DOWNblock
0001C840 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001C844 6600                       		bne.s	Obj09_SpeedUp
0001C846 14BC 0001                  		move.b	#1,(a2)
0001C84A 2549 0004                  		move.l	a1,4(a2)
0001C84E                            
0001C84E                            Obj09_SpeedUp:
0001C84E 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001C854 6400                       		bhs.s	Obj09_UPsnd
0001C856 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001C85A                            
0001C85A                            Obj09_UPsnd:
0001C85A 303C 00A9                  		move.w	#$A9,d0
0001C85E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play up/down sound
0001C864 7800                       		moveq	#0,d4
0001C866 4E75                       		rts	
0001C868                            ; ===========================================================================
0001C868                            
0001C868                            Obj09_DOWNblock:
0001C868 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001C86C 6600                       		bne.s	Obj09_Rblock
0001C86E 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001C872 6600                       		bne.s	Obj09_SpeedDown
0001C874 14BC 0001                  		move.b	#1,(a2)
0001C878 2549 0004                  		move.l	a1,4(a2)
0001C87C                            
0001C87C                            Obj09_SpeedDown:
0001C87C 4A78 F786                  		tst.w 	($FFFFF786).w
0001C880 6700                       		beq.s	Obj09_DOWNsnd
0001C882 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001C886                            
0001C886                            Obj09_DOWNsnd:
0001C886 303C 00A9                  		move.w	#$A9,d0
0001C88A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play up/down sound
0001C890 7800                       		moveq	#0,d4
0001C892 4E75                       		rts	
0001C894                            ; ===========================================================================
0001C894                            
0001C894                            Obj09_Rblock:
0001C894 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001C898 6600                       		bne.s	Obj09_ChkGhost
0001C89A 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001C89E 6600                       		bne.s	Obj09_RevStage
0001C8A0 14BC 0001                  		move.b	#1,(a2)
0001C8A4 2549 0004                  		move.l	a1,4(a2)
0001C8A8                            
0001C8A8                            Obj09_RevStage:
0001C8A8 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001C8AE 103C 00A9                  		move.b	#$A9,d0
0001C8B2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play sound
0001C8B8 7800                       		moveq	#0,d4
0001C8BA 4E75                       		rts	
0001C8BC                            
0001C8BC                            ; ===========================================================================
0001C8BC                            
0001C8BC                            Obj09_ChkGhost:
0001C8BC 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C8C0 6600                       		bne.s	Obj09_ChkGhostTag
0001C8C2 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C8C8                            
0001C8C8                            Obj09_ChkGhostTag:
0001C8C8 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C8CC 6600                       		bne.s	Obj09_NoGhost
0001C8CE 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C8D4 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C8D6 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C8DC                            
0001C8DC                            Obj09_NoGhost:
0001C8DC 78FF                       		moveq	#-1,d4
0001C8DE 4E75                       		rts	
0001C8E0                            ; ===========================================================================
0001C8E0                            
0001C8E0                            Obj09_MakeGhostSolid:
0001C8E0 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C8E6 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C8E8 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C8EE 723F                       		moveq	#$3F,d1
0001C8F0                            
0001C8F0                            Obj09_GhostLoop2:
0001C8F0 743F                       		moveq	#$3F,d2
0001C8F2                            
0001C8F2                            Obj09_GhostLoop:
0001C8F2 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C8F6 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C8F8 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C8FC                            
0001C8FC                            Obj09_NoReplace:
0001C8FC 5249                       		addq.w	#1,a1
0001C8FE 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C902 43E9 0040                  		lea	$40(a1),a1
0001C906 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C90A                            
0001C90A                            Obj09_GhostNotSolid:
0001C90A 4228 003A                  		clr.b	$3A(a0)
0001C90E 7800                       		moveq	#0,d4
0001C910 4E75                       		rts	
0001C912                            ; End of function Obj09_ChkItems
0001C912                            
0001C912                            
0001C912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C912                            
0001C912                            
0001C912                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C912 1028 0030                  		move.b	$30(a0),d0
0001C916 6600                       		bne.s	Obj09_GOAL
0001C918 5328 0036                  		subq.b	#1,$36(a0)
0001C91C 6A00                       		bpl.s	loc_1BEA0
0001C91E 117C 0000 0036             		move.b	#0,$36(a0)
0001C924                            
0001C924                            loc_1BEA0:
0001C924 5328 0037                  		subq.b	#1,$37(a0)
0001C928 6A00                       		bpl.s	locret_1BEAC
0001C92A 117C 0000 0037             		move.b	#0,$37(a0)
0001C930                            
0001C930                            locret_1BEAC:
0001C930 4E75                       		rts	
0001C932                            ; ===========================================================================
0001C932                            
0001C932                            ; ===========================================================================
0001C932                            
0001C932                            Obj09_GOAL:
0001C932 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C936 6600                       		bne.s	Obj09_ChkGlass
0001C938 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C93C 303C 00A8                  		move.w	#$A8,d0		; change item
0001C940 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C946 4E75                       		rts	
0001C948                            ; ===========================================================================
0001C948                            
0001C948                            ; ===========================================================================
0001C948                            
0001C948                            Obj09_ChkGlass:
0001C948 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C94C 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C94E 0C00 002E                  		cmpi.b	#$2E,d0
0001C952 6700                       		beq.s	Obj09_Glass
0001C954 0C00 002F                  		cmpi.b	#$2F,d0
0001C958 6700                       		beq.s	Obj09_Glass
0001C95A 0C00 0030                  		cmpi.b	#$30,d0
0001C95E 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C960                            
0001C960                            Obj09_Glass:
0001C960 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001C964 6600                       		bne.s	Obj09_GlassSnd
0001C966 14BC 0006                  		move.b	#6,(a2)
0001C96A 2268 0032                  		movea.l	$32(a0),a1
0001C96E 5389                       		subq.l	#1,a1
0001C970 2549 0004                  		move.l	a1,4(a2)
0001C974 1011                       		move.b	(a1),d0
0001C976 5200                       		addq.b	#1,d0		; change glass type when touched
0001C978 0C00 0030                  		cmpi.b	#$30,d0
0001C97C 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C97E 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C980                            
0001C980                            Obj09_GlassUpdate:
0001C980 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C984                            
0001C984                            Obj09_GlassSnd:
0001C984 303C 00BA                  		move.w	#$BA,d0
0001C988 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C98E                            ; ===========================================================================
0001C98E                            
0001C98E                            Obj09_NoGlass:
0001C98E 4E75                       		rts	
0001C990                            ; End of function Obj09_ChkItems2
0001C990                            
0001C990                            ; ===========================================================================
0001C990                            ; ---------------------------------------------------------------------------
0001C990                            ; Object 10 - blank
0001C990                            ; ---------------------------------------------------------------------------
0001C990                            
0001C990                            Obj10:					; XREF: Obj_Index
0001C990 4E75                       		rts	
0001C992                            ; ---------------------------------------------------------------------------
0001C992                            ; Subroutine to	animate	level graphics
0001C992                            ; ---------------------------------------------------------------------------
0001C992                            
0001C992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C992                            
0001C992                            
0001C992                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C992 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C996 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C998 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C99E 6100 0000                  		bsr.w	AniArt_GiantRing
0001C9A2 7000                       		moveq	#0,d0
0001C9A4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C9A8 D040                       		add.w	d0,d0
0001C9AA 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C9AE 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C9B2                            ; ===========================================================================
0001C9B2                            
0001C9B2                            AniArt_Pause:
0001C9B2 4E75                       		rts	
0001C9B4                            ; End of function AniArt_Load
0001C9B4                            
0001C9B4                            ; ===========================================================================
0001C9B4 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C9B8 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C9BC 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C9C0 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C9C2                            ; ===========================================================================
0001C9C2                            ; ---------------------------------------------------------------------------
0001C9C2                            ; Animated pattern routine - Green Hill
0001C9C2                            ; ---------------------------------------------------------------------------
0001C9C2                            
0001C9C2                            AniArt_GHZ:				; XREF: AniArt_Index
0001C9C2 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C9C6 6A00                       		bpl.s	loc_1C08A
0001C9C8 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C9CE 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C9D4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C9D8 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C9DC 0240 0001                  		andi.w	#1,d0
0001C9E0 6700                       		beq.s	loc_1C078
0001C9E2 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C9E6                            
0001C9E6                            loc_1C078:
0001C9E6 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C9F0 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C9F4 6000 0000                  		bra.w	LoadTiles
0001C9F8                            ; ===========================================================================
0001C9F8                            
0001C9F8                            loc_1C08A:
0001C9F8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C9FC 6A00                       		bpl.s	loc_1C0C0
0001C9FE 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CA04 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CA0A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CA0E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CA12 0240 0001                  		andi.w	#1,d0
0001CA16 6700                       		beq.s	loc_1C0AE
0001CA18 43E9 0200                  		lea	$200(a1),a1
0001CA1C                            
0001CA1C                            loc_1C0AE:
0001CA1C 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CA26 323C 000F                  		move.w	#$F,d1
0001CA2A 6000 0000                  		bra.w	LoadTiles
0001CA2E                            ; ===========================================================================
0001CA2E                            
0001CA2E                            loc_1C0C0:
0001CA2E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA32 6A00                       		bpl.s	locret_1C10C
0001CA34 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CA3A 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CA3E 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CA42 0240 0003                  		andi.w	#3,d0
0001CA46 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CA4A 0800 0000                  		btst	#0,d0
0001CA4E 6600                       		bne.s	loc_1C0E8
0001CA50 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CA56                            
0001CA56                            loc_1C0E8:
0001CA56 EF48                       		lsl.w	#7,d0
0001CA58 3200                       		move.w	d0,d1
0001CA5A D040                       		add.w	d0,d0
0001CA5C D041                       		add.w	d1,d0
0001CA5E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CA68 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CA6E 43F1 0000                  		lea	(a1,d0.w),a1
0001CA72 323C 000B                  		move.w	#$B,d1
0001CA76 6100 0000                  		bsr.w	LoadTiles
0001CA7A                            
0001CA7A                            locret_1C10C:
0001CA7A 4E75                       		rts	
0001CA7C                            ; ===========================================================================
0001CA7C 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CA80                            ; ===========================================================================
0001CA80                            ; ---------------------------------------------------------------------------
0001CA80                            ; Animated pattern routine - Marble
0001CA80                            ; ---------------------------------------------------------------------------
0001CA80                            
0001CA80                            AniArt_MZ:				; XREF: AniArt_Index
0001CA80 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CA84 6A00                       		bpl.s	loc_1C150
0001CA86 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CA8C 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CA92 7000                       		moveq	#0,d0
0001CA94 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA98 5200                       		addq.b	#1,d0
0001CA9A 0C00 0003                  		cmpi.b	#3,d0
0001CA9E 6600                       		bne.s	loc_1C134
0001CAA0 7000                       		moveq	#0,d0
0001CAA2                            
0001CAA2                            loc_1C134:
0001CAA2 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CAA6 C0FC 0100                  		mulu.w	#$100,d0
0001CAAA D2C0                       		adda.w	d0,a1
0001CAAC 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CAB6 323C 0007                  		move.w	#7,d1
0001CABA 6100 0000                  		bsr.w	LoadTiles
0001CABE                            
0001CABE                            loc_1C150:
0001CABE 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CAC2 6A00                       		bpl.s	loc_1C1AE
0001CAC4 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CACA 7000                       		moveq	#0,d0
0001CACC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CAD0 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CAD6 EE58                       		ror.w	#7,d0
0001CAD8 D8C0                       		adda.w	d0,a4
0001CADA 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CAE4 7600                       		moveq	#0,d3
0001CAE6 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CAEA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CAEE 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CAF2 343C 0003                  		move.w	#3,d2
0001CAF6                            
0001CAF6                            loc_1C188:
0001CAF6 3003                       		move.w	d3,d0
0001CAF8 D040                       		add.w	d0,d0
0001CAFA 0240 001E                  		andi.w	#$1E,d0
0001CAFE 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CB04 3033 0000                  		move.w	(a3,d0.w),d0
0001CB08 47F3 0000                  		lea	(a3,d0.w),a3
0001CB0C 224C                       		movea.l	a4,a1
0001CB0E 323C 001F                  		move.w	#$1F,d1
0001CB12 4E93                       		jsr	(a3)
0001CB14 5843                       		addq.w	#4,d3
0001CB16 51CA FFDE                  		dbf	d2,loc_1C188
0001CB1A 4E75                       		rts	
0001CB1C                            ; ===========================================================================
0001CB1C                            
0001CB1C                            loc_1C1AE:
0001CB1C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB20 6A00 0000                  		bpl.w	locret_1C1EA
0001CB24 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CB2A 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CB30 7000                       		moveq	#0,d0
0001CB32 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CB36 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CB3A 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CB40 C0FC 00C0                  		mulu.w	#$C0,d0
0001CB44 D2C0                       		adda.w	d0,a1
0001CB46 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CB50 323C 0005                  		move.w	#5,d1
0001CB54 6000 0000                  		bra.w	LoadTiles
0001CB58                            ; ===========================================================================
0001CB58                            
0001CB58                            locret_1C1EA:
0001CB58 4E75                       		rts	
0001CB5A                            ; ===========================================================================
0001CB5A                            ; ---------------------------------------------------------------------------
0001CB5A                            ; Animated pattern routine - Scrap Brain
0001CB5A                            ; ---------------------------------------------------------------------------
0001CB5A                            
0001CB5A                            AniArt_SBZ:				; XREF: AniArt_Index
0001CB5A 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CB5E 6700                       		beq.s	loc_1C1F8
0001CB60 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CB64 6000                       		bra.s	loc_1C250
0001CB66                            ; ===========================================================================
0001CB66                            
0001CB66                            loc_1C1F8:
0001CB66 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CB6A 6A00                       		bpl.s	loc_1C250
0001CB6C 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CB72 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CB78 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CB82 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CB86 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CB8A 0240 0007                  		andi.w	#7,d0
0001CB8E 6700                       		beq.s	loc_1C234
0001CB90 5340                       		subq.w	#1,d0
0001CB92 C0FC 0180                  		mulu.w	#$180,d0
0001CB96 43F1 0000                  		lea	(a1,d0.w),a1
0001CB9A 323C 000B                  		move.w	#$B,d1
0001CB9E 6000 0000                  		bra.w	LoadTiles
0001CBA2                            ; ===========================================================================
0001CBA2                            
0001CBA2                            loc_1C234:
0001CBA2 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CBA8                            
0001CBA8                            loc_1C23A:
0001CBA8 323C 0005                  		move.w	#5,d1
0001CBAC 6100 0000                  		bsr.w	LoadTiles
0001CBB0 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CBB6 323C 0005                  		move.w	#5,d1
0001CBBA 6000 0000                  		bra.w	LoadTiles
0001CBBE                            ; ===========================================================================
0001CBBE                            
0001CBBE                            loc_1C250:
0001CBBE 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CBC2 6700                       		beq.s	loc_1C25C
0001CBC4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CBC8 6000                       		bra.s	locret_1C2A0
0001CBCA                            ; ===========================================================================
0001CBCA                            
0001CBCA                            loc_1C25C:
0001CBCA 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CBCE 6A00                       		bpl.s	locret_1C2A0
0001CBD0 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CBD6 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CBDC 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CBE6 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CBEA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CBEE 0240 0007                  		andi.w	#7,d0
0001CBF2 6700                       		beq.s	loc_1C298
0001CBF4 5340                       		subq.w	#1,d0
0001CBF6 C0FC 0180                  		mulu.w	#$180,d0
0001CBFA 43F1 0000                  		lea	(a1,d0.w),a1
0001CBFE 323C 000B                  		move.w	#$B,d1
0001CC02 6000 0000                  		bra.w	LoadTiles
0001CC06                            ; ===========================================================================
0001CC06                            
0001CC06                            loc_1C298:
0001CC06 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CC0C 609A                       		bra.s	loc_1C23A
0001CC0E                            ; ===========================================================================
0001CC0E                            
0001CC0E                            locret_1C2A0:
0001CC0E 4E75                       		rts	
0001CC10                            ; ===========================================================================
0001CC10                            ; ---------------------------------------------------------------------------
0001CC10                            ; Animated pattern routine - ending sequence
0001CC10                            ; ---------------------------------------------------------------------------
0001CC10                            
0001CC10                            AniArt_Ending:				; XREF: AniArt_Index
0001CC10 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CC14 6A00                       		bpl.s	loc_1C2F4
0001CC16 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CC1C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CC22 45F8 9400                  		lea	($FFFF9400).w,a2
0001CC26 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CC2A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CC2E 0240 0001                  		andi.w	#1,d0
0001CC32 6700                       		beq.s	loc_1C2CE
0001CC34 43E9 0200                  		lea	$200(a1),a1
0001CC38 45EA 0200                  		lea	$200(a2),a2
0001CC3C                            
0001CC3C                            loc_1C2CE:
0001CC3C 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CC46 323C 000F                  		move.w	#$F,d1
0001CC4A 6100 0000                  		bsr.w	LoadTiles
0001CC4E 224A                       		movea.l	a2,a1
0001CC50 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CC5A 323C 000F                  		move.w	#$F,d1
0001CC5E 6000 0000                  		bra.w	LoadTiles
0001CC62                            ; ===========================================================================
0001CC62                            
0001CC62                            loc_1C2F4:
0001CC62 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CC66 6A00                       		bpl.s	loc_1C33C
0001CC68 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CC6E 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CC72 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CC76 0240 0007                  		andi.w	#7,d0
0001CC7A 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CC7E EF48                       		lsl.w	#7,d0
0001CC80 3200                       		move.w	d0,d1
0001CC82 D040                       		add.w	d0,d0
0001CC84 D041                       		add.w	d1,d0
0001CC86 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CC90 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CC96 43F1 0000                  		lea	(a1,d0.w),a1
0001CC9A 323C 000B                  		move.w	#$B,d1
0001CC9E 6000 0000                  		bra.w	LoadTiles
0001CCA2                            ; ===========================================================================
0001CCA2 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CCAA                            ; ===========================================================================
0001CCAA                            
0001CCAA                            loc_1C33C:
0001CCAA 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CCAE 6A00                       		bpl.s	loc_1C37A
0001CCB0 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CCB6 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CCBA 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CCBE 0240 0003                  		andi.w	#3,d0
0001CCC2 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CCC6 E148                       		lsl.w	#8,d0
0001CCC8 D040                       		add.w	d0,d0
0001CCCA 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CCD4 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CCD8 43F1 0000                  		lea	(a1,d0.w),a1
0001CCDC 323C 000F                  		move.w	#$F,d1
0001CCE0 6000 0000                  		bra.w	LoadTiles
0001CCE4                            ; ===========================================================================
0001CCE4 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CCE8                            ; ===========================================================================
0001CCE8                            
0001CCE8                            loc_1C37A:
0001CCE8 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CCEC 6A00                       		bpl.s	locret_1C3B4
0001CCEE 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CCF4 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CCF8 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CCFC 0240 0003                  		andi.w	#3,d0
0001CD00 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CD04 E148                       		lsl.w	#8,d0
0001CD06 D040                       		add.w	d0,d0
0001CD08 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CD12 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CD16 43F1 0000                  		lea	(a1,d0.w),a1
0001CD1A 323C 000F                  		move.w	#$F,d1
0001CD1E 6000 0000                  		bra.w	LoadTiles
0001CD22                            ; ===========================================================================
0001CD22                            
0001CD22                            locret_1C3B4:
0001CD22 4E75                       		rts	
0001CD24                            ; ===========================================================================
0001CD24                            
0001CD24                            AniArt_none:				; XREF: AniArt_Index
0001CD24 4E75                       		rts	
0001CD26                            
0001CD26                            ; ---------------------------------------------------------------------------
0001CD26                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CD26                            ; ---------------------------------------------------------------------------
0001CD26                            
0001CD26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD26                            
0001CD26                            
0001CD26                            LoadTiles:
0001CD26 2C99                       		move.l	(a1)+,(a6)
0001CD28 2C99                       		move.l	(a1)+,(a6)
0001CD2A 2C99                       		move.l	(a1)+,(a6)
0001CD2C 2C99                       		move.l	(a1)+,(a6)
0001CD2E 2C99                       		move.l	(a1)+,(a6)
0001CD30 2C99                       		move.l	(a1)+,(a6)
0001CD32 2C99                       		move.l	(a1)+,(a6)
0001CD34 2C99                       		move.l	(a1)+,(a6)
0001CD36 51C9 FFEE                  		dbf	d1,LoadTiles
0001CD3A 4E75                       		rts	
0001CD3C                            ; End of function LoadTiles
0001CD3C                            
0001CD3C                            ; ===========================================================================
0001CD3C                            ; ---------------------------------------------------------------------------
0001CD3C                            ; Animated pattern routine - more Marble Zone
0001CD3C                            ; ---------------------------------------------------------------------------
0001CD3C 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CD40 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CD44 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CD48 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CD4C 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CD50 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CD54 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CD58 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CD5C                            ; ===========================================================================
0001CD5C                            
0001CD5C                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CD5C 2C91                       		move.l	(a1),(a6)
0001CD5E 43E9 0010                  		lea	$10(a1),a1
0001CD62 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CD66 4E75                       		rts	
0001CD68                            ; ===========================================================================
0001CD68                            
0001CD68                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CD68 2029 0002                  		move.l	2(a1),d0
0001CD6C 1029 0001                  		move.b	1(a1),d0
0001CD70 E098                       		ror.l	#8,d0
0001CD72 2C80                       		move.l	d0,(a6)
0001CD74 43E9 0010                  		lea	$10(a1),a1
0001CD78 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CD7C 4E75                       		rts	
0001CD7E                            ; ===========================================================================
0001CD7E                            
0001CD7E                            loc_1C410:				; XREF: AniArt_MZextra
0001CD7E 2CA9 0002                  		move.l	2(a1),(a6)
0001CD82 43E9 0010                  		lea	$10(a1),a1
0001CD86 51C9 FFF6                  		dbf	d1,loc_1C410
0001CD8A 4E75                       		rts	
0001CD8C                            ; ===========================================================================
0001CD8C                            
0001CD8C                            loc_1C41E:				; XREF: AniArt_MZextra
0001CD8C 2029 0004                  		move.l	4(a1),d0
0001CD90 1029 0003                  		move.b	3(a1),d0
0001CD94 E098                       		ror.l	#8,d0
0001CD96 2C80                       		move.l	d0,(a6)
0001CD98 43E9 0010                  		lea	$10(a1),a1
0001CD9C 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CDA0 4E75                       		rts	
0001CDA2                            ; ===========================================================================
0001CDA2                            
0001CDA2                            loc_1C434:				; XREF: AniArt_MZextra
0001CDA2 2CA9 0004                  		move.l	4(a1),(a6)
0001CDA6 43E9 0010                  		lea	$10(a1),a1
0001CDAA 51C9 FFF6                  		dbf	d1,loc_1C434
0001CDAE 4E75                       		rts	
0001CDB0                            ; ===========================================================================
0001CDB0                            
0001CDB0                            loc_1C442:				; XREF: AniArt_MZextra
0001CDB0 2029 0006                  		move.l	6(a1),d0
0001CDB4 1029 0005                  		move.b	5(a1),d0
0001CDB8 E098                       		ror.l	#8,d0
0001CDBA 2C80                       		move.l	d0,(a6)
0001CDBC 43E9 0010                  		lea	$10(a1),a1
0001CDC0 51C9 FFEE                  		dbf	d1,loc_1C442
0001CDC4 4E75                       		rts	
0001CDC6                            ; ===========================================================================
0001CDC6                            
0001CDC6                            loc_1C458:				; XREF: AniArt_MZextra
0001CDC6 2CA9 0006                  		move.l	6(a1),(a6)
0001CDCA 43E9 0010                  		lea	$10(a1),a1
0001CDCE 51C9 FFF6                  		dbf	d1,loc_1C458
0001CDD2 4E75                       		rts	
0001CDD4                            ; ===========================================================================
0001CDD4                            
0001CDD4                            loc_1C466:				; XREF: AniArt_MZextra
0001CDD4 2029 0008                  		move.l	8(a1),d0
0001CDD8 1029 0007                  		move.b	7(a1),d0
0001CDDC E098                       		ror.l	#8,d0
0001CDDE 2C80                       		move.l	d0,(a6)
0001CDE0 43E9 0010                  		lea	$10(a1),a1
0001CDE4 51C9 FFEE                  		dbf	d1,loc_1C466
0001CDE8 4E75                       		rts	
0001CDEA                            ; ===========================================================================
0001CDEA                            
0001CDEA                            loc_1C47C:				; XREF: AniArt_MZextra
0001CDEA 2CA9 0008                  		move.l	8(a1),(a6)
0001CDEE 43E9 0010                  		lea	$10(a1),a1
0001CDF2 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CDF6 4E75                       		rts	
0001CDF8                            ; ===========================================================================
0001CDF8                            
0001CDF8                            loc_1C48A:				; XREF: AniArt_MZextra
0001CDF8 2029 000A                  		move.l	$A(a1),d0
0001CDFC 1029 0009                  		move.b	9(a1),d0
0001CE00 E098                       		ror.l	#8,d0
0001CE02 2C80                       		move.l	d0,(a6)
0001CE04 43E9 0010                  		lea	$10(a1),a1
0001CE08 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CE0C 4E75                       		rts	
0001CE0E                            ; ===========================================================================
0001CE0E                            
0001CE0E                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CE0E 2CA9 000A                  		move.l	$A(a1),(a6)
0001CE12 43E9 0010                  		lea	$10(a1),a1
0001CE16 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CE1A 4E75                       		rts	
0001CE1C                            ; ===========================================================================
0001CE1C                            
0001CE1C                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CE1C 2029 000C                  		move.l	$C(a1),d0
0001CE20 1029 000B                  		move.b	$B(a1),d0
0001CE24 E098                       		ror.l	#8,d0
0001CE26 2C80                       		move.l	d0,(a6)
0001CE28 43E9 0010                  		lea	$10(a1),a1
0001CE2C 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CE30 4E75                       		rts	
0001CE32                            ; ===========================================================================
0001CE32                            
0001CE32                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CE32 2CA9 000C                  		move.l	$C(a1),(a6)
0001CE36 43E9 0010                  		lea	$10(a1),a1
0001CE3A 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CE3E 4E75                       		rts	
0001CE40                            ; ===========================================================================
0001CE40                            
0001CE40                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CE40 2029 000C                  		move.l	$C(a1),d0
0001CE44 E198                       		rol.l	#8,d0
0001CE46 1011                       		move.b	0(a1),d0
0001CE48 2C80                       		move.l	d0,(a6)
0001CE4A 43E9 0010                  		lea	$10(a1),a1
0001CE4E 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CE52 4E75                       		rts	
0001CE54                            ; ===========================================================================
0001CE54                            
0001CE54                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CE54 3CA9 000E                  		move.w	$E(a1),(a6)
0001CE58 3C91                       		move.w	0(a1),(a6)
0001CE5A 43E9 0010                  		lea	$10(a1),a1
0001CE5E 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CE62 4E75                       		rts	
0001CE64                            ; ===========================================================================
0001CE64                            
0001CE64                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CE64 2011                       		move.l	0(a1),d0
0001CE66 1029 000F                  		move.b	$F(a1),d0
0001CE6A E098                       		ror.l	#8,d0
0001CE6C 2C80                       		move.l	d0,(a6)
0001CE6E 43E9 0010                  		lea	$10(a1),a1
0001CE72 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CE76 4E75                       		rts	
0001CE78                            
0001CE78                            ; ---------------------------------------------------------------------------
0001CE78                            ; Animated pattern routine - giant ring
0001CE78                            ; ---------------------------------------------------------------------------
0001CE78                            
0001CE78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE78                            
0001CE78                            
0001CE78                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CE78 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CE7C 6600                       		bne.s	loc_1C518
0001CE7E 4E75                       		rts	
0001CE80                            ; ===========================================================================
0001CE80                            
0001CE80                            loc_1C518:
0001CE80 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CE86 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CE8C 7000                       		moveq	#0,d0
0001CE8E 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CE92 43F1 0000                  		lea	(a1,d0.w),a1
0001CE96 0640 8000                  		addi.w	#$8000,d0
0001CE9A E588                       		lsl.l	#2,d0
0001CE9C E448                       		lsr.w	#2,d0
0001CE9E 0040 4000                  		ori.w	#$4000,d0
0001CEA2 4840                       		swap	d0
0001CEA4 2D40 0004                  		move.l	d0,4(a6)
0001CEA8 323C 000D                  		move.w	#$D,d1
0001CEAC 6000 FE78                  		bra.w	LoadTiles
0001CEB0                            ; End of function AniArt_GiantRing
0001CEB0                            
0001CEB0                            ; ===========================================================================
0001CEB0                            ; ---------------------------------------------------------------------------
0001CEB0                            ; Object 21 - SCORE, TIME, RINGS
0001CEB0                            ; ---------------------------------------------------------------------------
0001CEB0                            
0001CEB0                            Obj21:					; XREF: Obj_Index
0001CEB0 7000                       		moveq	#0,d0
0001CEB2 1028 0024                  		move.b	$24(a0),d0
0001CEB6 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CEBA 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CEBE                            ; ===========================================================================
0001CEBE 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CEC0 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CEC2                            ; ===========================================================================
0001CEC2                            
0001CEC2                            Obj21_Main:				; XREF: Obj21_Main
0001CEC2 5428 0024                  		addq.b	#2,$24(a0)
0001CEC6 317C 0090 0008             		move.w	#$90,8(a0)
0001CECC 317C 0108 000A             		move.w	#$108,$A(a0)
0001CED2 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CEDA 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CEE0 117C 0000 0001             		move.b	#0,1(a0)
0001CEE6 117C 0000 0018             		move.b	#0,$18(a0)
0001CEEC                            
0001CEEC                            Obj21_Flash:				; XREF: Obj21_Main
0001CEEC 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CEF0 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CEF2 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CEF6 4EF9 0000 DEA8             		jmp	DisplaySprite
0001CEFC                            ; ===========================================================================
0001CEFC                            
0001CEFC                            Obj21_Flash2:
0001CEFC 7000                       		moveq	#0,d0
0001CEFE 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CF04 6600                       		bne.s	Obj21_Display
0001CF06 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CF08 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CF0E 6600                       		bne.s	Obj21_Display	; if not, branch
0001CF10 5440                       		addq.w	#2,d0		; make time counter flash red
0001CF12                            
0001CF12                            Obj21_Display:
0001CF12 1140 001A                  		move.b	d0,$1A(a0)
0001CF16 4EF9 0000 DEA8             		jmp	DisplaySprite
0001CF1C                            ; ===========================================================================
0001CF1C                            ; ---------------------------------------------------------------------------
0001CF1C                            ; Sprite mappings - SCORE, TIME, RINGS
0001CF1C                            ; ---------------------------------------------------------------------------
0001CF1C                            Map_obj21:
0001CF1C                            	include "_maps\obj21.asm"
0001CF1C                            ; ---------------------------------------------------------------------------
0001CF1C                            ; Sprite mappings - SCORE, TIME, RINGS
0001CF1C                            ; ---------------------------------------------------------------------------
0001CF1C 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CF20 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CF24 0A                         byte_1C5BC:	dc.b $A
0001CF25 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF2A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF2F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF34 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CF39 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF3E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CF43 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CF48 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF4D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF52 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF57 00                         		dc.b 0
0001CF58 0A                         byte_1C5F0:	dc.b $A
0001CF59 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF5E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF63 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF68 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CF6D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF72 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CF77 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CF7C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF81 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF86 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF8B 00                         		dc.b 0
0001CF8C 0A                         byte_1C624:	dc.b $A
0001CF8D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF92 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF97 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF9C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CFA1 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CFA6 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CFAB A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CFB0 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CFB5 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CFBA 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CFBF 00                         		dc.b 0
0001CFC0 0A                         byte_1C658:	dc.b $A
0001CFC1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CFC6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CFCB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CFD0 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CFD5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CFDA A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CFDF A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CFE4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CFE9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CFEE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CFF4 00                         		even
0001CFF4 00                         		even
0001CFF4                            
0001CFF4                            ; ---------------------------------------------------------------------------
0001CFF4                            ; Add points subroutine
0001CFF4                            ; ---------------------------------------------------------------------------
0001CFF4                            
0001CFF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFF4                            
0001CFF4                            
0001CFF4                            AddPoints:
0001CFF4 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CFFA 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CFFE 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D002 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D004 223C 000F 423F             		move.l	#999999,d1
0001D00A B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D00C 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D010 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D012 2481                       		move.l	d1,(a2)
0001D014                            
0001D014                            loc_1C6AC:
0001D014 2013                       		move.l	(a3),d0
0001D016 B092                       		cmp.l	(a2),d0
0001D018 6500 0000                  		bcs.w	locret_1C6B6
0001D01C 2480                       		move.l	d0,(a2)
0001D01E                            
0001D01E                            locret_1C6B6:
0001D01E 4E75                       		rts	
0001D020                            ; End of function AddPoints
0001D020                            
0001D020                            ; ---------------------------------------------------------------------------
0001D020                            ; Subroutine to	update the HUD
0001D020                            ; ---------------------------------------------------------------------------
0001D020                            
0001D020                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D020                            
0001D020                            
0001D020                            HudUpdate:
0001D020 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D024 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D028 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D02C 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D02E 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D032 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D038 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D03C 6100 0000                  		bsr.w	Hud_Score
0001D040                            
0001D040                            Hud_ChkRings:
0001D040 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D044 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D046 6A00                       		bpl.s	loc_1C6E4
0001D048 6100 0000                  		bsr.w	Hud_LoadZero
0001D04C                            
0001D04C                            loc_1C6E4:
0001D04C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D050 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D056 7200                       		moveq	#0,d1
0001D058 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D05C 6100 0000                  		bsr.w	Hud_Rings
0001D060                            
0001D060                            Hud_ChkTime:
0001D060 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D064 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D066 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D06A 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D06C 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D070 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D076 6700                       		beq.s	TimeOver	; if yes, branch
0001D078 5221                       		addq.b	#1,-(a1)
0001D07A 0C11 003C                  		cmpi.b	#60,(a1)
0001D07E 6500                       		bcs.s	Hud_ChkLives
0001D080 12BC 0000                  		move.b	#0,(a1)
0001D084 5221                       		addq.b	#1,-(a1)
0001D086 0C11 003C                  		cmpi.b	#60,(a1)
0001D08A 6500                       		bcs.s	loc_1C734
0001D08C 12BC 0000                  		move.b	#0,(a1)
0001D090 5221                       		addq.b	#1,-(a1)
0001D092 0C11 0009                  		cmpi.b	#9,(a1)
0001D096 6500                       		bcs.s	loc_1C734
0001D098 12BC 0009                  		move.b	#9,(a1)
0001D09C                            
0001D09C                            loc_1C734:
0001D09C 203C 5E40 0003             		move.l	#$5E400003,d0
0001D0A2 7200                       		moveq	#0,d1
0001D0A4 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D0A8 6100 0000                  		bsr.w	Hud_Mins
0001D0AC 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D0B2 7200                       		moveq	#0,d1
0001D0B4 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D0B8 6100 0000                  		bsr.w	Hud_Secs
0001D0BC                            
0001D0BC                            Hud_ChkLives:
0001D0BC 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D0C0 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D0C2 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D0C6 6100 0000                  		bsr.w	Hud_Lives
0001D0CA                            
0001D0CA                            Hud_ChkBonus:
0001D0CA 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D0CE 6700                       		beq.s	Hud_End		; if not, branch
0001D0D0 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D0D4 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D0DE 7200                       		moveq	#0,d1
0001D0E0 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D0E4 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0E8 7200                       		moveq	#0,d1
0001D0EA 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D0EE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0F2                            
0001D0F2                            Hud_End:
0001D0F2 4E75                       		rts	
0001D0F4                            ; ===========================================================================
0001D0F4                            
0001D0F4                            TimeOver:				; XREF: Hud_ChkTime
0001D0F4 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D0F8 41F8 D000                  		lea	($FFFFD000).w,a0
0001D0FC 2448                       		movea.l	a0,a2
0001D0FE 6100 E952                  		bsr.w	KillSonic
0001D102 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D108 4E75                       		rts	
0001D10A                            ; ===========================================================================
0001D10A                            
0001D10A                            HudDebug:				; XREF: HudUpdate
0001D10A 6100 0000                  		bsr.w	HudDb_XY
0001D10E 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D112 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D114 6A00                       		bpl.s	HudDb_Rings
0001D116 6100 0000                  		bsr.w	Hud_LoadZero
0001D11A                            
0001D11A                            HudDb_Rings:
0001D11A 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D11E 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D124 7200                       		moveq	#0,d1
0001D126 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D12A 6100 0000                  		bsr.w	Hud_Rings
0001D12E                            
0001D12E                            HudDb_ObjCount:
0001D12E 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D134 7200                       		moveq	#0,d1
0001D136 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D13A 6100 0000                  		bsr.w	Hud_Secs
0001D13E 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D142 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D144 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D148 6100 0000                  		bsr.w	Hud_Lives
0001D14C                            
0001D14C                            HudDb_ChkBonus:
0001D14C 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D150 6700                       		beq.s	HudDb_End	; if not, branch
0001D152 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D156 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D160 7200                       		moveq	#0,d1
0001D162 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D166 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D16A 7200                       		moveq	#0,d1
0001D16C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D170 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D174                            
0001D174                            HudDb_End:
0001D174 4E75                       		rts	
0001D176                            ; End of function HudUpdate
0001D176                            
0001D176                            ; ---------------------------------------------------------------------------
0001D176                            ; Subroutine to	load "0" on the	HUD
0001D176                            ; ---------------------------------------------------------------------------
0001D176                            
0001D176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D176                            
0001D176                            
0001D176                            Hud_LoadZero:				; XREF: HudUpdate
0001D176 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D180 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D184 343C 0002                  		move.w	#2,d2
0001D188 6000                       		bra.s	loc_1C83E
0001D18A                            ; End of function Hud_LoadZero
0001D18A                            
0001D18A                            ; ---------------------------------------------------------------------------
0001D18A                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D18A                            ; ---------------------------------------------------------------------------
0001D18A                            
0001D18A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D18A                            
0001D18A                            
0001D18A                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D18A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D190 6100 0000                  		bsr.w	Hud_Lives
0001D194 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D19E 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D1A2 343C 000E                  		move.w	#$E,d2
0001D1A6                            
0001D1A6                            loc_1C83E:				; XREF: Hud_LoadZero
0001D1A6 43FA 0000                  		lea	Art_Hud(pc),a1
0001D1AA                            
0001D1AA                            loc_1C842:
0001D1AA 323C 000F                  		move.w	#$F,d1
0001D1AE 101A                       		move.b	(a2)+,d0
0001D1B0 6B00                       		bmi.s	loc_1C85E
0001D1B2 4880                       		ext.w	d0
0001D1B4 EB48                       		lsl.w	#5,d0
0001D1B6 47F1 0000                  		lea	(a1,d0.w),a3
0001D1BA                            
0001D1BA                            loc_1C852:
0001D1BA 2C9B                       		move.l	(a3)+,(a6)
0001D1BC 51C9 FFFC                  		dbf	d1,loc_1C852
0001D1C0                            
0001D1C0                            loc_1C858:
0001D1C0 51CA FFE8                  		dbf	d2,loc_1C842
0001D1C4                            
0001D1C4 4E75                       		rts	
0001D1C6                            ; ===========================================================================
0001D1C6                            
0001D1C6                            loc_1C85E:
0001D1C6 2CBC 0000 0000             		move.l	#0,(a6)
0001D1CC 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D1D0                            
0001D1D0 60EE                       		bra.s	loc_1C858
0001D1D2                            ; End of function Hud_Base
0001D1D2                            
0001D1D2                            ; ===========================================================================
0001D1D2 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D1DE FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D1E2                            ; ---------------------------------------------------------------------------
0001D1E2                            ; Subroutine to	load debug mode	numbers	patterns
0001D1E2                            ; ---------------------------------------------------------------------------
0001D1E2                            
0001D1E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1E2                            
0001D1E2                            
0001D1E2                            HudDb_XY:				; XREF: HudDebug
0001D1E2 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D1EC 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D1F0 4841                       		swap	d1
0001D1F2 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D1F6 6100                       		bsr.s	HudDb_XY2
0001D1F8 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D1FC 4841                       		swap	d1
0001D1FE 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D202                            ; End of function HudDb_XY
0001D202                            
0001D202                            
0001D202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D202                            
0001D202                            
0001D202                            HudDb_XY2:
0001D202 7C07                       		moveq	#7,d6
0001D204 43F9 0000 0606             		lea	(Art_Text).l,a1
0001D20A                            
0001D20A                            HudDb_XYLoop:
0001D20A E959                       		rol.w	#4,d1
0001D20C 3401                       		move.w	d1,d2
0001D20E 0242 000F                  		andi.w	#$F,d2
0001D212 0C42 000A                  		cmpi.w	#$A,d2
0001D216 6500                       		bcs.s	loc_1C8B2
0001D218 5E42                       		addq.w	#7,d2
0001D21A                            
0001D21A                            loc_1C8B2:
0001D21A EB4A                       		lsl.w	#5,d2
0001D21C 47F1 2000                  		lea	(a1,d2.w),a3
0001D220 2C9B                       		move.l	(a3)+,(a6)
0001D222 2C9B                       		move.l	(a3)+,(a6)
0001D224 2C9B                       		move.l	(a3)+,(a6)
0001D226 2C9B                       		move.l	(a3)+,(a6)
0001D228 2C9B                       		move.l	(a3)+,(a6)
0001D22A 2C9B                       		move.l	(a3)+,(a6)
0001D22C 2C9B                       		move.l	(a3)+,(a6)
0001D22E 2C9B                       		move.l	(a3)+,(a6)
0001D230 4841                       		swap	d1
0001D232 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D236                            
0001D236 4E75                       		rts	
0001D238                            ; End of function HudDb_XY2
0001D238                            
0001D238                            ; ---------------------------------------------------------------------------
0001D238                            ; Subroutine to	load rings numbers patterns
0001D238                            ; ---------------------------------------------------------------------------
0001D238                            
0001D238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D238                            
0001D238                            
0001D238                            Hud_Rings:				; XREF: HudUpdate
0001D238 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D23E 7C02                       		moveq	#2,d6
0001D240 6000                       		bra.s	Hud_LoadArt
0001D242                            ; End of function Hud_Rings
0001D242                            
0001D242                            ; ---------------------------------------------------------------------------
0001D242                            ; Subroutine to	load score numbers patterns
0001D242                            ; ---------------------------------------------------------------------------
0001D242                            
0001D242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D242                            
0001D242                            
0001D242                            Hud_Score:				; XREF: HudUpdate
0001D242 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D248 7C05                       		moveq	#5,d6
0001D24A                            
0001D24A                            Hud_LoadArt:
0001D24A 7800                       		moveq	#0,d4
0001D24C 43FA 0000                  		lea	Art_Hud(pc),a1
0001D250                            
0001D250                            Hud_ScoreLoop:
0001D250 7400                       		moveq	#0,d2
0001D252 261A                       		move.l	(a2)+,d3
0001D254                            
0001D254                            loc_1C8EC:
0001D254 9283                       		sub.l	d3,d1
0001D256 6500                       		bcs.s	loc_1C8F4
0001D258 5242                       		addq.w	#1,d2
0001D25A 60F8                       		bra.s	loc_1C8EC
0001D25C                            ; ===========================================================================
0001D25C                            
0001D25C                            loc_1C8F4:
0001D25C D283                       		add.l	d3,d1
0001D25E 4A42                       		tst.w	d2
0001D260 6700                       		beq.s	loc_1C8FE
0001D262 383C 0001                  		move.w	#1,d4
0001D266                            
0001D266                            loc_1C8FE:
0001D266 4A44                       		tst.w	d4
0001D268 6700                       		beq.s	loc_1C92C
0001D26A ED4A                       		lsl.w	#6,d2
0001D26C 2D40 0004                  		move.l	d0,4(a6)
0001D270 47F1 2000                  		lea	(a1,d2.w),a3
0001D274 2C9B                       		move.l	(a3)+,(a6)
0001D276 2C9B                       		move.l	(a3)+,(a6)
0001D278 2C9B                       		move.l	(a3)+,(a6)
0001D27A 2C9B                       		move.l	(a3)+,(a6)
0001D27C 2C9B                       		move.l	(a3)+,(a6)
0001D27E 2C9B                       		move.l	(a3)+,(a6)
0001D280 2C9B                       		move.l	(a3)+,(a6)
0001D282 2C9B                       		move.l	(a3)+,(a6)
0001D284 2C9B                       		move.l	(a3)+,(a6)
0001D286 2C9B                       		move.l	(a3)+,(a6)
0001D288 2C9B                       		move.l	(a3)+,(a6)
0001D28A 2C9B                       		move.l	(a3)+,(a6)
0001D28C 2C9B                       		move.l	(a3)+,(a6)
0001D28E 2C9B                       		move.l	(a3)+,(a6)
0001D290 2C9B                       		move.l	(a3)+,(a6)
0001D292 2C9B                       		move.l	(a3)+,(a6)
0001D294                            
0001D294                            loc_1C92C:
0001D294 0680 0040 0000             		addi.l	#$400000,d0
0001D29A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D29E                            
0001D29E 4E75                       		rts	
0001D2A0                            ; End of function Hud_Score
0001D2A0                            
0001D2A0                            ; ---------------------------------------------------------------------------
0001D2A0                            ; Subroutine to	load countdown numbers on the continue screen
0001D2A0                            ; ---------------------------------------------------------------------------
0001D2A0                            
0001D2A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2A0                            
0001D2A0                            
0001D2A0                            ContScrCounter:				; XREF: ContinueScreen
0001D2A0 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D2AA 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D2B0 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D2B6 7C01                       		moveq	#1,d6
0001D2B8 7800                       		moveq	#0,d4
0001D2BA 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D2BE                            
0001D2BE                            ContScr_Loop:
0001D2BE 7400                       		moveq	#0,d2
0001D2C0 261A                       		move.l	(a2)+,d3
0001D2C2                            
0001D2C2                            loc_1C95A:
0001D2C2 9283                       		sub.l	d3,d1
0001D2C4 6500                       		bcs.s	loc_1C962
0001D2C6 5242                       		addq.w	#1,d2
0001D2C8 60F8                       		bra.s	loc_1C95A
0001D2CA                            ; ===========================================================================
0001D2CA                            
0001D2CA                            loc_1C962:
0001D2CA D283                       		add.l	d3,d1
0001D2CC ED4A                       		lsl.w	#6,d2
0001D2CE 47F1 2000                  		lea	(a1,d2.w),a3
0001D2D2 2C9B                       		move.l	(a3)+,(a6)
0001D2D4 2C9B                       		move.l	(a3)+,(a6)
0001D2D6 2C9B                       		move.l	(a3)+,(a6)
0001D2D8 2C9B                       		move.l	(a3)+,(a6)
0001D2DA 2C9B                       		move.l	(a3)+,(a6)
0001D2DC 2C9B                       		move.l	(a3)+,(a6)
0001D2DE 2C9B                       		move.l	(a3)+,(a6)
0001D2E0 2C9B                       		move.l	(a3)+,(a6)
0001D2E2 2C9B                       		move.l	(a3)+,(a6)
0001D2E4 2C9B                       		move.l	(a3)+,(a6)
0001D2E6 2C9B                       		move.l	(a3)+,(a6)
0001D2E8 2C9B                       		move.l	(a3)+,(a6)
0001D2EA 2C9B                       		move.l	(a3)+,(a6)
0001D2EC 2C9B                       		move.l	(a3)+,(a6)
0001D2EE 2C9B                       		move.l	(a3)+,(a6)
0001D2F0 2C9B                       		move.l	(a3)+,(a6)
0001D2F2 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D2F6                            
0001D2F6 4E75                       		rts	
0001D2F8                            ; End of function ContScrCounter
0001D2F8                            
0001D2F8                            ; ===========================================================================
0001D2F8                            ; ---------------------------------------------------------------------------
0001D2F8                            ; HUD counter sizes
0001D2F8                            ; ---------------------------------------------------------------------------
0001D2F8 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D2FC 0000 2710                  Hud_10000:	dc.l 10000
0001D300 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D304 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D308 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D30C 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D310                            
0001D310                            ; ---------------------------------------------------------------------------
0001D310                            ; Subroutine to	load time numbers patterns
0001D310                            ; ---------------------------------------------------------------------------
0001D310                            
0001D310                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D310                            
0001D310                            
0001D310                            Hud_Mins:				; XREF: Hud_ChkTime
0001D310 45F9 0001 D30C             		lea	(Hud_1).l,a2
0001D316 7C00                       		moveq	#0,d6
0001D318 6000                       		bra.s	loc_1C9BA
0001D31A                            ; End of function Hud_Mins
0001D31A                            
0001D31A                            
0001D31A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D31A                            
0001D31A                            
0001D31A                            Hud_Secs:				; XREF: Hud_ChkTime
0001D31A 45F9 0001 D308             		lea	(Hud_10).l,a2
0001D320 7C01                       		moveq	#1,d6
0001D322                            
0001D322                            loc_1C9BA:
0001D322 7800                       		moveq	#0,d4
0001D324 43FA 0000                  		lea	Art_Hud(pc),a1
0001D328                            
0001D328                            Hud_TimeLoop:
0001D328 7400                       		moveq	#0,d2
0001D32A 261A                       		move.l	(a2)+,d3
0001D32C                            
0001D32C                            loc_1C9C4:
0001D32C 9283                       		sub.l	d3,d1
0001D32E 6500                       		bcs.s	loc_1C9CC
0001D330 5242                       		addq.w	#1,d2
0001D332 60F8                       		bra.s	loc_1C9C4
0001D334                            ; ===========================================================================
0001D334                            
0001D334                            loc_1C9CC:
0001D334 D283                       		add.l	d3,d1
0001D336 4A42                       		tst.w	d2
0001D338 6700                       		beq.s	loc_1C9D6
0001D33A 383C 0001                  		move.w	#1,d4
0001D33E                            
0001D33E                            loc_1C9D6:
0001D33E ED4A                       		lsl.w	#6,d2
0001D340 2D40 0004                  		move.l	d0,4(a6)
0001D344 47F1 2000                  		lea	(a1,d2.w),a3
0001D348 2C9B                       		move.l	(a3)+,(a6)
0001D34A 2C9B                       		move.l	(a3)+,(a6)
0001D34C 2C9B                       		move.l	(a3)+,(a6)
0001D34E 2C9B                       		move.l	(a3)+,(a6)
0001D350 2C9B                       		move.l	(a3)+,(a6)
0001D352 2C9B                       		move.l	(a3)+,(a6)
0001D354 2C9B                       		move.l	(a3)+,(a6)
0001D356 2C9B                       		move.l	(a3)+,(a6)
0001D358 2C9B                       		move.l	(a3)+,(a6)
0001D35A 2C9B                       		move.l	(a3)+,(a6)
0001D35C 2C9B                       		move.l	(a3)+,(a6)
0001D35E 2C9B                       		move.l	(a3)+,(a6)
0001D360 2C9B                       		move.l	(a3)+,(a6)
0001D362 2C9B                       		move.l	(a3)+,(a6)
0001D364 2C9B                       		move.l	(a3)+,(a6)
0001D366 2C9B                       		move.l	(a3)+,(a6)
0001D368 0680 0040 0000             		addi.l	#$400000,d0
0001D36E 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D372                            
0001D372 4E75                       		rts	
0001D374                            ; End of function Hud_Secs
0001D374                            
0001D374                            ; ---------------------------------------------------------------------------
0001D374                            ; Subroutine to	load time/ring bonus numbers patterns
0001D374                            ; ---------------------------------------------------------------------------
0001D374                            
0001D374                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D374                            
0001D374                            
0001D374                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D374 45F9 0001 D300             		lea	(Hud_1000).l,a2
0001D37A 7C03                       		moveq	#3,d6
0001D37C 7800                       		moveq	#0,d4
0001D37E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D382                            
0001D382                            Hud_BonusLoop:
0001D382 7400                       		moveq	#0,d2
0001D384 261A                       		move.l	(a2)+,d3
0001D386                            
0001D386                            loc_1CA1E:
0001D386 9283                       		sub.l	d3,d1
0001D388 6500                       		bcs.s	loc_1CA26
0001D38A 5242                       		addq.w	#1,d2
0001D38C 60F8                       		bra.s	loc_1CA1E
0001D38E                            ; ===========================================================================
0001D38E                            
0001D38E                            loc_1CA26:
0001D38E D283                       		add.l	d3,d1
0001D390 4A42                       		tst.w	d2
0001D392 6700                       		beq.s	loc_1CA30
0001D394 383C 0001                  		move.w	#1,d4
0001D398                            
0001D398                            loc_1CA30:
0001D398 4A44                       		tst.w	d4
0001D39A 6700                       		beq.s	Hud_ClrBonus
0001D39C ED4A                       		lsl.w	#6,d2
0001D39E 47F1 2000                  		lea	(a1,d2.w),a3
0001D3A2 2C9B                       		move.l	(a3)+,(a6)
0001D3A4 2C9B                       		move.l	(a3)+,(a6)
0001D3A6 2C9B                       		move.l	(a3)+,(a6)
0001D3A8 2C9B                       		move.l	(a3)+,(a6)
0001D3AA 2C9B                       		move.l	(a3)+,(a6)
0001D3AC 2C9B                       		move.l	(a3)+,(a6)
0001D3AE 2C9B                       		move.l	(a3)+,(a6)
0001D3B0 2C9B                       		move.l	(a3)+,(a6)
0001D3B2 2C9B                       		move.l	(a3)+,(a6)
0001D3B4 2C9B                       		move.l	(a3)+,(a6)
0001D3B6 2C9B                       		move.l	(a3)+,(a6)
0001D3B8 2C9B                       		move.l	(a3)+,(a6)
0001D3BA 2C9B                       		move.l	(a3)+,(a6)
0001D3BC 2C9B                       		move.l	(a3)+,(a6)
0001D3BE 2C9B                       		move.l	(a3)+,(a6)
0001D3C0 2C9B                       		move.l	(a3)+,(a6)
0001D3C2                            
0001D3C2                            loc_1CA5A:
0001D3C2 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D3C6                            
0001D3C6 4E75                       		rts	
0001D3C8                            ; ===========================================================================
0001D3C8                            
0001D3C8                            Hud_ClrBonus:
0001D3C8 7A0F                       		moveq	#$F,d5
0001D3CA                            
0001D3CA                            Hud_ClrBonusLoop:
0001D3CA 2CBC 0000 0000             		move.l	#0,(a6)
0001D3D0 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D3D4                            
0001D3D4 60EC                       		bra.s	loc_1CA5A
0001D3D6                            ; End of function Hud_TimeRingBonus
0001D3D6                            
0001D3D6                            ; ---------------------------------------------------------------------------
0001D3D6                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D3D6                            ; ---------------------------------------------------------------------------
0001D3D6                            
0001D3D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3D6                            
0001D3D6                            
0001D3D6                            Hud_Lives:				; XREF: Hud_ChkLives
0001D3D6 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D3DC 7200                       		moveq	#0,d1
0001D3DE 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D3E2 45F9 0001 D308             		lea	(Hud_10).l,a2
0001D3E8 7C01                       		moveq	#1,d6
0001D3EA 7800                       		moveq	#0,d4
0001D3EC 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D3F0                            
0001D3F0                            Hud_LivesLoop:
0001D3F0 2D40 0004                  		move.l	d0,4(a6)
0001D3F4 7400                       		moveq	#0,d2
0001D3F6 261A                       		move.l	(a2)+,d3
0001D3F8                            
0001D3F8                            loc_1CA90:
0001D3F8 9283                       		sub.l	d3,d1
0001D3FA 6500                       		bcs.s	loc_1CA98
0001D3FC 5242                       		addq.w	#1,d2
0001D3FE 60F8                       		bra.s	loc_1CA90
0001D400                            ; ===========================================================================
0001D400                            
0001D400                            loc_1CA98:
0001D400 D283                       		add.l	d3,d1
0001D402 4A42                       		tst.w	d2
0001D404 6700                       		beq.s	loc_1CAA2
0001D406 383C 0001                  		move.w	#1,d4
0001D40A                            
0001D40A                            loc_1CAA2:
0001D40A 4A44                       		tst.w	d4
0001D40C 6700                       		beq.s	Hud_ClrLives
0001D40E                            
0001D40E                            loc_1CAA6:
0001D40E EB4A                       		lsl.w	#5,d2
0001D410 47F1 2000                  		lea	(a1,d2.w),a3
0001D414 2C9B                       		move.l	(a3)+,(a6)
0001D416 2C9B                       		move.l	(a3)+,(a6)
0001D418 2C9B                       		move.l	(a3)+,(a6)
0001D41A 2C9B                       		move.l	(a3)+,(a6)
0001D41C 2C9B                       		move.l	(a3)+,(a6)
0001D41E 2C9B                       		move.l	(a3)+,(a6)
0001D420 2C9B                       		move.l	(a3)+,(a6)
0001D422 2C9B                       		move.l	(a3)+,(a6)
0001D424                            
0001D424                            loc_1CABC:
0001D424 0680 0040 0000             		addi.l	#$400000,d0
0001D42A 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D42E                            
0001D42E 4E75                       		rts	
0001D430                            ; ===========================================================================
0001D430                            
0001D430                            Hud_ClrLives:
0001D430 4A46                       		tst.w	d6
0001D432 67DA                       		beq.s	loc_1CAA6
0001D434 7A07                       		moveq	#7,d5
0001D436                            
0001D436                            Hud_ClrLivesLoop:
0001D436 2CBC 0000 0000             		move.l	#0,(a6)
0001D43C 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D440 60E2                       		bra.s	loc_1CABC
0001D442                            ; End of function Hud_Lives
0001D442                            
0001D442                            ; ===========================================================================
0001D442                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D742                            		even
0001D742                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D882                            		even
0001D882                            ; ===========================================================================
0001D882                            ; ---------------------------------------------------------------------------
0001D882                            ; When debug mode is currently in use
0001D882                            ; ---------------------------------------------------------------------------
0001D882                            
0001D882                            DebugMode:				; XREF: Obj01; Obj09
0001D882 7000                       		moveq	#0,d0
0001D884 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D888 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D88C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D890                            ; ===========================================================================
0001D890 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D892 0000                       		dc.w Debug_Skip-Debug_Index
0001D894                            ; ===========================================================================
0001D894                            
0001D894                            Debug_Main:				; XREF: Debug_Index
0001D894 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D898 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D89E 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D8A4 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D8AA 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D8B0 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D8B6 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D8BC 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D8C2 117C 0000 001A             		move.b	#0,$1A(a0)
0001D8C8 117C 0000 001C             		move.b	#0,$1C(a0)
0001D8CE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D8D4 6600                       		bne.s	Debug_Zone	; if not, branch
0001D8D6 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D8DC 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D8E2 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D8E4 6000                       		bra.s	Debug_UseList
0001D8E6                            ; ===========================================================================
0001D8E6                            
0001D8E6                            Debug_Zone:
0001D8E6 7000                       		moveq	#0,d0
0001D8E8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D8EC                            
0001D8EC                            Debug_UseList:
0001D8EC 45F9 0000 0000             		lea	(DebugList).l,a2
0001D8F2 D040                       		add.w	d0,d0
0001D8F4 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D8F8 3C1A                       		move.w	(a2)+,d6
0001D8FA BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D8FE 6200                       		bhi.s	loc_1CF9E
0001D900 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D906                            
0001D906                            loc_1CF9E:
0001D906 6100 0000                  		bsr.w	Debug_ShowItem
0001D90A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D910 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D916                            
0001D916                            Debug_Skip:				; XREF: Debug_Index
0001D916 7006                       		moveq	#6,d0
0001D918 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D91E 6700                       		beq.s	loc_1CFBE
0001D920 7000                       		moveq	#0,d0
0001D922 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D926                            
0001D926                            loc_1CFBE:
0001D926 45F9 0000 0000             		lea	(DebugList).l,a2
0001D92C D040                       		add.w	d0,d0
0001D92E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D932 3C1A                       		move.w	(a2)+,d6
0001D934 6100 0000                  		bsr.w	Debug_Control
0001D938 4EF9 0000 DEA8             		jmp	DisplaySprite
0001D93E                            
0001D93E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D93E                            
0001D93E                            
0001D93E                            Debug_Control:
0001D93E 7800                       		moveq	#0,d4
0001D940 323C 0001                  		move.w	#1,d1
0001D944 1838 F605                  		move.b	($FFFFF605).w,d4
0001D948 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D94C 6600                       		bne.s	loc_1D018	; if yes, branch
0001D94E 1038 F604                  		move.b	($FFFFF604).w,d0
0001D952 0240 000F                  		andi.w	#$F,d0
0001D956 6600                       		bne.s	loc_1D000
0001D958 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D95E 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D964 6000 0000                  		bra.w	Debug_BackItem
0001D968                            ; ===========================================================================
0001D968                            
0001D968                            loc_1D000:
0001D968 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D96C 6600                       		bne.s	loc_1D01C
0001D96E 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D974 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D978 6600                       		bne.s	loc_1D018
0001D97A 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D980                            
0001D980                            loc_1D018:
0001D980 1838 F604                  		move.b	($FFFFF604).w,d4
0001D984                            
0001D984                            loc_1D01C:
0001D984 7200                       		moveq	#0,d1
0001D986 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D98A 5241                       		addq.w	#1,d1
0001D98C 4841                       		swap	d1
0001D98E E881                       		asr.l	#4,d1
0001D990 2428 000C                  		move.l	$C(a0),d2
0001D994 2628 0008                  		move.l	8(a0),d3
0001D998 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D99C 6700                       		beq.s	loc_1D03C	; if not, branch
0001D99E 9481                       		sub.l	d1,d2
0001D9A0 6400                       		bcc.s	loc_1D03C
0001D9A2 7400                       		moveq	#0,d2
0001D9A4                            
0001D9A4                            loc_1D03C:
0001D9A4 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D9A8 6700                       		beq.s	loc_1D052	; if not, branch
0001D9AA D481                       		add.l	d1,d2
0001D9AC 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D9B2 6500                       		bcs.s	loc_1D052
0001D9B4 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D9BA                            
0001D9BA                            loc_1D052:
0001D9BA 0804 0002                  		btst	#2,d4
0001D9BE 6700                       		beq.s	loc_1D05E
0001D9C0 9681                       		sub.l	d1,d3
0001D9C2 6400                       		bcc.s	loc_1D05E
0001D9C4 7600                       		moveq	#0,d3
0001D9C6                            
0001D9C6                            loc_1D05E:
0001D9C6 0804 0003                  		btst	#3,d4
0001D9CA 6700                       		beq.s	loc_1D066
0001D9CC D681                       		add.l	d1,d3
0001D9CE                            
0001D9CE                            loc_1D066:
0001D9CE 2142 000C                  		move.l	d2,$C(a0)
0001D9D2 2143 0008                  		move.l	d3,8(a0)
0001D9D6                            
0001D9D6                            Debug_BackItem:
0001D9D6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D9DC 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D9DE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D9E4 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D9E6 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D9EA 6400                       		bcc.s	Debug_NoLoop
0001D9EC DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D9F0 6000                       		bra.s	Debug_NoLoop
0001D9F2                            ; ===========================================================================
0001D9F2                            
0001D9F2                            Debug_NextItem:
0001D9F2 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D9F8 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D9FA 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D9FE BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DA02 6200                       		bhi.s	Debug_NoLoop
0001DA04 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DA0A                            
0001DA0A                            Debug_NoLoop:
0001DA0A 6000 0000                  		bra.w	Debug_ShowItem
0001DA0E                            ; ===========================================================================
0001DA0E                            
0001DA0E                            Debug_MakeItem:
0001DA0E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DA14 6700                       		beq.s	Debug_Exit	; if not, branch
0001DA16 4EB9 0000 E32E             		jsr	SingleObjLoad
0001DA1C 6600                       		bne.s	Debug_Exit
0001DA1E 3368 0008 0008             		move.w	8(a0),8(a1)
0001DA24 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DA2A 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DA2E 1368 0001 0001             		move.b	1(a0),1(a1)
0001DA34 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DA3A 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DA40 7000                       		moveq	#0,d0
0001DA42 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DA46 E748                       		lsl.w	#3,d0
0001DA48 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DA4E 4E75                       		rts	
0001DA50                            ; ===========================================================================
0001DA50                            
0001DA50                            Debug_Exit:
0001DA50 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DA56 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DA58 7000                       		moveq	#0,d0
0001DA5A 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DA5E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DA66 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DA6C 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DA70 3140 000A                  		move.w	d0,$A(a0)
0001DA74 3140 000E                  		move.w	d0,$E(a0)
0001DA78 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DA7E 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DA84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DA8A 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DA8C 4278 F780                  		clr.w	($FFFFF780).w
0001DA90 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DA96 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DA9E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DAA4 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DAAA 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DAB0 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DAB6                            
0001DAB6                            Debug_DoNothing:
0001DAB6 4E75                       		rts	
0001DAB8                            ; End of function Debug_Control
0001DAB8                            
0001DAB8                            
0001DAB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DAB8                            
0001DAB8                            
0001DAB8                            Debug_ShowItem:				; XREF: Debug_Main
0001DAB8 7000                       		moveq	#0,d0
0001DABA 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DABE E748                       		lsl.w	#3,d0
0001DAC0 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DAC6 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DACC 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DAD2 4E75                       		rts	
0001DAD4                            ; End of function Debug_ShowItem
0001DAD4                            
0001DAD4                            ; ===========================================================================
0001DAD4                            ; ---------------------------------------------------------------------------
0001DAD4                            ; Debug	list pointers
0001DAD4                            ; ---------------------------------------------------------------------------
0001DAD4                            DebugList:
0001DAD4                            	include "_inc\Debug list pointers.asm"
0001DAD4                            ; ---------------------------------------------------------------------------
0001DAD4                            ; Debug	list pointers
0001DAD4                            ; ---------------------------------------------------------------------------
0001DAD4 0000                       	dc.w Debug_GHZ-DebugList
0001DAD6 0000                       	dc.w Debug_LZ-DebugList
0001DAD8 0000                       	dc.w Debug_MZ-DebugList
0001DADA 0000                       	dc.w Debug_SLZ-DebugList
0001DADC 0000                       	dc.w Debug_SYZ-DebugList
0001DADE 0000                       	dc.w Debug_SBZ-DebugList
0001DAE0 0000                       	dc.w Debug_Ending-DebugList
0001DAE0 0000                       	dc.w Debug_Ending-DebugList
0001DAE2                            
0001DAE2                            ; ---------------------------------------------------------------------------
0001DAE2                            ; Debug	list - Green Hill
0001DAE2                            ; ---------------------------------------------------------------------------
0001DAE2                            Debug_GHZ:
0001DAE2                            	include "_inc\Debug list - GHZ.asm"
0001DAE2                            ; ---------------------------------------------------------------------------
0001DAE2                            ; Debug	list - Green Hill
0001DAE2                            ; ---------------------------------------------------------------------------
0001DAE2 0010                       	dc.w $10			; number of items in list
0001DAE4 2500 A6C0                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DAE8 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DAEC 2600 ACC6                  	dc.l Map_obj26+$26000000
0001DAF0 0000 0680                  	dc.b 0,	0, 6, $80
0001DAF4 1F00 9EB8                  	dc.l Map_obj1F+$1F000000
0001DAF8 0000 0400                  	dc.b 0,	0, 4, 0
0001DAFC 2200 A174                  	dc.l Map_obj22+$22000000
0001DB00 0000 0444                  	dc.b 0,	0, 4, $44
0001DB04 2B00 B33A                  	dc.l Map_obj2B+$2B000000
0001DB08 0000 047B                  	dc.b 0,	0, 4, $7B
0001DB0C 3600 D84A                  	dc.l Map_obj36+$36000000
0001DB10 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB14 1800 87CA                  	dc.l Map_obj18+$18000000
0001DB18 0000 4000                  	dc.b 0,	0, $40,	0
0001DB1C 3B00 D970                  	dc.l Map_obj3B+$3B000000
0001DB20 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DB24 4001 0042                  	dc.l Map_obj40+$40000000
0001DB28 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DB2C 4100 E5BC                  	dc.l Map_obj41+$41000000
0001DB30 0000 0523                  	dc.b 0,	0, 5, $23
0001DB34 4200 E7E2                  	dc.l Map_obj42+$42000000
0001DB38 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DB3C 4400 EAF0                  	dc.l Map_obj44+$44000000
0001DB40 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DB44 1900 88CA                  	dc.l Map_obj48+$19000000
0001DB48 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DB4C 7901 7AA0                  	dc.l Map_obj79+$79000000
0001DB50 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB54 4B00 A700                  	dc.l Map_obj4B+$4B000000
0001DB58 0000 2400                  	dc.b 0,	0, $24,	0
0001DB5C 7D01 7BF0                  	dc.l Map_obj7D+$7D000000
0001DB60 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DB64                            	even
0001DB64                            	even
0001DB64                            
0001DB64                            ; ---------------------------------------------------------------------------
0001DB64                            ; Debug	list - Labyrinth
0001DB64                            ; ---------------------------------------------------------------------------
0001DB64                            Debug_LZ:
0001DB64                            	include "_inc\Debug list - LZ.asm"
0001DB64                            ; ---------------------------------------------------------------------------
0001DB64                            ; Debug	list - Labyrinth
0001DB64                            ; ---------------------------------------------------------------------------
0001DB64 0019                       	dc.w $19
0001DB66 2500 A6C0                  	dc.l Map_obj25+$25000000
0001DB6A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB6E 2600 ACC6                  	dc.l Map_obj26+$26000000
0001DB72 0000 0680                  	dc.b 0,	0, 6, $80
0001DB76 4100 E5BC                  	dc.l Map_obj41+$41000000
0001DB7A 0000 0523                  	dc.b 0,	0, 5, $23
0001DB7E 2C00 B3EA                  	dc.l Map_obj2C+$2C000000
0001DB82 0800 2486                  	dc.b 8,	0, $24,	$86
0001DB86 2D00 B5DE                  	dc.l Map_obj2D+$2D000000
0001DB8A 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DB8E 1601 2816                  	dc.l Map_obj16+$16000000
0001DB92 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DB96 1601 2816                  	dc.l Map_obj16+$16000000
0001DB9A 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DB9E 3300 CA96                  	dc.l Map_obj33+$33000000
0001DBA2 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DBA6 3200 C656                  	dc.l Map_obj32+$32000000
0001DBAA 0000 0513                  	dc.b 0,	0, 5, $13
0001DBAE 3600 D84A                  	dc.l Map_obj36+$36000000
0001DBB2 0000 051B                  	dc.b 0,	0, 5, $1B
0001DBB6 5201 0938                  	dc.l Map_obj52a+$52000000
0001DBBA 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DBBE 6101 2A3E                  	dc.l Map_obj61+$61000000
0001DBC2 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DBC6 6101 2A3E                  	dc.l Map_obj61+$61000000
0001DBCA 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DBCE 6101 2A3E                  	dc.l Map_obj61+$61000000
0001DBD2 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DBD6 6201 2B92                  	dc.l Map_obj62+$62000000
0001DBDA 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DBDE 6101 2A3E                  	dc.l Map_obj61+$61000000
0001DBE2 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DBE6 6101 2A3E                  	dc.l Map_obj61+$61000000
0001DBEA 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DBEE 6301 2EF4                  	dc.l Map_obj63+$63000000
0001DBF2 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DBF6 6001 2760                  	dc.l Map_obj60+$60000000
0001DBFA 0000 0467                  	dc.b 0,	0, 4, $67
0001DBFE 6401 323A                  	dc.l Map_obj64+$64000000
0001DC02 8413 8348                  	dc.b $84, $13, $83, $48
0001DC06 6501 33C2                  	dc.l Map_obj65+$65000000
0001DC0A 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DC0E 6501 33C2                  	dc.l Map_obj65+$65000000
0001DC12 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DC16 0B01 1BB0                  	dc.l Map_obj0B+$B000000
0001DC1A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DC1E 0C01 1C80                  	dc.l Map_obj0C+$C000000
0001DC22 0200 4328                  	dc.b 2,	0, $43,	$28
0001DC26 7901 7AA0                  	dc.l Map_obj79+$79000000
0001DC2A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC2E                            	even
0001DC2E                            	even
0001DC2E                            
0001DC2E                            ; ---------------------------------------------------------------------------
0001DC2E                            ; Debug	list - Marble
0001DC2E                            ; ---------------------------------------------------------------------------
0001DC2E                            Debug_MZ:
0001DC2E                            	include "_inc\Debug list - MZ.asm"
0001DC2E                            ; ---------------------------------------------------------------------------
0001DC2E                            ; Debug	list - Marble
0001DC2E                            ; ---------------------------------------------------------------------------
0001DC2E 0012                       	dc.w $12
0001DC30 2500 A6C0                  	dc.l Map_obj25+$25000000
0001DC34 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC38 2600 ACC6                  	dc.l Map_obj26+$26000000
0001DC3C 0000 0680                  	dc.b 0,	0, 6, $80
0001DC40 2200 A174                  	dc.l Map_obj22+$22000000
0001DC44 0000 0444                  	dc.b 0,	0, 4, $44
0001DC48 3600 D84A                  	dc.l Map_obj36+$36000000
0001DC4C 0000 051B                  	dc.b 0,	0, 5, $1B
0001DC50 4100 E5BC                  	dc.l Map_obj41+$41000000
0001DC54 0000 0523                  	dc.b 0,	0, 5, $23
0001DC58 1300 BB20                  	dc.l Map_obj14+$13000000
0001DC5C 0000 0345                  	dc.b 0,	0, 3, $45
0001DC60 4600 F1A2                  	dc.l Map_obj46+$46000000
0001DC64 0000 4000                  	dc.b 0,	0, $40,	0
0001DC68 4C00 FAEE                  	dc.l Map_obj4C+$4C000000
0001DC6C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DC70 4E00 FDD2                  	dc.l Map_obj4E+$4E000000
0001DC74 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DC78 3300 CA96                  	dc.l Map_obj33+$33000000
0001DC7C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DC80 5001 01D0                  	dc.l Map_obj50+$50000000
0001DC84 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DC88 5101 066C                  	dc.l Map_obj51+$51000000
0001DC8C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DC90 5201 08E2                  	dc.l Map_obj52+$52000000
0001DC94 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DC98 5300 8E62                  	dc.l Map_obj53+$53000000
0001DC9C 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DCA0 5400 FAB4                  	dc.l Map_obj54+$54000000
0001DCA4 0000 8680                  	dc.b 0,	0, $86,	$80
0001DCA8 5501 0AD6                  	dc.l Map_obj55+$55000000
0001DCAC 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DCB0 7801 771A                  	dc.l Map_obj78+$78000000
0001DCB4 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DCB8 7901 7AA0                  	dc.l Map_obj79+$79000000
0001DCBC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DCC0                            	even
0001DCC0                            	even
0001DCC0                            
0001DCC0                            ; ---------------------------------------------------------------------------
0001DCC0                            ; Debug	list - Star Light
0001DCC0                            ; ---------------------------------------------------------------------------
0001DCC0                            Debug_SLZ:
0001DCC0                            	include "_inc\Debug list - SLZ.asm"
0001DCC0                            ; ---------------------------------------------------------------------------
0001DCC0                            ; Debug	list - Star Light
0001DCC0                            ; ---------------------------------------------------------------------------
0001DCC0 000F                       	dc.w $F
0001DCC2 2500 A6C0                  	dc.l Map_obj25+$25000000
0001DCC6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DCCA 2600 ACC6                  	dc.l Map_obj26+$26000000
0001DCCE 0000 0680                  	dc.b 0,	0, 6, $80
0001DCD2 5901 15D8                  	dc.l Map_obj59+$59000000
0001DCD6 0000 4000                  	dc.b 0,	0, $40,	0
0001DCDA 5300 8E62                  	dc.l Map_obj53+$53000000
0001DCDE 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DCE2 1800 8828                  	dc.l Map_obj18b+$18000000
0001DCE6 0000 4000                  	dc.b 0,	0, $40,	0
0001DCEA 5A01 1712                  	dc.l Map_obj5A+$5A000000
0001DCEE 0000 4000                  	dc.b 0,	0, $40,	0
0001DCF2 5B01 18CA                  	dc.l Map_obj5B+$5B000000
0001DCF6 0000 4000                  	dc.b 0,	0, $40,	0
0001DCFA 5D01 1E9A                  	dc.l Map_obj5D+$5D000000
0001DCFE 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DD02 5E01 222C                  	dc.l Map_obj5E+$5E000000
0001DD06 0000 0374                  	dc.b 0,	0, 3, $74
0001DD0A 4100 E5BC                  	dc.l Map_obj41+$41000000
0001DD0E 0000 0523                  	dc.b 0,	0, 5, $23
0001DD12 1300 BB20                  	dc.l Map_obj14+$13000000
0001DD16 0000 0480                  	dc.b 0,	0, 4, $80
0001DD1A 1C00 8F72                  	dc.l Map_obj1C+$1C000000
0001DD1E 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DD22 5F01 24AA                  	dc.l Map_obj5F+$5F000000
0001DD26 0000 0400                  	dc.b 0,	0, 4, 0
0001DD2A 6001 2760                  	dc.l Map_obj60+$60000000
0001DD2E 0000 2429                  	dc.b 0,	0, $24,	$29
0001DD32 7901 7AA0                  	dc.l Map_obj79+$79000000
0001DD36 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD3A                            	even
0001DD3A                            	even
0001DD3A                            
0001DD3A                            ; ---------------------------------------------------------------------------
0001DD3A                            ; Debug	list - Spring Yard
0001DD3A                            ; ---------------------------------------------------------------------------
0001DD3A                            Debug_SYZ:
0001DD3A                            	include "_inc\Debug list - SYZ.asm"
0001DD3A                            ; ---------------------------------------------------------------------------
0001DD3A                            ; Debug	list - Spring Yard
0001DD3A                            ; ---------------------------------------------------------------------------
0001DD3A 000F                       	dc.w $F
0001DD3C 2500 A6C0                  	dc.l Map_obj25+$25000000
0001DD40 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD44 2600 ACC6                  	dc.l Map_obj26+$26000000
0001DD48 0000 0680                  	dc.b 0,	0, 6, $80
0001DD4C 3600 D84A                  	dc.l Map_obj36+$36000000
0001DD50 0000 051B                  	dc.b 0,	0, 5, $1B
0001DD54 4100 E5BC                  	dc.l Map_obj41+$41000000
0001DD58 0000 0523                  	dc.b 0,	0, 5, $23
0001DD5C 4300 EA42                  	dc.l Map_obj43+$43000000
0001DD60 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DD64 1200 F220                  	dc.l Map_obj12+$12000000
0001DD68 0000 0000                  	dc.b 0,	0, 0, 0
0001DD6C 4700 F39C                  	dc.l Map_obj47+$47000000
0001DD70 0000 0380                  	dc.b 0,	0, 3, $80
0001DD74 1F00 9EB8                  	dc.l Map_obj1F+$1F000000
0001DD78 0000 0400                  	dc.b 0,	0, 4, 0
0001DD7C 2200 A174                  	dc.l Map_obj22+$22000000
0001DD80 0000 0444                  	dc.b 0,	0, 4, $44
0001DD84 5001 01D0                  	dc.l Map_obj50+$50000000
0001DD88 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DD8C 1800 8816                  	dc.l Map_obj18a+$18000000
0001DD90 0000 4000                  	dc.b 0,	0, $40,	0
0001DD94 5601 0F98                  	dc.l Map_obj56+$56000000
0001DD98 0000 4000                  	dc.b 0,	0, $40,	0
0001DD9C 3200 C656                  	dc.l Map_obj32+$32000000
0001DDA0 0000 0513                  	dc.b 0,	0, 5, $13
0001DDA4 7801 771A                  	dc.l Map_obj78+$78000000
0001DDA8 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DDAC 7901 7AA0                  	dc.l Map_obj79+$79000000
0001DDB0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DDB4                            	even
0001DDB4                            	even
0001DDB4                            
0001DDB4                            ; ---------------------------------------------------------------------------
0001DDB4                            ; Debug	list - Scrap Brain
0001DDB4                            ; ---------------------------------------------------------------------------
0001DDB4                            Debug_SBZ:
0001DDB4                            	include "_inc\Debug list - SBZ.asm"
0001DDB4                            ; ---------------------------------------------------------------------------
0001DDB4                            ; Debug	list - Scrap Brain
0001DDB4                            ; ---------------------------------------------------------------------------
0001DDB4 001D                       	dc.w $1D
0001DDB6 2500 A6C0                  	dc.l Map_obj25+$25000000
0001DDBA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DDBE 2600 ACC6                  	dc.l Map_obj26+$26000000
0001DDC2 0000 0680                  	dc.b 0,	0, 6, $80
0001DDC6 5F01 24AA                  	dc.l Map_obj5F+$5F000000
0001DDCA 0000 0400                  	dc.b 0,	0, 4, 0
0001DDCE 6001 2760                  	dc.l Map_obj60+$60000000
0001DDD2 0000 0429                  	dc.b 0,	0, 4, $29
0001DDD6 7801 771A                  	dc.l Map_obj78+$78000000
0001DDDA 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DDDE 1501 1334                  	dc.l Map_obj15b+$15000000
0001DDE2 0702 4391                  	dc.b 7,	2, $43,	$91
0001DDE6 6701 602E                  	dc.l Map_obj67+$67000000
0001DDEA E000 C344                  	dc.b $E0, 0, $C3, $44
0001DDEE 5201 08E2                  	dc.l Map_obj52+$52000000
0001DDF2 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DDF6 3200 C656                  	dc.l Map_obj32+$32000000
0001DDFA 0000 0513                  	dc.b 0,	0, 5, $13
0001DDFE 6901 6288                  	dc.l Map_obj69+$69000000
0001DE02 0300 4492                  	dc.b 3,	0, $44,	$92
0001DE06 6901 62E2                  	dc.l Map_obj69a+$69000000
0001DE0A 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DE0E 6A01 6540                  	dc.l Map_obj6A+$6A000000
0001DE12 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DE16 5300 8E62                  	dc.l Map_obj53+$53000000
0001DE1A 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DE1E 5201 08E2                  	dc.l Map_obj52+$52000000
0001DE22 3903 4460                  	dc.b $39, 3, $44, $60
0001DE26 6B01 6910                  	dc.l Map_obj6B+$6B000000
0001DE2A 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DE2E 2A00 9108                  	dc.l Map_obj2A+$2A000000
0001DE32 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DE36 6B01 6910                  	dc.l Map_obj6B+$6B000000
0001DE3A 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DE3E 6A01 6540                  	dc.l Map_obj6A+$6A000000
0001DE42 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DE46 6B01 6910                  	dc.l Map_obj6B+$6B000000
0001DE4A 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DE4E 6A01 6540                  	dc.l Map_obj6A+$6A000000
0001DE52 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DE56 6B01 6910                  	dc.l Map_obj6B+$6B000000
0001DE5A 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DE5E 6C01 6AD2                  	dc.l Map_obj6C+$6C000000
0001DE62 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DE66 6D00 EE92                  	dc.l Map_obj6D+$6D000000
0001DE6A 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DE6E 6D00 EE92                  	dc.l Map_obj6D+$6D000000
0001DE72 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DE76 6E01 6B88                  	dc.l Map_obj6E+$6E000000
0001DE7A 0400 047E                  	dc.b 4,	0, 4, $7E
0001DE7E 7001 6FDE                  	dc.l Map_obj70+$70000000
0001DE82 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DE86 7101 1D40                  	dc.l Map_obj71+$71000000
0001DE8A 1100 8680                  	dc.b $11, 0, $86, $80
0001DE8E 1E00 95C6                  	dc.l Map_obj1E+$1E000000
0001DE92 0400 2302                  	dc.b 4,	0, $23,	2
0001DE96 7901 7AA0                  	dc.l Map_obj79+$79000000
0001DE9A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE9E                            	even
0001DE9E                            	even
0001DE9E                            
0001DE9E                            ; ---------------------------------------------------------------------------
0001DE9E                            ; Debug	list - ending sequence / special stage
0001DE9E                            ; ---------------------------------------------------------------------------
0001DE9E                            Debug_Ending:
0001DE9E                            	include "_inc\Debug list - Ending and SS.asm"
0001DE9E                            ; ---------------------------------------------------------------------------
0001DE9E                            ; Debug	list - ending sequence / special stage
0001DE9E                            ; ---------------------------------------------------------------------------
0001DE9E 000D                       	dc.w $D
0001DEA0 2500 A6C0                  	dc.l Map_obj25+$25000000
0001DEA4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DEA8 4700 F39C                  	dc.l Map_obj47+$47000000
0001DEAC 0000 0380                  	dc.b 0,	0, 3, $80
0001DEB0 2800 9BEA                  	dc.l Map_obj28a+$28000000
0001DEB4 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DEB8 2800 9BEA                  	dc.l Map_obj28a+$28000000
0001DEBC 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DEC0 2800 9BEA                  	dc.l Map_obj28a+$28000000
0001DEC4 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DEC8 2800 9BD2                  	dc.l Map_obj28+$28000000
0001DECC 0D00 0553                  	dc.b $D, 0, 5, $53
0001DED0 2800 9BD2                  	dc.l Map_obj28+$28000000
0001DED4 0E00 0553                  	dc.b $E, 0, 5, $53
0001DED8 2800 9BD2                  	dc.l Map_obj28+$28000000
0001DEDC 0F00 0573                  	dc.b $F, 0, 5, $73
0001DEE0 2800 9BD2                  	dc.l Map_obj28+$28000000
0001DEE4 1000 0573                  	dc.b $10, 0, 5,	$73
0001DEE8 2800 9BEA                  	dc.l Map_obj28a+$28000000
0001DEEC 1100 0585                  	dc.b $11, 0, 5,	$85
0001DEF0 2800 9C02                  	dc.l Map_obj28b+$28000000
0001DEF4 1200 0593                  	dc.b $12, 0, 5,	$93
0001DEF8 2800 9BEA                  	dc.l Map_obj28a+$28000000
0001DEFC 1300 0565                  	dc.b $13, 0, 5,	$65
0001DF00 2800 9C02                  	dc.l Map_obj28b+$28000000
0001DF04 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DF08                            	even
0001DF08                            	even
0001DF08                            
0001DF08                            ; ---------------------------------------------------------------------------
0001DF08                            ; Main level load blocks
0001DF08                            ; ---------------------------------------------------------------------------
0001DF08                            MainLoadBlocks:
0001DF08                            	include "_inc\Main level load blocks.asm"
0001DF08                            ; ---------------------------------------------------------------------------
0001DF08                            ; Main level load blocks
0001DF08                            ;
0001DF08                            ; ===FORMAT===
0001DF08                            ; level	patterns + (1st	PLC num	* 10^6)
0001DF08                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DF08                            ; 256x256 mappings
0001DF08                            ; blank, music (unused), pal index (unused), pal index
0001DF08                            ; ---------------------------------------------------------------------------
0001DF08 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DF0C 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DF10 0000 0000                  	dc.l Blk256_GHZ
0001DF14 0081 0404                  	dc.b 0,	$81, 4,	4
0001DF18 0000 0000                  	dc.l Nem_LZ+$6000000
0001DF1C 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DF20 0000 0000                  	dc.l Blk256_LZ
0001DF24 0082 0505                  	dc.b 0,	$82, 5,	5
0001DF28 0000 0000                  	dc.l Nem_MZ+$8000000
0001DF2C 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DF30 0000 0000                  	dc.l Blk256_MZ
0001DF34 0083 0606                  	dc.b 0,	$83, 6,	6
0001DF38 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DF3C 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DF40 0000 0000                  	dc.l Blk256_SLZ
0001DF44 0084 0707                  	dc.b 0,	$84, 7,	7
0001DF48 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DF4C 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DF50 0000 0000                  	dc.l Blk256_SYZ
0001DF54 0085 0808                  	dc.b 0,	$85, 8,	8
0001DF58 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DF5C 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DF60 0000 0000                  	dc.l Blk256_SBZ
0001DF64 0086 0909                  	dc.b 0,	$86, 9,	9
0001DF68 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DF6C 0000 0000                  	dc.l Blk16_GHZ
0001DF70 0000 0000                  	dc.l Blk256_GHZ
0001DF74 0086 1313                  	dc.b 0,	$86, $13, $13
0001DF78                            	even
0001DF78                            	even
0001DF78                            
0001DF78                            ; ---------------------------------------------------------------------------
0001DF78                            ; Pattern load cues
0001DF78                            ; ---------------------------------------------------------------------------
0001DF78                            ArtLoadCues:
0001DF78                            	include "_inc\Pattern load cues.asm"
0001DF78                            ; ---------------------------------------------------------------------------
0001DF78                            ; Pattern load cues - index
0001DF78                            ; ---------------------------------------------------------------------------
0001DF78 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DF7C 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DF80 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DF84 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DF88 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DF8C 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DF90 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DF94 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DF98 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DF9C 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DFA0 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DFA4 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DFA8 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DFAC 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DFB0 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DFB4 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DFB8 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001DFBA                            ; ---------------------------------------------------------------------------
0001DFBA                            ; Pattern load cues - standard block 1
0001DFBA                            ; ---------------------------------------------------------------------------
0001DFBA 0004                       PLC_Main:	dc.w 4
0001DFBC 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DFC0 F400                       		dc.w $F400
0001DFC2 0000 0000                  		dc.l Nem_Hud		; HUD
0001DFC6 D940                       		dc.w $D940
0001DFC8 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DFCC FA80                       		dc.w $FA80
0001DFCE 0000 0000                  		dc.l Nem_Ring		; rings
0001DFD2 F640                       		dc.w $F640
0001DFD4 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DFD8 F2E0                       		dc.w $F2E0
0001DFDA                            ; ---------------------------------------------------------------------------
0001DFDA                            ; Pattern load cues - standard block 2
0001DFDA                            ; ---------------------------------------------------------------------------
0001DFDA 0002                       PLC_Main2:	dc.w 2
0001DFDC 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DFE0 D000                       		dc.w $D000
0001DFE2 0000 0000                  		dc.l Nem_Shield		; shield
0001DFE6 A820                       		dc.w $A820
0001DFE8 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DFEC AB80                       		dc.w $AB80
0001DFEE                            ; ---------------------------------------------------------------------------
0001DFEE                            ; Pattern load cues - explosion
0001DFEE                            ; ---------------------------------------------------------------------------
0001DFEE 0000                       PLC_Explode:	dc.w 0
0001DFF0 0000 0000                  		dc.l Nem_Explode	; explosion
0001DFF4 B400                       		dc.w $B400
0001DFF6                            ; ---------------------------------------------------------------------------
0001DFF6                            ; Pattern load cues - game/time	over
0001DFF6                            ; ---------------------------------------------------------------------------
0001DFF6 0000                       PLC_GameOver:	dc.w 0
0001DFF8 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DFFC ABC0                       		dc.w $ABC0
0001DFFE                            ; ---------------------------------------------------------------------------
0001DFFE                            ; Pattern load cues - Green Hill
0001DFFE                            ; ---------------------------------------------------------------------------
0001DFFE 000B                       PLC_GHZ:	dc.w $B
0001E000 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E004 0000                       		dc.w 0
0001E006 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E00A 39A0                       		dc.w $39A0
0001E00C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E010 6B00                       		dc.w $6B00
0001E012 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E016 7A00                       		dc.w $7A00
0001E018 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E01C 8000                       		dc.w $8000
0001E01E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E022 8880                       		dc.w $8880
0001E024 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E028 8F60                       		dc.w $8F60
0001E02A 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E02E 9360                       		dc.w $9360
0001E030 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E034 9E00                       		dc.w $9E00
0001E036 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E03A A360                       		dc.w $A360
0001E03C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E040 A460                       		dc.w $A460
0001E042 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E046 A660                       		dc.w $A660
0001E048 0005                       PLC_GHZ2:	dc.w 5
0001E04A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E04E 7000                       		dc.w $7000
0001E050 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E054 71C0                       		dc.w $71C0
0001E056 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E05A 7300                       		dc.w $7300
0001E05C 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E060 7540                       		dc.w $7540
0001E062 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E066 A1E0                       		dc.w $A1E0
0001E068 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E06C 6980                       		dc.w $6980
0001E06E                            ; ---------------------------------------------------------------------------
0001E06E                            ; Pattern load cues - Labyrinth
0001E06E                            ; ---------------------------------------------------------------------------
0001E06E 000B                       PLC_LZ:		dc.w $B
0001E070 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E074 0000                       		dc.w 0
0001E076 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E07A 3C00                       		dc.w $3C00
0001E07C 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E080 3E00                       		dc.w $3E00
0001E082 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E086 4B20                       		dc.w $4B20
0001E088 0000 0000                  		dc.l Nem_Water		; water	surface
0001E08C 6000                       		dc.w $6000
0001E08E 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E092 6200                       		dc.w $6200
0001E094 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E098 6500                       		dc.w $6500
0001E09A 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E09E 6900                       		dc.w $6900
0001E0A0 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E0A4 7780                       		dc.w $7780
0001E0A6 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E0AA 7880                       		dc.w $7880
0001E0AC 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E0B0 7980                       		dc.w $7980
0001E0B2 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E0B6 94C0                       		dc.w $94C0
0001E0B8 000C                       PLC_LZ2:	dc.w $C
0001E0BA 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E0BE 7BC0                       		dc.w $7BC0
0001E0C0 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E0C4 7CC0                       		dc.w $7CC0
0001E0C6 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E0CA 7EC0                       		dc.w $7EC0
0001E0CC 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E0D0 5D20                       		dc.w $5D20
0001E0D2 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E0D6 8800                       		dc.w $8800
0001E0D8 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E0DC 89E0                       		dc.w $89E0
0001E0DE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E0E2 8CE0                       		dc.w $8CE0
0001E0E4 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E0E8 90C0                       		dc.w $90C0
0001E0EA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E0EE A1E0                       		dc.w $A1E0
0001E0F0 0000 0000                  		dc.l Nem_Cork		; cork block
0001E0F4 A000                       		dc.w $A000
0001E0F6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E0FA A360                       		dc.w $A360
0001E0FC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E100 A460                       		dc.w $A460
0001E102 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E106 A660                       		dc.w $A660
0001E108                            ; ---------------------------------------------------------------------------
0001E108                            ; Pattern load cues - Marble
0001E108                            ; ---------------------------------------------------------------------------
0001E108 0009                       PLC_MZ:		dc.w 9
0001E10A 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E10E 0000                       		dc.w 0
0001E110 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E114 6000                       		dc.w $6000
0001E116 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E11A 68A0                       		dc.w $68A0
0001E11C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E120 7000                       		dc.w $7000
0001E122 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E126 71C0                       		dc.w $71C0
0001E128 0000 0000                  		dc.l Nem_Lava		; lava
0001E12C 7500                       		dc.w $7500
0001E12E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E132 8880                       		dc.w $8880
0001E134 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E138 8F60                       		dc.w $8F60
0001E13A 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E13E 9700                       		dc.w $9700
0001E140 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E144 9FE0                       		dc.w $9FE0
0001E146 0004                       PLC_MZ2:	dc.w 4
0001E148 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E14C A260                       		dc.w $A260
0001E14E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E152 A360                       		dc.w $A360
0001E154 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E158 A460                       		dc.w $A460
0001E15A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E15E A660                       		dc.w $A660
0001E160 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E164 5700                       		dc.w $5700
0001E166                            ; ---------------------------------------------------------------------------
0001E166                            ; Pattern load cues - Star Light
0001E166                            ; ---------------------------------------------------------------------------
0001E166 0008                       PLC_SLZ:	dc.w 8
0001E168 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E16C 0000                       		dc.w 0
0001E16E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E172 8000                       		dc.w $8000
0001E174 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E178 8520                       		dc.w $8520
0001E17A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E17E 9000                       		dc.w $9000
0001E180 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E184 9C00                       		dc.w $9C00
0001E186 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E18A A260                       		dc.w $A260
0001E18C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E190 A360                       		dc.w $A360
0001E192 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E196 A460                       		dc.w $A460
0001E198 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E19C A660                       		dc.w $A660
0001E19E 0005                       PLC_SLZ2:	dc.w 5
0001E1A0 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E1A4 6E80                       		dc.w $6E80
0001E1A6 0000 0000                  		dc.l Nem_Fan		; fan
0001E1AA 7400                       		dc.w $7400
0001E1AC 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E1B0 7980                       		dc.w $7980
0001E1B2 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E1B6 7B80                       		dc.w $7B80
0001E1B8 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E1BC 9B00                       		dc.w $9B00
0001E1BE 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E1C2 9E00                       		dc.w $9E00
0001E1C4                            ; ---------------------------------------------------------------------------
0001E1C4                            ; Pattern load cues - Spring Yard
0001E1C4                            ; ---------------------------------------------------------------------------
0001E1C4 0004                       PLC_SYZ:	dc.w 4
0001E1C6 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E1CA 0000                       		dc.w 0
0001E1CC 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E1D0 8000                       		dc.w $8000
0001E1D2 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E1D6 8880                       		dc.w $8880
0001E1D8 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E1DC 8F60                       		dc.w $8F60
0001E1DE 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E1E2 9700                       		dc.w $9700
0001E1E4 0007                       PLC_SYZ2:	dc.w 7
0001E1E6 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E1EA 7000                       		dc.w $7000
0001E1EC 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E1F0 72C0                       		dc.w $72C0
0001E1F2 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E1F6 7740                       		dc.w $7740
0001E1F8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E1FC 9FE0                       		dc.w $9FE0
0001E1FE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E202 A1E0                       		dc.w $A1E0
0001E204 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E208 A360                       		dc.w $A360
0001E20A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E20E A460                       		dc.w $A460
0001E210 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E214 A660                       		dc.w $A660
0001E216                            ; ---------------------------------------------------------------------------
0001E216                            ; Pattern load cues - Scrap Brain
0001E216                            ; ---------------------------------------------------------------------------
0001E216 000B                       PLC_SBZ:	dc.w $B
0001E218 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E21C 0000                       		dc.w 0
0001E21E 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E222 5800                       		dc.w $5800
0001E224 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E228 5D00                       		dc.w $5D00
0001E22A 0000 0000                  		dc.l Nem_Girder		; girder
0001E22E 5E00                       		dc.w $5E00
0001E230 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E234 6040                       		dc.w $6040
0001E236 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E23A 6880                       		dc.w $6880
0001E23C 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E240 6900                       		dc.w $6900
0001E242 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E246 7220                       		dc.w $7220
0001E248 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E24C 76A0                       		dc.w $76A0
0001E24E 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E252 7B20                       		dc.w $7B20
0001E254 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E258 7EA0                       		dc.w $7EA0
0001E25A 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E25E 9860                       		dc.w $9860
0001E260 000C                       PLC_SBZ2:	dc.w $C
0001E262 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E266 5600                       		dc.w $5600
0001E268 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E26C 8000                       		dc.w $8000
0001E26E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E272 8520                       		dc.w $8520
0001E274 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E278 8C00                       		dc.w $8C00
0001E27A 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E27E 8DE0                       		dc.w $8DE0
0001E280 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E284 8FC0                       		dc.w $8FC0
0001E286 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E28A 9240                       		dc.w $9240
0001E28C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E290 7F20                       		dc.w $7F20
0001E292 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E296 9BE0                       		dc.w $9BE0
0001E298 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E29C A1E0                       		dc.w $A1E0
0001E29E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E2A2 A360                       		dc.w $A360
0001E2A4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E2A8 A460                       		dc.w $A460
0001E2AA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E2AE A660                       		dc.w $A660
0001E2B0                            ; ---------------------------------------------------------------------------
0001E2B0                            ; Pattern load cues - title card
0001E2B0                            ; ---------------------------------------------------------------------------
0001E2B0 0000                       PLC_TitleCard:	dc.w 0
0001E2B2 0000 0000                  		dc.l Nem_TitleCard
0001E2B6 B000                       		dc.w $B000
0001E2B8                            ; ---------------------------------------------------------------------------
0001E2B8                            ; Pattern load cues - act 3 boss
0001E2B8                            ; ---------------------------------------------------------------------------
0001E2B8 0005                       PLC_Boss:	dc.w 5
0001E2BA 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E2BE 8000                       		dc.w $8000
0001E2C0 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E2C4 8D80                       		dc.w $8D80
0001E2C6 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E2CA 93A0                       		dc.w $93A0
0001E2CC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E2D0 A300                       		dc.w $A300
0001E2D2 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E2D6 A300                       		dc.w $A300
0001E2D8 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E2DC A540                       		dc.w $A540
0001E2DE                            ; ---------------------------------------------------------------------------
0001E2DE                            ; Pattern load cues - act 1/2 signpost
0001E2DE                            ; ---------------------------------------------------------------------------
0001E2DE 0002                       PLC_Signpost:	dc.w 2
0001E2E0 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E2E4 D000                       		dc.w $D000
0001E2E6 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E2EA 96C0                       		dc.w $96C0
0001E2EC 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E2F0 8C40                       		dc.w $8C40
0001E2F2                            ; ---------------------------------------------------------------------------
0001E2F2                            ; Pattern load cues - beta special stage warp effect
0001E2F2                            ; ---------------------------------------------------------------------------
0001E2F2 0000                       PLC_Warp:	dc.w 0
0001E2F4 0000 0000                  		dc.l Nem_Warp
0001E2F8 A820                       		dc.w $A820
0001E2FA                            ; ---------------------------------------------------------------------------
0001E2FA                            ; Pattern load cues - special stage
0001E2FA                            ; ---------------------------------------------------------------------------
0001E2FA 0010                       PLC_SpeStage:	dc.w $10
0001E2FC 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E300 0000                       		dc.w 0
0001E302 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E306 0A20                       		dc.w $A20
0001E308 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E30C 2840                       		dc.w $2840
0001E30E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E312 4760                       		dc.w $4760
0001E314 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E318 4A20                       		dc.w $4A20
0001E31A 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E31E 4C60                       		dc.w $4C60
0001E320 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E324 5E00                       		dc.w $5E00
0001E326 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E32A 6E00                       		dc.w $6E00
0001E32C 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E330 7E00                       		dc.w $7E00
0001E332 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E336 8E00                       		dc.w $8E00
0001E338 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E33C 9E00                       		dc.w $9E00
0001E33E 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E342 AE00                       		dc.w $AE00
0001E344 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E348 BE00                       		dc.w $BE00
0001E34A 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E34E EE00                       		dc.w $EE00
0001E350 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E354 F2E0                       		dc.w $F2E0
0001E356 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E35A F400                       		dc.w $F400
0001E35C 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E360 F520                       		dc.w $F520
0001E362 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E366 F2E0                       		dc.w $F2E0
0001E368 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E36C F400                       		dc.w $F400
0001E36E 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E372 F520                       		dc.w $F520
0001E374                            ; ---------------------------------------------------------------------------
0001E374                            ; Pattern load cues - GHZ animals
0001E374                            ; ---------------------------------------------------------------------------
0001E374 0001                       PLC_GHZAnimals:	dc.w 1
0001E376 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E37A B000                       		dc.w $B000
0001E37C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E380 B240                       		dc.w $B240
0001E382                            ; ---------------------------------------------------------------------------
0001E382                            ; Pattern load cues - LZ animals
0001E382                            ; ---------------------------------------------------------------------------
0001E382 0001                       PLC_LZAnimals:	dc.w 1
0001E384 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E388 B000                       		dc.w $B000
0001E38A 0000 0000                  		dc.l Nem_Seal		; seal
0001E38E B240                       		dc.w $B240
0001E390                            ; ---------------------------------------------------------------------------
0001E390                            ; Pattern load cues - MZ animals
0001E390                            ; ---------------------------------------------------------------------------
0001E390 0001                       PLC_MZAnimals:	dc.w 1
0001E392 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E396 B000                       		dc.w $B000
0001E398 0000 0000                  		dc.l Nem_Seal		; seal
0001E39C B240                       		dc.w $B240
0001E39E                            ; ---------------------------------------------------------------------------
0001E39E                            ; Pattern load cues - SLZ animals
0001E39E                            ; ---------------------------------------------------------------------------
0001E39E 0001                       PLC_SLZAnimals:	dc.w 1
0001E3A0 0000 0000                  		dc.l Nem_Pig		; pig
0001E3A4 B000                       		dc.w $B000
0001E3A6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E3AA B240                       		dc.w $B240
0001E3AC                            ; ---------------------------------------------------------------------------
0001E3AC                            ; Pattern load cues - SYZ animals
0001E3AC                            ; ---------------------------------------------------------------------------
0001E3AC 0001                       PLC_SYZAnimals:	dc.w 1
0001E3AE 0000 0000                  		dc.l Nem_Pig		; pig
0001E3B2 B000                       		dc.w $B000
0001E3B4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E3B8 B240                       		dc.w $B240
0001E3BA                            ; ---------------------------------------------------------------------------
0001E3BA                            ; Pattern load cues - SBZ animals
0001E3BA                            ; ---------------------------------------------------------------------------
0001E3BA 0001                       PLC_SBZAnimals:	dc.w 1
0001E3BC 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E3C0 B000                       		dc.w $B000
0001E3C2 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E3C6 B240                       		dc.w $B240
0001E3C8                            ; ---------------------------------------------------------------------------
0001E3C8                            ; Pattern load cues - special stage results screen
0001E3C8                            ; ---------------------------------------------------------------------------
0001E3C8 0001                       PLC_SpeStResult:dc.w 1
0001E3CA 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E3CE A820                       		dc.w $A820
0001E3D0 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E3D4 AA20                       		dc.w $AA20
0001E3D6                            ; ---------------------------------------------------------------------------
0001E3D6                            ; Pattern load cues - ending sequence
0001E3D6                            ; ---------------------------------------------------------------------------
0001E3D6 000E                       PLC_Ending:	dc.w $E
0001E3D8 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E3DC 0000                       		dc.w 0
0001E3DE 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E3E2 39A0                       		dc.w $39A0
0001E3E4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E3E8 6B00                       		dc.w $6B00
0001E3EA 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E3EE 7400                       		dc.w $7400
0001E3F0 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E3F4 78A0                       		dc.w $78A0
0001E3F6 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E3FA 7C20                       		dc.w $7C20
0001E3FC 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E400 A480                       		dc.w $A480
0001E402 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E406 AA60                       		dc.w $AA60
0001E408 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E40C ACA0                       		dc.w $ACA0
0001E40E 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E412 AE60                       		dc.w $AE60
0001E414 0000 0000                  		dc.l Nem_Seal		; seal
0001E418 B0A0                       		dc.w $B0A0
0001E41A 0000 0000                  		dc.l Nem_Pig		; pig
0001E41E B260                       		dc.w $B260
0001E420 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E424 B4A0                       		dc.w $B4A0
0001E426 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E42A B660                       		dc.w $B660
0001E42C 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E430 B8A0                       		dc.w $B8A0
0001E432                            ; ---------------------------------------------------------------------------
0001E432                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E432                            ; ---------------------------------------------------------------------------
0001E432 0002                       PLC_TryAgain:	dc.w 2
0001E434 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E438 78A0                       		dc.w $78A0
0001E43A 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E43E 7C20                       		dc.w $7C20
0001E440 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E444 B400                       		dc.w $B400
0001E446                            ; ---------------------------------------------------------------------------
0001E446                            ; Pattern load cues - Eggman on SBZ 2
0001E446                            ; ---------------------------------------------------------------------------
0001E446 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E448 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E44C A300                       		dc.w $A300
0001E44E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E452 8000                       		dc.w $8000
0001E454 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E458 9400                       		dc.w $9400
0001E45A                            ; ---------------------------------------------------------------------------
0001E45A                            ; Pattern load cues - final boss
0001E45A                            ; ---------------------------------------------------------------------------
0001E45A 0004                       PLC_FZBoss:	dc.w 4
0001E45C 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E460 7400                       		dc.w $7400
0001E462 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E466 6000                       		dc.w $6000
0001E468 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E46C 8000                       		dc.w $8000
0001E46E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E472 8E00                       		dc.w $8E00
0001E474 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E478 A540                       		dc.w $A540
0001E47A                            ; ---------------------------------------------------------------------------
0001E47A                            ; Pattern load cues - Teto boss
0001E47A                            ; ---------------------------------------------------------------------------
0001E47A 0002                       PLC_TetoBoss:	dc.w 2
0001E47C 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E480 8000                       		dc.w $8000
0001E482 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E486 93A0                       		dc.w $93A0
0001E488 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E48C 9000                       		dc.w $9000
0001E48E                            		even
0001E48E                            		even
0001E48E                            
0001E48E                            		incbin	misc\padding.bin
0001E57C                            		even
0001E57C                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E9D2                            		even
0001E9D2                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001EA6A                            		even
0001EA6A                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EBAC                            		even
0001EBAC                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EBFA                            		even
0001EBFA                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001ED0E                            		even
0001ED0E                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FBD8                            		even
0001FBD8                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023CDE                            		even
00023CDE                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023D12                            		even
00023D12                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023DD0                            		even
00023DD0                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024278                            		even
00024278                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000242D6                            		even
000242D6                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024EDC                            		even
00024EDC                            ; ---------------------------------------------------------------------------
00024EDC                            ; Sprite mappings - Sonic
00024EDC                            ; ---------------------------------------------------------------------------
00024EDC                            Map_Sonic:
00024EDC                            	include "_maps\Sonic.asm"
00024EDC                            Map_1362:
00024EDC 0000                       Map_1362_0: 	dc.w Map_1362_E0-Map_1362
00024EDE 0000                       Map_1362_2: 	dc.w Map_1362_E1-Map_1362
00024EE0 0000                       Map_1362_4: 	dc.w Map_1362_EC-Map_1362
00024EE2 0000                       Map_1362_6: 	dc.w Map_1362_FC-Map_1362
00024EE4 0000                       Map_1362_8: 	dc.w Map_1362_10C-Map_1362
00024EE6 0000                       Map_1362_A: 	dc.w Map_1362_11C-Map_1362
00024EE8 0000                       Map_1362_C: 	dc.w Map_1362_12C-Map_1362
00024EEA 0000                       Map_1362_E: 	dc.w Map_1362_141-Map_1362
00024EEC 0000                       Map_1362_10: 	dc.w Map_1362_14C-Map_1362
00024EEE 0000                       Map_1362_12: 	dc.w Map_1362_157-Map_1362
00024EF0 0000                       Map_1362_14: 	dc.w Map_1362_16C-Map_1362
00024EF2 0000                       Map_1362_16: 	dc.w Map_1362_177-Map_1362
00024EF4 0000                       Map_1362_18: 	dc.w Map_1362_187-Map_1362
00024EF6 0000                       Map_1362_1A: 	dc.w Map_1362_1A1-Map_1362
00024EF8 0000                       Map_1362_1C: 	dc.w Map_1362_1C0-Map_1362
00024EFA 0000                       Map_1362_1E: 	dc.w Map_1362_1D5-Map_1362
00024EFC 0000                       Map_1362_20: 	dc.w Map_1362_1EF-Map_1362
00024EFE 0000                       Map_1362_22: 	dc.w Map_1362_204-Map_1362
00024F00 0000                       Map_1362_24: 	dc.w Map_1362_21E-Map_1362
00024F02 0000                       Map_1362_26: 	dc.w Map_1362_233-Map_1362
00024F04 0000                       Map_1362_28: 	dc.w Map_1362_23E-Map_1362
00024F06 0000                       Map_1362_2A: 	dc.w Map_1362_249-Map_1362
00024F08 0000                       Map_1362_2C: 	dc.w Map_1362_25E-Map_1362
00024F0A 0000                       Map_1362_2E: 	dc.w Map_1362_269-Map_1362
00024F0C 0000                       Map_1362_30: 	dc.w Map_1362_279-Map_1362
00024F0E 0000                       Map_1362_32: 	dc.w Map_1362_298-Map_1362
00024F10 0000                       Map_1362_34: 	dc.w Map_1362_2B7-Map_1362
00024F12 0000                       Map_1362_36: 	dc.w Map_1362_2CC-Map_1362
00024F14 0000                       Map_1362_38: 	dc.w Map_1362_2E6-Map_1362
00024F16 0000                       Map_1362_3A: 	dc.w Map_1362_2FB-Map_1362
00024F18 0000                       Map_1362_3C: 	dc.w Map_1362_315-Map_1362
00024F1A 0000                       Map_1362_3E: 	dc.w Map_1362_320-Map_1362
00024F1C 0000                       Map_1362_40: 	dc.w Map_1362_32B-Map_1362
00024F1E 0000                       Map_1362_42: 	dc.w Map_1362_336-Map_1362
00024F20 0000                       Map_1362_44: 	dc.w Map_1362_341-Map_1362
00024F22 0000                       Map_1362_46: 	dc.w Map_1362_356-Map_1362
00024F24 0000                       Map_1362_48: 	dc.w Map_1362_366-Map_1362
00024F26 0000                       Map_1362_4A: 	dc.w Map_1362_37B-Map_1362
00024F28 0000                       Map_1362_4C: 	dc.w Map_1362_38B-Map_1362
00024F2A 0000                       Map_1362_4E: 	dc.w Map_1362_396-Map_1362
00024F2C 0000                       Map_1362_50: 	dc.w Map_1362_3A1-Map_1362
00024F2E 0000                       Map_1362_52: 	dc.w Map_1362_3AC-Map_1362
00024F30 0000                       Map_1362_54: 	dc.w Map_1362_3B7-Map_1362
00024F32 0000                       Map_1362_56: 	dc.w Map_1362_3CC-Map_1362
00024F34 0000                       Map_1362_58: 	dc.w Map_1362_3D7-Map_1362
00024F36 0000                       Map_1362_5A: 	dc.w Map_1362_3EC-Map_1362
00024F38 0000                       Map_1362_5C: 	dc.w Map_1362_3F7-Map_1362
00024F3A 0000                       Map_1362_5E: 	dc.w Map_1362_3FD-Map_1362
00024F3C 0000                       Map_1362_60: 	dc.w Map_1362_403-Map_1362
00024F3E 0000                       Map_1362_62: 	dc.w Map_1362_409-Map_1362
00024F40 0000                       Map_1362_64: 	dc.w Map_1362_40F-Map_1362
00024F42 0000                       Map_1362_66: 	dc.w Map_1362_415-Map_1362
00024F44 0000                       Map_1362_68: 	dc.w Map_1362_420-Map_1362
00024F46 0000                       Map_1362_6A: 	dc.w Map_1362_426-Map_1362
00024F48 0000                       Map_1362_6C: 	dc.w Map_1362_431-Map_1362
00024F4A 0000                       Map_1362_6E: 	dc.w Map_1362_437-Map_1362
00024F4C 0000                       Map_1362_70: 	dc.w Map_1362_442-Map_1362
00024F4E 0000                       Map_1362_72: 	dc.w Map_1362_457-Map_1362
00024F50 0000                       Map_1362_74: 	dc.w Map_1362_476-Map_1362
00024F52 0000                       Map_1362_76: 	dc.w Map_1362_481-Map_1362
00024F54 0000                       Map_1362_78: 	dc.w Map_1362_48C-Map_1362
00024F56 0000                       Map_1362_7A: 	dc.w Map_1362_4A1-Map_1362
00024F58 0000                       Map_1362_7C: 	dc.w Map_1362_4AC-Map_1362
00024F5A 0000                       Map_1362_7E: 	dc.w Map_1362_4BC-Map_1362
00024F5C 0000                       Map_1362_80: 	dc.w Map_1362_4D1-Map_1362
00024F5E 0000                       Map_1362_82: 	dc.w Map_1362_4DC-Map_1362
00024F60 0000                       Map_1362_84: 	dc.w Map_1362_4F1-Map_1362
00024F62 0000                       Map_1362_86: 	dc.w Map_1362_506-Map_1362
00024F64 0000                       Map_1362_88: 	dc.w Map_1362_520-Map_1362
00024F66 0000                       Map_1362_8A: 	dc.w Map_1362_53A-Map_1362
00024F68 0000                       Map_1362_8C: 	dc.w Map_1362_545-Map_1362
00024F6A 0000                       Map_1362_8E: 	dc.w Map_1362_555-Map_1362
00024F6C 0000                       Map_1362_90: 	dc.w Map_1362_560-Map_1362
00024F6E 0000                       Map_1362_92: 	dc.w Map_1362_570-Map_1362
00024F70 0000                       Map_1362_94: 	dc.w Map_1362_57B-Map_1362
00024F72 0000                       Map_1362_96: 	dc.w Map_1362_58B-Map_1362
00024F74 0000                       Map_1362_98: 	dc.w Map_1362_59B-Map_1362
00024F76 0000                       Map_1362_9A: 	dc.w Map_1362_5B5-Map_1362
00024F78 0000                       Map_1362_9C: 	dc.w Map_1362_5CF-Map_1362
00024F7A 0000                       Map_1362_9E: 	dc.w Map_1362_5DA-Map_1362
00024F7C 0000                       Map_1362_A0: 	dc.w Map_1362_5EA-Map_1362
00024F7E 0000                       Map_1362_A2: 	dc.w Map_1362_5F0-Map_1362
00024F80 0000                       Map_1362_A4: 	dc.w Map_1362_5F6-Map_1362
00024F82 0000                       Map_1362_A6: 	dc.w Map_1362_5FC-Map_1362
00024F84 0000                       Map_1362_A8: 	dc.w Map_1362_611-Map_1362
00024F86 0000                       Map_1362_AA: 	dc.w Map_1362_621-Map_1362
00024F88 0000                       Map_1362_AC: 	dc.w Map_1362_631-Map_1362
00024F8A 0000                       Map_1362_AE: 	dc.w Map_1362_641-Map_1362
00024F8C 0000                       Map_1362_B0: 	dc.w Map_1362_64C-Map_1362
00024F8E 0000                       Map_1362_B2: 	dc.w Map_1362_657-Map_1362
00024F90 0000                       Map_1362_B4: 	dc.w Map_1362_667-Map_1362
00024F92 0000                       Map_1362_B6: 	dc.w Map_1362_672-Map_1362
00024F94 0000                       Map_1362_B8: 	dc.w Map_1362_687-Map_1362
00024F96 0000                       Map_1362_BA: 	dc.w Map_1362_688-Map_1362
00024F98 0000                       Map_1362_BC: 	dc.w Map_1362_689-Map_1362
00024F9A 0000                       Map_1362_BE: 	dc.w Map_1362_68A-Map_1362
00024F9C 0000                       Map_1362_C0: 	dc.w Map_1362_68B-Map_1362
00024F9E 0000                       Map_1362_C2: 	dc.w Map_1362_696-Map_1362
00024FA0 0000                       Map_1362_C4: 	dc.w Map_1362_697-Map_1362
00024FA2 0000                       Map_1362_C6: 	dc.w Map_1362_6A2-Map_1362
00024FA4 0000                       Map_1362_C8: 	dc.w Map_1362_6A3-Map_1362
00024FA6 0000                       Map_1362_CA: 	dc.w Map_1362_6A4-Map_1362
00024FA8 0000                       Map_1362_CC: 	dc.w Map_1362_6A5-Map_1362
00024FAA 0000                       Map_1362_CE: 	dc.w Map_1362_6B0-Map_1362
00024FAC 0000                       Map_1362_D0: 	dc.w Map_1362_6B1-Map_1362
00024FAE 0000                       Map_1362_D2: 	dc.w Map_1362_6BC-Map_1362
00024FB0 0000                       Map_1362_D4: 	dc.w Map_1362_6BD-Map_1362
00024FB2 0000                       Map_1362_D6: 	dc.w Map_1362_6BE-Map_1362
00024FB4 0000                       Map_1362_D8: 	dc.w Map_1362_6BF-Map_1362
00024FB6 0000                       Map_1362_DA: 	dc.w Map_1362_6CA-Map_1362
00024FB8 0000                       Map_1362_DC: 	dc.w Map_1362_6CB-Map_1362
00024FBA 0000                       Map_1362_DE: 	dc.w Map_1362_6D6-Map_1362
00024FBC 00                         Map_1362_E0: 	dc.b $0
00024FBD 02                         Map_1362_E1: 	dc.b $2
00024FBE ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024FC3 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024FC8 03                         Map_1362_EC: 	dc.b $3
00024FC9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024FCE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024FD3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024FD8 03                         Map_1362_FC: 	dc.b $3
00024FD9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024FDE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024FE3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024FE8 03                         Map_1362_10C: 	dc.b $3
00024FE9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024FEE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024FF3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024FF8 03                         Map_1362_11C: 	dc.b $3
00024FF9 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024FFE 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00025003 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00025008 04                         Map_1362_12C: 	dc.b $4
00025009 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
0002500E FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00025013 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00025018 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
0002501D 02                         Map_1362_141: 	dc.b $2
0002501E EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00025023 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00025028 02                         Map_1362_14C: 	dc.b $2
00025029 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
0002502E FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00025033 04                         Map_1362_157: 	dc.b $4
00025034 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025039 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
0002503E FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00025043 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00025048 02                         Map_1362_16C: 	dc.b $2
00025049 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
0002504E EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00025053 03                         Map_1362_177: 	dc.b $3
00025054 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00025059 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
0002505E 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00025063 05                         Map_1362_187: 	dc.b $5
00025064 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025069 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
0002506E FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00025073 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00025078 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
0002507D 06                         Map_1362_1A1: 	dc.b $6
0002507E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025083 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025088 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
0002508D 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00025092 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025097 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
0002509C 04                         Map_1362_1C0: 	dc.b $4
0002509D ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000250A2 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000250A7 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
000250AC 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
000250B1 05                         Map_1362_1D5: 	dc.b $5
000250B2 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000250B7 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
000250BC FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
000250C1 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
000250C6 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
000250CB 04                         Map_1362_1EF: 	dc.b $4
000250CC EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000250D1 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000250D6 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000250DB 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000250E0 05                         Map_1362_204: 	dc.b $5
000250E1 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000250E6 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000250EB FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000250F0 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000250F5 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000250FA 04                         Map_1362_21E: 	dc.b $4
000250FB F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00025100 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00025105 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
0002510A 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
0002510F 02                         Map_1362_233: 	dc.b $2
00025110 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00025115 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
0002511A 02                         Map_1362_23E: 	dc.b $2
0002511B F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00025120 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00025125 04                         Map_1362_249: 	dc.b $4
00025126 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
0002512B EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00025130 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00025135 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
0002513A 02                         Map_1362_25E: 	dc.b $2
0002513B F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00025140 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025145 03                         Map_1362_269: 	dc.b $3
00025146 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
0002514B EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00025150 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025155 06                         Map_1362_279: 	dc.b $6
00025156 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002515B ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00025160 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025165 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
0002516A 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002516F FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025174 06                         Map_1362_298: 	dc.b $6
00025175 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002517A E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002517F EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025184 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025189 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002518E 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00025193 04                         Map_1362_2B7: 	dc.b $4
00025194 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025199 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002519E EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
000251A3 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000251A8 05                         Map_1362_2CC: 	dc.b $5
000251A9 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000251AE ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
000251B3 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
000251B8 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
000251BD 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
000251C2 04                         Map_1362_2E6: 	dc.b $4
000251C3 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000251C8 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000251CD EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000251D2 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000251D7 05                         Map_1362_2FB: 	dc.b $5
000251D8 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000251DD EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000251E2 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000251E7 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000251EC 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000251F1 02                         Map_1362_315: 	dc.b $2
000251F2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000251F7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000251FC 02                         Map_1362_320: 	dc.b $2
000251FD EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025202 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025207 02                         Map_1362_32B: 	dc.b $2
00025208 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002520D FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025212 02                         Map_1362_336: 	dc.b $2
00025213 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025218 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002521D 04                         Map_1362_341: 	dc.b $4
0002521E EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025223 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025228 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002522D FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025232 03                         Map_1362_356: 	dc.b $3
00025233 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025238 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002523D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025242 04                         Map_1362_366: 	dc.b $4
00025243 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025248 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002524D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025252 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025257 03                         Map_1362_37B: 	dc.b $3
00025258 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002525D EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025262 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025267 02                         Map_1362_38B: 	dc.b $2
00025268 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002526D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025272 02                         Map_1362_396: 	dc.b $2
00025273 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025278 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002527D 02                         Map_1362_3A1: 	dc.b $2
0002527E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025283 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025288 02                         Map_1362_3AC: 	dc.b $2
00025289 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002528E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025293 04                         Map_1362_3B7: 	dc.b $4
00025294 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025299 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002529E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000252A3 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000252A8 02                         Map_1362_3CC: 	dc.b $2
000252A9 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000252AE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000252B3 04                         Map_1362_3D7: 	dc.b $4
000252B4 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000252B9 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000252BE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000252C3 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000252C8 02                         Map_1362_3EC: 	dc.b $2
000252C9 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000252CE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000252D3 01                         Map_1362_3F7: 	dc.b $1
000252D4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252D9 01                         Map_1362_3FD: 	dc.b $1
000252DA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252DF 01                         Map_1362_403: 	dc.b $1
000252E0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252E5 01                         Map_1362_409: 	dc.b $1
000252E6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252EB 01                         Map_1362_40F: 	dc.b $1
000252EC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252F1 02                         Map_1362_415: 	dc.b $2
000252F2 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000252F7 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000252FC 01                         Map_1362_420: 	dc.b $1
000252FD F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025302 02                         Map_1362_426: 	dc.b $2
00025303 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025308 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002530D 01                         Map_1362_431: 	dc.b $1
0002530E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025313 02                         Map_1362_437: 	dc.b $2
00025314 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025319 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
0002531E 04                         Map_1362_442: 	dc.b $4
0002531F ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025324 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00025329 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
0002532E 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00025333 06                         Map_1362_457: 	dc.b $6
00025334 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00025339 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
0002533E 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00025343 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025348 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
0002534D F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00025352 02                         Map_1362_476: 	dc.b $2
00025353 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025358 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
0002535D 02                         Map_1362_481: 	dc.b $2
0002535E 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00025363 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025368 04                         Map_1362_48C: 	dc.b $4
00025369 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002536E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025373 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025378 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002537D 02                         Map_1362_4A1: 	dc.b $2
0002537E F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025383 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025388 03                         Map_1362_4AC: 	dc.b $3
00025389 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002538E FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025393 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025398 04                         Map_1362_4BC: 	dc.b $4
00025399 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002539E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000253A3 0408 000C 02               	dc.b $4, $8, $0, $C, $2
000253A8 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000253AD 02                         Map_1362_4D1: 	dc.b $2
000253AE EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000253B3 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
000253B8 04                         Map_1362_4DC: 	dc.b $4
000253B9 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000253BE 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000253C3 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000253C8 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000253CD 04                         Map_1362_4F1: 	dc.b $4
000253CE F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000253D3 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000253D8 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000253DD F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000253E2 05                         Map_1362_506: 	dc.b $5
000253E3 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000253E8 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000253ED 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000253F2 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000253F7 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000253FC 05                         Map_1362_520: 	dc.b $5
000253FD E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025402 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00025407 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002540C 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025411 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025416 02                         Map_1362_53A: 	dc.b $2
00025417 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002541C 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025421 03                         Map_1362_545: 	dc.b $3
00025422 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025427 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002542C 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025431 02                         Map_1362_555: 	dc.b $2
00025432 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025437 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002543C 03                         Map_1362_560: 	dc.b $3
0002543D EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025442 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025447 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002544C 02                         Map_1362_570: 	dc.b $2
0002544D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025452 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025457 03                         Map_1362_57B: 	dc.b $3
00025458 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002545D 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025462 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025467 03                         Map_1362_58B: 	dc.b $3
00025468 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002546D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025472 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025477 05                         Map_1362_59B: 	dc.b $5
00025478 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002547D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025482 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025487 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002548C 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025491 05                         Map_1362_5B5: 	dc.b $5
00025492 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025497 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002549C F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000254A1 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000254A6 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000254AB 02                         Map_1362_5CF: 	dc.b $2
000254AC EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000254B1 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000254B6 03                         Map_1362_5DA: 	dc.b $3
000254B7 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000254BC F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000254C1 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000254C6 01                         Map_1362_5EA: 	dc.b $1
000254C7 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000254CC 01                         Map_1362_5F0: 	dc.b $1
000254CD F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000254D2 01                         Map_1362_5F6: 	dc.b $1
000254D3 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000254D8 04                         Map_1362_5FC: 	dc.b $4
000254D9 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000254DE F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000254E3 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000254E8 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000254ED 03                         Map_1362_611: 	dc.b $3
000254EE F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000254F3 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000254F8 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000254FD 03                         Map_1362_621: 	dc.b $3
000254FE F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025503 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00025508 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
0002550D 03                         Map_1362_631: 	dc.b $3
0002550E EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025513 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00025518 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
0002551D 02                         Map_1362_641: 	dc.b $2
0002551E F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00025523 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00025528 02                         Map_1362_64C: 	dc.b $2
00025529 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002552E EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025533 03                         Map_1362_657: 	dc.b $3
00025534 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00025539 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
0002553E 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025543 02                         Map_1362_667: 	dc.b $2
00025544 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00025549 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
0002554E 04                         Map_1362_672: 	dc.b $4
0002554F ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025554 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00025559 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
0002555E 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025563 00                         Map_1362_687: 	dc.b $0
00025564 00                         Map_1362_688: 	dc.b $0
00025565 00                         Map_1362_689: 	dc.b $0
00025566 00                         Map_1362_68A: 	dc.b $0
00025567 02                         Map_1362_68B: 	dc.b $2
00025568 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002556D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025572 00                         Map_1362_696: 	dc.b $0
00025573 02                         Map_1362_697: 	dc.b $2
00025574 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025579 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002557E 00                         Map_1362_6A2: 	dc.b $0
0002557F 00                         Map_1362_6A3: 	dc.b $0
00025580 00                         Map_1362_6A4: 	dc.b $0
00025581 02                         Map_1362_6A5: 	dc.b $2
00025582 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025587 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002558C 00                         Map_1362_6B0: 	dc.b $0
0002558D 02                         Map_1362_6B1: 	dc.b $2
0002558E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025593 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025598 00                         Map_1362_6BC: 	dc.b $0
00025599 00                         Map_1362_6BD: 	dc.b $0
0002559A 00                         Map_1362_6BE: 	dc.b $0
0002559B 02                         Map_1362_6BF: 	dc.b $2
0002559C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000255A1 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000255A6 00                         Map_1362_6CA: 	dc.b $0
000255A7 02                         Map_1362_6CB: 	dc.b $2
000255A8 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000255AD EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000255B2 00                         Map_1362_6D6: 	dc.b $0
000255B4 00                         	even
000255B4 00                         	even
000255B4                            
000255B4                            ; ---------------------------------------------------------------------------
000255B4                            ; Uncompressed graphics	loading	array for Sonic
000255B4                            ; ---------------------------------------------------------------------------
000255B4                            SonicDynPLC:
000255B4                            	include "_inc\Sonic dynamic pattern load cues.asm"
000255B4                            DPLC_6247:
000255B4 0000                       DPLC_6247_0: 	dc.w DPLC_6247_E0-DPLC_6247
000255B6 0000                       DPLC_6247_2: 	dc.w DPLC_6247_E1-DPLC_6247
000255B8 0000                       DPLC_6247_4: 	dc.w DPLC_6247_E6-DPLC_6247
000255BA 0000                       DPLC_6247_6: 	dc.w DPLC_6247_ED-DPLC_6247
000255BC 0000                       DPLC_6247_8: 	dc.w DPLC_6247_F4-DPLC_6247
000255BE 0000                       DPLC_6247_A: 	dc.w DPLC_6247_FB-DPLC_6247
000255C0 0000                       DPLC_6247_C: 	dc.w DPLC_6247_102-DPLC_6247
000255C2 0000                       DPLC_6247_E: 	dc.w DPLC_6247_10B-DPLC_6247
000255C4 0000                       DPLC_6247_10: 	dc.w DPLC_6247_110-DPLC_6247
000255C6 0000                       DPLC_6247_12: 	dc.w DPLC_6247_115-DPLC_6247
000255C8 0000                       DPLC_6247_14: 	dc.w DPLC_6247_11E-DPLC_6247
000255CA 0000                       DPLC_6247_16: 	dc.w DPLC_6247_123-DPLC_6247
000255CC 0000                       DPLC_6247_18: 	dc.w DPLC_6247_12A-DPLC_6247
000255CE 0000                       DPLC_6247_1A: 	dc.w DPLC_6247_135-DPLC_6247
000255D0 0000                       DPLC_6247_1C: 	dc.w DPLC_6247_142-DPLC_6247
000255D2 0000                       DPLC_6247_1E: 	dc.w DPLC_6247_14B-DPLC_6247
000255D4 0000                       DPLC_6247_20: 	dc.w DPLC_6247_156-DPLC_6247
000255D6 0000                       DPLC_6247_22: 	dc.w DPLC_6247_15F-DPLC_6247
000255D8 0000                       DPLC_6247_24: 	dc.w DPLC_6247_16A-DPLC_6247
000255DA 0000                       DPLC_6247_26: 	dc.w DPLC_6247_173-DPLC_6247
000255DC 0000                       DPLC_6247_28: 	dc.w DPLC_6247_178-DPLC_6247
000255DE 0000                       DPLC_6247_2A: 	dc.w DPLC_6247_17D-DPLC_6247
000255E0 0000                       DPLC_6247_2C: 	dc.w DPLC_6247_186-DPLC_6247
000255E2 0000                       DPLC_6247_2E: 	dc.w DPLC_6247_18B-DPLC_6247
000255E4 0000                       DPLC_6247_30: 	dc.w DPLC_6247_192-DPLC_6247
000255E6 0000                       DPLC_6247_32: 	dc.w DPLC_6247_19F-DPLC_6247
000255E8 0000                       DPLC_6247_34: 	dc.w DPLC_6247_1AC-DPLC_6247
000255EA 0000                       DPLC_6247_36: 	dc.w DPLC_6247_1B5-DPLC_6247
000255EC 0000                       DPLC_6247_38: 	dc.w DPLC_6247_1C0-DPLC_6247
000255EE 0000                       DPLC_6247_3A: 	dc.w DPLC_6247_1C9-DPLC_6247
000255F0 0000                       DPLC_6247_3C: 	dc.w DPLC_6247_1D4-DPLC_6247
000255F2 0000                       DPLC_6247_3E: 	dc.w DPLC_6247_1D9-DPLC_6247
000255F4 0000                       DPLC_6247_40: 	dc.w DPLC_6247_1DE-DPLC_6247
000255F6 0000                       DPLC_6247_42: 	dc.w DPLC_6247_1E3-DPLC_6247
000255F8 0000                       DPLC_6247_44: 	dc.w DPLC_6247_1E8-DPLC_6247
000255FA 0000                       DPLC_6247_46: 	dc.w DPLC_6247_1F1-DPLC_6247
000255FC 0000                       DPLC_6247_48: 	dc.w DPLC_6247_1F8-DPLC_6247
000255FE 0000                       DPLC_6247_4A: 	dc.w DPLC_6247_201-DPLC_6247
00025600 0000                       DPLC_6247_4C: 	dc.w DPLC_6247_208-DPLC_6247
00025602 0000                       DPLC_6247_4E: 	dc.w DPLC_6247_20D-DPLC_6247
00025604 0000                       DPLC_6247_50: 	dc.w DPLC_6247_212-DPLC_6247
00025606 0000                       DPLC_6247_52: 	dc.w DPLC_6247_217-DPLC_6247
00025608 0000                       DPLC_6247_54: 	dc.w DPLC_6247_21C-DPLC_6247
0002560A 0000                       DPLC_6247_56: 	dc.w DPLC_6247_225-DPLC_6247
0002560C 0000                       DPLC_6247_58: 	dc.w DPLC_6247_22A-DPLC_6247
0002560E 0000                       DPLC_6247_5A: 	dc.w DPLC_6247_233-DPLC_6247
00025610 0000                       DPLC_6247_5C: 	dc.w DPLC_6247_238-DPLC_6247
00025612 0000                       DPLC_6247_5E: 	dc.w DPLC_6247_23B-DPLC_6247
00025614 0000                       DPLC_6247_60: 	dc.w DPLC_6247_23E-DPLC_6247
00025616 0000                       DPLC_6247_62: 	dc.w DPLC_6247_241-DPLC_6247
00025618 0000                       DPLC_6247_64: 	dc.w DPLC_6247_244-DPLC_6247
0002561A 0000                       DPLC_6247_66: 	dc.w DPLC_6247_247-DPLC_6247
0002561C 0000                       DPLC_6247_68: 	dc.w DPLC_6247_24C-DPLC_6247
0002561E 0000                       DPLC_6247_6A: 	dc.w DPLC_6247_24F-DPLC_6247
00025620 0000                       DPLC_6247_6C: 	dc.w DPLC_6247_254-DPLC_6247
00025622 0000                       DPLC_6247_6E: 	dc.w DPLC_6247_257-DPLC_6247
00025624 0000                       DPLC_6247_70: 	dc.w DPLC_6247_25C-DPLC_6247
00025626 0000                       DPLC_6247_72: 	dc.w DPLC_6247_265-DPLC_6247
00025628 0000                       DPLC_6247_74: 	dc.w DPLC_6247_26A-DPLC_6247
0002562A 0000                       DPLC_6247_76: 	dc.w DPLC_6247_26F-DPLC_6247
0002562C 0000                       DPLC_6247_78: 	dc.w DPLC_6247_274-DPLC_6247
0002562E 0000                       DPLC_6247_7A: 	dc.w DPLC_6247_279-DPLC_6247
00025630 0000                       DPLC_6247_7C: 	dc.w DPLC_6247_27C-DPLC_6247
00025632 0000                       DPLC_6247_7E: 	dc.w DPLC_6247_283-DPLC_6247
00025634 0000                       DPLC_6247_80: 	dc.w DPLC_6247_288-DPLC_6247
00025636 0000                       DPLC_6247_82: 	dc.w DPLC_6247_28B-DPLC_6247
00025638 0000                       DPLC_6247_84: 	dc.w DPLC_6247_294-DPLC_6247
0002563A 0000                       DPLC_6247_86: 	dc.w DPLC_6247_29D-DPLC_6247
0002563C 0000                       DPLC_6247_88: 	dc.w DPLC_6247_2A8-DPLC_6247
0002563E 0000                       DPLC_6247_8A: 	dc.w DPLC_6247_2B3-DPLC_6247
00025640 0000                       DPLC_6247_8C: 	dc.w DPLC_6247_2B8-DPLC_6247
00025642 0000                       DPLC_6247_8E: 	dc.w DPLC_6247_2BF-DPLC_6247
00025644 0000                       DPLC_6247_90: 	dc.w DPLC_6247_2C4-DPLC_6247
00025646 0000                       DPLC_6247_92: 	dc.w DPLC_6247_2CB-DPLC_6247
00025648 0000                       DPLC_6247_94: 	dc.w DPLC_6247_2D0-DPLC_6247
0002564A 0000                       DPLC_6247_96: 	dc.w DPLC_6247_2D7-DPLC_6247
0002564C 0000                       DPLC_6247_98: 	dc.w DPLC_6247_2DE-DPLC_6247
0002564E 0000                       DPLC_6247_9A: 	dc.w DPLC_6247_2E9-DPLC_6247
00025650 0000                       DPLC_6247_9C: 	dc.w DPLC_6247_2F4-DPLC_6247
00025652 0000                       DPLC_6247_9E: 	dc.w DPLC_6247_2F9-DPLC_6247
00025654 0000                       DPLC_6247_A0: 	dc.w DPLC_6247_300-DPLC_6247
00025656 0000                       DPLC_6247_A2: 	dc.w DPLC_6247_303-DPLC_6247
00025658 0000                       DPLC_6247_A4: 	dc.w DPLC_6247_306-DPLC_6247
0002565A 0000                       DPLC_6247_A6: 	dc.w DPLC_6247_309-DPLC_6247
0002565C 0000                       DPLC_6247_A8: 	dc.w DPLC_6247_30E-DPLC_6247
0002565E 0000                       DPLC_6247_AA: 	dc.w DPLC_6247_315-DPLC_6247
00025660 0000                       DPLC_6247_AC: 	dc.w DPLC_6247_31C-DPLC_6247
00025662 0000                       DPLC_6247_AE: 	dc.w DPLC_6247_323-DPLC_6247
00025664 0000                       DPLC_6247_B0: 	dc.w DPLC_6247_328-DPLC_6247
00025666 0000                       DPLC_6247_B2: 	dc.w DPLC_6247_32D-DPLC_6247
00025668 0000                       DPLC_6247_B4: 	dc.w DPLC_6247_332-DPLC_6247
0002566A 0000                       DPLC_6247_B6: 	dc.w DPLC_6247_337-DPLC_6247
0002566C 0000                       DPLC_6247_B8: 	dc.w DPLC_6247_33C-DPLC_6247
0002566E 0000                       DPLC_6247_BA: 	dc.w DPLC_6247_33D-DPLC_6247
00025670 0000                       DPLC_6247_BC: 	dc.w DPLC_6247_33E-DPLC_6247
00025672 0000                       DPLC_6247_BE: 	dc.w DPLC_6247_33F-DPLC_6247
00025674 0000                       DPLC_6247_C0: 	dc.w DPLC_6247_340-DPLC_6247
00025676 0000                       DPLC_6247_C2: 	dc.w DPLC_6247_345-DPLC_6247
00025678 0000                       DPLC_6247_C4: 	dc.w DPLC_6247_346-DPLC_6247
0002567A 0000                       DPLC_6247_C6: 	dc.w DPLC_6247_34B-DPLC_6247
0002567C 0000                       DPLC_6247_C8: 	dc.w DPLC_6247_34C-DPLC_6247
0002567E 0000                       DPLC_6247_CA: 	dc.w DPLC_6247_34D-DPLC_6247
00025680 0000                       DPLC_6247_CC: 	dc.w DPLC_6247_34E-DPLC_6247
00025682 0000                       DPLC_6247_CE: 	dc.w DPLC_6247_353-DPLC_6247
00025684 0000                       DPLC_6247_D0: 	dc.w DPLC_6247_354-DPLC_6247
00025686 0000                       DPLC_6247_D2: 	dc.w DPLC_6247_359-DPLC_6247
00025688 0000                       DPLC_6247_D4: 	dc.w DPLC_6247_35A-DPLC_6247
0002568A 0000                       DPLC_6247_D6: 	dc.w DPLC_6247_35B-DPLC_6247
0002568C 0000                       DPLC_6247_D8: 	dc.w DPLC_6247_35C-DPLC_6247
0002568E 0000                       DPLC_6247_DA: 	dc.w DPLC_6247_361-DPLC_6247
00025690 0000                       DPLC_6247_DC: 	dc.w DPLC_6247_362-DPLC_6247
00025692 0000                       DPLC_6247_DE: 	dc.w DPLC_6247_367-DPLC_6247
00025694 00                         DPLC_6247_E0: 	dc.b $0
00025695 02                         DPLC_6247_E1: 	dc.b $2
00025696 F000                       	dc.b $F0, $0
00025698 1010                       	dc.b $10, $10
0002569A 03                         DPLC_6247_E6: 	dc.b $3
0002569B 5012                       	dc.b $50, $12
0002569D 5018                       	dc.b $50, $18
0002569F 201E                       	dc.b $20, $1E
000256A1 03                         DPLC_6247_ED: 	dc.b $3
000256A2 5021                       	dc.b $50, $21
000256A4 5018                       	dc.b $50, $18
000256A6 201E                       	dc.b $20, $1E
000256A8 03                         DPLC_6247_F4: 	dc.b $3
000256A9 5021                       	dc.b $50, $21
000256AB 5018                       	dc.b $50, $18
000256AD 2027                       	dc.b $20, $27
000256AF 03                         DPLC_6247_FB: 	dc.b $3
000256B0 802A                       	dc.b $80, $2A
000256B2 2033                       	dc.b $20, $33
000256B4 2036                       	dc.b $20, $36
000256B6 04                         DPLC_6247_102: 	dc.b $4
000256B7 7039                       	dc.b $70, $39
000256B9 5041                       	dc.b $50, $41
000256BB 5047                       	dc.b $50, $47
000256BD 104D                       	dc.b $10, $4D
000256BF 02                         DPLC_6247_10B: 	dc.b $2
000256C0 7039                       	dc.b $70, $39
000256C2 B04F                       	dc.b $B0, $4F
000256C4 02                         DPLC_6247_110: 	dc.b $2
000256C5 505B                       	dc.b $50, $5B
000256C7 8061                       	dc.b $80, $61
000256C9 04                         DPLC_6247_115: 	dc.b $4
000256CA 505B                       	dc.b $50, $5B
000256CC 506A                       	dc.b $50, $6A
000256CE 5070                       	dc.b $50, $70
000256D0 1076                       	dc.b $10, $76
000256D2 02                         DPLC_6247_11E: 	dc.b $2
000256D3 F4F0                       	dc.b $F4, $F0
000256D5 1500                       	dc.b $15, $0
000256D7 03                         DPLC_6247_123: 	dc.b $3
000256D8 7039                       	dc.b $70, $39
000256DA 3078                       	dc.b $30, $78
000256DC 507C                       	dc.b $50, $7C
000256DE 05                         DPLC_6247_12A: 	dc.b $5
000256DF 5082                       	dc.b $50, $82
000256E1 5088                       	dc.b $50, $88
000256E3 208E                       	dc.b $20, $8E
000256E5 5091                       	dc.b $50, $91
000256E7 0097                       	dc.b $0, $97
000256E9 06                         DPLC_6247_135: 	dc.b $6
000256EA 5082                       	dc.b $50, $82
000256EC 1098                       	dc.b $10, $98
000256EE 309A                       	dc.b $30, $9A
000256F0 509E                       	dc.b $50, $9E
000256F2 30A4                       	dc.b $30, $A4
000256F4 00A8                       	dc.b $0, $A8
000256F6 04                         DPLC_6247_142: 	dc.b $4
000256F7 50A9                       	dc.b $50, $A9
000256F9 10AF                       	dc.b $10, $AF
000256FB 70B1                       	dc.b $70, $B1
000256FD 20B9                       	dc.b $20, $B9
000256FF 05                         DPLC_6247_14B: 	dc.b $5
00025700 50BC                       	dc.b $50, $BC
00025702 30C2                       	dc.b $30, $C2
00025704 70C6                       	dc.b $70, $C6
00025706 20CE                       	dc.b $20, $CE
00025708 10D1                       	dc.b $10, $D1
0002570A 04                         DPLC_6247_156: 	dc.b $4
0002570B 50BC                       	dc.b $50, $BC
0002570D 10D3                       	dc.b $10, $D3
0002570F 70D5                       	dc.b $70, $D5
00025711 20DD                       	dc.b $20, $DD
00025713 05                         DPLC_6247_15F: 	dc.b $5
00025714 5082                       	dc.b $50, $82
00025716 1098                       	dc.b $10, $98
00025718 008E                       	dc.b $0, $8E
0002571A 70E0                       	dc.b $70, $E0
0002571C 20E8                       	dc.b $20, $E8
0002571E 04                         DPLC_6247_16A: 	dc.b $4
0002571F 70EB                       	dc.b $70, $EB
00025721 50F3                       	dc.b $50, $F3
00025723 10F9                       	dc.b $10, $F9
00025725 50FB                       	dc.b $50, $FB
00025727 02                         DPLC_6247_173: 	dc.b $2
00025728 70EB                       	dc.b $70, $EB
0002572A B101                       	dc.b $B1, $1
0002572C 02                         DPLC_6247_178: 	dc.b $2
0002572D 510D                       	dc.b $51, $D
0002572F 8113                       	dc.b $81, $13
00025731 04                         DPLC_6247_17D: 	dc.b $4
00025732 510D                       	dc.b $51, $D
00025734 511C                       	dc.b $51, $1C
00025736 1122                       	dc.b $11, $22
00025738 5124                       	dc.b $51, $24
0002573A 02                         DPLC_6247_186: 	dc.b $2
0002573B 510D                       	dc.b $51, $D
0002573D B12A                       	dc.b $B1, $2A
0002573F 03                         DPLC_6247_18B: 	dc.b $3
00025740 70EB                       	dc.b $70, $EB
00025742 0101                       	dc.b $1, $1
00025744 8136                       	dc.b $81, $36
00025746 06                         DPLC_6247_192: 	dc.b $6
00025747 513F                       	dc.b $51, $3F
00025749 1145                       	dc.b $11, $45
0002574B 1147                       	dc.b $11, $47
0002574D 8149                       	dc.b $81, $49
0002574F 0152                       	dc.b $1, $52
00025751 0153                       	dc.b $1, $53
00025753 06                         DPLC_6247_19F: 	dc.b $6
00025754 513F                       	dc.b $51, $3F
00025756 2154                       	dc.b $21, $54
00025758 1157                       	dc.b $11, $57
0002575A 1159                       	dc.b $11, $59
0002575C 815B                       	dc.b $81, $5B
0002575E 0152                       	dc.b $1, $52
00025760 04                         DPLC_6247_1AC: 	dc.b $4
00025761 5164                       	dc.b $51, $64
00025763 116A                       	dc.b $11, $6A
00025765 816C                       	dc.b $81, $6C
00025767 1175                       	dc.b $11, $75
00025769 05                         DPLC_6247_1B5: 	dc.b $5
0002576A 5177                       	dc.b $51, $77
0002576C 217D                       	dc.b $21, $7D
0002576E 1180                       	dc.b $11, $80
00025770 7182                       	dc.b $71, $82
00025772 218A                       	dc.b $21, $8A
00025774 04                         DPLC_6247_1C0: 	dc.b $4
00025775 5177                       	dc.b $51, $77
00025777 118D                       	dc.b $11, $8D
00025779 818F                       	dc.b $81, $8F
0002577B 1198                       	dc.b $11, $98
0002577D 05                         DPLC_6247_1C9: 	dc.b $5
0002577E 513F                       	dc.b $51, $3F
00025780 819A                       	dc.b $81, $9A
00025782 1159                       	dc.b $11, $59
00025784 11A3                       	dc.b $11, $A3
00025786 0152                       	dc.b $1, $52
00025788 02                         DPLC_6247_1D4: 	dc.b $2
00025789 51A5                       	dc.b $51, $A5
0002578B B1AB                       	dc.b $B1, $AB
0002578D 02                         DPLC_6247_1D9: 	dc.b $2
0002578E 505B                       	dc.b $50, $5B
00025790 B1B7                       	dc.b $B1, $B7
00025792 02                         DPLC_6247_1DE: 	dc.b $2
00025793 51A5                       	dc.b $51, $A5
00025795 B1C3                       	dc.b $B1, $C3
00025797 02                         DPLC_6247_1E3: 	dc.b $2
00025798 505B                       	dc.b $50, $5B
0002579A B1CF                       	dc.b $B1, $CF
0002579C 04                         DPLC_6247_1E8: 	dc.b $4
0002579D 51DB                       	dc.b $51, $DB
0002579F 11E1                       	dc.b $11, $E1
000257A1 B1E3                       	dc.b $B1, $E3
000257A3 01EF                       	dc.b $1, $EF
000257A5 03                         DPLC_6247_1F1: 	dc.b $3
000257A6 51F0                       	dc.b $51, $F0
000257A8 11F6                       	dc.b $11, $F6
000257AA B1F8                       	dc.b $B1, $F8
000257AC 04                         DPLC_6247_1F8: 	dc.b $4
000257AD 51DB                       	dc.b $51, $DB
000257AF 1204                       	dc.b $12, $4
000257B1 B206                       	dc.b $B2, $6
000257B3 01EF                       	dc.b $1, $EF
000257B5 03                         DPLC_6247_201: 	dc.b $3
000257B6 51F0                       	dc.b $51, $F0
000257B8 11F6                       	dc.b $11, $F6
000257BA B212                       	dc.b $B2, $12
000257BC 02                         DPLC_6247_208: 	dc.b $2
000257BD 521E                       	dc.b $52, $1E
000257BF B224                       	dc.b $B2, $24
000257C1 02                         DPLC_6247_20D: 	dc.b $2
000257C2 510D                       	dc.b $51, $D
000257C4 B230                       	dc.b $B2, $30
000257C6 02                         DPLC_6247_212: 	dc.b $2
000257C7 521E                       	dc.b $52, $1E
000257C9 B23C                       	dc.b $B2, $3C
000257CB 02                         DPLC_6247_217: 	dc.b $2
000257CC 510D                       	dc.b $51, $D
000257CE B248                       	dc.b $B2, $48
000257D0 04                         DPLC_6247_21C: 	dc.b $4
000257D1 5254                       	dc.b $52, $54
000257D3 125A                       	dc.b $12, $5A
000257D5 B25C                       	dc.b $B2, $5C
000257D7 0268                       	dc.b $2, $68
000257D9 02                         DPLC_6247_225: 	dc.b $2
000257DA 7269                       	dc.b $72, $69
000257DC B271                       	dc.b $B2, $71
000257DE 04                         DPLC_6247_22A: 	dc.b $4
000257DF 5254                       	dc.b $52, $54
000257E1 127D                       	dc.b $12, $7D
000257E3 B27F                       	dc.b $B2, $7F
000257E5 0268                       	dc.b $2, $68
000257E7 02                         DPLC_6247_233: 	dc.b $2
000257E8 7269                       	dc.b $72, $69
000257EA B28B                       	dc.b $B2, $8B
000257EC 01                         DPLC_6247_238: 	dc.b $1
000257ED F297                       	dc.b $F2, $97
000257EF 01                         DPLC_6247_23B: 	dc.b $1
000257F0 F2A7                       	dc.b $F2, $A7
000257F2 01                         DPLC_6247_23E: 	dc.b $1
000257F3 F2B7                       	dc.b $F2, $B7
000257F5 01                         DPLC_6247_241: 	dc.b $1
000257F6 F2C7                       	dc.b $F2, $C7
000257F8 01                         DPLC_6247_244: 	dc.b $1
000257F9 F2D7                       	dc.b $F2, $D7
000257FB 02                         DPLC_6247_247: 	dc.b $2
000257FC B2E7                       	dc.b $B2, $E7
000257FE 22F3                       	dc.b $22, $F3
00025800 01                         DPLC_6247_24C: 	dc.b $1
00025801 F2F6                       	dc.b $F2, $F6
00025803 02                         DPLC_6247_24F: 	dc.b $2
00025804 B306                       	dc.b $B3, $6
00025806 2312                       	dc.b $23, $12
00025808 01                         DPLC_6247_254: 	dc.b $1
00025809 F315                       	dc.b $F3, $15
0002580B 02                         DPLC_6247_257: 	dc.b $2
0002580C 5325                       	dc.b $53, $25
0002580E B32B                       	dc.b $B3, $2B
00025810 04                         DPLC_6247_25C: 	dc.b $4
00025811 5337                       	dc.b $53, $37
00025813 733D                       	dc.b $73, $3D
00025815 1345                       	dc.b $13, $45
00025817 0347                       	dc.b $3, $47
00025819 02                         DPLC_6247_265: 	dc.b $2
0002581A D348                       	dc.b $D3, $48
0002581C 34EC                       	dc.b $34, $EC
0002581E 02                         DPLC_6247_26A: 	dc.b $2
0002581F F528                       	dc.b $F5, $28
00025821 0538                       	dc.b $5, $38
00025823 02                         DPLC_6247_26F: 	dc.b $2
00025824 F539                       	dc.b $F5, $39
00025826 0549                       	dc.b $5, $49
00025828 02                         DPLC_6247_274: 	dc.b $2
00025829 E356                       	dc.b $E3, $56
0002582B 054A                       	dc.b $5, $4A
0002582D 01                         DPLC_6247_279: 	dc.b $1
0002582E 8365                       	dc.b $83, $65
00025830 03                         DPLC_6247_27C: 	dc.b $3
00025831 736E                       	dc.b $73, $6E
00025833 0376                       	dc.b $3, $76
00025835 3377                       	dc.b $33, $77
00025837 02                         DPLC_6247_283: 	dc.b $2
00025838 E37B                       	dc.b $E3, $7B
0002583A 054A                       	dc.b $5, $4A
0002583C 01                         DPLC_6247_288: 	dc.b $1
0002583D D561                       	dc.b $D5, $61
0002583F 04                         DPLC_6247_28B: 	dc.b $4
00025840 B399                       	dc.b $B3, $99
00025842 33A5                       	dc.b $33, $A5
00025844 03A9                       	dc.b $3, $A9
00025846 03AA                       	dc.b $3, $AA
00025848 04                         DPLC_6247_294: 	dc.b $4
00025849 B3AB                       	dc.b $B3, $AB
0002584B 33B7                       	dc.b $33, $B7
0002584D 03BB                       	dc.b $3, $BB
0002584F 03BC                       	dc.b $3, $BC
00025851 05                         DPLC_6247_29D: 	dc.b $5
00025852 83BD                       	dc.b $83, $BD
00025854 13C6                       	dc.b $13, $C6
00025856 53C8                       	dc.b $53, $C8
00025858 13CE                       	dc.b $13, $CE
0002585A 03D0                       	dc.b $3, $D0
0002585C 05                         DPLC_6247_2A8: 	dc.b $5
0002585D 83D1                       	dc.b $83, $D1
0002585F 13DA                       	dc.b $13, $DA
00025861 53C8                       	dc.b $53, $C8
00025863 13CE                       	dc.b $13, $CE
00025865 03D0                       	dc.b $3, $D0
00025867 02                         DPLC_6247_2B3: 	dc.b $2
00025868 83DC                       	dc.b $83, $DC
0002586A 73E5                       	dc.b $73, $E5
0002586C 03                         DPLC_6247_2B8: 	dc.b $3
0002586D 83ED                       	dc.b $83, $ED
0002586F 23F6                       	dc.b $23, $F6
00025871 13F9                       	dc.b $13, $F9
00025873 02                         DPLC_6247_2BF: 	dc.b $2
00025874 83FB                       	dc.b $83, $FB
00025876 7404                       	dc.b $74, $4
00025878 03                         DPLC_6247_2C4: 	dc.b $3
00025879 83ED                       	dc.b $83, $ED
0002587B 240C                       	dc.b $24, $C
0002587D 140F                       	dc.b $14, $F
0002587F 02                         DPLC_6247_2CB: 	dc.b $2
00025880 5411                       	dc.b $54, $11
00025882 B417                       	dc.b $B4, $17
00025884 03                         DPLC_6247_2D0: 	dc.b $3
00025885 8423                       	dc.b $84, $23
00025887 342C                       	dc.b $34, $2C
00025889 0430                       	dc.b $4, $30
0002588B 03                         DPLC_6247_2D7: 	dc.b $3
0002588C 7431                       	dc.b $74, $31
0002588E 1439                       	dc.b $14, $39
00025890 B43B                       	dc.b $B4, $3B
00025892 05                         DPLC_6247_2DE: 	dc.b $5
00025893 7447                       	dc.b $74, $47
00025895 144F                       	dc.b $14, $4F
00025897 5451                       	dc.b $54, $51
00025899 3457                       	dc.b $34, $57
0002589B 045B                       	dc.b $4, $5B
0002589D 05                         DPLC_6247_2E9: 	dc.b $5
0002589E 745C                       	dc.b $74, $5C
000258A0 144F                       	dc.b $14, $4F
000258A2 5464                       	dc.b $54, $64
000258A4 3457                       	dc.b $34, $57
000258A6 045B                       	dc.b $4, $5B
000258A8 02                         DPLC_6247_2F4: 	dc.b $2
000258A9 246A                       	dc.b $24, $6A
000258AB F46D                       	dc.b $F4, $6D
000258AD 03                         DPLC_6247_2F9: 	dc.b $3
000258AE 247D                       	dc.b $24, $7D
000258B0 B480                       	dc.b $B4, $80
000258B2 248C                       	dc.b $24, $8C
000258B4 01                         DPLC_6247_300: 	dc.b $1
000258B5 B48F                       	dc.b $B4, $8F
000258B7 01                         DPLC_6247_303: 	dc.b $1
000258B8 549B                       	dc.b $54, $9B
000258BA 01                         DPLC_6247_306: 	dc.b $1
000258BB 14A1                       	dc.b $14, $A1
000258BD 02                         DPLC_6247_309: 	dc.b $2
000258BE E356                       	dc.b $E3, $56
000258C0 054A                       	dc.b $5, $4A
000258C2 03                         DPLC_6247_30E: 	dc.b $3
000258C3 736E                       	dc.b $73, $6E
000258C5 0376                       	dc.b $3, $76
000258C7 3377                       	dc.b $33, $77
000258C9 03                         DPLC_6247_315: 	dc.b $3
000258CA B4A3                       	dc.b $B4, $A3
000258CC 14AF                       	dc.b $14, $AF
000258CE 34B1                       	dc.b $34, $B1
000258D0 03                         DPLC_6247_31C: 	dc.b $3
000258D1 54B5                       	dc.b $54, $B5
000258D3 B4BB                       	dc.b $B4, $BB
000258D5 1074                       	dc.b $10, $74
000258D7 02                         DPLC_6247_323: 	dc.b $2
000258D8 F4C7                       	dc.b $F4, $C7
000258DA 24D7                       	dc.b $24, $D7
000258DC 02                         DPLC_6247_328: 	dc.b $2
000258DD F4DA                       	dc.b $F4, $DA
000258DF 14EA                       	dc.b $14, $EA
000258E1 02                         DPLC_6247_32D: 	dc.b $2
000258E2 F502                       	dc.b $F5, $2
000258E4 2512                       	dc.b $25, $12
000258E6 02                         DPLC_6247_332: 	dc.b $2
000258E7 F515                       	dc.b $F5, $15
000258E9 2525                       	dc.b $25, $25
000258EB 02                         DPLC_6247_337: 	dc.b $2
000258EC F54B                       	dc.b $F5, $4B
000258EE 755B                       	dc.b $75, $5B
000258F0 00                         DPLC_6247_33C: 	dc.b $0
000258F1 00                         DPLC_6247_33D: 	dc.b $0
000258F2 00                         DPLC_6247_33E: 	dc.b $0
000258F3 00                         DPLC_6247_33F: 	dc.b $0
000258F4 02                         DPLC_6247_340: 	dc.b $2
000258F5 F4DA                       	dc.b $F4, $DA
000258F7 14EA                       	dc.b $14, $EA
000258F9 00                         DPLC_6247_345: 	dc.b $0
000258FA 02                         DPLC_6247_346: 	dc.b $2
000258FB F4DA                       	dc.b $F4, $DA
000258FD 14EA                       	dc.b $14, $EA
000258FF 00                         DPLC_6247_34B: 	dc.b $0
00025900 00                         DPLC_6247_34C: 	dc.b $0
00025901 00                         DPLC_6247_34D: 	dc.b $0
00025902 02                         DPLC_6247_34E: 	dc.b $2
00025903 F4DA                       	dc.b $F4, $DA
00025905 14EA                       	dc.b $14, $EA
00025907 00                         DPLC_6247_353: 	dc.b $0
00025908 02                         DPLC_6247_354: 	dc.b $2
00025909 F4DA                       	dc.b $F4, $DA
0002590B 14EA                       	dc.b $14, $EA
0002590D 00                         DPLC_6247_359: 	dc.b $0
0002590E 00                         DPLC_6247_35A: 	dc.b $0
0002590F 00                         DPLC_6247_35B: 	dc.b $0
00025910 02                         DPLC_6247_35C: 	dc.b $2
00025911 F4DA                       	dc.b $F4, $DA
00025913 14EA                       	dc.b $14, $EA
00025915 00                         DPLC_6247_361: 	dc.b $0
00025916 02                         DPLC_6247_362: 	dc.b $2
00025917 F4DA                       	dc.b $F4, $DA
00025919 14EA                       	dc.b $14, $EA
0002591B 00                         DPLC_6247_367: 	dc.b $0
0002591C                            	even
0002591C                            	even
0002591C                            
0002591C                            ; ---------------------------------------------------------------------------
0002591C                            ; Uncompressed graphics	- Sonic
0002591C                            ; ---------------------------------------------------------------------------
0002591C                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000306FC                            		even
000306FC                            ; ---------------------------------------------------------------------------
000306FC                            ; Compressed graphics - various
000306FC                            ; ---------------------------------------------------------------------------
000306FC                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030800                            		even
00030800                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0003083A                            		even
0003083A                            Nem_Shield:	incbin	artnem\shield.bin	; shield
000309D0                            		even
000309D0                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030B18                            		even
00030B18                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030C22                            		even
00030C22                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030C74                            		even
00030C74                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00030EBC                            		even
00030EBC                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00031042                            		even
00031042                            ; ---------------------------------------------------------------------------
00031042                            ; Sprite mappings - walls of the special stage
00031042                            ; ---------------------------------------------------------------------------
00031042                            Map_SSWalls:
00031042                            	include "_maps\SSwalls.asm"
00031042                            ; ---------------------------------------------------------------------------
00031042                            ; Sprite mappings - walls of the special stage
00031042                            ; ---------------------------------------------------------------------------
00031042 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00031046 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003104A 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003104E 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00031052 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00031056 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003105A 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003105E 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00031062 01                         byte_2C584:	dc.b 1
00031063 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00031068 01                         byte_2C58A:	dc.b 1
00031069 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003106E 01                         byte_2C590:	dc.b 1
0003106F F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00031074 01                         byte_2C596:	dc.b 1
00031075 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003107A 01                         byte_2C59C:	dc.b 1
0003107B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00031080 01                         byte_2C5A2:	dc.b 1
00031081 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00031086 01                         byte_2C5A8:	dc.b 1
00031087 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003108C 01                         byte_2C5AE:	dc.b 1
0003108D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00031092 01                         byte_2C5B4:	dc.b 1
00031093 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00031098 01                         byte_2C5BA:	dc.b 1
00031099 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003109E 01                         byte_2C5C0:	dc.b 1
0003109F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
000310A4 01                         byte_2C5C6:	dc.b 1
000310A5 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
000310AA 01                         byte_2C5CC:	dc.b 1
000310AB F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
000310B0 01                         byte_2C5D2:	dc.b 1
000310B1 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
000310B6 01                         byte_2C5D8:	dc.b 1
000310B7 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
000310BC 01                         byte_2C5DE:	dc.b 1
000310BD F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
000310C2                            		even
000310C2                            		even
000310C2                            ; ---------------------------------------------------------------------------
000310C2                            ; Compressed graphics - special stage
000310C2                            ; ---------------------------------------------------------------------------
000310C2                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
000319FA                            		even
000319FA                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031B48                            		even
00031B48                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032FDA                            		even
00032FDA                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000332DA                            		even
000332DA                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000337CE                            		even
000337CE                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000338BC                            		even
000338BC                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003398C                            		even
0003398C                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033A82                            		even
00033A82                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033AE0                            		even
00033AE0                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033B72                            		even
00033B72                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033C34                            		even
00033C34                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033D02                            		even
00033D02                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033DCE                            		even
00033DCE                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033E96                            		even
00033E96                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033F60                            		even
00033F60                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00034030                            		even
00034030                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00034224                            		even
00034224                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003438C                            		even
0003438C                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003443C                            		even
0003443C                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00034516                            		even
00034516                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003459A                            		even
0003459A                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00034718                            		even
00034718                            ; ---------------------------------------------------------------------------
00034718                            ; Compressed graphics - GHZ stuff
00034718                            ; ---------------------------------------------------------------------------
00034718                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034762                            		even
00034762                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003487C                            		even
0003487C                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034968                            		even
00034968                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000349B0                            		even
000349B0                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034B4E                            		even
00034B4E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034C0A                            		even
00034C0A                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034E1E                            		even
00034E1E                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034F4A                            		even
00034F4A                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00035078                            		even
00035078                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00035116                            		even
00035116                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00035176                            		even
00035176                            ; ---------------------------------------------------------------------------
00035176                            ; Compressed graphics - LZ stuff
00035176                            ; ---------------------------------------------------------------------------
00035176                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003529A                            		even
0003529A                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035A8E                            		even
00035A8E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035C0E                            		even
00035C0E                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035D78                            		even
00035D78                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000363CE                            		even
000363CE                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036484                            		even
00036484                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00036526                            		even
00036526                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036682                            		even
00036682                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000366E6                            		even
000366E6                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036838                            		even
00036838                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036D1A                            		even
00036D1A                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036E8A                            		even
00036E8A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00037142                            		even
00037142                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003727A                            		even
0003727A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000373A4                            		even
000373A4                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000374B4                            		even
000374B4                            ; ---------------------------------------------------------------------------
000374B4                            ; Compressed graphics - MZ stuff
000374B4                            ; ---------------------------------------------------------------------------
000374B4                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037742                            		even
00037742                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037800                            		even
00037800                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000378B8                            		even
000378B8                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003790C                            		even
0003790C                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037BDE 00                         		even
00037BDE                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000384F4                            		even
000384F4                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038658                            		even
00038658                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000386E0                            		even
000386E0                            ; ---------------------------------------------------------------------------
000386E0                            ; Compressed graphics - SLZ stuff
000386E0                            ; ---------------------------------------------------------------------------
000386E0                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003891C                            		even
0003891C                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038A62                            		even
00038A62                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038CA6                            		even
00038CA6                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038D08                            		even
00038D08                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038DEA                            		even
00038DEA                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038FCC                            		even
00038FCC                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000390D8                            		even
000390D8                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003917C                            		even
0003917C                            ; ---------------------------------------------------------------------------
0003917C                            ; Compressed graphics - SYZ stuff
0003917C                            ; ---------------------------------------------------------------------------
0003917C                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000392E6                            		even
000392E6                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00039348                            		even
00039348                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003942A                            		even
0003942A                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000396B8                            		even
000396B8                            ; ---------------------------------------------------------------------------
000396B8                            ; Compressed graphics - SBZ stuff
000396B8                            ; ---------------------------------------------------------------------------
000396B8                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003970C                            		even
0003970C                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000399A8                            		even
000399A8                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039BAC                            		even
00039BAC                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039D4A                            		even
00039D4A                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A07A                            		even
0003A07A                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A258                            		even
0003A258                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A2B0                            		even
0003A2B0                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A47A 00                         		even
0003A47A                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A578                            		even
0003A578                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A704                            		even
0003A704                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A754                            		even
0003A754                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A7AC                            		even
0003A7AC                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A8A8                            		even
0003A8A8                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A9BE                            		even
0003A9BE                            ; ---------------------------------------------------------------------------
0003A9BE                            ; Compressed graphics - enemies
0003A9BE                            ; ---------------------------------------------------------------------------
0003A9BE                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003AE2C 00                         		even
0003AE2C                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AFD6 00                         		even
0003AFD6                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B398 00                         		even
0003B398                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B580                            		even
0003B580                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B738 00                         		even
0003B738                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B882                            		even
0003B882                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BB0C                            		even
0003BB0C                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C130                            		even
0003C130                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C326                            		even
0003C326                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C944                            		even
0003C944                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CD44 00                         		even
0003CD44                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D040                            		even
0003D040                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D288                            		even
0003D288                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D520                            		even
0003D520                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D6FE                            		even
0003D6FE                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D88C                            		even
0003D88C                            ; ---------------------------------------------------------------------------
0003D88C                            ; Compressed graphics - various
0003D88C                            ; ---------------------------------------------------------------------------
0003D88C                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DDD4 00                         		even
0003DDD4                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DECA                            		even
0003DECA                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DFD0                            		even
0003DFD0                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E0C4                            		even
0003E0C4                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E608                            		even
0003E608                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EC6E                            		even
0003EC6E                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003ED1E                            		even
0003ED1E                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003EEB0                            		even
0003EEB0                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EFC4                            		even
0003EFC4                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F096                            		even
0003F096                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F512                            		even
0003F512                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F5D2                            		even
0003F5D2                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F746                            		even
0003F746                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003FA48                            		even
0003FA48                            ; ---------------------------------------------------------------------------
0003FA48                            ; Compressed graphics - continue screen
0003FA48                            ; ---------------------------------------------------------------------------
0003FA48                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003FCF8                            		even
0003FCF8                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FF32                            		even
0003FF32                            ; ---------------------------------------------------------------------------
0003FF32                            ; Compressed graphics - animals
0003FF32                            ; ---------------------------------------------------------------------------
0003FF32                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0004008A                            		even
0004008A                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
000401E6                            		even
000401E6                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040362                            		even
00040362                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0004047E                            		even
0004047E                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000405B4                            		even
000405B4                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000406EE                            		even
000406EE                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004084A                            		even
0004084A                            ; ---------------------------------------------------------------------------
0004084A                            ; Compressed graphics - primary patterns and block mappings
0004084A                            ; ---------------------------------------------------------------------------
0004084A                            Blk16_GHZ:	incbin	map16\ghz.bin
0004115E                            		even
0004115E                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042A6C                            		even
00042A6C                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043DEC                            		even
00043DEC                            Blk256_GHZ:	incbin	map256\ghz.bin
00046226                            		even
00046226                            Blk16_LZ:	incbin	map16\lz.bin
00046960                            		even
00046960                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048D66                            		even
00048D66                            Blk256_LZ:	incbin	map256\lz.bin
0004B6E6                            		even
0004B6E6                            Blk16_MZ:	incbin	map16\mz.bin
0004BE4E                            		even
0004BE4E                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E78A                            		even
0004E78A                            Blk256_MZ:	incbin	map256\mz.bin
0004FF2E                            		even
0004FF2E                            Blk16_SLZ:	incbin	map16\slz.bin
000505F8                            		even
000505F8                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005254C                            		even
0005254C                            Blk256_SLZ:	incbin	map256\slz.bin
00052BC6                            		even
00052BC6                            Blk16_SYZ:	incbin	map16\syz.bin
000537EC                            		even
000537EC                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057D7E                            		even
00057D7E                            Blk256_SYZ:	incbin	map256\syz.bin
00059DDA                            		even
00059DDA                            Blk16_SBZ:	incbin	map16\sbz.bin
0005AD22                            		even
0005AD22                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D6E6                            		even
0005D6E6                            Blk256_SBZ:	incbin	map256\sbz.bin
000601DC                            		even
000601DC                            ; ---------------------------------------------------------------------------
000601DC                            ; Compressed graphics - bosses and ending sequence
000601DC                            ; ---------------------------------------------------------------------------
000601DC                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000609F6 00                         		even
000609F6                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00061044                            		even
00061044                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
000610BE                            		even
000610BE                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000613A8                            		even
000613A8                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00061C2C                            		even
00061C2C                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00062982 00                         		even
00062982                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000630EA                            		even
000630EA                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006366A                            		even
0006366A                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006378A                            		even
0006378A                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00063988                            		even
00063988                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00064B66                            		even
00064B66                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000654AA                            		even
000654AA                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00065880                            		even
00065880                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00065E10                            		even
00065E10                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00066098                            		even
00066098                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00066686 00                         		even
00066686                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006690E                            		even
0006690E                            		incbin	misc\padding2.bin
00066A12                            		even
00066A12                            ; ---------------------------------------------------------------------------
00066A12                            ; Collision data
00066A12                            ; ---------------------------------------------------------------------------
00066A12                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00066B12                            		even
00066B12                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00067B12                            		even
00067B12                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00068B12                            		even
00068B12                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00068CCA 00                         		even
00068CCA                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00068E32                            		even
00068E32                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00068FC2 00                         		even
00068FC2                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000691B6                            		even
000691B6                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000693BC                            		even
000693BC                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006965A                            		even
0006965A                            ; ---------------------------------------------------------------------------
0006965A                            ; Special layouts
0006965A                            ; ---------------------------------------------------------------------------
0006965A                            SS_1:		incbin	sslayout\1.bin
000698A2                            		even
000698A2                            SS_2:		incbin	sslayout\2.bin
00069C5A                            		even
00069C5A                            SS_3:		incbin	sslayout\3.bin
00069FB6                            		even
00069FB6                            SS_4:		incbin	sslayout\4.bin
0006A490                            		even
0006A490                            SS_5:		incbin	sslayout\5.bin
0006A940                            		even
0006A940                            SS_6:		incbin	sslayout\6.bin
0006AC32                            		even
0006AC32                            ; ---------------------------------------------------------------------------
0006AC32                            ; Animated uncompressed graphics
0006AC32                            ; ---------------------------------------------------------------------------
0006AC32                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006AE32                            		even
0006AE32                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006B232                            		even
0006B232                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006B6B2                            		even
0006B6B2                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006B9B2                            		even
0006B9B2                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006BFB2                            		even
0006BFB2                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006C2B2                            		even
0006C2B2                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006CD32                            		even
0006CD32                            
0006CD32                            ; ---------------------------------------------------------------------------
0006CD32                            ; Level	layout index
0006CD32                            ; ---------------------------------------------------------------------------
0006CD32 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006CD38 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006CD3E 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006CD44 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006CD4A 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006CD50 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006CD56 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006CD5C 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006CD62 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006CD68 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006CD6E 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006CD74 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006CD7A 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CD80 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CD86 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CD8C 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006CD92 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006CD98 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006CD9E 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006CDA4 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006CDAA 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006CDB0 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006CDB6 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006CDBC 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006CDC2 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006CDC8 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006CDCE 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006CDD4 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006CDDA                            
0006CDDA                            Level_GHZ1:	incbin	levels\ghz1.bin
0006CECC                            		even
0006CECC 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006CED0                            Level_GHZ2:	incbin	levels\ghz2.bin
0006CF98                            		even
0006CF98 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006CF9C                            Level_GHZ3:	incbin	levels\ghz3.bin
0006D0BE                            		even
0006D0BE                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006D0E0                            		even
0006D0E0 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006D0E4 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006D0E8                            
0006D0E8                            Level_LZ1:	incbin	levels\lz1.bin
0006D1EA                            		even
0006D1EA                            Level_LZbg:	incbin	levels\lzbg.bin
0006D2EC                            		even
0006D2EC 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006D2F0                            Level_LZ2:	incbin	levels\lz2.bin
0006D38A                            		even
0006D38A 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006D38E                            Level_LZ3:	incbin	levels\lz3.bin
0006D4A8                            		even
0006D4A8 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006D4AC                            Level_SBZ3:	incbin	levels\sbz3.bin
0006D566                            		even
0006D566 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006D56A                            
0006D56A                            Level_MZ1:	incbin	levels\mz1.bin
0006D608                            		even
0006D608                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006D682                            		even
0006D682                            Level_MZ2:	incbin	levels\mz2.bin
0006D726                            		even
0006D726                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006D7B8                            		even
0006D7B8 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006D7BC                            Level_MZ3:	incbin	levels\mz3.bin
0006D89E                            		even
0006D89E                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006D942 00                         		even
0006D942 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006D946 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006D94A                            
0006D94A                            Level_SLZ1:	incbin	levels\slz1.bin
0006DA5C                            		even
0006DA5C                            Level_SLZbg:	incbin	levels\slzbg.bin
0006DA76                            		even
0006DA76                            Level_SLZ2:	incbin	levels\slz2.bin
0006DB66                            		even
0006DB66                            Level_SLZ3:	incbin	levels\slz3.bin
0006DC80                            		even
0006DC80 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006DC84                            
0006DC84                            Level_SYZ1:	incbin	levels\syz1.bin
0006DD40 00                         		even
0006DD40                            Level_SYZbg:	incbin	levels\syzbg.bin
0006DD7A                            		even
0006DD7A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006DD7E                            Level_SYZ2:	incbin	levels\syz2.bin
0006DE82                            		even
0006DE82 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006DE86                            Level_SYZ3:	incbin	levels\syz3.bin
0006DFE0 00                         		even
0006DFE0 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006DFE4 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006DFE8                            
0006DFE8                            Level_SBZ1:	incbin	levels\sbz1.bin
0006E10A                            		even
0006E10A                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006E148                            		even
0006E148                            Level_SBZ2:	incbin	levels\sbz2.bin
0006E28A                            		even
0006E28A                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006E3F4                            		even
0006E3F4 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006E3F8 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006E3FC                            Level_End:	incbin	levels\ending.bin
0006E42C 00                         		even
0006E42C 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006E430                            
0006E430                            ; ---------------------------------------------------------------------------
0006E430                            ; Animated uncompressed giant ring graphics
0006E430                            ; ---------------------------------------------------------------------------
0006E430                            Art_BigRing:	incbin	artunc\bigring.bin
0006F070                            		even
0006F070                            
0006F070                            		incbin	misc\padding3.bin
0006F10C                            		even
0006F10C                            
0006F10C                            ; ---------------------------------------------------------------------------
0006F10C                            ; Sprite locations index
0006F10C                            ; ---------------------------------------------------------------------------
0006F10C 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F110 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F114 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F118 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F11C 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F120 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F124 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F128 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F12C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F130 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F134 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F138 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F13C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F140 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F144 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F148 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F14C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F150 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F154 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F158 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F15C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F160 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F164 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F168 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F16C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F170 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F174 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F178 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F17C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006F180 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006F184 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006F188 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006F18C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006F190 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006F194 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006F198 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006F19C FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006F1A2                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006F9EE                            		even
0006F9EE                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006FCB8                            		even
0006FCB8                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00070684                            		even
00070684                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00070A2C                            		even
00070A2C                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00070D62                            		even
00070D62                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00071278                            		even
00071278                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00071710                            		even
00071710                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00071742                            		even
00071742                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00071774                            		even
00071774                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000717A6                            		even
000717A6                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000717D8                            		even
000717D8                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00071822                            		even
00071822                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00071860                            		even
00071860                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00071BCC                            		even
00071BCC                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00072076                            		even
00072076                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000725EC                            		even
000725EC                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00072616                            		even
00072616                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00072A7E                            		even
00072A7E                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00073060                            		even
00073060                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000736D2                            		even
000736D2                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00073C3C                            		even
00073C3C                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00074242                            		even
00074242                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00074980                            		even
00074980                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007505E                            		even
0007505E                            ObjPos_FZ:	incbin	objpos\fz.bin
00075070                            		even
00075070                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000750A2                            		even
000750A2                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000750D4                            		even
000750D4                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00075106                            		even
00075106                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00075138                            		even
00075138                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007516A                            		even
0007516A                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000751A2                            		even
000751A2                            ObjPos_End:	incbin	objpos\ending.bin
000752FE                            		even
000752FE FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00075304                            ; ---------------------------------------------------------------------------
00075304                            		incbin	misc\padding4.bin
0007592E                            		even
0007592E                            
0007592E 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00075932 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00075936 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007593A 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007593E 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00075942 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00075946                            ; ---------------------------------------------------------------------------
00075946                            ; PSG instruments used in music
00075946                            ; ---------------------------------------------------------------------------
00075946 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00075952 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007595E 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007596A                            
0007596A 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007597A 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
00075981                            
00075981 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
00075988                            
00075988 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
00075998 80                                     dc.b    $80
00075999                            
00075999 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
000759A4                            
000759A4 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
000759B4 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
000759C4 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
000759CE                            
000759CE 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
000759DD                            
000759DD 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000759ED 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
000759F9                            
000759F9 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
00075A09 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
00075A19 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
00075A21                            
00075A21 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
00075A31 80                                     dc.b    $80
00075A32                            
00075A32 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00075A3A                            ; ---------------------------------------------------------------------------
00075A3A                            ; Music	Pointers
00075A3A                            ; ---------------------------------------------------------------------------
00075A3A 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00075A42 0000 0000 0000 0000        		dc.l Music83, Music84
00075A4A 0000 0000 0000 0000        		dc.l Music85, Music86
00075A52 0000 0000 0000 0000        		dc.l Music87, Music88
00075A5A 0000 0000 0000 0000        		dc.l Music89, Music8A
00075A62 0000 0000 0000 0000        		dc.l Music8B, Music8C
00075A6A 0000 0000 0000 0000        		dc.l Music8D, Music8E
00075A72 0000 0000 0000 0000        		dc.l Music8F, Music90
00075A7A 0000 0000 0000 0000        		dc.l Music91, Music92
00075A82 0000 0000 0000 0000        		dc.l Music93, Music94
00075A8A 0000 0000 0000 0000        		dc.l Music95, Music96
00075A92 0000 0000 0000 0000        		dc.l Music97, Music98
00075A9A 0000 0000 0000 0000        		dc.l Music99, Music9A
00075AA2 0000 0000 0000 0000        		dc.l Music9B, Music9C
00075AAA 0000 0000 0000 0000        		dc.l Music9D, Music9E
00075AB2 0000 0000                  		dc.l Music9F
00075AB6                            ; ---------------------------------------------------------------------------
00075AB6                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00075AB6                            ; ---------------------------------------------------------------------------
00075AB6 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00075AC6 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00075AD6 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00075AE6 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00075AF6 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00075B06 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00075B16 9090 9090                  		dc.b $90, $90, $90, $90
00075B1A                            
00075B1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B1A                            
00075B1A                            
00075B1A                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00075B1A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00075B22 4E71                       		nop	
00075B24 4E71                       		nop	
00075B26 4E71                       		nop	
00075B28                            
00075B28                            loc_71B5A:
00075B28 0839 0000 00A1 1100        		btst	#0,($A11100).l
00075B30 66F6                       		bne.s	loc_71B5A
00075B32                            
00075B32 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00075B3A 6700                       		beq.s	loc_71B82
00075B3C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075B44 4E71                       		nop	
00075B46 4E71                       		nop	
00075B48 4E71                       		nop	
00075B4A 4E71                       		nop	
00075B4C 4E71                       		nop	
00075B4E 60CA                       		bra.s	sub_71B4C
00075B50                            ; ===========================================================================
00075B50                            
00075B50                            loc_71B82:
00075B50 4DF9 00FF F000             		lea	($FFF000).l,a6
00075B56 422E 000E                  		clr.b	$E(a6)
00075B5A 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00075B5E 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00075B62 532E 0001                  		subq.b	#1,1(a6)
00075B66 6600                       		bne.s	loc_71B9E
00075B68 4EBA 0000                  		jsr	sub_7260C(pc)
00075B6C                            
00075B6C                            loc_71B9E:
00075B6C 102E 0004                  		move.b	4(a6),d0
00075B70 6700                       		beq.s	loc_71BA8
00075B72 4EBA 0000                  		jsr	sub_72504(pc)
00075B76                            
00075B76                            loc_71BA8:
00075B76 4A2E 0024                  		tst.b	$24(a6)
00075B7A 6700                       		beq.s	loc_71BB2
00075B7C 4EBA 0000                  		jsr	sub_7267C(pc)
00075B80                            
00075B80                            loc_71BB2:
00075B80 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00075B84 6700                       		beq.s	loc_71BBC	; if not, branch
00075B86 4EBA 0000                  		jsr	Sound_Play(pc)
00075B8A                            
00075B8A                            loc_71BBC:
00075B8A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075B90 6700                       		beq.s	loc_71BC8
00075B92 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00075B96                            
00075B96                            loc_71BC8:
00075B96 4BEE 0040                  		lea	$40(a6),a5
00075B9A 4A15                       		tst.b	(a5)
00075B9C 6A00                       		bpl.s	loc_71BD4
00075B9E 4EBA 0000                  		jsr	sub_71C4E(pc)
00075BA2                            
00075BA2                            loc_71BD4:
00075BA2 422E 0008                  		clr.b	8(a6)
00075BA6 7E05                       		moveq	#5,d7
00075BA8                            
00075BA8                            loc_71BDA:
00075BA8 DAFC 0030                  		adda.w	#$30,a5
00075BAC 4A15                       		tst.b	(a5)
00075BAE 6A00                       		bpl.s	loc_71BE6
00075BB0 4EBA 0000                  		jsr	sub_71CCA(pc)
00075BB4                            
00075BB4                            loc_71BE6:
00075BB4 51CF FFF2                  		dbf	d7,loc_71BDA
00075BB8                            
00075BB8 7E02                       		moveq	#2,d7
00075BBA                            
00075BBA                            loc_71BEC:
00075BBA DAFC 0030                  		adda.w	#$30,a5
00075BBE 4A15                       		tst.b	(a5)
00075BC0 6A00                       		bpl.s	loc_71BF8
00075BC2 4EBA 0000                  		jsr	sub_72850(pc)
00075BC6                            
00075BC6                            loc_71BF8:
00075BC6 51CF FFF2                  		dbf	d7,loc_71BEC
00075BCA                            
00075BCA 1D7C 0080 000E             		move.b	#$80,$E(a6)
00075BD0 7E02                       		moveq	#2,d7
00075BD2                            
00075BD2                            loc_71C04:
00075BD2 DAFC 0030                  		adda.w	#$30,a5
00075BD6 4A15                       		tst.b	(a5)
00075BD8 6A00                       		bpl.s	loc_71C10
00075BDA 4EBA 0000                  		jsr	sub_71CCA(pc)
00075BDE                            
00075BDE                            loc_71C10:
00075BDE 51CF FFF2                  		dbf	d7,loc_71C04
00075BE2                            
00075BE2 7E02                       		moveq	#2,d7
00075BE4                            
00075BE4                            loc_71C16:
00075BE4 DAFC 0030                  		adda.w	#$30,a5
00075BE8 4A15                       		tst.b	(a5)
00075BEA 6A00                       		bpl.s	loc_71C22
00075BEC 4EBA 0000                  		jsr	sub_72850(pc)
00075BF0                            
00075BF0                            loc_71C22:
00075BF0 51CF FFF2                  		dbf	d7,loc_71C16
00075BF4 1D7C 0040 000E             		move.b	#$40,$E(a6)
00075BFA DAFC 0030                  		adda.w	#$30,a5
00075BFE 4A15                       		tst.b	(a5)
00075C00 6A00                       		bpl.s	loc_71C38
00075C02 4EBA 0000                  		jsr	sub_71CCA(pc)
00075C06                            
00075C06                            loc_71C38:
00075C06 DAFC 0030                  		adda.w	#$30,a5
00075C0A 4A15                       		tst.b	(a5)
00075C0C 6A00                       		bpl.s	loc_71C44
00075C0E 4EBA 0000                  		jsr	sub_72850(pc)
00075C12                            
00075C12                            loc_71C44:
00075C12 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075C1A 4E75                       		rts	
00075C1C                            ; End of function sub_71B4C
00075C1C                            
00075C1C                            
00075C1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C1C                            
00075C1C                            
00075C1C                            sub_71C4E:				; XREF: sub_71B4C
00075C1C 532D 000E                  		subq.b	#1,$E(a5)
00075C20 6600                       		bne.s	locret_71CAA
00075C22 1D7C 0080 0008             		move.b	#$80,8(a6)
00075C28 286D 0004                  		movea.l	4(a5),a4
00075C2C                            
00075C2C                            loc_71C5E:
00075C2C 7A00                       		moveq	#0,d5
00075C2E 1A1C                       		move.b	(a4)+,d5
00075C30 0C05 00E0                  		cmpi.b	#-$20,d5
00075C34 6500                       		bcs.s	loc_71C6E
00075C36 4EBA 0000                  		jsr	sub_72A5A(pc)
00075C3A 60F0                       		bra.s	loc_71C5E
00075C3C                            ; ===========================================================================
00075C3C                            
00075C3C                            loc_71C6E:
00075C3C 4A05                       		tst.b	d5
00075C3E 6A00                       		bpl.s	loc_71C84
00075C40 1B45 0010                  		move.b	d5,$10(a5)
00075C44 1A1C                       		move.b	(a4)+,d5
00075C46 6A00                       		bpl.s	loc_71C84
00075C48 534C                       		subq.w	#1,a4
00075C4A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075C50 6000                       		bra.s	loc_71C88
00075C52                            ; ===========================================================================
00075C52                            
00075C52                            loc_71C84:
00075C52 4EBA 0000                  		jsr	sub_71D40(pc)
00075C56                            
00075C56                            loc_71C88:
00075C56 2B4C 0004                  		move.l	a4,4(a5)
00075C5A 0815 0002                  		btst	#2,(a5)
00075C5E 6600                       		bne.s	locret_71CAA
00075C60 7000                       		moveq	#0,d0
00075C62 102D 0010                  		move.b	$10(a5),d0
00075C66 0C00 0080                  		cmpi.b	#$80,d0
00075C6A 6700                       		beq.s	locret_71CAA
00075C6C 0800 0003                  		btst	#3,d0
00075C70 6600                       		bne.s	loc_71CAC
00075C72 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00075C78                            
00075C78                            locret_71CAA:
00075C78 4E75                       		rts	
00075C7A                            ; ===========================================================================
00075C7A                            
00075C7A                            loc_71CAC:
00075C7A 0400 0088                  		subi.b	#$88,d0
00075C7E 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00075C82 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00075C88 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00075C90 4E75                       		rts	
00075C92                            ; End of function sub_71C4E
00075C92                            
00075C92                            ; ===========================================================================
00075C92 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00075C98                            
00075C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C98                            
00075C98                            
00075C98                            sub_71CCA:				; XREF: sub_71B4C
00075C98 532D 000E                  		subq.b	#1,$E(a5)
00075C9C 6600                       		bne.s	loc_71CE0
00075C9E 0895 0004                  		bclr	#4,(a5)
00075CA2 4EBA 0000                  		jsr	sub_71CEC(pc)
00075CA6 4EBA 0000                  		jsr	sub_71E18(pc)
00075CAA 6000 0000                  		bra.w	loc_726E2
00075CAE                            ; ===========================================================================
00075CAE                            
00075CAE                            loc_71CE0:
00075CAE 4EBA 0000                  		jsr	sub_71D9E(pc)
00075CB2 4EBA 0000                  		jsr	sub_71DC6(pc)
00075CB6 6000 0000                  		bra.w	loc_71E24
00075CBA                            ; End of function sub_71CCA
00075CBA                            
00075CBA                            
00075CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075CBA                            
00075CBA                            
00075CBA                            sub_71CEC:				; XREF: sub_71CCA
00075CBA 286D 0004                  		movea.l	4(a5),a4
00075CBE 0895 0001                  		bclr	#1,(a5)
00075CC2                            
00075CC2                            loc_71CF4:
00075CC2 7A00                       		moveq	#0,d5
00075CC4 1A1C                       		move.b	(a4)+,d5
00075CC6 0C05 00E0                  		cmpi.b	#-$20,d5
00075CCA 6500                       		bcs.s	loc_71D04
00075CCC 4EBA 0000                  		jsr	sub_72A5A(pc)
00075CD0 60F0                       		bra.s	loc_71CF4
00075CD2                            ; ===========================================================================
00075CD2                            
00075CD2                            loc_71D04:
00075CD2 4EBA 0000                  		jsr	sub_726FE(pc)
00075CD6 4A05                       		tst.b	d5
00075CD8 6A00                       		bpl.s	loc_71D1A
00075CDA 4EBA 0000                  		jsr	sub_71D22(pc)
00075CDE 1A1C                       		move.b	(a4)+,d5
00075CE0 6A00                       		bpl.s	loc_71D1A
00075CE2 534C                       		subq.w	#1,a4
00075CE4 6000 0000                  		bra.w	sub_71D60
00075CE8                            ; ===========================================================================
00075CE8                            
00075CE8                            loc_71D1A:
00075CE8 4EBA 0000                  		jsr	sub_71D40(pc)
00075CEC 6000 0000                  		bra.w	sub_71D60
00075CF0                            ; End of function sub_71CEC
00075CF0                            
00075CF0                            
00075CF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075CF0                            
00075CF0                            
00075CF0                            sub_71D22:				; XREF: sub_71CEC
00075CF0 0405 0080                  		subi.b	#$80,d5
00075CF4 6700                       		beq.s	loc_71D58
00075CF6 DA2D 0008                  		add.b	8(a5),d5
00075CFA 0245 007F                  		andi.w	#$7F,d5
00075CFE E34D                       		lsl.w	#1,d5
00075D00 41FA 0000                  		lea	word_72790(pc),a0
00075D04 3C30 5000                  		move.w	(a0,d5.w),d6
00075D08 3B46 0010                  		move.w	d6,$10(a5)
00075D0C 4E75                       		rts	
00075D0E                            ; End of function sub_71D22
00075D0E                            
00075D0E                            
00075D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075D0E                            
00075D0E                            
00075D0E                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075D0E 1005                       		move.b	d5,d0
00075D10 122D 0002                  		move.b	2(a5),d1
00075D14                            
00075D14                            loc_71D46:
00075D14 5301                       		subq.b	#1,d1
00075D16 6700                       		beq.s	loc_71D4E
00075D18 D005                       		add.b	d5,d0
00075D1A 60F8                       		bra.s	loc_71D46
00075D1C                            ; ===========================================================================
00075D1C                            
00075D1C                            loc_71D4E:
00075D1C 1B40 000F                  		move.b	d0,$F(a5)
00075D20 1B40 000E                  		move.b	d0,$E(a5)
00075D24 4E75                       		rts	
00075D26                            ; End of function sub_71D40
00075D26                            
00075D26                            ; ===========================================================================
00075D26                            
00075D26                            loc_71D58:				; XREF: sub_71D22
00075D26 08D5 0001                  		bset	#1,(a5)
00075D2A 426D 0010                  		clr.w	$10(a5)
00075D2E                            
00075D2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075D2E                            
00075D2E                            
00075D2E                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00075D2E 2B4C 0004                  		move.l	a4,4(a5)
00075D32 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075D38 0815 0004                  		btst	#4,(a5)
00075D3C 6600                       		bne.s	locret_71D9C
00075D3E 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00075D44 422D 000C                  		clr.b	$C(a5)
00075D48 0815 0003                  		btst	#3,(a5)
00075D4C 6700                       		beq.s	locret_71D9C
00075D4E 206D 0014                  		movea.l	$14(a5),a0
00075D52 1B58 0018                  		move.b	(a0)+,$18(a5)
00075D56 1B58 0019                  		move.b	(a0)+,$19(a5)
00075D5A 1B58 001A                  		move.b	(a0)+,$1A(a5)
00075D5E 1018                       		move.b	(a0)+,d0
00075D60 E208                       		lsr.b	#1,d0
00075D62 1B40 001B                  		move.b	d0,$1B(a5)
00075D66 426D 001C                  		clr.w	$1C(a5)
00075D6A                            
00075D6A                            locret_71D9C:
00075D6A 4E75                       		rts	
00075D6C                            ; End of function sub_71D60
00075D6C                            
00075D6C                            
00075D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075D6C                            
00075D6C                            
00075D6C                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00075D6C 4A2D 0012                  		tst.b	$12(a5)
00075D70 6700                       		beq.s	locret_71DC4
00075D72 532D 0012                  		subq.b	#1,$12(a5)
00075D76 6600                       		bne.s	locret_71DC4
00075D78 08D5 0001                  		bset	#1,(a5)
00075D7C 4A2D 0001                  		tst.b	1(a5)
00075D80 6B00 0000                  		bmi.w	loc_71DBE
00075D84 4EBA 0000                  		jsr	sub_726FE(pc)
00075D88 584F                       		addq.w	#4,sp
00075D8A 4E75                       		rts	
00075D8C                            ; ===========================================================================
00075D8C                            
00075D8C                            loc_71DBE:
00075D8C 4EBA 0000                  		jsr	sub_729A0(pc)
00075D90 584F                       		addq.w	#4,sp
00075D92                            
00075D92                            locret_71DC4:
00075D92 4E75                       		rts	
00075D94                            ; End of function sub_71D9E
00075D94                            
00075D94                            
00075D94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075D94                            
00075D94                            
00075D94                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00075D94 584F                       		addq.w	#4,sp
00075D96 0815 0003                  		btst	#3,(a5)
00075D9A 6700                       		beq.s	locret_71E16
00075D9C 4A2D 0018                  		tst.b	$18(a5)
00075DA0 6700                       		beq.s	loc_71DDA
00075DA2 532D 0018                  		subq.b	#1,$18(a5)
00075DA6 4E75                       		rts	
00075DA8                            ; ===========================================================================
00075DA8                            
00075DA8                            loc_71DDA:
00075DA8 532D 0019                  		subq.b	#1,$19(a5)
00075DAC 6700                       		beq.s	loc_71DE2
00075DAE 4E75                       		rts	
00075DB0                            ; ===========================================================================
00075DB0                            
00075DB0                            loc_71DE2:
00075DB0 206D 0014                  		movea.l	$14(a5),a0
00075DB4 1B68 0001 0019             		move.b	1(a0),$19(a5)
00075DBA 4A2D 001B                  		tst.b	$1B(a5)
00075DBE 6600                       		bne.s	loc_71DFE
00075DC0 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00075DC6 442D 001A                  		neg.b	$1A(a5)
00075DCA 4E75                       		rts	
00075DCC                            ; ===========================================================================
00075DCC                            
00075DCC                            loc_71DFE:
00075DCC 532D 001B                  		subq.b	#1,$1B(a5)
00075DD0 1C2D 001A                  		move.b	$1A(a5),d6
00075DD4 4886                       		ext.w	d6
00075DD6 DC6D 001C                  		add.w	$1C(a5),d6
00075DDA 3B46 001C                  		move.w	d6,$1C(a5)
00075DDE DC6D 0010                  		add.w	$10(a5),d6
00075DE2 594F                       		subq.w	#4,sp
00075DE4                            
00075DE4                            locret_71E16:
00075DE4 4E75                       		rts	
00075DE6                            ; End of function sub_71DC6
00075DE6                            
00075DE6                            
00075DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075DE6                            
00075DE6                            
00075DE6                            sub_71E18:				; XREF: sub_71CCA
00075DE6 0815 0001                  		btst	#1,(a5)
00075DEA 6600                       		bne.s	locret_71E48
00075DEC 3C2D 0010                  		move.w	$10(a5),d6
00075DF0 6700                       		beq.s	loc_71E4A
00075DF2                            
00075DF2                            loc_71E24:				; XREF: sub_71CCA
00075DF2 102D 001E                  		move.b	$1E(a5),d0
00075DF6 4880                       		ext.w	d0
00075DF8 DC40                       		add.w	d0,d6
00075DFA 0815 0002                  		btst	#2,(a5)
00075DFE 6600                       		bne.s	locret_71E48
00075E00 3206                       		move.w	d6,d1
00075E02 E049                       		lsr.w	#8,d1
00075E04 103C 00A4                  		move.b	#-$5C,d0
00075E08 4EBA 0000                  		jsr	sub_72722(pc)
00075E0C 1206                       		move.b	d6,d1
00075E0E 103C 00A0                  		move.b	#-$60,d0
00075E12 4EBA 0000                  		jsr	sub_72722(pc)
00075E16                            
00075E16                            locret_71E48:
00075E16 4E75                       		rts	
00075E18                            ; ===========================================================================
00075E18                            
00075E18                            loc_71E4A:
00075E18 08D5 0001                  		bset	#1,(a5)
00075E1C 4E75                       		rts	
00075E1E                            ; End of function sub_71E18
00075E1E                            
00075E1E                            ; ===========================================================================
00075E1E                            
00075E1E                            loc_71E50:				; XREF: sub_71B4C
00075E1E 6B00                       		bmi.s	loc_71E94
00075E20 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00075E26 6700 0000                  		beq.w	loc_71EFE
00075E2A 1D7C 0002 0003             		move.b	#2,3(a6)
00075E30 7602                       		moveq	#2,d3
00075E32 103C 00B4                  		move.b	#-$4C,d0
00075E36 7200                       		moveq	#0,d1
00075E38                            
00075E38                            loc_71E6A:
00075E38 4EBA 0000                  		jsr	sub_7272E(pc)
00075E3C 4EBA 0000                  		jsr	sub_72764(pc)
00075E40 5200                       		addq.b	#1,d0
00075E42 51CB FFF4                  		dbf	d3,loc_71E6A
00075E46                            
00075E46 7602                       		moveq	#2,d3
00075E48 7028                       		moveq	#$28,d0
00075E4A                            
00075E4A                            loc_71E7C:
00075E4A 1203                       		move.b	d3,d1
00075E4C 4EBA 0000                  		jsr	sub_7272E(pc)
00075E50 5801                       		addq.b	#4,d1
00075E52 4EBA 0000                  		jsr	sub_7272E(pc)
00075E56 51CB FFF2                  		dbf	d3,loc_71E7C
00075E5A                            
00075E5A 4EBA 0000                  		jsr	sub_729B6(pc)
00075E5E 6000 FDB2                  		bra.w	loc_71C44
00075E62                            ; ===========================================================================
00075E62                            
00075E62                            loc_71E94:				; XREF: loc_71E50
00075E62 422E 0003                  		clr.b	3(a6)
00075E66 7630                       		moveq	#$30,d3
00075E68 4BEE 0040                  		lea	$40(a6),a5
00075E6C 7806                       		moveq	#6,d4
00075E6E                            
00075E6E                            loc_71EA0:
00075E6E 0815 0007                  		btst	#7,(a5)
00075E72 6700                       		beq.s	loc_71EB8
00075E74 0815 0002                  		btst	#2,(a5)
00075E78 6600                       		bne.s	loc_71EB8
00075E7A 103C 00B4                  		move.b	#-$4C,d0
00075E7E 122D 000A                  		move.b	$A(a5),d1
00075E82 4EBA 0000                  		jsr	sub_72722(pc)
00075E86                            
00075E86                            loc_71EB8:
00075E86 DAC3                       		adda.w	d3,a5
00075E88 51CC FFE4                  		dbf	d4,loc_71EA0
00075E8C                            
00075E8C 4BEE 0220                  		lea	$220(a6),a5
00075E90 7802                       		moveq	#2,d4
00075E92                            
00075E92                            loc_71EC4:
00075E92 0815 0007                  		btst	#7,(a5)
00075E96 6700                       		beq.s	loc_71EDC
00075E98 0815 0002                  		btst	#2,(a5)
00075E9C 6600                       		bne.s	loc_71EDC
00075E9E 103C 00B4                  		move.b	#-$4C,d0
00075EA2 122D 000A                  		move.b	$A(a5),d1
00075EA6 4EBA 0000                  		jsr	sub_72722(pc)
00075EAA                            
00075EAA                            loc_71EDC:
00075EAA DAC3                       		adda.w	d3,a5
00075EAC 51CC FFE4                  		dbf	d4,loc_71EC4
00075EB0                            
00075EB0 4BEE 0340                  		lea	$340(a6),a5
00075EB4 0815 0007                  		btst	#7,(a5)
00075EB8 6700                       		beq.s	loc_71EFE
00075EBA 0815 0002                  		btst	#2,(a5)
00075EBE 6600                       		bne.s	loc_71EFE
00075EC0 103C 00B4                  		move.b	#-$4C,d0
00075EC4 122D 000A                  		move.b	$A(a5),d1
00075EC8 4EBA 0000                  		jsr	sub_72722(pc)
00075ECC                            
00075ECC                            loc_71EFE:
00075ECC 6000 FD44                  		bra.w	loc_71C44
00075ED0                            
00075ED0                            ; ---------------------------------------------------------------------------
00075ED0                            ; Subroutine to	play a sound or	music track
00075ED0                            ; ---------------------------------------------------------------------------
00075ED0                            
00075ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075ED0                            
00075ED0                            
00075ED0                            Sound_Play:				; XREF: sub_71B4C
00075ED0 2079 0007 592E             		movea.l	(Go_SoundTypes).l,a0
00075ED6 43EE 000A                  		lea	$A(a6),a1	; load music track number
00075EDA 1616                       		move.b	0(a6),d3
00075EDC 7802                       		moveq	#2,d4
00075EDE                            
00075EDE                            loc_71F12:
00075EDE 1011                       		move.b	(a1),d0		; move track number to d0
00075EE0 1200                       		move.b	d0,d1
00075EE2 4219                       		clr.b	(a1)+
00075EE4 0400 0081                  		subi.b	#$81,d0
00075EE8 6500                       		bcs.s	loc_71F3E
00075EEA 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075EF0 6700                       		beq.s	loc_71F2C
00075EF2 1D41 000A                  		move.b	d1,$A(a6)
00075EF6 6000                       		bra.s	loc_71F3E
00075EF8                            ; ===========================================================================
00075EF8                            
00075EF8                            loc_71F2C:
00075EF8 0240 007F                  		andi.w	#$7F,d0
00075EFC 1430 0000                  		move.b	(a0,d0.w),d2
00075F00 B403                       		cmp.b	d3,d2
00075F02 6500                       		bcs.s	loc_71F3E
00075F04 1602                       		move.b	d2,d3
00075F06 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00075F0A                            
00075F0A                            loc_71F3E:
00075F0A 51CC FFD2                  		dbf	d4,loc_71F12
00075F0E                            
00075F0E 4A03                       		tst.b	d3
00075F10 6B00                       		bmi.s	locret_71F4A
00075F12 1C83                       		move.b	d3,0(a6)
00075F14                            
00075F14                            locret_71F4A:
00075F14 4E75                       		rts	
00075F16                            ; End of function Sound_Play
00075F16                            
00075F16                            
00075F16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F16                            
00075F16                            
00075F16                            Sound_ChkValue:				; XREF: sub_71B4C
00075F16 7E00                       		moveq	#0,d7
00075F18 1E2E 0009                  		move.b	9(a6),d7
00075F1C 6700 0000                  		beq.w	Sound_E4
00075F20 6A00                       		bpl.s	locret_71F8C
00075F22 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00075F28 0C07 009F                  		cmpi.b	#$9F,d7
00075F2C 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00075F30 0C07 00A0                  		cmpi.b	#$A0,d7
00075F34 6500 0000                  		bcs.w	locret_71F8C
00075F38 0C07 00CF                  		cmpi.b	#$CF,d7
00075F3C 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00075F40 0C07 00D0                  		cmpi.b	#$D0,d7
00075F44 6500 0000                  		bcs.w	locret_71F8C
00075F48 0C07 00E0                  		cmpi.b	#$E0,d7
00075F4C 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00075F50 0C07 00E5                  		cmpi.b	#$E5,d7
00075F54 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
00075F56                            
00075F56                            locret_71F8C:
00075F56 4E75                       		rts	
00075F58                            ; ===========================================================================
00075F58                            
00075F58                            Sound_E0toE5				; XREF: Sound_ChkValue
00075F58 0407 00E0                  		subi.b	#$E0,d7
00075F5C E54F                       		lsl.w	#2,d7
00075F5E 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00075F62                            ; ===========================================================================
00075F62                            
00075F62                            Sound_ExIndex:
00075F62 6000 0000                  		bra.w	Sound_E0
00075F66                            ; ===========================================================================
00075F66 6000 0000                  		bra.w	Sound_E1
00075F6A                            ; ===========================================================================
00075F6A 6000 0000                  		bra.w	Sound_E2
00075F6E                            ; ===========================================================================
00075F6E 6000 0000                  		bra.w	Sound_E3
00075F72                            ; ===========================================================================
00075F72 6000 0000                  		bra.w	Sound_E4
00075F76                            ; ===========================================================================
00075F76 6000 0000                  		bra.w	Sound_E5
00075F7A                            ; ===========================================================================
00075F7A                            ; ---------------------------------------------------------------------------
00075F7A                            ; Play "Say-gaa" PCM sound
00075F7A                            ; ---------------------------------------------------------------------------
00075F7A                            
00075F7A                            Sound_E1:				  
00075F7A 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075F80 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00075F86 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075F8E                            PlayPCM_Loop:	  
00075F8E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075F94 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00075F98 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00075F9C 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075F9E 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00075FA0 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00075FA4 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00075FAA 4EB8 142A                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00075FAE 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00075FB4 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075FB6 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075FB8                            return_PlayPCM: 
00075FB8 584F                       		addq.w	#4,sp 
00075FBA 4E75                       		rts
00075FBC                            		
00075FBC                            ; ---------------------------------------------------------------------------
00075FBC                            ; Play you are an idiot pcm sound
00075FBC                            ; since the sfx already crashes the game forever load it here :V
00075FBC                            ; ---------------------------------------------------------------------------
00075FBC                            
00075FBC                            Sound_E5: 
00075FBC 4EB8 14FA                  		jsr	ClearScreen
00075FC0                            		;control port on a5
00075FC0 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00075FC6 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
00075FCC 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
00075FD0 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00075FD4 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00075FD8                            		
00075FD8 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
00075FDC                            		
00075FDC 2ABC 4000 0000             		move.l	#$40000000,(a5)
00075FE2 41F9 0002 42D6             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00075FE8 4EB8 1676                  		jsr	NemDec
00075FEC 43F9 00FF 0000             		lea	($FF0000).l,a1
00075FF2 41F9 0002 4278             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00075FF8 303C 0000                  		move.w	#0,d0
00075FFC 4EB8 1954                  		jsr	EniDec
00076000 43F9 00FF 0000             		lea	($FF0000).l,a1
00076006 203C 4304 0003             		move.l	#$43040003,d0
0007600C 7223                       		moveq	#35,d1
0007600E 740D                       		moveq	#13,d2
00076010 4EB8 1656                  		jsr	ShowVDPGraphics
00076014 7014                       		moveq	#20,d0
00076016 4EB8 234C                  		jsr	PalLoad2	; load pallet
0007601A                            		
0007601A                            Sound_E5_StartPCM:
0007601A 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00076020 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00076026 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007602E                            PlayPCM_LoopE5:	  
0007602E                            
0007602E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00076034                            		
00076034 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00076038                            		
00076038 1038 FE24                  		move.b	($FFFFFE24).w,d0
0007603C 0200 000F                  		andi.b	#$F,d0
00076040 6700                       		beq.s	SfxE5SwapPalette
00076042                            		
00076042 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00076046 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007604A 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007604C 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
0007604E 60DE                       		bra.s	PlayPCM_LoopE5
00076050                            		
00076050                            SfxE5SwapPalette:
00076050                            		
00076050 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00076056                            		
00076056                            		
00076056 0838 0004 FE24             		btst	#4,($FFFFFE24).w
0007605C 6700                       		beq.s	@not_black
0007605E 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00076064 6000                       		bra.s	@merge
00076066                            	@not_black:
00076066 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007606C                            	@merge:
0007606C 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00076070 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00076074 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
0007607A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0007607E                            		
0007607E 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00076082 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00076086 60A6                       		bra.s	PlayPCM_LoopE5
00076088                            		
00076088                            ; ===========================================================================
00076088                            ; ---------------------------------------------------------------------------
00076088                            ; Play music track $81-$9F
00076088                            ; ---------------------------------------------------------------------------
00076088                            
00076088                            Sound_81to9F:				; XREF: Sound_ChkValue
00076088 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007608C 6600                       		bne.s	loc_72024	; if not, branch
0007608E 4A2E 0027                  		tst.b	$27(a6)
00076092 6600 0000                  		bne.w	loc_721B6
00076096 4BEE 0040                  		lea	$40(a6),a5
0007609A 7009                       		moveq	#9,d0
0007609C                            
0007609C                            loc_71FE6:
0007609C 0895 0002                  		bclr	#2,(a5)
000760A0 DAFC 0030                  		adda.w	#$30,a5
000760A4 51C8 FFF6                  		dbf	d0,loc_71FE6
000760A8                            
000760A8 4BEE 0220                  		lea	$220(a6),a5
000760AC 7005                       		moveq	#5,d0
000760AE                            
000760AE                            loc_71FF8:
000760AE 0895 0007                  		bclr	#7,(a5)
000760B2 DAFC 0030                  		adda.w	#$30,a5
000760B6 51C8 FFF6                  		dbf	d0,loc_71FF8
000760BA 4216                       		clr.b	0(a6)
000760BC 204E                       		movea.l	a6,a0
000760BE 43EE 03A0                  		lea	$3A0(a6),a1
000760C2 303C 0087                  		move.w	#$87,d0
000760C6                            
000760C6                            loc_72012:
000760C6 22D8                       		move.l	(a0)+,(a1)+
000760C8 51C8 FFFC                  		dbf	d0,loc_72012
000760CC                            
000760CC 1D7C 0080 0027             		move.b	#$80,$27(a6)
000760D2 4216                       		clr.b	0(a6)
000760D4 6000                       		bra.s	loc_7202C
000760D6                            ; ===========================================================================
000760D6                            
000760D6                            loc_72024:
000760D6 422E 0027                  		clr.b	$27(a6)
000760DA 422E 0026                  		clr.b	$26(a6)
000760DE                            
000760DE                            loc_7202C:
000760DE 4EBA 0000                  		jsr	sub_725CA(pc)
000760E2 2879 0007 593E             		movea.l	(off_719A0).l,a4
000760E8 0407 0081                  		subi.b	#$81,d7
000760EC 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000760F2 2879 0007 5936             		movea.l	(Go_MusicIndex).l,a4
000760F8 E54F                       		lsl.w	#2,d7
000760FA 2874 7000                  		movea.l	(a4,d7.w),a4
000760FE 7000                       		moveq	#0,d0
00076100 3014                       		move.w	(a4),d0
00076102 D08C                       		add.l	a4,d0
00076104 2D40 0018                  		move.l	d0,$18(a6)
00076108 102C 0005                  		move.b	5(a4),d0
0007610C 1D40 0028                  		move.b	d0,$28(a6)
00076110 4A2E 002A                  		tst.b	$2A(a6)
00076114 6700                       		beq.s	loc_72068
00076116 102E 0029                  		move.b	$29(a6),d0
0007611A                            
0007611A                            loc_72068:
0007611A 1D40 0002                  		move.b	d0,2(a6)
0007611E 1D40 0001                  		move.b	d0,1(a6)
00076122 7200                       		moveq	#0,d1
00076124 264C                       		movea.l	a4,a3
00076126 5C4C                       		addq.w	#6,a4
00076128 7E00                       		moveq	#0,d7
0007612A 1E2B 0002                  		move.b	2(a3),d7
0007612E 6700 0000                  		beq.w	loc_72114
00076132 5307                       		subq.b	#1,d7
00076134 123C 00C0                  		move.b	#-$40,d1
00076138 182B 0004                  		move.b	4(a3),d4
0007613C 7C30                       		moveq	#$30,d6
0007613E 1A3C 0001                  		move.b	#1,d5
00076142 43EE 0040                  		lea	$40(a6),a1
00076146 45FA 0000                  		lea	byte_721BA(pc),a2
0007614A                            
0007614A                            loc_72098:
0007614A 08D1 0007                  		bset	#7,(a1)
0007614E 135A 0001                  		move.b	(a2)+,1(a1)
00076152 1344 0002                  		move.b	d4,2(a1)
00076156 1346 000D                  		move.b	d6,$D(a1)
0007615A 1341 000A                  		move.b	d1,$A(a1)
0007615E 1345 000E                  		move.b	d5,$E(a1)
00076162 7000                       		moveq	#0,d0
00076164 301C                       		move.w	(a4)+,d0
00076166 D08B                       		add.l	a3,d0
00076168 2340 0004                  		move.l	d0,4(a1)
0007616C 335C 0008                  		move.w	(a4)+,8(a1)
00076170 D2C6                       		adda.w	d6,a1
00076172 51CF FFD6                  		dbf	d7,loc_72098
00076176 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007617C 6600                       		bne.s	loc_720D8
0007617E 702B                       		moveq	#$2B,d0
00076180 7200                       		moveq	#0,d1
00076182 4EBA 0000                  		jsr	sub_7272E(pc)
00076186 6000 0000                  		bra.w	loc_72114
0007618A                            ; ===========================================================================
0007618A                            
0007618A                            loc_720D8:
0007618A 7028                       		moveq	#$28,d0
0007618C 7206                       		moveq	#6,d1
0007618E 4EBA 0000                  		jsr	sub_7272E(pc)
00076192 103C 0042                  		move.b	#$42,d0
00076196 727F                       		moveq	#$7F,d1
00076198 4EBA 0000                  		jsr	sub_72764(pc)
0007619C 103C 004A                  		move.b	#$4A,d0
000761A0 727F                       		moveq	#$7F,d1
000761A2 4EBA 0000                  		jsr	sub_72764(pc)
000761A6 103C 0046                  		move.b	#$46,d0
000761AA 727F                       		moveq	#$7F,d1
000761AC 4EBA 0000                  		jsr	sub_72764(pc)
000761B0 103C 004E                  		move.b	#$4E,d0
000761B4 727F                       		moveq	#$7F,d1
000761B6 4EBA 0000                  		jsr	sub_72764(pc)
000761BA 103C 00B6                  		move.b	#-$4A,d0
000761BE 123C 00C0                  		move.b	#-$40,d1
000761C2 4EBA 0000                  		jsr	sub_72764(pc)
000761C6                            
000761C6                            loc_72114:
000761C6 7E00                       		moveq	#0,d7
000761C8 1E2B 0003                  		move.b	3(a3),d7
000761CC 6700                       		beq.s	loc_72154
000761CE 5307                       		subq.b	#1,d7
000761D0 43EE 0190                  		lea	$190(a6),a1
000761D4 45FA 0000                  		lea	byte_721C2(pc),a2
000761D8                            
000761D8                            loc_72126:
000761D8 08D1 0007                  		bset	#7,(a1)
000761DC 135A 0001                  		move.b	(a2)+,1(a1)
000761E0 1344 0002                  		move.b	d4,2(a1)
000761E4 1346 000D                  		move.b	d6,$D(a1)
000761E8 1345 000E                  		move.b	d5,$E(a1)
000761EC 7000                       		moveq	#0,d0
000761EE 301C                       		move.w	(a4)+,d0
000761F0 D08B                       		add.l	a3,d0
000761F2 2340 0004                  		move.l	d0,4(a1)
000761F6 335C 0008                  		move.w	(a4)+,8(a1)
000761FA 101C                       		move.b	(a4)+,d0
000761FC 135C 000B                  		move.b	(a4)+,$B(a1)
00076200 D2C6                       		adda.w	d6,a1
00076202 51CF FFD4                  		dbf	d7,loc_72126
00076206                            
00076206                            loc_72154:
00076206 43EE 0220                  		lea	$220(a6),a1
0007620A 7E05                       		moveq	#5,d7
0007620C                            
0007620C                            loc_7215A:
0007620C 4A11                       		tst.b	(a1)
0007620E 6A00 0000                  		bpl.w	loc_7217C
00076212 7000                       		moveq	#0,d0
00076214 1029 0001                  		move.b	1(a1),d0
00076218 6B00                       		bmi.s	loc_7216E
0007621A 5500                       		subq.b	#2,d0
0007621C E508                       		lsl.b	#2,d0
0007621E 6000                       		bra.s	loc_72170
00076220                            ; ===========================================================================
00076220                            
00076220                            loc_7216E:
00076220 E608                       		lsr.b	#3,d0
00076222                            
00076222                            loc_72170:
00076222 41FA 0000                  		lea	dword_722CC(pc),a0
00076226 2070 0000                  		movea.l	(a0,d0.w),a0
0007622A 08D0 0002                  		bset	#2,(a0)
0007622E                            
0007622E                            loc_7217C:
0007622E D2C6                       		adda.w	d6,a1
00076230 51CF FFDA                  		dbf	d7,loc_7215A
00076234                            
00076234 4A6E 0340                  		tst.w	$340(a6)
00076238 6A00                       		bpl.s	loc_7218E
0007623A 08EE 0002 0100             		bset	#2,$100(a6)
00076240                            
00076240                            loc_7218E:
00076240 4A6E 0370                  		tst.w	$370(a6)
00076244 6A00                       		bpl.s	loc_7219A
00076246 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007624C                            
0007624C                            loc_7219A:
0007624C 4BEE 0070                  		lea	$70(a6),a5
00076250 7805                       		moveq	#5,d4
00076252                            
00076252                            loc_721A0:
00076252 4EBA 0000                  		jsr	sub_726FE(pc)
00076256 DAC6                       		adda.w	d6,a5
00076258 51CC FFF8                  		dbf	d4,loc_721A0
0007625C 7802                       		moveq	#2,d4
0007625E                            
0007625E                            loc_721AC:
0007625E 4EBA 0000                  		jsr	sub_729A0(pc)
00076262 DAC6                       		adda.w	d6,a5
00076264 51CC FFF8                  		dbf	d4,loc_721AC
00076268                            
00076268                            loc_721B6:
00076268 584F                       		addq.w	#4,sp
0007626A 4E75                       		rts	
0007626C                            ; ===========================================================================
0007626C 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00076274                            		even
00076274 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00076278                            		even
00076278                            ; ===========================================================================
00076278                            ; ---------------------------------------------------------------------------
00076278                            ; Play normal sound effect
00076278                            ; ---------------------------------------------------------------------------
00076278                            
00076278                            Sound_A0toCF:				; XREF: Sound_ChkValue
00076278 4A2E 0027                  		tst.b	$27(a6)
0007627C 6600 0000                  		bne.w	loc_722C6
00076280 4A2E 0004                  		tst.b	4(a6)
00076284 6600 0000                  		bne.w	loc_722C6
00076288 4A2E 0024                  		tst.b	$24(a6)
0007628C 6600 0000                  		bne.w	loc_722C6
00076290 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00076294 6600                       		bne.s	Sound_notB5	; if not, branch
00076296 4A2E 002B                  		tst.b	$2B(a6)
0007629A 6600                       		bne.s	loc_721EE
0007629C 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000762A0                            
000762A0                            loc_721EE:
000762A0 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000762A6                            
000762A6                            Sound_notB5:
000762A6 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000762AA 6600                       		bne.s	Sound_notA7	; if not, branch
000762AC 4A2E 002C                  		tst.b	$2C(a6)
000762B0 6600 0000                  		bne.w	locret_722C4
000762B4 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000762BA                            
000762BA                            Sound_notA7:
000762BA 2079 0007 593A             		movea.l	(Go_SoundIndex).l,a0
000762C0 0407 00A0                  		subi.b	#$A0,d7
000762C4 E54F                       		lsl.w	#2,d7
000762C6 2670 7000                  		movea.l	(a0,d7.w),a3
000762CA 224B                       		movea.l	a3,a1
000762CC 7200                       		moveq	#0,d1
000762CE 3219                       		move.w	(a1)+,d1
000762D0 D28B                       		add.l	a3,d1
000762D2 1A19                       		move.b	(a1)+,d5
000762D4 1E19                       		move.b	(a1)+,d7
000762D6 5307                       		subq.b	#1,d7
000762D8 7C30                       		moveq	#$30,d6
000762DA                            
000762DA                            loc_72228:
000762DA 7600                       		moveq	#0,d3
000762DC 1629 0001                  		move.b	1(a1),d3
000762E0 1803                       		move.b	d3,d4
000762E2 6B00                       		bmi.s	loc_72244
000762E4 5543                       		subq.w	#2,d3
000762E6 E54B                       		lsl.w	#2,d3
000762E8 4BFA 0000                  		lea	dword_722CC(pc),a5
000762EC 2A75 3000                  		movea.l	(a5,d3.w),a5
000762F0 08D5 0002                  		bset	#2,(a5)
000762F4 6000                       		bra.s	loc_7226E
000762F6                            ; ===========================================================================
000762F6                            
000762F6                            loc_72244:
000762F6 E64B                       		lsr.w	#3,d3
000762F8 4BFA 0000                  		lea	dword_722CC(pc),a5
000762FC 2A75 3000                  		movea.l	(a5,d3.w),a5
00076300 08D5 0002                  		bset	#2,(a5)
00076304 0C04 00C0                  		cmpi.b	#$C0,d4
00076308 6600                       		bne.s	loc_7226E
0007630A 1004                       		move.b	d4,d0
0007630C 0000 001F                  		ori.b	#$1F,d0
00076310 13C0 00C0 0011             		move.b	d0,($C00011).l
00076316 0840 0005                  		bchg	#5,d0
0007631A 13C0 00C0 0011             		move.b	d0,($C00011).l
00076320                            
00076320                            loc_7226E:
00076320 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00076324 244D                       		movea.l	a5,a2
00076326 700B                       		moveq	#$B,d0
00076328                            
00076328                            loc_72276:
00076328 429A                       		clr.l	(a2)+
0007632A 51C8 FFFC                  		dbf	d0,loc_72276
0007632E                            
0007632E 3A99                       		move.w	(a1)+,(a5)
00076330 1B45 0002                  		move.b	d5,2(a5)
00076334 7000                       		moveq	#0,d0
00076336 3019                       		move.w	(a1)+,d0
00076338 D08B                       		add.l	a3,d0
0007633A 2B40 0004                  		move.l	d0,4(a5)
0007633E 3B59 0008                  		move.w	(a1)+,8(a5)
00076342 1B7C 0001 000E             		move.b	#1,$E(a5)
00076348 1B46 000D                  		move.b	d6,$D(a5)
0007634C 4A04                       		tst.b	d4
0007634E 6B00                       		bmi.s	loc_722A8
00076350 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00076356 2B41 0020                  		move.l	d1,$20(a5)
0007635A                            
0007635A                            loc_722A8:
0007635A 51CF FF7E                  		dbf	d7,loc_72228
0007635E                            
0007635E 4A2E 0250                  		tst.b	$250(a6)
00076362 6A00                       		bpl.s	loc_722B8
00076364 08EE 0002 0340             		bset	#2,$340(a6)
0007636A                            
0007636A                            loc_722B8:
0007636A 4A2E 0310                  		tst.b	$310(a6)
0007636E 6A00                       		bpl.s	locret_722C4
00076370 08EE 0002 0370             		bset	#2,$370(a6)
00076376                            
00076376                            locret_722C4:
00076376 4E75                       		rts	
00076378                            ; ===========================================================================
00076378                            
00076378                            loc_722C6:
00076378 4216                       		clr.b	0(a6)
0007637A 4E75                       		rts	
0007637C                            ; ===========================================================================
0007637C 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00076380 0000 0000                  		dc.l 0
00076384 00FF F100                  		dc.l $FFF100
00076388 00FF F130                  		dc.l $FFF130
0007638C 00FF F190                  		dc.l $FFF190
00076390 00FF F1C0                  		dc.l $FFF1C0
00076394 00FF F1F0                  		dc.l $FFF1F0
00076398 00FF F1F0                  		dc.l $FFF1F0
0007639C 00FF F220                  dword_722EC:	dc.l $FFF220
000763A0 0000 0000                  		dc.l 0
000763A4 00FF F250                  		dc.l $FFF250
000763A8 00FF F280                  		dc.l $FFF280
000763AC 00FF F2B0                  		dc.l $FFF2B0
000763B0 00FF F2E0                  		dc.l $FFF2E0
000763B4 00FF F310                  		dc.l $FFF310
000763B8 00FF F310                  		dc.l $FFF310
000763BC                            ; ===========================================================================
000763BC                            ; ---------------------------------------------------------------------------
000763BC                            ; Play GHZ waterfall sound
000763BC                            ; ---------------------------------------------------------------------------
000763BC                            
000763BC                            Sound_D0toDF:				; XREF: Sound_ChkValue
000763BC 4A2E 0027                  		tst.b	$27(a6)
000763C0 6600 0000                  		bne.w	locret_723C6
000763C4 4A2E 0004                  		tst.b	4(a6)
000763C8 6600 0000                  		bne.w	locret_723C6
000763CC 4A2E 0024                  		tst.b	$24(a6)
000763D0 6600 0000                  		bne.w	locret_723C6
000763D4 2079 0007 5932             		movea.l	(Go_SoundD0).l,a0
000763DA 0407 00D0                  		subi.b	#$D0,d7
000763DE E54F                       		lsl.w	#2,d7
000763E0 2670 7000                  		movea.l	(a0,d7.w),a3
000763E4 224B                       		movea.l	a3,a1
000763E6 7000                       		moveq	#0,d0
000763E8 3019                       		move.w	(a1)+,d0
000763EA D08B                       		add.l	a3,d0
000763EC 2D40 0020                  		move.l	d0,$20(a6)
000763F0 1A19                       		move.b	(a1)+,d5
000763F2 1E19                       		move.b	(a1)+,d7
000763F4 5307                       		subq.b	#1,d7
000763F6 7C30                       		moveq	#$30,d6
000763F8                            
000763F8                            loc_72348:
000763F8 1829 0001                  		move.b	1(a1),d4
000763FC 6B00                       		bmi.s	loc_7235A
000763FE 08EE 0002 0100             		bset	#2,$100(a6)
00076404 4BEE 0340                  		lea	$340(a6),a5
00076408 6000                       		bra.s	loc_72364
0007640A                            ; ===========================================================================
0007640A                            
0007640A                            loc_7235A:
0007640A 08EE 0002 01F0             		bset	#2,$1F0(a6)
00076410 4BEE 0370                  		lea	$370(a6),a5
00076414                            
00076414                            loc_72364:
00076414 244D                       		movea.l	a5,a2
00076416 700B                       		moveq	#$B,d0
00076418                            
00076418                            loc_72368:
00076418 429A                       		clr.l	(a2)+
0007641A 51C8 FFFC                  		dbf	d0,loc_72368
0007641E                            
0007641E 3A99                       		move.w	(a1)+,(a5)
00076420 1B45 0002                  		move.b	d5,2(a5)
00076424 7000                       		moveq	#0,d0
00076426 3019                       		move.w	(a1)+,d0
00076428 D08B                       		add.l	a3,d0
0007642A 2B40 0004                  		move.l	d0,4(a5)
0007642E 3B59 0008                  		move.w	(a1)+,8(a5)
00076432 1B7C 0001 000E             		move.b	#1,$E(a5)
00076438 1B46 000D                  		move.b	d6,$D(a5)
0007643C 4A04                       		tst.b	d4
0007643E 6B00                       		bmi.s	loc_72396
00076440 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00076446                            
00076446                            loc_72396:
00076446 51CF FFB0                  		dbf	d7,loc_72348
0007644A                            
0007644A 4A2E 0250                  		tst.b	$250(a6)
0007644E 6A00                       		bpl.s	loc_723A6
00076450 08EE 0002 0340             		bset	#2,$340(a6)
00076456                            
00076456                            loc_723A6:
00076456 4A2E 0310                  		tst.b	$310(a6)
0007645A 6A00                       		bpl.s	locret_723C6
0007645C 08EE 0002 0370             		bset	#2,$370(a6)
00076462 0004 001F                  		ori.b	#$1F,d4
00076466 13C4 00C0 0011             		move.b	d4,($C00011).l
0007646C 0844 0005                  		bchg	#5,d4
00076470 13C4 00C0 0011             		move.b	d4,($C00011).l
00076476                            
00076476                            locret_723C6:
00076476 4E75                       		rts	
00076478                            ; End of function Sound_ChkValue
00076478                            
00076478                            ; ===========================================================================
00076478 00FF F100                  		dc.l $FFF100
0007647C 00FF F1F0                  		dc.l $FFF1F0
00076480 00FF F250                  		dc.l $FFF250
00076484 00FF F310                  		dc.l $FFF310
00076488 00FF F340                  		dc.l $FFF340
0007648C 00FF F370                  		dc.l $FFF370
00076490                            
00076490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076490                            
00076490                            
00076490                            Snd_FadeOut1:				; XREF: Sound_E0
00076490 4216                       		clr.b	0(a6)
00076492 4BEE 0220                  		lea	$220(a6),a5
00076496 7E05                       		moveq	#5,d7
00076498                            
00076498                            loc_723EA:
00076498 4A15                       		tst.b	(a5)
0007649A 6A00 0000                  		bpl.w	loc_72472
0007649E 0895 0007                  		bclr	#7,(a5)
000764A2 7600                       		moveq	#0,d3
000764A4 162D 0001                  		move.b	1(a5),d3
000764A8 6B00                       		bmi.s	loc_7243C
000764AA 4EBA 0000                  		jsr	sub_726FE(pc)
000764AE 0C03 0004                  		cmpi.b	#4,d3
000764B2 6600                       		bne.s	loc_72416
000764B4 4A2E 0340                  		tst.b	$340(a6)
000764B8 6A00                       		bpl.s	loc_72416
000764BA 4BEE 0340                  		lea	$340(a6),a5
000764BE 226E 0020                  		movea.l	$20(a6),a1
000764C2 6000                       		bra.s	loc_72428
000764C4                            ; ===========================================================================
000764C4                            
000764C4                            loc_72416:
000764C4 5503                       		subq.b	#2,d3
000764C6 E50B                       		lsl.b	#2,d3
000764C8 41FA FEB2                  		lea	dword_722CC(pc),a0
000764CC 264D                       		movea.l	a5,a3
000764CE 2A70 3000                  		movea.l	(a0,d3.w),a5
000764D2 226E 0018                  		movea.l	$18(a6),a1
000764D6                            
000764D6                            loc_72428:
000764D6 0895 0002                  		bclr	#2,(a5)
000764DA 08D5 0001                  		bset	#1,(a5)
000764DE 102D 000B                  		move.b	$B(a5),d0
000764E2 4EBA 0000                  		jsr	sub_72C4E(pc)
000764E6 2A4B                       		movea.l	a3,a5
000764E8 6000                       		bra.s	loc_72472
000764EA                            ; ===========================================================================
000764EA                            
000764EA                            loc_7243C:
000764EA 4EBA 0000                  		jsr	sub_729A0(pc)
000764EE 41EE 0370                  		lea	$370(a6),a0
000764F2 0C03 00E0                  		cmpi.b	#$E0,d3
000764F6 6700                       		beq.s	loc_7245A
000764F8 0C03 00C0                  		cmpi.b	#$C0,d3
000764FC 6700                       		beq.s	loc_7245A
000764FE E60B                       		lsr.b	#3,d3
00076500 41FA FE7A                  		lea	dword_722CC(pc),a0
00076504 2070 3000                  		movea.l	(a0,d3.w),a0
00076508                            
00076508                            loc_7245A:
00076508 0890 0002                  		bclr	#2,(a0)
0007650C 08D0 0001                  		bset	#1,(a0)
00076510 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00076516 6600                       		bne.s	loc_72472
00076518 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00076520                            
00076520                            loc_72472:
00076520 DAFC 0030                  		adda.w	#$30,a5
00076524 51CF FF72                  		dbf	d7,loc_723EA
00076528                            
00076528 4E75                       		rts	
0007652A                            ; End of function Snd_FadeOut1
0007652A                            
0007652A                            
0007652A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007652A                            
0007652A                            
0007652A                            Snd_FadeOut2:				; XREF: Sound_E0
0007652A 4BEE 0340                  		lea	$340(a6),a5
0007652E 4A15                       		tst.b	(a5)
00076530 6A00                       		bpl.s	loc_724AE
00076532 0895 0007                  		bclr	#7,(a5)
00076536 0815 0002                  		btst	#2,(a5)
0007653A 6600                       		bne.s	loc_724AE
0007653C 4EBA 0000                  		jsr	loc_7270A(pc)
00076540 4BEE 0100                  		lea	$100(a6),a5
00076544 0895 0002                  		bclr	#2,(a5)
00076548 08D5 0001                  		bset	#1,(a5)
0007654C 4A15                       		tst.b	(a5)
0007654E 6A00                       		bpl.s	loc_724AE
00076550 226E 0018                  		movea.l	$18(a6),a1
00076554 102D 000B                  		move.b	$B(a5),d0
00076558 4EBA 0000                  		jsr	sub_72C4E(pc)
0007655C                            
0007655C                            loc_724AE:
0007655C 4BEE 0370                  		lea	$370(a6),a5
00076560 4A15                       		tst.b	(a5)
00076562 6A00                       		bpl.s	locret_724E4
00076564 0895 0007                  		bclr	#7,(a5)
00076568 0815 0002                  		btst	#2,(a5)
0007656C 6600                       		bne.s	locret_724E4
0007656E 4EBA 0000                  		jsr	loc_729A6(pc)
00076572 4BEE 01F0                  		lea	$1F0(a6),a5
00076576 0895 0002                  		bclr	#2,(a5)
0007657A 08D5 0001                  		bset	#1,(a5)
0007657E 4A15                       		tst.b	(a5)
00076580 6A00                       		bpl.s	locret_724E4
00076582 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00076588 6600                       		bne.s	locret_724E4
0007658A 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00076592                            
00076592                            locret_724E4:
00076592 4E75                       		rts	
00076594                            ; End of function Snd_FadeOut2
00076594                            
00076594                            ; ===========================================================================
00076594                            ; ---------------------------------------------------------------------------
00076594                            ; Fade out music
00076594                            ; ---------------------------------------------------------------------------
00076594                            
00076594                            Sound_E0:				; XREF: Sound_ExIndex
00076594 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00076598 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007659C 1D7C 0003 0006             		move.b	#3,6(a6)
000765A2 1D7C 0028 0004             		move.b	#$28,4(a6)
000765A8 422E 0040                  		clr.b	$40(a6)
000765AC 422E 002A                  		clr.b	$2A(a6)
000765B0 4E75                       		rts	
000765B2                            
000765B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000765B2                            
000765B2                            
000765B2                            sub_72504:				; XREF: sub_71B4C
000765B2 102E 0006                  		move.b	6(a6),d0
000765B6 6700                       		beq.s	loc_72510
000765B8 532E 0006                  		subq.b	#1,6(a6)
000765BC 4E75                       		rts	
000765BE                            ; ===========================================================================
000765BE                            
000765BE                            loc_72510:
000765BE 532E 0004                  		subq.b	#1,4(a6)
000765C2 6700 0000                  		beq.w	Sound_E4
000765C6 1D7C 0003 0006             		move.b	#3,6(a6)
000765CC 4BEE 0070                  		lea	$70(a6),a5
000765D0 7E05                       		moveq	#5,d7
000765D2                            
000765D2                            loc_72524:
000765D2 4A15                       		tst.b	(a5)
000765D4 6A00                       		bpl.s	loc_72538
000765D6 522D 0009                  		addq.b	#1,9(a5)
000765DA 6A00                       		bpl.s	loc_72534
000765DC 0895 0007                  		bclr	#7,(a5)
000765E0 6000                       		bra.s	loc_72538
000765E2                            ; ===========================================================================
000765E2                            
000765E2                            loc_72534:
000765E2 4EBA 0000                  		jsr	sub_72CB4(pc)
000765E6                            
000765E6                            loc_72538:
000765E6 DAFC 0030                  		adda.w	#$30,a5
000765EA 51CF FFE6                  		dbf	d7,loc_72524
000765EE                            
000765EE 7E02                       		moveq	#2,d7
000765F0                            
000765F0                            loc_72542:
000765F0 4A15                       		tst.b	(a5)
000765F2 6A00                       		bpl.s	loc_72560
000765F4 522D 0009                  		addq.b	#1,9(a5)
000765F8 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000765FE 6500                       		bcs.s	loc_72558
00076600 0895 0007                  		bclr	#7,(a5)
00076604 6000                       		bra.s	loc_72560
00076606                            ; ===========================================================================
00076606                            
00076606                            loc_72558:
00076606 1C2D 0009                  		move.b	9(a5),d6
0007660A 4EBA 0000                  		jsr	sub_7296A(pc)
0007660E                            
0007660E                            loc_72560:
0007660E DAFC 0030                  		adda.w	#$30,a5
00076612 51CF FFDC                  		dbf	d7,loc_72542
00076616                            
00076616 4E75                       		rts	
00076618                            ; End of function sub_72504
00076618                            
00076618                            
00076618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076618                            
00076618                            
00076618                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00076618 7602                       		moveq	#2,d3
0007661A 7028                       		moveq	#$28,d0
0007661C                            
0007661C                            loc_7256E:
0007661C 1203                       		move.b	d3,d1
0007661E 4EBA 0000                  		jsr	sub_7272E(pc)
00076622 5801                       		addq.b	#4,d1
00076624 4EBA 0000                  		jsr	sub_7272E(pc)
00076628 51CB FFF2                  		dbf	d3,loc_7256E
0007662C                            
0007662C 7040                       		moveq	#$40,d0
0007662E 727F                       		moveq	#$7F,d1
00076630 7802                       		moveq	#2,d4
00076632                            
00076632                            loc_72584:
00076632 7603                       		moveq	#3,d3
00076634                            
00076634                            loc_72586:
00076634 4EBA 0000                  		jsr	sub_7272E(pc)
00076638 4EBA 0000                  		jsr	sub_72764(pc)
0007663C 5840                       		addq.w	#4,d0
0007663E 51CB FFF4                  		dbf	d3,loc_72586
00076642                            
00076642 0400 000F                  		subi.b	#$F,d0
00076646 51CC FFEA                  		dbf	d4,loc_72584
0007664A                            
0007664A 4E75                       		rts	
0007664C                            ; End of function sub_7256A
0007664C                            
0007664C                            ; ===========================================================================
0007664C                            ; ---------------------------------------------------------------------------
0007664C                            ; Stop music
0007664C                            ; ---------------------------------------------------------------------------
0007664C                            
0007664C                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007664C 702B                       		moveq	#$2B,d0
0007664E 123C 0080                  		move.b	#$80,d1
00076652 4EBA 0000                  		jsr	sub_7272E(pc)
00076656 7027                       		moveq	#$27,d0
00076658 7200                       		moveq	#0,d1
0007665A 4EBA 0000                  		jsr	sub_7272E(pc)
0007665E 204E                       		movea.l	a6,a0
00076660 303C 00E3                  		move.w	#$E3,d0
00076664                            
00076664                            loc_725B6:
00076664 4298                       		clr.l	(a0)+
00076666 51C8 FFFC                  		dbf	d0,loc_725B6
0007666A                            
0007666A 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00076670 4EBA FFA6                  		jsr	sub_7256A(pc)
00076674 6000 0000                  		bra.w	sub_729B6
00076678                            
00076678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076678                            
00076678                            
00076678                            sub_725CA:				; XREF: Sound_ChkValue
00076678 204E                       		movea.l	a6,a0
0007667A 1216                       		move.b	0(a6),d1
0007667C 142E 0027                  		move.b	$27(a6),d2
00076680 162E 002A                  		move.b	$2A(a6),d3
00076684 182E 0026                  		move.b	$26(a6),d4
00076688 3A2E 000A                  		move.w	$A(a6),d5
0007668C 303C 0087                  		move.w	#$87,d0
00076690                            
00076690                            loc_725E4:
00076690 4298                       		clr.l	(a0)+
00076692 51C8 FFFC                  		dbf	d0,loc_725E4
00076696                            
00076696 1C81                       		move.b	d1,0(a6)
00076698 1D42 0027                  		move.b	d2,$27(a6)
0007669C 1D43 002A                  		move.b	d3,$2A(a6)
000766A0 1D44 0026                  		move.b	d4,$26(a6)
000766A4 3D45 000A                  		move.w	d5,$A(a6)
000766A8 1D7C 0080 0009             		move.b	#$80,9(a6)
000766AE 4EBA FF68                  		jsr	sub_7256A(pc)
000766B2 6000 0000                  		bra.w	sub_729B6
000766B6                            ; End of function sub_725CA
000766B6                            
000766B6                            
000766B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000766B6                            
000766B6                            
000766B6                            sub_7260C:				; XREF: sub_71B4C
000766B6 1D6E 0002 0001             		move.b	2(a6),1(a6)
000766BC 41EE 004E                  		lea	$4E(a6),a0
000766C0 7030                       		moveq	#$30,d0
000766C2 7209                       		moveq	#9,d1
000766C4                            
000766C4                            loc_7261A:
000766C4 5210                       		addq.b	#1,(a0)
000766C6 D0C0                       		adda.w	d0,a0
000766C8 51C9 FFFA                  		dbf	d1,loc_7261A
000766CC                            
000766CC 4E75                       		rts	
000766CE                            ; End of function sub_7260C
000766CE                            
000766CE                            ; ===========================================================================
000766CE                            ; ---------------------------------------------------------------------------
000766CE                            ; Speed	up music
000766CE                            ; ---------------------------------------------------------------------------
000766CE                            
000766CE                            Sound_E2:				; XREF: Sound_ExIndex
000766CE 4A2E 0027                  		tst.b	$27(a6)
000766D2 6600                       		bne.s	loc_7263E
000766D4 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000766DA 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000766E0 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000766E6 4E75                       		rts	
000766E8                            ; ===========================================================================
000766E8                            
000766E8                            loc_7263E:
000766E8 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000766EE 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000766F4 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000766FA 4E75                       		rts	
000766FC                            ; ===========================================================================
000766FC                            ; ---------------------------------------------------------------------------
000766FC                            ; Change music back to normal speed
000766FC                            ; ---------------------------------------------------------------------------
000766FC                            
000766FC                            Sound_E3:				; XREF: Sound_ExIndex
000766FC 4A2E 0027                  		tst.b	$27(a6)
00076700 6600                       		bne.s	loc_7266A
00076702 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00076708 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007670E 422E 002A                  		clr.b	$2A(a6)
00076712 4E75                       		rts	
00076714                            ; ===========================================================================
00076714                            
00076714                            loc_7266A:
00076714 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007671A 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00076720 422E 03CA                  		clr.b	$3CA(a6)
00076724 4E75                       		rts	
00076726                            
00076726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076726                            
00076726                            
00076726                            sub_7267C:				; XREF: sub_71B4C
00076726 4A2E 0025                  		tst.b	$25(a6)
0007672A 6700                       		beq.s	loc_72688
0007672C 532E 0025                  		subq.b	#1,$25(a6)
00076730 4E75                       		rts	
00076732                            ; ===========================================================================
00076732                            
00076732                            loc_72688:
00076732 4A2E 0026                  		tst.b	$26(a6)
00076736 6700                       		beq.s	loc_726D6
00076738 532E 0026                  		subq.b	#1,$26(a6)
0007673C 1D7C 0002 0025             		move.b	#2,$25(a6)
00076742 4BEE 0070                  		lea	$70(a6),a5
00076746 7E05                       		moveq	#5,d7
00076748                            
00076748                            loc_7269E:
00076748 4A15                       		tst.b	(a5)
0007674A 6A00                       		bpl.s	loc_726AA
0007674C 532D 0009                  		subq.b	#1,9(a5)
00076750 4EBA 0000                  		jsr	sub_72CB4(pc)
00076754                            
00076754                            loc_726AA:
00076754 DAFC 0030                  		adda.w	#$30,a5
00076758 51CF FFEE                  		dbf	d7,loc_7269E
0007675C 7E02                       		moveq	#2,d7
0007675E                            
0007675E                            loc_726B4:
0007675E 4A15                       		tst.b	(a5)
00076760 6A00                       		bpl.s	loc_726CC
00076762 532D 0009                  		subq.b	#1,9(a5)
00076766 1C2D 0009                  		move.b	9(a5),d6
0007676A 0C06 0010                  		cmpi.b	#$10,d6
0007676E 6500                       		bcs.s	loc_726C8
00076770 7C0F                       		moveq	#$F,d6
00076772                            
00076772                            loc_726C8:
00076772 4EBA 0000                  		jsr	sub_7296A(pc)
00076776                            
00076776                            loc_726CC:
00076776 DAFC 0030                  		adda.w	#$30,a5
0007677A 51CF FFE2                  		dbf	d7,loc_726B4
0007677E 4E75                       		rts	
00076780                            ; ===========================================================================
00076780                            
00076780                            loc_726D6:
00076780 08AE 0002 0040             		bclr	#2,$40(a6)
00076786 422E 0024                  		clr.b	$24(a6)
0007678A 4E75                       		rts	
0007678C                            ; End of function sub_7267C
0007678C                            
0007678C                            ; ===========================================================================
0007678C                            
0007678C                            loc_726E2:				; XREF: sub_71CCA
0007678C 0815 0001                  		btst	#1,(a5)
00076790 6600                       		bne.s	locret_726FC
00076792 0815 0002                  		btst	#2,(a5)
00076796 6600                       		bne.s	locret_726FC
00076798 7028                       		moveq	#$28,d0
0007679A 122D 0001                  		move.b	1(a5),d1
0007679E 0001 00F0                  		ori.b	#-$10,d1
000767A2 6000 0000                  		bra.w	sub_7272E
000767A6                            ; ===========================================================================
000767A6                            
000767A6                            locret_726FC:
000767A6 4E75                       		rts	
000767A8                            
000767A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000767A8                            
000767A8                            
000767A8                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000767A8 0815 0004                  		btst	#4,(a5)
000767AC 6600                       		bne.s	locret_72714
000767AE 0815 0002                  		btst	#2,(a5)
000767B2 6600                       		bne.s	locret_72714
000767B4                            
000767B4                            loc_7270A:				; XREF: Snd_FadeOut2
000767B4 7028                       		moveq	#$28,d0
000767B6 122D 0001                  		move.b	1(a5),d1
000767BA 6000 0000                  		bra.w	sub_7272E
000767BE                            ; ===========================================================================
000767BE                            
000767BE                            locret_72714:
000767BE 4E75                       		rts	
000767C0                            ; End of function sub_726FE
000767C0                            
000767C0                            ; ===========================================================================
000767C0                            
000767C0                            loc_72716:				; XREF: sub_72A5A
000767C0 0815 0002                  		btst	#2,(a5)
000767C4 6600                       		bne.s	locret_72720
000767C6 6000 0000                  		bra.w	sub_72722
000767CA                            ; ===========================================================================
000767CA                            
000767CA                            locret_72720:
000767CA 4E75                       		rts	
000767CC                            
000767CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000767CC                            
000767CC                            
000767CC                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000767CC 082D 0002 0001             		btst	#2,1(a5)
000767D2 6600                       		bne.s	loc_7275A
000767D4 D02D 0001                  		add.b	1(a5),d0
000767D8                            ; End of function sub_72722
000767D8                            
000767D8                            
000767D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000767D8                            
000767D8                            
000767D8                            sub_7272E:				; XREF: loc_71E6A
000767D8 1439 00A0 4000             		move.b	($A04000).l,d2
000767DE 0802 0007                  		btst	#7,d2
000767E2 66F4                       		bne.s	sub_7272E
000767E4 13C0 00A0 4000             		move.b	d0,($A04000).l
000767EA 4E71                       		nop	
000767EC 4E71                       		nop	
000767EE 4E71                       		nop	
000767F0                            
000767F0                            loc_72746:
000767F0 1439 00A0 4000             		move.b	($A04000).l,d2
000767F6 0802 0007                  		btst	#7,d2
000767FA 66F4                       		bne.s	loc_72746
000767FC                            
000767FC 13C1 00A0 4001             		move.b	d1,($A04001).l
00076802 4E75                       		rts	
00076804                            ; End of function sub_7272E
00076804                            
00076804                            ; ===========================================================================
00076804                            
00076804                            loc_7275A:				; XREF: sub_72722
00076804 142D 0001                  		move.b	1(a5),d2
00076808 0882 0002                  		bclr	#2,d2
0007680C D002                       		add.b	d2,d0
0007680E                            
0007680E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007680E                            
0007680E                            
0007680E                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007680E 1439 00A0 4000             		move.b	($A04000).l,d2
00076814 0802 0007                  		btst	#7,d2
00076818 66F4                       		bne.s	sub_72764
0007681A 13C0 00A0 4002             		move.b	d0,($A04002).l
00076820 4E71                       		nop	
00076822 4E71                       		nop	
00076824 4E71                       		nop	
00076826                            
00076826                            loc_7277C:
00076826 1439 00A0 4000             		move.b	($A04000).l,d2
0007682C 0802 0007                  		btst	#7,d2
00076830 66F4                       		bne.s	loc_7277C
00076832                            
00076832 13C1 00A0 4003             		move.b	d1,($A04003).l
00076838 4E75                       		rts	
0007683A                            ; End of function sub_72764
0007683A                            
0007683A                            ; ===========================================================================
0007683A 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007684C 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007685E 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007686E 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007687E 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007688E 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007689E 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000768AE 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000768BE 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000768CE 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000768DE 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000768EE 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000768FA                            
000768FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000768FA                            
000768FA                            
000768FA                            sub_72850:				; XREF: sub_71B4C
000768FA 532D 000E                  		subq.b	#1,$E(a5)
000768FE 6600                       		bne.s	loc_72866
00076900 0895 0004                  		bclr	#4,(a5)
00076904 4EBA 0000                  		jsr	sub_72878(pc)
00076908 4EBA 0000                  		jsr	sub_728DC(pc)
0007690C 6000 0000                  		bra.w	loc_7292E
00076910                            ; ===========================================================================
00076910                            
00076910                            loc_72866:
00076910 4EBA F45A                  		jsr	sub_71D9E(pc)
00076914 4EBA 0000                  		jsr	sub_72926(pc)
00076918 4EBA F47A                  		jsr	sub_71DC6(pc)
0007691C 4EBA 0000                  		jsr	sub_728E2(pc)
00076920 4E75                       		rts	
00076922                            ; End of function sub_72850
00076922                            
00076922                            
00076922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076922                            
00076922                            
00076922                            sub_72878:				; XREF: sub_72850
00076922 0895 0001                  		bclr	#1,(a5)
00076926 286D 0004                  		movea.l	4(a5),a4
0007692A                            
0007692A                            loc_72880:
0007692A 7A00                       		moveq	#0,d5
0007692C 1A1C                       		move.b	(a4)+,d5
0007692E 0C05 00E0                  		cmpi.b	#$E0,d5
00076932 6500                       		bcs.s	loc_72890
00076934 4EBA 0000                  		jsr	sub_72A5A(pc)
00076938 60F0                       		bra.s	loc_72880
0007693A                            ; ===========================================================================
0007693A                            
0007693A                            loc_72890:
0007693A 4A05                       		tst.b	d5
0007693C 6A00                       		bpl.s	loc_728A4
0007693E 4EBA 0000                  		jsr	sub_728AC(pc)
00076942 1A1C                       		move.b	(a4)+,d5
00076944 4A05                       		tst.b	d5
00076946 6A00                       		bpl.s	loc_728A4
00076948 534C                       		subq.w	#1,a4
0007694A 6000 F3E2                  		bra.w	sub_71D60
0007694E                            ; ===========================================================================
0007694E                            
0007694E                            loc_728A4:
0007694E 4EBA F3BE                  		jsr	sub_71D40(pc)
00076952 6000 F3DA                  		bra.w	sub_71D60
00076956                            ; End of function sub_72878
00076956                            
00076956                            
00076956                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076956                            
00076956                            
00076956                            sub_728AC:				; XREF: sub_72878
00076956 0405 0081                  		subi.b	#$81,d5
0007695A 6500                       		bcs.s	loc_728CA
0007695C DA2D 0008                  		add.b	8(a5),d5
00076960 0245 007F                  		andi.w	#$7F,d5
00076964 E34D                       		lsl.w	#1,d5
00076966 41FA 0000                  		lea	word_729CE(pc),a0
0007696A 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00076970 6000 F3BC                  		bra.w	sub_71D60
00076974                            ; ===========================================================================
00076974                            
00076974                            loc_728CA:
00076974 08D5 0001                  		bset	#1,(a5)
00076978 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007697E 4EBA F3AE                  		jsr	sub_71D60(pc)
00076982 6000 0000                  		bra.w	sub_729A0
00076986                            ; End of function sub_728AC
00076986                            
00076986                            
00076986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076986                            
00076986                            
00076986                            sub_728DC:				; XREF: sub_72850
00076986 3C2D 0010                  		move.w	$10(a5),d6
0007698A 6B00                       		bmi.s	loc_72920
0007698C                            ; End of function sub_728DC
0007698C                            
0007698C                            
0007698C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007698C                            
0007698C                            
0007698C                            sub_728E2:				; XREF: sub_72850
0007698C 102D 001E                  		move.b	$1E(a5),d0
00076990 4880                       		ext.w	d0
00076992 DC40                       		add.w	d0,d6
00076994 0815 0002                  		btst	#2,(a5)
00076998 6600                       		bne.s	locret_7291E
0007699A 0815 0001                  		btst	#1,(a5)
0007699E 6600                       		bne.s	locret_7291E
000769A0 102D 0001                  		move.b	1(a5),d0
000769A4 0C00 00E0                  		cmpi.b	#$E0,d0
000769A8 6600                       		bne.s	loc_72904
000769AA 103C 00C0                  		move.b	#$C0,d0
000769AE                            
000769AE                            loc_72904:
000769AE 3206                       		move.w	d6,d1
000769B0 0201 000F                  		andi.b	#$F,d1
000769B4 8001                       		or.b	d1,d0
000769B6 E84E                       		lsr.w	#4,d6
000769B8 0206 003F                  		andi.b	#$3F,d6
000769BC 13C0 00C0 0011             		move.b	d0,($C00011).l
000769C2 13C6 00C0 0011             		move.b	d6,($C00011).l
000769C8                            
000769C8                            locret_7291E:
000769C8 4E75                       		rts	
000769CA                            ; End of function sub_728E2
000769CA                            
000769CA                            ; ===========================================================================
000769CA                            
000769CA                            loc_72920:				; XREF: sub_728DC
000769CA 08D5 0001                  		bset	#1,(a5)
000769CE 4E75                       		rts	
000769D0                            
000769D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000769D0                            
000769D0                            
000769D0                            sub_72926:				; XREF: sub_72850
000769D0 4A2D 000B                  		tst.b	$B(a5)
000769D4 6700 0000                  		beq.w	locret_7298A
000769D8                            
000769D8                            loc_7292E:				; XREF: sub_72850
000769D8 1C2D 0009                  		move.b	9(a5),d6
000769DC 7000                       		moveq	#0,d0
000769DE 102D 000B                  		move.b	$B(a5),d0
000769E2 6700                       		beq.s	sub_7296A
000769E4 2079 0007 5942             		movea.l	(Go_PSGIndex).l,a0
000769EA 5340                       		subq.w	#1,d0
000769EC E548                       		lsl.w	#2,d0
000769EE 2070 0000                  		movea.l	(a0,d0.w),a0
000769F2 102D 000C                  		move.b	$C(a5),d0
000769F6 1030 0000                  		move.b	(a0,d0.w),d0
000769FA 522D 000C                  		addq.b	#1,$C(a5)
000769FE 0800 0007                  		btst	#7,d0
00076A02 6700                       		beq.s	loc_72960
00076A04 0C00 0080                  		cmpi.b	#$80,d0
00076A08 6700                       		beq.s	loc_7299A
00076A0A                            
00076A0A                            loc_72960:
00076A0A DC40                       		add.w	d0,d6
00076A0C 0C06 0010                  		cmpi.b	#$10,d6
00076A10 6500                       		bcs.s	sub_7296A
00076A12 7C0F                       		moveq	#$F,d6
00076A14                            ; End of function sub_72926
00076A14                            
00076A14                            
00076A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076A14                            
00076A14                            
00076A14                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00076A14 0815 0001                  		btst	#1,(a5)
00076A18 6600                       		bne.s	locret_7298A
00076A1A 0815 0002                  		btst	#2,(a5)
00076A1E 6600                       		bne.s	locret_7298A
00076A20 0815 0004                  		btst	#4,(a5)
00076A24 6600                       		bne.s	loc_7298C
00076A26                            
00076A26                            loc_7297C:
00076A26 8C2D 0001                  		or.b	1(a5),d6
00076A2A 0606 0010                  		addi.b	#$10,d6
00076A2E 13C6 00C0 0011             		move.b	d6,($C00011).l
00076A34                            
00076A34                            locret_7298A:
00076A34 4E75                       		rts	
00076A36                            ; ===========================================================================
00076A36                            
00076A36                            loc_7298C:
00076A36 4A2D 0013                  		tst.b	$13(a5)
00076A3A 67EA                       		beq.s	loc_7297C
00076A3C 4A2D 0012                  		tst.b	$12(a5)
00076A40 66E4                       		bne.s	loc_7297C
00076A42 4E75                       		rts	
00076A44                            ; End of function sub_7296A
00076A44                            
00076A44                            ; ===========================================================================
00076A44                            
00076A44                            loc_7299A:				; XREF: sub_72926
00076A44 532D 000C                  		subq.b	#1,$C(a5)
00076A48 4E75                       		rts	
00076A4A                            
00076A4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076A4A                            
00076A4A                            
00076A4A                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00076A4A 0815 0002                  		btst	#2,(a5)
00076A4E 6600                       		bne.s	locret_729B4
00076A50                            
00076A50                            loc_729A6:				; XREF: Snd_FadeOut2
00076A50 102D 0001                  		move.b	1(a5),d0
00076A54 0000 001F                  		ori.b	#$1F,d0
00076A58 13C0 00C0 0011             		move.b	d0,($C00011).l
00076A5E                            
00076A5E                            locret_729B4:
00076A5E 4E75                       		rts	
00076A60                            ; End of function sub_729A0
00076A60                            
00076A60                            
00076A60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076A60                            
00076A60                            
00076A60                            sub_729B6:				; XREF: loc_71E7C
00076A60 41F9 00C0 0011             		lea	($C00011).l,a0
00076A66 10BC 009F                  		move.b	#$9F,(a0)
00076A6A 10BC 00BF                  		move.b	#$BF,(a0)
00076A6E 10BC 00DF                  		move.b	#$DF,(a0)
00076A72 10BC 00FF                  		move.b	#$FF,(a0)
00076A76 4E75                       		rts	
00076A78                            ; End of function sub_729B6
00076A78                            
00076A78                            ; ===========================================================================
00076A78 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00076A8A 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00076A9C 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00076AB0 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00076AC4 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00076AD8 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00076AEC 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00076B00 0011 0000                  		dc.w $11, 0
00076B04                            
00076B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076B04                            
00076B04                            
00076B04                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00076B04 0445 00E0                  		subi.w	#$E0,d5
00076B08 E54D                       		lsl.w	#2,d5
00076B0A 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00076B0E                            ; End of function sub_72A5A
00076B0E                            
00076B0E                            ; ===========================================================================
00076B0E                            
00076B0E                            loc_72A64:
00076B0E 6000 0000                  		bra.w	loc_72ACC
00076B12                            ; ===========================================================================
00076B12 6000 0000                  		bra.w	loc_72AEC
00076B16                            ; ===========================================================================
00076B16 6000 0000                  		bra.w	loc_72AF2
00076B1A                            ; ===========================================================================
00076B1A 6000 0000                  		bra.w	loc_72AF8
00076B1E                            ; ===========================================================================
00076B1E 6000 0000                  		bra.w	loc_72B14
00076B22                            ; ===========================================================================
00076B22 6000 0000                  		bra.w	loc_72B9E
00076B26                            ; ===========================================================================
00076B26 6000 0000                  		bra.w	loc_72BA4
00076B2A                            ; ===========================================================================
00076B2A 6000 0000                  		bra.w	loc_72BAE
00076B2E                            ; ===========================================================================
00076B2E 6000 0000                  		bra.w	loc_72BB4
00076B32                            ; ===========================================================================
00076B32 6000 0000                  		bra.w	loc_72BBE
00076B36                            ; ===========================================================================
00076B36 6000 0000                  		bra.w	loc_72BC6
00076B3A                            ; ===========================================================================
00076B3A 6000 0000                  		bra.w	loc_72BD0
00076B3E                            ; ===========================================================================
00076B3E 6000 0000                  		bra.w	loc_72BE6
00076B42                            ; ===========================================================================
00076B42 6000 0000                  		bra.w	loc_72BEE
00076B46                            ; ===========================================================================
00076B46 6000 0000                  		bra.w	loc_72BF4
00076B4A                            ; ===========================================================================
00076B4A 6000 0000                  		bra.w	loc_72C26
00076B4E                            ; ===========================================================================
00076B4E 6000 0000                  		bra.w	loc_72D30
00076B52                            ; ===========================================================================
00076B52 6000 0000                  		bra.w	loc_72D52
00076B56                            ; ===========================================================================
00076B56 6000 0000                  		bra.w	loc_72D58
00076B5A                            ; ===========================================================================
00076B5A 6000 0000                  		bra.w	loc_72E06
00076B5E                            ; ===========================================================================
00076B5E 6000 0000                  		bra.w	loc_72E20
00076B62                            ; ===========================================================================
00076B62 6000 0000                  		bra.w	loc_72E26
00076B66                            ; ===========================================================================
00076B66 6000 0000                  		bra.w	loc_72E2C
00076B6A                            ; ===========================================================================
00076B6A 6000 0000                  		bra.w	loc_72E38
00076B6E                            ; ===========================================================================
00076B6E 6000 0000                  		bra.w	loc_72E52
00076B72                            ; ===========================================================================
00076B72 6000 0000                  		bra.w	loc_72E64
00076B76                            ; ===========================================================================
00076B76                            
00076B76                            loc_72ACC:				; XREF: loc_72A64
00076B76 121C                       		move.b	(a4)+,d1
00076B78 4A2D 0001                  		tst.b	1(a5)
00076B7C 6B00                       		bmi.s	locret_72AEA
00076B7E 102D 000A                  		move.b	$A(a5),d0
00076B82 0200 0037                  		andi.b	#$37,d0
00076B86 8200                       		or.b	d0,d1
00076B88 1B41 000A                  		move.b	d1,$A(a5)
00076B8C 103C 00B4                  		move.b	#$B4,d0
00076B90 6000 FC2E                  		bra.w	loc_72716
00076B94                            ; ===========================================================================
00076B94                            
00076B94                            locret_72AEA:
00076B94 4E75                       		rts	
00076B96                            ; ===========================================================================
00076B96                            
00076B96                            loc_72AEC:				; XREF: loc_72A64
00076B96 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00076B9A 4E75                       		rts	
00076B9C                            ; ===========================================================================
00076B9C                            
00076B9C                            loc_72AF2:				; XREF: loc_72A64
00076B9C 1D5C 0007                  		move.b	(a4)+,7(a6)
00076BA0 4E75                       		rts	
00076BA2                            ; ===========================================================================
00076BA2                            
00076BA2                            loc_72AF8:				; XREF: loc_72A64
00076BA2 7000                       		moveq	#0,d0
00076BA4 102D 000D                  		move.b	$D(a5),d0
00076BA8 2875 0000                  		movea.l	(a5,d0.w),a4
00076BAC 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00076BB4 544C                       		addq.w	#2,a4
00076BB6 5800                       		addq.b	#4,d0
00076BB8 1B40 000D                  		move.b	d0,$D(a5)
00076BBC 4E75                       		rts	
00076BBE                            ; ===========================================================================
00076BBE                            
00076BBE                            loc_72B14:				; XREF: loc_72A64
00076BBE 204E                       		movea.l	a6,a0
00076BC0 43EE 03A0                  		lea	$3A0(a6),a1
00076BC4 303C 0087                  		move.w	#$87,d0
00076BC8                            
00076BC8                            loc_72B1E:
00076BC8 20D9                       		move.l	(a1)+,(a0)+
00076BCA 51C8 FFFC                  		dbf	d0,loc_72B1E
00076BCE                            
00076BCE 08EE 0002 0040             		bset	#2,$40(a6)
00076BD4 264D                       		movea.l	a5,a3
00076BD6 1C3C 0028                  		move.b	#$28,d6
00076BDA 9C2E 0026                  		sub.b	$26(a6),d6
00076BDE 7E05                       		moveq	#5,d7
00076BE0 4BEE 0070                  		lea	$70(a6),a5
00076BE4                            
00076BE4                            loc_72B3A:
00076BE4 0815 0007                  		btst	#7,(a5)
00076BE8 6700                       		beq.s	loc_72B5C
00076BEA 08D5 0001                  		bset	#1,(a5)
00076BEE DD2D 0009                  		add.b	d6,9(a5)
00076BF2 0815 0002                  		btst	#2,(a5)
00076BF6 6600                       		bne.s	loc_72B5C
00076BF8 7000                       		moveq	#0,d0
00076BFA 102D 000B                  		move.b	$B(a5),d0
00076BFE 226E 0018                  		movea.l	$18(a6),a1
00076C02 4EBA 0000                  		jsr	sub_72C4E(pc)
00076C06                            
00076C06                            loc_72B5C:
00076C06 DAFC 0030                  		adda.w	#$30,a5
00076C0A 51CF FFD8                  		dbf	d7,loc_72B3A
00076C0E                            
00076C0E 7E02                       		moveq	#2,d7
00076C10                            
00076C10                            loc_72B66:
00076C10 0815 0007                  		btst	#7,(a5)
00076C14 6700                       		beq.s	loc_72B78
00076C16 08D5 0001                  		bset	#1,(a5)
00076C1A 4EBA FE2E                  		jsr	sub_729A0(pc)
00076C1E DD2D 0009                  		add.b	d6,9(a5)
00076C22                            
00076C22                            loc_72B78:
00076C22 DAFC 0030                  		adda.w	#$30,a5
00076C26 51CF FFE8                  		dbf	d7,loc_72B66
00076C2A 2A4B                       		movea.l	a3,a5
00076C2C 1D7C 0080 0024             		move.b	#$80,$24(a6)
00076C32 1D7C 0028 0026             		move.b	#$28,$26(a6)
00076C38 422E 0027                  		clr.b	$27(a6)
00076C3C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00076C44 504F                       		addq.w	#8,sp
00076C46 4E75                       		rts	
00076C48                            ; ===========================================================================
00076C48                            
00076C48                            loc_72B9E:				; XREF: loc_72A64
00076C48 1B5C 0002                  		move.b	(a4)+,2(a5)
00076C4C 4E75                       		rts	
00076C4E                            ; ===========================================================================
00076C4E                            
00076C4E                            loc_72BA4:				; XREF: loc_72A64
00076C4E 101C                       		move.b	(a4)+,d0
00076C50 D12D 0009                  		add.b	d0,9(a5)
00076C54 6000 0000                  		bra.w	sub_72CB4
00076C58                            ; ===========================================================================
00076C58                            
00076C58                            loc_72BAE:				; XREF: loc_72A64
00076C58 08D5 0004                  		bset	#4,(a5)
00076C5C 4E75                       		rts	
00076C5E                            ; ===========================================================================
00076C5E                            
00076C5E                            loc_72BB4:				; XREF: loc_72A64
00076C5E 1B54 0012                  		move.b	(a4),$12(a5)
00076C62 1B5C 0013                  		move.b	(a4)+,$13(a5)
00076C66 4E75                       		rts	
00076C68                            ; ===========================================================================
00076C68                            
00076C68                            loc_72BBE:				; XREF: loc_72A64
00076C68 101C                       		move.b	(a4)+,d0
00076C6A D12D 0008                  		add.b	d0,8(a5)
00076C6E 4E75                       		rts	
00076C70                            ; ===========================================================================
00076C70                            
00076C70                            loc_72BC6:				; XREF: loc_72A64
00076C70 1D54 0002                  		move.b	(a4),2(a6)
00076C74 1D5C 0001                  		move.b	(a4)+,1(a6)
00076C78 4E75                       		rts	
00076C7A                            ; ===========================================================================
00076C7A                            
00076C7A                            loc_72BD0:				; XREF: loc_72A64
00076C7A 41EE 0040                  		lea	$40(a6),a0
00076C7E 101C                       		move.b	(a4)+,d0
00076C80 7230                       		moveq	#$30,d1
00076C82 7409                       		moveq	#9,d2
00076C84                            
00076C84                            loc_72BDA:
00076C84 1140 0002                  		move.b	d0,2(a0)
00076C88 D0C1                       		adda.w	d1,a0
00076C8A 51CA FFF8                  		dbf	d2,loc_72BDA
00076C8E                            
00076C8E 4E75                       		rts	
00076C90                            ; ===========================================================================
00076C90                            
00076C90                            loc_72BE6:				; XREF: loc_72A64
00076C90 101C                       		move.b	(a4)+,d0
00076C92 D12D 0009                  		add.b	d0,9(a5)
00076C96 4E75                       		rts	
00076C98                            ; ===========================================================================
00076C98                            
00076C98                            loc_72BEE:				; XREF: loc_72A64
00076C98 422E 002C                  		clr.b	$2C(a6)
00076C9C 4E75                       		rts	
00076C9E                            ; ===========================================================================
00076C9E                            
00076C9E                            loc_72BF4:				; XREF: loc_72A64
00076C9E 0895 0007                  		bclr	#7,(a5)
00076CA2 0895 0004                  		bclr	#4,(a5)
00076CA6 4EBA FB00                  		jsr	sub_726FE(pc)
00076CAA 4A2E 0250                  		tst.b	$250(a6)
00076CAE 6B00                       		bmi.s	loc_72C22
00076CB0 264D                       		movea.l	a5,a3
00076CB2 4BEE 0100                  		lea	$100(a6),a5
00076CB6 226E 0018                  		movea.l	$18(a6),a1
00076CBA 0895 0002                  		bclr	#2,(a5)
00076CBE 08D5 0001                  		bset	#1,(a5)
00076CC2 102D 000B                  		move.b	$B(a5),d0
00076CC6 4EBA 0000                  		jsr	sub_72C4E(pc)
00076CCA 2A4B                       		movea.l	a3,a5
00076CCC                            
00076CCC                            loc_72C22:
00076CCC 504F                       		addq.w	#8,sp
00076CCE 4E75                       		rts	
00076CD0                            ; ===========================================================================
00076CD0                            
00076CD0                            loc_72C26:				; XREF: loc_72A64
00076CD0 7000                       		moveq	#0,d0
00076CD2 101C                       		move.b	(a4)+,d0
00076CD4 1B40 000B                  		move.b	d0,$B(a5)
00076CD8 0815 0002                  		btst	#2,(a5)
00076CDC 6600 0000                  		bne.w	locret_72CAA
00076CE0 226E 0018                  		movea.l	$18(a6),a1
00076CE4 4A2E 000E                  		tst.b	$E(a6)
00076CE8 6700                       		beq.s	sub_72C4E
00076CEA 226D 0020                  		movea.l	$20(a5),a1
00076CEE 4A2E 000E                  		tst.b	$E(a6)
00076CF2 6B00                       		bmi.s	sub_72C4E
00076CF4 226E 0020                  		movea.l	$20(a6),a1
00076CF8                            
00076CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076CF8                            
00076CF8                            
00076CF8                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00076CF8 5340                       		subq.w	#1,d0
00076CFA 6B00                       		bmi.s	loc_72C5C
00076CFC 323C 0019                  		move.w	#$19,d1
00076D00                            
00076D00                            loc_72C56:
00076D00 D2C1                       		adda.w	d1,a1
00076D02 51C8 FFFC                  		dbf	d0,loc_72C56
00076D06                            
00076D06                            loc_72C5C:
00076D06 1219                       		move.b	(a1)+,d1
00076D08 1B41 001F                  		move.b	d1,$1F(a5)
00076D0C 1801                       		move.b	d1,d4
00076D0E 103C 00B0                  		move.b	#$B0,d0
00076D12 4EBA FAB8                  		jsr	sub_72722(pc)
00076D16 45FA 0000                  		lea	byte_72D18(pc),a2
00076D1A 7613                       		moveq	#$13,d3
00076D1C                            
00076D1C                            loc_72C72:
00076D1C 101A                       		move.b	(a2)+,d0
00076D1E 1219                       		move.b	(a1)+,d1
00076D20 4EBA FAAA                  		jsr	sub_72722(pc)
00076D24 51CB FFF6                  		dbf	d3,loc_72C72
00076D28 7A03                       		moveq	#3,d5
00076D2A 0244 0007                  		andi.w	#7,d4
00076D2E 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00076D32 162D 0009                  		move.b	9(a5),d3
00076D36                            
00076D36                            loc_72C8C:
00076D36 101A                       		move.b	(a2)+,d0
00076D38 1219                       		move.b	(a1)+,d1
00076D3A E20C                       		lsr.b	#1,d4
00076D3C 6400                       		bcc.s	loc_72C96
00076D3E D203                       		add.b	d3,d1
00076D40                            
00076D40                            loc_72C96:
00076D40 4EBA FA8A                  		jsr	sub_72722(pc)
00076D44 51CD FFF0                  		dbf	d5,loc_72C8C
00076D48 103C 00B4                  		move.b	#$B4,d0
00076D4C 122D 000A                  		move.b	$A(a5),d1
00076D50 4EBA FA7A                  		jsr	sub_72722(pc)
00076D54                            
00076D54                            locret_72CAA:
00076D54 4E75                       		rts	
00076D56                            ; End of function sub_72C4E
00076D56                            
00076D56                            ; ===========================================================================
00076D56 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00076D5E                            
00076D5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076D5E                            
00076D5E                            
00076D5E                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00076D5E 0815 0002                  		btst	#2,(a5)
00076D62 6600                       		bne.s	locret_72D16
00076D64 7000                       		moveq	#0,d0
00076D66 102D 000B                  		move.b	$B(a5),d0
00076D6A 226E 0018                  		movea.l	$18(a6),a1
00076D6E 4A2E 000E                  		tst.b	$E(a6)
00076D72 6700                       		beq.s	loc_72CD8
00076D74 226E 0020                  		movea.l	$20(a6),a1
00076D78 4A2E 000E                  		tst.b	$E(a6)
00076D7C 6B00                       		bmi.s	loc_72CD8
00076D7E 226E 0020                  		movea.l	$20(a6),a1
00076D82                            
00076D82                            loc_72CD8:
00076D82 5340                       		subq.w	#1,d0
00076D84 6B00                       		bmi.s	loc_72CE6
00076D86 323C 0019                  		move.w	#$19,d1
00076D8A                            
00076D8A                            loc_72CE0:
00076D8A D2C1                       		adda.w	d1,a1
00076D8C 51C8 FFFC                  		dbf	d0,loc_72CE0
00076D90                            
00076D90                            loc_72CE6:
00076D90 D2FC 0015                  		adda.w	#$15,a1
00076D94 45FA 0000                  		lea	byte_72D2C(pc),a2
00076D98 102D 001F                  		move.b	$1F(a5),d0
00076D9C 0240 0007                  		andi.w	#7,d0
00076DA0 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00076DA4 162D 0009                  		move.b	9(a5),d3
00076DA8 6B00                       		bmi.s	locret_72D16
00076DAA 7A03                       		moveq	#3,d5
00076DAC                            
00076DAC                            loc_72D02:
00076DAC 101A                       		move.b	(a2)+,d0
00076DAE 1219                       		move.b	(a1)+,d1
00076DB0 E20C                       		lsr.b	#1,d4
00076DB2 6400                       		bcc.s	loc_72D12
00076DB4 D203                       		add.b	d3,d1
00076DB6 6500                       		bcs.s	loc_72D12
00076DB8 4EBA FA12                  		jsr	sub_72722(pc)
00076DBC                            
00076DBC                            loc_72D12:
00076DBC 51CD FFEE                  		dbf	d5,loc_72D02
00076DC0                            
00076DC0                            locret_72D16:
00076DC0 4E75                       		rts	
00076DC2                            ; End of function sub_72CB4
00076DC2                            
00076DC2                            ; ===========================================================================
00076DC2 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00076DCC 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00076DD6 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00076DDA                            ; ===========================================================================
00076DDA                            
00076DDA                            loc_72D30:				; XREF: loc_72A64
00076DDA 08D5 0003                  		bset	#3,(a5)
00076DDE 2B4C 0014                  		move.l	a4,$14(a5)
00076DE2 1B5C 0018                  		move.b	(a4)+,$18(a5)
00076DE6 1B5C 0019                  		move.b	(a4)+,$19(a5)
00076DEA 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00076DEE 101C                       		move.b	(a4)+,d0
00076DF0 E208                       		lsr.b	#1,d0
00076DF2 1B40 001B                  		move.b	d0,$1B(a5)
00076DF6 426D 001C                  		clr.w	$1C(a5)
00076DFA 4E75                       		rts	
00076DFC                            ; ===========================================================================
00076DFC                            
00076DFC                            loc_72D52:				; XREF: loc_72A64
00076DFC 08D5 0003                  		bset	#3,(a5)
00076E00 4E75                       		rts	
00076E02                            ; ===========================================================================
00076E02                            
00076E02                            loc_72D58:				; XREF: loc_72A64
00076E02 0895 0007                  		bclr	#7,(a5)
00076E06 0895 0004                  		bclr	#4,(a5)
00076E0A 4A2D 0001                  		tst.b	1(a5)
00076E0E 6B00                       		bmi.s	loc_72D74
00076E10 4A2E 0008                  		tst.b	8(a6)
00076E14 6B00 0000                  		bmi.w	loc_72E02
00076E18 4EBA F98E                  		jsr	sub_726FE(pc)
00076E1C 6000                       		bra.s	loc_72D78
00076E1E                            ; ===========================================================================
00076E1E                            
00076E1E                            loc_72D74:
00076E1E 4EBA FC2A                  		jsr	sub_729A0(pc)
00076E22                            
00076E22                            loc_72D78:
00076E22 4A2E 000E                  		tst.b	$E(a6)
00076E26 6A00 0000                  		bpl.w	loc_72E02
00076E2A 4216                       		clr.b	0(a6)
00076E2C 7000                       		moveq	#0,d0
00076E2E 102D 0001                  		move.b	1(a5),d0
00076E32 6B00                       		bmi.s	loc_72DCC
00076E34 41FA F546                  		lea	dword_722CC(pc),a0
00076E38 264D                       		movea.l	a5,a3
00076E3A 0C00 0004                  		cmpi.b	#4,d0
00076E3E 6600                       		bne.s	loc_72DA8
00076E40 4A2E 0340                  		tst.b	$340(a6)
00076E44 6A00                       		bpl.s	loc_72DA8
00076E46 4BEE 0340                  		lea	$340(a6),a5
00076E4A 226E 0020                  		movea.l	$20(a6),a1
00076E4E 6000                       		bra.s	loc_72DB8
00076E50                            ; ===========================================================================
00076E50                            
00076E50                            loc_72DA8:
00076E50 5500                       		subq.b	#2,d0
00076E52 E508                       		lsl.b	#2,d0
00076E54 2A70 0000                  		movea.l	(a0,d0.w),a5
00076E58 4A15                       		tst.b	(a5)
00076E5A 6A00                       		bpl.s	loc_72DC8
00076E5C 226E 0018                  		movea.l	$18(a6),a1
00076E60                            
00076E60                            loc_72DB8:
00076E60 0895 0002                  		bclr	#2,(a5)
00076E64 08D5 0001                  		bset	#1,(a5)
00076E68 102D 000B                  		move.b	$B(a5),d0
00076E6C 4EBA FE8A                  		jsr	sub_72C4E(pc)
00076E70                            
00076E70                            loc_72DC8:
00076E70 2A4B                       		movea.l	a3,a5
00076E72 6000                       		bra.s	loc_72E02
00076E74                            ; ===========================================================================
00076E74                            
00076E74                            loc_72DCC:
00076E74 41EE 0370                  		lea	$370(a6),a0
00076E78 4A10                       		tst.b	(a0)
00076E7A 6A00                       		bpl.s	loc_72DE0
00076E7C 0C00 00E0                  		cmpi.b	#$E0,d0
00076E80 6700                       		beq.s	loc_72DEA
00076E82 0C00 00C0                  		cmpi.b	#$C0,d0
00076E86 6700                       		beq.s	loc_72DEA
00076E88                            
00076E88                            loc_72DE0:
00076E88 41FA F4F2                  		lea	dword_722CC(pc),a0
00076E8C E608                       		lsr.b	#3,d0
00076E8E 2070 0000                  		movea.l	(a0,d0.w),a0
00076E92                            
00076E92                            loc_72DEA:
00076E92 0890 0002                  		bclr	#2,(a0)
00076E96 08D0 0001                  		bset	#1,(a0)
00076E9A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00076EA0 6600                       		bne.s	loc_72E02
00076EA2 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00076EAA                            
00076EAA                            loc_72E02:
00076EAA 504F                       		addq.w	#8,sp
00076EAC 4E75                       		rts	
00076EAE                            ; ===========================================================================
00076EAE                            
00076EAE                            loc_72E06:				; XREF: loc_72A64
00076EAE 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00076EB4 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00076EB8 0815 0002                  		btst	#2,(a5)
00076EBC 6600                       		bne.s	locret_72E1E
00076EBE 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00076EC6                            
00076EC6                            locret_72E1E:
00076EC6 4E75                       		rts	
00076EC8                            ; ===========================================================================
00076EC8                            
00076EC8                            loc_72E20:				; XREF: loc_72A64
00076EC8 0895 0003                  		bclr	#3,(a5)
00076ECC 4E75                       		rts	
00076ECE                            ; ===========================================================================
00076ECE                            
00076ECE                            loc_72E26:				; XREF: loc_72A64
00076ECE 1B5C 000B                  		move.b	(a4)+,$B(a5)
00076ED2 4E75                       		rts	
00076ED4                            ; ===========================================================================
00076ED4                            
00076ED4                            loc_72E2C:				; XREF: loc_72A64
00076ED4 101C                       		move.b	(a4)+,d0
00076ED6 E148                       		lsl.w	#8,d0
00076ED8 101C                       		move.b	(a4)+,d0
00076EDA D8C0                       		adda.w	d0,a4
00076EDC 534C                       		subq.w	#1,a4
00076EDE 4E75                       		rts	
00076EE0                            ; ===========================================================================
00076EE0                            
00076EE0                            loc_72E38:				; XREF: loc_72A64
00076EE0 7000                       		moveq	#0,d0
00076EE2 101C                       		move.b	(a4)+,d0
00076EE4 121C                       		move.b	(a4)+,d1
00076EE6 4A35 0024                  		tst.b	$24(a5,d0.w)
00076EEA 6600                       		bne.s	loc_72E48
00076EEC 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00076EF0                            
00076EF0                            loc_72E48:
00076EF0 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00076EF4 66DE                       		bne.s	loc_72E2C
00076EF6 544C                       		addq.w	#2,a4
00076EF8 4E75                       		rts	
00076EFA                            ; ===========================================================================
00076EFA                            
00076EFA                            loc_72E52:				; XREF: loc_72A64
00076EFA 7000                       		moveq	#0,d0
00076EFC 102D 000D                  		move.b	$D(a5),d0
00076F00 5900                       		subq.b	#4,d0
00076F02 2B8C 0000                  		move.l	a4,(a5,d0.w)
00076F06 1B40 000D                  		move.b	d0,$D(a5)
00076F0A 60C8                       		bra.s	loc_72E2C
00076F0C                            ; ===========================================================================
00076F0C                            
00076F0C                            loc_72E64:				; XREF: loc_72A64
00076F0C 103C 0088                  		move.b	#$88,d0
00076F10 123C 000F                  		move.b	#$F,d1
00076F14 4EBA F8C2                  		jsr	sub_7272E(pc)
00076F18 103C 008C                  		move.b	#$8C,d0
00076F1C 123C 000F                  		move.b	#$F,d1
00076F20 6000 F8B6                  		bra.w	sub_7272E
00076F24                            ; ===========================================================================
00076F24                            Kos_Z80:	incbin	sound\z80_1.bin
00076FD4 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076FD6 21                         		dc.b $21
00076FD7 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076FD9                            		incbin	sound\z80_2.bin
00078684                            		even
00078684                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007EE84                            		even
0007EE84                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00088722                            		even
00088722                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0008C342 00                         		even
0008C342                            Music84:	include	sound\music84.asm ; Star Light Act 1
0008C342                            music84_Header:
0008C342 =00000001                  smpsHeaderStartSong = 1
0008C342 0000                       	smpsHeaderVoice     music84_Voices
0008C344 0603                       	smpsHeaderChan      $06, $03
0008C346 0205                       	smpsHeaderTempo     $02, $05
0008C348                            
0008C34C 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0008C350 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0008C354 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
0008C358 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0008C35C 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0008C360 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
0008C366 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0008C36C 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0008C372                            
0008C372                            ; FM1 Data
0008C372                            music84_FM1:
0008C372 E0C0                       	smpsPan             panCenter, $00
0008C376 E107                       	smpsAlterNote       $07
0008C378 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0008C37C E106                       	smpsAlterNote       $06
0008C37E 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0008C382 E10B                       	smpsAlterNote       $0B
0008C384 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0008C38A E10C                       	smpsAlterNote       $0C
0008C38C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C38F E10B                       	smpsAlterNote       $0B
0008C391 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C394 E109                       	smpsAlterNote       $09
0008C396 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0008C39B E108                       	smpsAlterNote       $08
0008C39D 8001                       	dc.b	nRst, $01
0008C39F E10B                       	smpsAlterNote       $0B
0008C3A1 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
0008C3A7 E107                       	smpsAlterNote       $07
0008C3A9 9B03                       	dc.b	nD2, $03
0008C3AB                            
0008C3AB                            music84_Jump04:
0008C3AB E107                       	smpsAlterNote       $07
0008C3AD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C3B1 E10B                       	smpsAlterNote       $0B
0008C3B3 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C3B7 E107                       	smpsAlterNote       $07
0008C3B9 9B03                       	dc.b	nD2, $03
0008C3BB E11A                       	smpsAlterNote       $1A
0008C3BD A301                       	dc.b	nBb2, $01
0008C3BF E1F2                       	smpsAlterNote       $F2
0008C3C1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C3C4 E1FF                       	smpsAlterNote       $FF
0008C3C6 E701                       	dc.b	smpsNoAttack, $01
0008C3C8 E111                       	smpsAlterNote       $11
0008C3CA E701                       	dc.b	smpsNoAttack, $01
0008C3CC E106                       	smpsAlterNote       $06
0008C3CE E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C3D1 E107                       	smpsAlterNote       $07
0008C3D3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C3D7 E108                       	smpsAlterNote       $08
0008C3D9 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008C3E1 E109                       	smpsAlterNote       $09
0008C3E3 A003                       	dc.b	nG2, $03
0008C3E5 E10C                       	smpsAlterNote       $0C
0008C3E7 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C3EB E1FD                       	smpsAlterNote       $FD
0008C3ED A401                       	dc.b	nB2, $01
0008C3EF E109                       	smpsAlterNote       $09
0008C3F1 E701                       	dc.b	smpsNoAttack, $01
0008C3F3 E106                       	smpsAlterNote       $06
0008C3F5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C3F8 E109                       	smpsAlterNote       $09
0008C3FA A007                       	dc.b	nG2, $07
0008C3FC E108                       	smpsAlterNote       $08
0008C3FE 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C402 E107                       	smpsAlterNote       $07
0008C404 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C40A E10B                       	smpsAlterNote       $0B
0008C40C A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C410 E107                       	smpsAlterNote       $07
0008C412 9B03                       	dc.b	nD2, $03
0008C414 E11A                       	smpsAlterNote       $1A
0008C416 A301                       	dc.b	nBb2, $01
0008C418 E1F9                       	smpsAlterNote       $F9
0008C41A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C41D E107                       	smpsAlterNote       $07
0008C41F E701                       	dc.b	smpsNoAttack, $01
0008C421 E111                       	smpsAlterNote       $11
0008C423 E701                       	dc.b	smpsNoAttack, $01
0008C425 E106                       	smpsAlterNote       $06
0008C427 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008C42C E107                       	smpsAlterNote       $07
0008C42E 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C436 E1EC                       	smpsAlterNote       $EC
0008C438 A101                       	dc.b	nAb2, $01
0008C43A E108                       	smpsAlterNote       $08
0008C43C E701                       	dc.b	smpsNoAttack, $01
0008C43E E116                       	smpsAlterNote       $16
0008C440 E701                       	dc.b	smpsNoAttack, $01
0008C442 E1F5                       	smpsAlterNote       $F5
0008C444 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C447 E10B                       	smpsAlterNote       $0B
0008C449 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C44D E107                       	smpsAlterNote       $07
0008C44F 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C455 E109                       	smpsAlterNote       $09
0008C457 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C45B E10B                       	smpsAlterNote       $0B
0008C45D 9603                       	dc.b	nA1, $03
0008C45F E107                       	smpsAlterNote       $07
0008C461 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C467 E10B                       	smpsAlterNote       $0B
0008C469 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C46D E107                       	smpsAlterNote       $07
0008C46F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C473 E11A                       	smpsAlterNote       $1A
0008C475 A301                       	dc.b	nBb2, $01
0008C477 E1F9                       	smpsAlterNote       $F9
0008C479 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C47C E107                       	smpsAlterNote       $07
0008C47E E701                       	dc.b	smpsNoAttack, $01
0008C480 E1FB                       	smpsAlterNote       $FB
0008C482 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C485 E106                       	smpsAlterNote       $06
0008C487 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C48B E107                       	smpsAlterNote       $07
0008C48D 9B03                       	dc.b	nD2, $03
0008C48F E108                       	smpsAlterNote       $08
0008C491 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C497 E109                       	smpsAlterNote       $09
0008C499 A002 8001                  	dc.b	nG2, $02, nRst, $01
0008C49D E10C                       	smpsAlterNote       $0C
0008C49F A303                       	dc.b	nBb2, $03
0008C4A1 E1F0                       	smpsAlterNote       $F0
0008C4A3 A401                       	dc.b	nB2, $01
0008C4A5 E1FD                       	smpsAlterNote       $FD
0008C4A7 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008C4AC E106                       	smpsAlterNote       $06
0008C4AE 8001                       	dc.b	nRst, $01
0008C4B0 E109                       	smpsAlterNote       $09
0008C4B2 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C4B6 E108                       	smpsAlterNote       $08
0008C4B8 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008C4BC E107                       	smpsAlterNote       $07
0008C4BE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C4C4 E10B                       	smpsAlterNote       $0B
0008C4C6 A203                       	dc.b	nA2, $03
0008C4C8 E107                       	smpsAlterNote       $07
0008C4CA 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C4CE E1F2                       	smpsAlterNote       $F2
0008C4D0 A401                       	dc.b	nB2, $01
0008C4D2 E1FF                       	smpsAlterNote       $FF
0008C4D4 E701                       	dc.b	smpsNoAttack, $01
0008C4D6 E107                       	smpsAlterNote       $07
0008C4D8 E701                       	dc.b	smpsNoAttack, $01
0008C4DA E1FB                       	smpsAlterNote       $FB
0008C4DC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C4DF E106                       	smpsAlterNote       $06
0008C4E1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C4E5 E107                       	smpsAlterNote       $07
0008C4E7 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0008C4F1 E117                       	smpsAlterNote       $17
0008C4F3 A001                       	dc.b	nG2, $01
0008C4F5 E1FA                       	smpsAlterNote       $FA
0008C4F7 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C4FA E108                       	smpsAlterNote       $08
0008C4FC E701                       	dc.b	smpsNoAttack, $01
0008C4FE E1E7                       	smpsAlterNote       $E7
0008C500 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C503 E103                       	smpsAlterNote       $03
0008C505 E701                       	dc.b	smpsNoAttack, $01
0008C507 E10B                       	smpsAlterNote       $0B
0008C509 E702                       	dc.b	smpsNoAttack, $02
0008C50B E107                       	smpsAlterNote       $07
0008C50D 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
0008C515 E106                       	smpsAlterNote       $06
0008C517 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0008C51D E10C                       	smpsAlterNote       $0C
0008C51F 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0008C525 E109                       	smpsAlterNote       $09
0008C527 9E03                       	dc.b	nF2, $03
0008C529 E10C                       	smpsAlterNote       $0C
0008C52B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C52F E1EA                       	smpsAlterNote       $EA
0008C531 A201                       	dc.b	nA2, $01
0008C533 E106                       	smpsAlterNote       $06
0008C535 E701                       	dc.b	smpsNoAttack, $01
0008C537 E1E2                       	smpsAlterNote       $E2
0008C539 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C53C E1F0                       	smpsAlterNote       $F0
0008C53E E701                       	dc.b	smpsNoAttack, $01
0008C540 E10C                       	smpsAlterNote       $0C
0008C542 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C54E E116                       	smpsAlterNote       $16
0008C550 9C01                       	dc.b	nEb2, $01
0008C552 E105                       	smpsAlterNote       $05
0008C554 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C557 E1F1                       	smpsAlterNote       $F1
0008C559 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C55C E1FF                       	smpsAlterNote       $FF
0008C55E E701                       	dc.b	smpsNoAttack, $01
0008C560 E109                       	smpsAlterNote       $09
0008C562 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C566 E10C                       	smpsAlterNote       $0C
0008C568 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C574 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008C57A E109                       	smpsAlterNote       $09
0008C57C 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C580 E10C                       	smpsAlterNote       $0C
0008C582 9703                       	dc.b	nBb1, $03
0008C584 E11A                       	smpsAlterNote       $1A
0008C586 A101                       	dc.b	nAb2, $01
0008C588 E1FB                       	smpsAlterNote       $FB
0008C58A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C58D E10A                       	smpsAlterNote       $0A
0008C58F E701                       	dc.b	smpsNoAttack, $01
0008C591 E1E8                       	smpsAlterNote       $E8
0008C593 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C596 E106                       	smpsAlterNote       $06
0008C598 E701                       	dc.b	smpsNoAttack, $01
0008C59A E10C                       	smpsAlterNote       $0C
0008C59C E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
0008C5A8 E1F9                       	smpsAlterNote       $F9
0008C5AA 9D01                       	dc.b	nE2, $01
0008C5AC E108                       	smpsAlterNote       $08
0008C5AE E701                       	dc.b	smpsNoAttack, $01
0008C5B0 E1F6                       	smpsAlterNote       $F6
0008C5B2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C5B5 E109                       	smpsAlterNote       $09
0008C5B7 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008C5BB E10C                       	smpsAlterNote       $0C
0008C5BD 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
0008C5C9 E108                       	smpsAlterNote       $08
0008C5CB 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008C5D1 E106                       	smpsAlterNote       $06
0008C5D3 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C5D7 E108                       	smpsAlterNote       $08
0008C5D9 9D03                       	dc.b	nE2, $03
0008C5DB E1EB                       	smpsAlterNote       $EB
0008C5DD A801                       	dc.b	nEb3, $01
0008C5DF E109                       	smpsAlterNote       $09
0008C5E1 E701                       	dc.b	smpsNoAttack, $01
0008C5E3 E1FA                       	smpsAlterNote       $FA
0008C5E5 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C5E8 E108                       	smpsAlterNote       $08
0008C5EA E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
0008C5F6 E1E9                       	smpsAlterNote       $E9
0008C5F8 A301                       	dc.b	nBb2, $01
0008C5FA E107                       	smpsAlterNote       $07
0008C5FC E701                       	dc.b	smpsNoAttack, $01
0008C5FE E1F0                       	smpsAlterNote       $F0
0008C600 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C603 E1F7                       	smpsAlterNote       $F7
0008C605 E701                       	dc.b	smpsNoAttack, $01
0008C607 E107                       	smpsAlterNote       $07
0008C609 E701                       	dc.b	smpsNoAttack, $01
0008C60B E106                       	smpsAlterNote       $06
0008C60D E701                       	dc.b	smpsNoAttack, $01
0008C60F E108                       	smpsAlterNote       $08
0008C611 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008C617 E106                       	smpsAlterNote       $06
0008C619 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C61D E108                       	smpsAlterNote       $08
0008C61F 9D03                       	dc.b	nE2, $03
0008C621 E10B                       	smpsAlterNote       $0B
0008C623 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0008C62B E108                       	smpsAlterNote       $08
0008C62D 9D03                       	dc.b	nE2, $03
0008C62F E10B                       	smpsAlterNote       $0B
0008C631 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C635 E113                       	smpsAlterNote       $13
0008C637 A001                       	dc.b	nG2, $01
0008C639 E118                       	smpsAlterNote       $18
0008C63B E701                       	dc.b	smpsNoAttack, $01
0008C63D E1E9                       	smpsAlterNote       $E9
0008C63F E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C642 E1F3                       	smpsAlterNote       $F3
0008C644 E701                       	dc.b	smpsNoAttack, $01
0008C646 E1FD                       	smpsAlterNote       $FD
0008C648 E701                       	dc.b	smpsNoAttack, $01
0008C64A E102                       	smpsAlterNote       $02
0008C64C E701                       	dc.b	smpsNoAttack, $01
0008C64E E107                       	smpsAlterNote       $07
0008C650 8001                       	dc.b	nRst, $01
0008C652 E10B                       	smpsAlterNote       $0B
0008C654 9603                       	dc.b	nA1, $03
0008C656 E10C                       	smpsAlterNote       $0C
0008C658 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008C65E E10B                       	smpsAlterNote       $0B
0008C660 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C66C 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0008C672 E107                       	smpsAlterNote       $07
0008C674 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C67A E10B                       	smpsAlterNote       $0B
0008C67C A203                       	dc.b	nA2, $03
0008C67E E107                       	smpsAlterNote       $07
0008C680 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C684 E1F2                       	smpsAlterNote       $F2
0008C686 A401                       	dc.b	nB2, $01
0008C688 E1FF                       	smpsAlterNote       $FF
0008C68A E701                       	dc.b	smpsNoAttack, $01
0008C68C E107                       	smpsAlterNote       $07
0008C68E E701                       	dc.b	smpsNoAttack, $01
0008C690 E1FB                       	smpsAlterNote       $FB
0008C692 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C695 E106                       	smpsAlterNote       $06
0008C697 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C69B E107                       	smpsAlterNote       $07
0008C69D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C6A1 E108                       	smpsAlterNote       $08
0008C6A3 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C6A9 E109                       	smpsAlterNote       $09
0008C6AB A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C6AF E10C                       	smpsAlterNote       $0C
0008C6B1 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008C6B5 E1F0                       	smpsAlterNote       $F0
0008C6B7 A401                       	dc.b	nB2, $01
0008C6B9 E109                       	smpsAlterNote       $09
0008C6BB E701                       	dc.b	smpsNoAttack, $01
0008C6BD E106                       	smpsAlterNote       $06
0008C6BF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C6C2 E109                       	smpsAlterNote       $09
0008C6C4 A007                       	dc.b	nG2, $07
0008C6C6 E108                       	smpsAlterNote       $08
0008C6C8 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C6CC E107                       	smpsAlterNote       $07
0008C6CE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C6D4 E10B                       	smpsAlterNote       $0B
0008C6D6 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C6DA E107                       	smpsAlterNote       $07
0008C6DC 9B03                       	dc.b	nD2, $03
0008C6DE E11A                       	smpsAlterNote       $1A
0008C6E0 A301                       	dc.b	nBb2, $01
0008C6E2 E1F2                       	smpsAlterNote       $F2
0008C6E4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C6E7 E1FF                       	smpsAlterNote       $FF
0008C6E9 E701                       	dc.b	smpsNoAttack, $01
0008C6EB E111                       	smpsAlterNote       $11
0008C6ED E701                       	dc.b	smpsNoAttack, $01
0008C6EF E106                       	smpsAlterNote       $06
0008C6F1 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C6F4 E107                       	smpsAlterNote       $07
0008C6F6 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C702 E117                       	smpsAlterNote       $17
0008C704 A001                       	dc.b	nG2, $01
0008C706 E1FA                       	smpsAlterNote       $FA
0008C708 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C70B E116                       	smpsAlterNote       $16
0008C70D E701                       	dc.b	smpsNoAttack, $01
0008C70F E1F5                       	smpsAlterNote       $F5
0008C711 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C714 E103                       	smpsAlterNote       $03
0008C716 E701                       	dc.b	smpsNoAttack, $01
0008C718 E10B                       	smpsAlterNote       $0B
0008C71A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C71E E107                       	smpsAlterNote       $07
0008C720 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C726 E109                       	smpsAlterNote       $09
0008C728 9E03                       	dc.b	nF2, $03
0008C72A E10B                       	smpsAlterNote       $0B
0008C72C 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C730 E107                       	smpsAlterNote       $07
0008C732 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C738 E10B                       	smpsAlterNote       $0B
0008C73A A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C73E E107                       	smpsAlterNote       $07
0008C740 9B03                       	dc.b	nD2, $03
0008C742 E11A                       	smpsAlterNote       $1A
0008C744 A301                       	dc.b	nBb2, $01
0008C746 E1F9                       	smpsAlterNote       $F9
0008C748 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C74B E107                       	smpsAlterNote       $07
0008C74D E701                       	dc.b	smpsNoAttack, $01
0008C74F E111                       	smpsAlterNote       $11
0008C751 E701                       	dc.b	smpsNoAttack, $01
0008C753 E106                       	smpsAlterNote       $06
0008C755 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008C75A E107                       	smpsAlterNote       $07
0008C75C 9B03                       	dc.b	nD2, $03
0008C75E E108                       	smpsAlterNote       $08
0008C760 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C766 E109                       	smpsAlterNote       $09
0008C768 A003                       	dc.b	nG2, $03
0008C76A E10C                       	smpsAlterNote       $0C
0008C76C A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C770 E1FD                       	smpsAlterNote       $FD
0008C772 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
0008C777 E106                       	smpsAlterNote       $06
0008C779 8001                       	dc.b	nRst, $01
0008C77B E109                       	smpsAlterNote       $09
0008C77D A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C781 E108                       	smpsAlterNote       $08
0008C783 9C03                       	dc.b	nEb2, $03
0008C785 E107                       	smpsAlterNote       $07
0008C787 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C78D E10B                       	smpsAlterNote       $0B
0008C78F A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C793 E107                       	smpsAlterNote       $07
0008C795 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C799 E11A                       	smpsAlterNote       $1A
0008C79B A301                       	dc.b	nBb2, $01
0008C79D E1F9                       	smpsAlterNote       $F9
0008C79F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C7A2 E107                       	smpsAlterNote       $07
0008C7A4 E701                       	dc.b	smpsNoAttack, $01
0008C7A6 E1FB                       	smpsAlterNote       $FB
0008C7A8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C7AB E106                       	smpsAlterNote       $06
0008C7AD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C7B1 E107                       	smpsAlterNote       $07
0008C7B3 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C7BB E1EC                       	smpsAlterNote       $EC
0008C7BD A101                       	dc.b	nAb2, $01
0008C7BF E108                       	smpsAlterNote       $08
0008C7C1 E701                       	dc.b	smpsNoAttack, $01
0008C7C3 E1E7                       	smpsAlterNote       $E7
0008C7C5 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C7C8 E1F5                       	smpsAlterNote       $F5
0008C7CA E701                       	dc.b	smpsNoAttack, $01
0008C7CC E10B                       	smpsAlterNote       $0B
0008C7CE E702                       	dc.b	smpsNoAttack, $02
0008C7D0 E107                       	smpsAlterNote       $07
0008C7D2 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C7D8 E106                       	smpsAlterNote       $06
0008C7DA 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C7E0 E10C                       	smpsAlterNote       $0C
0008C7E2 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C7EA E109                       	smpsAlterNote       $09
0008C7EC 9E03                       	dc.b	nF2, $03
0008C7EE E10C                       	smpsAlterNote       $0C
0008C7F0 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C7F4 E1EA                       	smpsAlterNote       $EA
0008C7F6 A201                       	dc.b	nA2, $01
0008C7F8 E106                       	smpsAlterNote       $06
0008C7FA E701                       	dc.b	smpsNoAttack, $01
0008C7FC E114                       	smpsAlterNote       $14
0008C7FE E701                       	dc.b	smpsNoAttack, $01
0008C800 E1F0                       	smpsAlterNote       $F0
0008C802 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C805 E10C                       	smpsAlterNote       $0C
0008C807 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C813 9703                       	dc.b	nBb1, $03
0008C815 E116                       	smpsAlterNote       $16
0008C817 9C01                       	dc.b	nEb2, $01
0008C819 E105                       	smpsAlterNote       $05
0008C81B E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C81E E113                       	smpsAlterNote       $13
0008C820 E701                       	dc.b	smpsNoAttack, $01
0008C822 E1FF                       	smpsAlterNote       $FF
0008C824 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C827 E109                       	smpsAlterNote       $09
0008C829 E703                       	dc.b	smpsNoAttack, $03
0008C82B E10C                       	smpsAlterNote       $0C
0008C82D 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C839 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C841 E109                       	smpsAlterNote       $09
0008C843 9E03                       	dc.b	nF2, $03
0008C845 E10C                       	smpsAlterNote       $0C
0008C847 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C84B E1EC                       	smpsAlterNote       $EC
0008C84D A201                       	dc.b	nA2, $01
0008C84F E10A                       	smpsAlterNote       $0A
0008C851 E701                       	dc.b	smpsNoAttack, $01
0008C853 E1E8                       	smpsAlterNote       $E8
0008C855 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C858 E1F7                       	smpsAlterNote       $F7
0008C85A E701                       	dc.b	smpsNoAttack, $01
0008C85C E10C                       	smpsAlterNote       $0C
0008C85E E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C86A E1EA                       	smpsAlterNote       $EA
0008C86C 9D01                       	dc.b	nE2, $01
0008C86E E108                       	smpsAlterNote       $08
0008C870 E701                       	dc.b	smpsNoAttack, $01
0008C872 E1F6                       	smpsAlterNote       $F6
0008C874 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C877 E105                       	smpsAlterNote       $05
0008C879 E701                       	dc.b	smpsNoAttack, $01
0008C87B E109                       	smpsAlterNote       $09
0008C87D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C881 E10C                       	smpsAlterNote       $0C
0008C883 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C88F E108                       	smpsAlterNote       $08
0008C891 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
0008C897 E106                       	smpsAlterNote       $06
0008C899 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C89D E108                       	smpsAlterNote       $08
0008C89F 9D03                       	dc.b	nE2, $03
0008C8A1 E1EB                       	smpsAlterNote       $EB
0008C8A3 A801                       	dc.b	nEb3, $01
0008C8A5 E109                       	smpsAlterNote       $09
0008C8A7 E701                       	dc.b	smpsNoAttack, $01
0008C8A9 E1EB                       	smpsAlterNote       $EB
0008C8AB E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C8AE E108                       	smpsAlterNote       $08
0008C8B0 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0008C8BC E1E9                       	smpsAlterNote       $E9
0008C8BE A301                       	dc.b	nBb2, $01
0008C8C0 E1F8                       	smpsAlterNote       $F8
0008C8C2 E701                       	dc.b	smpsNoAttack, $01
0008C8C4 E116                       	smpsAlterNote       $16
0008C8C6 E701                       	dc.b	smpsNoAttack, $01
0008C8C8 E1F7                       	smpsAlterNote       $F7
0008C8CA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C8CD E107                       	smpsAlterNote       $07
0008C8CF E701                       	dc.b	smpsNoAttack, $01
0008C8D1 E1EE                       	smpsAlterNote       $EE
0008C8D3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C8D6 E106                       	smpsAlterNote       $06
0008C8D8 8001                       	dc.b	nRst, $01
0008C8DA E108                       	smpsAlterNote       $08
0008C8DC 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
0008C8E2 E106                       	smpsAlterNote       $06
0008C8E4 A402 8001                  	dc.b	nB2, $02, nRst, $01
0008C8E8 E108                       	smpsAlterNote       $08
0008C8EA 9D03                       	dc.b	nE2, $03
0008C8EC E10B                       	smpsAlterNote       $0B
0008C8EE 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
0008C8F4 E108                       	smpsAlterNote       $08
0008C8F6 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0008C8FA E10B                       	smpsAlterNote       $0B
0008C8FC 9603                       	dc.b	nA1, $03
0008C8FE E10E                       	smpsAlterNote       $0E
0008C900 A001                       	dc.b	nG2, $01
0008C902 E118                       	smpsAlterNote       $18
0008C904 E701                       	dc.b	smpsNoAttack, $01
0008C906 E1E9                       	smpsAlterNote       $E9
0008C908 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C90B E1EE                       	smpsAlterNote       $EE
0008C90D E701                       	dc.b	smpsNoAttack, $01
0008C90F E1F8                       	smpsAlterNote       $F8
0008C911 E701                       	dc.b	smpsNoAttack, $01
0008C913 E102                       	smpsAlterNote       $02
0008C915 E701                       	dc.b	smpsNoAttack, $01
0008C917 E107                       	smpsAlterNote       $07
0008C919 8001                       	dc.b	nRst, $01
0008C91B E10B                       	smpsAlterNote       $0B
0008C91D 9603                       	dc.b	nA1, $03
0008C91F E10C                       	smpsAlterNote       $0C
0008C921 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
0008C927 E10B                       	smpsAlterNote       $0B
0008C929 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C935 8001 9603                  	dc.b	nRst, $01, nA1, $03
0008C939 E10C                       	smpsAlterNote       $0C
0008C93B 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
0008C947 8001                       	dc.b	nRst, $01
0008C949 E10B                       	smpsAlterNote       $0B
0008C94B 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C953 E107                       	smpsAlterNote       $07
0008C955 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C959 E10B                       	smpsAlterNote       $0B
0008C95B 9603                       	dc.b	nA1, $03
0008C95D E109                       	smpsAlterNote       $09
0008C95F 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C963 E108                       	smpsAlterNote       $08
0008C965 9D06                       	dc.b	nE2, $06
0008C967 E107                       	smpsAlterNote       $07
0008C969 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C96D E106                       	smpsAlterNote       $06
0008C96F 9903                       	dc.b	nC2, $03
0008C971 E10C                       	smpsAlterNote       $0C
0008C973 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C977 E10B                       	smpsAlterNote       $0B
0008C979 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C985 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C98F E10C                       	smpsAlterNote       $0C
0008C991 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0008C99D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C9A9 8001                       	dc.b	nRst, $01
0008C9AB E10B                       	smpsAlterNote       $0B
0008C9AD 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C9B9 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
0008C9C5 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
0008C9D1 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C9DB E10C                       	smpsAlterNote       $0C
0008C9DD 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
0008C9E9 E10B                       	smpsAlterNote       $0B
0008C9EB 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C9F3 E107                       	smpsAlterNote       $07
0008C9F5 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C9F9 E10B                       	smpsAlterNote       $0B
0008C9FB 9603                       	dc.b	nA1, $03
0008C9FD E109                       	smpsAlterNote       $09
0008C9FF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008CA03 E108                       	smpsAlterNote       $08
0008CA05 9D06 8001                  	dc.b	nE2, $06, nRst, $01
0008CA09 E107                       	smpsAlterNote       $07
0008CA0B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008CA0F E106                       	smpsAlterNote       $06
0008CA11 9903                       	dc.b	nC2, $03
0008CA13 E10C                       	smpsAlterNote       $0C
0008CA15 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008CA19 E10B                       	smpsAlterNote       $0B
0008CA1B 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008CA27 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008CA31 E10C                       	smpsAlterNote       $0C
0008CA33 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
0008CA3F 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008CA4B 8001                       	dc.b	nRst, $01
0008CA4D E10B                       	smpsAlterNote       $0B
0008CA4F 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008CA5B 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008CA65 E10C                       	smpsAlterNote       $0C
0008CA67 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008CA73 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0008CA7F E10B                       	smpsAlterNote       $0B
0008CA81 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008CA8D 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008CA97 E10C                       	smpsAlterNote       $0C
0008CA99 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008CAA5 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0008CAB1 E10B                       	smpsAlterNote       $0B
0008CAB3 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0008CABF 8001                       	dc.b	nRst, $01
0008CAC1 E1EC                       	smpsAlterNote       $EC
0008CAC3 A101                       	dc.b	nAb2, $01
0008CAC5 E1FA                       	smpsAlterNote       $FA
0008CAC7 E701                       	dc.b	smpsNoAttack, $01
0008CAC9 E116                       	smpsAlterNote       $16
0008CACB E701                       	dc.b	smpsNoAttack, $01
0008CACD E1F5                       	smpsAlterNote       $F5
0008CACF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008CAD2 E10B                       	smpsAlterNote       $0B
0008CAD4 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0008CAE0 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0008CAEC E107                       	smpsAlterNote       $07
0008CAEE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CAF4 E10B                       	smpsAlterNote       $0B
0008CAF6 A203                       	dc.b	nA2, $03
0008CAF8 E107                       	smpsAlterNote       $07
0008CAFA 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CAFE E1F3                       	smpsAlterNote       $F3
0008CB00 A401                       	dc.b	nB2, $01
0008CB02 E102                       	smpsAlterNote       $02
0008CB04 E701                       	dc.b	smpsNoAttack, $01
0008CB06 E109                       	smpsAlterNote       $09
0008CB08 E701                       	dc.b	smpsNoAttack, $01
0008CB0A E102                       	smpsAlterNote       $02
0008CB0C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CB0F E106                       	smpsAlterNote       $06
0008CB11 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CB15 E107                       	smpsAlterNote       $07
0008CB17 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008CB1B E108                       	smpsAlterNote       $08
0008CB1D 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008CB23 E109                       	smpsAlterNote       $09
0008CB25 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CB29 E1F2                       	smpsAlterNote       $F2
0008CB2B A401                       	dc.b	nB2, $01
0008CB2D E1FF                       	smpsAlterNote       $FF
0008CB2F E701                       	dc.b	smpsNoAttack, $01
0008CB31 E111                       	smpsAlterNote       $11
0008CB33 E701                       	dc.b	smpsNoAttack, $01
0008CB35 E1FB                       	smpsAlterNote       $FB
0008CB37 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CB3A E106                       	smpsAlterNote       $06
0008CB3C E702                       	dc.b	smpsNoAttack, $02
0008CB3E E109                       	smpsAlterNote       $09
0008CB40 A007                       	dc.b	nG2, $07
0008CB42 E108                       	smpsAlterNote       $08
0008CB44 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008CB48 E107                       	smpsAlterNote       $07
0008CB4A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CB50 E10B                       	smpsAlterNote       $0B
0008CB52 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008CB56 E107                       	smpsAlterNote       $07
0008CB58 9B03                       	dc.b	nD2, $03
0008CB5A E11A                       	smpsAlterNote       $1A
0008CB5C A301                       	dc.b	nBb2, $01
0008CB5E E1F2                       	smpsAlterNote       $F2
0008CB60 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CB63 E1FF                       	smpsAlterNote       $FF
0008CB65 E701                       	dc.b	smpsNoAttack, $01
0008CB67 E111                       	smpsAlterNote       $11
0008CB69 E701                       	dc.b	smpsNoAttack, $01
0008CB6B E106                       	smpsAlterNote       $06
0008CB6D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CB70 E107                       	smpsAlterNote       $07
0008CB72 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008CB7E E117                       	smpsAlterNote       $17
0008CB80 A001                       	dc.b	nG2, $01
0008CB82 E1FA                       	smpsAlterNote       $FA
0008CB84 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008CB87 E116                       	smpsAlterNote       $16
0008CB89 E701                       	dc.b	smpsNoAttack, $01
0008CB8B E1F5                       	smpsAlterNote       $F5
0008CB8D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008CB90 E103                       	smpsAlterNote       $03
0008CB92 E701                       	dc.b	smpsNoAttack, $01
0008CB94 E10B                       	smpsAlterNote       $0B
0008CB96 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CB9A E107                       	smpsAlterNote       $07
0008CB9C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CBA2 E109                       	smpsAlterNote       $09
0008CBA4 9E03                       	dc.b	nF2, $03
0008CBA6 E10B                       	smpsAlterNote       $0B
0008CBA8 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008CBAC E107                       	smpsAlterNote       $07
0008CBAE 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008CBB4 E10B                       	smpsAlterNote       $0B
0008CBB6 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008CBBA E107                       	smpsAlterNote       $07
0008CBBC 9B03                       	dc.b	nD2, $03
0008CBBE E11A                       	smpsAlterNote       $1A
0008CBC0 A301                       	dc.b	nBb2, $01
0008CBC2 E1F9                       	smpsAlterNote       $F9
0008CBC4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CBC7 E1FF                       	smpsAlterNote       $FF
0008CBC9 E701                       	dc.b	smpsNoAttack, $01
0008CBCB E111                       	smpsAlterNote       $11
0008CBCD E701                       	dc.b	smpsNoAttack, $01
0008CBCF E106                       	smpsAlterNote       $06
0008CBD1 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CBD4 E107                       	smpsAlterNote       $07
0008CBD6 9B03                       	dc.b	nD2, $03
0008CBD8 E108                       	smpsAlterNote       $08
0008CBDA 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008CBE0 E109                       	smpsAlterNote       $09
0008CBE2 A003                       	dc.b	nG2, $03
0008CBE4 E1F0                       	smpsAlterNote       $F0
0008CBE6 A501                       	dc.b	nC3, $01
0008CBE8 E106                       	smpsAlterNote       $06
0008CBEA E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0008CBEE E109                       	smpsAlterNote       $09
0008CBF0 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008CBF4 E108                       	smpsAlterNote       $08
0008CBF6 9C03                       	dc.b	nEb2, $03
0008CBF8 E107                       	smpsAlterNote       $07
0008CBFA 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008CC00 E10B                       	smpsAlterNote       $0B
0008CC02 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008CC06 E107                       	smpsAlterNote       $07
0008CC08 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008CC0C E11A                       	smpsAlterNote       $1A
0008CC0E A301                       	dc.b	nBb2, $01
0008CC10 E1F9                       	smpsAlterNote       $F9
0008CC12 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CC15 E107                       	smpsAlterNote       $07
0008CC17 E701                       	dc.b	smpsNoAttack, $01
0008CC19 E1FB                       	smpsAlterNote       $FB
0008CC1B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CC1E E106                       	smpsAlterNote       $06
0008CC20 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CC24 E107                       	smpsAlterNote       $07
0008CC26 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008CC2E E1EC                       	smpsAlterNote       $EC
0008CC30 A101                       	dc.b	nAb2, $01
0008CC32 E108                       	smpsAlterNote       $08
0008CC34 E701                       	dc.b	smpsNoAttack, $01
0008CC36 E1E7                       	smpsAlterNote       $E7
0008CC38 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008CC3B E1F5                       	smpsAlterNote       $F5
0008CC3D E701                       	dc.b	smpsNoAttack, $01
0008CC3F E10B                       	smpsAlterNote       $0B
0008CC41 E702                       	dc.b	smpsNoAttack, $02
0008CC43 E107                       	smpsAlterNote       $07
0008CC45 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008CC4B E106                       	smpsAlterNote       $06
0008CC4D 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008CC53 E10C                       	smpsAlterNote       $0C
0008CC55 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008CC5D E109                       	smpsAlterNote       $09
0008CC5F 9E03                       	dc.b	nF2, $03
0008CC61 E10C                       	smpsAlterNote       $0C
0008CC63 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008CC67 E1EA                       	smpsAlterNote       $EA
0008CC69 A201                       	dc.b	nA2, $01
0008CC6B E106                       	smpsAlterNote       $06
0008CC6D E701                       	dc.b	smpsNoAttack, $01
0008CC6F E114                       	smpsAlterNote       $14
0008CC71 E701                       	dc.b	smpsNoAttack, $01
0008CC73 E1F0                       	smpsAlterNote       $F0
0008CC75 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008CC78 E10C                       	smpsAlterNote       $0C
0008CC7A E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008CC86 9703                       	dc.b	nBb1, $03
0008CC88 E116                       	smpsAlterNote       $16
0008CC8A 9C01                       	dc.b	nEb2, $01
0008CC8C E105                       	smpsAlterNote       $05
0008CC8E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008CC91 E113                       	smpsAlterNote       $13
0008CC93 E701                       	dc.b	smpsNoAttack, $01
0008CC95 E1FF                       	smpsAlterNote       $FF
0008CC97 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008CC9A E109                       	smpsAlterNote       $09
0008CC9C E703                       	dc.b	smpsNoAttack, $03
0008CC9E E10C                       	smpsAlterNote       $0C
0008CCA0 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008CCAC 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008CCB4 E109                       	smpsAlterNote       $09
0008CCB6 9E03                       	dc.b	nF2, $03
0008CCB8 E10C                       	smpsAlterNote       $0C
0008CCBA 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008CCBE E1EA                       	smpsAlterNote       $EA
0008CCC0 A201                       	dc.b	nA2, $01
0008CCC2 E106                       	smpsAlterNote       $06
0008CCC4 E701                       	dc.b	smpsNoAttack, $01
0008CCC6 E1E2                       	smpsAlterNote       $E2
0008CCC8 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008CCCB E1F0                       	smpsAlterNote       $F0
0008CCCD E701                       	dc.b	smpsNoAttack, $01
0008CCCF E10C                       	smpsAlterNote       $0C
0008CCD1 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008CCDD E116                       	smpsAlterNote       $16
0008CCDF 9C01                       	dc.b	nEb2, $01
0008CCE1 E105                       	smpsAlterNote       $05
0008CCE3 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008CCE6 E1F1                       	smpsAlterNote       $F1
0008CCE8 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008CCEB E1FF                       	smpsAlterNote       $FF
0008CCED E701                       	dc.b	smpsNoAttack, $01
0008CCEF E109                       	smpsAlterNote       $09
0008CCF1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CCF5 E10C                       	smpsAlterNote       $0C
0008CCF7 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
0008CD03 E106                       	smpsAlterNote       $06
0008CD05 9903                       	dc.b	nC2, $03
0008CD07 E107                       	smpsAlterNote       $07
0008CD09 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CD0D E109                       	smpsAlterNote       $09
0008CD0F 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
0008CD15 E107                       	smpsAlterNote       $07
0008CD17 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CD1B E108                       	smpsAlterNote       $08
0008CD1D 9D03                       	dc.b	nE2, $03
0008CD1F E10B                       	smpsAlterNote       $0B
0008CD21 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
0008CD27 E109                       	smpsAlterNote       $09
0008CD29 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0008CD2F E10C                       	smpsAlterNote       $0C
0008CD31 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
0008CD37 E106                       	smpsAlterNote       $06
0008CD39 9903                       	dc.b	nC2, $03
0008CD3B E11A                       	smpsAlterNote       $1A
0008CD3D A301                       	dc.b	nBb2, $01
0008CD3F E1F9                       	smpsAlterNote       $F9
0008CD41 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CD44 E1FF                       	smpsAlterNote       $FF
0008CD46 E701                       	dc.b	smpsNoAttack, $01
0008CD48 E111                       	smpsAlterNote       $11
0008CD4A E701                       	dc.b	smpsNoAttack, $01
0008CD4C E106                       	smpsAlterNote       $06
0008CD4E E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
0008CD55 E109                       	smpsAlterNote       $09
0008CD57 A003                       	dc.b	nG2, $03
0008CD59 E106                       	smpsAlterNote       $06
0008CD5B 9907                       	dc.b	nC2, $07
0008CD5D E107                       	smpsAlterNote       $07
0008CD5F 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
0008CD67 E10B                       	smpsAlterNote       $0B
0008CD69 A203                       	dc.b	nA2, $03
0008CD6B E107                       	smpsAlterNote       $07
0008CD6D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CD71 E1F2                       	smpsAlterNote       $F2
0008CD73 A401                       	dc.b	nB2, $01
0008CD75 E1F9                       	smpsAlterNote       $F9
0008CD77 E701                       	dc.b	smpsNoAttack, $01
0008CD79 E107                       	smpsAlterNote       $07
0008CD7B E701                       	dc.b	smpsNoAttack, $01
0008CD7D E1FB                       	smpsAlterNote       $FB
0008CD7F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CD82 E106                       	smpsAlterNote       $06
0008CD84 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CD88 E107                       	smpsAlterNote       $07
0008CD8A 9B03                       	dc.b	nD2, $03
0008CD8C E108                       	smpsAlterNote       $08
0008CD8E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008CD94 E109                       	smpsAlterNote       $09
0008CD96 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CD9A E1F2                       	smpsAlterNote       $F2
0008CD9C A401                       	dc.b	nB2, $01
0008CD9E E1F9                       	smpsAlterNote       $F9
0008CDA0 E701                       	dc.b	smpsNoAttack, $01
0008CDA2 E107                       	smpsAlterNote       $07
0008CDA4 E701                       	dc.b	smpsNoAttack, $01
0008CDA6 E1FB                       	smpsAlterNote       $FB
0008CDA8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CDAB E106                       	smpsAlterNote       $06
0008CDAD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CDB1 E108                       	smpsAlterNote       $08
0008CDB3 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
0008CDB7 E10C                       	smpsAlterNote       $0C
0008CDB9 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008CDBD E107                       	smpsAlterNote       $07
0008CDBF 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CDC5 E10B                       	smpsAlterNote       $0B
0008CDC7 A203                       	dc.b	nA2, $03
0008CDC9 E107                       	smpsAlterNote       $07
0008CDCB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CDCF E1F2                       	smpsAlterNote       $F2
0008CDD1 A401                       	dc.b	nB2, $01
0008CDD3 E1FF                       	smpsAlterNote       $FF
0008CDD5 E701                       	dc.b	smpsNoAttack, $01
0008CDD7 E107                       	smpsAlterNote       $07
0008CDD9 E701                       	dc.b	smpsNoAttack, $01
0008CDDB E1FB                       	smpsAlterNote       $FB
0008CDDD E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CDE0 E106                       	smpsAlterNote       $06
0008CDE2 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CDE6 E107                       	smpsAlterNote       $07
0008CDE8 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008CDEC E108                       	smpsAlterNote       $08
0008CDEE 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008CDF4 E109                       	smpsAlterNote       $09
0008CDF6 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CDFA E1F2                       	smpsAlterNote       $F2
0008CDFC A401                       	dc.b	nB2, $01
0008CDFE E1FF                       	smpsAlterNote       $FF
0008CE00 E701                       	dc.b	smpsNoAttack, $01
0008CE02 E111                       	smpsAlterNote       $11
0008CE04 E701                       	dc.b	smpsNoAttack, $01
0008CE06 E1FB                       	smpsAlterNote       $FB
0008CE08 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CE0B E106                       	smpsAlterNote       $06
0008CE0D E702                       	dc.b	smpsNoAttack, $02
0008CE0F E108                       	smpsAlterNote       $08
0008CE11 9C07                       	dc.b	nEb2, $07
0008CE13 E10C                       	smpsAlterNote       $0C
0008CE15 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008CE19 E107                       	smpsAlterNote       $07
0008CE1B 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CE21 E10B                       	smpsAlterNote       $0B
0008CE23 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008CE27 E107                       	smpsAlterNote       $07
0008CE29 9B03                       	dc.b	nD2, $03
0008CE2B E11A                       	smpsAlterNote       $1A
0008CE2D A301                       	dc.b	nBb2, $01
0008CE2F E1F2                       	smpsAlterNote       $F2
0008CE31 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CE34 E1FF                       	smpsAlterNote       $FF
0008CE36 E701                       	dc.b	smpsNoAttack, $01
0008CE38 E111                       	smpsAlterNote       $11
0008CE3A E701                       	dc.b	smpsNoAttack, $01
0008CE3C E106                       	smpsAlterNote       $06
0008CE3E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CE41 E107                       	smpsAlterNote       $07
0008CE43 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CE47 E108                       	smpsAlterNote       $08
0008CE49 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008CE51 E109                       	smpsAlterNote       $09
0008CE53 A003                       	dc.b	nG2, $03
0008CE55 E11A                       	smpsAlterNote       $1A
0008CE57 A301                       	dc.b	nBb2, $01
0008CE59 E1F2                       	smpsAlterNote       $F2
0008CE5B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CE5E E1FF                       	smpsAlterNote       $FF
0008CE60 E701                       	dc.b	smpsNoAttack, $01
0008CE62 E111                       	smpsAlterNote       $11
0008CE64 E701                       	dc.b	smpsNoAttack, $01
0008CE66 E106                       	smpsAlterNote       $06
0008CE68 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CE6B E108                       	smpsAlterNote       $08
0008CE6D 9C07                       	dc.b	nEb2, $07
0008CE6F E10C                       	smpsAlterNote       $0C
0008CE71 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008CE75 E107                       	smpsAlterNote       $07
0008CE77 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
0008CE83 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0008CE8D E108                       	smpsAlterNote       $08
0008CE8F 9C06                       	dc.b	nEb2, $06
0008CE91 E10C                       	smpsAlterNote       $0C
0008CE93 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008CE97 E108                       	smpsAlterNote       $08
0008CE99 9C03                       	dc.b	nEb2, $03
0008CE9B E109                       	smpsAlterNote       $09
0008CE9D A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CEA1 E10C                       	smpsAlterNote       $0C
0008CEA3 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
0008CEAB E107                       	smpsAlterNote       $07
0008CEAD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CEB1 F6F4 F8                    	smpsJump            music84_Jump04
0008CEB4                            
0008CEB4                            ; FM2 Data
0008CEB4                            music84_FM2:
0008CEB4 E0C0                       	smpsPan             panCenter, $00
0008CEB8 E10B                       	smpsAlterNote       $0B
0008CEBA C603 8007                  	dc.b	nA5, $03, nRst, $07
0008CEBE E109                       	smpsAlterNote       $09
0008CEC0 C403 800B                  	dc.b	nG5, $03, nRst, $0B
0008CEC4 E108                       	smpsAlterNote       $08
0008CEC6 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008CECC E080                       	smpsPan             panLeft, $00
0008CECE E10C                       	smpsAlterNote       $0C
0008CED0 E6F9                       	smpsAlterVol        $F9
0008CED2 C703                       	dc.b	nBb5, $03
0008CED4 E10B                       	smpsAlterNote       $0B
0008CED6 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008CEDA E109                       	smpsAlterNote       $09
0008CEDC C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008CEE2 E108                       	smpsAlterNote       $08
0008CEE4 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CEE8 E106                       	smpsAlterNote       $06
0008CEEA BD03                       	dc.b	nC5, $03
0008CEEC E10B                       	smpsAlterNote       $0B
0008CEEE BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008CEF4 E0C0                       	smpsPan             panCenter, $00
0008CEF6 E107                       	smpsAlterNote       $07
0008CEF8 E606                       	smpsAlterVol        $06
0008CEFA BF03                       	dc.b	nD5, $03
0008CEFC                            
0008CEFC                            music84_Jump03:
0008CEFC E108                       	smpsAlterNote       $08
0008CEFE C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CF02 E109                       	smpsAlterNote       $09
0008CF04 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
0008CF0A E10B                       	smpsAlterNote       $0B
0008CF0C C607                       	dc.b	nA5, $07
0008CF0E E107                       	smpsAlterNote       $07
0008CF10 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008CF14 E106                       	smpsAlterNote       $06
0008CF16 C90D                       	dc.b	nC6, $0D
0008CF18 E100                       	smpsAlterNote       $00
0008CF1A E701                       	dc.b	smpsNoAttack, $01
0008CF1C E1FF                       	smpsAlterNote       $FF
0008CF1E E701                       	dc.b	smpsNoAttack, $01
0008CF20 E103                       	smpsAlterNote       $03
0008CF22 E701                       	dc.b	smpsNoAttack, $01
0008CF24 E109                       	smpsAlterNote       $09
0008CF26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF2A E106                       	smpsAlterNote       $06
0008CF2C E701                       	dc.b	smpsNoAttack, $01
0008CF2E E100                       	smpsAlterNote       $00
0008CF30 E701                       	dc.b	smpsNoAttack, $01
0008CF32 E10C                       	smpsAlterNote       $0C
0008CF34 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008CF38 E10B                       	smpsAlterNote       $0B
0008CF3A C603                       	dc.b	nA5, $03
0008CF3C E109                       	smpsAlterNote       $09
0008CF3E C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CF42 E10B                       	smpsAlterNote       $0B
0008CF44 C60D                       	dc.b	nA5, $0D
0008CF46 E105                       	smpsAlterNote       $05
0008CF48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF4C E10B                       	smpsAlterNote       $0B
0008CF4E E701                       	dc.b	smpsNoAttack, $01
0008CF50 E10E                       	smpsAlterNote       $0E
0008CF52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF56 E108                       	smpsAlterNote       $08
0008CF58 E701                       	dc.b	smpsNoAttack, $01
0008CF5A E104                       	smpsAlterNote       $04
0008CF5C E701                       	dc.b	smpsNoAttack, $01
0008CF5E E105                       	smpsAlterNote       $05
0008CF60 E701                       	dc.b	smpsNoAttack, $01
0008CF62 E10B                       	smpsAlterNote       $0B
0008CF64 E701                       	dc.b	smpsNoAttack, $01
0008CF66 E10F                       	smpsAlterNote       $0F
0008CF68 E701                       	dc.b	smpsNoAttack, $01
0008CF6A E10B                       	smpsAlterNote       $0B
0008CF6C E701                       	dc.b	smpsNoAttack, $01
0008CF6E E108                       	smpsAlterNote       $08
0008CF70 E701                       	dc.b	smpsNoAttack, $01
0008CF72 E104                       	smpsAlterNote       $04
0008CF74 E701                       	dc.b	smpsNoAttack, $01
0008CF76 E108                       	smpsAlterNote       $08
0008CF78 E701                       	dc.b	smpsNoAttack, $01
0008CF7A E10E                       	smpsAlterNote       $0E
0008CF7C E701                       	dc.b	smpsNoAttack, $01
0008CF7E E10F                       	smpsAlterNote       $0F
0008CF80 E701                       	dc.b	smpsNoAttack, $01
0008CF82 E10B                       	smpsAlterNote       $0B
0008CF84 E701                       	dc.b	smpsNoAttack, $01
0008CF86 E105                       	smpsAlterNote       $05
0008CF88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF8C E108                       	smpsAlterNote       $08
0008CF8E E701                       	dc.b	smpsNoAttack, $01
0008CF90 E10E                       	smpsAlterNote       $0E
0008CF92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF96 E108                       	smpsAlterNote       $08
0008CF98 E701                       	dc.b	smpsNoAttack, $01
0008CF9A E105                       	smpsAlterNote       $05
0008CF9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFA0 E10B                       	smpsAlterNote       $0B
0008CFA2 E701                       	dc.b	smpsNoAttack, $01
0008CFA4 E10F                       	smpsAlterNote       $0F
0008CFA6 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008CFAA E107                       	smpsAlterNote       $07
0008CFAC BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008CFB0 E108                       	smpsAlterNote       $08
0008CFB2 C103                       	dc.b	nE5, $03
0008CFB4 E109                       	smpsAlterNote       $09
0008CFB6 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008CFBE E10B                       	smpsAlterNote       $0B
0008CFC0 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CFC4 E107                       	smpsAlterNote       $07
0008CFC6 BF03                       	dc.b	nD5, $03
0008CFC8 E106                       	smpsAlterNote       $06
0008CFCA C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008CFCE E107                       	smpsAlterNote       $07
0008CFD0 CB03                       	dc.b	nD6, $03
0008CFD2 E10C                       	smpsAlterNote       $0C
0008CFD4 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008CFD8 E10B                       	smpsAlterNote       $0B
0008CFDA C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CFDE E109                       	smpsAlterNote       $09
0008CFE0 C404                       	dc.b	nG5, $04
0008CFE2 E10B                       	smpsAlterNote       $0B
0008CFE4 C60D                       	dc.b	nA5, $0D
0008CFE6 E108                       	smpsAlterNote       $08
0008CFE8 E701                       	dc.b	smpsNoAttack, $01
0008CFEA E104                       	smpsAlterNote       $04
0008CFEC E701                       	dc.b	smpsNoAttack, $01
0008CFEE E108                       	smpsAlterNote       $08
0008CFF0 E701                       	dc.b	smpsNoAttack, $01
0008CFF2 E10B                       	smpsAlterNote       $0B
0008CFF4 E701                       	dc.b	smpsNoAttack, $01
0008CFF6 E10F                       	smpsAlterNote       $0F
0008CFF8 E701                       	dc.b	smpsNoAttack, $01
0008CFFA E10B                       	smpsAlterNote       $0B
0008CFFC E701                       	dc.b	smpsNoAttack, $01
0008CFFE E105                       	smpsAlterNote       $05
0008D000 E701                       	dc.b	smpsNoAttack, $01
0008D002 E104                       	smpsAlterNote       $04
0008D004 E701                       	dc.b	smpsNoAttack, $01
0008D006 E108                       	smpsAlterNote       $08
0008D008 E701                       	dc.b	smpsNoAttack, $01
0008D00A E10E                       	smpsAlterNote       $0E
0008D00C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D010 E10B                       	smpsAlterNote       $0B
0008D012 E701                       	dc.b	smpsNoAttack, $01
0008D014 E105                       	smpsAlterNote       $05
0008D016 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D01A E10B                       	smpsAlterNote       $0B
0008D01C E701                       	dc.b	smpsNoAttack, $01
0008D01E E10E                       	smpsAlterNote       $0E
0008D020 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D024 E108                       	smpsAlterNote       $08
0008D026 E701                       	dc.b	smpsNoAttack, $01
0008D028 E104                       	smpsAlterNote       $04
0008D02A E701                       	dc.b	smpsNoAttack, $01
0008D02C E105                       	smpsAlterNote       $05
0008D02E E701                       	dc.b	smpsNoAttack, $01
0008D030 E10B                       	smpsAlterNote       $0B
0008D032 E701                       	dc.b	smpsNoAttack, $01
0008D034 E10F                       	smpsAlterNote       $0F
0008D036 E701                       	dc.b	smpsNoAttack, $01
0008D038 E10B                       	smpsAlterNote       $0B
0008D03A E701                       	dc.b	smpsNoAttack, $01
0008D03C E108                       	smpsAlterNote       $08
0008D03E E701                       	dc.b	smpsNoAttack, $01
0008D040 E105                       	smpsAlterNote       $05
0008D042 8001                       	dc.b	nRst, $01
0008D044 E109                       	smpsAlterNote       $09
0008D046 C401                       	dc.b	nG5, $01
0008D048 E10B                       	smpsAlterNote       $0B
0008D04A E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
0008D053 E109                       	smpsAlterNote       $09
0008D055 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D059 E10B                       	smpsAlterNote       $0B
0008D05B C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D05F E107                       	smpsAlterNote       $07
0008D061 BF0D                       	dc.b	nD5, $0D
0008D063 E101                       	smpsAlterNote       $01
0008D065 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D069 E104                       	smpsAlterNote       $04
0008D06B E701                       	dc.b	smpsNoAttack, $01
0008D06D E10A                       	smpsAlterNote       $0A
0008D06F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D073 E104                       	smpsAlterNote       $04
0008D075 E701                       	dc.b	smpsNoAttack, $01
0008D077 E101                       	smpsAlterNote       $01
0008D079 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D07D E107                       	smpsAlterNote       $07
0008D07F E701                       	dc.b	smpsNoAttack, $01
0008D081 E10B                       	smpsAlterNote       $0B
0008D083 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008D087 E108                       	smpsAlterNote       $08
0008D089 C101                       	dc.b	nE5, $01
0008D08B E109                       	smpsAlterNote       $09
0008D08D E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008D092 E10B                       	smpsAlterNote       $0B
0008D094 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008D09C E108                       	smpsAlterNote       $08
0008D09E CD06                       	dc.b	nE6, $06
0008D0A0 E109                       	smpsAlterNote       $09
0008D0A2 CE07                       	dc.b	nF6, $07
0008D0A4 E108                       	smpsAlterNote       $08
0008D0A6 CD03 8001                  	dc.b	nE6, $03, nRst, $01
0008D0AA E106                       	smpsAlterNote       $06
0008D0AC C903                       	dc.b	nC6, $03
0008D0AE E109                       	smpsAlterNote       $09
0008D0B0 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D0B4 E10C                       	smpsAlterNote       $0C
0008D0B6 C70D                       	dc.b	nBb5, $0D
0008D0B8 E106                       	smpsAlterNote       $06
0008D0BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0BE E109                       	smpsAlterNote       $09
0008D0C0 E701                       	dc.b	smpsNoAttack, $01
0008D0C2 E10F                       	smpsAlterNote       $0F
0008D0C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0C8 E109                       	smpsAlterNote       $09
0008D0CA E701                       	dc.b	smpsNoAttack, $01
0008D0CC E106                       	smpsAlterNote       $06
0008D0CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0D2 E10C                       	smpsAlterNote       $0C
0008D0D4 E701                       	dc.b	smpsNoAttack, $01
0008D0D6 E110                       	smpsAlterNote       $10
0008D0D8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008D0DC E10B                       	smpsAlterNote       $0B
0008D0DE C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008D0E2 E105                       	smpsAlterNote       $05
0008D0E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0E8 E10B                       	smpsAlterNote       $0B
0008D0EA E701                       	dc.b	smpsNoAttack, $01
0008D0EC E10E                       	smpsAlterNote       $0E
0008D0EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0F2 E108                       	smpsAlterNote       $08
0008D0F4 E701                       	dc.b	smpsNoAttack, $01
0008D0F6 E104                       	smpsAlterNote       $04
0008D0F8 E701                       	dc.b	smpsNoAttack, $01
0008D0FA E105                       	smpsAlterNote       $05
0008D0FC E701                       	dc.b	smpsNoAttack, $01
0008D0FE E10B                       	smpsAlterNote       $0B
0008D100 E701                       	dc.b	smpsNoAttack, $01
0008D102 E10F                       	smpsAlterNote       $0F
0008D104 E701                       	dc.b	smpsNoAttack, $01
0008D106 E10B                       	smpsAlterNote       $0B
0008D108 E701                       	dc.b	smpsNoAttack, $01
0008D10A E108                       	smpsAlterNote       $08
0008D10C E701                       	dc.b	smpsNoAttack, $01
0008D10E E104                       	smpsAlterNote       $04
0008D110 E701                       	dc.b	smpsNoAttack, $01
0008D112 E108                       	smpsAlterNote       $08
0008D114 E701                       	dc.b	smpsNoAttack, $01
0008D116 E10E                       	smpsAlterNote       $0E
0008D118 E701                       	dc.b	smpsNoAttack, $01
0008D11A E10F                       	smpsAlterNote       $0F
0008D11C E701                       	dc.b	smpsNoAttack, $01
0008D11E E10B                       	smpsAlterNote       $0B
0008D120 E701                       	dc.b	smpsNoAttack, $01
0008D122 E105                       	smpsAlterNote       $05
0008D124 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D128 E108                       	smpsAlterNote       $08
0008D12A E701                       	dc.b	smpsNoAttack, $01
0008D12C E10E                       	smpsAlterNote       $0E
0008D12E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D132 E108                       	smpsAlterNote       $08
0008D134 E701                       	dc.b	smpsNoAttack, $01
0008D136 E105                       	smpsAlterNote       $05
0008D138 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D13C E10B                       	smpsAlterNote       $0B
0008D13E E701                       	dc.b	smpsNoAttack, $01
0008D140 E10F                       	smpsAlterNote       $0F
0008D142 E701                       	dc.b	smpsNoAttack, $01
0008D144 E10E                       	smpsAlterNote       $0E
0008D146 E701                       	dc.b	smpsNoAttack, $01
0008D148 E108                       	smpsAlterNote       $08
0008D14A E701                       	dc.b	smpsNoAttack, $01
0008D14C E104                       	smpsAlterNote       $04
0008D14E E701                       	dc.b	smpsNoAttack, $01
0008D150 E108                       	smpsAlterNote       $08
0008D152 E701                       	dc.b	smpsNoAttack, $01
0008D154 E10E                       	smpsAlterNote       $0E
0008D156 E701                       	dc.b	smpsNoAttack, $01
0008D158 E10F                       	smpsAlterNote       $0F
0008D15A E701                       	dc.b	smpsNoAttack, $01
0008D15C E10B                       	smpsAlterNote       $0B
0008D15E E701                       	dc.b	smpsNoAttack, $01
0008D160 E105                       	smpsAlterNote       $05
0008D162 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D166 E108                       	smpsAlterNote       $08
0008D168 E701                       	dc.b	smpsNoAttack, $01
0008D16A E10E                       	smpsAlterNote       $0E
0008D16C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D170 E108                       	smpsAlterNote       $08
0008D172 E701                       	dc.b	smpsNoAttack, $01
0008D174 E105                       	smpsAlterNote       $05
0008D176 E701                       	dc.b	smpsNoAttack, $01
0008D178 E10B                       	smpsAlterNote       $0B
0008D17A C60D                       	dc.b	nA5, $0D
0008D17C E108                       	smpsAlterNote       $08
0008D17E E701                       	dc.b	smpsNoAttack, $01
0008D180 E104                       	smpsAlterNote       $04
0008D182 E701                       	dc.b	smpsNoAttack, $01
0008D184 E105                       	smpsAlterNote       $05
0008D186 E701                       	dc.b	smpsNoAttack, $01
0008D188 E10B                       	smpsAlterNote       $0B
0008D18A E701                       	dc.b	smpsNoAttack, $01
0008D18C E10F                       	smpsAlterNote       $0F
0008D18E E701                       	dc.b	smpsNoAttack, $01
0008D190 E10B                       	smpsAlterNote       $0B
0008D192 E701                       	dc.b	smpsNoAttack, $01
0008D194 E108                       	smpsAlterNote       $08
0008D196 E701                       	dc.b	smpsNoAttack, $01
0008D198 E104                       	smpsAlterNote       $04
0008D19A E701                       	dc.b	smpsNoAttack, $01
0008D19C E108                       	smpsAlterNote       $08
0008D19E E701                       	dc.b	smpsNoAttack, $01
0008D1A0 E10E                       	smpsAlterNote       $0E
0008D1A2 E701                       	dc.b	smpsNoAttack, $01
0008D1A4 E10F                       	smpsAlterNote       $0F
0008D1A6 E701                       	dc.b	smpsNoAttack, $01
0008D1AA E109                       	smpsAlterNote       $09
0008D1AC E6FF                       	smpsAlterVol        $FF
0008D1AE C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
0008D1B8 E108                       	smpsAlterNote       $08
0008D1BA C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008D1C0 E107                       	smpsAlterNote       $07
0008D1C2 E601                       	smpsAlterVol        $01
0008D1C4 BF03                       	dc.b	nD5, $03
0008D1C6 E108                       	smpsAlterNote       $08
0008D1C8 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D1CC E109                       	smpsAlterNote       $09
0008D1CE C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008D1D4 E10B                       	smpsAlterNote       $0B
0008D1D6 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D1DA E107                       	smpsAlterNote       $07
0008D1DC BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D1E0 E106                       	smpsAlterNote       $06
0008D1E2 C90D                       	dc.b	nC6, $0D
0008D1E4 E103                       	smpsAlterNote       $03
0008D1E6 E701                       	dc.b	smpsNoAttack, $01
0008D1E8 E1FF                       	smpsAlterNote       $FF
0008D1EA E701                       	dc.b	smpsNoAttack, $01
0008D1EC E103                       	smpsAlterNote       $03
0008D1EE E701                       	dc.b	smpsNoAttack, $01
0008D1F0 E109                       	smpsAlterNote       $09
0008D1F2 E701                       	dc.b	smpsNoAttack, $01
0008D1F4 E10A                       	smpsAlterNote       $0A
0008D1F6 E701                       	dc.b	smpsNoAttack, $01
0008D1F8 E106                       	smpsAlterNote       $06
0008D1FA E701                       	dc.b	smpsNoAttack, $01
0008D1FC E100                       	smpsAlterNote       $00
0008D1FE E701                       	dc.b	smpsNoAttack, $01
0008D200 E10C                       	smpsAlterNote       $0C
0008D202 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008D206 E10B                       	smpsAlterNote       $0B
0008D208 C603                       	dc.b	nA5, $03
0008D20A E109                       	smpsAlterNote       $09
0008D20C C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D210 E10B                       	smpsAlterNote       $0B
0008D212 C60D                       	dc.b	nA5, $0D
0008D214 E105                       	smpsAlterNote       $05
0008D216 E701                       	dc.b	smpsNoAttack, $01
0008D218 E104                       	smpsAlterNote       $04
0008D21A E701                       	dc.b	smpsNoAttack, $01
0008D21C E108                       	smpsAlterNote       $08
0008D21E E701                       	dc.b	smpsNoAttack, $01
0008D220 E10E                       	smpsAlterNote       $0E
0008D222 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D226 E10B                       	smpsAlterNote       $0B
0008D228 E701                       	dc.b	smpsNoAttack, $01
0008D22A E105                       	smpsAlterNote       $05
0008D22C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D230 E10B                       	smpsAlterNote       $0B
0008D232 E701                       	dc.b	smpsNoAttack, $01
0008D234 E10E                       	smpsAlterNote       $0E
0008D236 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D23A E108                       	smpsAlterNote       $08
0008D23C E701                       	dc.b	smpsNoAttack, $01
0008D23E E104                       	smpsAlterNote       $04
0008D240 E701                       	dc.b	smpsNoAttack, $01
0008D242 E105                       	smpsAlterNote       $05
0008D244 E701                       	dc.b	smpsNoAttack, $01
0008D246 E10B                       	smpsAlterNote       $0B
0008D248 E701                       	dc.b	smpsNoAttack, $01
0008D24A E10F                       	smpsAlterNote       $0F
0008D24C E701                       	dc.b	smpsNoAttack, $01
0008D24E E10B                       	smpsAlterNote       $0B
0008D250 E701                       	dc.b	smpsNoAttack, $01
0008D252 E108                       	smpsAlterNote       $08
0008D254 E701                       	dc.b	smpsNoAttack, $01
0008D256 E104                       	smpsAlterNote       $04
0008D258 E701                       	dc.b	smpsNoAttack, $01
0008D25A E108                       	smpsAlterNote       $08
0008D25C E701                       	dc.b	smpsNoAttack, $01
0008D25E E10E                       	smpsAlterNote       $0E
0008D260 E701                       	dc.b	smpsNoAttack, $01
0008D262 E10F                       	smpsAlterNote       $0F
0008D264 E701                       	dc.b	smpsNoAttack, $01
0008D266 E10B                       	smpsAlterNote       $0B
0008D268 E701                       	dc.b	smpsNoAttack, $01
0008D26A E105                       	smpsAlterNote       $05
0008D26C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D270 E108                       	smpsAlterNote       $08
0008D272 E701                       	dc.b	smpsNoAttack, $01
0008D274 E10E                       	smpsAlterNote       $0E
0008D276 E701                       	dc.b	smpsNoAttack, $01
0008D278 E10F                       	smpsAlterNote       $0F
0008D27A 800F                       	dc.b	nRst, $0F
0008D27C E107                       	smpsAlterNote       $07
0008D27E BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D282 E108                       	smpsAlterNote       $08
0008D284 C103                       	dc.b	nE5, $03
0008D286 E109                       	smpsAlterNote       $09
0008D288 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008D28E E10B                       	smpsAlterNote       $0B
0008D290 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D294 E107                       	smpsAlterNote       $07
0008D296 BF03                       	dc.b	nD5, $03
0008D298 E106                       	smpsAlterNote       $06
0008D29A C90E                       	dc.b	nC6, $0E
0008D29C E107                       	smpsAlterNote       $07
0008D29E CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008D2A2 E10C                       	smpsAlterNote       $0C
0008D2A4 C704                       	dc.b	nBb5, $04
0008D2A6 E10B                       	smpsAlterNote       $0B
0008D2A8 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D2AC E109                       	smpsAlterNote       $09
0008D2AE C404                       	dc.b	nG5, $04
0008D2B0 E10B                       	smpsAlterNote       $0B
0008D2B2 C60D                       	dc.b	nA5, $0D
0008D2B4 E108                       	smpsAlterNote       $08
0008D2B6 E701                       	dc.b	smpsNoAttack, $01
0008D2B8 E105                       	smpsAlterNote       $05
0008D2BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2BE E10B                       	smpsAlterNote       $0B
0008D2C0 E701                       	dc.b	smpsNoAttack, $01
0008D2C2 E10F                       	smpsAlterNote       $0F
0008D2C4 E701                       	dc.b	smpsNoAttack, $01
0008D2C6 E10E                       	smpsAlterNote       $0E
0008D2C8 E701                       	dc.b	smpsNoAttack, $01
0008D2CA E108                       	smpsAlterNote       $08
0008D2CC E701                       	dc.b	smpsNoAttack, $01
0008D2CE E104                       	smpsAlterNote       $04
0008D2D0 E701                       	dc.b	smpsNoAttack, $01
0008D2D2 E108                       	smpsAlterNote       $08
0008D2D4 E701                       	dc.b	smpsNoAttack, $01
0008D2D6 E10B                       	smpsAlterNote       $0B
0008D2D8 E701                       	dc.b	smpsNoAttack, $01
0008D2DA E10F                       	smpsAlterNote       $0F
0008D2DC E701                       	dc.b	smpsNoAttack, $01
0008D2DE E10B                       	smpsAlterNote       $0B
0008D2E0 E701                       	dc.b	smpsNoAttack, $01
0008D2E2 E105                       	smpsAlterNote       $05
0008D2E4 E701                       	dc.b	smpsNoAttack, $01
0008D2E6 E104                       	smpsAlterNote       $04
0008D2E8 E701                       	dc.b	smpsNoAttack, $01
0008D2EA E108                       	smpsAlterNote       $08
0008D2EC E701                       	dc.b	smpsNoAttack, $01
0008D2EE E10E                       	smpsAlterNote       $0E
0008D2F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2F4 E10B                       	smpsAlterNote       $0B
0008D2F6 E701                       	dc.b	smpsNoAttack, $01
0008D2F8 E105                       	smpsAlterNote       $05
0008D2FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2FE E10B                       	smpsAlterNote       $0B
0008D300 E701                       	dc.b	smpsNoAttack, $01
0008D302 E10E                       	smpsAlterNote       $0E
0008D304 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D308 E108                       	smpsAlterNote       $08
0008D30A E701                       	dc.b	smpsNoAttack, $01
0008D30C E105                       	smpsAlterNote       $05
0008D30E 8001                       	dc.b	nRst, $01
0008D310 E109                       	smpsAlterNote       $09
0008D312 C402                       	dc.b	nG5, $02
0008D314 E10B                       	smpsAlterNote       $0B
0008D316 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008D31F E109                       	smpsAlterNote       $09
0008D321 C404                       	dc.b	nG5, $04
0008D323 E10B                       	smpsAlterNote       $0B
0008D325 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D329 E107                       	smpsAlterNote       $07
0008D32B BF0D                       	dc.b	nD5, $0D
0008D32D E101                       	smpsAlterNote       $01
0008D32F E701                       	dc.b	smpsNoAttack, $01
0008D331 E100                       	smpsAlterNote       $00
0008D333 E701                       	dc.b	smpsNoAttack, $01
0008D335 E104                       	smpsAlterNote       $04
0008D337 E701                       	dc.b	smpsNoAttack, $01
0008D339 E10A                       	smpsAlterNote       $0A
0008D33B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D33F E107                       	smpsAlterNote       $07
0008D341 E701                       	dc.b	smpsNoAttack, $01
0008D343 E101                       	smpsAlterNote       $01
0008D345 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D349 E107                       	smpsAlterNote       $07
0008D34B E701                       	dc.b	smpsNoAttack, $01
0008D34D E10A                       	smpsAlterNote       $0A
0008D34F E701                       	dc.b	smpsNoAttack, $01
0008D351 E10B                       	smpsAlterNote       $0B
0008D353 8001                       	dc.b	nRst, $01
0008D355 E108                       	smpsAlterNote       $08
0008D357 C101                       	dc.b	nE5, $01
0008D359 E109                       	smpsAlterNote       $09
0008D35B E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008D360 E10B                       	smpsAlterNote       $0B
0008D362 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008D36A E108                       	smpsAlterNote       $08
0008D36C CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008D370 E109                       	smpsAlterNote       $09
0008D372 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008D376 E108                       	smpsAlterNote       $08
0008D378 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008D37C E106                       	smpsAlterNote       $06
0008D37E C903                       	dc.b	nC6, $03
0008D380 E109                       	smpsAlterNote       $09
0008D382 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D386 E10C                       	smpsAlterNote       $0C
0008D388 C70D                       	dc.b	nBb5, $0D
0008D38A E109                       	smpsAlterNote       $09
0008D38C E701                       	dc.b	smpsNoAttack, $01
0008D38E E105                       	smpsAlterNote       $05
0008D390 E701                       	dc.b	smpsNoAttack, $01
0008D392 E109                       	smpsAlterNote       $09
0008D394 E701                       	dc.b	smpsNoAttack, $01
0008D396 E10F                       	smpsAlterNote       $0F
0008D398 E701                       	dc.b	smpsNoAttack, $01
0008D39A E110                       	smpsAlterNote       $10
0008D39C E701                       	dc.b	smpsNoAttack, $01
0008D39E E10C                       	smpsAlterNote       $0C
0008D3A0 E701                       	dc.b	smpsNoAttack, $01
0008D3A2 E106                       	smpsAlterNote       $06
0008D3A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3A8 E109                       	smpsAlterNote       $09
0008D3AA E701                       	dc.b	smpsNoAttack, $01
0008D3AC E10F                       	smpsAlterNote       $0F
0008D3AE E701                       	dc.b	smpsNoAttack, $01
0008D3B0 E110                       	smpsAlterNote       $10
0008D3B2 8001                       	dc.b	nRst, $01
0008D3B4 E10B                       	smpsAlterNote       $0B
0008D3B6 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008D3BC E105                       	smpsAlterNote       $05
0008D3BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3C2 E108                       	smpsAlterNote       $08
0008D3C4 E701                       	dc.b	smpsNoAttack, $01
0008D3C6 E10E                       	smpsAlterNote       $0E
0008D3C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3CC E108                       	smpsAlterNote       $08
0008D3CE E701                       	dc.b	smpsNoAttack, $01
0008D3D0 E105                       	smpsAlterNote       $05
0008D3D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3D6 E10B                       	smpsAlterNote       $0B
0008D3D8 E701                       	dc.b	smpsNoAttack, $01
0008D3DA E10F                       	smpsAlterNote       $0F
0008D3DC E701                       	dc.b	smpsNoAttack, $01
0008D3DE E10E                       	smpsAlterNote       $0E
0008D3E0 E701                       	dc.b	smpsNoAttack, $01
0008D3E2 E108                       	smpsAlterNote       $08
0008D3E4 E701                       	dc.b	smpsNoAttack, $01
0008D3E6 E104                       	smpsAlterNote       $04
0008D3E8 E701                       	dc.b	smpsNoAttack, $01
0008D3EA E108                       	smpsAlterNote       $08
0008D3EC E701                       	dc.b	smpsNoAttack, $01
0008D3EE E10B                       	smpsAlterNote       $0B
0008D3F0 E701                       	dc.b	smpsNoAttack, $01
0008D3F2 E10F                       	smpsAlterNote       $0F
0008D3F4 E701                       	dc.b	smpsNoAttack, $01
0008D3F6 E10B                       	smpsAlterNote       $0B
0008D3F8 E701                       	dc.b	smpsNoAttack, $01
0008D3FA E105                       	smpsAlterNote       $05
0008D3FC E701                       	dc.b	smpsNoAttack, $01
0008D3FE E104                       	smpsAlterNote       $04
0008D400 E701                       	dc.b	smpsNoAttack, $01
0008D402 E108                       	smpsAlterNote       $08
0008D404 E701                       	dc.b	smpsNoAttack, $01
0008D406 E10E                       	smpsAlterNote       $0E
0008D408 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D40C E10B                       	smpsAlterNote       $0B
0008D40E E701                       	dc.b	smpsNoAttack, $01
0008D410 E105                       	smpsAlterNote       $05
0008D412 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D416 E10B                       	smpsAlterNote       $0B
0008D418 E701                       	dc.b	smpsNoAttack, $01
0008D41A E10E                       	smpsAlterNote       $0E
0008D41C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D420 E108                       	smpsAlterNote       $08
0008D422 E701                       	dc.b	smpsNoAttack, $01
0008D424 E104                       	smpsAlterNote       $04
0008D426 E701                       	dc.b	smpsNoAttack, $01
0008D428 E105                       	smpsAlterNote       $05
0008D42A E701                       	dc.b	smpsNoAttack, $01
0008D42C E10B                       	smpsAlterNote       $0B
0008D42E E701                       	dc.b	smpsNoAttack, $01
0008D430 E10F                       	smpsAlterNote       $0F
0008D432 E701                       	dc.b	smpsNoAttack, $01
0008D434 E10B                       	smpsAlterNote       $0B
0008D436 E701                       	dc.b	smpsNoAttack, $01
0008D438 E108                       	smpsAlterNote       $08
0008D43A E701                       	dc.b	smpsNoAttack, $01
0008D43C E104                       	smpsAlterNote       $04
0008D43E E701                       	dc.b	smpsNoAttack, $01
0008D440 E108                       	smpsAlterNote       $08
0008D442 E701                       	dc.b	smpsNoAttack, $01
0008D444 E10E                       	smpsAlterNote       $0E
0008D446 E701                       	dc.b	smpsNoAttack, $01
0008D448 E10F                       	smpsAlterNote       $0F
0008D44A E701                       	dc.b	smpsNoAttack, $01
0008D44C E10B                       	smpsAlterNote       $0B
0008D44E E701                       	dc.b	smpsNoAttack, $01
0008D450 E105                       	smpsAlterNote       $05
0008D452 E701                       	dc.b	smpsNoAttack, $01
0008D454 E10B                       	smpsAlterNote       $0B
0008D456 C60E                       	dc.b	nA5, $0E
0008D458 E105                       	smpsAlterNote       $05
0008D45A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D45E E10B                       	smpsAlterNote       $0B
0008D460 E701                       	dc.b	smpsNoAttack, $01
0008D462 E10E                       	smpsAlterNote       $0E
0008D464 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D468 E108                       	smpsAlterNote       $08
0008D46A E701                       	dc.b	smpsNoAttack, $01
0008D46C E104                       	smpsAlterNote       $04
0008D46E E701                       	dc.b	smpsNoAttack, $01
0008D470 E105                       	smpsAlterNote       $05
0008D472 E701                       	dc.b	smpsNoAttack, $01
0008D474 E10B                       	smpsAlterNote       $0B
0008D476 E701                       	dc.b	smpsNoAttack, $01
0008D478 E10F                       	smpsAlterNote       $0F
0008D47A E701                       	dc.b	smpsNoAttack, $01
0008D47C E10B                       	smpsAlterNote       $0B
0008D47E E701                       	dc.b	smpsNoAttack, $01
0008D480 E108                       	smpsAlterNote       $08
0008D482 E701                       	dc.b	smpsNoAttack, $01
0008D484 E104                       	smpsAlterNote       $04
0008D486 E701                       	dc.b	smpsNoAttack, $01
0008D488 E108                       	smpsAlterNote       $08
0008D48A E701                       	dc.b	smpsNoAttack, $01
0008D48C E10E                       	smpsAlterNote       $0E
0008D48E E701                       	dc.b	smpsNoAttack, $01
0008D490 E10F                       	smpsAlterNote       $0F
0008D492 E701                       	dc.b	smpsNoAttack, $01
0008D494 E10B                       	smpsAlterNote       $0B
0008D496 E701                       	dc.b	smpsNoAttack, $01
0008D498 E105                       	smpsAlterNote       $05
0008D49A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D49E E108                       	smpsAlterNote       $08
0008D4A0 E701                       	dc.b	smpsNoAttack, $01
0008D4A2 E10E                       	smpsAlterNote       $0E
0008D4A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4A8 E108                       	smpsAlterNote       $08
0008D4AA E701                       	dc.b	smpsNoAttack, $01
0008D4AC E105                       	smpsAlterNote       $05
0008D4AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4B2 E10B                       	smpsAlterNote       $0B
0008D4B4 E701                       	dc.b	smpsNoAttack, $01
0008D4B6 E10F                       	smpsAlterNote       $0F
0008D4B8 E701                       	dc.b	smpsNoAttack, $01
0008D4BA E10E                       	smpsAlterNote       $0E
0008D4BC E701                       	dc.b	smpsNoAttack, $01
0008D4BE E108                       	smpsAlterNote       $08
0008D4C0 E701                       	dc.b	smpsNoAttack, $01
0008D4C2 E104                       	smpsAlterNote       $04
0008D4C4 E701                       	dc.b	smpsNoAttack, $01
0008D4C6 E108                       	smpsAlterNote       $08
0008D4C8 E701                       	dc.b	smpsNoAttack, $01
0008D4CA E10E                       	smpsAlterNote       $0E
0008D4CC E701                       	dc.b	smpsNoAttack, $01
0008D4CE E10F                       	smpsAlterNote       $0F
0008D4D0 E701                       	dc.b	smpsNoAttack, $01
0008D4D2 E10B                       	smpsAlterNote       $0B
0008D4D4 E701                       	dc.b	smpsNoAttack, $01
0008D4D6 E105                       	smpsAlterNote       $05
0008D4D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4DC E108                       	smpsAlterNote       $08
0008D4DE E701                       	dc.b	smpsNoAttack, $01
0008D4E0 E10E                       	smpsAlterNote       $0E
0008D4E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4E6 E108                       	smpsAlterNote       $08
0008D4E8 E701                       	dc.b	smpsNoAttack, $01
0008D4EA E105                       	smpsAlterNote       $05
0008D4EC E701                       	dc.b	smpsNoAttack, $01
0008D4F0 E10B                       	smpsAlterNote       $0B
0008D4F2 E6FD                       	smpsAlterVol        $FD
0008D4F4 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D4F8 E109                       	smpsAlterNote       $09
0008D4FA C404                       	dc.b	nG5, $04
0008D4FC E10B                       	smpsAlterNote       $0B
0008D4FE C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D502 E107                       	smpsAlterNote       $07
0008D504 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D50A E10B                       	smpsAlterNote       $0B
0008D50C C604                       	dc.b	nA5, $04
0008D50E E109                       	smpsAlterNote       $09
0008D510 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D514 E10B                       	smpsAlterNote       $0B
0008D516 C604                       	dc.b	nA5, $04
0008D518 E108                       	smpsAlterNote       $08
0008D51A C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0008D522 E106                       	smpsAlterNote       $06
0008D524 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D528 E10C                       	smpsAlterNote       $0C
0008D52A C704                       	dc.b	nBb5, $04
0008D52C E10B                       	smpsAlterNote       $0B
0008D52E C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D532 E109                       	smpsAlterNote       $09
0008D534 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D53E E10B                       	smpsAlterNote       $0B
0008D540 C60D                       	dc.b	nA5, $0D
0008D542 E108                       	smpsAlterNote       $08
0008D544 E701                       	dc.b	smpsNoAttack, $01
0008D546 E104                       	smpsAlterNote       $04
0008D548 E701                       	dc.b	smpsNoAttack, $01
0008D54A E108                       	smpsAlterNote       $08
0008D54C E701                       	dc.b	smpsNoAttack, $01
0008D54E E10E                       	smpsAlterNote       $0E
0008D550 E701                       	dc.b	smpsNoAttack, $01
0008D552 E10F                       	smpsAlterNote       $0F
0008D554 E701                       	dc.b	smpsNoAttack, $01
0008D556 E10B                       	smpsAlterNote       $0B
0008D558 E701                       	dc.b	smpsNoAttack, $01
0008D55A E105                       	smpsAlterNote       $05
0008D55C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D560 E108                       	smpsAlterNote       $08
0008D562 E701                       	dc.b	smpsNoAttack, $01
0008D564 E10E                       	smpsAlterNote       $0E
0008D566 E701                       	dc.b	smpsNoAttack, $01
0008D568 E10F                       	smpsAlterNote       $0F
0008D56A 8001                       	dc.b	nRst, $01
0008D56C E109                       	smpsAlterNote       $09
0008D56E C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D574 E108                       	smpsAlterNote       $08
0008D576 C10D                       	dc.b	nE5, $0D
0008D578 E102                       	smpsAlterNote       $02
0008D57A E701                       	dc.b	smpsNoAttack, $01
0008D57C E101                       	smpsAlterNote       $01
0008D57E E701                       	dc.b	smpsNoAttack, $01
0008D580 E105                       	smpsAlterNote       $05
0008D582 E701                       	dc.b	smpsNoAttack, $01
0008D584 E10B                       	smpsAlterNote       $0B
0008D586 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D58A E108                       	smpsAlterNote       $08
0008D58C E701                       	dc.b	smpsNoAttack, $01
0008D58E E102                       	smpsAlterNote       $02
0008D590 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D594 E108                       	smpsAlterNote       $08
0008D596 E701                       	dc.b	smpsNoAttack, $01
0008D598 E10B                       	smpsAlterNote       $0B
0008D59A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D59E E105                       	smpsAlterNote       $05
0008D5A0 E701                       	dc.b	smpsNoAttack, $01
0008D5A2 E101                       	smpsAlterNote       $01
0008D5A4 E701                       	dc.b	smpsNoAttack, $01
0008D5A6 E102                       	smpsAlterNote       $02
0008D5A8 E701                       	dc.b	smpsNoAttack, $01
0008D5AA E108                       	smpsAlterNote       $08
0008D5AC E701                       	dc.b	smpsNoAttack, $01
0008D5AE E10C                       	smpsAlterNote       $0C
0008D5B0 E701                       	dc.b	smpsNoAttack, $01
0008D5B2 E108                       	smpsAlterNote       $08
0008D5B4 E701                       	dc.b	smpsNoAttack, $01
0008D5B6 E105                       	smpsAlterNote       $05
0008D5B8 E701                       	dc.b	smpsNoAttack, $01
0008D5BA E101                       	smpsAlterNote       $01
0008D5BC E701                       	dc.b	smpsNoAttack, $01
0008D5BE E105                       	smpsAlterNote       $05
0008D5C0 E701                       	dc.b	smpsNoAttack, $01
0008D5C2 E10B                       	smpsAlterNote       $0B
0008D5C4 E701                       	dc.b	smpsNoAttack, $01
0008D5C6 E10C                       	smpsAlterNote       $0C
0008D5C8 E701                       	dc.b	smpsNoAttack, $01
0008D5CA E108                       	smpsAlterNote       $08
0008D5CC E701                       	dc.b	smpsNoAttack, $01
0008D5CE E102                       	smpsAlterNote       $02
0008D5D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5D4 E105                       	smpsAlterNote       $05
0008D5D6 E701                       	dc.b	smpsNoAttack, $01
0008D5D8 E10B                       	smpsAlterNote       $0B
0008D5DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5DE E105                       	smpsAlterNote       $05
0008D5E0 E701                       	dc.b	smpsNoAttack, $01
0008D5E2 E102                       	smpsAlterNote       $02
0008D5E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5E8 E108                       	smpsAlterNote       $08
0008D5EA E701                       	dc.b	smpsNoAttack, $01
0008D5EC E10C                       	smpsAlterNote       $0C
0008D5EE E701                       	dc.b	smpsNoAttack, $01
0008D5F0 E10B                       	smpsAlterNote       $0B
0008D5F2 E701                       	dc.b	smpsNoAttack, $01
0008D5F4 E105                       	smpsAlterNote       $05
0008D5F6 E701                       	dc.b	smpsNoAttack, $01
0008D5F8 E101                       	smpsAlterNote       $01
0008D5FA E701                       	dc.b	smpsNoAttack, $01
0008D5FC E105                       	smpsAlterNote       $05
0008D5FE E701                       	dc.b	smpsNoAttack, $01
0008D600 E108                       	smpsAlterNote       $08
0008D602 E701                       	dc.b	smpsNoAttack, $01
0008D604 E10C                       	smpsAlterNote       $0C
0008D606 E701                       	dc.b	smpsNoAttack, $01
0008D608 E108                       	smpsAlterNote       $08
0008D60A E701                       	dc.b	smpsNoAttack, $01
0008D60C E102                       	smpsAlterNote       $02
0008D60E E701                       	dc.b	smpsNoAttack, $01
0008D610 E101                       	smpsAlterNote       $01
0008D612 E701                       	dc.b	smpsNoAttack, $01
0008D614 E105                       	smpsAlterNote       $05
0008D616 E701                       	dc.b	smpsNoAttack, $01
0008D618 E10B                       	smpsAlterNote       $0B
0008D61A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D61E E108                       	smpsAlterNote       $08
0008D620 E701                       	dc.b	smpsNoAttack, $01
0008D622 E102                       	smpsAlterNote       $02
0008D624 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D628 E108                       	smpsAlterNote       $08
0008D62A E701                       	dc.b	smpsNoAttack, $01
0008D62C E10B                       	smpsAlterNote       $0B
0008D62E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D632 E105                       	smpsAlterNote       $05
0008D634 E701                       	dc.b	smpsNoAttack, $01
0008D636 E101                       	smpsAlterNote       $01
0008D638 E701                       	dc.b	smpsNoAttack, $01
0008D63A E102                       	smpsAlterNote       $02
0008D63C E701                       	dc.b	smpsNoAttack, $01
0008D63E E108                       	smpsAlterNote       $08
0008D640 E701                       	dc.b	smpsNoAttack, $01
0008D642 E10C                       	smpsAlterNote       $0C
0008D644 E701                       	dc.b	smpsNoAttack, $01
0008D646 E108                       	smpsAlterNote       $08
0008D648 E701                       	dc.b	smpsNoAttack, $01
0008D64A E105                       	smpsAlterNote       $05
0008D64C E701                       	dc.b	smpsNoAttack, $01
0008D64E E101                       	smpsAlterNote       $01
0008D650 E701                       	dc.b	smpsNoAttack, $01
0008D652 E105                       	smpsAlterNote       $05
0008D654 E701                       	dc.b	smpsNoAttack, $01
0008D656 E10B                       	smpsAlterNote       $0B
0008D658 E701                       	dc.b	smpsNoAttack, $01
0008D65A E10C                       	smpsAlterNote       $0C
0008D65C E701                       	dc.b	smpsNoAttack, $01
0008D65E E108                       	smpsAlterNote       $08
0008D660 E701                       	dc.b	smpsNoAttack, $01
0008D662 E102                       	smpsAlterNote       $02
0008D664 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D668 E105                       	smpsAlterNote       $05
0008D66A E701                       	dc.b	smpsNoAttack, $01
0008D66C E10B                       	smpsAlterNote       $0B
0008D66E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D672 E105                       	smpsAlterNote       $05
0008D674 E701                       	dc.b	smpsNoAttack, $01
0008D676 E101                       	smpsAlterNote       $01
0008D678 E701                       	dc.b	smpsNoAttack, $01
0008D67A E102                       	smpsAlterNote       $02
0008D67C E701                       	dc.b	smpsNoAttack, $01
0008D67E E108                       	smpsAlterNote       $08
0008D680 E701                       	dc.b	smpsNoAttack, $01
0008D682 E10C                       	smpsAlterNote       $0C
0008D684 E701                       	dc.b	smpsNoAttack, $01
0008D686 E108                       	smpsAlterNote       $08
0008D688 E701                       	dc.b	smpsNoAttack, $01
0008D68A E105                       	smpsAlterNote       $05
0008D68C E701                       	dc.b	smpsNoAttack, $01
0008D68E E101                       	smpsAlterNote       $01
0008D690 E701                       	dc.b	smpsNoAttack, $01
0008D692 E105                       	smpsAlterNote       $05
0008D694 E701                       	dc.b	smpsNoAttack, $01
0008D696 E10B                       	smpsAlterNote       $0B
0008D698 E701                       	dc.b	smpsNoAttack, $01
0008D69A E10C                       	smpsAlterNote       $0C
0008D69C E701                       	dc.b	smpsNoAttack, $01
0008D69E E108                       	smpsAlterNote       $08
0008D6A0 E701                       	dc.b	smpsNoAttack, $01
0008D6A2 E102                       	smpsAlterNote       $02
0008D6A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6A8 E105                       	smpsAlterNote       $05
0008D6AA E701                       	dc.b	smpsNoAttack, $01
0008D6AC E10B                       	smpsAlterNote       $0B
0008D6AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6B2 E105                       	smpsAlterNote       $05
0008D6B4 E701                       	dc.b	smpsNoAttack, $01
0008D6B6 E102                       	smpsAlterNote       $02
0008D6B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6BC E108                       	smpsAlterNote       $08
0008D6BE E701                       	dc.b	smpsNoAttack, $01
0008D6C0 E10C                       	smpsAlterNote       $0C
0008D6C2 E701                       	dc.b	smpsNoAttack, $01
0008D6C4 E10B                       	smpsAlterNote       $0B
0008D6C6 E701                       	dc.b	smpsNoAttack, $01
0008D6C8 E105                       	smpsAlterNote       $05
0008D6CA E701                       	dc.b	smpsNoAttack, $01
0008D6CC E101                       	smpsAlterNote       $01
0008D6CE E701                       	dc.b	smpsNoAttack, $01
0008D6D0 E105                       	smpsAlterNote       $05
0008D6D2 E701                       	dc.b	smpsNoAttack, $01
0008D6D4 E108                       	smpsAlterNote       $08
0008D6D6 E701                       	dc.b	smpsNoAttack, $01
0008D6D8 E10C                       	smpsAlterNote       $0C
0008D6DA E701                       	dc.b	smpsNoAttack, $01
0008D6DE E10B                       	smpsAlterNote       $0B
0008D6E0 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D6E4 E109                       	smpsAlterNote       $09
0008D6E6 C404                       	dc.b	nG5, $04
0008D6E8 E10B                       	smpsAlterNote       $0B
0008D6EA C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D6EE E107                       	smpsAlterNote       $07
0008D6F0 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D6F6 E10B                       	smpsAlterNote       $0B
0008D6F8 C604                       	dc.b	nA5, $04
0008D6FA E109                       	smpsAlterNote       $09
0008D6FC C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D700 E10B                       	smpsAlterNote       $0B
0008D702 C604                       	dc.b	nA5, $04
0008D704 E108                       	smpsAlterNote       $08
0008D706 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0008D70C E106                       	smpsAlterNote       $06
0008D70E C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D712 E10C                       	smpsAlterNote       $0C
0008D714 C704                       	dc.b	nBb5, $04
0008D716 E10B                       	smpsAlterNote       $0B
0008D718 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D71C E109                       	smpsAlterNote       $09
0008D71E C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D728 E10B                       	smpsAlterNote       $0B
0008D72A C60D                       	dc.b	nA5, $0D
0008D72C E108                       	smpsAlterNote       $08
0008D72E E701                       	dc.b	smpsNoAttack, $01
0008D730 E104                       	smpsAlterNote       $04
0008D732 E701                       	dc.b	smpsNoAttack, $01
0008D734 E108                       	smpsAlterNote       $08
0008D736 E701                       	dc.b	smpsNoAttack, $01
0008D738 E10B                       	smpsAlterNote       $0B
0008D73A E701                       	dc.b	smpsNoAttack, $01
0008D73C E10F                       	smpsAlterNote       $0F
0008D73E E701                       	dc.b	smpsNoAttack, $01
0008D740 E10B                       	smpsAlterNote       $0B
0008D742 E701                       	dc.b	smpsNoAttack, $01
0008D744 E105                       	smpsAlterNote       $05
0008D746 E701                       	dc.b	smpsNoAttack, $01
0008D748 E104                       	smpsAlterNote       $04
0008D74A E701                       	dc.b	smpsNoAttack, $01
0008D74C E108                       	smpsAlterNote       $08
0008D74E E701                       	dc.b	smpsNoAttack, $01
0008D750 E10E                       	smpsAlterNote       $0E
0008D752 E701                       	dc.b	smpsNoAttack, $01
0008D754 E10F                       	smpsAlterNote       $0F
0008D756 8001                       	dc.b	nRst, $01
0008D758 E109                       	smpsAlterNote       $09
0008D75A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D760 E108                       	smpsAlterNote       $08
0008D762 C10D                       	dc.b	nE5, $0D
0008D764 E105                       	smpsAlterNote       $05
0008D766 E701                       	dc.b	smpsNoAttack, $01
0008D768 E101                       	smpsAlterNote       $01
0008D76A E701                       	dc.b	smpsNoAttack, $01
0008D76C E105                       	smpsAlterNote       $05
0008D76E E701                       	dc.b	smpsNoAttack, $01
0008D770 E10B                       	smpsAlterNote       $0B
0008D772 E701                       	dc.b	smpsNoAttack, $01
0008D774 E10C                       	smpsAlterNote       $0C
0008D776 E701                       	dc.b	smpsNoAttack, $01
0008D778 E108                       	smpsAlterNote       $08
0008D77A E701                       	dc.b	smpsNoAttack, $01
0008D77C E102                       	smpsAlterNote       $02
0008D77E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D782 E105                       	smpsAlterNote       $05
0008D784 E701                       	dc.b	smpsNoAttack, $01
0008D786 E10B                       	smpsAlterNote       $0B
0008D788 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D78C E105                       	smpsAlterNote       $05
0008D78E E701                       	dc.b	smpsNoAttack, $01
0008D790 E102                       	smpsAlterNote       $02
0008D792 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D796 E108                       	smpsAlterNote       $08
0008D798 E701                       	dc.b	smpsNoAttack, $01
0008D79A E10C                       	smpsAlterNote       $0C
0008D79C E701                       	dc.b	smpsNoAttack, $01
0008D79E E10B                       	smpsAlterNote       $0B
0008D7A0 E701                       	dc.b	smpsNoAttack, $01
0008D7A2 E105                       	smpsAlterNote       $05
0008D7A4 E701                       	dc.b	smpsNoAttack, $01
0008D7A6 E101                       	smpsAlterNote       $01
0008D7A8 E701                       	dc.b	smpsNoAttack, $01
0008D7AA E105                       	smpsAlterNote       $05
0008D7AC E701                       	dc.b	smpsNoAttack, $01
0008D7AE E108                       	smpsAlterNote       $08
0008D7B0 E701                       	dc.b	smpsNoAttack, $01
0008D7B2 E10C                       	smpsAlterNote       $0C
0008D7B4 E701                       	dc.b	smpsNoAttack, $01
0008D7B6 E108                       	smpsAlterNote       $08
0008D7B8 E701                       	dc.b	smpsNoAttack, $01
0008D7BA E102                       	smpsAlterNote       $02
0008D7BC E701                       	dc.b	smpsNoAttack, $01
0008D7BE E101                       	smpsAlterNote       $01
0008D7C0 E701                       	dc.b	smpsNoAttack, $01
0008D7C2 E105                       	smpsAlterNote       $05
0008D7C4 E701                       	dc.b	smpsNoAttack, $01
0008D7C6 E10B                       	smpsAlterNote       $0B
0008D7C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7CC E108                       	smpsAlterNote       $08
0008D7CE E701                       	dc.b	smpsNoAttack, $01
0008D7D0 E102                       	smpsAlterNote       $02
0008D7D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7D6 E108                       	smpsAlterNote       $08
0008D7D8 E701                       	dc.b	smpsNoAttack, $01
0008D7DA E10B                       	smpsAlterNote       $0B
0008D7DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7E0 E105                       	smpsAlterNote       $05
0008D7E2 E701                       	dc.b	smpsNoAttack, $01
0008D7E4 E101                       	smpsAlterNote       $01
0008D7E6 E701                       	dc.b	smpsNoAttack, $01
0008D7E8 E102                       	smpsAlterNote       $02
0008D7EA E701                       	dc.b	smpsNoAttack, $01
0008D7EC E108                       	smpsAlterNote       $08
0008D7EE E701                       	dc.b	smpsNoAttack, $01
0008D7F0 E10C                       	smpsAlterNote       $0C
0008D7F2 E701                       	dc.b	smpsNoAttack, $01
0008D7F4 E108                       	smpsAlterNote       $08
0008D7F6 E701                       	dc.b	smpsNoAttack, $01
0008D7F8 E105                       	smpsAlterNote       $05
0008D7FA E701                       	dc.b	smpsNoAttack, $01
0008D7FC E101                       	smpsAlterNote       $01
0008D7FE E701                       	dc.b	smpsNoAttack, $01
0008D800 E105                       	smpsAlterNote       $05
0008D802 E701                       	dc.b	smpsNoAttack, $01
0008D804 E10B                       	smpsAlterNote       $0B
0008D806 E701                       	dc.b	smpsNoAttack, $01
0008D808 E10C                       	smpsAlterNote       $0C
0008D80A E701                       	dc.b	smpsNoAttack, $01
0008D80C E108                       	smpsAlterNote       $08
0008D80E E701                       	dc.b	smpsNoAttack, $01
0008D810 E102                       	smpsAlterNote       $02
0008D812 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D816 E108                       	smpsAlterNote       $08
0008D818 E701                       	dc.b	smpsNoAttack, $01
0008D81A E10B                       	smpsAlterNote       $0B
0008D81C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D820 E105                       	smpsAlterNote       $05
0008D822 E701                       	dc.b	smpsNoAttack, $01
0008D824 E101                       	smpsAlterNote       $01
0008D826 E701                       	dc.b	smpsNoAttack, $01
0008D828 E102                       	smpsAlterNote       $02
0008D82A E701                       	dc.b	smpsNoAttack, $01
0008D82C E108                       	smpsAlterNote       $08
0008D82E E701                       	dc.b	smpsNoAttack, $01
0008D830 E10C                       	smpsAlterNote       $0C
0008D832 E701                       	dc.b	smpsNoAttack, $01
0008D834 E108                       	smpsAlterNote       $08
0008D836 E701                       	dc.b	smpsNoAttack, $01
0008D838 E105                       	smpsAlterNote       $05
0008D83A E701                       	dc.b	smpsNoAttack, $01
0008D83C E101                       	smpsAlterNote       $01
0008D83E E701                       	dc.b	smpsNoAttack, $01
0008D840 E105                       	smpsAlterNote       $05
0008D842 E701                       	dc.b	smpsNoAttack, $01
0008D844 E10B                       	smpsAlterNote       $0B
0008D846 E701                       	dc.b	smpsNoAttack, $01
0008D848 E10C                       	smpsAlterNote       $0C
0008D84A E701                       	dc.b	smpsNoAttack, $01
0008D84C E108                       	smpsAlterNote       $08
0008D84E E701                       	dc.b	smpsNoAttack, $01
0008D850 E102                       	smpsAlterNote       $02
0008D852 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D856 E105                       	smpsAlterNote       $05
0008D858 E701                       	dc.b	smpsNoAttack, $01
0008D85A E10B                       	smpsAlterNote       $0B
0008D85C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D860 E105                       	smpsAlterNote       $05
0008D862 E701                       	dc.b	smpsNoAttack, $01
0008D864 E102                       	smpsAlterNote       $02
0008D866 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D86A E108                       	smpsAlterNote       $08
0008D86C E701                       	dc.b	smpsNoAttack, $01
0008D86E E10C                       	smpsAlterNote       $0C
0008D870 E701                       	dc.b	smpsNoAttack, $01
0008D872 E10B                       	smpsAlterNote       $0B
0008D874 E701                       	dc.b	smpsNoAttack, $01
0008D876 E105                       	smpsAlterNote       $05
0008D878 E701                       	dc.b	smpsNoAttack, $01
0008D87A E101                       	smpsAlterNote       $01
0008D87C E701                       	dc.b	smpsNoAttack, $01
0008D87E E105                       	smpsAlterNote       $05
0008D880 E701                       	dc.b	smpsNoAttack, $01
0008D882 E108                       	smpsAlterNote       $08
0008D884 E701                       	dc.b	smpsNoAttack, $01
0008D886 E10C                       	smpsAlterNote       $0C
0008D888 E701                       	dc.b	smpsNoAttack, $01
0008D88A E108                       	smpsAlterNote       $08
0008D88C E701                       	dc.b	smpsNoAttack, $01
0008D88E E102                       	smpsAlterNote       $02
0008D890 E701                       	dc.b	smpsNoAttack, $01
0008D892 E101                       	smpsAlterNote       $01
0008D894 E701                       	dc.b	smpsNoAttack, $01
0008D896 E105                       	smpsAlterNote       $05
0008D898 E701                       	dc.b	smpsNoAttack, $01
0008D89A E10B                       	smpsAlterNote       $0B
0008D89C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8A0 E108                       	smpsAlterNote       $08
0008D8A2 E701                       	dc.b	smpsNoAttack, $01
0008D8A4 E102                       	smpsAlterNote       $02
0008D8A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8AA E108                       	smpsAlterNote       $08
0008D8AC E701                       	dc.b	smpsNoAttack, $01
0008D8AE E10B                       	smpsAlterNote       $0B
0008D8B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8B4 E105                       	smpsAlterNote       $05
0008D8B6 E701                       	dc.b	smpsNoAttack, $01
0008D8B8 E102                       	smpsAlterNote       $02
0008D8BA 8001                       	dc.b	nRst, $01
0008D8BC E107                       	smpsAlterNote       $07
0008D8BE BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008D8C2 E108                       	smpsAlterNote       $08
0008D8C4 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
0008D8C8 E102                       	smpsAlterNote       $02
0008D8CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8CE E108                       	smpsAlterNote       $08
0008D8D0 E701                       	dc.b	smpsNoAttack, $01
0008D8D2 E10B                       	smpsAlterNote       $0B
0008D8D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8D8 E105                       	smpsAlterNote       $05
0008D8DA E701                       	dc.b	smpsNoAttack, $01
0008D8DC E101                       	smpsAlterNote       $01
0008D8DE E701                       	dc.b	smpsNoAttack, $01
0008D8E0 E102                       	smpsAlterNote       $02
0008D8E2 E701                       	dc.b	smpsNoAttack, $01
0008D8E4 E108                       	smpsAlterNote       $08
0008D8E6 E701                       	dc.b	smpsNoAttack, $01
0008D8E8 E10C                       	smpsAlterNote       $0C
0008D8EA E701                       	dc.b	smpsNoAttack, $01
0008D8EC E108                       	smpsAlterNote       $08
0008D8EE E701                       	dc.b	smpsNoAttack, $01
0008D8F0 E105                       	smpsAlterNote       $05
0008D8F2 E701                       	dc.b	smpsNoAttack, $01
0008D8F4 E101                       	smpsAlterNote       $01
0008D8F6 E701                       	dc.b	smpsNoAttack, $01
0008D8F8 E105                       	smpsAlterNote       $05
0008D8FA E701                       	dc.b	smpsNoAttack, $01
0008D8FC E10B                       	smpsAlterNote       $0B
0008D8FE E701                       	dc.b	smpsNoAttack, $01
0008D900 E10C                       	smpsAlterNote       $0C
0008D902 E701                       	dc.b	smpsNoAttack, $01
0008D904 E108                       	smpsAlterNote       $08
0008D906 E701                       	dc.b	smpsNoAttack, $01
0008D908 E102                       	smpsAlterNote       $02
0008D90A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D90E E105                       	smpsAlterNote       $05
0008D910 E701                       	dc.b	smpsNoAttack, $01
0008D912 E10B                       	smpsAlterNote       $0B
0008D914 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D918 E105                       	smpsAlterNote       $05
0008D91A E701                       	dc.b	smpsNoAttack, $01
0008D91C E102                       	smpsAlterNote       $02
0008D91E E701                       	dc.b	smpsNoAttack, $01
0008D920 E109                       	smpsAlterNote       $09
0008D922 C40A C207                  	dc.b	nG5, $0A, nF5, $07
0008D926 E108                       	smpsAlterNote       $08
0008D928 C10D                       	dc.b	nE5, $0D
0008D92A E105                       	smpsAlterNote       $05
0008D92C E701                       	dc.b	smpsNoAttack, $01
0008D92E E101                       	smpsAlterNote       $01
0008D930 E701                       	dc.b	smpsNoAttack, $01
0008D932 E102                       	smpsAlterNote       $02
0008D934 E701                       	dc.b	smpsNoAttack, $01
0008D936 E108                       	smpsAlterNote       $08
0008D938 E701                       	dc.b	smpsNoAttack, $01
0008D93A E10C                       	smpsAlterNote       $0C
0008D93C E701                       	dc.b	smpsNoAttack, $01
0008D93E E108                       	smpsAlterNote       $08
0008D940 E701                       	dc.b	smpsNoAttack, $01
0008D942 E105                       	smpsAlterNote       $05
0008D944 E701                       	dc.b	smpsNoAttack, $01
0008D946 E101                       	smpsAlterNote       $01
0008D948 E701                       	dc.b	smpsNoAttack, $01
0008D94A E105                       	smpsAlterNote       $05
0008D94C E701                       	dc.b	smpsNoAttack, $01
0008D94E E10B                       	smpsAlterNote       $0B
0008D950 E701                       	dc.b	smpsNoAttack, $01
0008D952 E10C                       	smpsAlterNote       $0C
0008D954 E701                       	dc.b	smpsNoAttack, $01
0008D956 E108                       	smpsAlterNote       $08
0008D958 E701                       	dc.b	smpsNoAttack, $01
0008D95A E102                       	smpsAlterNote       $02
0008D95C E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0008D964 E10B                       	smpsAlterNote       $0B
0008D966 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008D96A E10C                       	smpsAlterNote       $0C
0008D96C BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008D970 E10B                       	smpsAlterNote       $0B
0008D972 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0008D978 E107                       	smpsAlterNote       $07
0008D97A BF03                       	dc.b	nD5, $03
0008D97C E108                       	smpsAlterNote       $08
0008D97E C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D982 E109                       	smpsAlterNote       $09
0008D984 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008D98A E10B                       	smpsAlterNote       $0B
0008D98C C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D990 E107                       	smpsAlterNote       $07
0008D992 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D996 E106                       	smpsAlterNote       $06
0008D998 C90D                       	dc.b	nC6, $0D
0008D99A E103                       	smpsAlterNote       $03
0008D99C E701                       	dc.b	smpsNoAttack, $01
0008D99E E1FF                       	smpsAlterNote       $FF
0008D9A0 E701                       	dc.b	smpsNoAttack, $01
0008D9A2 E103                       	smpsAlterNote       $03
0008D9A4 E701                       	dc.b	smpsNoAttack, $01
0008D9A6 E109                       	smpsAlterNote       $09
0008D9A8 E701                       	dc.b	smpsNoAttack, $01
0008D9AA E10A                       	smpsAlterNote       $0A
0008D9AC E701                       	dc.b	smpsNoAttack, $01
0008D9AE E106                       	smpsAlterNote       $06
0008D9B0 E701                       	dc.b	smpsNoAttack, $01
0008D9B2 E100                       	smpsAlterNote       $00
0008D9B4 E701                       	dc.b	smpsNoAttack, $01
0008D9B6 E10C                       	smpsAlterNote       $0C
0008D9B8 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008D9BC E10B                       	smpsAlterNote       $0B
0008D9BE C603                       	dc.b	nA5, $03
0008D9C0 E109                       	smpsAlterNote       $09
0008D9C2 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D9C6 E10B                       	smpsAlterNote       $0B
0008D9C8 C60D                       	dc.b	nA5, $0D
0008D9CA E105                       	smpsAlterNote       $05
0008D9CC E701                       	dc.b	smpsNoAttack, $01
0008D9CE E104                       	smpsAlterNote       $04
0008D9D0 E701                       	dc.b	smpsNoAttack, $01
0008D9D2 E108                       	smpsAlterNote       $08
0008D9D4 E701                       	dc.b	smpsNoAttack, $01
0008D9D6 E10E                       	smpsAlterNote       $0E
0008D9D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9DC E10B                       	smpsAlterNote       $0B
0008D9DE E701                       	dc.b	smpsNoAttack, $01
0008D9E0 E105                       	smpsAlterNote       $05
0008D9E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9E6 E10B                       	smpsAlterNote       $0B
0008D9E8 E701                       	dc.b	smpsNoAttack, $01
0008D9EA E10E                       	smpsAlterNote       $0E
0008D9EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9F0 E108                       	smpsAlterNote       $08
0008D9F2 E701                       	dc.b	smpsNoAttack, $01
0008D9F4 E104                       	smpsAlterNote       $04
0008D9F6 E701                       	dc.b	smpsNoAttack, $01
0008D9F8 E105                       	smpsAlterNote       $05
0008D9FA E701                       	dc.b	smpsNoAttack, $01
0008D9FC E10B                       	smpsAlterNote       $0B
0008D9FE E701                       	dc.b	smpsNoAttack, $01
0008DA00 E10F                       	smpsAlterNote       $0F
0008DA02 E701                       	dc.b	smpsNoAttack, $01
0008DA04 E10B                       	smpsAlterNote       $0B
0008DA06 E701                       	dc.b	smpsNoAttack, $01
0008DA08 E108                       	smpsAlterNote       $08
0008DA0A E701                       	dc.b	smpsNoAttack, $01
0008DA0C E104                       	smpsAlterNote       $04
0008DA0E E701                       	dc.b	smpsNoAttack, $01
0008DA10 E108                       	smpsAlterNote       $08
0008DA12 E701                       	dc.b	smpsNoAttack, $01
0008DA14 E10E                       	smpsAlterNote       $0E
0008DA16 E701                       	dc.b	smpsNoAttack, $01
0008DA18 E10F                       	smpsAlterNote       $0F
0008DA1A E701                       	dc.b	smpsNoAttack, $01
0008DA1C E10B                       	smpsAlterNote       $0B
0008DA1E E701                       	dc.b	smpsNoAttack, $01
0008DA20 E105                       	smpsAlterNote       $05
0008DA22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA26 E108                       	smpsAlterNote       $08
0008DA28 E701                       	dc.b	smpsNoAttack, $01
0008DA2A E10E                       	smpsAlterNote       $0E
0008DA2C E701                       	dc.b	smpsNoAttack, $01
0008DA2E E10F                       	smpsAlterNote       $0F
0008DA30 800F                       	dc.b	nRst, $0F
0008DA32 E107                       	smpsAlterNote       $07
0008DA34 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008DA38 E108                       	smpsAlterNote       $08
0008DA3A C103                       	dc.b	nE5, $03
0008DA3C E109                       	smpsAlterNote       $09
0008DA3E C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008DA44 E10B                       	smpsAlterNote       $0B
0008DA46 C607                       	dc.b	nA5, $07
0008DA48 E107                       	smpsAlterNote       $07
0008DA4A BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008DA4E E106                       	smpsAlterNote       $06
0008DA50 C90D                       	dc.b	nC6, $0D
0008DA52 E107                       	smpsAlterNote       $07
0008DA54 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008DA58 E10C                       	smpsAlterNote       $0C
0008DA5A C704                       	dc.b	nBb5, $04
0008DA5C E10B                       	smpsAlterNote       $0B
0008DA5E C604 8001                  	dc.b	nA5, $04, nRst, $01
0008DA62 E109                       	smpsAlterNote       $09
0008DA64 C404                       	dc.b	nG5, $04
0008DA66 E10B                       	smpsAlterNote       $0B
0008DA68 C60D                       	dc.b	nA5, $0D
0008DA6A E108                       	smpsAlterNote       $08
0008DA6C E701                       	dc.b	smpsNoAttack, $01
0008DA6E E105                       	smpsAlterNote       $05
0008DA70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA74 E10B                       	smpsAlterNote       $0B
0008DA76 E701                       	dc.b	smpsNoAttack, $01
0008DA78 E10F                       	smpsAlterNote       $0F
0008DA7A E701                       	dc.b	smpsNoAttack, $01
0008DA7C E10E                       	smpsAlterNote       $0E
0008DA7E E701                       	dc.b	smpsNoAttack, $01
0008DA80 E108                       	smpsAlterNote       $08
0008DA82 E701                       	dc.b	smpsNoAttack, $01
0008DA84 E104                       	smpsAlterNote       $04
0008DA86 E701                       	dc.b	smpsNoAttack, $01
0008DA88 E108                       	smpsAlterNote       $08
0008DA8A E701                       	dc.b	smpsNoAttack, $01
0008DA8C E10B                       	smpsAlterNote       $0B
0008DA8E E701                       	dc.b	smpsNoAttack, $01
0008DA90 E10F                       	smpsAlterNote       $0F
0008DA92 E701                       	dc.b	smpsNoAttack, $01
0008DA94 E10B                       	smpsAlterNote       $0B
0008DA96 E701                       	dc.b	smpsNoAttack, $01
0008DA98 E105                       	smpsAlterNote       $05
0008DA9A E701                       	dc.b	smpsNoAttack, $01
0008DA9C E104                       	smpsAlterNote       $04
0008DA9E E701                       	dc.b	smpsNoAttack, $01
0008DAA0 E108                       	smpsAlterNote       $08
0008DAA2 E701                       	dc.b	smpsNoAttack, $01
0008DAA4 E10E                       	smpsAlterNote       $0E
0008DAA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAAA E10B                       	smpsAlterNote       $0B
0008DAAC E701                       	dc.b	smpsNoAttack, $01
0008DAAE E105                       	smpsAlterNote       $05
0008DAB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAB4 E10B                       	smpsAlterNote       $0B
0008DAB6 E701                       	dc.b	smpsNoAttack, $01
0008DAB8 E10E                       	smpsAlterNote       $0E
0008DABA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DABE E108                       	smpsAlterNote       $08
0008DAC0 E701                       	dc.b	smpsNoAttack, $01
0008DAC2 E105                       	smpsAlterNote       $05
0008DAC4 8001                       	dc.b	nRst, $01
0008DAC6 E109                       	smpsAlterNote       $09
0008DAC8 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008DACC E10B                       	smpsAlterNote       $0B
0008DACE C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008DAD6 E109                       	smpsAlterNote       $09
0008DAD8 C404                       	dc.b	nG5, $04
0008DADA E10B                       	smpsAlterNote       $0B
0008DADC C604 8001                  	dc.b	nA5, $04, nRst, $01
0008DAE0 E107                       	smpsAlterNote       $07
0008DAE2 BF0D                       	dc.b	nD5, $0D
0008DAE4 E101                       	smpsAlterNote       $01
0008DAE6 E701                       	dc.b	smpsNoAttack, $01
0008DAE8 E100                       	smpsAlterNote       $00
0008DAEA E701                       	dc.b	smpsNoAttack, $01
0008DAEC E104                       	smpsAlterNote       $04
0008DAEE E701                       	dc.b	smpsNoAttack, $01
0008DAF0 E10A                       	smpsAlterNote       $0A
0008DAF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAF6 E107                       	smpsAlterNote       $07
0008DAF8 E701                       	dc.b	smpsNoAttack, $01
0008DAFA E101                       	smpsAlterNote       $01
0008DAFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB00 E107                       	smpsAlterNote       $07
0008DB02 E701                       	dc.b	smpsNoAttack, $01
0008DB04 E10A                       	smpsAlterNote       $0A
0008DB06 E701                       	dc.b	smpsNoAttack, $01
0008DB08 E10B                       	smpsAlterNote       $0B
0008DB0A 8001                       	dc.b	nRst, $01
0008DB0C E108                       	smpsAlterNote       $08
0008DB0E 8001                       	dc.b	nRst, $01
0008DB10 E109                       	smpsAlterNote       $09
0008DB12 8001 C401                  	dc.b	nRst, $01, nG5, $01
0008DB16 E10B                       	smpsAlterNote       $0B
0008DB18 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008DB20 E108                       	smpsAlterNote       $08
0008DB22 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008DB26 E109                       	smpsAlterNote       $09
0008DB28 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008DB2C E108                       	smpsAlterNote       $08
0008DB2E CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008DB32 E106                       	smpsAlterNote       $06
0008DB34 C903                       	dc.b	nC6, $03
0008DB36 E109                       	smpsAlterNote       $09
0008DB38 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008DB3C E10C                       	smpsAlterNote       $0C
0008DB3E C70D                       	dc.b	nBb5, $0D
0008DB40 E109                       	smpsAlterNote       $09
0008DB42 E701                       	dc.b	smpsNoAttack, $01
0008DB44 E105                       	smpsAlterNote       $05
0008DB46 E701                       	dc.b	smpsNoAttack, $01
0008DB48 E109                       	smpsAlterNote       $09
0008DB4A E701                       	dc.b	smpsNoAttack, $01
0008DB4C E10F                       	smpsAlterNote       $0F
0008DB4E E701                       	dc.b	smpsNoAttack, $01
0008DB50 E110                       	smpsAlterNote       $10
0008DB52 E701                       	dc.b	smpsNoAttack, $01
0008DB54 E10C                       	smpsAlterNote       $0C
0008DB56 E701                       	dc.b	smpsNoAttack, $01
0008DB58 E106                       	smpsAlterNote       $06
0008DB5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB5E E109                       	smpsAlterNote       $09
0008DB60 E701                       	dc.b	smpsNoAttack, $01
0008DB62 E10F                       	smpsAlterNote       $0F
0008DB64 E701                       	dc.b	smpsNoAttack, $01
0008DB66 E110                       	smpsAlterNote       $10
0008DB68 8001                       	dc.b	nRst, $01
0008DB6A E10B                       	smpsAlterNote       $0B
0008DB6C C606 8001                  	dc.b	nA5, $06, nRst, $01
0008DB70 E109                       	smpsAlterNote       $09
0008DB72 C40D                       	dc.b	nG5, $0D
0008DB74 E103                       	smpsAlterNote       $03
0008DB76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB7A E106                       	smpsAlterNote       $06
0008DB7C E701                       	dc.b	smpsNoAttack, $01
0008DB7E E10C                       	smpsAlterNote       $0C
0008DB80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB84 E106                       	smpsAlterNote       $06
0008DB86 E701                       	dc.b	smpsNoAttack, $01
0008DB88 E103                       	smpsAlterNote       $03
0008DB8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB8E E109                       	smpsAlterNote       $09
0008DB90 E701                       	dc.b	smpsNoAttack, $01
0008DB92 E10D                       	smpsAlterNote       $0D
0008DB94 E701                       	dc.b	smpsNoAttack, $01
0008DB96 E10C                       	smpsAlterNote       $0C
0008DB98 E701                       	dc.b	smpsNoAttack, $01
0008DB9A E106                       	smpsAlterNote       $06
0008DB9C E701                       	dc.b	smpsNoAttack, $01
0008DB9E E102                       	smpsAlterNote       $02
0008DBA0 E701                       	dc.b	smpsNoAttack, $01
0008DBA2 E103                       	smpsAlterNote       $03
0008DBA4 8001                       	dc.b	nRst, $01
0008DBA6 E10B                       	smpsAlterNote       $0B
0008DBA8 C60D                       	dc.b	nA5, $0D
0008DBAA E108                       	smpsAlterNote       $08
0008DBAC E701                       	dc.b	smpsNoAttack, $01
0008DBAE E104                       	smpsAlterNote       $04
0008DBB0 E701                       	dc.b	smpsNoAttack, $01
0008DBB2 E108                       	smpsAlterNote       $08
0008DBB4 E701                       	dc.b	smpsNoAttack, $01
0008DBB6 E10B                       	smpsAlterNote       $0B
0008DBB8 E701                       	dc.b	smpsNoAttack, $01
0008DBBA E10F                       	smpsAlterNote       $0F
0008DBBC E701                       	dc.b	smpsNoAttack, $01
0008DBBE E10B                       	smpsAlterNote       $0B
0008DBC0 E701                       	dc.b	smpsNoAttack, $01
0008DBC2 E105                       	smpsAlterNote       $05
0008DBC4 E701                       	dc.b	smpsNoAttack, $01
0008DBC6 E104                       	smpsAlterNote       $04
0008DBC8 E701                       	dc.b	smpsNoAttack, $01
0008DBCA E108                       	smpsAlterNote       $08
0008DBCC E701                       	dc.b	smpsNoAttack, $01
0008DBCE E10E                       	smpsAlterNote       $0E
0008DBD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBD4 E10B                       	smpsAlterNote       $0B
0008DBD6 E701                       	dc.b	smpsNoAttack, $01
0008DBD8 E105                       	smpsAlterNote       $05
0008DBDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBDE E10C                       	smpsAlterNote       $0C
0008DBE0 C70E                       	dc.b	nBb5, $0E
0008DBE2 E106                       	smpsAlterNote       $06
0008DBE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBE8 E10C                       	smpsAlterNote       $0C
0008DBEA E701                       	dc.b	smpsNoAttack, $01
0008DBEC E10F                       	smpsAlterNote       $0F
0008DBEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBF2 E109                       	smpsAlterNote       $09
0008DBF4 E701                       	dc.b	smpsNoAttack, $01
0008DBF6 E105                       	smpsAlterNote       $05
0008DBF8 E701                       	dc.b	smpsNoAttack, $01
0008DBFA E106                       	smpsAlterNote       $06
0008DBFC E701                       	dc.b	smpsNoAttack, $01
0008DBFE E10C                       	smpsAlterNote       $0C
0008DC00 E701                       	dc.b	smpsNoAttack, $01
0008DC02 E110                       	smpsAlterNote       $10
0008DC04 E701                       	dc.b	smpsNoAttack, $01
0008DC06 E10C                       	smpsAlterNote       $0C
0008DC08 E701                       	dc.b	smpsNoAttack, $01
0008DC0A E109                       	smpsAlterNote       $09
0008DC0C E701                       	dc.b	smpsNoAttack, $01
0008DC0E E105                       	smpsAlterNote       $05
0008DC10 E701                       	dc.b	smpsNoAttack, $01
0008DC12 E106                       	smpsAlterNote       $06
0008DC14 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
0008DC18 E107                       	smpsAlterNote       $07
0008DC1A CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0008DC1F E108                       	smpsAlterNote       $08
0008DC21 CD0D                       	dc.b	nE6, $0D
0008DC23 E107                       	smpsAlterNote       $07
0008DC25 CB0D                       	dc.b	nD6, $0D
0008DC27 E104                       	smpsAlterNote       $04
0008DC29 E701                       	dc.b	smpsNoAttack, $01
0008DC2B E100                       	smpsAlterNote       $00
0008DC2D E701                       	dc.b	smpsNoAttack, $01
0008DC2F E101                       	smpsAlterNote       $01
0008DC31 E701                       	dc.b	smpsNoAttack, $01
0008DC33 E107                       	smpsAlterNote       $07
0008DC35 E701                       	dc.b	smpsNoAttack, $01
0008DC37 E10B                       	smpsAlterNote       $0B
0008DC39 E701                       	dc.b	smpsNoAttack, $01
0008DC3B E107                       	smpsAlterNote       $07
0008DC3D E701                       	dc.b	smpsNoAttack, $01
0008DC3F E104                       	smpsAlterNote       $04
0008DC41 E701                       	dc.b	smpsNoAttack, $01
0008DC43 E100                       	smpsAlterNote       $00
0008DC45 E701                       	dc.b	smpsNoAttack, $01
0008DC47 E104                       	smpsAlterNote       $04
0008DC49 E701                       	dc.b	smpsNoAttack, $01
0008DC4B E10A                       	smpsAlterNote       $0A
0008DC4D E701                       	dc.b	smpsNoAttack, $01
0008DC4F E10B                       	smpsAlterNote       $0B
0008DC51 E701                       	dc.b	smpsNoAttack, $01
0008DC53 E108                       	smpsAlterNote       $08
0008DC55 CC0D                       	dc.b	nEb6, $0D
0008DC57 E105                       	smpsAlterNote       $05
0008DC59 E701                       	dc.b	smpsNoAttack, $01
0008DC5B E101                       	smpsAlterNote       $01
0008DC5D E701                       	dc.b	smpsNoAttack, $01
0008DC5F E102                       	smpsAlterNote       $02
0008DC61 E701                       	dc.b	smpsNoAttack, $01
0008DC63 E108                       	smpsAlterNote       $08
0008DC65 E701                       	dc.b	smpsNoAttack, $01
0008DC67 E106                       	smpsAlterNote       $06
0008DC69 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
0008DC75 8001                       	dc.b	nRst, $01
0008DC77 E107                       	smpsAlterNote       $07
0008DC79 CB0D                       	dc.b	nD6, $0D
0008DC7B E104                       	smpsAlterNote       $04
0008DC7D E701                       	dc.b	smpsNoAttack, $01
0008DC7F E100                       	smpsAlterNote       $00
0008DC81 E701                       	dc.b	smpsNoAttack, $01
0008DC83 E104                       	smpsAlterNote       $04
0008DC85 E701                       	dc.b	smpsNoAttack, $01
0008DC87 E107                       	smpsAlterNote       $07
0008DC89 E701                       	dc.b	smpsNoAttack, $01
0008DC8B E10B                       	smpsAlterNote       $0B
0008DC8D E701                       	dc.b	smpsNoAttack, $01
0008DC8F E107                       	smpsAlterNote       $07
0008DC91 E701                       	dc.b	smpsNoAttack, $01
0008DC93 E101                       	smpsAlterNote       $01
0008DC95 E701                       	dc.b	smpsNoAttack, $01
0008DC97 E100                       	smpsAlterNote       $00
0008DC99 E701                       	dc.b	smpsNoAttack, $01
0008DC9B E104                       	smpsAlterNote       $04
0008DC9D E701                       	dc.b	smpsNoAttack, $01
0008DC9F E10A                       	smpsAlterNote       $0A
0008DCA1 E701                       	dc.b	smpsNoAttack, $01
0008DCA3 E10B                       	smpsAlterNote       $0B
0008DCA5 8001                       	dc.b	nRst, $01
0008DCA7 E109                       	smpsAlterNote       $09
0008DCA9 CE0A                       	dc.b	nF6, $0A
0008DCAB E108                       	smpsAlterNote       $08
0008DCAD CC07                       	dc.b	nEb6, $07
0008DCAF E106                       	smpsAlterNote       $06
0008DCB1 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0008DCBD E107                       	smpsAlterNote       $07
0008DCBF CB0D                       	dc.b	nD6, $0D
0008DCC1 E101                       	smpsAlterNote       $01
0008DCC3 E701                       	dc.b	smpsNoAttack, $01
0008DCC5 E100                       	smpsAlterNote       $00
0008DCC7 E701                       	dc.b	smpsNoAttack, $01
0008DCC9 E104                       	smpsAlterNote       $04
0008DCCB E701                       	dc.b	smpsNoAttack, $01
0008DCCD E10A                       	smpsAlterNote       $0A
0008DCCF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCD3 E107                       	smpsAlterNote       $07
0008DCD5 E701                       	dc.b	smpsNoAttack, $01
0008DCD7 E101                       	smpsAlterNote       $01
0008DCD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCDD E107                       	smpsAlterNote       $07
0008DCDF E701                       	dc.b	smpsNoAttack, $01
0008DCE1 E10A                       	smpsAlterNote       $0A
0008DCE3 E701                       	dc.b	smpsNoAttack, $01
0008DCE5 E10B                       	smpsAlterNote       $0B
0008DCE7 8001                       	dc.b	nRst, $01
0008DCE9 E108                       	smpsAlterNote       $08
0008DCEB CC0D                       	dc.b	nEb6, $0D
0008DCED E102                       	smpsAlterNote       $02
0008DCEF E701                       	dc.b	smpsNoAttack, $01
0008DCF1 E101                       	smpsAlterNote       $01
0008DCF3 E701                       	dc.b	smpsNoAttack, $01
0008DCF5 E105                       	smpsAlterNote       $05
0008DCF7 E701                       	dc.b	smpsNoAttack, $01
0008DCF9 E108                       	smpsAlterNote       $08
0008DCFB 8001                       	dc.b	nRst, $01
0008DCFD E106                       	smpsAlterNote       $06
0008DCFF C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008DD0B 8001                       	dc.b	nRst, $01
0008DD0D E107                       	smpsAlterNote       $07
0008DD0F CB0D                       	dc.b	nD6, $0D
0008DD11 E101                       	smpsAlterNote       $01
0008DD13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD17 E104                       	smpsAlterNote       $04
0008DD19 E701                       	dc.b	smpsNoAttack, $01
0008DD1B E10A                       	smpsAlterNote       $0A
0008DD1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD21 E104                       	smpsAlterNote       $04
0008DD23 E701                       	dc.b	smpsNoAttack, $01
0008DD25 E101                       	smpsAlterNote       $01
0008DD27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD2B E107                       	smpsAlterNote       $07
0008DD2D E701                       	dc.b	smpsNoAttack, $01
0008DD2F E10B                       	smpsAlterNote       $0B
0008DD31 E701                       	dc.b	smpsNoAttack, $01
0008DD33 E10A                       	smpsAlterNote       $0A
0008DD35 E701                       	dc.b	smpsNoAttack, $01
0008DD37 E104                       	smpsAlterNote       $04
0008DD39 E701                       	dc.b	smpsNoAttack, $01
0008DD3B E100                       	smpsAlterNote       $00
0008DD3D E701                       	dc.b	smpsNoAttack, $01
0008DD3F E101                       	smpsAlterNote       $01
0008DD41 801C                       	dc.b	nRst, $1C
0008DD45 E107                       	smpsAlterNote       $07
0008DD47 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008DD4B E603                       	smpsAlterVol        $03
0008DD4D F6F1 AD                    	smpsJump            music84_Jump03
0008DD50                            
0008DD50                            ; FM3 Data
0008DD50                            music84_FM3:
0008DD50 E0C0                       	smpsPan             panCenter, $00
0008DD54 E109                       	smpsAlterNote       $09
0008DD56 C203 8007                  	dc.b	nF5, $03, nRst, $07
0008DD5A E108                       	smpsAlterNote       $08
0008DD5C C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008DD60 E10B                       	smpsAlterNote       $0B
0008DD62 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008DD68 E040                       	smpsPan             panRight, $00
0008DD6A E110                       	smpsAlterNote       $10
0008DD6C E6F9                       	smpsAlterVol        $F9
0008DD6E C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008DD72 E10F                       	smpsAlterNote       $0F
0008DD74 C603                       	dc.b	nA5, $03
0008DD76 E10D                       	smpsAlterNote       $0D
0008DD78 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008DD7E E10C                       	smpsAlterNote       $0C
0008DD80 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008DD84 E10A                       	smpsAlterNote       $0A
0008DD86 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008DD8A E10F                       	smpsAlterNote       $0F
0008DD8C BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008DD90 E0C0                       	smpsPan             panCenter, $00
0008DD94 E109                       	smpsAlterNote       $09
0008DD96 E609                       	smpsAlterVol        $09
0008DD98 B603                       	dc.b	nF4, $03
0008DD9A                            
0008DD9A                            music84_Jump02:
0008DD9A E70A                       	dc.b	smpsNoAttack, $0A
0008DD9C E103                       	smpsAlterNote       $03
0008DD9E E701                       	dc.b	smpsNoAttack, $01
0008DDA0 E102                       	smpsAlterNote       $02
0008DDA2 E701                       	dc.b	smpsNoAttack, $01
0008DDA4 E106                       	smpsAlterNote       $06
0008DDA6 E701                       	dc.b	smpsNoAttack, $01
0008DDA8 E10C                       	smpsAlterNote       $0C
0008DDAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDAE E109                       	smpsAlterNote       $09
0008DDB0 E701                       	dc.b	smpsNoAttack, $01
0008DDB2 E103                       	smpsAlterNote       $03
0008DDB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDB8 E109                       	smpsAlterNote       $09
0008DDBA E701                       	dc.b	smpsNoAttack, $01
0008DDBC E10C                       	smpsAlterNote       $0C
0008DDBE E701                       	dc.b	smpsNoAttack, $01
0008DDC0 E10D                       	smpsAlterNote       $0D
0008DDC2 8001                       	dc.b	nRst, $01
0008DDC4 E109                       	smpsAlterNote       $09
0008DDC6 B80D                       	dc.b	nG4, $0D
0008DDC8 E103                       	smpsAlterNote       $03
0008DDCA E701                       	dc.b	smpsNoAttack, $01
0008DDCC E102                       	smpsAlterNote       $02
0008DDCE E701                       	dc.b	smpsNoAttack, $01
0008DDD0 E106                       	smpsAlterNote       $06
0008DDD2 E701                       	dc.b	smpsNoAttack, $01
0008DDD4 E10C                       	smpsAlterNote       $0C
0008DDD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDDA E109                       	smpsAlterNote       $09
0008DDDC E701                       	dc.b	smpsNoAttack, $01
0008DDDE E103                       	smpsAlterNote       $03
0008DDE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDE4 E109                       	smpsAlterNote       $09
0008DDE6 E701                       	dc.b	smpsNoAttack, $01
0008DDE8 E10C                       	smpsAlterNote       $0C
0008DDEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDEE E106                       	smpsAlterNote       $06
0008DDF0 E701                       	dc.b	smpsNoAttack, $01
0008DDF2 E102                       	smpsAlterNote       $02
0008DDF4 E701                       	dc.b	smpsNoAttack, $01
0008DDF6 E103                       	smpsAlterNote       $03
0008DDF8 E701                       	dc.b	smpsNoAttack, $01
0008DDFA E109                       	smpsAlterNote       $09
0008DDFC E701                       	dc.b	smpsNoAttack, $01
0008DDFE E10D                       	smpsAlterNote       $0D
0008DE00 E701                       	dc.b	smpsNoAttack, $01
0008DE02 E109                       	smpsAlterNote       $09
0008DE04 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008DE08 E10B                       	smpsAlterNote       $0B
0008DE0A BA0D                       	dc.b	nA4, $0D
0008DE0C E105                       	smpsAlterNote       $05
0008DE0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE12 E108                       	smpsAlterNote       $08
0008DE14 E701                       	dc.b	smpsNoAttack, $01
0008DE16 E10E                       	smpsAlterNote       $0E
0008DE18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE1C E108                       	smpsAlterNote       $08
0008DE1E E701                       	dc.b	smpsNoAttack, $01
0008DE20 E104                       	smpsAlterNote       $04
0008DE22 E701                       	dc.b	smpsNoAttack, $01
0008DE24 E105                       	smpsAlterNote       $05
0008DE26 E701                       	dc.b	smpsNoAttack, $01
0008DE28 E10B                       	smpsAlterNote       $0B
0008DE2A E701                       	dc.b	smpsNoAttack, $01
0008DE2C E10F                       	smpsAlterNote       $0F
0008DE2E E701                       	dc.b	smpsNoAttack, $01
0008DE30 E10B                       	smpsAlterNote       $0B
0008DE32 E701                       	dc.b	smpsNoAttack, $01
0008DE34 E108                       	smpsAlterNote       $08
0008DE36 E701                       	dc.b	smpsNoAttack, $01
0008DE38 E104                       	smpsAlterNote       $04
0008DE3A E701                       	dc.b	smpsNoAttack, $01
0008DE3C E108                       	smpsAlterNote       $08
0008DE3E E701                       	dc.b	smpsNoAttack, $01
0008DE40 E10E                       	smpsAlterNote       $0E
0008DE42 E701                       	dc.b	smpsNoAttack, $01
0008DE44 E10F                       	smpsAlterNote       $0F
0008DE46 E701                       	dc.b	smpsNoAttack, $01
0008DE48 E10B                       	smpsAlterNote       $0B
0008DE4A E701                       	dc.b	smpsNoAttack, $01
0008DE4C E105                       	smpsAlterNote       $05
0008DE4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE52 E108                       	smpsAlterNote       $08
0008DE54 E701                       	dc.b	smpsNoAttack, $01
0008DE56 E10E                       	smpsAlterNote       $0E
0008DE58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE5C E108                       	smpsAlterNote       $08
0008DE5E E701                       	dc.b	smpsNoAttack, $01
0008DE60 E105                       	smpsAlterNote       $05
0008DE62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE66 E10B                       	smpsAlterNote       $0B
0008DE68 E701                       	dc.b	smpsNoAttack, $01
0008DE6A E10F                       	smpsAlterNote       $0F
0008DE6C E701                       	dc.b	smpsNoAttack, $01
0008DE6E E10E                       	smpsAlterNote       $0E
0008DE70 E701                       	dc.b	smpsNoAttack, $01
0008DE72 E108                       	smpsAlterNote       $08
0008DE74 E701                       	dc.b	smpsNoAttack, $01
0008DE76 E104                       	smpsAlterNote       $04
0008DE78 E701                       	dc.b	smpsNoAttack, $01
0008DE7A E105                       	smpsAlterNote       $05
0008DE7C 8001                       	dc.b	nRst, $01
0008DE7E E108                       	smpsAlterNote       $08
0008DE80 B50A                       	dc.b	nE4, $0A
0008DE82 E109                       	smpsAlterNote       $09
0008DE84 B60D                       	dc.b	nF4, $0D
0008DE86 E106                       	smpsAlterNote       $06
0008DE88 E701                       	dc.b	smpsNoAttack, $01
0008DE8A E103                       	smpsAlterNote       $03
0008DE8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE90 E109                       	smpsAlterNote       $09
0008DE92 E701                       	dc.b	smpsNoAttack, $01
0008DE94 E10D                       	smpsAlterNote       $0D
0008DE96 E701                       	dc.b	smpsNoAttack, $01
0008DE98 E10C                       	smpsAlterNote       $0C
0008DE9A E701                       	dc.b	smpsNoAttack, $01
0008DE9C E106                       	smpsAlterNote       $06
0008DE9E E701                       	dc.b	smpsNoAttack, $01
0008DEA0 E102                       	smpsAlterNote       $02
0008DEA2 E701                       	dc.b	smpsNoAttack, $01
0008DEA4 E106                       	smpsAlterNote       $06
0008DEA6 E701                       	dc.b	smpsNoAttack, $01
0008DEA8 E109                       	smpsAlterNote       $09
0008DEAA E701                       	dc.b	smpsNoAttack, $01
0008DEAC E10D                       	smpsAlterNote       $0D
0008DEAE E701                       	dc.b	smpsNoAttack, $01
0008DEB0 E109                       	smpsAlterNote       $09
0008DEB2 B80D                       	dc.b	nG4, $0D
0008DEB4 E106                       	smpsAlterNote       $06
0008DEB6 E701                       	dc.b	smpsNoAttack, $01
0008DEB8 E103                       	smpsAlterNote       $03
0008DEBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEBE E109                       	smpsAlterNote       $09
0008DEC0 E701                       	dc.b	smpsNoAttack, $01
0008DEC2 E10D                       	smpsAlterNote       $0D
0008DEC4 E701                       	dc.b	smpsNoAttack, $01
0008DEC6 E10C                       	smpsAlterNote       $0C
0008DEC8 E701                       	dc.b	smpsNoAttack, $01
0008DECA E106                       	smpsAlterNote       $06
0008DECC E701                       	dc.b	smpsNoAttack, $01
0008DECE E102                       	smpsAlterNote       $02
0008DED0 E701                       	dc.b	smpsNoAttack, $01
0008DED2 E106                       	smpsAlterNote       $06
0008DED4 E701                       	dc.b	smpsNoAttack, $01
0008DED6 E109                       	smpsAlterNote       $09
0008DED8 E701                       	dc.b	smpsNoAttack, $01
0008DEDA E10D                       	smpsAlterNote       $0D
0008DEDC E701                       	dc.b	smpsNoAttack, $01
0008DEDE E109                       	smpsAlterNote       $09
0008DEE0 E701                       	dc.b	smpsNoAttack, $01
0008DEE2 E103                       	smpsAlterNote       $03
0008DEE4 E701                       	dc.b	smpsNoAttack, $01
0008DEE6 E102                       	smpsAlterNote       $02
0008DEE8 E701                       	dc.b	smpsNoAttack, $01
0008DEEA E106                       	smpsAlterNote       $06
0008DEEC E701                       	dc.b	smpsNoAttack, $01
0008DEEE E10C                       	smpsAlterNote       $0C
0008DEF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEF4 E109                       	smpsAlterNote       $09
0008DEF6 E701                       	dc.b	smpsNoAttack, $01
0008DEF8 E10B                       	smpsAlterNote       $0B
0008DEFA BA0D                       	dc.b	nA4, $0D
0008DEFC E108                       	smpsAlterNote       $08
0008DEFE E701                       	dc.b	smpsNoAttack, $01
0008DF00 E104                       	smpsAlterNote       $04
0008DF02 E701                       	dc.b	smpsNoAttack, $01
0008DF04 E108                       	smpsAlterNote       $08
0008DF06 E701                       	dc.b	smpsNoAttack, $01
0008DF08 E10B                       	smpsAlterNote       $0B
0008DF0A E701                       	dc.b	smpsNoAttack, $01
0008DF0C E10F                       	smpsAlterNote       $0F
0008DF0E E701                       	dc.b	smpsNoAttack, $01
0008DF10 E10B                       	smpsAlterNote       $0B
0008DF12 E701                       	dc.b	smpsNoAttack, $01
0008DF14 E105                       	smpsAlterNote       $05
0008DF16 E701                       	dc.b	smpsNoAttack, $01
0008DF18 E104                       	smpsAlterNote       $04
0008DF1A E701                       	dc.b	smpsNoAttack, $01
0008DF1C E108                       	smpsAlterNote       $08
0008DF1E E701                       	dc.b	smpsNoAttack, $01
0008DF20 E10E                       	smpsAlterNote       $0E
0008DF22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF26 E10B                       	smpsAlterNote       $0B
0008DF28 E701                       	dc.b	smpsNoAttack, $01
0008DF2A E105                       	smpsAlterNote       $05
0008DF2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF30 E10B                       	smpsAlterNote       $0B
0008DF32 E701                       	dc.b	smpsNoAttack, $01
0008DF34 E10E                       	smpsAlterNote       $0E
0008DF36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF3A E108                       	smpsAlterNote       $08
0008DF3C E701                       	dc.b	smpsNoAttack, $01
0008DF3E E104                       	smpsAlterNote       $04
0008DF40 E701                       	dc.b	smpsNoAttack, $01
0008DF42 E105                       	smpsAlterNote       $05
0008DF44 E701                       	dc.b	smpsNoAttack, $01
0008DF46 E10B                       	smpsAlterNote       $0B
0008DF48 E701                       	dc.b	smpsNoAttack, $01
0008DF4A E10F                       	smpsAlterNote       $0F
0008DF4C E701                       	dc.b	smpsNoAttack, $01
0008DF4E E10B                       	smpsAlterNote       $0B
0008DF50 E701                       	dc.b	smpsNoAttack, $01
0008DF52 E108                       	smpsAlterNote       $08
0008DF54 E701                       	dc.b	smpsNoAttack, $01
0008DF56 E105                       	smpsAlterNote       $05
0008DF58 8001                       	dc.b	nRst, $01
0008DF5A E109                       	smpsAlterNote       $09
0008DF5C B609 8001                  	dc.b	nF4, $09, nRst, $01
0008DF60 E108                       	smpsAlterNote       $08
0008DF62 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008DF66 E107                       	smpsAlterNote       $07
0008DF68 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008DF6C E108                       	smpsAlterNote       $08
0008DF6E B502 8001                  	dc.b	nE4, $02, nRst, $01
0008DF72 E109                       	smpsAlterNote       $09
0008DF74 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008DF7A E10B                       	smpsAlterNote       $0B
0008DF7C BA0D                       	dc.b	nA4, $0D
0008DF7E E108                       	smpsAlterNote       $08
0008DF80 E701                       	dc.b	smpsNoAttack, $01
0008DF82 E104                       	smpsAlterNote       $04
0008DF84 E701                       	dc.b	smpsNoAttack, $01
0008DF86 E108                       	smpsAlterNote       $08
0008DF88 E701                       	dc.b	smpsNoAttack, $01
0008DF8A E10E                       	smpsAlterNote       $0E
0008DF8C E701                       	dc.b	smpsNoAttack, $01
0008DF8E E10F                       	smpsAlterNote       $0F
0008DF90 E701                       	dc.b	smpsNoAttack, $01
0008DF92 E10B                       	smpsAlterNote       $0B
0008DF94 E701                       	dc.b	smpsNoAttack, $01
0008DF96 E105                       	smpsAlterNote       $05
0008DF98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF9C E108                       	smpsAlterNote       $08
0008DF9E E701                       	dc.b	smpsNoAttack, $01
0008DFA0 E10E                       	smpsAlterNote       $0E
0008DFA2 E701                       	dc.b	smpsNoAttack, $01
0008DFA4 E10F                       	smpsAlterNote       $0F
0008DFA6 8001                       	dc.b	nRst, $01
0008DFA8 E109                       	smpsAlterNote       $09
0008DFAA C20D                       	dc.b	nF5, $0D
0008DFAC E103                       	smpsAlterNote       $03
0008DFAE E701                       	dc.b	smpsNoAttack, $01
0008DFB0 E102                       	smpsAlterNote       $02
0008DFB2 E701                       	dc.b	smpsNoAttack, $01
0008DFB4 E106                       	smpsAlterNote       $06
0008DFB6 E701                       	dc.b	smpsNoAttack, $01
0008DFB8 E10C                       	smpsAlterNote       $0C
0008DFBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFBE E109                       	smpsAlterNote       $09
0008DFC0 E701                       	dc.b	smpsNoAttack, $01
0008DFC2 E103                       	smpsAlterNote       $03
0008DFC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFC8 E109                       	smpsAlterNote       $09
0008DFCA E701                       	dc.b	smpsNoAttack, $01
0008DFCC E10C                       	smpsAlterNote       $0C
0008DFCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFD2 E106                       	smpsAlterNote       $06
0008DFD4 E701                       	dc.b	smpsNoAttack, $01
0008DFD6 E102                       	smpsAlterNote       $02
0008DFD8 E701                       	dc.b	smpsNoAttack, $01
0008DFDA E103                       	smpsAlterNote       $03
0008DFDC E701                       	dc.b	smpsNoAttack, $01
0008DFDE E109                       	smpsAlterNote       $09
0008DFE0 E701                       	dc.b	smpsNoAttack, $01
0008DFE2 E10D                       	smpsAlterNote       $0D
0008DFE4 E701                       	dc.b	smpsNoAttack, $01
0008DFE6 E109                       	smpsAlterNote       $09
0008DFE8 E701                       	dc.b	smpsNoAttack, $01
0008DFEA E106                       	smpsAlterNote       $06
0008DFEC E701                       	dc.b	smpsNoAttack, $01
0008DFEE E102                       	smpsAlterNote       $02
0008DFF0 E701                       	dc.b	smpsNoAttack, $01
0008DFF2 E106                       	smpsAlterNote       $06
0008DFF4 E701                       	dc.b	smpsNoAttack, $01
0008DFF6 E10C                       	smpsAlterNote       $0C
0008DFF8 E701                       	dc.b	smpsNoAttack, $01
0008DFFA E10D                       	smpsAlterNote       $0D
0008DFFC E701                       	dc.b	smpsNoAttack, $01
0008DFFE E109                       	smpsAlterNote       $09
0008E000 E701                       	dc.b	smpsNoAttack, $01
0008E002 E103                       	smpsAlterNote       $03
0008E004 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E008 E106                       	smpsAlterNote       $06
0008E00A E701                       	dc.b	smpsNoAttack, $01
0008E00C E10C                       	smpsAlterNote       $0C
0008E00E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E012 E106                       	smpsAlterNote       $06
0008E014 E701                       	dc.b	smpsNoAttack, $01
0008E016 E103                       	smpsAlterNote       $03
0008E018 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E01C E109                       	smpsAlterNote       $09
0008E01E E701                       	dc.b	smpsNoAttack, $01
0008E020 E10D                       	smpsAlterNote       $0D
0008E022 E701                       	dc.b	smpsNoAttack, $01
0008E024 E10C                       	smpsAlterNote       $0C
0008E026 E701                       	dc.b	smpsNoAttack, $01
0008E028 E106                       	smpsAlterNote       $06
0008E02A E701                       	dc.b	smpsNoAttack, $01
0008E02C E102                       	smpsAlterNote       $02
0008E02E E701                       	dc.b	smpsNoAttack, $01
0008E030 E106                       	smpsAlterNote       $06
0008E032 E701                       	dc.b	smpsNoAttack, $01
0008E034 E109                       	smpsAlterNote       $09
0008E036 E701                       	dc.b	smpsNoAttack, $01
0008E038 E10D                       	smpsAlterNote       $0D
0008E03A E701                       	dc.b	smpsNoAttack, $01
0008E03C E109                       	smpsAlterNote       $09
0008E03E E701                       	dc.b	smpsNoAttack, $01
0008E040 E103                       	smpsAlterNote       $03
0008E042 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E046 E109                       	smpsAlterNote       $09
0008E048 C206                       	dc.b	nF5, $06
0008E04A E108                       	smpsAlterNote       $08
0008E04C C10E                       	dc.b	nE5, $0E
0008E04E E102                       	smpsAlterNote       $02
0008E050 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E054 E108                       	smpsAlterNote       $08
0008E056 E701                       	dc.b	smpsNoAttack, $01
0008E058 E10B                       	smpsAlterNote       $0B
0008E05A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E05E E105                       	smpsAlterNote       $05
0008E060 E701                       	dc.b	smpsNoAttack, $01
0008E062 E101                       	smpsAlterNote       $01
0008E064 E701                       	dc.b	smpsNoAttack, $01
0008E066 E102                       	smpsAlterNote       $02
0008E068 E701                       	dc.b	smpsNoAttack, $01
0008E06A E108                       	smpsAlterNote       $08
0008E06C E701                       	dc.b	smpsNoAttack, $01
0008E06E E10C                       	smpsAlterNote       $0C
0008E070 E701                       	dc.b	smpsNoAttack, $01
0008E072 E107                       	smpsAlterNote       $07
0008E074 BF0E                       	dc.b	nD5, $0E
0008E076 E101                       	smpsAlterNote       $01
0008E078 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E07C E107                       	smpsAlterNote       $07
0008E07E E701                       	dc.b	smpsNoAttack, $01
0008E080 E10A                       	smpsAlterNote       $0A
0008E082 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E086 E104                       	smpsAlterNote       $04
0008E088 E701                       	dc.b	smpsNoAttack, $01
0008E08A E100                       	smpsAlterNote       $00
0008E08C E701                       	dc.b	smpsNoAttack, $01
0008E08E E104                       	smpsAlterNote       $04
0008E090 E701                       	dc.b	smpsNoAttack, $01
0008E092 E107                       	smpsAlterNote       $07
0008E094 E701                       	dc.b	smpsNoAttack, $01
0008E096 E10B                       	smpsAlterNote       $0B
0008E098 E701                       	dc.b	smpsNoAttack, $01
0008E09A E107                       	smpsAlterNote       $07
0008E09C E701                       	dc.b	smpsNoAttack, $01
0008E09E E101                       	smpsAlterNote       $01
0008E0A0 E701                       	dc.b	smpsNoAttack, $01
0008E0A2 E100                       	smpsAlterNote       $00
0008E0A4 E701                       	dc.b	smpsNoAttack, $01
0008E0A6 E104                       	smpsAlterNote       $04
0008E0A8 E701                       	dc.b	smpsNoAttack, $01
0008E0AA E10A                       	smpsAlterNote       $0A
0008E0AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0B0 E107                       	smpsAlterNote       $07
0008E0B2 E701                       	dc.b	smpsNoAttack, $01
0008E0B4 E101                       	smpsAlterNote       $01
0008E0B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0BA E107                       	smpsAlterNote       $07
0008E0BC E701                       	dc.b	smpsNoAttack, $01
0008E0BE E10A                       	smpsAlterNote       $0A
0008E0C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0C4 E104                       	smpsAlterNote       $04
0008E0C6 E701                       	dc.b	smpsNoAttack, $01
0008E0C8 E100                       	smpsAlterNote       $00
0008E0CA E701                       	dc.b	smpsNoAttack, $01
0008E0CC E101                       	smpsAlterNote       $01
0008E0CE E701                       	dc.b	smpsNoAttack, $01
0008E0D0 E107                       	smpsAlterNote       $07
0008E0D2 E701                       	dc.b	smpsNoAttack, $01
0008E0D4 E10B                       	smpsAlterNote       $0B
0008E0D6 E701                       	dc.b	smpsNoAttack, $01
0008E0D8 E107                       	smpsAlterNote       $07
0008E0DA E701                       	dc.b	smpsNoAttack, $01
0008E0DC E104                       	smpsAlterNote       $04
0008E0DE E701                       	dc.b	smpsNoAttack, $01
0008E0E0 E100                       	smpsAlterNote       $00
0008E0E2 E701                       	dc.b	smpsNoAttack, $01
0008E0E4 E104                       	smpsAlterNote       $04
0008E0E6 E701                       	dc.b	smpsNoAttack, $01
0008E0E8 E10A                       	smpsAlterNote       $0A
0008E0EA E701                       	dc.b	smpsNoAttack, $01
0008E0EC E10B                       	smpsAlterNote       $0B
0008E0EE E701                       	dc.b	smpsNoAttack, $01
0008E0F0 E107                       	smpsAlterNote       $07
0008E0F2 E701                       	dc.b	smpsNoAttack, $01
0008E0F4 E101                       	smpsAlterNote       $01
0008E0F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0FA E104                       	smpsAlterNote       $04
0008E0FC E701                       	dc.b	smpsNoAttack, $01
0008E0FE E10A                       	smpsAlterNote       $0A
0008E100 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E104 E104                       	smpsAlterNote       $04
0008E106 E701                       	dc.b	smpsNoAttack, $01
0008E108 E101                       	smpsAlterNote       $01
0008E10A E701                       	dc.b	smpsNoAttack, $01
0008E10E E107                       	smpsAlterNote       $07
0008E110 E6FF                       	smpsAlterVol        $FF
0008E112 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008E11E 8004                       	dc.b	nRst, $04
0008E122 E109                       	smpsAlterNote       $09
0008E124 E602                       	smpsAlterVol        $02
0008E126 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0008E12C E108                       	smpsAlterNote       $08
0008E12E B502 8001                  	dc.b	nE4, $02, nRst, $01
0008E132 E109                       	smpsAlterNote       $09
0008E134 B60D                       	dc.b	nF4, $0D
0008E136 E106                       	smpsAlterNote       $06
0008E138 E701                       	dc.b	smpsNoAttack, $01
0008E13A E102                       	smpsAlterNote       $02
0008E13C E701                       	dc.b	smpsNoAttack, $01
0008E13E E106                       	smpsAlterNote       $06
0008E140 E701                       	dc.b	smpsNoAttack, $01
0008E142 E109                       	smpsAlterNote       $09
0008E144 E701                       	dc.b	smpsNoAttack, $01
0008E146 E10D                       	smpsAlterNote       $0D
0008E148 E701                       	dc.b	smpsNoAttack, $01
0008E14A E109                       	smpsAlterNote       $09
0008E14C E701                       	dc.b	smpsNoAttack, $01
0008E14E E103                       	smpsAlterNote       $03
0008E150 E701                       	dc.b	smpsNoAttack, $01
0008E152 E102                       	smpsAlterNote       $02
0008E154 E701                       	dc.b	smpsNoAttack, $01
0008E156 E106                       	smpsAlterNote       $06
0008E158 E701                       	dc.b	smpsNoAttack, $01
0008E15A E10C                       	smpsAlterNote       $0C
0008E15C E701                       	dc.b	smpsNoAttack, $01
0008E15E E10D                       	smpsAlterNote       $0D
0008E160 8001                       	dc.b	nRst, $01
0008E162 E109                       	smpsAlterNote       $09
0008E164 B80D                       	dc.b	nG4, $0D
0008E166 E106                       	smpsAlterNote       $06
0008E168 E701                       	dc.b	smpsNoAttack, $01
0008E16A E102                       	smpsAlterNote       $02
0008E16C E701                       	dc.b	smpsNoAttack, $01
0008E16E E106                       	smpsAlterNote       $06
0008E170 E701                       	dc.b	smpsNoAttack, $01
0008E172 E10C                       	smpsAlterNote       $0C
0008E174 E701                       	dc.b	smpsNoAttack, $01
0008E176 E10D                       	smpsAlterNote       $0D
0008E178 E701                       	dc.b	smpsNoAttack, $01
0008E17A E109                       	smpsAlterNote       $09
0008E17C E701                       	dc.b	smpsNoAttack, $01
0008E17E E103                       	smpsAlterNote       $03
0008E180 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E184 E106                       	smpsAlterNote       $06
0008E186 E701                       	dc.b	smpsNoAttack, $01
0008E188 E10C                       	smpsAlterNote       $0C
0008E18A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E18E E106                       	smpsAlterNote       $06
0008E190 E701                       	dc.b	smpsNoAttack, $01
0008E192 E103                       	smpsAlterNote       $03
0008E194 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E198 E109                       	smpsAlterNote       $09
0008E19A E701                       	dc.b	smpsNoAttack, $01
0008E19C E10D                       	smpsAlterNote       $0D
0008E19E E701                       	dc.b	smpsNoAttack, $01
0008E1A0 E10C                       	smpsAlterNote       $0C
0008E1A2 E701                       	dc.b	smpsNoAttack, $01
0008E1A4 E109                       	smpsAlterNote       $09
0008E1A6 8001                       	dc.b	nRst, $01
0008E1A8 E10B                       	smpsAlterNote       $0B
0008E1AA BA03                       	dc.b	nA4, $03
0008E1AC E10C                       	smpsAlterNote       $0C
0008E1AE BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008E1B2 E10B                       	smpsAlterNote       $0B
0008E1B4 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008E1BA E10C                       	smpsAlterNote       $0C
0008E1BC C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008E1C0 E10B                       	smpsAlterNote       $0B
0008E1C2 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008E1C8 E10C                       	smpsAlterNote       $0C
0008E1CA D303                       	dc.b	nBb6, $03
0008E1CC E10B                       	smpsAlterNote       $0B
0008E1CE D20D                       	dc.b	nA6, $0D
0008E1D0 E108                       	smpsAlterNote       $08
0008E1D2 E701                       	dc.b	smpsNoAttack, $01
0008E1D4 E104                       	smpsAlterNote       $04
0008E1D6 E701                       	dc.b	smpsNoAttack, $01
0008E1D8 E105                       	smpsAlterNote       $05
0008E1DA E701                       	dc.b	smpsNoAttack, $01
0008E1DC E10B                       	smpsAlterNote       $0B
0008E1DE E701                       	dc.b	smpsNoAttack, $01
0008E1E0 E10F                       	smpsAlterNote       $0F
0008E1E2 E701                       	dc.b	smpsNoAttack, $01
0008E1E4 E10B                       	smpsAlterNote       $0B
0008E1E6 E701                       	dc.b	smpsNoAttack, $01
0008E1E8 E108                       	smpsAlterNote       $08
0008E1EA E701                       	dc.b	smpsNoAttack, $01
0008E1EC E104                       	smpsAlterNote       $04
0008E1EE E701                       	dc.b	smpsNoAttack, $01
0008E1F0 E108                       	smpsAlterNote       $08
0008E1F2 E701                       	dc.b	smpsNoAttack, $01
0008E1F4 E10E                       	smpsAlterNote       $0E
0008E1F6 E701                       	dc.b	smpsNoAttack, $01
0008E1F8 E10F                       	smpsAlterNote       $0F
0008E1FA E701                       	dc.b	smpsNoAttack, $01
0008E1FC E10B                       	smpsAlterNote       $0B
0008E1FE E701                       	dc.b	smpsNoAttack, $01
0008E200 E105                       	smpsAlterNote       $05
0008E202 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008E208 E109                       	smpsAlterNote       $09
0008E20A CE07                       	dc.b	nF6, $07
0008E20C E108                       	smpsAlterNote       $08
0008E20E CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008E212 E109                       	smpsAlterNote       $09
0008E214 CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008E218 E108                       	smpsAlterNote       $08
0008E21A CC0D                       	dc.b	nEb6, $0D
0008E21C E102                       	smpsAlterNote       $02
0008E21E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E222 E108                       	smpsAlterNote       $08
0008E224 E701                       	dc.b	smpsNoAttack, $01
0008E226 E10B                       	smpsAlterNote       $0B
0008E228 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E22C E105                       	smpsAlterNote       $05
0008E22E E701                       	dc.b	smpsNoAttack, $01
0008E230 E101                       	smpsAlterNote       $01
0008E232 E701                       	dc.b	smpsNoAttack, $01
0008E234 E102                       	smpsAlterNote       $02
0008E236 E701                       	dc.b	smpsNoAttack, $01
0008E238 E108                       	smpsAlterNote       $08
0008E23A E701                       	dc.b	smpsNoAttack, $01
0008E23C E10C                       	smpsAlterNote       $0C
0008E23E E701                       	dc.b	smpsNoAttack, $01
0008E240 E108                       	smpsAlterNote       $08
0008E242 E701                       	dc.b	smpsNoAttack, $01
0008E244 E105                       	smpsAlterNote       $05
0008E246 E701                       	dc.b	smpsNoAttack, $01
0008E248 E101                       	smpsAlterNote       $01
0008E24A E701                       	dc.b	smpsNoAttack, $01
0008E24C E105                       	smpsAlterNote       $05
0008E24E E701                       	dc.b	smpsNoAttack, $01
0008E250 E10B                       	smpsAlterNote       $0B
0008E252 E701                       	dc.b	smpsNoAttack, $01
0008E254 E10C                       	smpsAlterNote       $0C
0008E256 E701                       	dc.b	smpsNoAttack, $01
0008E258 E108                       	smpsAlterNote       $08
0008E25A E701                       	dc.b	smpsNoAttack, $01
0008E25C E107                       	smpsAlterNote       $07
0008E25E CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008E268 E10B                       	smpsAlterNote       $0B
0008E26A C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008E274 E109                       	smpsAlterNote       $09
0008E276 C203                       	dc.b	nF5, $03
0008E278 E108                       	smpsAlterNote       $08
0008E27A C103 8001                  	dc.b	nE5, $03, nRst, $01
0008E27E E109                       	smpsAlterNote       $09
0008E280 C20D                       	dc.b	nF5, $0D
0008E282 E108                       	smpsAlterNote       $08
0008E284 C10E                       	dc.b	nE5, $0E
0008E286 E107                       	smpsAlterNote       $07
0008E288 BF0D                       	dc.b	nD5, $0D
0008E28A E104                       	smpsAlterNote       $04
0008E28C E701                       	dc.b	smpsNoAttack, $01
0008E28E E100                       	smpsAlterNote       $00
0008E290 E701                       	dc.b	smpsNoAttack, $01
0008E292 E104                       	smpsAlterNote       $04
0008E294 E701                       	dc.b	smpsNoAttack, $01
0008E296 E107                       	smpsAlterNote       $07
0008E298 E701                       	dc.b	smpsNoAttack, $01
0008E29A E10B                       	smpsAlterNote       $0B
0008E29C E701                       	dc.b	smpsNoAttack, $01
0008E29E E107                       	smpsAlterNote       $07
0008E2A0 E701                       	dc.b	smpsNoAttack, $01
0008E2A2 E101                       	smpsAlterNote       $01
0008E2A4 E701                       	dc.b	smpsNoAttack, $01
0008E2A6 E100                       	smpsAlterNote       $00
0008E2A8 E701                       	dc.b	smpsNoAttack, $01
0008E2AA E104                       	smpsAlterNote       $04
0008E2AC E701                       	dc.b	smpsNoAttack, $01
0008E2AE E10A                       	smpsAlterNote       $0A
0008E2B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2B4 E107                       	smpsAlterNote       $07
0008E2B6 E701                       	dc.b	smpsNoAttack, $01
0008E2B8 E101                       	smpsAlterNote       $01
0008E2BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2BE E107                       	smpsAlterNote       $07
0008E2C0 E701                       	dc.b	smpsNoAttack, $01
0008E2C2 E10A                       	smpsAlterNote       $0A
0008E2C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2C8 E104                       	smpsAlterNote       $04
0008E2CA E701                       	dc.b	smpsNoAttack, $01
0008E2CC E100                       	smpsAlterNote       $00
0008E2CE E701                       	dc.b	smpsNoAttack, $01
0008E2D0 E101                       	smpsAlterNote       $01
0008E2D2 E701                       	dc.b	smpsNoAttack, $01
0008E2D4 E107                       	smpsAlterNote       $07
0008E2D6 E701                       	dc.b	smpsNoAttack, $01
0008E2D8 E10B                       	smpsAlterNote       $0B
0008E2DA E701                       	dc.b	smpsNoAttack, $01
0008E2DC E107                       	smpsAlterNote       $07
0008E2DE E701                       	dc.b	smpsNoAttack, $01
0008E2E0 E104                       	smpsAlterNote       $04
0008E2E2 E701                       	dc.b	smpsNoAttack, $01
0008E2E4 E100                       	smpsAlterNote       $00
0008E2E6 E701                       	dc.b	smpsNoAttack, $01
0008E2E8 E104                       	smpsAlterNote       $04
0008E2EA E701                       	dc.b	smpsNoAttack, $01
0008E2EC E10A                       	smpsAlterNote       $0A
0008E2EE E701                       	dc.b	smpsNoAttack, $01
0008E2F0 E10B                       	smpsAlterNote       $0B
0008E2F2 E701                       	dc.b	smpsNoAttack, $01
0008E2F4 E107                       	smpsAlterNote       $07
0008E2F6 E701                       	dc.b	smpsNoAttack, $01
0008E2F8 E101                       	smpsAlterNote       $01
0008E2FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2FE E104                       	smpsAlterNote       $04
0008E300 E701                       	dc.b	smpsNoAttack, $01
0008E302 E10A                       	smpsAlterNote       $0A
0008E304 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E308 E104                       	smpsAlterNote       $04
0008E30A E701                       	dc.b	smpsNoAttack, $01
0008E30C E101                       	smpsAlterNote       $01
0008E30E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E312 E107                       	smpsAlterNote       $07
0008E314 E701                       	dc.b	smpsNoAttack, $01
0008E316 E10B                       	smpsAlterNote       $0B
0008E318 E701                       	dc.b	smpsNoAttack, $01
0008E31A E10A                       	smpsAlterNote       $0A
0008E31C E701                       	dc.b	smpsNoAttack, $01
0008E31E E104                       	smpsAlterNote       $04
0008E320 E701                       	dc.b	smpsNoAttack, $01
0008E322 E100                       	smpsAlterNote       $00
0008E324 E701                       	dc.b	smpsNoAttack, $01
0008E326 E104                       	smpsAlterNote       $04
0008E328 E701                       	dc.b	smpsNoAttack, $01
0008E32A E107                       	smpsAlterNote       $07
0008E32C E701                       	dc.b	smpsNoAttack, $01
0008E32E E10B                       	smpsAlterNote       $0B
0008E330 E701                       	dc.b	smpsNoAttack, $01
0008E332 E107                       	smpsAlterNote       $07
0008E334 E701                       	dc.b	smpsNoAttack, $01
0008E336 E101                       	smpsAlterNote       $01
0008E338 E701                       	dc.b	smpsNoAttack, $01
0008E33A E100                       	smpsAlterNote       $00
0008E33C E701                       	dc.b	smpsNoAttack, $01
0008E33E E104                       	smpsAlterNote       $04
0008E340 E701                       	dc.b	smpsNoAttack, $01
0008E342 E10A                       	smpsAlterNote       $0A
0008E344 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E348 E107                       	smpsAlterNote       $07
0008E34A E701                       	dc.b	smpsNoAttack, $01
0008E34C E101                       	smpsAlterNote       $01
0008E34E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E352 E107                       	smpsAlterNote       $07
0008E354 E701                       	dc.b	smpsNoAttack, $01
0008E356 E10A                       	smpsAlterNote       $0A
0008E358 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E35C E104                       	smpsAlterNote       $04
0008E35E E701                       	dc.b	smpsNoAttack, $01
0008E360 E100                       	smpsAlterNote       $00
0008E362 E701                       	dc.b	smpsNoAttack, $01
0008E364 E101                       	smpsAlterNote       $01
0008E366 E701                       	dc.b	smpsNoAttack, $01
0008E368 E107                       	smpsAlterNote       $07
0008E36A E701                       	dc.b	smpsNoAttack, $01
0008E36C E10B                       	smpsAlterNote       $0B
0008E36E E701                       	dc.b	smpsNoAttack, $01
0008E370 E107                       	smpsAlterNote       $07
0008E372 E701                       	dc.b	smpsNoAttack, $01
0008E374 E104                       	smpsAlterNote       $04
0008E376 E701                       	dc.b	smpsNoAttack, $01
0008E378 E100                       	smpsAlterNote       $00
0008E37A E701                       	dc.b	smpsNoAttack, $01
0008E37C E101                       	smpsAlterNote       $01
0008E37E 8001                       	dc.b	nRst, $01
0008E380 E109                       	smpsAlterNote       $09
0008E382 C20D                       	dc.b	nF5, $0D
0008E384 E106                       	smpsAlterNote       $06
0008E386 E701                       	dc.b	smpsNoAttack, $01
0008E388 E102                       	smpsAlterNote       $02
0008E38A E701                       	dc.b	smpsNoAttack, $01
0008E38C E106                       	smpsAlterNote       $06
0008E38E E701                       	dc.b	smpsNoAttack, $01
0008E390 E10C                       	smpsAlterNote       $0C
0008E392 E701                       	dc.b	smpsNoAttack, $01
0008E394 E10D                       	smpsAlterNote       $0D
0008E396 E701                       	dc.b	smpsNoAttack, $01
0008E398 E109                       	smpsAlterNote       $09
0008E39A E701                       	dc.b	smpsNoAttack, $01
0008E39C E103                       	smpsAlterNote       $03
0008E39E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3A2 E106                       	smpsAlterNote       $06
0008E3A4 E701                       	dc.b	smpsNoAttack, $01
0008E3A6 E10C                       	smpsAlterNote       $0C
0008E3A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3AC E106                       	smpsAlterNote       $06
0008E3AE E701                       	dc.b	smpsNoAttack, $01
0008E3B0 E103                       	smpsAlterNote       $03
0008E3B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3B6 E109                       	smpsAlterNote       $09
0008E3B8 E701                       	dc.b	smpsNoAttack, $01
0008E3BA E10D                       	smpsAlterNote       $0D
0008E3BC E701                       	dc.b	smpsNoAttack, $01
0008E3BE E10C                       	smpsAlterNote       $0C
0008E3C0 E701                       	dc.b	smpsNoAttack, $01
0008E3C2 E109                       	smpsAlterNote       $09
0008E3C4 8001                       	dc.b	nRst, $01
0008E3C6 E108                       	smpsAlterNote       $08
0008E3C8 C10D                       	dc.b	nE5, $0D
0008E3CA E109                       	smpsAlterNote       $09
0008E3CC C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008E3D0 E108                       	smpsAlterNote       $08
0008E3D2 C10D                       	dc.b	nE5, $0D
0008E3D4 E102                       	smpsAlterNote       $02
0008E3D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3DA E105                       	smpsAlterNote       $05
0008E3DC E701                       	dc.b	smpsNoAttack, $01
0008E3DE E108                       	smpsAlterNote       $08
0008E3E0 8001                       	dc.b	nRst, $01
0008E3E2 E107                       	smpsAlterNote       $07
0008E3E4 BF0D                       	dc.b	nD5, $0D
0008E3E6 E108                       	smpsAlterNote       $08
0008E3E8 C107                       	dc.b	nE5, $07
0008E3EA E109                       	smpsAlterNote       $09
0008E3EC C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008E3F2 E10B                       	smpsAlterNote       $0B
0008E3F4 C603                       	dc.b	nA5, $03
0008E3F6 E10C                       	smpsAlterNote       $0C
0008E3F8 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008E3FE E10B                       	smpsAlterNote       $0B
0008E400 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008E406 E109                       	smpsAlterNote       $09
0008E408 D003                       	dc.b	nG6, $03
0008E40A E108                       	smpsAlterNote       $08
0008E40C CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008E410 E10B                       	smpsAlterNote       $0B
0008E412 C601 8001                  	dc.b	nA5, $01, nRst, $01
0008E416 E108                       	smpsAlterNote       $08
0008E418 C102                       	dc.b	nE5, $02
0008E41C E10C                       	smpsAlterNote       $0C
0008E41E E6FB                       	smpsAlterVol        $FB
0008E420 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008E42C 8001                       	dc.b	nRst, $01
0008E42E E10B                       	smpsAlterNote       $0B
0008E430 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008E438 E107                       	smpsAlterNote       $07
0008E43A A706 8001                  	dc.b	nD3, $06, nRst, $01
0008E43E E10B                       	smpsAlterNote       $0B
0008E440 A203                       	dc.b	nA2, $03
0008E442 E109                       	smpsAlterNote       $09
0008E444 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008E448 E108                       	smpsAlterNote       $08
0008E44A A906                       	dc.b	nE3, $06
0008E44C E107                       	smpsAlterNote       $07
0008E44E A703 8001                  	dc.b	nD3, $03, nRst, $01
0008E452 E106                       	smpsAlterNote       $06
0008E454 A503                       	dc.b	nC3, $03
0008E456 E10C                       	smpsAlterNote       $0C
0008E458 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E45C E10B                       	smpsAlterNote       $0B
0008E45E A203 8004                  	dc.b	nA2, $03, nRst, $04
0008E462 E11B                       	smpsAlterNote       $1B
0008E464 C401                       	dc.b	nG5, $01
0008E466 E1F4                       	smpsAlterNote       $F4
0008E468 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008E46B E106                       	smpsAlterNote       $06
0008E46D E701                       	dc.b	smpsNoAttack, $01
0008E46F E10F                       	smpsAlterNote       $0F
0008E471 E701                       	dc.b	smpsNoAttack, $01
0008E473 E1E4                       	smpsAlterNote       $E4
0008E475 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008E478 E1F6                       	smpsAlterNote       $F6
0008E47A E701                       	dc.b	smpsNoAttack, $01
0008E47C E108                       	smpsAlterNote       $08
0008E47E E701                       	dc.b	smpsNoAttack, $01
0008E480 E10B                       	smpsAlterNote       $0B
0008E482 E706                       	dc.b	smpsNoAttack, $06
0008E484 E105                       	smpsAlterNote       $05
0008E486 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E48A E108                       	smpsAlterNote       $08
0008E48C E701                       	dc.b	smpsNoAttack, $01
0008E48E E10E                       	smpsAlterNote       $0E
0008E490 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E494 E108                       	smpsAlterNote       $08
0008E496 E701                       	dc.b	smpsNoAttack, $01
0008E498 E105                       	smpsAlterNote       $05
0008E49A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E49E E10B                       	smpsAlterNote       $0B
0008E4A0 E701                       	dc.b	smpsNoAttack, $01
0008E4A2 E10F                       	smpsAlterNote       $0F
0008E4A4 E701                       	dc.b	smpsNoAttack, $01
0008E4A6 E10E                       	smpsAlterNote       $0E
0008E4A8 E701                       	dc.b	smpsNoAttack, $01
0008E4AA E108                       	smpsAlterNote       $08
0008E4AC E701                       	dc.b	smpsNoAttack, $01
0008E4AE E104                       	smpsAlterNote       $04
0008E4B0 E701                       	dc.b	smpsNoAttack, $01
0008E4B2 E108                       	smpsAlterNote       $08
0008E4B4 E701                       	dc.b	smpsNoAttack, $01
0008E4B6 E10B                       	smpsAlterNote       $0B
0008E4B8 E701                       	dc.b	smpsNoAttack, $01
0008E4BA E10F                       	smpsAlterNote       $0F
0008E4BC E701                       	dc.b	smpsNoAttack, $01
0008E4BE E10B                       	smpsAlterNote       $0B
0008E4C0 E701                       	dc.b	smpsNoAttack, $01
0008E4C2 E105                       	smpsAlterNote       $05
0008E4C4 E701                       	dc.b	smpsNoAttack, $01
0008E4C6 E104                       	smpsAlterNote       $04
0008E4C8 E701                       	dc.b	smpsNoAttack, $01
0008E4CA E108                       	smpsAlterNote       $08
0008E4CC E701                       	dc.b	smpsNoAttack, $01
0008E4CE E10E                       	smpsAlterNote       $0E
0008E4D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E4D4 E10B                       	smpsAlterNote       $0B
0008E4D6 E701                       	dc.b	smpsNoAttack, $01
0008E4D8 E105                       	smpsAlterNote       $05
0008E4DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E4DE E10B                       	smpsAlterNote       $0B
0008E4E0 E701                       	dc.b	smpsNoAttack, $01
0008E4E2 E10E                       	smpsAlterNote       $0E
0008E4E4 E701                       	dc.b	smpsNoAttack, $01
0008E4E6 E10F                       	smpsAlterNote       $0F
0008E4E8 8001                       	dc.b	nRst, $01
0008E4EA E109                       	smpsAlterNote       $09
0008E4EC C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008E4F2 E108                       	smpsAlterNote       $08
0008E4F4 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008E4F8 E109                       	smpsAlterNote       $09
0008E4FA C202                       	dc.b	nF5, $02
0008E4FC E108                       	smpsAlterNote       $08
0008E4FE C102                       	dc.b	nE5, $02
0008E500 E107                       	smpsAlterNote       $07
0008E502 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008E506 E108                       	smpsAlterNote       $08
0008E508 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008E50C E107                       	smpsAlterNote       $07
0008E50E BF02                       	dc.b	nD5, $02
0008E510 E106                       	smpsAlterNote       $06
0008E512 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008E516 E107                       	smpsAlterNote       $07
0008E518 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008E51C E106                       	smpsAlterNote       $06
0008E51E BD02                       	dc.b	nC5, $02
0008E520 E10C                       	smpsAlterNote       $0C
0008E522 BB02                       	dc.b	nBb4, $02
0008E524 E106                       	smpsAlterNote       $06
0008E526 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008E52A E10C                       	smpsAlterNote       $0C
0008E52C BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008E530 E10B                       	smpsAlterNote       $0B
0008E532 BA02                       	dc.b	nA4, $02
0008E534 E10C                       	smpsAlterNote       $0C
0008E536 BB02                       	dc.b	nBb4, $02
0008E538 E10B                       	smpsAlterNote       $0B
0008E53A BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008E544 E108                       	smpsAlterNote       $08
0008E546 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008E54E E107                       	smpsAlterNote       $07
0008E550 BE02                       	dc.b	nCs5, $02
0008E552 E10B                       	smpsAlterNote       $0B
0008E554 BA02                       	dc.b	nA4, $02
0008E556 E109                       	smpsAlterNote       $09
0008E558 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008E55C E108                       	smpsAlterNote       $08
0008E55E B501 8001                  	dc.b	nE4, $01, nRst, $01
0008E562 E10B                       	smpsAlterNote       $0B
0008E564 AE02                       	dc.b	nA3, $02
0008E566 E10C                       	smpsAlterNote       $0C
0008E568 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008E574 E10B                       	smpsAlterNote       $0B
0008E576 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008E57E E107                       	smpsAlterNote       $07
0008E580 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008E584 E10B                       	smpsAlterNote       $0B
0008E586 A203                       	dc.b	nA2, $03
0008E588 E109                       	smpsAlterNote       $09
0008E58A AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008E58E E108                       	smpsAlterNote       $08
0008E590 A906 8001                  	dc.b	nE3, $06, nRst, $01
0008E594 E107                       	smpsAlterNote       $07
0008E596 A702 8001                  	dc.b	nD3, $02, nRst, $01
0008E59A E106                       	smpsAlterNote       $06
0008E59C A503                       	dc.b	nC3, $03
0008E59E E10C                       	smpsAlterNote       $0C
0008E5A0 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E5A6 E107                       	smpsAlterNote       $07
0008E5A8 B20D                       	dc.b	nCs4, $0D
0008E5AA E104                       	smpsAlterNote       $04
0008E5AC E701                       	dc.b	smpsNoAttack, $01
0008E5AE E100                       	smpsAlterNote       $00
0008E5B0 E701                       	dc.b	smpsNoAttack, $01
0008E5B2 E104                       	smpsAlterNote       $04
0008E5B4 E701                       	dc.b	smpsNoAttack, $01
0008E5B6 E10A                       	smpsAlterNote       $0A
0008E5B8 E701                       	dc.b	smpsNoAttack, $01
0008E5BA E10B                       	smpsAlterNote       $0B
0008E5BC E701                       	dc.b	smpsNoAttack, $01
0008E5BE E107                       	smpsAlterNote       $07
0008E5C0 E701                       	dc.b	smpsNoAttack, $01
0008E5C2 E101                       	smpsAlterNote       $01
0008E5C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5C8 E104                       	smpsAlterNote       $04
0008E5CA E701                       	dc.b	smpsNoAttack, $01
0008E5CC E10A                       	smpsAlterNote       $0A
0008E5CE E701                       	dc.b	smpsNoAttack, $01
0008E5D0 E10B                       	smpsAlterNote       $0B
0008E5D2 8001                       	dc.b	nRst, $01
0008E5D4 E107                       	smpsAlterNote       $07
0008E5D6 B30D                       	dc.b	nD4, $0D
0008E5D8 E104                       	smpsAlterNote       $04
0008E5DA E701                       	dc.b	smpsNoAttack, $01
0008E5DC E100                       	smpsAlterNote       $00
0008E5DE E701                       	dc.b	smpsNoAttack, $01
0008E5E0 E104                       	smpsAlterNote       $04
0008E5E2 E701                       	dc.b	smpsNoAttack, $01
0008E5E4 E10A                       	smpsAlterNote       $0A
0008E5E6 E701                       	dc.b	smpsNoAttack, $01
0008E5E8 E10B                       	smpsAlterNote       $0B
0008E5EA E701                       	dc.b	smpsNoAttack, $01
0008E5EC E107                       	smpsAlterNote       $07
0008E5EE E701                       	dc.b	smpsNoAttack, $01
0008E5F0 E101                       	smpsAlterNote       $01
0008E5F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5F6 E104                       	smpsAlterNote       $04
0008E5F8 E701                       	dc.b	smpsNoAttack, $01
0008E5FA E10A                       	smpsAlterNote       $0A
0008E5FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E600 E104                       	smpsAlterNote       $04
0008E602 E701                       	dc.b	smpsNoAttack, $01
0008E604 E101                       	smpsAlterNote       $01
0008E606 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E60A E107                       	smpsAlterNote       $07
0008E60C E701                       	dc.b	smpsNoAttack, $01
0008E60E E10B                       	smpsAlterNote       $0B
0008E610 E701                       	dc.b	smpsNoAttack, $01
0008E612 E10A                       	smpsAlterNote       $0A
0008E614 E701                       	dc.b	smpsNoAttack, $01
0008E616 E107                       	smpsAlterNote       $07
0008E618 8001                       	dc.b	nRst, $01
0008E61A E108                       	smpsAlterNote       $08
0008E61C B50D                       	dc.b	nE4, $0D
0008E61E E102                       	smpsAlterNote       $02
0008E620 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E624 E105                       	smpsAlterNote       $05
0008E626 E701                       	dc.b	smpsNoAttack, $01
0008E628 E10B                       	smpsAlterNote       $0B
0008E62A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E62E E105                       	smpsAlterNote       $05
0008E630 E701                       	dc.b	smpsNoAttack, $01
0008E632 E102                       	smpsAlterNote       $02
0008E634 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E638 E108                       	smpsAlterNote       $08
0008E63A E701                       	dc.b	smpsNoAttack, $01
0008E63C E10C                       	smpsAlterNote       $0C
0008E63E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E642 E107                       	smpsAlterNote       $07
0008E644 B30D                       	dc.b	nD4, $0D
0008E646 E101                       	smpsAlterNote       $01
0008E648 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E64C E104                       	smpsAlterNote       $04
0008E64E E701                       	dc.b	smpsNoAttack, $01
0008E650 E10A                       	smpsAlterNote       $0A
0008E652 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E656 E104                       	smpsAlterNote       $04
0008E658 E701                       	dc.b	smpsNoAttack, $01
0008E65A E101                       	smpsAlterNote       $01
0008E65C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E660 E107                       	smpsAlterNote       $07
0008E662 E701                       	dc.b	smpsNoAttack, $01
0008E664 E10B                       	smpsAlterNote       $0B
0008E666 E701                       	dc.b	smpsNoAttack, $01
0008E668 E10A                       	smpsAlterNote       $0A
0008E66A E701                       	dc.b	smpsNoAttack, $01
0008E66C E104                       	smpsAlterNote       $04
0008E66E E701                       	dc.b	smpsNoAttack, $01
0008E670 E100                       	smpsAlterNote       $00
0008E672 E701                       	dc.b	smpsNoAttack, $01
0008E674 E104                       	smpsAlterNote       $04
0008E676 E701                       	dc.b	smpsNoAttack, $01
0008E678 E107                       	smpsAlterNote       $07
0008E67A E701                       	dc.b	smpsNoAttack, $01
0008E67C E10B                       	smpsAlterNote       $0B
0008E67E E701                       	dc.b	smpsNoAttack, $01
0008E680 E107                       	smpsAlterNote       $07
0008E682 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008E686 E101                       	smpsAlterNote       $01
0008E688 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E68C E107                       	smpsAlterNote       $07
0008E68E E701                       	dc.b	smpsNoAttack, $01
0008E690 E10A                       	smpsAlterNote       $0A
0008E692 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E696 E104                       	smpsAlterNote       $04
0008E698 E701                       	dc.b	smpsNoAttack, $01
0008E69A E100                       	smpsAlterNote       $00
0008E69C E701                       	dc.b	smpsNoAttack, $01
0008E69E E101                       	smpsAlterNote       $01
0008E6A0 E701                       	dc.b	smpsNoAttack, $01
0008E6A2 E107                       	smpsAlterNote       $07
0008E6A4 E701                       	dc.b	smpsNoAttack, $01
0008E6A6 E10B                       	smpsAlterNote       $0B
0008E6A8 E701                       	dc.b	smpsNoAttack, $01
0008E6AA E107                       	smpsAlterNote       $07
0008E6AC B30E                       	dc.b	nD4, $0E
0008E6AE E101                       	smpsAlterNote       $01
0008E6B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6B4 E107                       	smpsAlterNote       $07
0008E6B6 E701                       	dc.b	smpsNoAttack, $01
0008E6B8 E10A                       	smpsAlterNote       $0A
0008E6BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6BE E104                       	smpsAlterNote       $04
0008E6C0 E701                       	dc.b	smpsNoAttack, $01
0008E6C2 E100                       	smpsAlterNote       $00
0008E6C4 E701                       	dc.b	smpsNoAttack, $01
0008E6C6 E101                       	smpsAlterNote       $01
0008E6C8 E701                       	dc.b	smpsNoAttack, $01
0008E6CA E107                       	smpsAlterNote       $07
0008E6CC E701                       	dc.b	smpsNoAttack, $01
0008E6CE E10B                       	smpsAlterNote       $0B
0008E6D0 E701                       	dc.b	smpsNoAttack, $01
0008E6D2 E107                       	smpsAlterNote       $07
0008E6D4 E701                       	dc.b	smpsNoAttack, $01
0008E6D6 E104                       	smpsAlterNote       $04
0008E6D8 E701                       	dc.b	smpsNoAttack, $01
0008E6DA E100                       	smpsAlterNote       $00
0008E6DC E701                       	dc.b	smpsNoAttack, $01
0008E6DE E104                       	smpsAlterNote       $04
0008E6E0 E701                       	dc.b	smpsNoAttack, $01
0008E6E2 E10A                       	smpsAlterNote       $0A
0008E6E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6E8 E107                       	smpsAlterNote       $07
0008E6EA E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008E6EE E104                       	smpsAlterNote       $04
0008E6F0 E701                       	dc.b	smpsNoAttack, $01
0008E6F2 E100                       	smpsAlterNote       $00
0008E6F4 E701                       	dc.b	smpsNoAttack, $01
0008E6F6 E101                       	smpsAlterNote       $01
0008E6F8 E701                       	dc.b	smpsNoAttack, $01
0008E6FA E107                       	smpsAlterNote       $07
0008E6FC E701                       	dc.b	smpsNoAttack, $01
0008E6FE E10B                       	smpsAlterNote       $0B
0008E700 E701                       	dc.b	smpsNoAttack, $01
0008E702 E107                       	smpsAlterNote       $07
0008E704 E701                       	dc.b	smpsNoAttack, $01
0008E706 E104                       	smpsAlterNote       $04
0008E708 E701                       	dc.b	smpsNoAttack, $01
0008E70A E100                       	smpsAlterNote       $00
0008E70C E701                       	dc.b	smpsNoAttack, $01
0008E70E E104                       	smpsAlterNote       $04
0008E710 E701                       	dc.b	smpsNoAttack, $01
0008E712 E10A                       	smpsAlterNote       $0A
0008E714 E701                       	dc.b	smpsNoAttack, $01
0008E716 E10B                       	smpsAlterNote       $0B
0008E718 E701                       	dc.b	smpsNoAttack, $01
0008E71C E6FF                       	smpsAlterVol        $FF
0008E71E A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008E72A 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008E732 E109                       	smpsAlterNote       $09
0008E734 E601                       	smpsAlterVol        $01
0008E736 B60D                       	dc.b	nF4, $0D
0008E738 E106                       	smpsAlterNote       $06
0008E73A E701                       	dc.b	smpsNoAttack, $01
0008E73C E102                       	smpsAlterNote       $02
0008E73E E701                       	dc.b	smpsNoAttack, $01
0008E740 E106                       	smpsAlterNote       $06
0008E742 E701                       	dc.b	smpsNoAttack, $01
0008E744 E109                       	smpsAlterNote       $09
0008E746 E701                       	dc.b	smpsNoAttack, $01
0008E748 E10D                       	smpsAlterNote       $0D
0008E74A E701                       	dc.b	smpsNoAttack, $01
0008E74C E109                       	smpsAlterNote       $09
0008E74E E701                       	dc.b	smpsNoAttack, $01
0008E750 E103                       	smpsAlterNote       $03
0008E752 E701                       	dc.b	smpsNoAttack, $01
0008E754 E102                       	smpsAlterNote       $02
0008E756 E701                       	dc.b	smpsNoAttack, $01
0008E758 E106                       	smpsAlterNote       $06
0008E75A E701                       	dc.b	smpsNoAttack, $01
0008E75C E10C                       	smpsAlterNote       $0C
0008E75E E701                       	dc.b	smpsNoAttack, $01
0008E760 E10D                       	smpsAlterNote       $0D
0008E762 8001                       	dc.b	nRst, $01
0008E764 E109                       	smpsAlterNote       $09
0008E766 B80D                       	dc.b	nG4, $0D
0008E768 E106                       	smpsAlterNote       $06
0008E76A E701                       	dc.b	smpsNoAttack, $01
0008E76C E102                       	smpsAlterNote       $02
0008E76E E701                       	dc.b	smpsNoAttack, $01
0008E770 E106                       	smpsAlterNote       $06
0008E772 E701                       	dc.b	smpsNoAttack, $01
0008E774 E109                       	smpsAlterNote       $09
0008E776 E701                       	dc.b	smpsNoAttack, $01
0008E778 E10D                       	smpsAlterNote       $0D
0008E77A E701                       	dc.b	smpsNoAttack, $01
0008E77C E109                       	smpsAlterNote       $09
0008E77E E701                       	dc.b	smpsNoAttack, $01
0008E780 E103                       	smpsAlterNote       $03
0008E782 E701                       	dc.b	smpsNoAttack, $01
0008E784 E102                       	smpsAlterNote       $02
0008E786 E701                       	dc.b	smpsNoAttack, $01
0008E788 E106                       	smpsAlterNote       $06
0008E78A E701                       	dc.b	smpsNoAttack, $01
0008E78C E10C                       	smpsAlterNote       $0C
0008E78E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E792 E106                       	smpsAlterNote       $06
0008E794 E701                       	dc.b	smpsNoAttack, $01
0008E796 E103                       	smpsAlterNote       $03
0008E798 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E79C E109                       	smpsAlterNote       $09
0008E79E E701                       	dc.b	smpsNoAttack, $01
0008E7A0 E10D                       	smpsAlterNote       $0D
0008E7A2 E701                       	dc.b	smpsNoAttack, $01
0008E7A4 E10C                       	smpsAlterNote       $0C
0008E7A6 E701                       	dc.b	smpsNoAttack, $01
0008E7A8 E109                       	smpsAlterNote       $09
0008E7AA 8001                       	dc.b	nRst, $01
0008E7AC E10B                       	smpsAlterNote       $0B
0008E7AE BA0D                       	dc.b	nA4, $0D
0008E7B0 E105                       	smpsAlterNote       $05
0008E7B2 E701                       	dc.b	smpsNoAttack, $01
0008E7B4 E104                       	smpsAlterNote       $04
0008E7B6 E701                       	dc.b	smpsNoAttack, $01
0008E7B8 E108                       	smpsAlterNote       $08
0008E7BA E701                       	dc.b	smpsNoAttack, $01
0008E7BC E10E                       	smpsAlterNote       $0E
0008E7BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E7C2 E10B                       	smpsAlterNote       $0B
0008E7C4 E701                       	dc.b	smpsNoAttack, $01
0008E7C6 E105                       	smpsAlterNote       $05
0008E7C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E7CC E10B                       	smpsAlterNote       $0B
0008E7CE E701                       	dc.b	smpsNoAttack, $01
0008E7D0 E10E                       	smpsAlterNote       $0E
0008E7D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E7D6 E108                       	smpsAlterNote       $08
0008E7D8 E701                       	dc.b	smpsNoAttack, $01
0008E7DA E104                       	smpsAlterNote       $04
0008E7DC E701                       	dc.b	smpsNoAttack, $01
0008E7DE E105                       	smpsAlterNote       $05
0008E7E0 E701                       	dc.b	smpsNoAttack, $01
0008E7E2 E10B                       	smpsAlterNote       $0B
0008E7E4 E701                       	dc.b	smpsNoAttack, $01
0008E7E6 E10F                       	smpsAlterNote       $0F
0008E7E8 E701                       	dc.b	smpsNoAttack, $01
0008E7EA E10B                       	smpsAlterNote       $0B
0008E7EC E701                       	dc.b	smpsNoAttack, $01
0008E7EE E108                       	smpsAlterNote       $08
0008E7F0 E701                       	dc.b	smpsNoAttack, $01
0008E7F2 E104                       	smpsAlterNote       $04
0008E7F4 E701                       	dc.b	smpsNoAttack, $01
0008E7F6 E108                       	smpsAlterNote       $08
0008E7F8 E701                       	dc.b	smpsNoAttack, $01
0008E7FA E10E                       	smpsAlterNote       $0E
0008E7FC E701                       	dc.b	smpsNoAttack, $01
0008E7FE E10F                       	smpsAlterNote       $0F
0008E800 E701                       	dc.b	smpsNoAttack, $01
0008E802 E10B                       	smpsAlterNote       $0B
0008E804 E701                       	dc.b	smpsNoAttack, $01
0008E806 E105                       	smpsAlterNote       $05
0008E808 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E80C E108                       	smpsAlterNote       $08
0008E80E E701                       	dc.b	smpsNoAttack, $01
0008E810 E10E                       	smpsAlterNote       $0E
0008E812 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E816 E108                       	smpsAlterNote       $08
0008E818 E701                       	dc.b	smpsNoAttack, $01
0008E81A E105                       	smpsAlterNote       $05
0008E81C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E820 E108                       	smpsAlterNote       $08
0008E822 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008E826 E109                       	smpsAlterNote       $09
0008E828 B60D                       	dc.b	nF4, $0D
0008E82A E103                       	smpsAlterNote       $03
0008E82C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E830 E106                       	smpsAlterNote       $06
0008E832 E701                       	dc.b	smpsNoAttack, $01
0008E834 E10C                       	smpsAlterNote       $0C
0008E836 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E83A E106                       	smpsAlterNote       $06
0008E83C E701                       	dc.b	smpsNoAttack, $01
0008E83E E103                       	smpsAlterNote       $03
0008E840 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E844 E109                       	smpsAlterNote       $09
0008E846 E701                       	dc.b	smpsNoAttack, $01
0008E848 E10D                       	smpsAlterNote       $0D
0008E84A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E84E E109                       	smpsAlterNote       $09
0008E850 B80D                       	dc.b	nG4, $0D
0008E852 E103                       	smpsAlterNote       $03
0008E854 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E858 E109                       	smpsAlterNote       $09
0008E85A E701                       	dc.b	smpsNoAttack, $01
0008E85C E10C                       	smpsAlterNote       $0C
0008E85E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E862 E106                       	smpsAlterNote       $06
0008E864 E701                       	dc.b	smpsNoAttack, $01
0008E866 E102                       	smpsAlterNote       $02
0008E868 E701                       	dc.b	smpsNoAttack, $01
0008E86A E103                       	smpsAlterNote       $03
0008E86C E701                       	dc.b	smpsNoAttack, $01
0008E86E E109                       	smpsAlterNote       $09
0008E870 E701                       	dc.b	smpsNoAttack, $01
0008E872 E10D                       	smpsAlterNote       $0D
0008E874 E701                       	dc.b	smpsNoAttack, $01
0008E876 E109                       	smpsAlterNote       $09
0008E878 E701                       	dc.b	smpsNoAttack, $01
0008E87A E106                       	smpsAlterNote       $06
0008E87C E701                       	dc.b	smpsNoAttack, $01
0008E87E E102                       	smpsAlterNote       $02
0008E880 E701                       	dc.b	smpsNoAttack, $01
0008E882 E106                       	smpsAlterNote       $06
0008E884 E701                       	dc.b	smpsNoAttack, $01
0008E886 E10C                       	smpsAlterNote       $0C
0008E888 E701                       	dc.b	smpsNoAttack, $01
0008E88A E10D                       	smpsAlterNote       $0D
0008E88C E701                       	dc.b	smpsNoAttack, $01
0008E88E E109                       	smpsAlterNote       $09
0008E890 E701                       	dc.b	smpsNoAttack, $01
0008E892 E10B                       	smpsAlterNote       $0B
0008E894 BA0D                       	dc.b	nA4, $0D
0008E896 E108                       	smpsAlterNote       $08
0008E898 E701                       	dc.b	smpsNoAttack, $01
0008E89A E105                       	smpsAlterNote       $05
0008E89C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8A0 E10B                       	smpsAlterNote       $0B
0008E8A2 E701                       	dc.b	smpsNoAttack, $01
0008E8A4 E10F                       	smpsAlterNote       $0F
0008E8A6 E701                       	dc.b	smpsNoAttack, $01
0008E8A8 E10E                       	smpsAlterNote       $0E
0008E8AA E701                       	dc.b	smpsNoAttack, $01
0008E8AC E108                       	smpsAlterNote       $08
0008E8AE E701                       	dc.b	smpsNoAttack, $01
0008E8B0 E104                       	smpsAlterNote       $04
0008E8B2 E701                       	dc.b	smpsNoAttack, $01
0008E8B4 E108                       	smpsAlterNote       $08
0008E8B6 E701                       	dc.b	smpsNoAttack, $01
0008E8B8 E10B                       	smpsAlterNote       $0B
0008E8BA E701                       	dc.b	smpsNoAttack, $01
0008E8BC E10F                       	smpsAlterNote       $0F
0008E8BE E701                       	dc.b	smpsNoAttack, $01
0008E8C0 E10B                       	smpsAlterNote       $0B
0008E8C2 E701                       	dc.b	smpsNoAttack, $01
0008E8C4 E105                       	smpsAlterNote       $05
0008E8C6 E701                       	dc.b	smpsNoAttack, $01
0008E8C8 E104                       	smpsAlterNote       $04
0008E8CA E701                       	dc.b	smpsNoAttack, $01
0008E8CC E108                       	smpsAlterNote       $08
0008E8CE E701                       	dc.b	smpsNoAttack, $01
0008E8D0 E10E                       	smpsAlterNote       $0E
0008E8D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8D6 E10B                       	smpsAlterNote       $0B
0008E8D8 E701                       	dc.b	smpsNoAttack, $01
0008E8DA E105                       	smpsAlterNote       $05
0008E8DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8E0 E10B                       	smpsAlterNote       $0B
0008E8E2 E701                       	dc.b	smpsNoAttack, $01
0008E8E4 E10E                       	smpsAlterNote       $0E
0008E8E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8EA E108                       	smpsAlterNote       $08
0008E8EC E701                       	dc.b	smpsNoAttack, $01
0008E8EE E105                       	smpsAlterNote       $05
0008E8F0 8001                       	dc.b	nRst, $01
0008E8F2 E109                       	smpsAlterNote       $09
0008E8F4 B60A                       	dc.b	nF4, $0A
0008E8F6 E108                       	smpsAlterNote       $08
0008E8F8 B507                       	dc.b	nE4, $07
0008E8FA E107                       	smpsAlterNote       $07
0008E8FC B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008E900 E108                       	smpsAlterNote       $08
0008E902 B503                       	dc.b	nE4, $03
0008E904 E109                       	smpsAlterNote       $09
0008E906 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008E90E E10B                       	smpsAlterNote       $0B
0008E910 BA0D                       	dc.b	nA4, $0D
0008E912 E108                       	smpsAlterNote       $08
0008E914 E701                       	dc.b	smpsNoAttack, $01
0008E916 E104                       	smpsAlterNote       $04
0008E918 E701                       	dc.b	smpsNoAttack, $01
0008E91A E108                       	smpsAlterNote       $08
0008E91C E701                       	dc.b	smpsNoAttack, $01
0008E91E E10B                       	smpsAlterNote       $0B
0008E920 E701                       	dc.b	smpsNoAttack, $01
0008E922 E10F                       	smpsAlterNote       $0F
0008E924 E701                       	dc.b	smpsNoAttack, $01
0008E926 E10B                       	smpsAlterNote       $0B
0008E928 E701                       	dc.b	smpsNoAttack, $01
0008E92A E105                       	smpsAlterNote       $05
0008E92C E701                       	dc.b	smpsNoAttack, $01
0008E92E E104                       	smpsAlterNote       $04
0008E930 E701                       	dc.b	smpsNoAttack, $01
0008E932 E108                       	smpsAlterNote       $08
0008E934 E701                       	dc.b	smpsNoAttack, $01
0008E936 E10E                       	smpsAlterNote       $0E
0008E938 E701                       	dc.b	smpsNoAttack, $01
0008E93A E10F                       	smpsAlterNote       $0F
0008E93C 8001                       	dc.b	nRst, $01
0008E93E E109                       	smpsAlterNote       $09
0008E940 C20D                       	dc.b	nF5, $0D
0008E942 E106                       	smpsAlterNote       $06
0008E944 E701                       	dc.b	smpsNoAttack, $01
0008E946 E102                       	smpsAlterNote       $02
0008E948 E701                       	dc.b	smpsNoAttack, $01
0008E94A E106                       	smpsAlterNote       $06
0008E94C E701                       	dc.b	smpsNoAttack, $01
0008E94E E109                       	smpsAlterNote       $09
0008E950 E701                       	dc.b	smpsNoAttack, $01
0008E952 E10D                       	smpsAlterNote       $0D
0008E954 E701                       	dc.b	smpsNoAttack, $01
0008E956 E109                       	smpsAlterNote       $09
0008E958 E701                       	dc.b	smpsNoAttack, $01
0008E95A E103                       	smpsAlterNote       $03
0008E95C E701                       	dc.b	smpsNoAttack, $01
0008E95E E102                       	smpsAlterNote       $02
0008E960 E701                       	dc.b	smpsNoAttack, $01
0008E962 E106                       	smpsAlterNote       $06
0008E964 E701                       	dc.b	smpsNoAttack, $01
0008E966 E10C                       	smpsAlterNote       $0C
0008E968 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E96C E109                       	smpsAlterNote       $09
0008E96E E701                       	dc.b	smpsNoAttack, $01
0008E970 E103                       	smpsAlterNote       $03
0008E972 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E976 E109                       	smpsAlterNote       $09
0008E978 E701                       	dc.b	smpsNoAttack, $01
0008E97A E10C                       	smpsAlterNote       $0C
0008E97C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E980 E106                       	smpsAlterNote       $06
0008E982 E701                       	dc.b	smpsNoAttack, $01
0008E984 E102                       	smpsAlterNote       $02
0008E986 E701                       	dc.b	smpsNoAttack, $01
0008E988 E103                       	smpsAlterNote       $03
0008E98A E701                       	dc.b	smpsNoAttack, $01
0008E98C E109                       	smpsAlterNote       $09
0008E98E E701                       	dc.b	smpsNoAttack, $01
0008E990 E10D                       	smpsAlterNote       $0D
0008E992 E701                       	dc.b	smpsNoAttack, $01
0008E994 E109                       	smpsAlterNote       $09
0008E996 E701                       	dc.b	smpsNoAttack, $01
0008E998 E106                       	smpsAlterNote       $06
0008E99A E701                       	dc.b	smpsNoAttack, $01
0008E99C E102                       	smpsAlterNote       $02
0008E99E E701                       	dc.b	smpsNoAttack, $01
0008E9A0 E106                       	smpsAlterNote       $06
0008E9A2 E701                       	dc.b	smpsNoAttack, $01
0008E9A4 E10C                       	smpsAlterNote       $0C
0008E9A6 E701                       	dc.b	smpsNoAttack, $01
0008E9A8 E10D                       	smpsAlterNote       $0D
0008E9AA E701                       	dc.b	smpsNoAttack, $01
0008E9AC E109                       	smpsAlterNote       $09
0008E9AE E701                       	dc.b	smpsNoAttack, $01
0008E9B0 E103                       	smpsAlterNote       $03
0008E9B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9B6 E106                       	smpsAlterNote       $06
0008E9B8 E701                       	dc.b	smpsNoAttack, $01
0008E9BA E10C                       	smpsAlterNote       $0C
0008E9BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9C0 E106                       	smpsAlterNote       $06
0008E9C2 E701                       	dc.b	smpsNoAttack, $01
0008E9C4 E103                       	smpsAlterNote       $03
0008E9C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9CA E109                       	smpsAlterNote       $09
0008E9CC E701                       	dc.b	smpsNoAttack, $01
0008E9CE E10D                       	smpsAlterNote       $0D
0008E9D0 E701                       	dc.b	smpsNoAttack, $01
0008E9D2 E10C                       	smpsAlterNote       $0C
0008E9D4 E701                       	dc.b	smpsNoAttack, $01
0008E9D6 E106                       	smpsAlterNote       $06
0008E9D8 E701                       	dc.b	smpsNoAttack, $01
0008E9DA E103                       	smpsAlterNote       $03
0008E9DC 8001                       	dc.b	nRst, $01
0008E9DE E109                       	smpsAlterNote       $09
0008E9E0 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008E9E6 E10C                       	smpsAlterNote       $0C
0008E9E8 E601                       	smpsAlterVol        $01
0008E9EA BB0D                       	dc.b	nBb4, $0D
0008E9EC E106                       	smpsAlterNote       $06
0008E9EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9F2 E109                       	smpsAlterNote       $09
0008E9F4 E701                       	dc.b	smpsNoAttack, $01
0008E9F6 E10F                       	smpsAlterNote       $0F
0008E9F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9FC E109                       	smpsAlterNote       $09
0008E9FE E701                       	dc.b	smpsNoAttack, $01
0008EA00 E106                       	smpsAlterNote       $06
0008EA02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA06 E10C                       	smpsAlterNote       $0C
0008EA08 E701                       	dc.b	smpsNoAttack, $01
0008EA0A E110                       	smpsAlterNote       $10
0008EA0C E701                       	dc.b	smpsNoAttack, $01
0008EA0E E10F                       	smpsAlterNote       $0F
0008EA10 E701                       	dc.b	smpsNoAttack, $01
0008EA12 E109                       	smpsAlterNote       $09
0008EA14 E701                       	dc.b	smpsNoAttack, $01
0008EA16 E105                       	smpsAlterNote       $05
0008EA18 E701                       	dc.b	smpsNoAttack, $01
0008EA1A E106                       	smpsAlterNote       $06
0008EA1C 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008EA20 E103                       	smpsAlterNote       $03
0008EA22 E701                       	dc.b	smpsNoAttack, $01
0008EA24 E1FF                       	smpsAlterNote       $FF
0008EA26 E701                       	dc.b	smpsNoAttack, $01
0008EA28 E103                       	smpsAlterNote       $03
0008EA2A E701                       	dc.b	smpsNoAttack, $01
0008EA2C E106                       	smpsAlterNote       $06
0008EA2E E701                       	dc.b	smpsNoAttack, $01
0008EA30 E10A                       	smpsAlterNote       $0A
0008EA32 E701                       	dc.b	smpsNoAttack, $01
0008EA34 E106                       	smpsAlterNote       $06
0008EA36 E701                       	dc.b	smpsNoAttack, $01
0008EA38 E100                       	smpsAlterNote       $00
0008EA3A E701                       	dc.b	smpsNoAttack, $01
0008EA3C E1FF                       	smpsAlterNote       $FF
0008EA3E E701                       	dc.b	smpsNoAttack, $01
0008EA40 E103                       	smpsAlterNote       $03
0008EA42 E701                       	dc.b	smpsNoAttack, $01
0008EA44 E109                       	smpsAlterNote       $09
0008EA46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA4A E106                       	smpsAlterNote       $06
0008EA4C E701                       	dc.b	smpsNoAttack, $01
0008EA4E E100                       	smpsAlterNote       $00
0008EA50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA54 E107                       	smpsAlterNote       $07
0008EA56 BF0E                       	dc.b	nD5, $0E
0008EA58 E101                       	smpsAlterNote       $01
0008EA5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA5E E107                       	smpsAlterNote       $07
0008EA60 E701                       	dc.b	smpsNoAttack, $01
0008EA62 E10A                       	smpsAlterNote       $0A
0008EA64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA68 E104                       	smpsAlterNote       $04
0008EA6A E701                       	dc.b	smpsNoAttack, $01
0008EA6C E100                       	smpsAlterNote       $00
0008EA6E E701                       	dc.b	smpsNoAttack, $01
0008EA70 E101                       	smpsAlterNote       $01
0008EA72 E701                       	dc.b	smpsNoAttack, $01
0008EA74 E107                       	smpsAlterNote       $07
0008EA76 E701                       	dc.b	smpsNoAttack, $01
0008EA78 E10B                       	smpsAlterNote       $0B
0008EA7A E701                       	dc.b	smpsNoAttack, $01
0008EA7C E107                       	smpsAlterNote       $07
0008EA7E E701                       	dc.b	smpsNoAttack, $01
0008EA80 E104                       	smpsAlterNote       $04
0008EA82 E701                       	dc.b	smpsNoAttack, $01
0008EA84 E100                       	smpsAlterNote       $00
0008EA86 E701                       	dc.b	smpsNoAttack, $01
0008EA88 E101                       	smpsAlterNote       $01
0008EA8A 8001                       	dc.b	nRst, $01
0008EA8C E108                       	smpsAlterNote       $08
0008EA8E C10C                       	dc.b	nE5, $0C
0008EA90 E109                       	smpsAlterNote       $09
0008EA92 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008EA96 E10A                       	smpsAlterNote       $0A
0008EA98 8001                       	dc.b	nRst, $01
0008EA9A E109                       	smpsAlterNote       $09
0008EA9C C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008EAA0 E106                       	smpsAlterNote       $06
0008EAA2 E701                       	dc.b	smpsNoAttack, $01
0008EAA4 E102                       	smpsAlterNote       $02
0008EAA6 E701                       	dc.b	smpsNoAttack, $01
0008EAA8 E103                       	smpsAlterNote       $03
0008EAAA E701                       	dc.b	smpsNoAttack, $01
0008EAAC E109                       	smpsAlterNote       $09
0008EAAE E701                       	dc.b	smpsNoAttack, $01
0008EAB0 E10D                       	smpsAlterNote       $0D
0008EAB2 E701                       	dc.b	smpsNoAttack, $01
0008EAB4 E109                       	smpsAlterNote       $09
0008EAB6 E701                       	dc.b	smpsNoAttack, $01
0008EAB8 E106                       	smpsAlterNote       $06
0008EABA E701                       	dc.b	smpsNoAttack, $01
0008EABC E102                       	smpsAlterNote       $02
0008EABE E701                       	dc.b	smpsNoAttack, $01
0008EAC0 E106                       	smpsAlterNote       $06
0008EAC2 E701                       	dc.b	smpsNoAttack, $01
0008EAC4 E10C                       	smpsAlterNote       $0C
0008EAC6 E701                       	dc.b	smpsNoAttack, $01
0008EAC8 E10D                       	smpsAlterNote       $0D
0008EACA E701                       	dc.b	smpsNoAttack, $01
0008EACC E109                       	smpsAlterNote       $09
0008EACE C40D                       	dc.b	nG5, $0D
0008EAD0 E106                       	smpsAlterNote       $06
0008EAD2 E701                       	dc.b	smpsNoAttack, $01
0008EAD4 E102                       	smpsAlterNote       $02
0008EAD6 E701                       	dc.b	smpsNoAttack, $01
0008EAD8 E103                       	smpsAlterNote       $03
0008EADA E701                       	dc.b	smpsNoAttack, $01
0008EADC E109                       	smpsAlterNote       $09
0008EADE E701                       	dc.b	smpsNoAttack, $01
0008EAE0 E108                       	smpsAlterNote       $08
0008EAE2 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008EAEE E109                       	smpsAlterNote       $09
0008EAF0 C20D                       	dc.b	nF5, $0D
0008EAF2 E106                       	smpsAlterNote       $06
0008EAF4 E701                       	dc.b	smpsNoAttack, $01
0008EAF6 E102                       	smpsAlterNote       $02
0008EAF8 E701                       	dc.b	smpsNoAttack, $01
0008EAFA E106                       	smpsAlterNote       $06
0008EAFC E701                       	dc.b	smpsNoAttack, $01
0008EAFE E109                       	smpsAlterNote       $09
0008EB00 E701                       	dc.b	smpsNoAttack, $01
0008EB02 E10D                       	smpsAlterNote       $0D
0008EB04 E701                       	dc.b	smpsNoAttack, $01
0008EB06 E109                       	smpsAlterNote       $09
0008EB08 E701                       	dc.b	smpsNoAttack, $01
0008EB0A E103                       	smpsAlterNote       $03
0008EB0C E701                       	dc.b	smpsNoAttack, $01
0008EB0E E102                       	smpsAlterNote       $02
0008EB10 E701                       	dc.b	smpsNoAttack, $01
0008EB12 E106                       	smpsAlterNote       $06
0008EB14 E701                       	dc.b	smpsNoAttack, $01
0008EB16 E10C                       	smpsAlterNote       $0C
0008EB18 E701                       	dc.b	smpsNoAttack, $01
0008EB1A E10D                       	smpsAlterNote       $0D
0008EB1C 8001                       	dc.b	nRst, $01
0008EB1E E112                       	smpsAlterNote       $12
0008EB20 C401                       	dc.b	nG5, $01
0008EB22 E1EB                       	smpsAlterNote       $EB
0008EB24 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008EB27 E1FD                       	smpsAlterNote       $FD
0008EB29 E701                       	dc.b	smpsNoAttack, $01
0008EB2B E10F                       	smpsAlterNote       $0F
0008EB2D E701                       	dc.b	smpsNoAttack, $01
0008EB2F E118                       	smpsAlterNote       $18
0008EB31 E701                       	dc.b	smpsNoAttack, $01
0008EB33 E1ED                       	smpsAlterNote       $ED
0008EB35 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008EB38 E1FF                       	smpsAlterNote       $FF
0008EB3A E701                       	dc.b	smpsNoAttack, $01
0008EB3C E10B                       	smpsAlterNote       $0B
0008EB3E E703                       	dc.b	smpsNoAttack, $03
0008EB40 E109                       	smpsAlterNote       $09
0008EB42 C407                       	dc.b	nG5, $07
0008EB44 E108                       	smpsAlterNote       $08
0008EB46 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008EB52 E109                       	smpsAlterNote       $09
0008EB54 C20D                       	dc.b	nF5, $0D
0008EB56 E103                       	smpsAlterNote       $03
0008EB58 E701                       	dc.b	smpsNoAttack, $01
0008EB5A E102                       	smpsAlterNote       $02
0008EB5C E701                       	dc.b	smpsNoAttack, $01
0008EB5E E106                       	smpsAlterNote       $06
0008EB60 E701                       	dc.b	smpsNoAttack, $01
0008EB62 E10C                       	smpsAlterNote       $0C
0008EB64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB68 E109                       	smpsAlterNote       $09
0008EB6A E701                       	dc.b	smpsNoAttack, $01
0008EB6C E103                       	smpsAlterNote       $03
0008EB6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB72 E109                       	smpsAlterNote       $09
0008EB74 E701                       	dc.b	smpsNoAttack, $01
0008EB76 E10C                       	smpsAlterNote       $0C
0008EB78 E701                       	dc.b	smpsNoAttack, $01
0008EB7A E10D                       	smpsAlterNote       $0D
0008EB7C 8001                       	dc.b	nRst, $01
0008EB7E E10B                       	smpsAlterNote       $0B
0008EB80 C609 8001                  	dc.b	nA5, $09, nRst, $01
0008EB84 E109                       	smpsAlterNote       $09
0008EB86 B806 8001                  	dc.b	nG4, $06, nRst, $01
0008EB8A E108                       	smpsAlterNote       $08
0008EB8C C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008EB98 8001                       	dc.b	nRst, $01
0008EB9A E109                       	smpsAlterNote       $09
0008EB9C C20D                       	dc.b	nF5, $0D
0008EB9E E103                       	smpsAlterNote       $03
0008EBA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBA4 E106                       	smpsAlterNote       $06
0008EBA6 E701                       	dc.b	smpsNoAttack, $01
0008EBA8 E10C                       	smpsAlterNote       $0C
0008EBAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBAE E106                       	smpsAlterNote       $06
0008EBB0 E701                       	dc.b	smpsNoAttack, $01
0008EBB2 E103                       	smpsAlterNote       $03
0008EBB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBB8 E109                       	smpsAlterNote       $09
0008EBBA E701                       	dc.b	smpsNoAttack, $01
0008EBBC E10D                       	smpsAlterNote       $0D
0008EBBE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EBC4 E108                       	smpsAlterNote       $08
0008EBC6 E6FF                       	smpsAlterVol        $FF
0008EBC8 A806                       	dc.b	nEb3, $06
0008EBCA E10C                       	smpsAlterNote       $0C
0008EBCC A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008EBD0 E108                       	smpsAlterNote       $08
0008EBD2 A803                       	dc.b	nEb3, $03
0008EBD4 E109                       	smpsAlterNote       $09
0008EBD6 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008EBDA E10C                       	smpsAlterNote       $0C
0008EBDC AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008EBE6 E109                       	smpsAlterNote       $09
0008EBE8 E602                       	smpsAlterVol        $02
0008EBEA B604                       	dc.b	nF4, $04
0008EBEC E602                       	smpsAlterVol        $02
0008EBEE F6F1 AA                    	smpsJump            music84_Jump02
0008EBF1                            
0008EBF1                            ; FM4 Data
0008EBF1                            music84_FM4:
0008EBF3 E040                       	smpsPan             panRight, $00
0008EBF5 8003                       	dc.b	nRst, $03
0008EBF7 E10F                       	smpsAlterNote       $0F
0008EBF9 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008EBFD E10D                       	smpsAlterNote       $0D
0008EBFF C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008EC03 E10C                       	smpsAlterNote       $0C
0008EC05 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008EC0B E6FE                       	smpsAlterVol        $FE
0008EC0D E110                       	smpsAlterNote       $10
0008EC0F C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008EC13 E10F                       	smpsAlterNote       $0F
0008EC15 C602 8001                  	dc.b	nA5, $02, nRst, $01
0008EC19 E10D                       	smpsAlterNote       $0D
0008EC1B C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008EC24 E10C                       	smpsAlterNote       $0C
0008EC26 C103                       	dc.b	nE5, $03
0008EC28 E10A                       	smpsAlterNote       $0A
0008EC2A BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008EC30 03                         	dc.b	$03
0008EC31                            
0008EC31                            music84_Jump01:
0008EC31 E10B                       	smpsAlterNote       $0B
0008EC33 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008EC37 E10C                       	smpsAlterNote       $0C
0008EC39 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008EC3D E10D                       	smpsAlterNote       $0D
0008EC3F C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008EC49 E10B                       	smpsAlterNote       $0B
0008EC4B BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008EC4F E107                       	smpsAlterNote       $07
0008EC51 E701                       	dc.b	smpsNoAttack, $01
0008EC53 E103                       	smpsAlterNote       $03
0008EC55 E701                       	dc.b	smpsNoAttack, $01
0008EC57 E104                       	smpsAlterNote       $04
0008EC59 E701                       	dc.b	smpsNoAttack, $01
0008EC5B E10A                       	smpsAlterNote       $0A
0008EC5D E701                       	dc.b	smpsNoAttack, $01
0008EC5F E10E                       	smpsAlterNote       $0E
0008EC61 E701                       	dc.b	smpsNoAttack, $01
0008EC63 E10A                       	smpsAlterNote       $0A
0008EC65 E701                       	dc.b	smpsNoAttack, $01
0008EC67 E107                       	smpsAlterNote       $07
0008EC69 E701                       	dc.b	smpsNoAttack, $01
0008EC6B E104                       	smpsAlterNote       $04
0008EC6D 8001                       	dc.b	nRst, $01
0008EC6F E110                       	smpsAlterNote       $10
0008EC71 C703                       	dc.b	nBb5, $03
0008EC73 E10F                       	smpsAlterNote       $0F
0008EC75 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008EC79 E10D                       	smpsAlterNote       $0D
0008EC7B C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008EC81 E10C                       	smpsAlterNote       $0C
0008EC83 E701                       	dc.b	smpsNoAttack, $01
0008EC85 E108                       	smpsAlterNote       $08
0008EC87 E701                       	dc.b	smpsNoAttack, $01
0008EC89 E10C                       	smpsAlterNote       $0C
0008EC8B E701                       	dc.b	smpsNoAttack, $01
0008EC8D E10F                       	smpsAlterNote       $0F
0008EC8F E701                       	dc.b	smpsNoAttack, $01
0008EC91 E113                       	smpsAlterNote       $13
0008EC93 E701                       	dc.b	smpsNoAttack, $01
0008EC95 E10F                       	smpsAlterNote       $0F
0008EC97 E701                       	dc.b	smpsNoAttack, $01
0008EC99 E109                       	smpsAlterNote       $09
0008EC9B E701                       	dc.b	smpsNoAttack, $01
0008EC9D E108                       	smpsAlterNote       $08
0008EC9F E701                       	dc.b	smpsNoAttack, $01
0008ECA1 E10C                       	smpsAlterNote       $0C
0008ECA3 E701                       	dc.b	smpsNoAttack, $01
0008ECA5 E112                       	smpsAlterNote       $12
0008ECA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECAB E10C                       	smpsAlterNote       $0C
0008ECAD E701                       	dc.b	smpsNoAttack, $01
0008ECAF E109                       	smpsAlterNote       $09
0008ECB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECB5 E10F                       	smpsAlterNote       $0F
0008ECB7 E701                       	dc.b	smpsNoAttack, $01
0008ECB9 E113                       	smpsAlterNote       $13
0008ECBB E701                       	dc.b	smpsNoAttack, $01
0008ECBD E112                       	smpsAlterNote       $12
0008ECBF E701                       	dc.b	smpsNoAttack, $01
0008ECC1 E10C                       	smpsAlterNote       $0C
0008ECC3 E701                       	dc.b	smpsNoAttack, $01
0008ECC5 E108                       	smpsAlterNote       $08
0008ECC7 E701                       	dc.b	smpsNoAttack, $01
0008ECC9 E10C                       	smpsAlterNote       $0C
0008ECCB E701                       	dc.b	smpsNoAttack, $01
0008ECCD E10F                       	smpsAlterNote       $0F
0008ECCF E701                       	dc.b	smpsNoAttack, $01
0008ECD1 E113                       	smpsAlterNote       $13
0008ECD3 E701                       	dc.b	smpsNoAttack, $01
0008ECD5 E10F                       	smpsAlterNote       $0F
0008ECD7 E701                       	dc.b	smpsNoAttack, $01
0008ECD9 E109                       	smpsAlterNote       $09
0008ECDB E701                       	dc.b	smpsNoAttack, $01
0008ECDD E108                       	smpsAlterNote       $08
0008ECDF E701                       	dc.b	smpsNoAttack, $01
0008ECE1 E10C                       	smpsAlterNote       $0C
0008ECE3 E701                       	dc.b	smpsNoAttack, $01
0008ECE5 E112                       	smpsAlterNote       $12
0008ECE7 E701                       	dc.b	smpsNoAttack, $01
0008ECE9 E113                       	smpsAlterNote       $13
0008ECEB 800F                       	dc.b	nRst, $0F
0008ECED E10B                       	smpsAlterNote       $0B
0008ECEF BF03                       	dc.b	nD5, $03
0008ECF1 E10C                       	smpsAlterNote       $0C
0008ECF3 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008ECF7 E10D                       	smpsAlterNote       $0D
0008ECF9 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008ED01 E10B                       	smpsAlterNote       $0B
0008ED03 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008ED0D E110                       	smpsAlterNote       $10
0008ED0F C704                       	dc.b	nBb5, $04
0008ED11 E10F                       	smpsAlterNote       $0F
0008ED13 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008ED17 E10D                       	smpsAlterNote       $0D
0008ED19 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008ED1F E109                       	smpsAlterNote       $09
0008ED21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED25 E10F                       	smpsAlterNote       $0F
0008ED27 E701                       	dc.b	smpsNoAttack, $01
0008ED29 E112                       	smpsAlterNote       $12
0008ED2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED2F E10C                       	smpsAlterNote       $0C
0008ED31 E701                       	dc.b	smpsNoAttack, $01
0008ED33 E108                       	smpsAlterNote       $08
0008ED35 E701                       	dc.b	smpsNoAttack, $01
0008ED37 E109                       	smpsAlterNote       $09
0008ED39 E701                       	dc.b	smpsNoAttack, $01
0008ED3B E10F                       	smpsAlterNote       $0F
0008ED3D E701                       	dc.b	smpsNoAttack, $01
0008ED3F E113                       	smpsAlterNote       $13
0008ED41 E701                       	dc.b	smpsNoAttack, $01
0008ED43 E10F                       	smpsAlterNote       $0F
0008ED45 E701                       	dc.b	smpsNoAttack, $01
0008ED47 E10C                       	smpsAlterNote       $0C
0008ED49 E701                       	dc.b	smpsNoAttack, $01
0008ED4B E108                       	smpsAlterNote       $08
0008ED4D E701                       	dc.b	smpsNoAttack, $01
0008ED4F E10C                       	smpsAlterNote       $0C
0008ED51 E701                       	dc.b	smpsNoAttack, $01
0008ED53 E112                       	smpsAlterNote       $12
0008ED55 E701                       	dc.b	smpsNoAttack, $01
0008ED57 E113                       	smpsAlterNote       $13
0008ED59 E701                       	dc.b	smpsNoAttack, $01
0008ED5B E10F                       	smpsAlterNote       $0F
0008ED5D E701                       	dc.b	smpsNoAttack, $01
0008ED5F E109                       	smpsAlterNote       $09
0008ED61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED65 E10C                       	smpsAlterNote       $0C
0008ED67 E701                       	dc.b	smpsNoAttack, $01
0008ED69 E112                       	smpsAlterNote       $12
0008ED6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED6F E10C                       	smpsAlterNote       $0C
0008ED71 E701                       	dc.b	smpsNoAttack, $01
0008ED73 E109                       	smpsAlterNote       $09
0008ED75 E701                       	dc.b	smpsNoAttack, $01
0008ED77 E10D                       	smpsAlterNote       $0D
0008ED79 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008ED7D E10F                       	smpsAlterNote       $0F
0008ED7F C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008ED89 E10D                       	smpsAlterNote       $0D
0008ED8B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008ED91 E10B                       	smpsAlterNote       $0B
0008ED93 BF0D                       	dc.b	nD5, $0D
0008ED95 E108                       	smpsAlterNote       $08
0008ED97 E701                       	dc.b	smpsNoAttack, $01
0008ED99 E104                       	smpsAlterNote       $04
0008ED9B E701                       	dc.b	smpsNoAttack, $01
0008ED9D E108                       	smpsAlterNote       $08
0008ED9F E701                       	dc.b	smpsNoAttack, $01
0008EDA1 E10B                       	smpsAlterNote       $0B
0008EDA3 E701                       	dc.b	smpsNoAttack, $01
0008EDA5 E10F                       	smpsAlterNote       $0F
0008EDA7 E701                       	dc.b	smpsNoAttack, $01
0008EDA9 E10B                       	smpsAlterNote       $0B
0008EDAB E701                       	dc.b	smpsNoAttack, $01
0008EDAD E105                       	smpsAlterNote       $05
0008EDAF E701                       	dc.b	smpsNoAttack, $01
0008EDB1 E104                       	smpsAlterNote       $04
0008EDB3 E701                       	dc.b	smpsNoAttack, $01
0008EDB5 E108                       	smpsAlterNote       $08
0008EDB7 E701                       	dc.b	smpsNoAttack, $01
0008EDB9 E10E                       	smpsAlterNote       $0E
0008EDBB E701                       	dc.b	smpsNoAttack, $01
0008EDBD E10F                       	smpsAlterNote       $0F
0008EDBF 8001                       	dc.b	nRst, $01
0008EDC1 E10C                       	smpsAlterNote       $0C
0008EDC3 C101                       	dc.b	nE5, $01
0008EDC5 E10D                       	smpsAlterNote       $0D
0008EDC7 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008EDCD E10F                       	smpsAlterNote       $0F
0008EDCF C606 8001                  	dc.b	nA5, $06, nRst, $01
0008EDD3 E10C                       	smpsAlterNote       $0C
0008EDD5 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008EDD9 E10D                       	smpsAlterNote       $0D
0008EDDB CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008EDDF E10C                       	smpsAlterNote       $0C
0008EDE1 CD03                       	dc.b	nE6, $03
0008EDE3 E10A                       	smpsAlterNote       $0A
0008EDE5 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008EDE9 E10D                       	smpsAlterNote       $0D
0008EDEB C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008EDF3 E109                       	smpsAlterNote       $09
0008EDF5 E701                       	dc.b	smpsNoAttack, $01
0008EDF7 E10D                       	smpsAlterNote       $0D
0008EDF9 E701                       	dc.b	smpsNoAttack, $01
0008EDFB E110                       	smpsAlterNote       $10
0008EDFD E701                       	dc.b	smpsNoAttack, $01
0008EDFF E114                       	smpsAlterNote       $14
0008EE01 E701                       	dc.b	smpsNoAttack, $01
0008EE03 E110                       	smpsAlterNote       $10
0008EE05 E701                       	dc.b	smpsNoAttack, $01
0008EE07 E10A                       	smpsAlterNote       $0A
0008EE09 E701                       	dc.b	smpsNoAttack, $01
0008EE0B E109                       	smpsAlterNote       $09
0008EE0D E701                       	dc.b	smpsNoAttack, $01
0008EE0F E10D                       	smpsAlterNote       $0D
0008EE11 E701                       	dc.b	smpsNoAttack, $01
0008EE13 E113                       	smpsAlterNote       $13
0008EE15 E701                       	dc.b	smpsNoAttack, $01
0008EE17 E114                       	smpsAlterNote       $14
0008EE19 8001                       	dc.b	nRst, $01
0008EE1B E10F                       	smpsAlterNote       $0F
0008EE1D C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008EE23 E10C                       	smpsAlterNote       $0C
0008EE25 E701                       	dc.b	smpsNoAttack, $01
0008EE27 E108                       	smpsAlterNote       $08
0008EE29 E701                       	dc.b	smpsNoAttack, $01
0008EE2B E10C                       	smpsAlterNote       $0C
0008EE2D E701                       	dc.b	smpsNoAttack, $01
0008EE2F E112                       	smpsAlterNote       $12
0008EE31 E701                       	dc.b	smpsNoAttack, $01
0008EE33 E113                       	smpsAlterNote       $13
0008EE35 E701                       	dc.b	smpsNoAttack, $01
0008EE37 E10F                       	smpsAlterNote       $0F
0008EE39 E701                       	dc.b	smpsNoAttack, $01
0008EE3B E109                       	smpsAlterNote       $09
0008EE3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE41 E10C                       	smpsAlterNote       $0C
0008EE43 E701                       	dc.b	smpsNoAttack, $01
0008EE45 E112                       	smpsAlterNote       $12
0008EE47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE4B E10C                       	smpsAlterNote       $0C
0008EE4D E701                       	dc.b	smpsNoAttack, $01
0008EE4F E109                       	smpsAlterNote       $09
0008EE51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE55 E10F                       	smpsAlterNote       $0F
0008EE57 E701                       	dc.b	smpsNoAttack, $01
0008EE59 E113                       	smpsAlterNote       $13
0008EE5B E701                       	dc.b	smpsNoAttack, $01
0008EE5D E112                       	smpsAlterNote       $12
0008EE5F E701                       	dc.b	smpsNoAttack, $01
0008EE61 E10C                       	smpsAlterNote       $0C
0008EE63 E701                       	dc.b	smpsNoAttack, $01
0008EE65 E108                       	smpsAlterNote       $08
0008EE67 E701                       	dc.b	smpsNoAttack, $01
0008EE69 E10C                       	smpsAlterNote       $0C
0008EE6B E701                       	dc.b	smpsNoAttack, $01
0008EE6D E10F                       	smpsAlterNote       $0F
0008EE6F E701                       	dc.b	smpsNoAttack, $01
0008EE71 E113                       	smpsAlterNote       $13
0008EE73 E701                       	dc.b	smpsNoAttack, $01
0008EE75 E10F                       	smpsAlterNote       $0F
0008EE77 E701                       	dc.b	smpsNoAttack, $01
0008EE79 E109                       	smpsAlterNote       $09
0008EE7B E701                       	dc.b	smpsNoAttack, $01
0008EE7D E108                       	smpsAlterNote       $08
0008EE7F E701                       	dc.b	smpsNoAttack, $01
0008EE81 E10C                       	smpsAlterNote       $0C
0008EE83 E701                       	dc.b	smpsNoAttack, $01
0008EE85 E112                       	smpsAlterNote       $12
0008EE87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE8B E10F                       	smpsAlterNote       $0F
0008EE8D E701                       	dc.b	smpsNoAttack, $01
0008EE8F E109                       	smpsAlterNote       $09
0008EE91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE95 E10F                       	smpsAlterNote       $0F
0008EE97 E701                       	dc.b	smpsNoAttack, $01
0008EE99 E113                       	smpsAlterNote       $13
0008EE9B E701                       	dc.b	smpsNoAttack, $01
0008EE9D E112                       	smpsAlterNote       $12
0008EE9F E701                       	dc.b	smpsNoAttack, $01
0008EEA1 E10C                       	smpsAlterNote       $0C
0008EEA3 E701                       	dc.b	smpsNoAttack, $01
0008EEA5 E108                       	smpsAlterNote       $08
0008EEA7 E701                       	dc.b	smpsNoAttack, $01
0008EEA9 E10C                       	smpsAlterNote       $0C
0008EEAB E701                       	dc.b	smpsNoAttack, $01
0008EEAD E10F                       	smpsAlterNote       $0F
0008EEAF E701                       	dc.b	smpsNoAttack, $01
0008EEB1 E113                       	smpsAlterNote       $13
0008EEB3 E701                       	dc.b	smpsNoAttack, $01
0008EEB5 E10F                       	smpsAlterNote       $0F
0008EEB7 E701                       	dc.b	smpsNoAttack, $01
0008EEB9 E109                       	smpsAlterNote       $09
0008EEBB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EEBF E10F                       	smpsAlterNote       $0F
0008EEC1 C60D                       	dc.b	nA5, $0D
0008EEC3 E109                       	smpsAlterNote       $09
0008EEC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEC9 E10C                       	smpsAlterNote       $0C
0008EECB E701                       	dc.b	smpsNoAttack, $01
0008EECD E112                       	smpsAlterNote       $12
0008EECF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EED3 E10C                       	smpsAlterNote       $0C
0008EED5 E701                       	dc.b	smpsNoAttack, $01
0008EED7 E109                       	smpsAlterNote       $09
0008EED9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEDD E10F                       	smpsAlterNote       $0F
0008EEDF E701                       	dc.b	smpsNoAttack, $01
0008EEE1 E113                       	smpsAlterNote       $13
0008EEE3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EEE9 E10D                       	smpsAlterNote       $0D
0008EEEB C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008EEF3 E10C                       	smpsAlterNote       $0C
0008EEF5 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008EEFB E6FF                       	smpsAlterVol        $FF
0008EEFD E10B                       	smpsAlterNote       $0B
0008EEFF BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008EF03 E10C                       	smpsAlterNote       $0C
0008EF05 C103                       	dc.b	nE5, $03
0008EF07 E10D                       	smpsAlterNote       $0D
0008EF09 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008EF13 E10B                       	smpsAlterNote       $0B
0008EF15 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008EF19 E107                       	smpsAlterNote       $07
0008EF1B E701                       	dc.b	smpsNoAttack, $01
0008EF1D E104                       	smpsAlterNote       $04
0008EF1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF23 E10A                       	smpsAlterNote       $0A
0008EF25 E701                       	dc.b	smpsNoAttack, $01
0008EF27 E10D                       	smpsAlterNote       $0D
0008EF29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF2D E107                       	smpsAlterNote       $07
0008EF2F E701                       	dc.b	smpsNoAttack, $01
0008EF31 E104                       	smpsAlterNote       $04
0008EF33 8001                       	dc.b	nRst, $01
0008EF35 E110                       	smpsAlterNote       $10
0008EF37 C703                       	dc.b	nBb5, $03
0008EF39 E10F                       	smpsAlterNote       $0F
0008EF3B C603 8001                  	dc.b	nA5, $03, nRst, $01
0008EF3F E10D                       	smpsAlterNote       $0D
0008EF41 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008EF45 E10C                       	smpsAlterNote       $0C
0008EF47 E701                       	dc.b	smpsNoAttack, $01
0008EF49 E108                       	smpsAlterNote       $08
0008EF4B E701                       	dc.b	smpsNoAttack, $01
0008EF4D E109                       	smpsAlterNote       $09
0008EF4F E701                       	dc.b	smpsNoAttack, $01
0008EF51 E10F                       	smpsAlterNote       $0F
0008EF53 E701                       	dc.b	smpsNoAttack, $01
0008EF55 E113                       	smpsAlterNote       $13
0008EF57 E701                       	dc.b	smpsNoAttack, $01
0008EF59 E10F                       	smpsAlterNote       $0F
0008EF5B E701                       	dc.b	smpsNoAttack, $01
0008EF5D E10C                       	smpsAlterNote       $0C
0008EF5F E701                       	dc.b	smpsNoAttack, $01
0008EF61 E108                       	smpsAlterNote       $08
0008EF63 E701                       	dc.b	smpsNoAttack, $01
0008EF65 E10C                       	smpsAlterNote       $0C
0008EF67 E701                       	dc.b	smpsNoAttack, $01
0008EF69 E112                       	smpsAlterNote       $12
0008EF6B E701                       	dc.b	smpsNoAttack, $01
0008EF6D E113                       	smpsAlterNote       $13
0008EF6F E701                       	dc.b	smpsNoAttack, $01
0008EF71 E10F                       	smpsAlterNote       $0F
0008EF73 E701                       	dc.b	smpsNoAttack, $01
0008EF75 E109                       	smpsAlterNote       $09
0008EF77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF7B E10C                       	smpsAlterNote       $0C
0008EF7D E701                       	dc.b	smpsNoAttack, $01
0008EF7F E112                       	smpsAlterNote       $12
0008EF81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF85 E10C                       	smpsAlterNote       $0C
0008EF87 E701                       	dc.b	smpsNoAttack, $01
0008EF89 E109                       	smpsAlterNote       $09
0008EF8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF8F E10F                       	smpsAlterNote       $0F
0008EF91 E701                       	dc.b	smpsNoAttack, $01
0008EF93 E113                       	smpsAlterNote       $13
0008EF95 E701                       	dc.b	smpsNoAttack, $01
0008EF97 E112                       	smpsAlterNote       $12
0008EF99 E701                       	dc.b	smpsNoAttack, $01
0008EF9B E10C                       	smpsAlterNote       $0C
0008EF9D E701                       	dc.b	smpsNoAttack, $01
0008EF9F E108                       	smpsAlterNote       $08
0008EFA1 E701                       	dc.b	smpsNoAttack, $01
0008EFA3 E10C                       	smpsAlterNote       $0C
0008EFA5 E701                       	dc.b	smpsNoAttack, $01
0008EFA7 E10F                       	smpsAlterNote       $0F
0008EFA9 E701                       	dc.b	smpsNoAttack, $01
0008EFAB E113                       	smpsAlterNote       $13
0008EFAD E701                       	dc.b	smpsNoAttack, $01
0008EFAF E10F                       	smpsAlterNote       $0F
0008EFB1 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008EFB5 E110                       	smpsAlterNote       $10
0008EFB7 BB03                       	dc.b	nBb4, $03
0008EFB9 E10F                       	smpsAlterNote       $0F
0008EFBB BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008EFBF E10B                       	smpsAlterNote       $0B
0008EFC1 BF03                       	dc.b	nD5, $03
0008EFC3 E10C                       	smpsAlterNote       $0C
0008EFC5 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008EFC9 E10D                       	smpsAlterNote       $0D
0008EFCB C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008EFD5 E10B                       	smpsAlterNote       $0B
0008EFD7 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008EFE3 E110                       	smpsAlterNote       $10
0008EFE5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EFE9 E10F                       	smpsAlterNote       $0F
0008EFEB C604                       	dc.b	nA5, $04
0008EFED E10D                       	smpsAlterNote       $0D
0008EFEF C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008EFF5 E109                       	smpsAlterNote       $09
0008EFF7 E701                       	dc.b	smpsNoAttack, $01
0008EFF9 E108                       	smpsAlterNote       $08
0008EFFB E701                       	dc.b	smpsNoAttack, $01
0008EFFD E10C                       	smpsAlterNote       $0C
0008EFFF E701                       	dc.b	smpsNoAttack, $01
0008F001 E112                       	smpsAlterNote       $12
0008F003 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F007 E10F                       	smpsAlterNote       $0F
0008F009 E701                       	dc.b	smpsNoAttack, $01
0008F00B E109                       	smpsAlterNote       $09
0008F00D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F011 E10F                       	smpsAlterNote       $0F
0008F013 E701                       	dc.b	smpsNoAttack, $01
0008F015 E112                       	smpsAlterNote       $12
0008F017 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F01B E10C                       	smpsAlterNote       $0C
0008F01D E701                       	dc.b	smpsNoAttack, $01
0008F01F E108                       	smpsAlterNote       $08
0008F021 E701                       	dc.b	smpsNoAttack, $01
0008F023 E109                       	smpsAlterNote       $09
0008F025 E701                       	dc.b	smpsNoAttack, $01
0008F027 E10F                       	smpsAlterNote       $0F
0008F029 E701                       	dc.b	smpsNoAttack, $01
0008F02B E113                       	smpsAlterNote       $13
0008F02D E701                       	dc.b	smpsNoAttack, $01
0008F02F E10F                       	smpsAlterNote       $0F
0008F031 E701                       	dc.b	smpsNoAttack, $01
0008F033 E10C                       	smpsAlterNote       $0C
0008F035 E701                       	dc.b	smpsNoAttack, $01
0008F037 E108                       	smpsAlterNote       $08
0008F039 E701                       	dc.b	smpsNoAttack, $01
0008F03B E10C                       	smpsAlterNote       $0C
0008F03D E701                       	dc.b	smpsNoAttack, $01
0008F03F E112                       	smpsAlterNote       $12
0008F041 E701                       	dc.b	smpsNoAttack, $01
0008F043 E113                       	smpsAlterNote       $13
0008F045 E701                       	dc.b	smpsNoAttack, $01
0008F047 E10F                       	smpsAlterNote       $0F
0008F049 E701                       	dc.b	smpsNoAttack, $01
0008F04B E109                       	smpsAlterNote       $09
0008F04D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F051 E10C                       	smpsAlterNote       $0C
0008F053 E701                       	dc.b	smpsNoAttack, $01
0008F055 E112                       	smpsAlterNote       $12
0008F057 E701                       	dc.b	smpsNoAttack, $01
0008F059 E113                       	smpsAlterNote       $13
0008F05B 8001                       	dc.b	nRst, $01
0008F05D E10F                       	smpsAlterNote       $0F
0008F05F C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008F06B C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008F073 E10D                       	smpsAlterNote       $0D
0008F075 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F07B E10B                       	smpsAlterNote       $0B
0008F07D BF0D                       	dc.b	nD5, $0D
0008F07F E108                       	smpsAlterNote       $08
0008F081 E701                       	dc.b	smpsNoAttack, $01
0008F083 E104                       	smpsAlterNote       $04
0008F085 E701                       	dc.b	smpsNoAttack, $01
0008F087 E105                       	smpsAlterNote       $05
0008F089 E701                       	dc.b	smpsNoAttack, $01
0008F08B E10B                       	smpsAlterNote       $0B
0008F08D E701                       	dc.b	smpsNoAttack, $01
0008F08F E10F                       	smpsAlterNote       $0F
0008F091 E701                       	dc.b	smpsNoAttack, $01
0008F093 E10B                       	smpsAlterNote       $0B
0008F095 E701                       	dc.b	smpsNoAttack, $01
0008F097 E108                       	smpsAlterNote       $08
0008F099 E701                       	dc.b	smpsNoAttack, $01
0008F09B E104                       	smpsAlterNote       $04
0008F09D E701                       	dc.b	smpsNoAttack, $01
0008F09F E108                       	smpsAlterNote       $08
0008F0A1 E701                       	dc.b	smpsNoAttack, $01
0008F0A3 E10E                       	smpsAlterNote       $0E
0008F0A5 E701                       	dc.b	smpsNoAttack, $01
0008F0A7 E10F                       	smpsAlterNote       $0F
0008F0A9 E701                       	dc.b	smpsNoAttack, $01
0008F0AB E10C                       	smpsAlterNote       $0C
0008F0AD C101                       	dc.b	nE5, $01
0008F0AF E10D                       	smpsAlterNote       $0D
0008F0B1 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008F0B9 E10F                       	smpsAlterNote       $0F
0008F0BB C607                       	dc.b	nA5, $07
0008F0BD E10C                       	smpsAlterNote       $0C
0008F0BF CD07                       	dc.b	nE6, $07
0008F0C1 E10D                       	smpsAlterNote       $0D
0008F0C3 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008F0C7 E10C                       	smpsAlterNote       $0C
0008F0C9 CD03                       	dc.b	nE6, $03
0008F0CB E10A                       	smpsAlterNote       $0A
0008F0CD C903 8001                  	dc.b	nC6, $03, nRst, $01
0008F0D1 E10D                       	smpsAlterNote       $0D
0008F0D3 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008F0D9 E10A                       	smpsAlterNote       $0A
0008F0DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0DF E110                       	smpsAlterNote       $10
0008F0E1 E701                       	dc.b	smpsNoAttack, $01
0008F0E3 E114                       	smpsAlterNote       $14
0008F0E5 E701                       	dc.b	smpsNoAttack, $01
0008F0E7 E113                       	smpsAlterNote       $13
0008F0E9 E701                       	dc.b	smpsNoAttack, $01
0008F0EB E10D                       	smpsAlterNote       $0D
0008F0ED E701                       	dc.b	smpsNoAttack, $01
0008F0EF E109                       	smpsAlterNote       $09
0008F0F1 E701                       	dc.b	smpsNoAttack, $01
0008F0F3 E10D                       	smpsAlterNote       $0D
0008F0F5 E701                       	dc.b	smpsNoAttack, $01
0008F0F7 E110                       	smpsAlterNote       $10
0008F0F9 E701                       	dc.b	smpsNoAttack, $01
0008F0FB E114                       	smpsAlterNote       $14
0008F0FD E701                       	dc.b	smpsNoAttack, $01
0008F0FF E10F                       	smpsAlterNote       $0F
0008F101 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008F105 E10C                       	smpsAlterNote       $0C
0008F107 E701                       	dc.b	smpsNoAttack, $01
0008F109 E108                       	smpsAlterNote       $08
0008F10B E701                       	dc.b	smpsNoAttack, $01
0008F10D E10C                       	smpsAlterNote       $0C
0008F10F E701                       	dc.b	smpsNoAttack, $01
0008F111 E10F                       	smpsAlterNote       $0F
0008F113 E701                       	dc.b	smpsNoAttack, $01
0008F115 E113                       	smpsAlterNote       $13
0008F117 E701                       	dc.b	smpsNoAttack, $01
0008F119 E10F                       	smpsAlterNote       $0F
0008F11B E701                       	dc.b	smpsNoAttack, $01
0008F11D E109                       	smpsAlterNote       $09
0008F11F E701                       	dc.b	smpsNoAttack, $01
0008F121 E108                       	smpsAlterNote       $08
0008F123 E701                       	dc.b	smpsNoAttack, $01
0008F125 E10C                       	smpsAlterNote       $0C
0008F127 E701                       	dc.b	smpsNoAttack, $01
0008F129 E112                       	smpsAlterNote       $12
0008F12B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F12F E10F                       	smpsAlterNote       $0F
0008F131 E701                       	dc.b	smpsNoAttack, $01
0008F133 E109                       	smpsAlterNote       $09
0008F135 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F139 E10F                       	smpsAlterNote       $0F
0008F13B E701                       	dc.b	smpsNoAttack, $01
0008F13D E112                       	smpsAlterNote       $12
0008F13F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F143 E10C                       	smpsAlterNote       $0C
0008F145 E701                       	dc.b	smpsNoAttack, $01
0008F147 E108                       	smpsAlterNote       $08
0008F149 E701                       	dc.b	smpsNoAttack, $01
0008F14B E109                       	smpsAlterNote       $09
0008F14D E701                       	dc.b	smpsNoAttack, $01
0008F14F E10F                       	smpsAlterNote       $0F
0008F151 E701                       	dc.b	smpsNoAttack, $01
0008F153 E113                       	smpsAlterNote       $13
0008F155 E701                       	dc.b	smpsNoAttack, $01
0008F157 E10F                       	smpsAlterNote       $0F
0008F159 E701                       	dc.b	smpsNoAttack, $01
0008F15B E10C                       	smpsAlterNote       $0C
0008F15D E701                       	dc.b	smpsNoAttack, $01
0008F15F E108                       	smpsAlterNote       $08
0008F161 E701                       	dc.b	smpsNoAttack, $01
0008F163 E10C                       	smpsAlterNote       $0C
0008F165 E701                       	dc.b	smpsNoAttack, $01
0008F167 E112                       	smpsAlterNote       $12
0008F169 E701                       	dc.b	smpsNoAttack, $01
0008F16B E113                       	smpsAlterNote       $13
0008F16D E701                       	dc.b	smpsNoAttack, $01
0008F16F E10F                       	smpsAlterNote       $0F
0008F171 E701                       	dc.b	smpsNoAttack, $01
0008F173 E109                       	smpsAlterNote       $09
0008F175 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F179 E10C                       	smpsAlterNote       $0C
0008F17B E701                       	dc.b	smpsNoAttack, $01
0008F17D E112                       	smpsAlterNote       $12
0008F17F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F183 E10C                       	smpsAlterNote       $0C
0008F185 E701                       	dc.b	smpsNoAttack, $01
0008F187 E109                       	smpsAlterNote       $09
0008F189 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F18D E10F                       	smpsAlterNote       $0F
0008F18F E701                       	dc.b	smpsNoAttack, $01
0008F191 E113                       	smpsAlterNote       $13
0008F193 E701                       	dc.b	smpsNoAttack, $01
0008F195 E112                       	smpsAlterNote       $12
0008F197 E701                       	dc.b	smpsNoAttack, $01
0008F199 E10C                       	smpsAlterNote       $0C
0008F19B E701                       	dc.b	smpsNoAttack, $01
0008F19D E109                       	smpsAlterNote       $09
0008F19F 8001                       	dc.b	nRst, $01
0008F1A1 E10F                       	smpsAlterNote       $0F
0008F1A3 C60D                       	dc.b	nA5, $0D
0008F1A5 E10C                       	smpsAlterNote       $0C
0008F1A7 E701                       	dc.b	smpsNoAttack, $01
0008F1A9 E108                       	smpsAlterNote       $08
0008F1AB E701                       	dc.b	smpsNoAttack, $01
0008F1AD E10C                       	smpsAlterNote       $0C
0008F1AF E701                       	dc.b	smpsNoAttack, $01
0008F1B1 E112                       	smpsAlterNote       $12
0008F1B3 E701                       	dc.b	smpsNoAttack, $01
0008F1B5 E113                       	smpsAlterNote       $13
0008F1B7 E701                       	dc.b	smpsNoAttack, $01
0008F1B9 E10F                       	smpsAlterNote       $0F
0008F1BB E701                       	dc.b	smpsNoAttack, $01
0008F1BD E109                       	smpsAlterNote       $09
0008F1BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1C3 E10C                       	smpsAlterNote       $0C
0008F1C5 E701                       	dc.b	smpsNoAttack, $01
0008F1C7 E112                       	smpsAlterNote       $12
0008F1C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1CD E10C                       	smpsAlterNote       $0C
0008F1CF E701                       	dc.b	smpsNoAttack, $01
0008F1D1 E109                       	smpsAlterNote       $09
0008F1D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1D7 E10F                       	smpsAlterNote       $0F
0008F1D9 E701                       	dc.b	smpsNoAttack, $01
0008F1DB E113                       	smpsAlterNote       $13
0008F1DD E701                       	dc.b	smpsNoAttack, $01
0008F1DF E112                       	smpsAlterNote       $12
0008F1E1 E701                       	dc.b	smpsNoAttack, $01
0008F1E3 E10C                       	smpsAlterNote       $0C
0008F1E5 E701                       	dc.b	smpsNoAttack, $01
0008F1E7 E108                       	smpsAlterNote       $08
0008F1E9 E701                       	dc.b	smpsNoAttack, $01
0008F1EB E10C                       	smpsAlterNote       $0C
0008F1ED E701                       	dc.b	smpsNoAttack, $01
0008F1EF E10F                       	smpsAlterNote       $0F
0008F1F1 E701                       	dc.b	smpsNoAttack, $01
0008F1F3 E113                       	smpsAlterNote       $13
0008F1F5 E701                       	dc.b	smpsNoAttack, $01
0008F1F7 E10F                       	smpsAlterNote       $0F
0008F1F9 E701                       	dc.b	smpsNoAttack, $01
0008F1FB E109                       	smpsAlterNote       $09
0008F1FD E701                       	dc.b	smpsNoAttack, $01
0008F1FF E108                       	smpsAlterNote       $08
0008F201 E701                       	dc.b	smpsNoAttack, $01
0008F203 E10C                       	smpsAlterNote       $0C
0008F205 E701                       	dc.b	smpsNoAttack, $01
0008F207 E112                       	smpsAlterNote       $12
0008F209 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F20D E10F                       	smpsAlterNote       $0F
0008F20F E701                       	dc.b	smpsNoAttack, $01
0008F211 E109                       	smpsAlterNote       $09
0008F213 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F217 E10F                       	smpsAlterNote       $0F
0008F219 E701                       	dc.b	smpsNoAttack, $01
0008F21B E112                       	smpsAlterNote       $12
0008F21D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F221 E10C                       	smpsAlterNote       $0C
0008F223 E701                       	dc.b	smpsNoAttack, $01
0008F225 E108                       	smpsAlterNote       $08
0008F227 E701                       	dc.b	smpsNoAttack, $01
0008F229 E10C                       	smpsAlterNote       $0C
0008F22B E701                       	dc.b	smpsNoAttack, $01
0008F22D E10F                       	smpsAlterNote       $0F
0008F22F E701                       	dc.b	smpsNoAttack, $01
0008F231 E113                       	smpsAlterNote       $13
0008F233 E701                       	dc.b	smpsNoAttack, $01
0008F235 E10F                       	smpsAlterNote       $0F
0008F237 E701                       	dc.b	smpsNoAttack, $01
0008F239 E109                       	smpsAlterNote       $09
0008F23B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F241 E601                       	smpsAlterVol        $01
0008F243 E10F                       	smpsAlterNote       $0F
0008F245 C604                       	dc.b	nA5, $04
0008F247 E10D                       	smpsAlterNote       $0D
0008F249 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F24F E10B                       	smpsAlterNote       $0B
0008F251 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008F259 E10F                       	smpsAlterNote       $0F
0008F25B C604 8001                  	dc.b	nA5, $04, nRst, $01
0008F25F E10D                       	smpsAlterNote       $0D
0008F261 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008F267 E10C                       	smpsAlterNote       $0C
0008F269 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008F26F E10A                       	smpsAlterNote       $0A
0008F271 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008F275 E110                       	smpsAlterNote       $10
0008F277 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F27B E10F                       	smpsAlterNote       $0F
0008F27D C604                       	dc.b	nA5, $04
0008F27F E10D                       	smpsAlterNote       $0D
0008F281 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008F28D E109                       	smpsAlterNote       $09
0008F28F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F293 E10F                       	smpsAlterNote       $0F
0008F295 E701                       	dc.b	smpsNoAttack, $01
0008F297 E112                       	smpsAlterNote       $12
0008F299 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F29D E10C                       	smpsAlterNote       $0C
0008F29F E701                       	dc.b	smpsNoAttack, $01
0008F2A1 E108                       	smpsAlterNote       $08
0008F2A3 E701                       	dc.b	smpsNoAttack, $01
0008F2A5 E10C                       	smpsAlterNote       $0C
0008F2A7 E701                       	dc.b	smpsNoAttack, $01
0008F2A9 E10F                       	smpsAlterNote       $0F
0008F2AB E701                       	dc.b	smpsNoAttack, $01
0008F2AD E113                       	smpsAlterNote       $13
0008F2AF E701                       	dc.b	smpsNoAttack, $01
0008F2B1 E10D                       	smpsAlterNote       $0D
0008F2B3 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008F2B9 E10C                       	smpsAlterNote       $0C
0008F2BB C10D                       	dc.b	nE5, $0D
0008F2BD E109                       	smpsAlterNote       $09
0008F2BF E701                       	dc.b	smpsNoAttack, $01
0008F2C1 E105                       	smpsAlterNote       $05
0008F2C3 E701                       	dc.b	smpsNoAttack, $01
0008F2C5 E106                       	smpsAlterNote       $06
0008F2C7 E701                       	dc.b	smpsNoAttack, $01
0008F2C9 E10C                       	smpsAlterNote       $0C
0008F2CB E701                       	dc.b	smpsNoAttack, $01
0008F2CD E110                       	smpsAlterNote       $10
0008F2CF E701                       	dc.b	smpsNoAttack, $01
0008F2D1 E10C                       	smpsAlterNote       $0C
0008F2D3 E701                       	dc.b	smpsNoAttack, $01
0008F2D5 E109                       	smpsAlterNote       $09
0008F2D7 E701                       	dc.b	smpsNoAttack, $01
0008F2D9 E105                       	smpsAlterNote       $05
0008F2DB E701                       	dc.b	smpsNoAttack, $01
0008F2DD E109                       	smpsAlterNote       $09
0008F2DF E701                       	dc.b	smpsNoAttack, $01
0008F2E1 E10F                       	smpsAlterNote       $0F
0008F2E3 E701                       	dc.b	smpsNoAttack, $01
0008F2E5 E110                       	smpsAlterNote       $10
0008F2E7 E701                       	dc.b	smpsNoAttack, $01
0008F2E9 E10C                       	smpsAlterNote       $0C
0008F2EB E701                       	dc.b	smpsNoAttack, $01
0008F2ED E106                       	smpsAlterNote       $06
0008F2EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2F3 E109                       	smpsAlterNote       $09
0008F2F5 E701                       	dc.b	smpsNoAttack, $01
0008F2F7 E10F                       	smpsAlterNote       $0F
0008F2F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2FD E109                       	smpsAlterNote       $09
0008F2FF E701                       	dc.b	smpsNoAttack, $01
0008F301 E106                       	smpsAlterNote       $06
0008F303 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F307 E10C                       	smpsAlterNote       $0C
0008F309 E701                       	dc.b	smpsNoAttack, $01
0008F30B E110                       	smpsAlterNote       $10
0008F30D E701                       	dc.b	smpsNoAttack, $01
0008F30F E10F                       	smpsAlterNote       $0F
0008F311 E701                       	dc.b	smpsNoAttack, $01
0008F313 E109                       	smpsAlterNote       $09
0008F315 E701                       	dc.b	smpsNoAttack, $01
0008F317 E105                       	smpsAlterNote       $05
0008F319 E701                       	dc.b	smpsNoAttack, $01
0008F31B E109                       	smpsAlterNote       $09
0008F31D E701                       	dc.b	smpsNoAttack, $01
0008F31F E10C                       	smpsAlterNote       $0C
0008F321 E701                       	dc.b	smpsNoAttack, $01
0008F323 E110                       	smpsAlterNote       $10
0008F325 E701                       	dc.b	smpsNoAttack, $01
0008F327 E10C                       	smpsAlterNote       $0C
0008F329 E701                       	dc.b	smpsNoAttack, $01
0008F32B E106                       	smpsAlterNote       $06
0008F32D E701                       	dc.b	smpsNoAttack, $01
0008F32F E105                       	smpsAlterNote       $05
0008F331 E701                       	dc.b	smpsNoAttack, $01
0008F333 E109                       	smpsAlterNote       $09
0008F335 E701                       	dc.b	smpsNoAttack, $01
0008F337 E10F                       	smpsAlterNote       $0F
0008F339 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F33D E10C                       	smpsAlterNote       $0C
0008F33F E701                       	dc.b	smpsNoAttack, $01
0008F341 E106                       	smpsAlterNote       $06
0008F343 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F347 E10C                       	smpsAlterNote       $0C
0008F349 E701                       	dc.b	smpsNoAttack, $01
0008F34B E10F                       	smpsAlterNote       $0F
0008F34D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F351 E109                       	smpsAlterNote       $09
0008F353 E701                       	dc.b	smpsNoAttack, $01
0008F355 E105                       	smpsAlterNote       $05
0008F357 E701                       	dc.b	smpsNoAttack, $01
0008F359 E106                       	smpsAlterNote       $06
0008F35B E701                       	dc.b	smpsNoAttack, $01
0008F35D E10C                       	smpsAlterNote       $0C
0008F35F E701                       	dc.b	smpsNoAttack, $01
0008F361 E110                       	smpsAlterNote       $10
0008F363 E701                       	dc.b	smpsNoAttack, $01
0008F365 E10C                       	smpsAlterNote       $0C
0008F367 E701                       	dc.b	smpsNoAttack, $01
0008F369 E109                       	smpsAlterNote       $09
0008F36B E701                       	dc.b	smpsNoAttack, $01
0008F36D E105                       	smpsAlterNote       $05
0008F36F E701                       	dc.b	smpsNoAttack, $01
0008F371 E109                       	smpsAlterNote       $09
0008F373 E701                       	dc.b	smpsNoAttack, $01
0008F375 E10F                       	smpsAlterNote       $0F
0008F377 E701                       	dc.b	smpsNoAttack, $01
0008F379 E110                       	smpsAlterNote       $10
0008F37B E701                       	dc.b	smpsNoAttack, $01
0008F37D E10C                       	smpsAlterNote       $0C
0008F37F E701                       	dc.b	smpsNoAttack, $01
0008F381 E106                       	smpsAlterNote       $06
0008F383 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F387 E109                       	smpsAlterNote       $09
0008F389 E701                       	dc.b	smpsNoAttack, $01
0008F38B E10F                       	smpsAlterNote       $0F
0008F38D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F391 E109                       	smpsAlterNote       $09
0008F393 E701                       	dc.b	smpsNoAttack, $01
0008F395 E106                       	smpsAlterNote       $06
0008F397 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F39B E10C                       	smpsAlterNote       $0C
0008F39D E701                       	dc.b	smpsNoAttack, $01
0008F39F E110                       	smpsAlterNote       $10
0008F3A1 E701                       	dc.b	smpsNoAttack, $01
0008F3A3 E10F                       	smpsAlterNote       $0F
0008F3A5 E701                       	dc.b	smpsNoAttack, $01
0008F3A7 E109                       	smpsAlterNote       $09
0008F3A9 E701                       	dc.b	smpsNoAttack, $01
0008F3AB E105                       	smpsAlterNote       $05
0008F3AD E701                       	dc.b	smpsNoAttack, $01
0008F3AF E109                       	smpsAlterNote       $09
0008F3B1 E701                       	dc.b	smpsNoAttack, $01
0008F3B3 E10C                       	smpsAlterNote       $0C
0008F3B5 E701                       	dc.b	smpsNoAttack, $01
0008F3B7 E110                       	smpsAlterNote       $10
0008F3B9 E701                       	dc.b	smpsNoAttack, $01
0008F3BB E10C                       	smpsAlterNote       $0C
0008F3BD E701                       	dc.b	smpsNoAttack, $01
0008F3BF E106                       	smpsAlterNote       $06
0008F3C1 E701                       	dc.b	smpsNoAttack, $01
0008F3C3 E105                       	smpsAlterNote       $05
0008F3C5 E701                       	dc.b	smpsNoAttack, $01
0008F3C7 E109                       	smpsAlterNote       $09
0008F3C9 E701                       	dc.b	smpsNoAttack, $01
0008F3CB E10F                       	smpsAlterNote       $0F
0008F3CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F3D1 E109                       	smpsAlterNote       $09
0008F3D3 E701                       	dc.b	smpsNoAttack, $01
0008F3D5 E106                       	smpsAlterNote       $06
0008F3D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F3DB E10C                       	smpsAlterNote       $0C
0008F3DD E701                       	dc.b	smpsNoAttack, $01
0008F3DF E110                       	smpsAlterNote       $10
0008F3E1 E701                       	dc.b	smpsNoAttack, $01
0008F3E3 E10F                       	smpsAlterNote       $0F
0008F3E5 E701                       	dc.b	smpsNoAttack, $01
0008F3E7 E109                       	smpsAlterNote       $09
0008F3E9 E701                       	dc.b	smpsNoAttack, $01
0008F3EB E105                       	smpsAlterNote       $05
0008F3ED E701                       	dc.b	smpsNoAttack, $01
0008F3EF E109                       	smpsAlterNote       $09
0008F3F1 E701                       	dc.b	smpsNoAttack, $01
0008F3F3 E10C                       	smpsAlterNote       $0C
0008F3F5 E701                       	dc.b	smpsNoAttack, $01
0008F3F7 E110                       	smpsAlterNote       $10
0008F3F9 E701                       	dc.b	smpsNoAttack, $01
0008F3FB E10C                       	smpsAlterNote       $0C
0008F3FD E701                       	dc.b	smpsNoAttack, $01
0008F3FF E106                       	smpsAlterNote       $06
0008F401 E701                       	dc.b	smpsNoAttack, $01
0008F403 E105                       	smpsAlterNote       $05
0008F405 E701                       	dc.b	smpsNoAttack, $01
0008F407 E109                       	smpsAlterNote       $09
0008F409 E701                       	dc.b	smpsNoAttack, $01
0008F40B E10F                       	smpsAlterNote       $0F
0008F40D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F411 E10C                       	smpsAlterNote       $0C
0008F413 E701                       	dc.b	smpsNoAttack, $01
0008F415 E106                       	smpsAlterNote       $06
0008F417 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F41B E10C                       	smpsAlterNote       $0C
0008F41D E701                       	dc.b	smpsNoAttack, $01
0008F41F E10F                       	smpsAlterNote       $0F
0008F421 E701                       	dc.b	smpsNoAttack, $01
0008F423 E110                       	smpsAlterNote       $10
0008F425 8001                       	dc.b	nRst, $01
0008F427 E10F                       	smpsAlterNote       $0F
0008F429 C604                       	dc.b	nA5, $04
0008F42B E10D                       	smpsAlterNote       $0D
0008F42D C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F433 E10B                       	smpsAlterNote       $0B
0008F435 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008F43B E10F                       	smpsAlterNote       $0F
0008F43D C604 8001                  	dc.b	nA5, $04, nRst, $01
0008F441 E10D                       	smpsAlterNote       $0D
0008F443 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008F449 E10C                       	smpsAlterNote       $0C
0008F44B C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008F451 E10A                       	smpsAlterNote       $0A
0008F453 C904                       	dc.b	nC6, $04
0008F455 E110                       	smpsAlterNote       $10
0008F457 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F45B E10F                       	smpsAlterNote       $0F
0008F45D C604                       	dc.b	nA5, $04
0008F45F E10D                       	smpsAlterNote       $0D
0008F461 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008F46D E109                       	smpsAlterNote       $09
0008F46F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F473 E10F                       	smpsAlterNote       $0F
0008F475 E701                       	dc.b	smpsNoAttack, $01
0008F477 E112                       	smpsAlterNote       $12
0008F479 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F47D E10C                       	smpsAlterNote       $0C
0008F47F E701                       	dc.b	smpsNoAttack, $01
0008F481 E108                       	smpsAlterNote       $08
0008F483 E701                       	dc.b	smpsNoAttack, $01
0008F485 E109                       	smpsAlterNote       $09
0008F487 E701                       	dc.b	smpsNoAttack, $01
0008F489 E10F                       	smpsAlterNote       $0F
0008F48B E701                       	dc.b	smpsNoAttack, $01
0008F48D E113                       	smpsAlterNote       $13
0008F48F E701                       	dc.b	smpsNoAttack, $01
0008F491 E10D                       	smpsAlterNote       $0D
0008F493 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008F499 E10C                       	smpsAlterNote       $0C
0008F49B C10D                       	dc.b	nE5, $0D
0008F49D E109                       	smpsAlterNote       $09
0008F49F E701                       	dc.b	smpsNoAttack, $01
0008F4A1 E106                       	smpsAlterNote       $06
0008F4A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4A7 E10C                       	smpsAlterNote       $0C
0008F4A9 E701                       	dc.b	smpsNoAttack, $01
0008F4AB E110                       	smpsAlterNote       $10
0008F4AD E701                       	dc.b	smpsNoAttack, $01
0008F4AF E10F                       	smpsAlterNote       $0F
0008F4B1 E701                       	dc.b	smpsNoAttack, $01
0008F4B3 E109                       	smpsAlterNote       $09
0008F4B5 E701                       	dc.b	smpsNoAttack, $01
0008F4B7 E105                       	smpsAlterNote       $05
0008F4B9 E701                       	dc.b	smpsNoAttack, $01
0008F4BB E109                       	smpsAlterNote       $09
0008F4BD E701                       	dc.b	smpsNoAttack, $01
0008F4BF E10C                       	smpsAlterNote       $0C
0008F4C1 E701                       	dc.b	smpsNoAttack, $01
0008F4C3 E110                       	smpsAlterNote       $10
0008F4C5 E701                       	dc.b	smpsNoAttack, $01
0008F4C7 E10C                       	smpsAlterNote       $0C
0008F4C9 E701                       	dc.b	smpsNoAttack, $01
0008F4CB E106                       	smpsAlterNote       $06
0008F4CD E701                       	dc.b	smpsNoAttack, $01
0008F4CF E105                       	smpsAlterNote       $05
0008F4D1 E701                       	dc.b	smpsNoAttack, $01
0008F4D3 E109                       	smpsAlterNote       $09
0008F4D5 E701                       	dc.b	smpsNoAttack, $01
0008F4D7 E10F                       	smpsAlterNote       $0F
0008F4D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4DD E10C                       	smpsAlterNote       $0C
0008F4DF E701                       	dc.b	smpsNoAttack, $01
0008F4E1 E106                       	smpsAlterNote       $06
0008F4E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4E7 E10C                       	smpsAlterNote       $0C
0008F4E9 E701                       	dc.b	smpsNoAttack, $01
0008F4EB E10F                       	smpsAlterNote       $0F
0008F4ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4F1 E109                       	smpsAlterNote       $09
0008F4F3 E701                       	dc.b	smpsNoAttack, $01
0008F4F5 E105                       	smpsAlterNote       $05
0008F4F7 E701                       	dc.b	smpsNoAttack, $01
0008F4F9 E106                       	smpsAlterNote       $06
0008F4FB E701                       	dc.b	smpsNoAttack, $01
0008F4FD E10C                       	smpsAlterNote       $0C
0008F4FF E701                       	dc.b	smpsNoAttack, $01
0008F501 E110                       	smpsAlterNote       $10
0008F503 E701                       	dc.b	smpsNoAttack, $01
0008F505 E10C                       	smpsAlterNote       $0C
0008F507 E701                       	dc.b	smpsNoAttack, $01
0008F509 E109                       	smpsAlterNote       $09
0008F50B E701                       	dc.b	smpsNoAttack, $01
0008F50D E105                       	smpsAlterNote       $05
0008F50F E701                       	dc.b	smpsNoAttack, $01
0008F511 E109                       	smpsAlterNote       $09
0008F513 E701                       	dc.b	smpsNoAttack, $01
0008F515 E10F                       	smpsAlterNote       $0F
0008F517 E701                       	dc.b	smpsNoAttack, $01
0008F519 E110                       	smpsAlterNote       $10
0008F51B E701                       	dc.b	smpsNoAttack, $01
0008F51D E10C                       	smpsAlterNote       $0C
0008F51F E701                       	dc.b	smpsNoAttack, $01
0008F521 E106                       	smpsAlterNote       $06
0008F523 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F527 E109                       	smpsAlterNote       $09
0008F529 E701                       	dc.b	smpsNoAttack, $01
0008F52B E10F                       	smpsAlterNote       $0F
0008F52D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F531 E109                       	smpsAlterNote       $09
0008F533 E701                       	dc.b	smpsNoAttack, $01
0008F535 E106                       	smpsAlterNote       $06
0008F537 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F53B E10C                       	smpsAlterNote       $0C
0008F53D E701                       	dc.b	smpsNoAttack, $01
0008F53F E110                       	smpsAlterNote       $10
0008F541 E701                       	dc.b	smpsNoAttack, $01
0008F543 E10F                       	smpsAlterNote       $0F
0008F545 E701                       	dc.b	smpsNoAttack, $01
0008F547 E109                       	smpsAlterNote       $09
0008F549 E701                       	dc.b	smpsNoAttack, $01
0008F54B E105                       	smpsAlterNote       $05
0008F54D E701                       	dc.b	smpsNoAttack, $01
0008F54F E109                       	smpsAlterNote       $09
0008F551 E701                       	dc.b	smpsNoAttack, $01
0008F553 E10F                       	smpsAlterNote       $0F
0008F555 E701                       	dc.b	smpsNoAttack, $01
0008F557 E110                       	smpsAlterNote       $10
0008F559 E701                       	dc.b	smpsNoAttack, $01
0008F55B E10C                       	smpsAlterNote       $0C
0008F55D E701                       	dc.b	smpsNoAttack, $01
0008F55F E106                       	smpsAlterNote       $06
0008F561 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F565 E109                       	smpsAlterNote       $09
0008F567 E701                       	dc.b	smpsNoAttack, $01
0008F569 E10F                       	smpsAlterNote       $0F
0008F56B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F56F E109                       	smpsAlterNote       $09
0008F571 E701                       	dc.b	smpsNoAttack, $01
0008F573 E106                       	smpsAlterNote       $06
0008F575 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F579 E10C                       	smpsAlterNote       $0C
0008F57B E701                       	dc.b	smpsNoAttack, $01
0008F57D E110                       	smpsAlterNote       $10
0008F57F E701                       	dc.b	smpsNoAttack, $01
0008F581 E10F                       	smpsAlterNote       $0F
0008F583 E701                       	dc.b	smpsNoAttack, $01
0008F585 E109                       	smpsAlterNote       $09
0008F587 E701                       	dc.b	smpsNoAttack, $01
0008F589 E105                       	smpsAlterNote       $05
0008F58B E701                       	dc.b	smpsNoAttack, $01
0008F58D E109                       	smpsAlterNote       $09
0008F58F E701                       	dc.b	smpsNoAttack, $01
0008F591 E10C                       	smpsAlterNote       $0C
0008F593 E701                       	dc.b	smpsNoAttack, $01
0008F595 E110                       	smpsAlterNote       $10
0008F597 E701                       	dc.b	smpsNoAttack, $01
0008F599 E10C                       	smpsAlterNote       $0C
0008F59B E701                       	dc.b	smpsNoAttack, $01
0008F59D E106                       	smpsAlterNote       $06
0008F59F E701                       	dc.b	smpsNoAttack, $01
0008F5A1 E105                       	smpsAlterNote       $05
0008F5A3 E701                       	dc.b	smpsNoAttack, $01
0008F5A5 E109                       	smpsAlterNote       $09
0008F5A7 E701                       	dc.b	smpsNoAttack, $01
0008F5A9 E10F                       	smpsAlterNote       $0F
0008F5AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5AF E10C                       	smpsAlterNote       $0C
0008F5B1 E701                       	dc.b	smpsNoAttack, $01
0008F5B3 E106                       	smpsAlterNote       $06
0008F5B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5B9 E10C                       	smpsAlterNote       $0C
0008F5BB E701                       	dc.b	smpsNoAttack, $01
0008F5BD E10F                       	smpsAlterNote       $0F
0008F5BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5C3 E109                       	smpsAlterNote       $09
0008F5C5 E701                       	dc.b	smpsNoAttack, $01
0008F5C7 E105                       	smpsAlterNote       $05
0008F5C9 E701                       	dc.b	smpsNoAttack, $01
0008F5CB E106                       	smpsAlterNote       $06
0008F5CD E701                       	dc.b	smpsNoAttack, $01
0008F5CF E10C                       	smpsAlterNote       $0C
0008F5D1 E701                       	dc.b	smpsNoAttack, $01
0008F5D3 E110                       	smpsAlterNote       $10
0008F5D5 E701                       	dc.b	smpsNoAttack, $01
0008F5D7 E10C                       	smpsAlterNote       $0C
0008F5D9 E701                       	dc.b	smpsNoAttack, $01
0008F5DB E109                       	smpsAlterNote       $09
0008F5DD E701                       	dc.b	smpsNoAttack, $01
0008F5DF E105                       	smpsAlterNote       $05
0008F5E1 E701                       	dc.b	smpsNoAttack, $01
0008F5E3 E109                       	smpsAlterNote       $09
0008F5E5 E701                       	dc.b	smpsNoAttack, $01
0008F5E7 E10F                       	smpsAlterNote       $0F
0008F5E9 E701                       	dc.b	smpsNoAttack, $01
0008F5EB E110                       	smpsAlterNote       $10
0008F5ED E701                       	dc.b	smpsNoAttack, $01
0008F5EF E10C                       	smpsAlterNote       $0C
0008F5F1 E701                       	dc.b	smpsNoAttack, $01
0008F5F3 E106                       	smpsAlterNote       $06
0008F5F5 E701                       	dc.b	smpsNoAttack, $01
0008F5F7 E10B                       	smpsAlterNote       $0B
0008F5F9 BF02                       	dc.b	nD5, $02
0008F5FB E10C                       	smpsAlterNote       $0C
0008F5FD C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008F603 E109                       	smpsAlterNote       $09
0008F605 E701                       	dc.b	smpsNoAttack, $01
0008F607 E105                       	smpsAlterNote       $05
0008F609 E701                       	dc.b	smpsNoAttack, $01
0008F60B E109                       	smpsAlterNote       $09
0008F60D E701                       	dc.b	smpsNoAttack, $01
0008F60F E10F                       	smpsAlterNote       $0F
0008F611 E701                       	dc.b	smpsNoAttack, $01
0008F613 E110                       	smpsAlterNote       $10
0008F615 E701                       	dc.b	smpsNoAttack, $01
0008F617 E10C                       	smpsAlterNote       $0C
0008F619 E701                       	dc.b	smpsNoAttack, $01
0008F61B E106                       	smpsAlterNote       $06
0008F61D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F621 E109                       	smpsAlterNote       $09
0008F623 E701                       	dc.b	smpsNoAttack, $01
0008F625 E10F                       	smpsAlterNote       $0F
0008F627 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F62B E109                       	smpsAlterNote       $09
0008F62D E701                       	dc.b	smpsNoAttack, $01
0008F62F E106                       	smpsAlterNote       $06
0008F631 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F635 E10C                       	smpsAlterNote       $0C
0008F637 E701                       	dc.b	smpsNoAttack, $01
0008F639 E110                       	smpsAlterNote       $10
0008F63B E701                       	dc.b	smpsNoAttack, $01
0008F63D E10F                       	smpsAlterNote       $0F
0008F63F E701                       	dc.b	smpsNoAttack, $01
0008F641 E109                       	smpsAlterNote       $09
0008F643 E701                       	dc.b	smpsNoAttack, $01
0008F645 E105                       	smpsAlterNote       $05
0008F647 E701                       	dc.b	smpsNoAttack, $01
0008F649 E109                       	smpsAlterNote       $09
0008F64B E701                       	dc.b	smpsNoAttack, $01
0008F64D E10C                       	smpsAlterNote       $0C
0008F64F E701                       	dc.b	smpsNoAttack, $01
0008F651 E110                       	smpsAlterNote       $10
0008F653 E701                       	dc.b	smpsNoAttack, $01
0008F655 E10C                       	smpsAlterNote       $0C
0008F657 E701                       	dc.b	smpsNoAttack, $01
0008F659 E106                       	smpsAlterNote       $06
0008F65B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F65F E10D                       	smpsAlterNote       $0D
0008F661 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008F669 E10C                       	smpsAlterNote       $0C
0008F66B C10D                       	dc.b	nE5, $0D
0008F66D E106                       	smpsAlterNote       $06
0008F66F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F673 E109                       	smpsAlterNote       $09
0008F675 E701                       	dc.b	smpsNoAttack, $01
0008F677 E10F                       	smpsAlterNote       $0F
0008F679 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F67D E109                       	smpsAlterNote       $09
0008F67F E701                       	dc.b	smpsNoAttack, $01
0008F681 E106                       	smpsAlterNote       $06
0008F683 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F687 E10C                       	smpsAlterNote       $0C
0008F689 E701                       	dc.b	smpsNoAttack, $01
0008F68B E110                       	smpsAlterNote       $10
0008F68D E701                       	dc.b	smpsNoAttack, $01
0008F68F E10F                       	smpsAlterNote       $0F
0008F691 E701                       	dc.b	smpsNoAttack, $01
0008F693 E109                       	smpsAlterNote       $09
0008F695 E701                       	dc.b	smpsNoAttack, $01
0008F697 E105                       	smpsAlterNote       $05
0008F699 E701                       	dc.b	smpsNoAttack, $01
0008F69B E106                       	smpsAlterNote       $06
0008F69D 800F                       	dc.b	nRst, $0F
0008F6A1 E6FF                       	smpsAlterVol        $FF
0008F6A3 E10F                       	smpsAlterNote       $0F
0008F6A5 BA01                       	dc.b	nA4, $01
0008F6A7 E110                       	smpsAlterNote       $10
0008F6A9 BB02                       	dc.b	nBb4, $02
0008F6AB E10F                       	smpsAlterNote       $0F
0008F6AD BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008F6B3 E10B                       	smpsAlterNote       $0B
0008F6B5 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008F6B9 E10C                       	smpsAlterNote       $0C
0008F6BB C103                       	dc.b	nE5, $03
0008F6BD E10D                       	smpsAlterNote       $0D
0008F6BF C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008F6C9 E10B                       	smpsAlterNote       $0B
0008F6CB BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008F6CF E104                       	smpsAlterNote       $04
0008F6D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6D5 E10A                       	smpsAlterNote       $0A
0008F6D7 E701                       	dc.b	smpsNoAttack, $01
0008F6D9 E10D                       	smpsAlterNote       $0D
0008F6DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6DF E107                       	smpsAlterNote       $07
0008F6E1 E701                       	dc.b	smpsNoAttack, $01
0008F6E3 E104                       	smpsAlterNote       $04
0008F6E5 8001                       	dc.b	nRst, $01
0008F6E7 E110                       	smpsAlterNote       $10
0008F6E9 C703                       	dc.b	nBb5, $03
0008F6EB E10F                       	smpsAlterNote       $0F
0008F6ED C603 8001                  	dc.b	nA5, $03, nRst, $01
0008F6F1 E10D                       	smpsAlterNote       $0D
0008F6F3 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008F6F7 E10C                       	smpsAlterNote       $0C
0008F6F9 E701                       	dc.b	smpsNoAttack, $01
0008F6FB E108                       	smpsAlterNote       $08
0008F6FD E701                       	dc.b	smpsNoAttack, $01
0008F6FF E109                       	smpsAlterNote       $09
0008F701 E701                       	dc.b	smpsNoAttack, $01
0008F703 E10F                       	smpsAlterNote       $0F
0008F705 E701                       	dc.b	smpsNoAttack, $01
0008F707 E113                       	smpsAlterNote       $13
0008F709 E701                       	dc.b	smpsNoAttack, $01
0008F70B E10F                       	smpsAlterNote       $0F
0008F70D E701                       	dc.b	smpsNoAttack, $01
0008F70F E10C                       	smpsAlterNote       $0C
0008F711 E701                       	dc.b	smpsNoAttack, $01
0008F713 E108                       	smpsAlterNote       $08
0008F715 E701                       	dc.b	smpsNoAttack, $01
0008F717 E10C                       	smpsAlterNote       $0C
0008F719 E701                       	dc.b	smpsNoAttack, $01
0008F71B E112                       	smpsAlterNote       $12
0008F71D E701                       	dc.b	smpsNoAttack, $01
0008F71F E113                       	smpsAlterNote       $13
0008F721 E701                       	dc.b	smpsNoAttack, $01
0008F723 E10F                       	smpsAlterNote       $0F
0008F725 E701                       	dc.b	smpsNoAttack, $01
0008F727 E109                       	smpsAlterNote       $09
0008F729 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F72D E10C                       	smpsAlterNote       $0C
0008F72F E701                       	dc.b	smpsNoAttack, $01
0008F731 E112                       	smpsAlterNote       $12
0008F733 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F737 E10C                       	smpsAlterNote       $0C
0008F739 E701                       	dc.b	smpsNoAttack, $01
0008F73B E109                       	smpsAlterNote       $09
0008F73D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F741 E10F                       	smpsAlterNote       $0F
0008F743 E701                       	dc.b	smpsNoAttack, $01
0008F745 E113                       	smpsAlterNote       $13
0008F747 E701                       	dc.b	smpsNoAttack, $01
0008F749 E112                       	smpsAlterNote       $12
0008F74B E701                       	dc.b	smpsNoAttack, $01
0008F74D E10C                       	smpsAlterNote       $0C
0008F74F E701                       	dc.b	smpsNoAttack, $01
0008F751 E108                       	smpsAlterNote       $08
0008F753 E701                       	dc.b	smpsNoAttack, $01
0008F755 E10C                       	smpsAlterNote       $0C
0008F757 E701                       	dc.b	smpsNoAttack, $01
0008F759 E10F                       	smpsAlterNote       $0F
0008F75B E701                       	dc.b	smpsNoAttack, $01
0008F75D E113                       	smpsAlterNote       $13
0008F75F E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008F763 E10B                       	smpsAlterNote       $0B
0008F765 BF03                       	dc.b	nD5, $03
0008F767 E10C                       	smpsAlterNote       $0C
0008F769 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008F76D E10D                       	smpsAlterNote       $0D
0008F76F C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008F779 E10B                       	smpsAlterNote       $0B
0008F77B BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008F787 E110                       	smpsAlterNote       $10
0008F789 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F78D E10F                       	smpsAlterNote       $0F
0008F78F C604                       	dc.b	nA5, $04
0008F791 E10D                       	smpsAlterNote       $0D
0008F793 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008F799 E109                       	smpsAlterNote       $09
0008F79B E701                       	dc.b	smpsNoAttack, $01
0008F79D E108                       	smpsAlterNote       $08
0008F79F E701                       	dc.b	smpsNoAttack, $01
0008F7A1 E10C                       	smpsAlterNote       $0C
0008F7A3 E701                       	dc.b	smpsNoAttack, $01
0008F7A5 E112                       	smpsAlterNote       $12
0008F7A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7AB E10F                       	smpsAlterNote       $0F
0008F7AD E701                       	dc.b	smpsNoAttack, $01
0008F7AF E109                       	smpsAlterNote       $09
0008F7B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7B5 E10F                       	smpsAlterNote       $0F
0008F7B7 E701                       	dc.b	smpsNoAttack, $01
0008F7B9 E112                       	smpsAlterNote       $12
0008F7BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7BF E10C                       	smpsAlterNote       $0C
0008F7C1 E701                       	dc.b	smpsNoAttack, $01
0008F7C3 E108                       	smpsAlterNote       $08
0008F7C5 E701                       	dc.b	smpsNoAttack, $01
0008F7C7 E109                       	smpsAlterNote       $09
0008F7C9 E701                       	dc.b	smpsNoAttack, $01
0008F7CB E10F                       	smpsAlterNote       $0F
0008F7CD E701                       	dc.b	smpsNoAttack, $01
0008F7CF E113                       	smpsAlterNote       $13
0008F7D1 E701                       	dc.b	smpsNoAttack, $01
0008F7D3 E10F                       	smpsAlterNote       $0F
0008F7D5 E701                       	dc.b	smpsNoAttack, $01
0008F7D7 E10C                       	smpsAlterNote       $0C
0008F7D9 E701                       	dc.b	smpsNoAttack, $01
0008F7DB E108                       	smpsAlterNote       $08
0008F7DD E701                       	dc.b	smpsNoAttack, $01
0008F7DF E10C                       	smpsAlterNote       $0C
0008F7E1 E701                       	dc.b	smpsNoAttack, $01
0008F7E3 E112                       	smpsAlterNote       $12
0008F7E5 E701                       	dc.b	smpsNoAttack, $01
0008F7E7 E113                       	smpsAlterNote       $13
0008F7E9 E701                       	dc.b	smpsNoAttack, $01
0008F7EB E10F                       	smpsAlterNote       $0F
0008F7ED E701                       	dc.b	smpsNoAttack, $01
0008F7EF E109                       	smpsAlterNote       $09
0008F7F1 E701                       	dc.b	smpsNoAttack, $01
0008F7F3 E10D                       	smpsAlterNote       $0D
0008F7F5 C402                       	dc.b	nG5, $02
0008F7F7 E10F                       	smpsAlterNote       $0F
0008F7F9 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008F803 E10D                       	smpsAlterNote       $0D
0008F805 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F80B E10B                       	smpsAlterNote       $0B
0008F80D BF0D                       	dc.b	nD5, $0D
0008F80F E108                       	smpsAlterNote       $08
0008F811 E701                       	dc.b	smpsNoAttack, $01
0008F813 E104                       	smpsAlterNote       $04
0008F815 E701                       	dc.b	smpsNoAttack, $01
0008F817 E105                       	smpsAlterNote       $05
0008F819 E701                       	dc.b	smpsNoAttack, $01
0008F81B E10B                       	smpsAlterNote       $0B
0008F81D E701                       	dc.b	smpsNoAttack, $01
0008F81F E10F                       	smpsAlterNote       $0F
0008F821 E701                       	dc.b	smpsNoAttack, $01
0008F823 E10B                       	smpsAlterNote       $0B
0008F825 E701                       	dc.b	smpsNoAttack, $01
0008F827 E108                       	smpsAlterNote       $08
0008F829 E701                       	dc.b	smpsNoAttack, $01
0008F82B E104                       	smpsAlterNote       $04
0008F82D E701                       	dc.b	smpsNoAttack, $01
0008F82F E108                       	smpsAlterNote       $08
0008F831 E701                       	dc.b	smpsNoAttack, $01
0008F833 E10E                       	smpsAlterNote       $0E
0008F835 E701                       	dc.b	smpsNoAttack, $01
0008F837 E10F                       	smpsAlterNote       $0F
0008F839 E701                       	dc.b	smpsNoAttack, $01
0008F83B E10C                       	smpsAlterNote       $0C
0008F83D C101                       	dc.b	nE5, $01
0008F83F E10D                       	smpsAlterNote       $0D
0008F841 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008F849 E10F                       	smpsAlterNote       $0F
0008F84B C607                       	dc.b	nA5, $07
0008F84D E10C                       	smpsAlterNote       $0C
0008F84F CD07                       	dc.b	nE6, $07
0008F851 E10D                       	smpsAlterNote       $0D
0008F853 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008F857 E10C                       	smpsAlterNote       $0C
0008F859 CD03                       	dc.b	nE6, $03
0008F85B E10A                       	smpsAlterNote       $0A
0008F85D C903 8001                  	dc.b	nC6, $03, nRst, $01
0008F861 E10D                       	smpsAlterNote       $0D
0008F863 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008F869 E10A                       	smpsAlterNote       $0A
0008F86B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F86F E110                       	smpsAlterNote       $10
0008F871 E701                       	dc.b	smpsNoAttack, $01
0008F873 E114                       	smpsAlterNote       $14
0008F875 E701                       	dc.b	smpsNoAttack, $01
0008F877 E113                       	smpsAlterNote       $13
0008F879 E701                       	dc.b	smpsNoAttack, $01
0008F87B E10D                       	smpsAlterNote       $0D
0008F87D E701                       	dc.b	smpsNoAttack, $01
0008F87F E109                       	smpsAlterNote       $09
0008F881 E701                       	dc.b	smpsNoAttack, $01
0008F883 E10D                       	smpsAlterNote       $0D
0008F885 E701                       	dc.b	smpsNoAttack, $01
0008F887 E110                       	smpsAlterNote       $10
0008F889 E701                       	dc.b	smpsNoAttack, $01
0008F88B E114                       	smpsAlterNote       $14
0008F88D E701                       	dc.b	smpsNoAttack, $01
0008F88F E10F                       	smpsAlterNote       $0F
0008F891 C607                       	dc.b	nA5, $07
0008F893 E10D                       	smpsAlterNote       $0D
0008F895 C40D                       	dc.b	nG5, $0D
0008F897 E10A                       	smpsAlterNote       $0A
0008F899 E701                       	dc.b	smpsNoAttack, $01
0008F89B E106                       	smpsAlterNote       $06
0008F89D E701                       	dc.b	smpsNoAttack, $01
0008F89F E10A                       	smpsAlterNote       $0A
0008F8A1 E701                       	dc.b	smpsNoAttack, $01
0008F8A3 E10D                       	smpsAlterNote       $0D
0008F8A5 E701                       	dc.b	smpsNoAttack, $01
0008F8A7 E111                       	smpsAlterNote       $11
0008F8A9 E701                       	dc.b	smpsNoAttack, $01
0008F8AB E10D                       	smpsAlterNote       $0D
0008F8AD E701                       	dc.b	smpsNoAttack, $01
0008F8AF E107                       	smpsAlterNote       $07
0008F8B1 E701                       	dc.b	smpsNoAttack, $01
0008F8B3 E106                       	smpsAlterNote       $06
0008F8B5 E701                       	dc.b	smpsNoAttack, $01
0008F8B7 E10A                       	smpsAlterNote       $0A
0008F8B9 E701                       	dc.b	smpsNoAttack, $01
0008F8BB E110                       	smpsAlterNote       $10
0008F8BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8C1 E10D                       	smpsAlterNote       $0D
0008F8C3 E701                       	dc.b	smpsNoAttack, $01
0008F8C5 E107                       	smpsAlterNote       $07
0008F8C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8CB E10F                       	smpsAlterNote       $0F
0008F8CD C60E                       	dc.b	nA5, $0E
0008F8CF E109                       	smpsAlterNote       $09
0008F8D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8D5 E10F                       	smpsAlterNote       $0F
0008F8D7 E701                       	dc.b	smpsNoAttack, $01
0008F8D9 E112                       	smpsAlterNote       $12
0008F8DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8DF E10C                       	smpsAlterNote       $0C
0008F8E1 E701                       	dc.b	smpsNoAttack, $01
0008F8E3 E108                       	smpsAlterNote       $08
0008F8E5 E701                       	dc.b	smpsNoAttack, $01
0008F8E7 E109                       	smpsAlterNote       $09
0008F8E9 E701                       	dc.b	smpsNoAttack, $01
0008F8EB E10F                       	smpsAlterNote       $0F
0008F8ED E701                       	dc.b	smpsNoAttack, $01
0008F8EF E113                       	smpsAlterNote       $13
0008F8F1 E701                       	dc.b	smpsNoAttack, $01
0008F8F3 E10F                       	smpsAlterNote       $0F
0008F8F5 E701                       	dc.b	smpsNoAttack, $01
0008F8F7 E10C                       	smpsAlterNote       $0C
0008F8F9 E701                       	dc.b	smpsNoAttack, $01
0008F8FB E108                       	smpsAlterNote       $08
0008F8FD E701                       	dc.b	smpsNoAttack, $01
0008F8FF E109                       	smpsAlterNote       $09
0008F901 8001                       	dc.b	nRst, $01
0008F903 E110                       	smpsAlterNote       $10
0008F905 C70D                       	dc.b	nBb5, $0D
0008F907 E10D                       	smpsAlterNote       $0D
0008F909 E701                       	dc.b	smpsNoAttack, $01
0008F90B E109                       	smpsAlterNote       $09
0008F90D E701                       	dc.b	smpsNoAttack, $01
0008F90F E10D                       	smpsAlterNote       $0D
0008F911 E701                       	dc.b	smpsNoAttack, $01
0008F913 E113                       	smpsAlterNote       $13
0008F915 E701                       	dc.b	smpsNoAttack, $01
0008F917 E114                       	smpsAlterNote       $14
0008F919 E701                       	dc.b	smpsNoAttack, $01
0008F91B E110                       	smpsAlterNote       $10
0008F91D E701                       	dc.b	smpsNoAttack, $01
0008F91F E10A                       	smpsAlterNote       $0A
0008F921 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F925 E10D                       	smpsAlterNote       $0D
0008F927 E701                       	dc.b	smpsNoAttack, $01
0008F929 E113                       	smpsAlterNote       $13
0008F92B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F92F E10D                       	smpsAlterNote       $0D
0008F931 E701                       	dc.b	smpsNoAttack, $01
0008F933 E10A                       	smpsAlterNote       $0A
0008F935 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008F93F E10B                       	smpsAlterNote       $0B
0008F941 8001                       	dc.b	nRst, $01
0008F943 E10C                       	smpsAlterNote       $0C
0008F945 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008F949 E10B                       	smpsAlterNote       $0B
0008F94B CB0D                       	dc.b	nD6, $0D
0008F94D E105                       	smpsAlterNote       $05
0008F94F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F953 E108                       	smpsAlterNote       $08
0008F955 E701                       	dc.b	smpsNoAttack, $01
0008F957 E10E                       	smpsAlterNote       $0E
0008F959 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F95D E108                       	smpsAlterNote       $08
0008F95F E701                       	dc.b	smpsNoAttack, $01
0008F961 E105                       	smpsAlterNote       $05
0008F963 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F967 E10B                       	smpsAlterNote       $0B
0008F969 E701                       	dc.b	smpsNoAttack, $01
0008F96B E10F                       	smpsAlterNote       $0F
0008F96D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F971 E10C                       	smpsAlterNote       $0C
0008F973 CC0D                       	dc.b	nEb6, $0D
0008F975 E106                       	smpsAlterNote       $06
0008F977 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F97B E109                       	smpsAlterNote       $09
0008F97D E701                       	dc.b	smpsNoAttack, $01
0008F97F E10C                       	smpsAlterNote       $0C
0008F981 8001                       	dc.b	nRst, $01
0008F983 E10A                       	smpsAlterNote       $0A
0008F985 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008F991 CB0E                       	dc.b	nD6, $0E
0008F993 E105                       	smpsAlterNote       $05
0008F995 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F999 E10B                       	smpsAlterNote       $0B
0008F99B E701                       	dc.b	smpsNoAttack, $01
0008F99D E10E                       	smpsAlterNote       $0E
0008F99F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9A3 E108                       	smpsAlterNote       $08
0008F9A5 E701                       	dc.b	smpsNoAttack, $01
0008F9A7 E104                       	smpsAlterNote       $04
0008F9A9 E701                       	dc.b	smpsNoAttack, $01
0008F9AB E105                       	smpsAlterNote       $05
0008F9AD E701                       	dc.b	smpsNoAttack, $01
0008F9AF E10B                       	smpsAlterNote       $0B
0008F9B1 E701                       	dc.b	smpsNoAttack, $01
0008F9B3 E10F                       	smpsAlterNote       $0F
0008F9B5 E701                       	dc.b	smpsNoAttack, $01
0008F9B7 E10D                       	smpsAlterNote       $0D
0008F9B9 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008F9BD E10C                       	smpsAlterNote       $0C
0008F9BF CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008F9C3 E10A                       	smpsAlterNote       $0A
0008F9C5 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008F9D1 CB0D                       	dc.b	nD6, $0D
0008F9D3 E108                       	smpsAlterNote       $08
0008F9D5 E701                       	dc.b	smpsNoAttack, $01
0008F9D7 E104                       	smpsAlterNote       $04
0008F9D9 E701                       	dc.b	smpsNoAttack, $01
0008F9DB E105                       	smpsAlterNote       $05
0008F9DD E701                       	dc.b	smpsNoAttack, $01
0008F9DF E10B                       	smpsAlterNote       $0B
0008F9E1 E701                       	dc.b	smpsNoAttack, $01
0008F9E3 E10F                       	smpsAlterNote       $0F
0008F9E5 E701                       	dc.b	smpsNoAttack, $01
0008F9E7 E10B                       	smpsAlterNote       $0B
0008F9E9 E701                       	dc.b	smpsNoAttack, $01
0008F9EB E108                       	smpsAlterNote       $08
0008F9ED E701                       	dc.b	smpsNoAttack, $01
0008F9EF E104                       	smpsAlterNote       $04
0008F9F1 E701                       	dc.b	smpsNoAttack, $01
0008F9F3 E108                       	smpsAlterNote       $08
0008F9F5 E701                       	dc.b	smpsNoAttack, $01
0008F9F7 E10E                       	smpsAlterNote       $0E
0008F9F9 E701                       	dc.b	smpsNoAttack, $01
0008F9FB E10F                       	smpsAlterNote       $0F
0008F9FD E701                       	dc.b	smpsNoAttack, $01
0008F9FF E10C                       	smpsAlterNote       $0C
0008FA01 CC0D                       	dc.b	nEb6, $0D
0008FA03 E109                       	smpsAlterNote       $09
0008FA05 E701                       	dc.b	smpsNoAttack, $01
0008FA07 E105                       	smpsAlterNote       $05
0008FA09 E701                       	dc.b	smpsNoAttack, $01
0008FA0B E106                       	smpsAlterNote       $06
0008FA0D E701                       	dc.b	smpsNoAttack, $01
0008FA0F E10C                       	smpsAlterNote       $0C
0008FA11 E701                       	dc.b	smpsNoAttack, $01
0008FA13 E10A                       	smpsAlterNote       $0A
0008FA15 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008FA21 CB0D                       	dc.b	nD6, $0D
0008FA23 E108                       	smpsAlterNote       $08
0008FA25 E701                       	dc.b	smpsNoAttack, $01
0008FA27 E104                       	smpsAlterNote       $04
0008FA29 E701                       	dc.b	smpsNoAttack, $01
0008FA2B E108                       	smpsAlterNote       $08
0008FA2D E701                       	dc.b	smpsNoAttack, $01
0008FA2F E10B                       	smpsAlterNote       $0B
0008FA31 E701                       	dc.b	smpsNoAttack, $01
0008FA33 E10F                       	smpsAlterNote       $0F
0008FA35 E701                       	dc.b	smpsNoAttack, $01
0008FA37 E10B                       	smpsAlterNote       $0B
0008FA39 E701                       	dc.b	smpsNoAttack, $01
0008FA3B E105                       	smpsAlterNote       $05
0008FA3D E701                       	dc.b	smpsNoAttack, $01
0008FA3F E104                       	smpsAlterNote       $04
0008FA41 E701                       	dc.b	smpsNoAttack, $01
0008FA43 E108                       	smpsAlterNote       $08
0008FA45 E701                       	dc.b	smpsNoAttack, $01
0008FA47 E10E                       	smpsAlterNote       $0E
0008FA49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA4D E10B                       	smpsAlterNote       $0B
0008FA4F E701                       	dc.b	smpsNoAttack, $01
0008FA51 E105                       	smpsAlterNote       $05
0008FA53 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008FA5B 03                         	dc.b	$03
0008FA5C E601                       	smpsAlterVol        $01
0008FA5E F6F1 D1                    	smpsJump            music84_Jump01
0008FA61                            
0008FA61                            ; FM5 Data
0008FA61                            music84_FM5:
0008FA63 E080                       	smpsPan             panLeft, $00
0008FA65 8003                       	dc.b	nRst, $03
0008FA67 E10D                       	smpsAlterNote       $0D
0008FA69 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008FA6D E10C                       	smpsAlterNote       $0C
0008FA6F C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008FA73 E10F                       	smpsAlterNote       $0F
0008FA75 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008FA7B E6FE                       	smpsAlterVol        $FE
0008FA7D C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008FA83 E10D                       	smpsAlterNote       $0D
0008FA85 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008FA8B E10C                       	smpsAlterNote       $0C
0008FA8D C102 8001                  	dc.b	nE5, $02, nRst, $01
0008FA91 E10A                       	smpsAlterNote       $0A
0008FA93 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008FA99 03                         	dc.b	$03
0008FA9A                            
0008FA9A                            music84_Jump00:
0008FA9A 8004                       	dc.b	nRst, $04
0008FA9C E602                       	smpsAlterVol        $02
0008FA9E E10D                       	smpsAlterNote       $0D
0008FAA0 B60D                       	dc.b	nF4, $0D
0008FAA2 E107                       	smpsAlterNote       $07
0008FAA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAA8 E10A                       	smpsAlterNote       $0A
0008FAAA E701                       	dc.b	smpsNoAttack, $01
0008FAAC E110                       	smpsAlterNote       $10
0008FAAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAB2 E10A                       	smpsAlterNote       $0A
0008FAB4 E701                       	dc.b	smpsNoAttack, $01
0008FAB6 E107                       	smpsAlterNote       $07
0008FAB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FABC E10D                       	smpsAlterNote       $0D
0008FABE E701                       	dc.b	smpsNoAttack, $01
0008FAC0 E111                       	smpsAlterNote       $11
0008FAC2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FAC6 E10D                       	smpsAlterNote       $0D
0008FAC8 B80D                       	dc.b	nG4, $0D
0008FACA E107                       	smpsAlterNote       $07
0008FACC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAD0 E10A                       	smpsAlterNote       $0A
0008FAD2 E701                       	dc.b	smpsNoAttack, $01
0008FAD4 E110                       	smpsAlterNote       $10
0008FAD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FADA E10A                       	smpsAlterNote       $0A
0008FADC E701                       	dc.b	smpsNoAttack, $01
0008FADE E107                       	smpsAlterNote       $07
0008FAE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAE4 E10D                       	smpsAlterNote       $0D
0008FAE6 E701                       	dc.b	smpsNoAttack, $01
0008FAE8 E111                       	smpsAlterNote       $11
0008FAEA E701                       	dc.b	smpsNoAttack, $01
0008FAEC E110                       	smpsAlterNote       $10
0008FAEE E701                       	dc.b	smpsNoAttack, $01
0008FAF0 E10A                       	smpsAlterNote       $0A
0008FAF2 E701                       	dc.b	smpsNoAttack, $01
0008FAF4 E106                       	smpsAlterNote       $06
0008FAF6 E701                       	dc.b	smpsNoAttack, $01
0008FAF8 E10A                       	smpsAlterNote       $0A
0008FAFA E701                       	dc.b	smpsNoAttack, $01
0008FAFC E10D                       	smpsAlterNote       $0D
0008FAFE E701                       	dc.b	smpsNoAttack, $01
0008FB00 E111                       	smpsAlterNote       $11
0008FB02 E701                       	dc.b	smpsNoAttack, $01
0008FB04 E10D                       	smpsAlterNote       $0D
0008FB06 E701                       	dc.b	smpsNoAttack, $01
0008FB08 E10F                       	smpsAlterNote       $0F
0008FB0A BA0E                       	dc.b	nA4, $0E
0008FB0C E109                       	smpsAlterNote       $09
0008FB0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB12 E10F                       	smpsAlterNote       $0F
0008FB14 E701                       	dc.b	smpsNoAttack, $01
0008FB16 E112                       	smpsAlterNote       $12
0008FB18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB1C E10C                       	smpsAlterNote       $0C
0008FB1E E701                       	dc.b	smpsNoAttack, $01
0008FB20 E108                       	smpsAlterNote       $08
0008FB22 E701                       	dc.b	smpsNoAttack, $01
0008FB24 E109                       	smpsAlterNote       $09
0008FB26 E701                       	dc.b	smpsNoAttack, $01
0008FB28 E10F                       	smpsAlterNote       $0F
0008FB2A E701                       	dc.b	smpsNoAttack, $01
0008FB2C E113                       	smpsAlterNote       $13
0008FB2E E701                       	dc.b	smpsNoAttack, $01
0008FB30 E10F                       	smpsAlterNote       $0F
0008FB32 E701                       	dc.b	smpsNoAttack, $01
0008FB34 E109                       	smpsAlterNote       $09
0008FB36 E701                       	dc.b	smpsNoAttack, $01
0008FB38 E108                       	smpsAlterNote       $08
0008FB3A E701                       	dc.b	smpsNoAttack, $01
0008FB3C E10C                       	smpsAlterNote       $0C
0008FB3E E701                       	dc.b	smpsNoAttack, $01
0008FB40 E112                       	smpsAlterNote       $12
0008FB42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB46 E10F                       	smpsAlterNote       $0F
0008FB48 E701                       	dc.b	smpsNoAttack, $01
0008FB4A E109                       	smpsAlterNote       $09
0008FB4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB50 E10F                       	smpsAlterNote       $0F
0008FB52 E701                       	dc.b	smpsNoAttack, $01
0008FB54 E112                       	smpsAlterNote       $12
0008FB56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB5A E10C                       	smpsAlterNote       $0C
0008FB5C E701                       	dc.b	smpsNoAttack, $01
0008FB5E E108                       	smpsAlterNote       $08
0008FB60 E701                       	dc.b	smpsNoAttack, $01
0008FB62 E109                       	smpsAlterNote       $09
0008FB64 E701                       	dc.b	smpsNoAttack, $01
0008FB66 E10F                       	smpsAlterNote       $0F
0008FB68 E701                       	dc.b	smpsNoAttack, $01
0008FB6A E113                       	smpsAlterNote       $13
0008FB6C E701                       	dc.b	smpsNoAttack, $01
0008FB6E E10F                       	smpsAlterNote       $0F
0008FB70 E701                       	dc.b	smpsNoAttack, $01
0008FB72 E10C                       	smpsAlterNote       $0C
0008FB74 E701                       	dc.b	smpsNoAttack, $01
0008FB76 E108                       	smpsAlterNote       $08
0008FB78 E701                       	dc.b	smpsNoAttack, $01
0008FB7A E109                       	smpsAlterNote       $09
0008FB7C 8001                       	dc.b	nRst, $01
0008FB7E E10C                       	smpsAlterNote       $0C
0008FB80 B50A                       	dc.b	nE4, $0A
0008FB82 E10D                       	smpsAlterNote       $0D
0008FB84 B60D                       	dc.b	nF4, $0D
0008FB86 E10A                       	smpsAlterNote       $0A
0008FB88 E701                       	dc.b	smpsNoAttack, $01
0008FB8A E106                       	smpsAlterNote       $06
0008FB8C E701                       	dc.b	smpsNoAttack, $01
0008FB8E E107                       	smpsAlterNote       $07
0008FB90 E701                       	dc.b	smpsNoAttack, $01
0008FB92 E10D                       	smpsAlterNote       $0D
0008FB94 E701                       	dc.b	smpsNoAttack, $01
0008FB96 E111                       	smpsAlterNote       $11
0008FB98 E701                       	dc.b	smpsNoAttack, $01
0008FB9A E10D                       	smpsAlterNote       $0D
0008FB9C E701                       	dc.b	smpsNoAttack, $01
0008FB9E E10A                       	smpsAlterNote       $0A
0008FBA0 E701                       	dc.b	smpsNoAttack, $01
0008FBA2 E106                       	smpsAlterNote       $06
0008FBA4 E701                       	dc.b	smpsNoAttack, $01
0008FBA6 E10A                       	smpsAlterNote       $0A
0008FBA8 E701                       	dc.b	smpsNoAttack, $01
0008FBAA E110                       	smpsAlterNote       $10
0008FBAC E701                       	dc.b	smpsNoAttack, $01
0008FBAE E111                       	smpsAlterNote       $11
0008FBB0 E701                       	dc.b	smpsNoAttack, $01
0008FBB2 E10D                       	smpsAlterNote       $0D
0008FBB4 B80D                       	dc.b	nG4, $0D
0008FBB6 E10A                       	smpsAlterNote       $0A
0008FBB8 E701                       	dc.b	smpsNoAttack, $01
0008FBBA E106                       	smpsAlterNote       $06
0008FBBC E701                       	dc.b	smpsNoAttack, $01
0008FBBE E107                       	smpsAlterNote       $07
0008FBC0 E701                       	dc.b	smpsNoAttack, $01
0008FBC2 E10D                       	smpsAlterNote       $0D
0008FBC4 E701                       	dc.b	smpsNoAttack, $01
0008FBC6 E111                       	smpsAlterNote       $11
0008FBC8 E701                       	dc.b	smpsNoAttack, $01
0008FBCA E10D                       	smpsAlterNote       $0D
0008FBCC E701                       	dc.b	smpsNoAttack, $01
0008FBCE E10A                       	smpsAlterNote       $0A
0008FBD0 E701                       	dc.b	smpsNoAttack, $01
0008FBD2 E106                       	smpsAlterNote       $06
0008FBD4 E701                       	dc.b	smpsNoAttack, $01
0008FBD6 E10A                       	smpsAlterNote       $0A
0008FBD8 E701                       	dc.b	smpsNoAttack, $01
0008FBDA E110                       	smpsAlterNote       $10
0008FBDC E701                       	dc.b	smpsNoAttack, $01
0008FBDE E111                       	smpsAlterNote       $11
0008FBE0 E701                       	dc.b	smpsNoAttack, $01
0008FBE2 E10D                       	smpsAlterNote       $0D
0008FBE4 E701                       	dc.b	smpsNoAttack, $01
0008FBE6 E107                       	smpsAlterNote       $07
0008FBE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBEC E10A                       	smpsAlterNote       $0A
0008FBEE E701                       	dc.b	smpsNoAttack, $01
0008FBF0 E110                       	smpsAlterNote       $10
0008FBF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBF6 E10D                       	smpsAlterNote       $0D
0008FBF8 8001                       	dc.b	nRst, $01
0008FBFA E10F                       	smpsAlterNote       $0F
0008FBFC BA0D                       	dc.b	nA4, $0D
0008FBFE E10C                       	smpsAlterNote       $0C
0008FC00 E701                       	dc.b	smpsNoAttack, $01
0008FC02 E108                       	smpsAlterNote       $08
0008FC04 E701                       	dc.b	smpsNoAttack, $01
0008FC06 E10C                       	smpsAlterNote       $0C
0008FC08 E701                       	dc.b	smpsNoAttack, $01
0008FC0A E112                       	smpsAlterNote       $12
0008FC0C E701                       	dc.b	smpsNoAttack, $01
0008FC0E E113                       	smpsAlterNote       $13
0008FC10 E701                       	dc.b	smpsNoAttack, $01
0008FC12 E10F                       	smpsAlterNote       $0F
0008FC14 E701                       	dc.b	smpsNoAttack, $01
0008FC16 E109                       	smpsAlterNote       $09
0008FC18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC1C E10C                       	smpsAlterNote       $0C
0008FC1E E701                       	dc.b	smpsNoAttack, $01
0008FC20 E112                       	smpsAlterNote       $12
0008FC22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC26 E10C                       	smpsAlterNote       $0C
0008FC28 E701                       	dc.b	smpsNoAttack, $01
0008FC2A E109                       	smpsAlterNote       $09
0008FC2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC30 E10F                       	smpsAlterNote       $0F
0008FC32 E701                       	dc.b	smpsNoAttack, $01
0008FC34 E113                       	smpsAlterNote       $13
0008FC36 E701                       	dc.b	smpsNoAttack, $01
0008FC38 E112                       	smpsAlterNote       $12
0008FC3A E701                       	dc.b	smpsNoAttack, $01
0008FC3C E10C                       	smpsAlterNote       $0C
0008FC3E E701                       	dc.b	smpsNoAttack, $01
0008FC40 E108                       	smpsAlterNote       $08
0008FC42 E701                       	dc.b	smpsNoAttack, $01
0008FC44 E10C                       	smpsAlterNote       $0C
0008FC46 E701                       	dc.b	smpsNoAttack, $01
0008FC48 E10F                       	smpsAlterNote       $0F
0008FC4A E701                       	dc.b	smpsNoAttack, $01
0008FC4C E113                       	smpsAlterNote       $13
0008FC4E E701                       	dc.b	smpsNoAttack, $01
0008FC50 E10F                       	smpsAlterNote       $0F
0008FC52 E701                       	dc.b	smpsNoAttack, $01
0008FC54 E109                       	smpsAlterNote       $09
0008FC56 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FC5A E10D                       	smpsAlterNote       $0D
0008FC5C B609 8001                  	dc.b	nF4, $09, nRst, $01
0008FC60 E10C                       	smpsAlterNote       $0C
0008FC62 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FC66 E10B                       	smpsAlterNote       $0B
0008FC68 B30D                       	dc.b	nD4, $0D
0008FC6A E10C                       	smpsAlterNote       $0C
0008FC6C B503 8001                  	dc.b	nE4, $03, nRst, $01
0008FC70 E10D                       	smpsAlterNote       $0D
0008FC72 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008FC7A E109                       	smpsAlterNote       $09
0008FC7C E701                       	dc.b	smpsNoAttack, $01
0008FC7E E108                       	smpsAlterNote       $08
0008FC80 E701                       	dc.b	smpsNoAttack, $01
0008FC82 E10C                       	smpsAlterNote       $0C
0008FC84 E701                       	dc.b	smpsNoAttack, $01
0008FC86 E112                       	smpsAlterNote       $12
0008FC88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC8C E10F                       	smpsAlterNote       $0F
0008FC8E E701                       	dc.b	smpsNoAttack, $01
0008FC90 E109                       	smpsAlterNote       $09
0008FC92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC96 E10F                       	smpsAlterNote       $0F
0008FC98 E701                       	dc.b	smpsNoAttack, $01
0008FC9A E112                       	smpsAlterNote       $12
0008FC9C E701                       	dc.b	smpsNoAttack, $01
0008FC9E E113                       	smpsAlterNote       $13
0008FCA0 8001                       	dc.b	nRst, $01
0008FCA2 E10D                       	smpsAlterNote       $0D
0008FCA4 C20D                       	dc.b	nF5, $0D
0008FCA6 E107                       	smpsAlterNote       $07
0008FCA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCAC E10A                       	smpsAlterNote       $0A
0008FCAE E701                       	dc.b	smpsNoAttack, $01
0008FCB0 E110                       	smpsAlterNote       $10
0008FCB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCB6 E10A                       	smpsAlterNote       $0A
0008FCB8 E701                       	dc.b	smpsNoAttack, $01
0008FCBA E107                       	smpsAlterNote       $07
0008FCBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCC0 E10D                       	smpsAlterNote       $0D
0008FCC2 E701                       	dc.b	smpsNoAttack, $01
0008FCC4 E111                       	smpsAlterNote       $11
0008FCC6 E701                       	dc.b	smpsNoAttack, $01
0008FCC8 E110                       	smpsAlterNote       $10
0008FCCA E701                       	dc.b	smpsNoAttack, $01
0008FCCC E10A                       	smpsAlterNote       $0A
0008FCCE E701                       	dc.b	smpsNoAttack, $01
0008FCD0 E106                       	smpsAlterNote       $06
0008FCD2 E701                       	dc.b	smpsNoAttack, $01
0008FCD4 E10A                       	smpsAlterNote       $0A
0008FCD6 E701                       	dc.b	smpsNoAttack, $01
0008FCD8 E10D                       	smpsAlterNote       $0D
0008FCDA E701                       	dc.b	smpsNoAttack, $01
0008FCDC E111                       	smpsAlterNote       $11
0008FCDE E701                       	dc.b	smpsNoAttack, $01
0008FCE0 E10D                       	smpsAlterNote       $0D
0008FCE2 E701                       	dc.b	smpsNoAttack, $01
0008FCE4 E107                       	smpsAlterNote       $07
0008FCE6 E701                       	dc.b	smpsNoAttack, $01
0008FCE8 E106                       	smpsAlterNote       $06
0008FCEA E701                       	dc.b	smpsNoAttack, $01
0008FCEC E10A                       	smpsAlterNote       $0A
0008FCEE E701                       	dc.b	smpsNoAttack, $01
0008FCF0 E110                       	smpsAlterNote       $10
0008FCF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCF6 E10D                       	smpsAlterNote       $0D
0008FCF8 E701                       	dc.b	smpsNoAttack, $01
0008FCFA E107                       	smpsAlterNote       $07
0008FCFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD00 E10D                       	smpsAlterNote       $0D
0008FD02 E701                       	dc.b	smpsNoAttack, $01
0008FD04 E110                       	smpsAlterNote       $10
0008FD06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD0A E10A                       	smpsAlterNote       $0A
0008FD0C E701                       	dc.b	smpsNoAttack, $01
0008FD0E E106                       	smpsAlterNote       $06
0008FD10 E701                       	dc.b	smpsNoAttack, $01
0008FD12 E107                       	smpsAlterNote       $07
0008FD14 E701                       	dc.b	smpsNoAttack, $01
0008FD16 E10D                       	smpsAlterNote       $0D
0008FD18 E701                       	dc.b	smpsNoAttack, $01
0008FD1A E111                       	smpsAlterNote       $11
0008FD1C E701                       	dc.b	smpsNoAttack, $01
0008FD1E E10D                       	smpsAlterNote       $0D
0008FD20 E701                       	dc.b	smpsNoAttack, $01
0008FD22 E10A                       	smpsAlterNote       $0A
0008FD24 E701                       	dc.b	smpsNoAttack, $01
0008FD26 E106                       	smpsAlterNote       $06
0008FD28 E701                       	dc.b	smpsNoAttack, $01
0008FD2A E10A                       	smpsAlterNote       $0A
0008FD2C E701                       	dc.b	smpsNoAttack, $01
0008FD2E E110                       	smpsAlterNote       $10
0008FD30 E701                       	dc.b	smpsNoAttack, $01
0008FD32 E111                       	smpsAlterNote       $11
0008FD34 E701                       	dc.b	smpsNoAttack, $01
0008FD36 E10D                       	smpsAlterNote       $0D
0008FD38 E701                       	dc.b	smpsNoAttack, $01
0008FD3A E107                       	smpsAlterNote       $07
0008FD3C E701                       	dc.b	smpsNoAttack, $01
0008FD3E E10D                       	smpsAlterNote       $0D
0008FD40 C207                       	dc.b	nF5, $07
0008FD42 E10C                       	smpsAlterNote       $0C
0008FD44 C10D                       	dc.b	nE5, $0D
0008FD46 E109                       	smpsAlterNote       $09
0008FD48 E701                       	dc.b	smpsNoAttack, $01
0008FD4A E106                       	smpsAlterNote       $06
0008FD4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD50 E10C                       	smpsAlterNote       $0C
0008FD52 E701                       	dc.b	smpsNoAttack, $01
0008FD54 E110                       	smpsAlterNote       $10
0008FD56 E701                       	dc.b	smpsNoAttack, $01
0008FD58 E10F                       	smpsAlterNote       $0F
0008FD5A E701                       	dc.b	smpsNoAttack, $01
0008FD5C E109                       	smpsAlterNote       $09
0008FD5E E701                       	dc.b	smpsNoAttack, $01
0008FD60 E105                       	smpsAlterNote       $05
0008FD62 E701                       	dc.b	smpsNoAttack, $01
0008FD64 E109                       	smpsAlterNote       $09
0008FD66 E701                       	dc.b	smpsNoAttack, $01
0008FD68 E10C                       	smpsAlterNote       $0C
0008FD6A E701                       	dc.b	smpsNoAttack, $01
0008FD6C E110                       	smpsAlterNote       $10
0008FD6E E701                       	dc.b	smpsNoAttack, $01
0008FD70 E10B                       	smpsAlterNote       $0B
0008FD72 BF0D                       	dc.b	nD5, $0D
0008FD74 E108                       	smpsAlterNote       $08
0008FD76 E701                       	dc.b	smpsNoAttack, $01
0008FD78 E105                       	smpsAlterNote       $05
0008FD7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD7E E10B                       	smpsAlterNote       $0B
0008FD80 E701                       	dc.b	smpsNoAttack, $01
0008FD82 E10F                       	smpsAlterNote       $0F
0008FD84 E701                       	dc.b	smpsNoAttack, $01
0008FD86 E10E                       	smpsAlterNote       $0E
0008FD88 E701                       	dc.b	smpsNoAttack, $01
0008FD8A E108                       	smpsAlterNote       $08
0008FD8C E701                       	dc.b	smpsNoAttack, $01
0008FD8E E104                       	smpsAlterNote       $04
0008FD90 E701                       	dc.b	smpsNoAttack, $01
0008FD92 E108                       	smpsAlterNote       $08
0008FD94 E701                       	dc.b	smpsNoAttack, $01
0008FD96 E10E                       	smpsAlterNote       $0E
0008FD98 E701                       	dc.b	smpsNoAttack, $01
0008FD9A E10F                       	smpsAlterNote       $0F
0008FD9C E701                       	dc.b	smpsNoAttack, $01
0008FD9E E10B                       	smpsAlterNote       $0B
0008FDA0 E701                       	dc.b	smpsNoAttack, $01
0008FDA2 E105                       	smpsAlterNote       $05
0008FDA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDA8 E108                       	smpsAlterNote       $08
0008FDAA E701                       	dc.b	smpsNoAttack, $01
0008FDAC E10E                       	smpsAlterNote       $0E
0008FDAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDB2 E108                       	smpsAlterNote       $08
0008FDB4 E701                       	dc.b	smpsNoAttack, $01
0008FDB6 E105                       	smpsAlterNote       $05
0008FDB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDBC E10B                       	smpsAlterNote       $0B
0008FDBE E701                       	dc.b	smpsNoAttack, $01
0008FDC0 E10F                       	smpsAlterNote       $0F
0008FDC2 E701                       	dc.b	smpsNoAttack, $01
0008FDC4 E10E                       	smpsAlterNote       $0E
0008FDC6 E701                       	dc.b	smpsNoAttack, $01
0008FDC8 E108                       	smpsAlterNote       $08
0008FDCA E701                       	dc.b	smpsNoAttack, $01
0008FDCC E104                       	smpsAlterNote       $04
0008FDCE E701                       	dc.b	smpsNoAttack, $01
0008FDD0 E108                       	smpsAlterNote       $08
0008FDD2 E701                       	dc.b	smpsNoAttack, $01
0008FDD4 E10B                       	smpsAlterNote       $0B
0008FDD6 E701                       	dc.b	smpsNoAttack, $01
0008FDD8 E10F                       	smpsAlterNote       $0F
0008FDDA E701                       	dc.b	smpsNoAttack, $01
0008FDDC E10B                       	smpsAlterNote       $0B
0008FDDE E701                       	dc.b	smpsNoAttack, $01
0008FDE0 E105                       	smpsAlterNote       $05
0008FDE2 E701                       	dc.b	smpsNoAttack, $01
0008FDE4 E104                       	smpsAlterNote       $04
0008FDE6 E701                       	dc.b	smpsNoAttack, $01
0008FDE8 E108                       	smpsAlterNote       $08
0008FDEA E701                       	dc.b	smpsNoAttack, $01
0008FDEC E10E                       	smpsAlterNote       $0E
0008FDEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDF2 E10B                       	smpsAlterNote       $0B
0008FDF4 E701                       	dc.b	smpsNoAttack, $01
0008FDF6 E105                       	smpsAlterNote       $05
0008FDF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDFC E10B                       	smpsAlterNote       $0B
0008FDFE E701                       	dc.b	smpsNoAttack, $01
0008FE00 E10E                       	smpsAlterNote       $0E
0008FE02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE06 E108                       	smpsAlterNote       $08
0008FE08 E701                       	dc.b	smpsNoAttack, $01
0008FE0A E105                       	smpsAlterNote       $05
0008FE0C 8001                       	dc.b	nRst, $01
0008FE10 E601                       	smpsAlterVol        $01
0008FE12 E10B                       	smpsAlterNote       $0B
0008FE14 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008FE20 8004                       	dc.b	nRst, $04
0008FE24 E6FF                       	smpsAlterVol        $FF
0008FE26 E10D                       	smpsAlterNote       $0D
0008FE28 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008FE30 E10C                       	smpsAlterNote       $0C
0008FE32 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008FE37 E10D                       	smpsAlterNote       $0D
0008FE39 B60D                       	dc.b	nF4, $0D
0008FE3B E10A                       	smpsAlterNote       $0A
0008FE3D E701                       	dc.b	smpsNoAttack, $01
0008FE3F E106                       	smpsAlterNote       $06
0008FE41 E701                       	dc.b	smpsNoAttack, $01
0008FE43 E10A                       	smpsAlterNote       $0A
0008FE45 E701                       	dc.b	smpsNoAttack, $01
0008FE47 E110                       	smpsAlterNote       $10
0008FE49 E701                       	dc.b	smpsNoAttack, $01
0008FE4B E111                       	smpsAlterNote       $11
0008FE4D E701                       	dc.b	smpsNoAttack, $01
0008FE4F E10D                       	smpsAlterNote       $0D
0008FE51 E701                       	dc.b	smpsNoAttack, $01
0008FE53 E107                       	smpsAlterNote       $07
0008FE55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE59 E10A                       	smpsAlterNote       $0A
0008FE5B E701                       	dc.b	smpsNoAttack, $01
0008FE5D E110                       	smpsAlterNote       $10
0008FE5F E701                       	dc.b	smpsNoAttack, $01
0008FE61 E111                       	smpsAlterNote       $11
0008FE63 8001                       	dc.b	nRst, $01
0008FE65 E10D                       	smpsAlterNote       $0D
0008FE67 B80D                       	dc.b	nG4, $0D
0008FE69 E10A                       	smpsAlterNote       $0A
0008FE6B E701                       	dc.b	smpsNoAttack, $01
0008FE6D E106                       	smpsAlterNote       $06
0008FE6F E701                       	dc.b	smpsNoAttack, $01
0008FE71 E10A                       	smpsAlterNote       $0A
0008FE73 E701                       	dc.b	smpsNoAttack, $01
0008FE75 E110                       	smpsAlterNote       $10
0008FE77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE7B E10D                       	smpsAlterNote       $0D
0008FE7D E701                       	dc.b	smpsNoAttack, $01
0008FE7F E107                       	smpsAlterNote       $07
0008FE81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE85 E10D                       	smpsAlterNote       $0D
0008FE87 E701                       	dc.b	smpsNoAttack, $01
0008FE89 E110                       	smpsAlterNote       $10
0008FE8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE8F E10A                       	smpsAlterNote       $0A
0008FE91 E701                       	dc.b	smpsNoAttack, $01
0008FE93 E106                       	smpsAlterNote       $06
0008FE95 E701                       	dc.b	smpsNoAttack, $01
0008FE97 E107                       	smpsAlterNote       $07
0008FE99 E701                       	dc.b	smpsNoAttack, $01
0008FE9B E10D                       	smpsAlterNote       $0D
0008FE9D E701                       	dc.b	smpsNoAttack, $01
0008FE9F E111                       	smpsAlterNote       $11
0008FEA1 E701                       	dc.b	smpsNoAttack, $01
0008FEA3 E10D                       	smpsAlterNote       $0D
0008FEA5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FEA9 E10F                       	smpsAlterNote       $0F
0008FEAB BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008FEAF E110                       	smpsAlterNote       $10
0008FEB1 BB03                       	dc.b	nBb4, $03
0008FEB3 E10F                       	smpsAlterNote       $0F
0008FEB5 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008FEBB E110                       	smpsAlterNote       $10
0008FEBD C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008FEC1 E10F                       	smpsAlterNote       $0F
0008FEC3 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008FEC9 E110                       	smpsAlterNote       $10
0008FECB D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008FECF E10F                       	smpsAlterNote       $0F
0008FED1 D20D                       	dc.b	nA6, $0D
0008FED3 E10C                       	smpsAlterNote       $0C
0008FED5 E701                       	dc.b	smpsNoAttack, $01
0008FED7 E108                       	smpsAlterNote       $08
0008FED9 E701                       	dc.b	smpsNoAttack, $01
0008FEDB E10C                       	smpsAlterNote       $0C
0008FEDD E701                       	dc.b	smpsNoAttack, $01
0008FEDF E10F                       	smpsAlterNote       $0F
0008FEE1 E701                       	dc.b	smpsNoAttack, $01
0008FEE3 E113                       	smpsAlterNote       $13
0008FEE5 E701                       	dc.b	smpsNoAttack, $01
0008FEE7 E10F                       	smpsAlterNote       $0F
0008FEE9 E701                       	dc.b	smpsNoAttack, $01
0008FEEB E109                       	smpsAlterNote       $09
0008FEED E701                       	dc.b	smpsNoAttack, $01
0008FEEF E108                       	smpsAlterNote       $08
0008FEF1 E701                       	dc.b	smpsNoAttack, $01
0008FEF3 E10C                       	smpsAlterNote       $0C
0008FEF5 E701                       	dc.b	smpsNoAttack, $01
0008FEF7 E112                       	smpsAlterNote       $12
0008FEF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEFD E10F                       	smpsAlterNote       $0F
0008FEFF E701                       	dc.b	smpsNoAttack, $01
0008FF01 E109                       	smpsAlterNote       $09
0008FF03 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008FF09 E10D                       	smpsAlterNote       $0D
0008FF0B CE07                       	dc.b	nF6, $07
0008FF0D E10C                       	smpsAlterNote       $0C
0008FF0F CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008FF13 E10D                       	smpsAlterNote       $0D
0008FF15 CE03                       	dc.b	nF6, $03
0008FF17 E10C                       	smpsAlterNote       $0C
0008FF19 CC0D                       	dc.b	nEb6, $0D
0008FF1B E109                       	smpsAlterNote       $09
0008FF1D E701                       	dc.b	smpsNoAttack, $01
0008FF1F E106                       	smpsAlterNote       $06
0008FF21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF25 E10C                       	smpsAlterNote       $0C
0008FF27 E701                       	dc.b	smpsNoAttack, $01
0008FF29 E110                       	smpsAlterNote       $10
0008FF2B E701                       	dc.b	smpsNoAttack, $01
0008FF2D E10F                       	smpsAlterNote       $0F
0008FF2F E701                       	dc.b	smpsNoAttack, $01
0008FF31 E109                       	smpsAlterNote       $09
0008FF33 E701                       	dc.b	smpsNoAttack, $01
0008FF35 E105                       	smpsAlterNote       $05
0008FF37 E701                       	dc.b	smpsNoAttack, $01
0008FF39 E109                       	smpsAlterNote       $09
0008FF3B E701                       	dc.b	smpsNoAttack, $01
0008FF3D E10C                       	smpsAlterNote       $0C
0008FF3F E701                       	dc.b	smpsNoAttack, $01
0008FF41 E110                       	smpsAlterNote       $10
0008FF43 E701                       	dc.b	smpsNoAttack, $01
0008FF45 E10C                       	smpsAlterNote       $0C
0008FF47 E701                       	dc.b	smpsNoAttack, $01
0008FF49 E106                       	smpsAlterNote       $06
0008FF4B E701                       	dc.b	smpsNoAttack, $01
0008FF4D E105                       	smpsAlterNote       $05
0008FF4F E701                       	dc.b	smpsNoAttack, $01
0008FF51 E109                       	smpsAlterNote       $09
0008FF53 E701                       	dc.b	smpsNoAttack, $01
0008FF55 E10F                       	smpsAlterNote       $0F
0008FF57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF5B E10C                       	smpsAlterNote       $0C
0008FF5D E701                       	dc.b	smpsNoAttack, $01
0008FF5F E10B                       	smpsAlterNote       $0B
0008FF61 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008FF6B E10F                       	smpsAlterNote       $0F
0008FF6D C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008FF77 E10D                       	smpsAlterNote       $0D
0008FF79 C203                       	dc.b	nF5, $03
0008FF7B E10C                       	smpsAlterNote       $0C
0008FF7D C103 8001                  	dc.b	nE5, $03, nRst, $01
0008FF81 E10D                       	smpsAlterNote       $0D
0008FF83 C20D                       	dc.b	nF5, $0D
0008FF85 E10C                       	smpsAlterNote       $0C
0008FF87 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008FF8B E10B                       	smpsAlterNote       $0B
0008FF8D BF0D                       	dc.b	nD5, $0D
0008FF8F E108                       	smpsAlterNote       $08
0008FF91 E701                       	dc.b	smpsNoAttack, $01
0008FF93 E104                       	smpsAlterNote       $04
0008FF95 E701                       	dc.b	smpsNoAttack, $01
0008FF97 E108                       	smpsAlterNote       $08
0008FF99 E701                       	dc.b	smpsNoAttack, $01
0008FF9B E10E                       	smpsAlterNote       $0E
0008FF9D E701                       	dc.b	smpsNoAttack, $01
0008FF9F E10F                       	smpsAlterNote       $0F
0008FFA1 E701                       	dc.b	smpsNoAttack, $01
0008FFA3 E10B                       	smpsAlterNote       $0B
0008FFA5 E701                       	dc.b	smpsNoAttack, $01
0008FFA7 E105                       	smpsAlterNote       $05
0008FFA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFAD E108                       	smpsAlterNote       $08
0008FFAF E701                       	dc.b	smpsNoAttack, $01
0008FFB1 E10E                       	smpsAlterNote       $0E
0008FFB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFB7 E108                       	smpsAlterNote       $08
0008FFB9 E701                       	dc.b	smpsNoAttack, $01
0008FFBB E105                       	smpsAlterNote       $05
0008FFBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFC1 E10B                       	smpsAlterNote       $0B
0008FFC3 E701                       	dc.b	smpsNoAttack, $01
0008FFC5 E10F                       	smpsAlterNote       $0F
0008FFC7 E701                       	dc.b	smpsNoAttack, $01
0008FFC9 E10E                       	smpsAlterNote       $0E
0008FFCB E701                       	dc.b	smpsNoAttack, $01
0008FFCD E108                       	smpsAlterNote       $08
0008FFCF E701                       	dc.b	smpsNoAttack, $01
0008FFD1 E104                       	smpsAlterNote       $04
0008FFD3 E701                       	dc.b	smpsNoAttack, $01
0008FFD5 E108                       	smpsAlterNote       $08
0008FFD7 E701                       	dc.b	smpsNoAttack, $01
0008FFD9 E10B                       	smpsAlterNote       $0B
0008FFDB E701                       	dc.b	smpsNoAttack, $01
0008FFDD E10F                       	smpsAlterNote       $0F
0008FFDF E701                       	dc.b	smpsNoAttack, $01
0008FFE1 E10B                       	smpsAlterNote       $0B
0008FFE3 E701                       	dc.b	smpsNoAttack, $01
0008FFE5 E105                       	smpsAlterNote       $05
0008FFE7 E701                       	dc.b	smpsNoAttack, $01
0008FFE9 E104                       	smpsAlterNote       $04
0008FFEB E701                       	dc.b	smpsNoAttack, $01
0008FFED E108                       	smpsAlterNote       $08
0008FFEF E701                       	dc.b	smpsNoAttack, $01
0008FFF1 E10E                       	smpsAlterNote       $0E
0008FFF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFF7 E10B                       	smpsAlterNote       $0B
0008FFF9 E701                       	dc.b	smpsNoAttack, $01
0008FFFB E105                       	smpsAlterNote       $05
0008FFFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090001 E10B                       	smpsAlterNote       $0B
00090003 E701                       	dc.b	smpsNoAttack, $01
00090005 E10E                       	smpsAlterNote       $0E
00090007 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009000B E108                       	smpsAlterNote       $08
0009000D E701                       	dc.b	smpsNoAttack, $01
0009000F E104                       	smpsAlterNote       $04
00090011 E701                       	dc.b	smpsNoAttack, $01
00090013 E105                       	smpsAlterNote       $05
00090015 E701                       	dc.b	smpsNoAttack, $01
00090017 E10B                       	smpsAlterNote       $0B
00090019 E701                       	dc.b	smpsNoAttack, $01
0009001B E10F                       	smpsAlterNote       $0F
0009001D E701                       	dc.b	smpsNoAttack, $01
0009001F E10B                       	smpsAlterNote       $0B
00090021 E701                       	dc.b	smpsNoAttack, $01
00090023 E108                       	smpsAlterNote       $08
00090025 E701                       	dc.b	smpsNoAttack, $01
00090027 E104                       	smpsAlterNote       $04
00090029 E701                       	dc.b	smpsNoAttack, $01
0009002B E108                       	smpsAlterNote       $08
0009002D E701                       	dc.b	smpsNoAttack, $01
0009002F E10E                       	smpsAlterNote       $0E
00090031 E701                       	dc.b	smpsNoAttack, $01
00090033 E10F                       	smpsAlterNote       $0F
00090035 E701                       	dc.b	smpsNoAttack, $01
00090037 E10B                       	smpsAlterNote       $0B
00090039 E701                       	dc.b	smpsNoAttack, $01
0009003B E105                       	smpsAlterNote       $05
0009003D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090041 E108                       	smpsAlterNote       $08
00090043 E701                       	dc.b	smpsNoAttack, $01
00090045 E10E                       	smpsAlterNote       $0E
00090047 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009004B E108                       	smpsAlterNote       $08
0009004D E701                       	dc.b	smpsNoAttack, $01
0009004F E105                       	smpsAlterNote       $05
00090051 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090055 E10B                       	smpsAlterNote       $0B
00090057 E701                       	dc.b	smpsNoAttack, $01
00090059 E10F                       	smpsAlterNote       $0F
0009005B E701                       	dc.b	smpsNoAttack, $01
0009005D E10E                       	smpsAlterNote       $0E
0009005F E701                       	dc.b	smpsNoAttack, $01
00090061 E108                       	smpsAlterNote       $08
00090063 E701                       	dc.b	smpsNoAttack, $01
00090065 E104                       	smpsAlterNote       $04
00090067 E701                       	dc.b	smpsNoAttack, $01
00090069 E108                       	smpsAlterNote       $08
0009006B E701                       	dc.b	smpsNoAttack, $01
0009006D E10B                       	smpsAlterNote       $0B
0009006F E701                       	dc.b	smpsNoAttack, $01
00090071 E10F                       	smpsAlterNote       $0F
00090073 E701                       	dc.b	smpsNoAttack, $01
00090075 E10B                       	smpsAlterNote       $0B
00090077 E701                       	dc.b	smpsNoAttack, $01
00090079 E105                       	smpsAlterNote       $05
0009007B E701                       	dc.b	smpsNoAttack, $01
0009007D E104                       	smpsAlterNote       $04
0009007F E701                       	dc.b	smpsNoAttack, $01
00090081 E105                       	smpsAlterNote       $05
00090083 8001                       	dc.b	nRst, $01
00090085 E10D                       	smpsAlterNote       $0D
00090087 C20D                       	dc.b	nF5, $0D
00090089 E107                       	smpsAlterNote       $07
0009008B E701                       	dc.b	smpsNoAttack, $01
0009008D E106                       	smpsAlterNote       $06
0009008F E701                       	dc.b	smpsNoAttack, $01
00090091 E10A                       	smpsAlterNote       $0A
00090093 E701                       	dc.b	smpsNoAttack, $01
00090095 E110                       	smpsAlterNote       $10
00090097 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009009B E10D                       	smpsAlterNote       $0D
0009009D E701                       	dc.b	smpsNoAttack, $01
0009009F E107                       	smpsAlterNote       $07
000900A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900A5 E10D                       	smpsAlterNote       $0D
000900A7 E701                       	dc.b	smpsNoAttack, $01
000900A9 E110                       	smpsAlterNote       $10
000900AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900AF E10A                       	smpsAlterNote       $0A
000900B1 E701                       	dc.b	smpsNoAttack, $01
000900B3 E106                       	smpsAlterNote       $06
000900B5 E701                       	dc.b	smpsNoAttack, $01
000900B7 E107                       	smpsAlterNote       $07
000900B9 E701                       	dc.b	smpsNoAttack, $01
000900BB E10D                       	smpsAlterNote       $0D
000900BD E701                       	dc.b	smpsNoAttack, $01
000900BF E111                       	smpsAlterNote       $11
000900C1 E701                       	dc.b	smpsNoAttack, $01
000900C3 E10D                       	smpsAlterNote       $0D
000900C5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000900C9 E10C                       	smpsAlterNote       $0C
000900CB C10D                       	dc.b	nE5, $0D
000900CD E10D                       	smpsAlterNote       $0D
000900CF C20A                       	dc.b	nF5, $0A
000900D1 E10C                       	smpsAlterNote       $0C
000900D3 C10E                       	dc.b	nE5, $0E
000900D5 E106                       	smpsAlterNote       $06
000900D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900DB E10C                       	smpsAlterNote       $0C
000900DD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000900E1 E10B                       	smpsAlterNote       $0B
000900E3 BF0D                       	dc.b	nD5, $0D
000900E5 E10C                       	smpsAlterNote       $0C
000900E7 C107                       	dc.b	nE5, $07
000900E9 E10D                       	smpsAlterNote       $0D
000900EB C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
000900F5 E110                       	smpsAlterNote       $10
000900F7 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000900FD E10F                       	smpsAlterNote       $0F
000900FF C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00090107 E10D                       	smpsAlterNote       $0D
00090109 D003                       	dc.b	nG6, $03
0009010D E0C0                       	smpsPan             panCenter, $00
0009010F E6FF                       	smpsAlterVol        $FF
00090111 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0009011D 8001                       	dc.b	nRst, $01
0009011F E10C                       	smpsAlterNote       $0C
00090121 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0009012B E604                       	smpsAlterVol        $04
0009012D E10B                       	smpsAlterNote       $0B
0009012F B306 8001                  	dc.b	nD4, $06, nRst, $01
00090133 E10F                       	smpsAlterNote       $0F
00090135 AE03                       	dc.b	nA3, $03
00090137 E10D                       	smpsAlterNote       $0D
00090139 B603 8001                  	dc.b	nF4, $03, nRst, $01
0009013D E10C                       	smpsAlterNote       $0C
0009013F B506 8001                  	dc.b	nE4, $06, nRst, $01
00090143 E10B                       	smpsAlterNote       $0B
00090145 B302 8001                  	dc.b	nD4, $02, nRst, $01
00090149 E10A                       	smpsAlterNote       $0A
0009014B B103                       	dc.b	nC4, $03
0009014D E110                       	smpsAlterNote       $10
0009014F AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00090153 E10F                       	smpsAlterNote       $0F
00090155 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00090159 E080                       	smpsPan             panLeft, $00
0009015B 01                         	dc.b	$01
0009015E E6FB                       	smpsAlterVol        $FB
00090160 E1E4                       	smpsAlterNote       $E4
00090162 C501                       	dc.b	nAb5, $01
00090164 E1F4                       	smpsAlterNote       $F4
00090166 E701                       	dc.b	smpsNoAttack, $01
00090168 E104                       	smpsAlterNote       $04
0009016A E701                       	dc.b	smpsNoAttack, $01
0009016C E114                       	smpsAlterNote       $14
0009016E E701                       	dc.b	smpsNoAttack, $01
00090170 E11C                       	smpsAlterNote       $1C
00090172 E701                       	dc.b	smpsNoAttack, $01
00090174 E1EF                       	smpsAlterNote       $EF
00090176 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00090179 E1FF                       	smpsAlterNote       $FF
0009017B E701                       	dc.b	smpsNoAttack, $01
0009017D E10F                       	smpsAlterNote       $0F
0009017F C606                       	dc.b	nA5, $06
00090181 E109                       	smpsAlterNote       $09
00090183 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090187 E10F                       	smpsAlterNote       $0F
00090189 E701                       	dc.b	smpsNoAttack, $01
0009018B E112                       	smpsAlterNote       $12
0009018D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090191 E10C                       	smpsAlterNote       $0C
00090193 E701                       	dc.b	smpsNoAttack, $01
00090195 E108                       	smpsAlterNote       $08
00090197 E701                       	dc.b	smpsNoAttack, $01
00090199 E109                       	smpsAlterNote       $09
0009019B E701                       	dc.b	smpsNoAttack, $01
0009019D E10F                       	smpsAlterNote       $0F
0009019F E701                       	dc.b	smpsNoAttack, $01
000901A1 E113                       	smpsAlterNote       $13
000901A3 E701                       	dc.b	smpsNoAttack, $01
000901A5 E10F                       	smpsAlterNote       $0F
000901A7 E701                       	dc.b	smpsNoAttack, $01
000901A9 E10C                       	smpsAlterNote       $0C
000901AB E701                       	dc.b	smpsNoAttack, $01
000901AD E108                       	smpsAlterNote       $08
000901AF E701                       	dc.b	smpsNoAttack, $01
000901B1 E10C                       	smpsAlterNote       $0C
000901B3 E701                       	dc.b	smpsNoAttack, $01
000901B5 E112                       	smpsAlterNote       $12
000901B7 E701                       	dc.b	smpsNoAttack, $01
000901B9 E113                       	smpsAlterNote       $13
000901BB E701                       	dc.b	smpsNoAttack, $01
000901BD E10F                       	smpsAlterNote       $0F
000901BF E701                       	dc.b	smpsNoAttack, $01
000901C1 E109                       	smpsAlterNote       $09
000901C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901C7 E10C                       	smpsAlterNote       $0C
000901C9 E701                       	dc.b	smpsNoAttack, $01
000901CB E112                       	smpsAlterNote       $12
000901CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901D1 E10C                       	smpsAlterNote       $0C
000901D3 E701                       	dc.b	smpsNoAttack, $01
000901D5 E109                       	smpsAlterNote       $09
000901D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901DB E10F                       	smpsAlterNote       $0F
000901DD E701                       	dc.b	smpsNoAttack, $01
000901DF E113                       	smpsAlterNote       $13
000901E1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000901E5 E10D                       	smpsAlterNote       $0D
000901E7 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
000901ED E10C                       	smpsAlterNote       $0C
000901EF C102 8001                  	dc.b	nE5, $02, nRst, $01
000901F3 E10D                       	smpsAlterNote       $0D
000901F5 C201 8001                  	dc.b	nF5, $01, nRst, $01
000901F9 E10C                       	smpsAlterNote       $0C
000901FB C102                       	dc.b	nE5, $02
000901FD E10B                       	smpsAlterNote       $0B
000901FF BF02 8001                  	dc.b	nD5, $02, nRst, $01
00090203 E10C                       	smpsAlterNote       $0C
00090205 C101 8001                  	dc.b	nE5, $01, nRst, $01
00090209 E10B                       	smpsAlterNote       $0B
0009020B BF02                       	dc.b	nD5, $02
0009020D E10A                       	smpsAlterNote       $0A
0009020F BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00090219 E110                       	smpsAlterNote       $10
0009021B BB02                       	dc.b	nBb4, $02
0009021D E10A                       	smpsAlterNote       $0A
0009021F BD02 8001                  	dc.b	nC5, $02, nRst, $01
00090223 E110                       	smpsAlterNote       $10
00090225 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00090229 E10F                       	smpsAlterNote       $0F
0009022B BA01 8001                  	dc.b	nA4, $01, nRst, $01
0009022F E110                       	smpsAlterNote       $10
00090231 BB02                       	dc.b	nBb4, $02
00090233 E10F                       	smpsAlterNote       $0F
00090235 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0009023F E10C                       	smpsAlterNote       $0C
00090241 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
00090249 E10B                       	smpsAlterNote       $0B
0009024B BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0009024F E10F                       	smpsAlterNote       $0F
00090251 BA02                       	dc.b	nA4, $02
00090255 E0C0                       	smpsPan             panCenter, $00
00090257 E601                       	smpsAlterVol        $01
00090259 E109                       	smpsAlterNote       $09
0009025B AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
00090267 E108                       	smpsAlterNote       $08
00090269 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0009026F E107                       	smpsAlterNote       $07
00090271 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
00090277 E109                       	smpsAlterNote       $09
00090279 B603 8001                  	dc.b	nF4, $03, nRst, $01
0009027D E108                       	smpsAlterNote       $08
0009027F B506 8001                  	dc.b	nE4, $06, nRst, $01
00090283 E107                       	smpsAlterNote       $07
00090285 B302 8001                  	dc.b	nD4, $02, nRst, $01
00090289 E106                       	smpsAlterNote       $06
0009028B B103                       	dc.b	nC4, $03
0009028D E10C                       	smpsAlterNote       $0C
0009028F AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00090295 E080                       	smpsPan             panLeft, $00
00090297 07                         	dc.b	$07
00090298 E6FE                       	smpsAlterVol        $FE
0009029A E10B                       	smpsAlterNote       $0B
0009029C B20D                       	dc.b	nCs4, $0D
0009029E E105                       	smpsAlterNote       $05
000902A0 E701                       	dc.b	smpsNoAttack, $01
000902A2 E104                       	smpsAlterNote       $04
000902A4 E701                       	dc.b	smpsNoAttack, $01
000902A6 E108                       	smpsAlterNote       $08
000902A8 E701                       	dc.b	smpsNoAttack, $01
000902AA E10E                       	smpsAlterNote       $0E
000902AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902B0 E10B                       	smpsAlterNote       $0B
000902B2 E701                       	dc.b	smpsNoAttack, $01
000902B4 E105                       	smpsAlterNote       $05
000902B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902BA E10B                       	smpsAlterNote       $0B
000902BC E701                       	dc.b	smpsNoAttack, $01
000902BE E10E                       	smpsAlterNote       $0E
000902C0 E701                       	dc.b	smpsNoAttack, $01
000902C2 E10F                       	smpsAlterNote       $0F
000902C4 8001                       	dc.b	nRst, $01
000902C6 E10B                       	smpsAlterNote       $0B
000902C8 B30D                       	dc.b	nD4, $0D
000902CA E105                       	smpsAlterNote       $05
000902CC E701                       	dc.b	smpsNoAttack, $01
000902CE E104                       	smpsAlterNote       $04
000902D0 E701                       	dc.b	smpsNoAttack, $01
000902D2 E108                       	smpsAlterNote       $08
000902D4 E701                       	dc.b	smpsNoAttack, $01
000902D6 E10E                       	smpsAlterNote       $0E
000902D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902DC E10B                       	smpsAlterNote       $0B
000902DE E701                       	dc.b	smpsNoAttack, $01
000902E0 E105                       	smpsAlterNote       $05
000902E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902E6 E10B                       	smpsAlterNote       $0B
000902E8 E701                       	dc.b	smpsNoAttack, $01
000902EA E10E                       	smpsAlterNote       $0E
000902EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902F0 E108                       	smpsAlterNote       $08
000902F2 E701                       	dc.b	smpsNoAttack, $01
000902F4 E104                       	smpsAlterNote       $04
000902F6 E701                       	dc.b	smpsNoAttack, $01
000902F8 E105                       	smpsAlterNote       $05
000902FA E701                       	dc.b	smpsNoAttack, $01
000902FC E10B                       	smpsAlterNote       $0B
000902FE E701                       	dc.b	smpsNoAttack, $01
00090300 E10F                       	smpsAlterNote       $0F
00090302 E701                       	dc.b	smpsNoAttack, $01
00090304 E10B                       	smpsAlterNote       $0B
00090306 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009030A E10C                       	smpsAlterNote       $0C
0009030C B50D                       	dc.b	nE4, $0D
0009030E E106                       	smpsAlterNote       $06
00090310 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090314 E10C                       	smpsAlterNote       $0C
00090316 E701                       	dc.b	smpsNoAttack, $01
00090318 E10F                       	smpsAlterNote       $0F
0009031A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009031E E109                       	smpsAlterNote       $09
00090320 E701                       	dc.b	smpsNoAttack, $01
00090322 E105                       	smpsAlterNote       $05
00090324 E701                       	dc.b	smpsNoAttack, $01
00090326 E106                       	smpsAlterNote       $06
00090328 E701                       	dc.b	smpsNoAttack, $01
0009032A E10C                       	smpsAlterNote       $0C
0009032C E701                       	dc.b	smpsNoAttack, $01
0009032E E110                       	smpsAlterNote       $10
00090330 E701                       	dc.b	smpsNoAttack, $01
00090332 E10B                       	smpsAlterNote       $0B
00090334 B30E                       	dc.b	nD4, $0E
00090336 E105                       	smpsAlterNote       $05
00090338 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009033C E10B                       	smpsAlterNote       $0B
0009033E E701                       	dc.b	smpsNoAttack, $01
00090340 E10E                       	smpsAlterNote       $0E
00090342 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090346 E108                       	smpsAlterNote       $08
00090348 E701                       	dc.b	smpsNoAttack, $01
0009034A E104                       	smpsAlterNote       $04
0009034C E701                       	dc.b	smpsNoAttack, $01
0009034E E105                       	smpsAlterNote       $05
00090350 E701                       	dc.b	smpsNoAttack, $01
00090352 E10B                       	smpsAlterNote       $0B
00090354 E701                       	dc.b	smpsNoAttack, $01
00090356 E10F                       	smpsAlterNote       $0F
00090358 E701                       	dc.b	smpsNoAttack, $01
0009035A E10B                       	smpsAlterNote       $0B
0009035C E701                       	dc.b	smpsNoAttack, $01
0009035E E108                       	smpsAlterNote       $08
00090360 E701                       	dc.b	smpsNoAttack, $01
00090362 E104                       	smpsAlterNote       $04
00090364 E701                       	dc.b	smpsNoAttack, $01
00090366 E108                       	smpsAlterNote       $08
00090368 E701                       	dc.b	smpsNoAttack, $01
0009036A E10E                       	smpsAlterNote       $0E
0009036C E701                       	dc.b	smpsNoAttack, $01
0009036E E10F                       	smpsAlterNote       $0F
00090370 E701                       	dc.b	smpsNoAttack, $01
00090372 E10B                       	smpsAlterNote       $0B
00090374 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00090378 E108                       	smpsAlterNote       $08
0009037A E701                       	dc.b	smpsNoAttack, $01
0009037C E105                       	smpsAlterNote       $05
0009037E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090382 E10B                       	smpsAlterNote       $0B
00090384 E701                       	dc.b	smpsNoAttack, $01
00090386 E10F                       	smpsAlterNote       $0F
00090388 E701                       	dc.b	smpsNoAttack, $01
0009038A E10E                       	smpsAlterNote       $0E
0009038C E701                       	dc.b	smpsNoAttack, $01
0009038E E108                       	smpsAlterNote       $08
00090390 E701                       	dc.b	smpsNoAttack, $01
00090392 E104                       	smpsAlterNote       $04
00090394 E701                       	dc.b	smpsNoAttack, $01
00090396 E108                       	smpsAlterNote       $08
00090398 E701                       	dc.b	smpsNoAttack, $01
0009039A E10B                       	smpsAlterNote       $0B
0009039C E701                       	dc.b	smpsNoAttack, $01
0009039E E10F                       	smpsAlterNote       $0F
000903A0 E701                       	dc.b	smpsNoAttack, $01
000903A2 E10B                       	smpsAlterNote       $0B
000903A4 B30D                       	dc.b	nD4, $0D
000903A6 E108                       	smpsAlterNote       $08
000903A8 E701                       	dc.b	smpsNoAttack, $01
000903AA E105                       	smpsAlterNote       $05
000903AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903B0 E10B                       	smpsAlterNote       $0B
000903B2 E701                       	dc.b	smpsNoAttack, $01
000903B4 E10F                       	smpsAlterNote       $0F
000903B6 E701                       	dc.b	smpsNoAttack, $01
000903B8 E10E                       	smpsAlterNote       $0E
000903BA E701                       	dc.b	smpsNoAttack, $01
000903BC E108                       	smpsAlterNote       $08
000903BE E701                       	dc.b	smpsNoAttack, $01
000903C0 E104                       	smpsAlterNote       $04
000903C2 E701                       	dc.b	smpsNoAttack, $01
000903C4 E108                       	smpsAlterNote       $08
000903C6 E701                       	dc.b	smpsNoAttack, $01
000903C8 E10B                       	smpsAlterNote       $0B
000903CA E701                       	dc.b	smpsNoAttack, $01
000903CC E10F                       	smpsAlterNote       $0F
000903CE E701                       	dc.b	smpsNoAttack, $01
000903D0 E10B                       	smpsAlterNote       $0B
000903D2 E701                       	dc.b	smpsNoAttack, $01
000903D4 E105                       	smpsAlterNote       $05
000903D6 E701                       	dc.b	smpsNoAttack, $01
000903D8 E104                       	smpsAlterNote       $04
000903DA E701                       	dc.b	smpsNoAttack, $01
000903DC E108                       	smpsAlterNote       $08
000903DE E701                       	dc.b	smpsNoAttack, $01
000903E0 E10E                       	smpsAlterNote       $0E
000903E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903E6 E10B                       	smpsAlterNote       $0B
000903E8 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
000903EC E108                       	smpsAlterNote       $08
000903EE E701                       	dc.b	smpsNoAttack, $01
000903F0 E104                       	smpsAlterNote       $04
000903F2 E701                       	dc.b	smpsNoAttack, $01
000903F4 E108                       	smpsAlterNote       $08
000903F6 E701                       	dc.b	smpsNoAttack, $01
000903F8 E10B                       	smpsAlterNote       $0B
000903FA E701                       	dc.b	smpsNoAttack, $01
000903FE E0C0                       	smpsPan             panCenter, $00
00090400 E601                       	smpsAlterVol        $01
00090402 E108                       	smpsAlterNote       $08
00090404 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
00090410 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00090418 E080                       	smpsPan             panLeft, $00
0009041A 07                         	dc.b	$07
0009041B E6FF                       	smpsAlterVol        $FF
0009041D E10D                       	smpsAlterNote       $0D
0009041F B60D                       	dc.b	nF4, $0D
00090421 E10A                       	smpsAlterNote       $0A
00090423 E701                       	dc.b	smpsNoAttack, $01
00090425 E106                       	smpsAlterNote       $06
00090427 E701                       	dc.b	smpsNoAttack, $01
00090429 E10A                       	smpsAlterNote       $0A
0009042B E701                       	dc.b	smpsNoAttack, $01
0009042D E110                       	smpsAlterNote       $10
0009042F E701                       	dc.b	smpsNoAttack, $01
00090431 E111                       	smpsAlterNote       $11
00090433 E701                       	dc.b	smpsNoAttack, $01
00090435 E10D                       	smpsAlterNote       $0D
00090437 E701                       	dc.b	smpsNoAttack, $01
00090439 E107                       	smpsAlterNote       $07
0009043B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009043F E10A                       	smpsAlterNote       $0A
00090441 E701                       	dc.b	smpsNoAttack, $01
00090443 E110                       	smpsAlterNote       $10
00090445 E701                       	dc.b	smpsNoAttack, $01
00090447 E111                       	smpsAlterNote       $11
00090449 8001                       	dc.b	nRst, $01
0009044B E10D                       	smpsAlterNote       $0D
0009044D B80D                       	dc.b	nG4, $0D
0009044F E10A                       	smpsAlterNote       $0A
00090451 E701                       	dc.b	smpsNoAttack, $01
00090453 E106                       	smpsAlterNote       $06
00090455 E701                       	dc.b	smpsNoAttack, $01
00090457 E10A                       	smpsAlterNote       $0A
00090459 E701                       	dc.b	smpsNoAttack, $01
0009045B E110                       	smpsAlterNote       $10
0009045D E701                       	dc.b	smpsNoAttack, $01
0009045F E111                       	smpsAlterNote       $11
00090461 E701                       	dc.b	smpsNoAttack, $01
00090463 E10D                       	smpsAlterNote       $0D
00090465 E701                       	dc.b	smpsNoAttack, $01
00090467 E107                       	smpsAlterNote       $07
00090469 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009046D E10D                       	smpsAlterNote       $0D
0009046F E701                       	dc.b	smpsNoAttack, $01
00090471 E110                       	smpsAlterNote       $10
00090473 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090477 E10A                       	smpsAlterNote       $0A
00090479 E701                       	dc.b	smpsNoAttack, $01
0009047B E106                       	smpsAlterNote       $06
0009047D E701                       	dc.b	smpsNoAttack, $01
0009047F E107                       	smpsAlterNote       $07
00090481 E701                       	dc.b	smpsNoAttack, $01
00090483 E10D                       	smpsAlterNote       $0D
00090485 E701                       	dc.b	smpsNoAttack, $01
00090487 E111                       	smpsAlterNote       $11
00090489 E701                       	dc.b	smpsNoAttack, $01
0009048B E10D                       	smpsAlterNote       $0D
0009048D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090491 E10F                       	smpsAlterNote       $0F
00090493 BA0D                       	dc.b	nA4, $0D
00090495 E109                       	smpsAlterNote       $09
00090497 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009049B E10C                       	smpsAlterNote       $0C
0009049D E701                       	dc.b	smpsNoAttack, $01
0009049F E112                       	smpsAlterNote       $12
000904A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000904A5 E10C                       	smpsAlterNote       $0C
000904A7 E701                       	dc.b	smpsNoAttack, $01
000904A9 E109                       	smpsAlterNote       $09
000904AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000904AF E10F                       	smpsAlterNote       $0F
000904B1 E701                       	dc.b	smpsNoAttack, $01
000904B3 E113                       	smpsAlterNote       $13
000904B5 E701                       	dc.b	smpsNoAttack, $01
000904B7 E112                       	smpsAlterNote       $12
000904B9 E701                       	dc.b	smpsNoAttack, $01
000904BB E10C                       	smpsAlterNote       $0C
000904BD E701                       	dc.b	smpsNoAttack, $01
000904BF E108                       	smpsAlterNote       $08
000904C1 E701                       	dc.b	smpsNoAttack, $01
000904C3 E10C                       	smpsAlterNote       $0C
000904C5 E701                       	dc.b	smpsNoAttack, $01
000904C7 E10F                       	smpsAlterNote       $0F
000904C9 E701                       	dc.b	smpsNoAttack, $01
000904CB E113                       	smpsAlterNote       $13
000904CD E701                       	dc.b	smpsNoAttack, $01
000904CF E10F                       	smpsAlterNote       $0F
000904D1 E701                       	dc.b	smpsNoAttack, $01
000904D3 E109                       	smpsAlterNote       $09
000904D5 E701                       	dc.b	smpsNoAttack, $01
000904D7 E108                       	smpsAlterNote       $08
000904D9 E701                       	dc.b	smpsNoAttack, $01
000904DB E10C                       	smpsAlterNote       $0C
000904DD E701                       	dc.b	smpsNoAttack, $01
000904DF E112                       	smpsAlterNote       $12
000904E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000904E5 E10F                       	smpsAlterNote       $0F
000904E7 E701                       	dc.b	smpsNoAttack, $01
000904E9 E109                       	smpsAlterNote       $09
000904EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000904EF E10F                       	smpsAlterNote       $0F
000904F1 E701                       	dc.b	smpsNoAttack, $01
000904F3 E112                       	smpsAlterNote       $12
000904F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000904F9 E10C                       	smpsAlterNote       $0C
000904FB E701                       	dc.b	smpsNoAttack, $01
000904FD E108                       	smpsAlterNote       $08
000904FF E701                       	dc.b	smpsNoAttack, $01
00090501 E109                       	smpsAlterNote       $09
00090503 E701                       	dc.b	smpsNoAttack, $01
00090505 E10C                       	smpsAlterNote       $0C
00090507 B50A                       	dc.b	nE4, $0A
00090509 E10D                       	smpsAlterNote       $0D
0009050B B60E                       	dc.b	nF4, $0E
0009050D E107                       	smpsAlterNote       $07
0009050F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090513 E10D                       	smpsAlterNote       $0D
00090515 E701                       	dc.b	smpsNoAttack, $01
00090517 E110                       	smpsAlterNote       $10
00090519 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009051D E10A                       	smpsAlterNote       $0A
0009051F E701                       	dc.b	smpsNoAttack, $01
00090521 E106                       	smpsAlterNote       $06
00090523 E701                       	dc.b	smpsNoAttack, $01
00090525 E107                       	smpsAlterNote       $07
00090527 E701                       	dc.b	smpsNoAttack, $01
00090529 E10D                       	smpsAlterNote       $0D
0009052B E701                       	dc.b	smpsNoAttack, $01
0009052D E111                       	smpsAlterNote       $11
0009052F E701                       	dc.b	smpsNoAttack, $01
00090531 E10D                       	smpsAlterNote       $0D
00090533 B80D                       	dc.b	nG4, $0D
00090535 E10A                       	smpsAlterNote       $0A
00090537 E701                       	dc.b	smpsNoAttack, $01
00090539 E107                       	smpsAlterNote       $07
0009053B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009053F E10D                       	smpsAlterNote       $0D
00090541 E701                       	dc.b	smpsNoAttack, $01
00090543 E111                       	smpsAlterNote       $11
00090545 E701                       	dc.b	smpsNoAttack, $01
00090547 E110                       	smpsAlterNote       $10
00090549 E701                       	dc.b	smpsNoAttack, $01
0009054B E10A                       	smpsAlterNote       $0A
0009054D E701                       	dc.b	smpsNoAttack, $01
0009054F E106                       	smpsAlterNote       $06
00090551 E701                       	dc.b	smpsNoAttack, $01
00090553 E10A                       	smpsAlterNote       $0A
00090555 E701                       	dc.b	smpsNoAttack, $01
00090557 E10D                       	smpsAlterNote       $0D
00090559 E701                       	dc.b	smpsNoAttack, $01
0009055B E111                       	smpsAlterNote       $11
0009055D E701                       	dc.b	smpsNoAttack, $01
0009055F E10D                       	smpsAlterNote       $0D
00090561 E701                       	dc.b	smpsNoAttack, $01
00090563 E107                       	smpsAlterNote       $07
00090565 E701                       	dc.b	smpsNoAttack, $01
00090567 E106                       	smpsAlterNote       $06
00090569 E701                       	dc.b	smpsNoAttack, $01
0009056B E10A                       	smpsAlterNote       $0A
0009056D E701                       	dc.b	smpsNoAttack, $01
0009056F E110                       	smpsAlterNote       $10
00090571 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090575 E10D                       	smpsAlterNote       $0D
00090577 E701                       	dc.b	smpsNoAttack, $01
00090579 E10F                       	smpsAlterNote       $0F
0009057B BA0D                       	dc.b	nA4, $0D
0009057D E10C                       	smpsAlterNote       $0C
0009057F E701                       	dc.b	smpsNoAttack, $01
00090581 E108                       	smpsAlterNote       $08
00090583 E701                       	dc.b	smpsNoAttack, $01
00090585 E109                       	smpsAlterNote       $09
00090587 E701                       	dc.b	smpsNoAttack, $01
00090589 E10F                       	smpsAlterNote       $0F
0009058B E701                       	dc.b	smpsNoAttack, $01
0009058D E113                       	smpsAlterNote       $13
0009058F E701                       	dc.b	smpsNoAttack, $01
00090591 E10F                       	smpsAlterNote       $0F
00090593 E701                       	dc.b	smpsNoAttack, $01
00090595 E10C                       	smpsAlterNote       $0C
00090597 E701                       	dc.b	smpsNoAttack, $01
00090599 E108                       	smpsAlterNote       $08
0009059B E701                       	dc.b	smpsNoAttack, $01
0009059D E10C                       	smpsAlterNote       $0C
0009059F E701                       	dc.b	smpsNoAttack, $01
000905A1 E112                       	smpsAlterNote       $12
000905A3 E701                       	dc.b	smpsNoAttack, $01
000905A5 E113                       	smpsAlterNote       $13
000905A7 E701                       	dc.b	smpsNoAttack, $01
000905A9 E10F                       	smpsAlterNote       $0F
000905AB E701                       	dc.b	smpsNoAttack, $01
000905AD E109                       	smpsAlterNote       $09
000905AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000905B3 E10C                       	smpsAlterNote       $0C
000905B5 E701                       	dc.b	smpsNoAttack, $01
000905B7 E112                       	smpsAlterNote       $12
000905B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000905BD E10C                       	smpsAlterNote       $0C
000905BF E701                       	dc.b	smpsNoAttack, $01
000905C1 E109                       	smpsAlterNote       $09
000905C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000905C7 E10F                       	smpsAlterNote       $0F
000905C9 E701                       	dc.b	smpsNoAttack, $01
000905CB E113                       	smpsAlterNote       $13
000905CD E701                       	dc.b	smpsNoAttack, $01
000905CF E112                       	smpsAlterNote       $12
000905D1 E701                       	dc.b	smpsNoAttack, $01
000905D3 E10C                       	smpsAlterNote       $0C
000905D5 E701                       	dc.b	smpsNoAttack, $01
000905D7 E109                       	smpsAlterNote       $09
000905D9 8001                       	dc.b	nRst, $01
000905DB E10D                       	smpsAlterNote       $0D
000905DD B60A                       	dc.b	nF4, $0A
000905DF E10C                       	smpsAlterNote       $0C
000905E1 B506 8001                  	dc.b	nE4, $06, nRst, $01
000905E5 E10B                       	smpsAlterNote       $0B
000905E7 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000905EB E10C                       	smpsAlterNote       $0C
000905ED B503                       	dc.b	nE4, $03
000905EF E10D                       	smpsAlterNote       $0D
000905F1 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
000905FB E10C                       	smpsAlterNote       $0C
000905FD E701                       	dc.b	smpsNoAttack, $01
000905FF E108                       	smpsAlterNote       $08
00090601 E701                       	dc.b	smpsNoAttack, $01
00090603 E10C                       	smpsAlterNote       $0C
00090605 E701                       	dc.b	smpsNoAttack, $01
00090607 E112                       	smpsAlterNote       $12
00090609 E701                       	dc.b	smpsNoAttack, $01
0009060B E113                       	smpsAlterNote       $13
0009060D E701                       	dc.b	smpsNoAttack, $01
0009060F E10F                       	smpsAlterNote       $0F
00090611 E701                       	dc.b	smpsNoAttack, $01
00090613 E109                       	smpsAlterNote       $09
00090615 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090619 E10C                       	smpsAlterNote       $0C
0009061B E701                       	dc.b	smpsNoAttack, $01
0009061D E112                       	smpsAlterNote       $12
0009061F E701                       	dc.b	smpsNoAttack, $01
00090621 E113                       	smpsAlterNote       $13
00090623 8001                       	dc.b	nRst, $01
00090625 E10D                       	smpsAlterNote       $0D
00090627 C20D                       	dc.b	nF5, $0D
00090629 E10A                       	smpsAlterNote       $0A
0009062B E701                       	dc.b	smpsNoAttack, $01
0009062D E106                       	smpsAlterNote       $06
0009062F E701                       	dc.b	smpsNoAttack, $01
00090631 E10A                       	smpsAlterNote       $0A
00090633 E701                       	dc.b	smpsNoAttack, $01
00090635 E110                       	smpsAlterNote       $10
00090637 E701                       	dc.b	smpsNoAttack, $01
00090639 E111                       	smpsAlterNote       $11
0009063B E701                       	dc.b	smpsNoAttack, $01
0009063D E10D                       	smpsAlterNote       $0D
0009063F E701                       	dc.b	smpsNoAttack, $01
00090641 E107                       	smpsAlterNote       $07
00090643 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090647 E10A                       	smpsAlterNote       $0A
00090649 E701                       	dc.b	smpsNoAttack, $01
0009064B E110                       	smpsAlterNote       $10
0009064D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090651 E10A                       	smpsAlterNote       $0A
00090653 E701                       	dc.b	smpsNoAttack, $01
00090655 E107                       	smpsAlterNote       $07
00090657 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009065B E10D                       	smpsAlterNote       $0D
0009065D E701                       	dc.b	smpsNoAttack, $01
0009065F E111                       	smpsAlterNote       $11
00090661 E701                       	dc.b	smpsNoAttack, $01
00090663 E110                       	smpsAlterNote       $10
00090665 E701                       	dc.b	smpsNoAttack, $01
00090667 E10A                       	smpsAlterNote       $0A
00090669 E701                       	dc.b	smpsNoAttack, $01
0009066B E106                       	smpsAlterNote       $06
0009066D E701                       	dc.b	smpsNoAttack, $01
0009066F E10A                       	smpsAlterNote       $0A
00090671 E701                       	dc.b	smpsNoAttack, $01
00090673 E10D                       	smpsAlterNote       $0D
00090675 E701                       	dc.b	smpsNoAttack, $01
00090677 E111                       	smpsAlterNote       $11
00090679 E701                       	dc.b	smpsNoAttack, $01
0009067B E10D                       	smpsAlterNote       $0D
0009067D E701                       	dc.b	smpsNoAttack, $01
0009067F E107                       	smpsAlterNote       $07
00090681 E701                       	dc.b	smpsNoAttack, $01
00090683 E106                       	smpsAlterNote       $06
00090685 E701                       	dc.b	smpsNoAttack, $01
00090687 E10A                       	smpsAlterNote       $0A
00090689 E701                       	dc.b	smpsNoAttack, $01
0009068B E110                       	smpsAlterNote       $10
0009068D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090691 E10D                       	smpsAlterNote       $0D
00090693 E701                       	dc.b	smpsNoAttack, $01
00090695 E107                       	smpsAlterNote       $07
00090697 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009069B E10D                       	smpsAlterNote       $0D
0009069D E701                       	dc.b	smpsNoAttack, $01
0009069F E110                       	smpsAlterNote       $10
000906A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000906A5 E10A                       	smpsAlterNote       $0A
000906A7 E701                       	dc.b	smpsNoAttack, $01
000906A9 E106                       	smpsAlterNote       $06
000906AB E701                       	dc.b	smpsNoAttack, $01
000906AD E107                       	smpsAlterNote       $07
000906AF E701                       	dc.b	smpsNoAttack, $01
000906B1 E10D                       	smpsAlterNote       $0D
000906B3 E701                       	dc.b	smpsNoAttack, $01
000906B5 E111                       	smpsAlterNote       $11
000906B7 E701                       	dc.b	smpsNoAttack, $01
000906B9 E10D                       	smpsAlterNote       $0D
000906BB E701                       	dc.b	smpsNoAttack, $01
000906BD E10A                       	smpsAlterNote       $0A
000906BF E701                       	dc.b	smpsNoAttack, $01
000906C1 E107                       	smpsAlterNote       $07
000906C3 8001                       	dc.b	nRst, $01
000906C5 E10D                       	smpsAlterNote       $0D
000906C7 C206 8001                  	dc.b	nF5, $06, nRst, $01
000906CD E601                       	smpsAlterVol        $01
000906CF E110                       	smpsAlterNote       $10
000906D1 BB0D                       	dc.b	nBb4, $0D
000906D3 E10A                       	smpsAlterNote       $0A
000906D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000906D9 E110                       	smpsAlterNote       $10
000906DB E701                       	dc.b	smpsNoAttack, $01
000906DD E113                       	smpsAlterNote       $13
000906DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000906E3 E10D                       	smpsAlterNote       $0D
000906E5 E701                       	dc.b	smpsNoAttack, $01
000906E7 E109                       	smpsAlterNote       $09
000906E9 E701                       	dc.b	smpsNoAttack, $01
000906EB E10A                       	smpsAlterNote       $0A
000906ED E701                       	dc.b	smpsNoAttack, $01
000906EF E110                       	smpsAlterNote       $10
000906F1 E701                       	dc.b	smpsNoAttack, $01
000906F3 E114                       	smpsAlterNote       $14
000906F5 E701                       	dc.b	smpsNoAttack, $01
000906F7 E110                       	smpsAlterNote       $10
000906F9 E701                       	dc.b	smpsNoAttack, $01
000906FB E10D                       	smpsAlterNote       $0D
000906FD E701                       	dc.b	smpsNoAttack, $01
000906FF E109                       	smpsAlterNote       $09
00090701 E701                       	dc.b	smpsNoAttack, $01
00090703 E10A                       	smpsAlterNote       $0A
00090705 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00090709 E107                       	smpsAlterNote       $07
0009070B E701                       	dc.b	smpsNoAttack, $01
0009070D E103                       	smpsAlterNote       $03
0009070F E701                       	dc.b	smpsNoAttack, $01
00090711 E107                       	smpsAlterNote       $07
00090713 E701                       	dc.b	smpsNoAttack, $01
00090715 E10D                       	smpsAlterNote       $0D
00090717 E701                       	dc.b	smpsNoAttack, $01
00090719 E10E                       	smpsAlterNote       $0E
0009071B E701                       	dc.b	smpsNoAttack, $01
0009071D E10A                       	smpsAlterNote       $0A
0009071F E701                       	dc.b	smpsNoAttack, $01
00090721 E104                       	smpsAlterNote       $04
00090723 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090727 E107                       	smpsAlterNote       $07
00090729 E701                       	dc.b	smpsNoAttack, $01
0009072B E10D                       	smpsAlterNote       $0D
0009072D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090731 E107                       	smpsAlterNote       $07
00090733 E701                       	dc.b	smpsNoAttack, $01
00090735 E104                       	smpsAlterNote       $04
00090737 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009073B E10B                       	smpsAlterNote       $0B
0009073D BF0D                       	dc.b	nD5, $0D
0009073F E108                       	smpsAlterNote       $08
00090741 E701                       	dc.b	smpsNoAttack, $01
00090743 E105                       	smpsAlterNote       $05
00090745 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090749 E10B                       	smpsAlterNote       $0B
0009074B E701                       	dc.b	smpsNoAttack, $01
0009074D E10F                       	smpsAlterNote       $0F
0009074F E701                       	dc.b	smpsNoAttack, $01
00090751 E10E                       	smpsAlterNote       $0E
00090753 E701                       	dc.b	smpsNoAttack, $01
00090755 E108                       	smpsAlterNote       $08
00090757 E701                       	dc.b	smpsNoAttack, $01
00090759 E104                       	smpsAlterNote       $04
0009075B E701                       	dc.b	smpsNoAttack, $01
0009075D E108                       	smpsAlterNote       $08
0009075F E701                       	dc.b	smpsNoAttack, $01
00090761 E10B                       	smpsAlterNote       $0B
00090763 E701                       	dc.b	smpsNoAttack, $01
00090765 E10F                       	smpsAlterNote       $0F
00090767 E701                       	dc.b	smpsNoAttack, $01
00090769 E10B                       	smpsAlterNote       $0B
0009076B E701                       	dc.b	smpsNoAttack, $01
0009076D E105                       	smpsAlterNote       $05
0009076F E701                       	dc.b	smpsNoAttack, $01
00090771 E104                       	smpsAlterNote       $04
00090773 E701                       	dc.b	smpsNoAttack, $01
00090775 E105                       	smpsAlterNote       $05
00090777 8001                       	dc.b	nRst, $01
00090779 E10C                       	smpsAlterNote       $0C
0009077B C10C                       	dc.b	nE5, $0C
0009077D E10D                       	smpsAlterNote       $0D
0009077F C201                       	dc.b	nF5, $01
00090781 E10E                       	smpsAlterNote       $0E
00090783 C301 8001                  	dc.b	nFs5, $01, nRst, $01
00090787 E10D                       	smpsAlterNote       $0D
00090789 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009078D E10A                       	smpsAlterNote       $0A
0009078F E701                       	dc.b	smpsNoAttack, $01
00090791 E106                       	smpsAlterNote       $06
00090793 E701                       	dc.b	smpsNoAttack, $01
00090795 E10A                       	smpsAlterNote       $0A
00090797 E701                       	dc.b	smpsNoAttack, $01
00090799 E10D                       	smpsAlterNote       $0D
0009079B E701                       	dc.b	smpsNoAttack, $01
0009079D E111                       	smpsAlterNote       $11
0009079F E701                       	dc.b	smpsNoAttack, $01
000907A1 E10D                       	smpsAlterNote       $0D
000907A3 E701                       	dc.b	smpsNoAttack, $01
000907A5 E107                       	smpsAlterNote       $07
000907A7 E701                       	dc.b	smpsNoAttack, $01
000907A9 E106                       	smpsAlterNote       $06
000907AB E701                       	dc.b	smpsNoAttack, $01
000907AD E10A                       	smpsAlterNote       $0A
000907AF E701                       	dc.b	smpsNoAttack, $01
000907B1 E110                       	smpsAlterNote       $10
000907B3 E701                       	dc.b	smpsNoAttack, $01
000907B5 E111                       	smpsAlterNote       $11
000907B7 8001                       	dc.b	nRst, $01
000907B9 E10D                       	smpsAlterNote       $0D
000907BB C40D                       	dc.b	nG5, $0D
000907BD E10A                       	smpsAlterNote       $0A
000907BF E701                       	dc.b	smpsNoAttack, $01
000907C1 E106                       	smpsAlterNote       $06
000907C3 E701                       	dc.b	smpsNoAttack, $01
000907C5 E10A                       	smpsAlterNote       $0A
000907C7 E701                       	dc.b	smpsNoAttack, $01
000907C9 E10D                       	smpsAlterNote       $0D
000907CB E701                       	dc.b	smpsNoAttack, $01
000907CD E10C                       	smpsAlterNote       $0C
000907CF C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
000907DB 8001                       	dc.b	nRst, $01
000907DD E10D                       	smpsAlterNote       $0D
000907DF C20D                       	dc.b	nF5, $0D
000907E1 E10A                       	smpsAlterNote       $0A
000907E3 E701                       	dc.b	smpsNoAttack, $01
000907E5 E106                       	smpsAlterNote       $06
000907E7 E701                       	dc.b	smpsNoAttack, $01
000907E9 E10A                       	smpsAlterNote       $0A
000907EB E701                       	dc.b	smpsNoAttack, $01
000907ED E110                       	smpsAlterNote       $10
000907EF E701                       	dc.b	smpsNoAttack, $01
000907F1 E111                       	smpsAlterNote       $11
000907F3 E701                       	dc.b	smpsNoAttack, $01
000907F5 E10D                       	smpsAlterNote       $0D
000907F7 E701                       	dc.b	smpsNoAttack, $01
000907F9 E107                       	smpsAlterNote       $07
000907FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000907FF E10A                       	smpsAlterNote       $0A
00090801 E701                       	dc.b	smpsNoAttack, $01
00090803 E110                       	smpsAlterNote       $10
00090805 E701                       	dc.b	smpsNoAttack, $01
00090807 E111                       	smpsAlterNote       $11
00090809 8001                       	dc.b	nRst, $01
0009080B E10F                       	smpsAlterNote       $0F
0009080D C60A                       	dc.b	nA5, $0A
0009080F E10D                       	smpsAlterNote       $0D
00090811 C406 8001                  	dc.b	nG5, $06, nRst, $01
00090815 E10C                       	smpsAlterNote       $0C
00090817 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00090823 8001                       	dc.b	nRst, $01
00090825 E10D                       	smpsAlterNote       $0D
00090827 C20D                       	dc.b	nF5, $0D
00090829 E107                       	smpsAlterNote       $07
0009082B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009082F E10A                       	smpsAlterNote       $0A
00090831 E701                       	dc.b	smpsNoAttack, $01
00090833 E110                       	smpsAlterNote       $10
00090835 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090839 E10A                       	smpsAlterNote       $0A
0009083B E701                       	dc.b	smpsNoAttack, $01
0009083D E107                       	smpsAlterNote       $07
0009083F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090843 E10D                       	smpsAlterNote       $0D
00090845 E701                       	dc.b	smpsNoAttack, $01
00090847 E111                       	smpsAlterNote       $11
00090849 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009084D E10D                       	smpsAlterNote       $0D
0009084F C40D                       	dc.b	nG5, $0D
00090851 E107                       	smpsAlterNote       $07
00090853 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090857 E10A                       	smpsAlterNote       $0A
00090859 E701                       	dc.b	smpsNoAttack, $01
0009085B E10D                       	smpsAlterNote       $0D
0009085D 8001                       	dc.b	nRst, $01
0009085F E10C                       	smpsAlterNote       $0C
00090861 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009086D E10D                       	smpsAlterNote       $0D
0009086F C20E                       	dc.b	nF5, $0E
00090871 E107                       	smpsAlterNote       $07
00090873 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090877 E10D                       	smpsAlterNote       $0D
00090879 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009087F E0C0                       	smpsPan             panCenter, $00
00090881 E603                       	smpsAlterVol        $03
00090883 E108                       	smpsAlterNote       $08
00090885 B406                       	dc.b	nEb4, $06
00090887 E10C                       	smpsAlterNote       $0C
00090889 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009088D E108                       	smpsAlterNote       $08
0009088F B403                       	dc.b	nEb4, $03
00090891 E109                       	smpsAlterNote       $09
00090893 B803 8001                  	dc.b	nG4, $03, nRst, $01
00090897 E10C                       	smpsAlterNote       $0C
00090899 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
000908A1 03                         	dc.b	$03
000908A2 E6FD                       	smpsAlterVol        $FD
000908A4 F6F1 F4                    	smpsJump            music84_Jump00
000908A7                            
000908A7                            ; PSG1 Data
000908A7                            music84_PSG1:
000908A7 E1FD                       	smpsAlterNote       $FD
000908A9 EC04                       	smpsPSGAlterVol     $04
000908AB 9203                       	dc.b	nF1, $03
000908AD E1FE                       	smpsAlterNote       $FE
000908AF 9603                       	dc.b	nA1, $03
000908B1 EC04                       	smpsPSGAlterVol     $04
000908B3 E701                       	dc.b	smpsNoAttack, $01
000908B5 E1FF                       	smpsAlterNote       $FF
000908B7 ECFC                       	smpsPSGAlterVol     $FC
000908B9 9B03                       	dc.b	nD2, $03
000908BB E1FD                       	smpsAlterNote       $FD
000908BD 9403                       	dc.b	nG1, $03
000908BF EC04                       	smpsPSGAlterVol     $04
000908C1 E701                       	dc.b	smpsNoAttack, $01
000908C3 E1FE                       	smpsAlterNote       $FE
000908C5 ECFC                       	smpsPSGAlterVol     $FC
000908C7 9703                       	dc.b	nBb1, $03
000908C9 E1FF                       	smpsAlterNote       $FF
000908CB 9B03                       	dc.b	nD2, $03
000908CD EC04                       	smpsPSGAlterVol     $04
000908CF E701                       	dc.b	smpsNoAttack, $01
000908D1 E1FE                       	smpsAlterNote       $FE
000908D3 ECFC                       	smpsPSGAlterVol     $FC
000908D5 A002                       	dc.b	nG2, $02
000908D7 EC04                       	smpsPSGAlterVol     $04
000908D9 E701                       	dc.b	smpsNoAttack, $01
000908DB E1FF                       	smpsAlterNote       $FF
000908DD ECFC                       	smpsPSGAlterVol     $FC
000908DF A203                       	dc.b	nA2, $03
000908E1 EC0B                       	smpsPSGAlterVol     $0B
000908E3 800A                       	dc.b	nRst, $0A
000908E5 E105                       	smpsAlterNote       $05
000908E7 01                         	dc.b	$01
000908E8 E1FC                       	smpsAlterNote       $FC
000908EA 01                         	dc.b	$01
000908EB E105                       	smpsAlterNote       $05
000908ED 01                         	dc.b	$01
000908EE E1FD                       	smpsAlterNote       $FD
000908F0 01                         	dc.b	$01
000908F1 E105                       	smpsAlterNote       $05
000908F3 01                         	dc.b	$01
000908F4 E1FD                       	smpsAlterNote       $FD
000908F6 01                         	dc.b	$01
000908F7 E1FA                       	smpsAlterNote       $FA
000908F9 01                         	dc.b	$01
000908FA E1FC                       	smpsAlterNote       $FC
000908FC 01                         	dc.b	$01
000908FD E105                       	smpsAlterNote       $05
000908FF 01                         	dc.b	$01
00090900 E108                       	smpsAlterNote       $08
00090902 0101                       	dc.b	$01, $01
00090904 E105                       	smpsAlterNote       $05
00090906 01                         	dc.b	$01
00090907 E1FA                       	smpsAlterNote       $FA
00090909 0101                       	dc.b	$01, $01
0009090B E1FD                       	smpsAlterNote       $FD
0009090D 01                         	dc.b	$01
0009090E E105                       	smpsAlterNote       $05
00090910 01                         	dc.b	$01
00090911 E108                       	smpsAlterNote       $08
00090913 01                         	dc.b	$01
00090914 E105                       	smpsAlterNote       $05
00090916 01                         	dc.b	$01
00090917 E1FC                       	smpsAlterNote       $FC
00090919 01                         	dc.b	$01
0009091A E105                       	smpsAlterNote       $05
0009091C 01                         	dc.b	$01
0009091D E1FD                       	smpsAlterNote       $FD
0009091F 01                         	dc.b	$01
00090920                            
00090920                            music84_Jump07:
00090920 E105                       	smpsAlterNote       $05
00090922 8001                       	dc.b	nRst, $01
00090924 E1FD                       	smpsAlterNote       $FD
00090926 01                         	dc.b	$01
00090927 E1FA                       	smpsAlterNote       $FA
00090929 01                         	dc.b	$01
0009092A E1FC                       	smpsAlterNote       $FC
0009092C 01                         	dc.b	$01
0009092D E1FD                       	smpsAlterNote       $FD
0009092F ECF5                       	smpsPSGAlterVol     $F5
00090931 9206                       	dc.b	nF1, $06
00090933 EC04                       	smpsPSGAlterVol     $04
00090935 E701                       	dc.b	smpsNoAttack, $01
00090937 EC07                       	smpsPSGAlterVol     $07
00090939 8003                       	dc.b	nRst, $03
0009093B ECF5                       	smpsPSGAlterVol     $F5
0009093D 9206                       	dc.b	nF1, $06
0009093F EC04                       	smpsPSGAlterVol     $04
00090941 E701                       	dc.b	smpsNoAttack, $01
00090943 EC07                       	smpsPSGAlterVol     $07
00090945 8006                       	dc.b	nRst, $06
00090947 E100                       	smpsAlterNote       $00
00090949 01                         	dc.b	$01
0009094A E104                       	smpsAlterNote       $04
0009094C 01                         	dc.b	$01
0009094D E100                       	smpsAlterNote       $00
0009094F 01                         	dc.b	$01
00090950 E1FB                       	smpsAlterNote       $FB
00090952 01                         	dc.b	$01
00090953 E1FD                       	smpsAlterNote       $FD
00090955 ECF5                       	smpsPSGAlterVol     $F5
00090957 9406                       	dc.b	nG1, $06
00090959 EC04                       	smpsPSGAlterVol     $04
0009095B E701                       	dc.b	smpsNoAttack, $01
0009095D EC07                       	smpsPSGAlterVol     $07
0009095F 8003                       	dc.b	nRst, $03
00090961 ECF5                       	smpsPSGAlterVol     $F5
00090963 9407                       	dc.b	nG1, $07
00090965 EC0B                       	smpsPSGAlterVol     $0B
00090967 8006                       	dc.b	nRst, $06
00090969 E100                       	smpsAlterNote       $00
0009096B 01                         	dc.b	$01
0009096C E103                       	smpsAlterNote       $03
0009096E 0101                       	dc.b	$01, $01
00090970 E1FD                       	smpsAlterNote       $FD
00090972 01                         	dc.b	$01
00090973 ECF5                       	smpsPSGAlterVol     $F5
00090975 9207                       	dc.b	nF1, $07
00090977 EC0B                       	smpsPSGAlterVol     $0B
00090979 8004                       	dc.b	nRst, $04
0009097B ECF5                       	smpsPSGAlterVol     $F5
0009097D 9206                       	dc.b	nF1, $06
0009097F EC04                       	smpsPSGAlterVol     $04
00090981 E701                       	dc.b	smpsNoAttack, $01
00090983 EC07                       	smpsPSGAlterVol     $07
00090985 8006                       	dc.b	nRst, $06
00090987 E103                       	smpsAlterNote       $03
00090989 01                         	dc.b	$01
0009098A E104                       	smpsAlterNote       $04
0009098C 01                         	dc.b	$01
0009098D E100                       	smpsAlterNote       $00
0009098F 01                         	dc.b	$01
00090990 E1FA                       	smpsAlterNote       $FA
00090992 01                         	dc.b	$01
00090993 E1FD                       	smpsAlterNote       $FD
00090995 ECF5                       	smpsPSGAlterVol     $F5
00090997 9206                       	dc.b	nF1, $06
00090999 EC04                       	smpsPSGAlterVol     $04
0009099B E701                       	dc.b	smpsNoAttack, $01
0009099D EC07                       	smpsPSGAlterVol     $07
0009099F 8003                       	dc.b	nRst, $03
000909A1 ECF5                       	smpsPSGAlterVol     $F5
000909A3 9106                       	dc.b	nE1, $06
000909A5 EC04                       	smpsPSGAlterVol     $04
000909A7 E701                       	dc.b	smpsNoAttack, $01
000909A9 EC07                       	smpsPSGAlterVol     $07
000909AB 8006                       	dc.b	nRst, $06
000909AD E100                       	smpsAlterNote       $00
000909AF 01                         	dc.b	$01
000909B0 E104                       	smpsAlterNote       $04
000909B2 01                         	dc.b	$01
000909B3 E100                       	smpsAlterNote       $00
000909B5 01                         	dc.b	$01
000909B6 E1FD                       	smpsAlterNote       $FD
000909B8 01                         	dc.b	$01
000909B9 ECF5                       	smpsPSGAlterVol     $F5
000909BB 9206                       	dc.b	nF1, $06
000909BD EC04                       	smpsPSGAlterVol     $04
000909BF E701                       	dc.b	smpsNoAttack, $01
000909C1 EC07                       	smpsPSGAlterVol     $07
000909C3 8003                       	dc.b	nRst, $03
000909C5 ECF5                       	smpsPSGAlterVol     $F5
000909C7 9207                       	dc.b	nF1, $07
000909C9 EC0B                       	smpsPSGAlterVol     $0B
000909CB 8007                       	dc.b	nRst, $07
000909CD E103                       	smpsAlterNote       $03
000909CF 0101                       	dc.b	$01, $01
000909D1 E1FD                       	smpsAlterNote       $FD
000909D3 01                         	dc.b	$01
000909D4 E1FB                       	smpsAlterNote       $FB
000909D6 01                         	dc.b	$01
000909D7 E1FD                       	smpsAlterNote       $FD
000909D9 ECF5                       	smpsPSGAlterVol     $F5
000909DB 9406                       	dc.b	nG1, $06
000909DD EC0B                       	smpsPSGAlterVol     $0B
000909DF 8004                       	dc.b	nRst, $04
000909E1 ECF5                       	smpsPSGAlterVol     $F5
000909E3 9406                       	dc.b	nG1, $06
000909E5 EC04                       	smpsPSGAlterVol     $04
000909E7 E701                       	dc.b	smpsNoAttack, $01
000909E9 EC07                       	smpsPSGAlterVol     $07
000909EB 8006                       	dc.b	nRst, $06
000909ED E100                       	smpsAlterNote       $00
000909EF 01                         	dc.b	$01
000909F0 E104                       	smpsAlterNote       $04
000909F2 01                         	dc.b	$01
000909F3 E100                       	smpsAlterNote       $00
000909F5 01                         	dc.b	$01
000909F6 E1F9                       	smpsAlterNote       $F9
000909F8 01                         	dc.b	$01
000909F9 E1FD                       	smpsAlterNote       $FD
000909FB ECF5                       	smpsPSGAlterVol     $F5
000909FD 9206                       	dc.b	nF1, $06
000909FF EC04                       	smpsPSGAlterVol     $04
00090A01 E701                       	dc.b	smpsNoAttack, $01
00090A03 EC07                       	smpsPSGAlterVol     $07
00090A05 8003                       	dc.b	nRst, $03
00090A07 ECF5                       	smpsPSGAlterVol     $F5
00090A09 9207                       	dc.b	nF1, $07
00090A0B EC0B                       	smpsPSGAlterVol     $0B
00090A0D 8006                       	dc.b	nRst, $06
00090A0F E100                       	smpsAlterNote       $00
00090A11 01                         	dc.b	$01
00090A12 E104                       	smpsAlterNote       $04
00090A14 01                         	dc.b	$01
00090A15 E103                       	smpsAlterNote       $03
00090A17 01                         	dc.b	$01
00090A18 E1FD                       	smpsAlterNote       $FD
00090A1A 01                         	dc.b	$01
00090A1B ECF5                       	smpsPSGAlterVol     $F5
00090A1D 9207                       	dc.b	nF1, $07
00090A1F EC0B                       	smpsPSGAlterVol     $0B
00090A21 8004                       	dc.b	nRst, $04
00090A23 ECF5                       	smpsPSGAlterVol     $F5
00090A25 9206                       	dc.b	nF1, $06
00090A27 EC0B                       	smpsPSGAlterVol     $0B
00090A29 8007                       	dc.b	nRst, $07
00090A2B E103                       	smpsAlterNote       $03
00090A2D 0101                       	dc.b	$01, $01
00090A2F E100                       	smpsAlterNote       $00
00090A31 01                         	dc.b	$01
00090A32 E1FA                       	smpsAlterNote       $FA
00090A34 01                         	dc.b	$01
00090A35 E1FD                       	smpsAlterNote       $FD
00090A37 ECF5                       	smpsPSGAlterVol     $F5
00090A39 9206                       	dc.b	nF1, $06
00090A3B EC04                       	smpsPSGAlterVol     $04
00090A3D E701                       	dc.b	smpsNoAttack, $01
00090A3F EC07                       	smpsPSGAlterVol     $07
00090A41 8003                       	dc.b	nRst, $03
00090A43 ECF5                       	smpsPSGAlterVol     $F5
00090A45 9206                       	dc.b	nF1, $06
00090A47 EC04                       	smpsPSGAlterVol     $04
00090A49 E701                       	dc.b	smpsNoAttack, $01
00090A4B EC07                       	smpsPSGAlterVol     $07
00090A4D 8006                       	dc.b	nRst, $06
00090A4F E100                       	smpsAlterNote       $00
00090A51 01                         	dc.b	$01
00090A52 E104                       	smpsAlterNote       $04
00090A54 01                         	dc.b	$01
00090A55 E100                       	smpsAlterNote       $00
00090A57 01                         	dc.b	$01
00090A58 E1FD                       	smpsAlterNote       $FD
00090A5A 01                         	dc.b	$01
00090A5B ECF5                       	smpsPSGAlterVol     $F5
00090A5D 9206                       	dc.b	nF1, $06
00090A5F EC04                       	smpsPSGAlterVol     $04
00090A61 E701                       	dc.b	smpsNoAttack, $01
00090A63 EC07                       	smpsPSGAlterVol     $07
00090A65 8003                       	dc.b	nRst, $03
00090A67 ECF5                       	smpsPSGAlterVol     $F5
00090A69 9207                       	dc.b	nF1, $07
00090A6B EC0B                       	smpsPSGAlterVol     $0B
00090A6D 8007                       	dc.b	nRst, $07
00090A6F E103                       	smpsAlterNote       $03
00090A71 0101                       	dc.b	$01, $01
00090A73 E1FD                       	smpsAlterNote       $FD
00090A75 01                         	dc.b	$01
00090A76 E1FA                       	smpsAlterNote       $FA
00090A78 01                         	dc.b	$01
00090A79 E1FD                       	smpsAlterNote       $FD
00090A7B ECF5                       	smpsPSGAlterVol     $F5
00090A7D 9206                       	dc.b	nF1, $06
00090A7F EC0B                       	smpsPSGAlterVol     $0B
00090A81 8004                       	dc.b	nRst, $04
00090A83 ECF5                       	smpsPSGAlterVol     $F5
00090A85 9206                       	dc.b	nF1, $06
00090A87 EC04                       	smpsPSGAlterVol     $04
00090A89 E701                       	dc.b	smpsNoAttack, $01
00090A8B EC07                       	smpsPSGAlterVol     $07
00090A8D 8006                       	dc.b	nRst, $06
00090A8F E103                       	smpsAlterNote       $03
00090A91 01                         	dc.b	$01
00090A92 E104                       	smpsAlterNote       $04
00090A94 01                         	dc.b	$01
00090A95 E100                       	smpsAlterNote       $00
00090A97 01                         	dc.b	$01
00090A98 E1FA                       	smpsAlterNote       $FA
00090A9A 01                         	dc.b	$01
00090A9B E1FD                       	smpsAlterNote       $FD
00090A9D ECF5                       	smpsPSGAlterVol     $F5
00090A9F 9206                       	dc.b	nF1, $06
00090AA1 EC04                       	smpsPSGAlterVol     $04
00090AA3 E701                       	dc.b	smpsNoAttack, $01
00090AA5 EC07                       	smpsPSGAlterVol     $07
00090AA7 8003                       	dc.b	nRst, $03
00090AA9 ECF5                       	smpsPSGAlterVol     $F5
00090AAB 9206                       	dc.b	nF1, $06
00090AAD EC04                       	smpsPSGAlterVol     $04
00090AAF E701                       	dc.b	smpsNoAttack, $01
00090AB1 EC07                       	smpsPSGAlterVol     $07
00090AB3 8006                       	dc.b	nRst, $06
00090AB5 E100                       	smpsAlterNote       $00
00090AB7 01                         	dc.b	$01
00090AB8 E104                       	smpsAlterNote       $04
00090ABA 01                         	dc.b	$01
00090ABB E103                       	smpsAlterNote       $03
00090ABD 01                         	dc.b	$01
00090ABE E1FD                       	smpsAlterNote       $FD
00090AC0 01                         	dc.b	$01
00090AC1 ECF5                       	smpsPSGAlterVol     $F5
00090AC3 9107                       	dc.b	nE1, $07
00090AC5 EC0B                       	smpsPSGAlterVol     $0B
00090AC7 8004                       	dc.b	nRst, $04
00090AC9 ECF5                       	smpsPSGAlterVol     $F5
00090ACB 9106                       	dc.b	nE1, $06
00090ACD EC0B                       	smpsPSGAlterVol     $0B
00090ACF 8007                       	dc.b	nRst, $07
00090AD1 E103                       	smpsAlterNote       $03
00090AD3 0101                       	dc.b	$01, $01
00090AD5 E100                       	smpsAlterNote       $00
00090AD7 01                         	dc.b	$01
00090AD8 E1FA                       	smpsAlterNote       $FA
00090ADA 01                         	dc.b	$01
00090ADB E1FD                       	smpsAlterNote       $FD
00090ADD ECF5                       	smpsPSGAlterVol     $F5
00090ADF 9106                       	dc.b	nE1, $06
00090AE1 EC04                       	smpsPSGAlterVol     $04
00090AE3 E701                       	dc.b	smpsNoAttack, $01
00090AE5 EC07                       	smpsPSGAlterVol     $07
00090AE7 8003                       	dc.b	nRst, $03
00090AE9 ECF5                       	smpsPSGAlterVol     $F5
00090AEB 9106                       	dc.b	nE1, $06
00090AED EC04                       	smpsPSGAlterVol     $04
00090AEF E701                       	dc.b	smpsNoAttack, $01
00090AF1 EC07                       	smpsPSGAlterVol     $07
00090AF3 8006                       	dc.b	nRst, $06
00090AF5 E100                       	smpsAlterNote       $00
00090AF7 01                         	dc.b	$01
00090AF8 E104                       	smpsAlterNote       $04
00090AFA 01                         	dc.b	$01
00090AFB E100                       	smpsAlterNote       $00
00090AFD 01                         	dc.b	$01
00090AFE E1FA                       	smpsAlterNote       $FA
00090B00 01                         	dc.b	$01
00090B01 E1FD                       	smpsAlterNote       $FD
00090B03 ECF5                       	smpsPSGAlterVol     $F5
00090B05 9106                       	dc.b	nE1, $06
00090B07 EC04                       	smpsPSGAlterVol     $04
00090B09 E701                       	dc.b	smpsNoAttack, $01
00090B0B EC07                       	smpsPSGAlterVol     $07
00090B0D 8003                       	dc.b	nRst, $03
00090B0F ECF5                       	smpsPSGAlterVol     $F5
00090B11 9107 9106                  	dc.b	nE1, $07, nE1, $06
00090B15 EC04                       	smpsPSGAlterVol     $04
00090B17 E701                       	dc.b	smpsNoAttack, $01
00090B19 ECFC                       	smpsPSGAlterVol     $FC
00090B1B 9103 9103                  	dc.b	nE1, $03, nE1, $03
00090B1F EC04                       	smpsPSGAlterVol     $04
00090B21 E701                       	dc.b	smpsNoAttack, $01
00090B23 ECFC                       	smpsPSGAlterVol     $FC
00090B25 9106                       	dc.b	nE1, $06
00090B27 EC04                       	smpsPSGAlterVol     $04
00090B29 E701                       	dc.b	smpsNoAttack, $01
00090B2B EC07                       	smpsPSGAlterVol     $07
00090B2D 8006                       	dc.b	nRst, $06
00090B2F E100                       	smpsAlterNote       $00
00090B31 01                         	dc.b	$01
00090B32 E104                       	smpsAlterNote       $04
00090B34 01                         	dc.b	$01
00090B35 E100                       	smpsAlterNote       $00
00090B37 01                         	dc.b	$01
00090B38 E1FA                       	smpsAlterNote       $FA
00090B3A 01                         	dc.b	$01
00090B3B E1F9                       	smpsAlterNote       $F9
00090B3D 01                         	dc.b	$01
00090B3E E1FD                       	smpsAlterNote       $FD
00090B40 01                         	dc.b	$01
00090B41 E103                       	smpsAlterNote       $03
00090B43 01                         	dc.b	$01
00090B44 E104                       	smpsAlterNote       $04
00090B46 01                         	dc.b	$01
00090B47 E100                       	smpsAlterNote       $00
00090B49 01                         	dc.b	$01
00090B4A E1FA                       	smpsAlterNote       $FA
00090B4C 0101                       	dc.b	$01, $01
00090B4E E1FD                       	smpsAlterNote       $FD
00090B50 ECF5                       	smpsPSGAlterVol     $F5
00090B52 9206                       	dc.b	nF1, $06
00090B54 EC04                       	smpsPSGAlterVol     $04
00090B56 E701                       	dc.b	smpsNoAttack, $01
00090B58 EC07                       	smpsPSGAlterVol     $07
00090B5A 8003                       	dc.b	nRst, $03
00090B5C ECF5                       	smpsPSGAlterVol     $F5
00090B5E 9206                       	dc.b	nF1, $06
00090B60 EC04                       	smpsPSGAlterVol     $04
00090B62 E701                       	dc.b	smpsNoAttack, $01
00090B64 EC07                       	smpsPSGAlterVol     $07
00090B66 8006                       	dc.b	nRst, $06
00090B68 E100                       	smpsAlterNote       $00
00090B6A 01                         	dc.b	$01
00090B6B E104                       	smpsAlterNote       $04
00090B6D 01                         	dc.b	$01
00090B6E E103                       	smpsAlterNote       $03
00090B70 01                         	dc.b	$01
00090B71 E1FD                       	smpsAlterNote       $FD
00090B73 01                         	dc.b	$01
00090B74 ECF5                       	smpsPSGAlterVol     $F5
00090B76 9407                       	dc.b	nG1, $07
00090B78 EC0B                       	smpsPSGAlterVol     $0B
00090B7A 8004                       	dc.b	nRst, $04
00090B7C ECF5                       	smpsPSGAlterVol     $F5
00090B7E 9406                       	dc.b	nG1, $06
00090B80 EC0B                       	smpsPSGAlterVol     $0B
00090B82 8007                       	dc.b	nRst, $07
00090B84 E103                       	smpsAlterNote       $03
00090B86 0101                       	dc.b	$01, $01
00090B88 E1FD                       	smpsAlterNote       $FD
00090B8A 01                         	dc.b	$01
00090B8B E1F9                       	smpsAlterNote       $F9
00090B8D 01                         	dc.b	$01
00090B8E E1FD                       	smpsAlterNote       $FD
00090B90 ECF5                       	smpsPSGAlterVol     $F5
00090B92 9206                       	dc.b	nF1, $06
00090B94 EC04                       	smpsPSGAlterVol     $04
00090B96 E701                       	dc.b	smpsNoAttack, $01
00090B98 EC07                       	smpsPSGAlterVol     $07
00090B9A 8003                       	dc.b	nRst, $03
00090B9C ECF5                       	smpsPSGAlterVol     $F5
00090B9E 9206                       	dc.b	nF1, $06
00090BA0 EC04                       	smpsPSGAlterVol     $04
00090BA2 E701                       	dc.b	smpsNoAttack, $01
00090BA4 EC07                       	smpsPSGAlterVol     $07
00090BA6 8006                       	dc.b	nRst, $06
00090BA8 E100                       	smpsAlterNote       $00
00090BAA 01                         	dc.b	$01
00090BAB E104                       	smpsAlterNote       $04
00090BAD 01                         	dc.b	$01
00090BAE E100                       	smpsAlterNote       $00
00090BB0 01                         	dc.b	$01
00090BB1 E1FA                       	smpsAlterNote       $FA
00090BB3 01                         	dc.b	$01
00090BB4 E1FD                       	smpsAlterNote       $FD
00090BB6 ECF5                       	smpsPSGAlterVol     $F5
00090BB8 9206                       	dc.b	nF1, $06
00090BBA EC04                       	smpsPSGAlterVol     $04
00090BBC E701                       	dc.b	smpsNoAttack, $01
00090BBE EC07                       	smpsPSGAlterVol     $07
00090BC0 8003                       	dc.b	nRst, $03
00090BC2 ECF5                       	smpsPSGAlterVol     $F5
00090BC4 9107                       	dc.b	nE1, $07
00090BC6 EC0B                       	smpsPSGAlterVol     $0B
00090BC8 8006                       	dc.b	nRst, $06
00090BCA E100                       	smpsAlterNote       $00
00090BCC 01                         	dc.b	$01
00090BCD E103                       	smpsAlterNote       $03
00090BCF 0101                       	dc.b	$01, $01
00090BD1 E1FD                       	smpsAlterNote       $FD
00090BD3 01                         	dc.b	$01
00090BD4 ECF5                       	smpsPSGAlterVol     $F5
00090BD6 9207                       	dc.b	nF1, $07
00090BD8 EC0B                       	smpsPSGAlterVol     $0B
00090BDA 8004                       	dc.b	nRst, $04
00090BDC ECF5                       	smpsPSGAlterVol     $F5
00090BDE 9206                       	dc.b	nF1, $06
00090BE0 EC04                       	smpsPSGAlterVol     $04
00090BE2 E701                       	dc.b	smpsNoAttack, $01
00090BE4 EC07                       	smpsPSGAlterVol     $07
00090BE6 8006                       	dc.b	nRst, $06
00090BE8 E103                       	smpsAlterNote       $03
00090BEA 01                         	dc.b	$01
00090BEB E104                       	smpsAlterNote       $04
00090BED 01                         	dc.b	$01
00090BEE E100                       	smpsAlterNote       $00
00090BF0 01                         	dc.b	$01
00090BF1 E1FB                       	smpsAlterNote       $FB
00090BF3 01                         	dc.b	$01
00090BF4 E1FD                       	smpsAlterNote       $FD
00090BF6 ECF5                       	smpsPSGAlterVol     $F5
00090BF8 9406                       	dc.b	nG1, $06
00090BFA EC04                       	smpsPSGAlterVol     $04
00090BFC E701                       	dc.b	smpsNoAttack, $01
00090BFE EC07                       	smpsPSGAlterVol     $07
00090C00 8003                       	dc.b	nRst, $03
00090C02 ECF5                       	smpsPSGAlterVol     $F5
00090C04 9406                       	dc.b	nG1, $06
00090C06 EC04                       	smpsPSGAlterVol     $04
00090C08 E701                       	dc.b	smpsNoAttack, $01
00090C0A EC07                       	smpsPSGAlterVol     $07
00090C0C 8006                       	dc.b	nRst, $06
00090C0E E100                       	smpsAlterNote       $00
00090C10 01                         	dc.b	$01
00090C11 E104                       	smpsAlterNote       $04
00090C13 01                         	dc.b	$01
00090C14 E100                       	smpsAlterNote       $00
00090C16 01                         	dc.b	$01
00090C17 E1FD                       	smpsAlterNote       $FD
00090C19 01                         	dc.b	$01
00090C1A ECF5                       	smpsPSGAlterVol     $F5
00090C1C 9206                       	dc.b	nF1, $06
00090C1E EC04                       	smpsPSGAlterVol     $04
00090C20 E701                       	dc.b	smpsNoAttack, $01
00090C22 EC07                       	smpsPSGAlterVol     $07
00090C24 8003                       	dc.b	nRst, $03
00090C26 ECF5                       	smpsPSGAlterVol     $F5
00090C28 9207                       	dc.b	nF1, $07
00090C2A EC0B                       	smpsPSGAlterVol     $0B
00090C2C 8007                       	dc.b	nRst, $07
00090C2E E103                       	smpsAlterNote       $03
00090C30 0101                       	dc.b	$01, $01
00090C32 E1FD                       	smpsAlterNote       $FD
00090C34 01                         	dc.b	$01
00090C35 E1FA                       	smpsAlterNote       $FA
00090C37 01                         	dc.b	$01
00090C38 E1FD                       	smpsAlterNote       $FD
00090C3A ECF5                       	smpsPSGAlterVol     $F5
00090C3C 9206                       	dc.b	nF1, $06
00090C3E EC0B                       	smpsPSGAlterVol     $0B
00090C40 8004                       	dc.b	nRst, $04
00090C42 ECF5                       	smpsPSGAlterVol     $F5
00090C44 9206                       	dc.b	nF1, $06
00090C46 EC04                       	smpsPSGAlterVol     $04
00090C48 E701                       	dc.b	smpsNoAttack, $01
00090C4A EC07                       	smpsPSGAlterVol     $07
00090C4C 8006                       	dc.b	nRst, $06
00090C4E E100                       	smpsAlterNote       $00
00090C50 01                         	dc.b	$01
00090C51 E104                       	smpsAlterNote       $04
00090C53 01                         	dc.b	$01
00090C54 E100                       	smpsAlterNote       $00
00090C56 01                         	dc.b	$01
00090C57 E1FA                       	smpsAlterNote       $FA
00090C59 01                         	dc.b	$01
00090C5A E1FD                       	smpsAlterNote       $FD
00090C5C ECF5                       	smpsPSGAlterVol     $F5
00090C5E 9206                       	dc.b	nF1, $06
00090C60 EC04                       	smpsPSGAlterVol     $04
00090C62 E704                       	dc.b	smpsNoAttack, $04
00090C64 ECFC                       	smpsPSGAlterVol     $FC
00090C66 9207                       	dc.b	nF1, $07
00090C68 EC0B                       	smpsPSGAlterVol     $0B
00090C6A 8006                       	dc.b	nRst, $06
00090C6C E100                       	smpsAlterNote       $00
00090C6E 01                         	dc.b	$01
00090C6F E104                       	smpsAlterNote       $04
00090C71 01                         	dc.b	$01
00090C72 E103                       	smpsAlterNote       $03
00090C74 01                         	dc.b	$01
00090C75 E1FD                       	smpsAlterNote       $FD
00090C77 01                         	dc.b	$01
00090C78 ECF5                       	smpsPSGAlterVol     $F5
00090C7A 9207                       	dc.b	nF1, $07
00090C7C EC0B                       	smpsPSGAlterVol     $0B
00090C7E 8004                       	dc.b	nRst, $04
00090C80 ECF5                       	smpsPSGAlterVol     $F5
00090C82 9206                       	dc.b	nF1, $06
00090C84 EC0B                       	smpsPSGAlterVol     $0B
00090C86 8007                       	dc.b	nRst, $07
00090C88 E103                       	smpsAlterNote       $03
00090C8A 0101                       	dc.b	$01, $01
00090C8C E100                       	smpsAlterNote       $00
00090C8E 01                         	dc.b	$01
00090C8F E1FA                       	smpsAlterNote       $FA
00090C91 01                         	dc.b	$01
00090C92 E1FD                       	smpsAlterNote       $FD
00090C94 ECF5                       	smpsPSGAlterVol     $F5
00090C96 9206                       	dc.b	nF1, $06
00090C98 EC04                       	smpsPSGAlterVol     $04
00090C9A E704                       	dc.b	smpsNoAttack, $04
00090C9C ECFC                       	smpsPSGAlterVol     $FC
00090C9E 9206                       	dc.b	nF1, $06
00090CA0 EC04                       	smpsPSGAlterVol     $04
00090CA2 E701                       	dc.b	smpsNoAttack, $01
00090CA4 EC07                       	smpsPSGAlterVol     $07
00090CA6 8006                       	dc.b	nRst, $06
00090CA8 E100                       	smpsAlterNote       $00
00090CAA 01                         	dc.b	$01
00090CAB E104                       	smpsAlterNote       $04
00090CAD 01                         	dc.b	$01
00090CAE E100                       	smpsAlterNote       $00
00090CB0 01                         	dc.b	$01
00090CB1 E1FD                       	smpsAlterNote       $FD
00090CB3 01                         	dc.b	$01
00090CB4 ECF5                       	smpsPSGAlterVol     $F5
00090CB6 9206                       	dc.b	nF1, $06
00090CB8 EC04                       	smpsPSGAlterVol     $04
00090CBA E701                       	dc.b	smpsNoAttack, $01
00090CBC EC07                       	smpsPSGAlterVol     $07
00090CBE 8003                       	dc.b	nRst, $03
00090CC0 ECF5                       	smpsPSGAlterVol     $F5
00090CC2 9207                       	dc.b	nF1, $07
00090CC4 EC0B                       	smpsPSGAlterVol     $0B
00090CC6 8007                       	dc.b	nRst, $07
00090CC8 E103                       	smpsAlterNote       $03
00090CCA 0101                       	dc.b	$01, $01
00090CCC E1FD                       	smpsAlterNote       $FD
00090CCE 01                         	dc.b	$01
00090CCF E1FA                       	smpsAlterNote       $FA
00090CD1 01                         	dc.b	$01
00090CD2 E1FD                       	smpsAlterNote       $FD
00090CD4 ECF5                       	smpsPSGAlterVol     $F5
00090CD6 9106                       	dc.b	nE1, $06
00090CD8 EC0B                       	smpsPSGAlterVol     $0B
00090CDA 8004                       	dc.b	nRst, $04
00090CDC ECF5                       	smpsPSGAlterVol     $F5
00090CDE 9106                       	dc.b	nE1, $06
00090CE0 EC04                       	smpsPSGAlterVol     $04
00090CE2 E701                       	dc.b	smpsNoAttack, $01
00090CE4 EC07                       	smpsPSGAlterVol     $07
00090CE6 8006                       	dc.b	nRst, $06
00090CE8 E100                       	smpsAlterNote       $00
00090CEA 01                         	dc.b	$01
00090CEB E104                       	smpsAlterNote       $04
00090CED 01                         	dc.b	$01
00090CEE E100                       	smpsAlterNote       $00
00090CF0 01                         	dc.b	$01
00090CF1 E1FA                       	smpsAlterNote       $FA
00090CF3 01                         	dc.b	$01
00090CF4 E1FD                       	smpsAlterNote       $FD
00090CF6 ECF5                       	smpsPSGAlterVol     $F5
00090CF8 9106                       	dc.b	nE1, $06
00090CFA EC04                       	smpsPSGAlterVol     $04
00090CFC E701                       	dc.b	smpsNoAttack, $01
00090CFE EC07                       	smpsPSGAlterVol     $07
00090D00 8003                       	dc.b	nRst, $03
00090D02 ECF5                       	smpsPSGAlterVol     $F5
00090D04 9106                       	dc.b	nE1, $06
00090D06 EC04                       	smpsPSGAlterVol     $04
00090D08 E701                       	dc.b	smpsNoAttack, $01
00090D0A EC07                       	smpsPSGAlterVol     $07
00090D0C 8006                       	dc.b	nRst, $06
00090D0E E100                       	smpsAlterNote       $00
00090D10 01                         	dc.b	$01
00090D11 E104                       	smpsAlterNote       $04
00090D13 01                         	dc.b	$01
00090D14 E103                       	smpsAlterNote       $03
00090D16 01                         	dc.b	$01
00090D17 E1FD                       	smpsAlterNote       $FD
00090D19 01                         	dc.b	$01
00090D1A ECF5                       	smpsPSGAlterVol     $F5
00090D1C 9107                       	dc.b	nE1, $07
00090D1E EC0B                       	smpsPSGAlterVol     $0B
00090D20 8004                       	dc.b	nRst, $04
00090D22 ECF5                       	smpsPSGAlterVol     $F5
00090D24 9106                       	dc.b	nE1, $06
00090D26 EC0B                       	smpsPSGAlterVol     $0B
00090D28 8007                       	dc.b	nRst, $07
00090D2A E103                       	smpsAlterNote       $03
00090D2C 0101                       	dc.b	$01, $01
00090D2E E100                       	smpsAlterNote       $00
00090D30 01                         	dc.b	$01
00090D31 E1FA                       	smpsAlterNote       $FA
00090D33 01                         	dc.b	$01
00090D34 E1FD                       	smpsAlterNote       $FD
00090D36 ECF5                       	smpsPSGAlterVol     $F5
00090D38 9106                       	dc.b	nE1, $06
00090D3A EC04                       	smpsPSGAlterVol     $04
00090D3C E701                       	dc.b	smpsNoAttack, $01
00090D3E EC07                       	smpsPSGAlterVol     $07
00090D40 8003                       	dc.b	nRst, $03
00090D42 ECF5                       	smpsPSGAlterVol     $F5
00090D44 9106                       	dc.b	nE1, $06
00090D46 EC04                       	smpsPSGAlterVol     $04
00090D48 E701                       	dc.b	smpsNoAttack, $01
00090D4A EC07                       	smpsPSGAlterVol     $07
00090D4C 8003                       	dc.b	nRst, $03
00090D4E ECF5                       	smpsPSGAlterVol     $F5
00090D50 9207                       	dc.b	nF1, $07
00090D52 EC0B                       	smpsPSGAlterVol     $0B
00090D54 8006                       	dc.b	nRst, $06
00090D56 E100                       	smpsAlterNote       $00
00090D58 01                         	dc.b	$01
00090D59 E104                       	smpsAlterNote       $04
00090D5B 01                         	dc.b	$01
00090D5C E103                       	smpsAlterNote       $03
00090D5E 01                         	dc.b	$01
00090D5F E1FD                       	smpsAlterNote       $FD
00090D61 01                         	dc.b	$01
00090D62 E1F9                       	smpsAlterNote       $F9
00090D64 01                         	dc.b	$01
00090D65 E1FD                       	smpsAlterNote       $FD
00090D67 01                         	dc.b	$01
00090D68 E100                       	smpsAlterNote       $00
00090D6A 01                         	dc.b	$01
00090D6B E104                       	smpsAlterNote       $04
00090D6D 01                         	dc.b	$01
00090D6E E1FD                       	smpsAlterNote       $FD
00090D70 ECF5                       	smpsPSGAlterVol     $F5
00090D72 9203 9203                  	dc.b	nF1, $03, nF1, $03
00090D76 EC04                       	smpsPSGAlterVol     $04
00090D78 E701                       	dc.b	smpsNoAttack, $01
00090D7A EC07                       	smpsPSGAlterVol     $07
00090D7C 8009                       	dc.b	nRst, $09
00090D7E E100                       	smpsAlterNote       $00
00090D80 01                         	dc.b	$01
00090D81 E104                       	smpsAlterNote       $04
00090D83 01                         	dc.b	$01
00090D84 E103                       	smpsAlterNote       $03
00090D86 01                         	dc.b	$01
00090D87 E1FD                       	smpsAlterNote       $FD
00090D89 01                         	dc.b	$01
00090D8A E1F9                       	smpsAlterNote       $F9
00090D8C 01                         	dc.b	$01
00090D8D E1FD                       	smpsAlterNote       $FD
00090D8F 01                         	dc.b	$01
00090D90 E100                       	smpsAlterNote       $00
00090D92 01                         	dc.b	$01
00090D93 E104                       	smpsAlterNote       $04
00090D95 01                         	dc.b	$01
00090D96 E100                       	smpsAlterNote       $00
00090D98 01                         	dc.b	$01
00090D99 E1FA                       	smpsAlterNote       $FA
00090D9B 01                         	dc.b	$01
00090D9C E1F9                       	smpsAlterNote       $F9
00090D9E 01                         	dc.b	$01
00090D9F E1FD                       	smpsAlterNote       $FD
00090DA1 01                         	dc.b	$01
00090DA2 E103                       	smpsAlterNote       $03
00090DA4 0101                       	dc.b	$01, $01
00090DA6 E100                       	smpsAlterNote       $00
00090DA8 01                         	dc.b	$01
00090DA9 E1FD                       	smpsAlterNote       $FD
00090DAB ECF5                       	smpsPSGAlterVol     $F5
00090DAD 9202                       	dc.b	nF1, $02
00090DAF EC04                       	smpsPSGAlterVol     $04
00090DB1 E701                       	dc.b	smpsNoAttack, $01
00090DB3 ECFC                       	smpsPSGAlterVol     $FC
00090DB5 9106                       	dc.b	nE1, $06
00090DB7 EC04                       	smpsPSGAlterVol     $04
00090DB9 E701                       	dc.b	smpsNoAttack, $01
00090DBB EC07                       	smpsPSGAlterVol     $07
00090DBD 8006                       	dc.b	nRst, $06
00090DBF E100                       	smpsAlterNote       $00
00090DC1 01                         	dc.b	$01
00090DC2 E104                       	smpsAlterNote       $04
00090DC4 01                         	dc.b	$01
00090DC5 E100                       	smpsAlterNote       $00
00090DC7 01                         	dc.b	$01
00090DC8 E1FD                       	smpsAlterNote       $FD
00090DCA 01                         	dc.b	$01
00090DCB E1F9                       	smpsAlterNote       $F9
00090DCD 01                         	dc.b	$01
00090DCE E1FD                       	smpsAlterNote       $FD
00090DD0 01                         	dc.b	$01
00090DD1 E103                       	smpsAlterNote       $03
00090DD3 01                         	dc.b	$01
00090DD4 E104                       	smpsAlterNote       $04
00090DD6 01                         	dc.b	$01
00090DD7 E1FD                       	smpsAlterNote       $FD
00090DD9 ECF5                       	smpsPSGAlterVol     $F5
00090DDB 9102                       	dc.b	nE1, $02
00090DDD EC04                       	smpsPSGAlterVol     $04
00090DDF E701                       	dc.b	smpsNoAttack, $01
00090DE1 ECFC                       	smpsPSGAlterVol     $FC
00090DE3 920D                       	dc.b	nF1, $0D
00090DE5 E100                       	smpsAlterNote       $00
00090DE7 E701                       	dc.b	smpsNoAttack, $01
00090DE9 E104                       	smpsAlterNote       $04
00090DEB E701                       	dc.b	smpsNoAttack, $01
00090DED E100                       	smpsAlterNote       $00
00090DEF E701                       	dc.b	smpsNoAttack, $01
00090DF1 E1FD                       	smpsAlterNote       $FD
00090DF3 E701                       	dc.b	smpsNoAttack, $01
00090DF5 E1F9                       	smpsAlterNote       $F9
00090DF7 E701                       	dc.b	smpsNoAttack, $01
00090DF9 E1FD                       	smpsAlterNote       $FD
00090DFB E701                       	dc.b	smpsNoAttack, $01
00090DFD E103                       	smpsAlterNote       $03
00090DFF E701                       	dc.b	smpsNoAttack, $01
00090E01 E104                       	smpsAlterNote       $04
00090E03 E701                       	dc.b	smpsNoAttack, $01
00090E05 E100                       	smpsAlterNote       $00
00090E07 E701                       	dc.b	smpsNoAttack, $01
00090E09 E1FA                       	smpsAlterNote       $FA
00090E0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090E0F E1FD                       	smpsAlterNote       $FD
00090E11 E701                       	dc.b	smpsNoAttack, $01
00090E13 E103                       	smpsAlterNote       $03
00090E15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090E19 E1FD                       	smpsAlterNote       $FD
00090E1B E701                       	dc.b	smpsNoAttack, $01
00090E1D E1F9                       	smpsAlterNote       $F9
00090E1F E701                       	dc.b	smpsNoAttack, $01
00090E21 E1FA                       	smpsAlterNote       $FA
00090E23 E701                       	dc.b	smpsNoAttack, $01
00090E25 E100                       	smpsAlterNote       $00
00090E27 EC04                       	smpsPSGAlterVol     $04
00090E29 E701                       	dc.b	smpsNoAttack, $01
00090E2B EC07                       	smpsPSGAlterVol     $07
00090E2D E104                       	smpsAlterNote       $04
00090E2F 8001                       	dc.b	nRst, $01
00090E31 E100                       	smpsAlterNote       $00
00090E33 01                         	dc.b	$01
00090E34 E1FD                       	smpsAlterNote       $FD
00090E36 01                         	dc.b	$01
00090E37 E1F9                       	smpsAlterNote       $F9
00090E39 01                         	dc.b	$01
00090E3A E1FD                       	smpsAlterNote       $FD
00090E3C 01                         	dc.b	$01
00090E3D E103                       	smpsAlterNote       $03
00090E3F 01                         	dc.b	$01
00090E40 E104                       	smpsAlterNote       $04
00090E42 01                         	dc.b	$01
00090E43 E1FD                       	smpsAlterNote       $FD
00090E45 ECF5                       	smpsPSGAlterVol     $F5
00090E47 9106                       	dc.b	nE1, $06
00090E49 EC04                       	smpsPSGAlterVol     $04
00090E4B E701                       	dc.b	smpsNoAttack, $01
00090E4D EC07                       	smpsPSGAlterVol     $07
00090E4F 8003                       	dc.b	nRst, $03
00090E51 ECF5                       	smpsPSGAlterVol     $F5
00090E53 9106                       	dc.b	nE1, $06
00090E55 EC04                       	smpsPSGAlterVol     $04
00090E57 E701                       	dc.b	smpsNoAttack, $01
00090E59 EC07                       	smpsPSGAlterVol     $07
00090E5B 8006                       	dc.b	nRst, $06
00090E5D E100                       	smpsAlterNote       $00
00090E5F 01                         	dc.b	$01
00090E60 E104                       	smpsAlterNote       $04
00090E62 01                         	dc.b	$01
00090E63 E100                       	smpsAlterNote       $00
00090E65 01                         	dc.b	$01
00090E66 E1FA                       	smpsAlterNote       $FA
00090E68 01                         	dc.b	$01
00090E69 E1FD                       	smpsAlterNote       $FD
00090E6B ECF5                       	smpsPSGAlterVol     $F5
00090E6D 9206                       	dc.b	nF1, $06
00090E6F EC04                       	smpsPSGAlterVol     $04
00090E71 E701                       	dc.b	smpsNoAttack, $01
00090E73 EC07                       	smpsPSGAlterVol     $07
00090E75 8003                       	dc.b	nRst, $03
00090E77 ECF5                       	smpsPSGAlterVol     $F5
00090E79 9207                       	dc.b	nF1, $07
00090E7B EC0B                       	smpsPSGAlterVol     $0B
00090E7D 8006                       	dc.b	nRst, $06
00090E7F E100                       	smpsAlterNote       $00
00090E81 01                         	dc.b	$01
00090E82 E103                       	smpsAlterNote       $03
00090E84 0101                       	dc.b	$01, $01
00090E86 E1FD                       	smpsAlterNote       $FD
00090E88 01                         	dc.b	$01
00090E89 ECF5                       	smpsPSGAlterVol     $F5
00090E8B 9107                       	dc.b	nE1, $07
00090E8D EC0B                       	smpsPSGAlterVol     $0B
00090E8F 8004                       	dc.b	nRst, $04
00090E91 ECF5                       	smpsPSGAlterVol     $F5
00090E93 9106                       	dc.b	nE1, $06
00090E95 EC04                       	smpsPSGAlterVol     $04
00090E97 E701                       	dc.b	smpsNoAttack, $01
00090E99 EC07                       	smpsPSGAlterVol     $07
00090E9B 8006                       	dc.b	nRst, $06
00090E9D E103                       	smpsAlterNote       $03
00090E9F 01                         	dc.b	$01
00090EA0 E104                       	smpsAlterNote       $04
00090EA2 01                         	dc.b	$01
00090EA3 E100                       	smpsAlterNote       $00
00090EA5 01                         	dc.b	$01
00090EA6 E1FA                       	smpsAlterNote       $FA
00090EA8 01                         	dc.b	$01
00090EA9 E1FD                       	smpsAlterNote       $FD
00090EAB ECF5                       	smpsPSGAlterVol     $F5
00090EAD 9106                       	dc.b	nE1, $06
00090EAF EC04                       	smpsPSGAlterVol     $04
00090EB1 E701                       	dc.b	smpsNoAttack, $01
00090EB3 EC07                       	smpsPSGAlterVol     $07
00090EB5 8003                       	dc.b	nRst, $03
00090EB7 ECF5                       	smpsPSGAlterVol     $F5
00090EB9 9106                       	dc.b	nE1, $06
00090EBB EC04                       	smpsPSGAlterVol     $04
00090EBD E701                       	dc.b	smpsNoAttack, $01
00090EBF EC07                       	smpsPSGAlterVol     $07
00090EC1 8003                       	dc.b	nRst, $03
00090EC3 ECF5                       	smpsPSGAlterVol     $F5
00090EC5 9207                       	dc.b	nF1, $07
00090EC7 EC0B                       	smpsPSGAlterVol     $0B
00090EC9 8006                       	dc.b	nRst, $06
00090ECB E100                       	smpsAlterNote       $00
00090ECD 01                         	dc.b	$01
00090ECE E103                       	smpsAlterNote       $03
00090ED0 0101                       	dc.b	$01, $01
00090ED2 E1FD                       	smpsAlterNote       $FD
00090ED4 01                         	dc.b	$01
00090ED5 E1F9                       	smpsAlterNote       $F9
00090ED7 01                         	dc.b	$01
00090ED8 E1FA                       	smpsAlterNote       $FA
00090EDA 01                         	dc.b	$01
00090EDB E100                       	smpsAlterNote       $00
00090EDD 01                         	dc.b	$01
00090EDE E104                       	smpsAlterNote       $04
00090EE0 01                         	dc.b	$01
00090EE1 E1FD                       	smpsAlterNote       $FD
00090EE3 ECF5                       	smpsPSGAlterVol     $F5
00090EE5 9203 9203                  	dc.b	nF1, $03, nF1, $03
00090EE9 EC04                       	smpsPSGAlterVol     $04
00090EEB E701                       	dc.b	smpsNoAttack, $01
00090EED EC07                       	smpsPSGAlterVol     $07
00090EEF 8009                       	dc.b	nRst, $09
00090EF1 E100                       	smpsAlterNote       $00
00090EF3 01                         	dc.b	$01
00090EF4 E103                       	smpsAlterNote       $03
00090EF6 0101                       	dc.b	$01, $01
00090EF8 E1FD                       	smpsAlterNote       $FD
00090EFA 01                         	dc.b	$01
00090EFB E1F9                       	smpsAlterNote       $F9
00090EFD 01                         	dc.b	$01
00090EFE E1FA                       	smpsAlterNote       $FA
00090F00 01                         	dc.b	$01
00090F01 E100                       	smpsAlterNote       $00
00090F03 01                         	dc.b	$01
00090F04 E104                       	smpsAlterNote       $04
00090F06 01                         	dc.b	$01
00090F07 E100                       	smpsAlterNote       $00
00090F09 01                         	dc.b	$01
00090F0A E1FD                       	smpsAlterNote       $FD
00090F0C 01                         	dc.b	$01
00090F0D E1F9                       	smpsAlterNote       $F9
00090F0F 01                         	dc.b	$01
00090F10 E1FD                       	smpsAlterNote       $FD
00090F12 01                         	dc.b	$01
00090F13 E103                       	smpsAlterNote       $03
00090F15 01                         	dc.b	$01
00090F16 E104                       	smpsAlterNote       $04
00090F18 01                         	dc.b	$01
00090F19 E100                       	smpsAlterNote       $00
00090F1B 01                         	dc.b	$01
00090F1C E1FD                       	smpsAlterNote       $FD
00090F1E ECF5                       	smpsPSGAlterVol     $F5
00090F20 9203 9106                  	dc.b	nF1, $03, nE1, $06
00090F24 EC04                       	smpsPSGAlterVol     $04
00090F26 E701                       	dc.b	smpsNoAttack, $01
00090F28 EC07                       	smpsPSGAlterVol     $07
00090F2A 8006                       	dc.b	nRst, $06
00090F2C E100                       	smpsAlterNote       $00
00090F2E 01                         	dc.b	$01
00090F2F E104                       	smpsAlterNote       $04
00090F31 01                         	dc.b	$01
00090F32 E103                       	smpsAlterNote       $03
00090F34 01                         	dc.b	$01
00090F35 E1FD                       	smpsAlterNote       $FD
00090F37 01                         	dc.b	$01
00090F38 E1F9                       	smpsAlterNote       $F9
00090F3A 01                         	dc.b	$01
00090F3B E1FD                       	smpsAlterNote       $FD
00090F3D 01                         	dc.b	$01
00090F3E E100                       	smpsAlterNote       $00
00090F40 01                         	dc.b	$01
00090F41 E104                       	smpsAlterNote       $04
00090F43 01                         	dc.b	$01
00090F44 E1FD                       	smpsAlterNote       $FD
00090F46 ECF5                       	smpsPSGAlterVol     $F5
00090F48 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00090F4C E100                       	smpsAlterNote       $00
00090F4E E701                       	dc.b	smpsNoAttack, $01
00090F50 E104                       	smpsAlterNote       $04
00090F52 E701                       	dc.b	smpsNoAttack, $01
00090F54 E100                       	smpsAlterNote       $00
00090F56 E701                       	dc.b	smpsNoAttack, $01
00090F58 E1FD                       	smpsAlterNote       $FD
00090F5A E701                       	dc.b	smpsNoAttack, $01
00090F5C E1F9                       	smpsAlterNote       $F9
00090F5E E701                       	dc.b	smpsNoAttack, $01
00090F60 E1FD                       	smpsAlterNote       $FD
00090F62 E701                       	dc.b	smpsNoAttack, $01
00090F64 E103                       	smpsAlterNote       $03
00090F66 E701                       	dc.b	smpsNoAttack, $01
00090F68 E104                       	smpsAlterNote       $04
00090F6A E701                       	dc.b	smpsNoAttack, $01
00090F6C E100                       	smpsAlterNote       $00
00090F6E E701                       	dc.b	smpsNoAttack, $01
00090F70 E1FA                       	smpsAlterNote       $FA
00090F72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090F76 E1FD                       	smpsAlterNote       $FD
00090F78 E701                       	dc.b	smpsNoAttack, $01
00090F7A E103                       	smpsAlterNote       $03
00090F7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090F80 E100                       	smpsAlterNote       $00
00090F82 E701                       	dc.b	smpsNoAttack, $01
00090F84 E1FA                       	smpsAlterNote       $FA
00090F86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090F8A E100                       	smpsAlterNote       $00
00090F8C EC04                       	smpsPSGAlterVol     $04
00090F8E E701                       	dc.b	smpsNoAttack, $01
00090F90 EC07                       	smpsPSGAlterVol     $07
00090F92 E104                       	smpsAlterNote       $04
00090F94 8001                       	dc.b	nRst, $01
00090F96 E103                       	smpsAlterNote       $03
00090F98 01                         	dc.b	$01
00090F99 E1FD                       	smpsAlterNote       $FD
00090F9B 01                         	dc.b	$01
00090F9C E1F9                       	smpsAlterNote       $F9
00090F9E 01                         	dc.b	$01
00090F9F E1FD                       	smpsAlterNote       $FD
00090FA1 01                         	dc.b	$01
00090FA2 E100                       	smpsAlterNote       $00
00090FA4 01                         	dc.b	$01
00090FA5 E104                       	smpsAlterNote       $04
00090FA7 01                         	dc.b	$01
00090FA8 E1FD                       	smpsAlterNote       $FD
00090FAA ECF5                       	smpsPSGAlterVol     $F5
00090FAC 9106                       	dc.b	nE1, $06
00090FAE EC04                       	smpsPSGAlterVol     $04
00090FB0 E701                       	dc.b	smpsNoAttack, $01
00090FB2 EC07                       	smpsPSGAlterVol     $07
00090FB4 8003                       	dc.b	nRst, $03
00090FB6 ECF5                       	smpsPSGAlterVol     $F5
00090FB8 9106                       	dc.b	nE1, $06
00090FBA EC04                       	smpsPSGAlterVol     $04
00090FBC E701                       	dc.b	smpsNoAttack, $01
00090FBE EC07                       	smpsPSGAlterVol     $07
00090FC0 8006                       	dc.b	nRst, $06
00090FC2 E100                       	smpsAlterNote       $00
00090FC4 01                         	dc.b	$01
00090FC5 E104                       	smpsAlterNote       $04
00090FC7 01                         	dc.b	$01
00090FC8 E100                       	smpsAlterNote       $00
00090FCA 01                         	dc.b	$01
00090FCB E1FD                       	smpsAlterNote       $FD
00090FCD 01                         	dc.b	$01
00090FCE ECF5                       	smpsPSGAlterVol     $F5
00090FD0 9206                       	dc.b	nF1, $06
00090FD2 EC04                       	smpsPSGAlterVol     $04
00090FD4 E701                       	dc.b	smpsNoAttack, $01
00090FD6 EC07                       	smpsPSGAlterVol     $07
00090FD8 8003                       	dc.b	nRst, $03
00090FDA ECF5                       	smpsPSGAlterVol     $F5
00090FDC 9207                       	dc.b	nF1, $07
00090FDE EC0B                       	smpsPSGAlterVol     $0B
00090FE0 8007                       	dc.b	nRst, $07
00090FE2 E103                       	smpsAlterNote       $03
00090FE4 0101                       	dc.b	$01, $01
00090FE6 E1FD                       	smpsAlterNote       $FD
00090FE8 01                         	dc.b	$01
00090FE9 E1FA                       	smpsAlterNote       $FA
00090FEB 01                         	dc.b	$01
00090FEC E1FD                       	smpsAlterNote       $FD
00090FEE ECF5                       	smpsPSGAlterVol     $F5
00090FF0 9106                       	dc.b	nE1, $06
00090FF2 EC0B                       	smpsPSGAlterVol     $0B
00090FF4 8004                       	dc.b	nRst, $04
00090FF6 ECF5                       	smpsPSGAlterVol     $F5
00090FF8 9106                       	dc.b	nE1, $06
00090FFA EC04                       	smpsPSGAlterVol     $04
00090FFC E701                       	dc.b	smpsNoAttack, $01
00090FFE EC07                       	smpsPSGAlterVol     $07
00091000 8006                       	dc.b	nRst, $06
00091002 E100                       	smpsAlterNote       $00
00091004 01                         	dc.b	$01
00091005 E104                       	smpsAlterNote       $04
00091007 01                         	dc.b	$01
00091008 E100                       	smpsAlterNote       $00
0009100A 01                         	dc.b	$01
0009100B E1FA                       	smpsAlterNote       $FA
0009100D 01                         	dc.b	$01
0009100E E1FD                       	smpsAlterNote       $FD
00091010 ECF5                       	smpsPSGAlterVol     $F5
00091012 9206                       	dc.b	nF1, $06
00091014 EC04                       	smpsPSGAlterVol     $04
00091016 E701                       	dc.b	smpsNoAttack, $01
00091018 EC07                       	smpsPSGAlterVol     $07
0009101A 8003                       	dc.b	nRst, $03
0009101C ECF5                       	smpsPSGAlterVol     $F5
0009101E 9206                       	dc.b	nF1, $06
00091020 EC04                       	smpsPSGAlterVol     $04
00091022 E701                       	dc.b	smpsNoAttack, $01
00091024 EC07                       	smpsPSGAlterVol     $07
00091026 8006                       	dc.b	nRst, $06
00091028 E100                       	smpsAlterNote       $00
0009102A 01                         	dc.b	$01
0009102B E104                       	smpsAlterNote       $04
0009102D 01                         	dc.b	$01
0009102E E103                       	smpsAlterNote       $03
00091030 01                         	dc.b	$01
00091031 E1FD                       	smpsAlterNote       $FD
00091033 01                         	dc.b	$01
00091034 ECF5                       	smpsPSGAlterVol     $F5
00091036 9107                       	dc.b	nE1, $07
00091038 EC0B                       	smpsPSGAlterVol     $0B
0009103A 8004                       	dc.b	nRst, $04
0009103C ECF5                       	smpsPSGAlterVol     $F5
0009103E 9106                       	dc.b	nE1, $06
00091040 EC0B                       	smpsPSGAlterVol     $0B
00091042 8007                       	dc.b	nRst, $07
00091044 E103                       	smpsAlterNote       $03
00091046 0101                       	dc.b	$01, $01
00091048 E100                       	smpsAlterNote       $00
0009104A 01                         	dc.b	$01
0009104B E1FA                       	smpsAlterNote       $FA
0009104D 01                         	dc.b	$01
0009104E E1FD                       	smpsAlterNote       $FD
00091050 ECF5                       	smpsPSGAlterVol     $F5
00091052 9206                       	dc.b	nF1, $06
00091054 EC04                       	smpsPSGAlterVol     $04
00091056 E701                       	dc.b	smpsNoAttack, $01
00091058 EC07                       	smpsPSGAlterVol     $07
0009105A 8003                       	dc.b	nRst, $03
0009105C ECF5                       	smpsPSGAlterVol     $F5
0009105E 9206                       	dc.b	nF1, $06
00091060 EC04                       	smpsPSGAlterVol     $04
00091062 E701                       	dc.b	smpsNoAttack, $01
00091064 EC07                       	smpsPSGAlterVol     $07
00091066 8006                       	dc.b	nRst, $06
00091068 E100                       	smpsAlterNote       $00
0009106A 01                         	dc.b	$01
0009106B E104                       	smpsAlterNote       $04
0009106D 01                         	dc.b	$01
0009106E E100                       	smpsAlterNote       $00
00091070 01                         	dc.b	$01
00091071 E1FD                       	smpsAlterNote       $FD
00091073 01                         	dc.b	$01
00091074 ECF5                       	smpsPSGAlterVol     $F5
00091076 9106                       	dc.b	nE1, $06
00091078 EC04                       	smpsPSGAlterVol     $04
0009107A E701                       	dc.b	smpsNoAttack, $01
0009107C EC07                       	smpsPSGAlterVol     $07
0009107E 8003                       	dc.b	nRst, $03
00091080 ECF5                       	smpsPSGAlterVol     $F5
00091082 9107 9106                  	dc.b	nE1, $07, nE1, $06
00091086 EC04                       	smpsPSGAlterVol     $04
00091088 E701                       	dc.b	smpsNoAttack, $01
0009108A ECFC                       	smpsPSGAlterVol     $FC
0009108C 9103                       	dc.b	nE1, $03
0009108E EC04                       	smpsPSGAlterVol     $04
00091090 E701                       	dc.b	smpsNoAttack, $01
00091092 ECFC                       	smpsPSGAlterVol     $FC
00091094 9102                       	dc.b	nE1, $02
00091096 EC04                       	smpsPSGAlterVol     $04
00091098 E701                       	dc.b	smpsNoAttack, $01
0009109A ECFC                       	smpsPSGAlterVol     $FC
0009109C 9103                       	dc.b	nE1, $03
0009109E EC0B                       	smpsPSGAlterVol     $0B
000910A0 800A                       	dc.b	nRst, $0A
000910A2 E100                       	smpsAlterNote       $00
000910A4 01                         	dc.b	$01
000910A5 E104                       	smpsAlterNote       $04
000910A7 01                         	dc.b	$01
000910A8 E100                       	smpsAlterNote       $00
000910AA 01                         	dc.b	$01
000910AB E1FA                       	smpsAlterNote       $FA
000910AD 01                         	dc.b	$01
000910AE E1F9                       	smpsAlterNote       $F9
000910B0 01                         	dc.b	$01
000910B1 E1FD                       	smpsAlterNote       $FD
000910B3 01                         	dc.b	$01
000910B4 E103                       	smpsAlterNote       $03
000910B6 0101                       	dc.b	$01, $01
000910B8 E100                       	smpsAlterNote       $00
000910BA 01                         	dc.b	$01
000910BB E1FA                       	smpsAlterNote       $FA
000910BD 0101                       	dc.b	$01, $01
000910BF E1FD                       	smpsAlterNote       $FD
000910C1 ECF5                       	smpsPSGAlterVol     $F5
000910C3 9206                       	dc.b	nF1, $06
000910C5 EC04                       	smpsPSGAlterVol     $04
000910C7 E704                       	dc.b	smpsNoAttack, $04
000910C9 ECFC                       	smpsPSGAlterVol     $FC
000910CB 9206                       	dc.b	nF1, $06
000910CD EC04                       	smpsPSGAlterVol     $04
000910CF E701                       	dc.b	smpsNoAttack, $01
000910D1 EC07                       	smpsPSGAlterVol     $07
000910D3 8006                       	dc.b	nRst, $06
000910D5 E100                       	smpsAlterNote       $00
000910D7 01                         	dc.b	$01
000910D8 E104                       	smpsAlterNote       $04
000910DA 01                         	dc.b	$01
000910DB E103                       	smpsAlterNote       $03
000910DD 01                         	dc.b	$01
000910DE E1FD                       	smpsAlterNote       $FD
000910E0 01                         	dc.b	$01
000910E1 ECF5                       	smpsPSGAlterVol     $F5
000910E3 9407                       	dc.b	nG1, $07
000910E5 EC0B                       	smpsPSGAlterVol     $0B
000910E7 8004                       	dc.b	nRst, $04
000910E9 ECF5                       	smpsPSGAlterVol     $F5
000910EB 9406                       	dc.b	nG1, $06
000910ED EC0B                       	smpsPSGAlterVol     $0B
000910EF 8007                       	dc.b	nRst, $07
000910F1 E103                       	smpsAlterNote       $03
000910F3 0101                       	dc.b	$01, $01
000910F5 E1FD                       	smpsAlterNote       $FD
000910F7 01                         	dc.b	$01
000910F8 E1F9                       	smpsAlterNote       $F9
000910FA 01                         	dc.b	$01
000910FB E1FD                       	smpsAlterNote       $FD
000910FD ECF5                       	smpsPSGAlterVol     $F5
000910FF 9206                       	dc.b	nF1, $06
00091101 EC04                       	smpsPSGAlterVol     $04
00091103 E701                       	dc.b	smpsNoAttack, $01
00091105 EC07                       	smpsPSGAlterVol     $07
00091107 8003                       	dc.b	nRst, $03
00091109 ECF5                       	smpsPSGAlterVol     $F5
0009110B 9206                       	dc.b	nF1, $06
0009110D EC04                       	smpsPSGAlterVol     $04
0009110F E701                       	dc.b	smpsNoAttack, $01
00091111 EC07                       	smpsPSGAlterVol     $07
00091113 8006                       	dc.b	nRst, $06
00091115 E100                       	smpsAlterNote       $00
00091117 01                         	dc.b	$01
00091118 E104                       	smpsAlterNote       $04
0009111A 01                         	dc.b	$01
0009111B E100                       	smpsAlterNote       $00
0009111D 01                         	dc.b	$01
0009111E E1FA                       	smpsAlterNote       $FA
00091120 01                         	dc.b	$01
00091121 E1FD                       	smpsAlterNote       $FD
00091123 ECF5                       	smpsPSGAlterVol     $F5
00091125 9206                       	dc.b	nF1, $06
00091127 EC04                       	smpsPSGAlterVol     $04
00091129 E701                       	dc.b	smpsNoAttack, $01
0009112B EC07                       	smpsPSGAlterVol     $07
0009112D 8003                       	dc.b	nRst, $03
0009112F ECF5                       	smpsPSGAlterVol     $F5
00091131 9107                       	dc.b	nE1, $07
00091133 EC0B                       	smpsPSGAlterVol     $0B
00091135 8006                       	dc.b	nRst, $06
00091137 E100                       	smpsAlterNote       $00
00091139 01                         	dc.b	$01
0009113A E103                       	smpsAlterNote       $03
0009113C 0101                       	dc.b	$01, $01
0009113E E1FD                       	smpsAlterNote       $FD
00091140 01                         	dc.b	$01
00091141 ECF5                       	smpsPSGAlterVol     $F5
00091143 9207                       	dc.b	nF1, $07
00091145 EC0B                       	smpsPSGAlterVol     $0B
00091147 8004                       	dc.b	nRst, $04
00091149 ECF5                       	smpsPSGAlterVol     $F5
0009114B 9206                       	dc.b	nF1, $06
0009114D EC04                       	smpsPSGAlterVol     $04
0009114F E701                       	dc.b	smpsNoAttack, $01
00091151 EC07                       	smpsPSGAlterVol     $07
00091153 8006                       	dc.b	nRst, $06
00091155 E103                       	smpsAlterNote       $03
00091157 01                         	dc.b	$01
00091158 E104                       	smpsAlterNote       $04
0009115A 01                         	dc.b	$01
0009115B E100                       	smpsAlterNote       $00
0009115D 01                         	dc.b	$01
0009115E E1FB                       	smpsAlterNote       $FB
00091160 01                         	dc.b	$01
00091161 E1FD                       	smpsAlterNote       $FD
00091163 ECF5                       	smpsPSGAlterVol     $F5
00091165 9406                       	dc.b	nG1, $06
00091167 EC04                       	smpsPSGAlterVol     $04
00091169 E701                       	dc.b	smpsNoAttack, $01
0009116B EC07                       	smpsPSGAlterVol     $07
0009116D 8003                       	dc.b	nRst, $03
0009116F ECF5                       	smpsPSGAlterVol     $F5
00091171 9406                       	dc.b	nG1, $06
00091173 EC04                       	smpsPSGAlterVol     $04
00091175 E701                       	dc.b	smpsNoAttack, $01
00091177 EC07                       	smpsPSGAlterVol     $07
00091179 8006                       	dc.b	nRst, $06
0009117B E100                       	smpsAlterNote       $00
0009117D 01                         	dc.b	$01
0009117E E104                       	smpsAlterNote       $04
00091180 01                         	dc.b	$01
00091181 E100                       	smpsAlterNote       $00
00091183 01                         	dc.b	$01
00091184 E1FD                       	smpsAlterNote       $FD
00091186 01                         	dc.b	$01
00091187 ECF5                       	smpsPSGAlterVol     $F5
00091189 9206                       	dc.b	nF1, $06
0009118B EC04                       	smpsPSGAlterVol     $04
0009118D E701                       	dc.b	smpsNoAttack, $01
0009118F EC07                       	smpsPSGAlterVol     $07
00091191 8003                       	dc.b	nRst, $03
00091193 ECF5                       	smpsPSGAlterVol     $F5
00091195 9207                       	dc.b	nF1, $07
00091197 EC0B                       	smpsPSGAlterVol     $0B
00091199 8007                       	dc.b	nRst, $07
0009119B E103                       	smpsAlterNote       $03
0009119D 0101                       	dc.b	$01, $01
0009119F E1FD                       	smpsAlterNote       $FD
000911A1 01                         	dc.b	$01
000911A2 E1FA                       	smpsAlterNote       $FA
000911A4 01                         	dc.b	$01
000911A5 E1FD                       	smpsAlterNote       $FD
000911A7 ECF5                       	smpsPSGAlterVol     $F5
000911A9 9206                       	dc.b	nF1, $06
000911AB EC0B                       	smpsPSGAlterVol     $0B
000911AD 8004                       	dc.b	nRst, $04
000911AF ECF5                       	smpsPSGAlterVol     $F5
000911B1 9206                       	dc.b	nF1, $06
000911B3 EC04                       	smpsPSGAlterVol     $04
000911B5 E701                       	dc.b	smpsNoAttack, $01
000911B7 EC07                       	smpsPSGAlterVol     $07
000911B9 8006                       	dc.b	nRst, $06
000911BB E100                       	smpsAlterNote       $00
000911BD 01                         	dc.b	$01
000911BE E104                       	smpsAlterNote       $04
000911C0 01                         	dc.b	$01
000911C1 E100                       	smpsAlterNote       $00
000911C3 01                         	dc.b	$01
000911C4 E1FA                       	smpsAlterNote       $FA
000911C6 01                         	dc.b	$01
000911C7 E1FD                       	smpsAlterNote       $FD
000911C9 ECF5                       	smpsPSGAlterVol     $F5
000911CB 9206                       	dc.b	nF1, $06
000911CD EC04                       	smpsPSGAlterVol     $04
000911CF E701                       	dc.b	smpsNoAttack, $01
000911D1 EC07                       	smpsPSGAlterVol     $07
000911D3 8003                       	dc.b	nRst, $03
000911D5 ECF5                       	smpsPSGAlterVol     $F5
000911D7 9207                       	dc.b	nF1, $07
000911D9 EC0B                       	smpsPSGAlterVol     $0B
000911DB 8006                       	dc.b	nRst, $06
000911DD E100                       	smpsAlterNote       $00
000911DF 01                         	dc.b	$01
000911E0 E103                       	smpsAlterNote       $03
000911E2 0101                       	dc.b	$01, $01
000911E4 E1FD                       	smpsAlterNote       $FD
000911E6 01                         	dc.b	$01
000911E7 ECF5                       	smpsPSGAlterVol     $F5
000911E9 9207                       	dc.b	nF1, $07
000911EB EC0B                       	smpsPSGAlterVol     $0B
000911ED 8004                       	dc.b	nRst, $04
000911EF ECF5                       	smpsPSGAlterVol     $F5
000911F1 9206                       	dc.b	nF1, $06
000911F3 EC0B                       	smpsPSGAlterVol     $0B
000911F5 8007                       	dc.b	nRst, $07
000911F7 E103                       	smpsAlterNote       $03
000911F9 0101                       	dc.b	$01, $01
000911FB E100                       	smpsAlterNote       $00
000911FD 01                         	dc.b	$01
000911FE E1FA                       	smpsAlterNote       $FA
00091200 01                         	dc.b	$01
00091201 E1FD                       	smpsAlterNote       $FD
00091203 ECF5                       	smpsPSGAlterVol     $F5
00091205 9206                       	dc.b	nF1, $06
00091207 EC04                       	smpsPSGAlterVol     $04
00091209 E701                       	dc.b	smpsNoAttack, $01
0009120B EC07                       	smpsPSGAlterVol     $07
0009120D 8003                       	dc.b	nRst, $03
0009120F ECF5                       	smpsPSGAlterVol     $F5
00091211 9206                       	dc.b	nF1, $06
00091213 EC04                       	smpsPSGAlterVol     $04
00091215 E701                       	dc.b	smpsNoAttack, $01
00091217 EC07                       	smpsPSGAlterVol     $07
00091219 8006                       	dc.b	nRst, $06
0009121B E100                       	smpsAlterNote       $00
0009121D 01                         	dc.b	$01
0009121E E104                       	smpsAlterNote       $04
00091220 01                         	dc.b	$01
00091221 E100                       	smpsAlterNote       $00
00091223 01                         	dc.b	$01
00091224 E1FD                       	smpsAlterNote       $FD
00091226 01                         	dc.b	$01
00091227 ECF5                       	smpsPSGAlterVol     $F5
00091229 9206                       	dc.b	nF1, $06
0009122B EC04                       	smpsPSGAlterVol     $04
0009122D E701                       	dc.b	smpsNoAttack, $01
0009122F EC07                       	smpsPSGAlterVol     $07
00091231 8003                       	dc.b	nRst, $03
00091233 ECF5                       	smpsPSGAlterVol     $F5
00091235 9207                       	dc.b	nF1, $07
00091237 EC0B                       	smpsPSGAlterVol     $0B
00091239 8007                       	dc.b	nRst, $07
0009123B E104                       	smpsAlterNote       $04
0009123D 0101                       	dc.b	$01, $01
0009123F E1FB                       	smpsAlterNote       $FB
00091241 01                         	dc.b	$01
00091242 E1F6                       	smpsAlterNote       $F6
00091244 0101                       	dc.b	$01, $01
00091246 E1FF                       	smpsAlterNote       $FF
00091248 01                         	dc.b	$01
00091249 E105                       	smpsAlterNote       $05
0009124B 01                         	dc.b	$01
0009124C E104                       	smpsAlterNote       $04
0009124E 01                         	dc.b	$01
0009124F E1FB                       	smpsAlterNote       $FB
00091251 01                         	dc.b	$01
00091252 E1F5                       	smpsAlterNote       $F5
00091254 01                         	dc.b	$01
00091255 E1FC                       	smpsAlterNote       $FC
00091257 ECF5                       	smpsPSGAlterVol     $F5
00091259 8B0E                       	dc.b	nBb0, $0E
0009125B E102                       	smpsAlterNote       $02
0009125D EC0B                       	smpsPSGAlterVol     $0B
0009125F 8001                       	dc.b	nRst, $01
00091261 E101                       	smpsAlterNote       $01
00091263 01                         	dc.b	$01
00091264 E1FC                       	smpsAlterNote       $FC
00091266 01                         	dc.b	$01
00091267 E1F9                       	smpsAlterNote       $F9
00091269 0101                       	dc.b	$01, $01
0009126B E1FF                       	smpsAlterNote       $FF
0009126D 01                         	dc.b	$01
0009126E E102                       	smpsAlterNote       $02
00091270 01                         	dc.b	$01
00091271 E1FF                       	smpsAlterNote       $FF
00091273 01                         	dc.b	$01
00091274 E1FC                       	smpsAlterNote       $FC
00091276 01                         	dc.b	$01
00091277 E1F8                       	smpsAlterNote       $F8
00091279 01                         	dc.b	$01
0009127A E1FC                       	smpsAlterNote       $FC
0009127C 01                         	dc.b	$01
0009127D E101                       	smpsAlterNote       $01
0009127F 01                         	dc.b	$01
00091280 E102                       	smpsAlterNote       $02
00091282 01                         	dc.b	$01
00091283 E1FF                       	smpsAlterNote       $FF
00091285 01                         	dc.b	$01
00091286 E1FB                       	smpsAlterNote       $FB
00091288 ECF5                       	smpsPSGAlterVol     $F5
0009128A 8D0D                       	dc.b	nC1, $0D
0009128C E101                       	smpsAlterNote       $01
0009128E EC0B                       	smpsPSGAlterVol     $0B
00091290 8001                       	dc.b	nRst, $01
00091292 E102                       	smpsAlterNote       $02
00091294 01                         	dc.b	$01
00091295 E1FF                       	smpsAlterNote       $FF
00091297 01                         	dc.b	$01
00091298 E1F9                       	smpsAlterNote       $F9
0009129A 0101                       	dc.b	$01, $01
0009129C E1FC                       	smpsAlterNote       $FC
0009129E 01                         	dc.b	$01
0009129F E101                       	smpsAlterNote       $01
000912A1 0101                       	dc.b	$01, $01
000912A3 E1FC                       	smpsAlterNote       $FC
000912A5 01                         	dc.b	$01
000912A6 E1F9                       	smpsAlterNote       $F9
000912A8 0101                       	dc.b	$01, $01
000912AA E1FF                       	smpsAlterNote       $FF
000912AC 01                         	dc.b	$01
000912AD E102                       	smpsAlterNote       $02
000912AF 01                         	dc.b	$01
000912B0 E101                       	smpsAlterNote       $01
000912B2 01                         	dc.b	$01
000912B3 E1FC                       	smpsAlterNote       $FC
000912B5 ECF5                       	smpsPSGAlterVol     $F5
000912B7 8F0D                       	dc.b	nD1, $0D
000912B9 E1FF                       	smpsAlterNote       $FF
000912BB EC04                       	smpsPSGAlterVol     $04
000912BD E701                       	dc.b	smpsNoAttack, $01
000912BF EC07                       	smpsPSGAlterVol     $07
000912C1 E103                       	smpsAlterNote       $03
000912C3 8001                       	dc.b	nRst, $01
000912C5 E102                       	smpsAlterNote       $02
000912C7 01                         	dc.b	$01
000912C8 E1FD                       	smpsAlterNote       $FD
000912CA 01                         	dc.b	$01
000912CB E1F9                       	smpsAlterNote       $F9
000912CD 01                         	dc.b	$01
000912CE E1FD                       	smpsAlterNote       $FD
000912D0 01                         	dc.b	$01
000912D1 E100                       	smpsAlterNote       $00
000912D3 01                         	dc.b	$01
000912D4 E103                       	smpsAlterNote       $03
000912D6 01                         	dc.b	$01
000912D7 E100                       	smpsAlterNote       $00
000912D9 01                         	dc.b	$01
000912DA E1FA                       	smpsAlterNote       $FA
000912DC 01                         	dc.b	$01
000912DD E1F9                       	smpsAlterNote       $F9
000912DF 01                         	dc.b	$01
000912E0 E1FD                       	smpsAlterNote       $FD
000912E2 01                         	dc.b	$01
000912E3 E102                       	smpsAlterNote       $02
000912E5 0101                       	dc.b	$01, $01
000912E7 E100                       	smpsAlterNote       $00
000912E9 01                         	dc.b	$01
000912EA E1FD                       	smpsAlterNote       $FD
000912EC ECF5                       	smpsPSGAlterVol     $F5
000912EE 910D                       	dc.b	nE1, $0D
000912F0 E103                       	smpsAlterNote       $03
000912F2 EC0B                       	smpsPSGAlterVol     $0B
000912F4 8001 01                    	dc.b	nRst, $01, $01
000912F7 E100                       	smpsAlterNote       $00
000912F9 01                         	dc.b	$01
000912FA E1FA                       	smpsAlterNote       $FA
000912FC 0101                       	dc.b	$01, $01
000912FE E100                       	smpsAlterNote       $00
00091300 01                         	dc.b	$01
00091301 E103                       	smpsAlterNote       $03
00091303 01                         	dc.b	$01
00091304 E1FD                       	smpsAlterNote       $FD
00091306 ECF5                       	smpsPSGAlterVol     $F5
00091308 9206                       	dc.b	nF1, $06
0009130A EC04                       	smpsPSGAlterVol     $04
0009130C E701                       	dc.b	smpsNoAttack, $01
0009130E EC07                       	smpsPSGAlterVol     $07
00091310 8003                       	dc.b	nRst, $03
00091312 ECF5                       	smpsPSGAlterVol     $F5
00091314 9207                       	dc.b	nF1, $07
00091316 EC0B                       	smpsPSGAlterVol     $0B
00091318 8006                       	dc.b	nRst, $06
0009131A E100                       	smpsAlterNote       $00
0009131C 01                         	dc.b	$01
0009131D E103                       	smpsAlterNote       $03
0009131F 0101                       	dc.b	$01, $01
00091321 E1FD                       	smpsAlterNote       $FD
00091323 01                         	dc.b	$01
00091324 ECF5                       	smpsPSGAlterVol     $F5
00091326 9407                       	dc.b	nG1, $07
00091328 EC0B                       	smpsPSGAlterVol     $0B
0009132A 8004                       	dc.b	nRst, $04
0009132C ECF5                       	smpsPSGAlterVol     $F5
0009132E 9406                       	dc.b	nG1, $06
00091330 EC04                       	smpsPSGAlterVol     $04
00091332 E701                       	dc.b	smpsNoAttack, $01
00091334 EC07                       	smpsPSGAlterVol     $07
00091336 8006                       	dc.b	nRst, $06
00091338 E103                       	smpsAlterNote       $03
0009133A 01                         	dc.b	$01
0009133B E104                       	smpsAlterNote       $04
0009133D 01                         	dc.b	$01
0009133E E100                       	smpsAlterNote       $00
00091340 01                         	dc.b	$01
00091341 E1F9                       	smpsAlterNote       $F9
00091343 01                         	dc.b	$01
00091344 E1FD                       	smpsAlterNote       $FD
00091346 ECF5                       	smpsPSGAlterVol     $F5
00091348 9206                       	dc.b	nF1, $06
0009134A EC04                       	smpsPSGAlterVol     $04
0009134C E701                       	dc.b	smpsNoAttack, $01
0009134E EC07                       	smpsPSGAlterVol     $07
00091350 8003                       	dc.b	nRst, $03
00091352 ECF5                       	smpsPSGAlterVol     $F5
00091354 9206                       	dc.b	nF1, $06
00091356 EC04                       	smpsPSGAlterVol     $04
00091358 E701                       	dc.b	smpsNoAttack, $01
0009135A EC07                       	smpsPSGAlterVol     $07
0009135C 8006                       	dc.b	nRst, $06
0009135E E100                       	smpsAlterNote       $00
00091360 01                         	dc.b	$01
00091361 E104                       	smpsAlterNote       $04
00091363 01                         	dc.b	$01
00091364 E103                       	smpsAlterNote       $03
00091366 01                         	dc.b	$01
00091367 E1FD                       	smpsAlterNote       $FD
00091369 01                         	dc.b	$01
0009136A ECF5                       	smpsPSGAlterVol     $F5
0009136C 9407                       	dc.b	nG1, $07
0009136E EC0B                       	smpsPSGAlterVol     $0B
00091370 8004                       	dc.b	nRst, $04
00091372 ECF5                       	smpsPSGAlterVol     $F5
00091374 9406                       	dc.b	nG1, $06
00091376 EC0B                       	smpsPSGAlterVol     $0B
00091378 8007                       	dc.b	nRst, $07
0009137A E103                       	smpsAlterNote       $03
0009137C 0101                       	dc.b	$01, $01
0009137E E100                       	smpsAlterNote       $00
00091380 01                         	dc.b	$01
00091381 E1F9                       	smpsAlterNote       $F9
00091383 01                         	dc.b	$01
00091384 E1FD                       	smpsAlterNote       $FD
00091386 ECF5                       	smpsPSGAlterVol     $F5
00091388 9206                       	dc.b	nF1, $06
0009138A EC04                       	smpsPSGAlterVol     $04
0009138C E701                       	dc.b	smpsNoAttack, $01
0009138E EC07                       	smpsPSGAlterVol     $07
00091390 8003                       	dc.b	nRst, $03
00091392 ECF5                       	smpsPSGAlterVol     $F5
00091394 9206                       	dc.b	nF1, $06
00091396 EC04                       	smpsPSGAlterVol     $04
00091398 E701                       	dc.b	smpsNoAttack, $01
0009139A EC07                       	smpsPSGAlterVol     $07
0009139C 8006                       	dc.b	nRst, $06
0009139E E100                       	smpsAlterNote       $00
000913A0 01                         	dc.b	$01
000913A1 E104                       	smpsAlterNote       $04
000913A3 01                         	dc.b	$01
000913A4 E100                       	smpsAlterNote       $00
000913A6 01                         	dc.b	$01
000913A7 E1FB                       	smpsAlterNote       $FB
000913A9 01                         	dc.b	$01
000913AA E1FD                       	smpsAlterNote       $FD
000913AC ECF5                       	smpsPSGAlterVol     $F5
000913AE 9406                       	dc.b	nG1, $06
000913B0 EC04                       	smpsPSGAlterVol     $04
000913B2 E701                       	dc.b	smpsNoAttack, $01
000913B4 EC07                       	smpsPSGAlterVol     $07
000913B6 8003                       	dc.b	nRst, $03
000913B8 ECF5                       	smpsPSGAlterVol     $F5
000913BA 9407                       	dc.b	nG1, $07
000913BC EC0B                       	smpsPSGAlterVol     $0B
000913BE 8006                       	dc.b	nRst, $06
000913C0 E100                       	smpsAlterNote       $00
000913C2 01                         	dc.b	$01
000913C3 E103                       	smpsAlterNote       $03
000913C5 0101                       	dc.b	$01, $01
000913C7 E1FD                       	smpsAlterNote       $FD
000913C9 01                         	dc.b	$01
000913CA ECF5                       	smpsPSGAlterVol     $F5
000913CC 9207                       	dc.b	nF1, $07
000913CE EC0B                       	smpsPSGAlterVol     $0B
000913D0 8004                       	dc.b	nRst, $04
000913D2 ECF5                       	smpsPSGAlterVol     $F5
000913D4 9206                       	dc.b	nF1, $06
000913D6 EC04                       	smpsPSGAlterVol     $04
000913D8 E701                       	dc.b	smpsNoAttack, $01
000913DA ECFC                       	smpsPSGAlterVol     $FC
000913DC E1FC                       	smpsAlterNote       $FC
000913DE 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
000913E2 EC04                       	smpsPSGAlterVol     $04
000913E4 E701                       	dc.b	smpsNoAttack, $01
000913E6 ECFC                       	smpsPSGAlterVol     $FC
000913E8 9003                       	dc.b	nEb1, $03
000913EA E1FD                       	smpsAlterNote       $FD
000913EC 9403                       	dc.b	nG1, $03
000913EE EC04                       	smpsPSGAlterVol     $04
000913F0 E701                       	dc.b	smpsNoAttack, $01
000913F2 E1FE                       	smpsAlterNote       $FE
000913F4 ECFC                       	smpsPSGAlterVol     $FC
000913F6 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000913FA EC04                       	smpsPSGAlterVol     $04
000913FC E701                       	dc.b	smpsNoAttack, $01
000913FE EC07                       	smpsPSGAlterVol     $07
00091400 8009                       	dc.b	nRst, $09
00091402 E100                       	smpsAlterNote       $00
00091404 01                         	dc.b	$01
00091405 F6F5 19                    	smpsJump            music84_Jump07
00091408                            
00091408                            ; PSG2 Data
00091408                            music84_PSG2:
00091408 E1FC                       	smpsAlterNote       $FC
0009140A EC04                       	smpsPSGAlterVol     $04
0009140C 8F03                       	dc.b	nD1, $03
0009140E E1FD                       	smpsAlterNote       $FD
00091410 9203                       	dc.b	nF1, $03
00091412 EC04                       	smpsPSGAlterVol     $04
00091414 E701                       	dc.b	smpsNoAttack, $01
00091416 E1FE                       	smpsAlterNote       $FE
00091418 ECFC                       	smpsPSGAlterVol     $FC
0009141A 9603                       	dc.b	nA1, $03
0009141C E1FD                       	smpsAlterNote       $FD
0009141E 9103                       	dc.b	nE1, $03
00091420 EC04                       	smpsPSGAlterVol     $04
00091422 E701                       	dc.b	smpsNoAttack, $01
00091424 ECFC                       	smpsPSGAlterVol     $FC
00091426 9403                       	dc.b	nG1, $03
00091428 E1FE                       	smpsAlterNote       $FE
0009142A 9703                       	dc.b	nBb1, $03
0009142C EC04                       	smpsPSGAlterVol     $04
0009142E E701                       	dc.b	smpsNoAttack, $01
00091430 E1FF                       	smpsAlterNote       $FF
00091432 ECFC                       	smpsPSGAlterVol     $FC
00091434 9B02                       	dc.b	nD2, $02
00091436 EC04                       	smpsPSGAlterVol     $04
00091438 E701                       	dc.b	smpsNoAttack, $01
0009143A ECFC                       	smpsPSGAlterVol     $FC
0009143C E1FE                       	smpsAlterNote       $FE
0009143E 9A03                       	dc.b	nCs2, $03
00091440 EC0B                       	smpsPSGAlterVol     $0B
00091442 800A                       	dc.b	nRst, $0A
00091444 E102                       	smpsAlterNote       $02
00091446 01                         	dc.b	$01
00091447 E10A                       	smpsAlterNote       $0A
00091449 01                         	dc.b	$01
0009144A E102                       	smpsAlterNote       $02
0009144C 01                         	dc.b	$01
0009144D E1FC                       	smpsAlterNote       $FC
0009144F 01                         	dc.b	$01
00091450 E10A                       	smpsAlterNote       $0A
00091452 01                         	dc.b	$01
00091453 E1FC                       	smpsAlterNote       $FC
00091455 01                         	dc.b	$01
00091456 E108                       	smpsAlterNote       $08
00091458 01                         	dc.b	$01
00091459 E10A                       	smpsAlterNote       $0A
0009145B 01                         	dc.b	$01
0009145C E102                       	smpsAlterNote       $02
0009145E 01                         	dc.b	$01
0009145F E1F7                       	smpsAlterNote       $F7
00091461 0101                       	dc.b	$01, $01
00091463 E102                       	smpsAlterNote       $02
00091465 01                         	dc.b	$01
00091466 E108                       	smpsAlterNote       $08
00091468 0101                       	dc.b	$01, $01
0009146A E1FC                       	smpsAlterNote       $FC
0009146C 01                         	dc.b	$01
0009146D E10A                       	smpsAlterNote       $0A
0009146F 01                         	dc.b	$01
00091470 E1F7                       	smpsAlterNote       $F7
00091472 01                         	dc.b	$01
00091473 E102                       	smpsAlterNote       $02
00091475 01                         	dc.b	$01
00091476 E10A                       	smpsAlterNote       $0A
00091478 01                         	dc.b	$01
00091479 E102                       	smpsAlterNote       $02
0009147B 01                         	dc.b	$01
0009147C E1FC                       	smpsAlterNote       $FC
0009147E 01                         	dc.b	$01
0009147F                            
0009147F                            music84_Jump06:
0009147F E10A                       	smpsAlterNote       $0A
00091481 8001                       	dc.b	nRst, $01
00091483 E1FC                       	smpsAlterNote       $FC
00091485 01                         	dc.b	$01
00091486 E108                       	smpsAlterNote       $08
00091488 01                         	dc.b	$01
00091489 E10A                       	smpsAlterNote       $0A
0009148B 01                         	dc.b	$01
0009148C E1FC                       	smpsAlterNote       $FC
0009148E ECF5                       	smpsPSGAlterVol     $F5
00091490 8F06                       	dc.b	nD1, $06
00091492 EC04                       	smpsPSGAlterVol     $04
00091494 E701                       	dc.b	smpsNoAttack, $01
00091496 EC07                       	smpsPSGAlterVol     $07
00091498 8003                       	dc.b	nRst, $03
0009149A ECF5                       	smpsPSGAlterVol     $F5
0009149C 8F06                       	dc.b	nD1, $06
0009149E EC04                       	smpsPSGAlterVol     $04
000914A0 E701                       	dc.b	smpsNoAttack, $01
000914A2 EC07                       	smpsPSGAlterVol     $07
000914A4 8006                       	dc.b	nRst, $06
000914A6 E1FF                       	smpsAlterNote       $FF
000914A8 01                         	dc.b	$01
000914A9 E102                       	smpsAlterNote       $02
000914AB 01                         	dc.b	$01
000914AC E1FF                       	smpsAlterNote       $FF
000914AE 01                         	dc.b	$01
000914AF E1F9                       	smpsAlterNote       $F9
000914B1 01                         	dc.b	$01
000914B2 E1FC                       	smpsAlterNote       $FC
000914B4 ECF5                       	smpsPSGAlterVol     $F5
000914B6 9006                       	dc.b	nEb1, $06
000914B8 EC04                       	smpsPSGAlterVol     $04
000914BA E701                       	dc.b	smpsNoAttack, $01
000914BC EC07                       	smpsPSGAlterVol     $07
000914BE 8003                       	dc.b	nRst, $03
000914C0 ECF5                       	smpsPSGAlterVol     $F5
000914C2 9007                       	dc.b	nEb1, $07
000914C4 EC0B                       	smpsPSGAlterVol     $0B
000914C6 8006                       	dc.b	nRst, $06
000914C8 E1FF                       	smpsAlterNote       $FF
000914CA 01                         	dc.b	$01
000914CB E103                       	smpsAlterNote       $03
000914CD 0101                       	dc.b	$01, $01
000914CF E1FC                       	smpsAlterNote       $FC
000914D1 01                         	dc.b	$01
000914D2 ECF5                       	smpsPSGAlterVol     $F5
000914D4 8F07                       	dc.b	nD1, $07
000914D6 EC0B                       	smpsPSGAlterVol     $0B
000914D8 8004                       	dc.b	nRst, $04
000914DA ECF5                       	smpsPSGAlterVol     $F5
000914DC 8F06                       	dc.b	nD1, $06
000914DE EC04                       	smpsPSGAlterVol     $04
000914E0 E701                       	dc.b	smpsNoAttack, $01
000914E2 EC07                       	smpsPSGAlterVol     $07
000914E4 8006                       	dc.b	nRst, $06
000914E6 E102                       	smpsAlterNote       $02
000914E8 01                         	dc.b	$01
000914E9 E103                       	smpsAlterNote       $03
000914EB 01                         	dc.b	$01
000914EC E1FF                       	smpsAlterNote       $FF
000914EE 01                         	dc.b	$01
000914EF E1F9                       	smpsAlterNote       $F9
000914F1 01                         	dc.b	$01
000914F2 E1FC                       	smpsAlterNote       $FC
000914F4 ECF5                       	smpsPSGAlterVol     $F5
000914F6 8F06                       	dc.b	nD1, $06
000914F8 EC04                       	smpsPSGAlterVol     $04
000914FA E701                       	dc.b	smpsNoAttack, $01
000914FC EC07                       	smpsPSGAlterVol     $07
000914FE 8003                       	dc.b	nRst, $03
00091500 ECF5                       	smpsPSGAlterVol     $F5
00091502 8F06                       	dc.b	nD1, $06
00091504 EC04                       	smpsPSGAlterVol     $04
00091506 E701                       	dc.b	smpsNoAttack, $01
00091508 EC07                       	smpsPSGAlterVol     $07
0009150A 8006                       	dc.b	nRst, $06
0009150C E1FF                       	smpsAlterNote       $FF
0009150E 01                         	dc.b	$01
0009150F E103                       	smpsAlterNote       $03
00091511 01                         	dc.b	$01
00091512 E1FF                       	smpsAlterNote       $FF
00091514 01                         	dc.b	$01
00091515 E1FC                       	smpsAlterNote       $FC
00091517 01                         	dc.b	$01
00091518 ECF5                       	smpsPSGAlterVol     $F5
0009151A 8F06                       	dc.b	nD1, $06
0009151C EC04                       	smpsPSGAlterVol     $04
0009151E E701                       	dc.b	smpsNoAttack, $01
00091520 EC07                       	smpsPSGAlterVol     $07
00091522 8003                       	dc.b	nRst, $03
00091524 ECF5                       	smpsPSGAlterVol     $F5
00091526 8F07                       	dc.b	nD1, $07
00091528 EC0B                       	smpsPSGAlterVol     $0B
0009152A 8007                       	dc.b	nRst, $07
0009152C E101                       	smpsAlterNote       $01
0009152E 0101                       	dc.b	$01, $01
00091530 E1FC                       	smpsAlterNote       $FC
00091532 01                         	dc.b	$01
00091533 E1F9                       	smpsAlterNote       $F9
00091535 01                         	dc.b	$01
00091536 E1FC                       	smpsAlterNote       $FC
00091538 ECF5                       	smpsPSGAlterVol     $F5
0009153A 9006                       	dc.b	nEb1, $06
0009153C EC0B                       	smpsPSGAlterVol     $0B
0009153E 8004                       	dc.b	nRst, $04
00091540 ECF5                       	smpsPSGAlterVol     $F5
00091542 9006                       	dc.b	nEb1, $06
00091544 EC04                       	smpsPSGAlterVol     $04
00091546 E701                       	dc.b	smpsNoAttack, $01
00091548 EC07                       	smpsPSGAlterVol     $07
0009154A 8006                       	dc.b	nRst, $06
0009154C E100                       	smpsAlterNote       $00
0009154E 01                         	dc.b	$01
0009154F E102                       	smpsAlterNote       $02
00091551 01                         	dc.b	$01
00091552 E100                       	smpsAlterNote       $00
00091554 01                         	dc.b	$01
00091555 E1FD                       	smpsAlterNote       $FD
00091557 01                         	dc.b	$01
00091558 E1FF                       	smpsAlterNote       $FF
0009155A ECF5                       	smpsPSGAlterVol     $F5
0009155C 9B06                       	dc.b	nD2, $06
0009155E EC04                       	smpsPSGAlterVol     $04
00091560 E701                       	dc.b	smpsNoAttack, $01
00091562 EC07                       	smpsPSGAlterVol     $07
00091564 8003                       	dc.b	nRst, $03
00091566 ECF5                       	smpsPSGAlterVol     $F5
00091568 9B07                       	dc.b	nD2, $07
0009156A EC0B                       	smpsPSGAlterVol     $0B
0009156C 8006                       	dc.b	nRst, $06
0009156E E102                       	smpsAlterNote       $02
00091570 01                         	dc.b	$01
00091571 E106                       	smpsAlterNote       $06
00091573 01                         	dc.b	$01
00091574 E105                       	smpsAlterNote       $05
00091576 01                         	dc.b	$01
00091577 E1FF                       	smpsAlterNote       $FF
00091579 01                         	dc.b	$01
0009157A ECF5                       	smpsPSGAlterVol     $F5
0009157C 9B07                       	dc.b	nD2, $07
0009157E EC0B                       	smpsPSGAlterVol     $0B
00091580 8004                       	dc.b	nRst, $04
00091582 ECF5                       	smpsPSGAlterVol     $F5
00091584 9B06                       	dc.b	nD2, $06
00091586 EC0B                       	smpsPSGAlterVol     $0B
00091588 8007                       	dc.b	nRst, $07
0009158A E105                       	smpsAlterNote       $05
0009158C 0101                       	dc.b	$01, $01
0009158E E102                       	smpsAlterNote       $02
00091590 01                         	dc.b	$01
00091591 E1FC                       	smpsAlterNote       $FC
00091593 01                         	dc.b	$01
00091594 E1FF                       	smpsAlterNote       $FF
00091596 ECF5                       	smpsPSGAlterVol     $F5
00091598 9B06                       	dc.b	nD2, $06
0009159A EC04                       	smpsPSGAlterVol     $04
0009159C E701                       	dc.b	smpsNoAttack, $01
0009159E EC07                       	smpsPSGAlterVol     $07
000915A0 8003                       	dc.b	nRst, $03
000915A2 ECF5                       	smpsPSGAlterVol     $F5
000915A4 9B06                       	dc.b	nD2, $06
000915A6 EC04                       	smpsPSGAlterVol     $04
000915A8 E701                       	dc.b	smpsNoAttack, $01
000915AA EC07                       	smpsPSGAlterVol     $07
000915AC 8006                       	dc.b	nRst, $06
000915AE E102                       	smpsAlterNote       $02
000915B0 01                         	dc.b	$01
000915B1 E106                       	smpsAlterNote       $06
000915B3 01                         	dc.b	$01
000915B4 E102                       	smpsAlterNote       $02
000915B6 01                         	dc.b	$01
000915B7 E1FF                       	smpsAlterNote       $FF
000915B9 01                         	dc.b	$01
000915BA ECF5                       	smpsPSGAlterVol     $F5
000915BC 9B06                       	dc.b	nD2, $06
000915BE EC04                       	smpsPSGAlterVol     $04
000915C0 E701                       	dc.b	smpsNoAttack, $01
000915C2 EC07                       	smpsPSGAlterVol     $07
000915C4 8003                       	dc.b	nRst, $03
000915C6 ECF5                       	smpsPSGAlterVol     $F5
000915C8 9B07                       	dc.b	nD2, $07
000915CA EC0B                       	smpsPSGAlterVol     $0B
000915CC 8007                       	dc.b	nRst, $07
000915CE E105                       	smpsAlterNote       $05
000915D0 0101                       	dc.b	$01, $01
000915D2 E1FF                       	smpsAlterNote       $FF
000915D4 01                         	dc.b	$01
000915D5 E1FC                       	smpsAlterNote       $FC
000915D7 01                         	dc.b	$01
000915D8 E1FF                       	smpsAlterNote       $FF
000915DA ECF5                       	smpsPSGAlterVol     $F5
000915DC 9B06                       	dc.b	nD2, $06
000915DE EC0B                       	smpsPSGAlterVol     $0B
000915E0 8004                       	dc.b	nRst, $04
000915E2 ECF5                       	smpsPSGAlterVol     $F5
000915E4 9B06                       	dc.b	nD2, $06
000915E6 EC04                       	smpsPSGAlterVol     $04
000915E8 E701                       	dc.b	smpsNoAttack, $01
000915EA EC07                       	smpsPSGAlterVol     $07
000915EC 8006                       	dc.b	nRst, $06
000915EE E105                       	smpsAlterNote       $05
000915F0 01                         	dc.b	$01
000915F1 E106                       	smpsAlterNote       $06
000915F3 01                         	dc.b	$01
000915F4 E102                       	smpsAlterNote       $02
000915F6 01                         	dc.b	$01
000915F7 E1FC                       	smpsAlterNote       $FC
000915F9 01                         	dc.b	$01
000915FA E1FF                       	smpsAlterNote       $FF
000915FC ECF5                       	smpsPSGAlterVol     $F5
000915FE 9B06                       	dc.b	nD2, $06
00091600 EC04                       	smpsPSGAlterVol     $04
00091602 E701                       	dc.b	smpsNoAttack, $01
00091604 EC07                       	smpsPSGAlterVol     $07
00091606 8003                       	dc.b	nRst, $03
00091608 ECF5                       	smpsPSGAlterVol     $F5
0009160A 9B06                       	dc.b	nD2, $06
0009160C EC04                       	smpsPSGAlterVol     $04
0009160E E701                       	dc.b	smpsNoAttack, $01
00091610 EC07                       	smpsPSGAlterVol     $07
00091612 8006                       	dc.b	nRst, $06
00091614 E102                       	smpsAlterNote       $02
00091616 01                         	dc.b	$01
00091617 E106                       	smpsAlterNote       $06
00091619 01                         	dc.b	$01
0009161A E105                       	smpsAlterNote       $05
0009161C 01                         	dc.b	$01
0009161D E1FF                       	smpsAlterNote       $FF
0009161F 01                         	dc.b	$01
00091620 ECF5                       	smpsPSGAlterVol     $F5
00091622 9B07                       	dc.b	nD2, $07
00091624 EC0B                       	smpsPSGAlterVol     $0B
00091626 8004                       	dc.b	nRst, $04
00091628 ECF5                       	smpsPSGAlterVol     $F5
0009162A 9B06                       	dc.b	nD2, $06
0009162C EC0B                       	smpsPSGAlterVol     $0B
0009162E 8007                       	dc.b	nRst, $07
00091630 E105                       	smpsAlterNote       $05
00091632 0101                       	dc.b	$01, $01
00091634 E102                       	smpsAlterNote       $02
00091636 01                         	dc.b	$01
00091637 E1FC                       	smpsAlterNote       $FC
00091639 01                         	dc.b	$01
0009163A E1FF                       	smpsAlterNote       $FF
0009163C ECF5                       	smpsPSGAlterVol     $F5
0009163E 9B06                       	dc.b	nD2, $06
00091640 EC04                       	smpsPSGAlterVol     $04
00091642 E701                       	dc.b	smpsNoAttack, $01
00091644 EC07                       	smpsPSGAlterVol     $07
00091646 8003                       	dc.b	nRst, $03
00091648 ECF5                       	smpsPSGAlterVol     $F5
0009164A 9B06                       	dc.b	nD2, $06
0009164C EC04                       	smpsPSGAlterVol     $04
0009164E E701                       	dc.b	smpsNoAttack, $01
00091650 EC07                       	smpsPSGAlterVol     $07
00091652 8006                       	dc.b	nRst, $06
00091654 E102                       	smpsAlterNote       $02
00091656 01                         	dc.b	$01
00091657 E106                       	smpsAlterNote       $06
00091659 01                         	dc.b	$01
0009165A E102                       	smpsAlterNote       $02
0009165C 01                         	dc.b	$01
0009165D E1FF                       	smpsAlterNote       $FF
0009165F 01                         	dc.b	$01
00091660 ECF5                       	smpsPSGAlterVol     $F5
00091662 9B06                       	dc.b	nD2, $06
00091664 EC04                       	smpsPSGAlterVol     $04
00091666 E701                       	dc.b	smpsNoAttack, $01
00091668 EC07                       	smpsPSGAlterVol     $07
0009166A 8003                       	dc.b	nRst, $03
0009166C ECF5                       	smpsPSGAlterVol     $F5
0009166E 9B07                       	dc.b	nD2, $07
00091670 E1FE                       	smpsAlterNote       $FE
00091672 9706                       	dc.b	nBb1, $06
00091674 EC04                       	smpsPSGAlterVol     $04
00091676 E701                       	dc.b	smpsNoAttack, $01
00091678 ECFC                       	smpsPSGAlterVol     $FC
0009167A 9703                       	dc.b	nBb1, $03
0009167C EC04                       	smpsPSGAlterVol     $04
0009167E E701                       	dc.b	smpsNoAttack, $01
00091680 ECFC                       	smpsPSGAlterVol     $FC
00091682 9702                       	dc.b	nBb1, $02
00091684 EC04                       	smpsPSGAlterVol     $04
00091686 E701                       	dc.b	smpsNoAttack, $01
00091688 ECFC                       	smpsPSGAlterVol     $FC
0009168A 9606                       	dc.b	nA1, $06
0009168C EC04                       	smpsPSGAlterVol     $04
0009168E E701                       	dc.b	smpsNoAttack, $01
00091690 EC07                       	smpsPSGAlterVol     $07
00091692 8006                       	dc.b	nRst, $06
00091694 E101                       	smpsAlterNote       $01
00091696 01                         	dc.b	$01
00091697 E107                       	smpsAlterNote       $07
00091699 01                         	dc.b	$01
0009169A E101                       	smpsAlterNote       $01
0009169C 01                         	dc.b	$01
0009169D E1F8                       	smpsAlterNote       $F8
0009169F 01                         	dc.b	$01
000916A0 E1F7                       	smpsAlterNote       $F7
000916A2 01                         	dc.b	$01
000916A3 E1FC                       	smpsAlterNote       $FC
000916A5 01                         	dc.b	$01
000916A6 E106                       	smpsAlterNote       $06
000916A8 01                         	dc.b	$01
000916A9 E107                       	smpsAlterNote       $07
000916AB 01                         	dc.b	$01
000916AC E101                       	smpsAlterNote       $01
000916AE 01                         	dc.b	$01
000916AF E1F8                       	smpsAlterNote       $F8
000916B1 0101                       	dc.b	$01, $01
000916B3 E1FC                       	smpsAlterNote       $FC
000916B5 ECF5                       	smpsPSGAlterVol     $F5
000916B7 8F06                       	dc.b	nD1, $06
000916B9 EC04                       	smpsPSGAlterVol     $04
000916BB E701                       	dc.b	smpsNoAttack, $01
000916BD EC07                       	smpsPSGAlterVol     $07
000916BF 8003                       	dc.b	nRst, $03
000916C1 ECF5                       	smpsPSGAlterVol     $F5
000916C3 8F06                       	dc.b	nD1, $06
000916C5 EC04                       	smpsPSGAlterVol     $04
000916C7 E701                       	dc.b	smpsNoAttack, $01
000916C9 EC07                       	smpsPSGAlterVol     $07
000916CB 8006                       	dc.b	nRst, $06
000916CD E1FF                       	smpsAlterNote       $FF
000916CF 01                         	dc.b	$01
000916D0 E102                       	smpsAlterNote       $02
000916D2 01                         	dc.b	$01
000916D3 E101                       	smpsAlterNote       $01
000916D5 01                         	dc.b	$01
000916D6 E1FC                       	smpsAlterNote       $FC
000916D8 01                         	dc.b	$01
000916D9 ECF5                       	smpsPSGAlterVol     $F5
000916DB 9007                       	dc.b	nEb1, $07
000916DD EC0B                       	smpsPSGAlterVol     $0B
000916DF 8004                       	dc.b	nRst, $04
000916E1 ECF5                       	smpsPSGAlterVol     $F5
000916E3 9006                       	dc.b	nEb1, $06
000916E5 EC0B                       	smpsPSGAlterVol     $0B
000916E7 8007                       	dc.b	nRst, $07
000916E9 E103                       	smpsAlterNote       $03
000916EB 0101                       	dc.b	$01, $01
000916ED E1FC                       	smpsAlterNote       $FC
000916EF 01                         	dc.b	$01
000916F0 E1F9                       	smpsAlterNote       $F9
000916F2 01                         	dc.b	$01
000916F3 E1FC                       	smpsAlterNote       $FC
000916F5 ECF5                       	smpsPSGAlterVol     $F5
000916F7 8F06                       	dc.b	nD1, $06
000916F9 EC04                       	smpsPSGAlterVol     $04
000916FB E701                       	dc.b	smpsNoAttack, $01
000916FD EC07                       	smpsPSGAlterVol     $07
000916FF 8003                       	dc.b	nRst, $03
00091701 ECF5                       	smpsPSGAlterVol     $F5
00091703 8F06                       	dc.b	nD1, $06
00091705 EC04                       	smpsPSGAlterVol     $04
00091707 E701                       	dc.b	smpsNoAttack, $01
00091709 EC07                       	smpsPSGAlterVol     $07
0009170B 8006                       	dc.b	nRst, $06
0009170D E1FF                       	smpsAlterNote       $FF
0009170F 01                         	dc.b	$01
00091710 E103                       	smpsAlterNote       $03
00091712 01                         	dc.b	$01
00091713 E1FF                       	smpsAlterNote       $FF
00091715 01                         	dc.b	$01
00091716 E1F9                       	smpsAlterNote       $F9
00091718 01                         	dc.b	$01
00091719 E1FC                       	smpsAlterNote       $FC
0009171B ECF5                       	smpsPSGAlterVol     $F5
0009171D 8F06                       	dc.b	nD1, $06
0009171F EC04                       	smpsPSGAlterVol     $04
00091721 E701                       	dc.b	smpsNoAttack, $01
00091723 EC07                       	smpsPSGAlterVol     $07
00091725 8003                       	dc.b	nRst, $03
00091727 ECF5                       	smpsPSGAlterVol     $F5
00091729 8F07                       	dc.b	nD1, $07
0009172B EC0B                       	smpsPSGAlterVol     $0B
0009172D 8006                       	dc.b	nRst, $06
0009172F E1FF                       	smpsAlterNote       $FF
00091731 01                         	dc.b	$01
00091732 E102                       	smpsAlterNote       $02
00091734 0101                       	dc.b	$01, $01
00091736 E1FC                       	smpsAlterNote       $FC
00091738 01                         	dc.b	$01
00091739 ECF5                       	smpsPSGAlterVol     $F5
0009173B 8F07                       	dc.b	nD1, $07
0009173D EC0B                       	smpsPSGAlterVol     $0B
0009173F 8004                       	dc.b	nRst, $04
00091741 ECF5                       	smpsPSGAlterVol     $F5
00091743 8F06                       	dc.b	nD1, $06
00091745 EC04                       	smpsPSGAlterVol     $04
00091747 E701                       	dc.b	smpsNoAttack, $01
00091749 EC07                       	smpsPSGAlterVol     $07
0009174B 8006                       	dc.b	nRst, $06
0009174D E101                       	smpsAlterNote       $01
0009174F 01                         	dc.b	$01
00091750 E102                       	smpsAlterNote       $02
00091752 01                         	dc.b	$01
00091753 E1FF                       	smpsAlterNote       $FF
00091755 01                         	dc.b	$01
00091756 E1F9                       	smpsAlterNote       $F9
00091758 01                         	dc.b	$01
00091759 E1FC                       	smpsAlterNote       $FC
0009175B ECF5                       	smpsPSGAlterVol     $F5
0009175D 9006                       	dc.b	nEb1, $06
0009175F EC04                       	smpsPSGAlterVol     $04
00091761 E701                       	dc.b	smpsNoAttack, $01
00091763 EC07                       	smpsPSGAlterVol     $07
00091765 8003                       	dc.b	nRst, $03
00091767 ECF5                       	smpsPSGAlterVol     $F5
00091769 9006                       	dc.b	nEb1, $06
0009176B EC04                       	smpsPSGAlterVol     $04
0009176D E701                       	dc.b	smpsNoAttack, $01
0009176F EC07                       	smpsPSGAlterVol     $07
00091771 8006                       	dc.b	nRst, $06
00091773 E100                       	smpsAlterNote       $00
00091775 01                         	dc.b	$01
00091776 E102                       	smpsAlterNote       $02
00091778 01                         	dc.b	$01
00091779 E100                       	smpsAlterNote       $00
0009177B 01                         	dc.b	$01
0009177C E1FF                       	smpsAlterNote       $FF
0009177E 01                         	dc.b	$01
0009177F ECF5                       	smpsPSGAlterVol     $F5
00091781 9B06                       	dc.b	nD2, $06
00091783 EC04                       	smpsPSGAlterVol     $04
00091785 E701                       	dc.b	smpsNoAttack, $01
00091787 EC07                       	smpsPSGAlterVol     $07
00091789 8003                       	dc.b	nRst, $03
0009178B ECF5                       	smpsPSGAlterVol     $F5
0009178D 9B07                       	dc.b	nD2, $07
0009178F EC0B                       	smpsPSGAlterVol     $0B
00091791 8007                       	dc.b	nRst, $07
00091793 E105                       	smpsAlterNote       $05
00091795 0101                       	dc.b	$01, $01
00091797 E1FF                       	smpsAlterNote       $FF
00091799 01                         	dc.b	$01
0009179A E1FC                       	smpsAlterNote       $FC
0009179C 01                         	dc.b	$01
0009179D E1FF                       	smpsAlterNote       $FF
0009179F ECF5                       	smpsPSGAlterVol     $F5
000917A1 9B06                       	dc.b	nD2, $06
000917A3 EC0B                       	smpsPSGAlterVol     $0B
000917A5 8004                       	dc.b	nRst, $04
000917A7 ECF5                       	smpsPSGAlterVol     $F5
000917A9 9B06                       	dc.b	nD2, $06
000917AB EC04                       	smpsPSGAlterVol     $04
000917AD E701                       	dc.b	smpsNoAttack, $01
000917AF EC07                       	smpsPSGAlterVol     $07
000917B1 8006                       	dc.b	nRst, $06
000917B3 E102                       	smpsAlterNote       $02
000917B5 01                         	dc.b	$01
000917B6 E106                       	smpsAlterNote       $06
000917B8 01                         	dc.b	$01
000917B9 E102                       	smpsAlterNote       $02
000917BB 01                         	dc.b	$01
000917BC E1FC                       	smpsAlterNote       $FC
000917BE 01                         	dc.b	$01
000917BF E1FF                       	smpsAlterNote       $FF
000917C1 ECF5                       	smpsPSGAlterVol     $F5
000917C3 9B06                       	dc.b	nD2, $06
000917C5 EC04                       	smpsPSGAlterVol     $04
000917C7 E701                       	dc.b	smpsNoAttack, $01
000917C9 EC07                       	smpsPSGAlterVol     $07
000917CB 8003                       	dc.b	nRst, $03
000917CD ECF5                       	smpsPSGAlterVol     $F5
000917CF 9B07                       	dc.b	nD2, $07
000917D1 EC0B                       	smpsPSGAlterVol     $0B
000917D3 8006                       	dc.b	nRst, $06
000917D5 E102                       	smpsAlterNote       $02
000917D7 01                         	dc.b	$01
000917D8 E105                       	smpsAlterNote       $05
000917DA 0101                       	dc.b	$01, $01
000917DC E1FF                       	smpsAlterNote       $FF
000917DE 01                         	dc.b	$01
000917DF ECF5                       	smpsPSGAlterVol     $F5
000917E1 9B07                       	dc.b	nD2, $07
000917E3 EC0B                       	smpsPSGAlterVol     $0B
000917E5 8004                       	dc.b	nRst, $04
000917E7 ECF5                       	smpsPSGAlterVol     $F5
000917E9 9B06                       	dc.b	nD2, $06
000917EB EC0B                       	smpsPSGAlterVol     $0B
000917ED 8007                       	dc.b	nRst, $07
000917EF E105                       	smpsAlterNote       $05
000917F1 0101                       	dc.b	$01, $01
000917F3 E102                       	smpsAlterNote       $02
000917F5 01                         	dc.b	$01
000917F6 E1FC                       	smpsAlterNote       $FC
000917F8 01                         	dc.b	$01
000917F9 E1FF                       	smpsAlterNote       $FF
000917FB ECF5                       	smpsPSGAlterVol     $F5
000917FD 9B06                       	dc.b	nD2, $06
000917FF EC04                       	smpsPSGAlterVol     $04
00091801 E701                       	dc.b	smpsNoAttack, $01
00091803 EC07                       	smpsPSGAlterVol     $07
00091805 8003                       	dc.b	nRst, $03
00091807 ECF5                       	smpsPSGAlterVol     $F5
00091809 9B06                       	dc.b	nD2, $06
0009180B EC04                       	smpsPSGAlterVol     $04
0009180D E701                       	dc.b	smpsNoAttack, $01
0009180F EC07                       	smpsPSGAlterVol     $07
00091811 8006                       	dc.b	nRst, $06
00091813 E102                       	smpsAlterNote       $02
00091815 01                         	dc.b	$01
00091816 E106                       	smpsAlterNote       $06
00091818 01                         	dc.b	$01
00091819 E102                       	smpsAlterNote       $02
0009181B 01                         	dc.b	$01
0009181C E1FF                       	smpsAlterNote       $FF
0009181E 01                         	dc.b	$01
0009181F ECF5                       	smpsPSGAlterVol     $F5
00091821 9B06                       	dc.b	nD2, $06
00091823 EC04                       	smpsPSGAlterVol     $04
00091825 E701                       	dc.b	smpsNoAttack, $01
00091827 EC07                       	smpsPSGAlterVol     $07
00091829 8003                       	dc.b	nRst, $03
0009182B ECF5                       	smpsPSGAlterVol     $F5
0009182D 9B07                       	dc.b	nD2, $07
0009182F EC0B                       	smpsPSGAlterVol     $0B
00091831 8007                       	dc.b	nRst, $07
00091833 E105                       	smpsAlterNote       $05
00091835 0101                       	dc.b	$01, $01
00091837 E1FF                       	smpsAlterNote       $FF
00091839 01                         	dc.b	$01
0009183A E1FC                       	smpsAlterNote       $FC
0009183C 01                         	dc.b	$01
0009183D E1FF                       	smpsAlterNote       $FF
0009183F ECF5                       	smpsPSGAlterVol     $F5
00091841 9B06                       	dc.b	nD2, $06
00091843 EC0B                       	smpsPSGAlterVol     $0B
00091845 8004                       	dc.b	nRst, $04
00091847 ECF5                       	smpsPSGAlterVol     $F5
00091849 9B06                       	dc.b	nD2, $06
0009184B EC04                       	smpsPSGAlterVol     $04
0009184D E701                       	dc.b	smpsNoAttack, $01
0009184F EC07                       	smpsPSGAlterVol     $07
00091851 8006                       	dc.b	nRst, $06
00091853 E102                       	smpsAlterNote       $02
00091855 01                         	dc.b	$01
00091856 E106                       	smpsAlterNote       $06
00091858 01                         	dc.b	$01
00091859 E102                       	smpsAlterNote       $02
0009185B 01                         	dc.b	$01
0009185C E1FC                       	smpsAlterNote       $FC
0009185E 01                         	dc.b	$01
0009185F E1FF                       	smpsAlterNote       $FF
00091861 ECF5                       	smpsPSGAlterVol     $F5
00091863 9B06                       	dc.b	nD2, $06
00091865 EC04                       	smpsPSGAlterVol     $04
00091867 E701                       	dc.b	smpsNoAttack, $01
00091869 EC07                       	smpsPSGAlterVol     $07
0009186B 8003                       	dc.b	nRst, $03
0009186D ECF5                       	smpsPSGAlterVol     $F5
0009186F 9B06                       	dc.b	nD2, $06
00091871 EC04                       	smpsPSGAlterVol     $04
00091873 E701                       	dc.b	smpsNoAttack, $01
00091875 EC07                       	smpsPSGAlterVol     $07
00091877 8006                       	dc.b	nRst, $06
00091879 E102                       	smpsAlterNote       $02
0009187B 01                         	dc.b	$01
0009187C E106                       	smpsAlterNote       $06
0009187E 01                         	dc.b	$01
0009187F E105                       	smpsAlterNote       $05
00091881 01                         	dc.b	$01
00091882 E1FF                       	smpsAlterNote       $FF
00091884 01                         	dc.b	$01
00091885 ECF5                       	smpsPSGAlterVol     $F5
00091887 9B07                       	dc.b	nD2, $07
00091889 EC0B                       	smpsPSGAlterVol     $0B
0009188B 8004                       	dc.b	nRst, $04
0009188D ECF5                       	smpsPSGAlterVol     $F5
0009188F 9B06                       	dc.b	nD2, $06
00091891 EC0B                       	smpsPSGAlterVol     $0B
00091893 8007                       	dc.b	nRst, $07
00091895 E105                       	smpsAlterNote       $05
00091897 0101                       	dc.b	$01, $01
00091899 E101                       	smpsAlterNote       $01
0009189B 01                         	dc.b	$01
0009189C E1FB                       	smpsAlterNote       $FB
0009189E 01                         	dc.b	$01
0009189F E1FE                       	smpsAlterNote       $FE
000918A1 ECF5                       	smpsPSGAlterVol     $F5
000918A3 9A06                       	dc.b	nCs2, $06
000918A5 EC04                       	smpsPSGAlterVol     $04
000918A7 E701                       	dc.b	smpsNoAttack, $01
000918A9 EC07                       	smpsPSGAlterVol     $07
000918AB 8003                       	dc.b	nRst, $03
000918AD ECF5                       	smpsPSGAlterVol     $F5
000918AF 9A06                       	dc.b	nCs2, $06
000918B1 EC04                       	smpsPSGAlterVol     $04
000918B3 E701                       	dc.b	smpsNoAttack, $01
000918B5 EC07                       	smpsPSGAlterVol     $07
000918B7 8003                       	dc.b	nRst, $03
000918B9 E1FC                       	smpsAlterNote       $FC
000918BB ECF5                       	smpsPSGAlterVol     $F5
000918BD 8F07                       	dc.b	nD1, $07
000918BF EC0B                       	smpsPSGAlterVol     $0B
000918C1 8006                       	dc.b	nRst, $06
000918C3 E1FF                       	smpsAlterNote       $FF
000918C5 01                         	dc.b	$01
000918C6 E103                       	smpsAlterNote       $03
000918C8 01                         	dc.b	$01
000918C9 E102                       	smpsAlterNote       $02
000918CB 01                         	dc.b	$01
000918CC E1FC                       	smpsAlterNote       $FC
000918CE 01                         	dc.b	$01
000918CF E1F8                       	smpsAlterNote       $F8
000918D1 01                         	dc.b	$01
000918D2 E1FC                       	smpsAlterNote       $FC
000918D4 01                         	dc.b	$01
000918D5 E1FF                       	smpsAlterNote       $FF
000918D7 01                         	dc.b	$01
000918D8 E103                       	smpsAlterNote       $03
000918DA 01                         	dc.b	$01
000918DB E1FC                       	smpsAlterNote       $FC
000918DD ECF5                       	smpsPSGAlterVol     $F5
000918DF 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000918E3 EC04                       	smpsPSGAlterVol     $04
000918E5 E701                       	dc.b	smpsNoAttack, $01
000918E7 EC07                       	smpsPSGAlterVol     $07
000918E9 8009                       	dc.b	nRst, $09
000918EB E1FF                       	smpsAlterNote       $FF
000918ED 01                         	dc.b	$01
000918EE E103                       	smpsAlterNote       $03
000918F0 01                         	dc.b	$01
000918F1 E102                       	smpsAlterNote       $02
000918F3 01                         	dc.b	$01
000918F4 E1FC                       	smpsAlterNote       $FC
000918F6 01                         	dc.b	$01
000918F7 E1F8                       	smpsAlterNote       $F8
000918F9 01                         	dc.b	$01
000918FA E1FC                       	smpsAlterNote       $FC
000918FC 01                         	dc.b	$01
000918FD E1FF                       	smpsAlterNote       $FF
000918FF 01                         	dc.b	$01
00091900 E103                       	smpsAlterNote       $03
00091902 01                         	dc.b	$01
00091903 E1FF                       	smpsAlterNote       $FF
00091905 01                         	dc.b	$01
00091906 E1F9                       	smpsAlterNote       $F9
00091908 01                         	dc.b	$01
00091909 E1F8                       	smpsAlterNote       $F8
0009190B 01                         	dc.b	$01
0009190C E1FC                       	smpsAlterNote       $FC
0009190E 01                         	dc.b	$01
0009190F E102                       	smpsAlterNote       $02
00091911 0101                       	dc.b	$01, $01
00091913 E1FF                       	smpsAlterNote       $FF
00091915 01                         	dc.b	$01
00091916 E1FC                       	smpsAlterNote       $FC
00091918 ECF5                       	smpsPSGAlterVol     $F5
0009191A 8F02                       	dc.b	nD1, $02
0009191C EC04                       	smpsPSGAlterVol     $04
0009191E E701                       	dc.b	smpsNoAttack, $01
00091920 ECFC                       	smpsPSGAlterVol     $FC
00091922 E1FB                       	smpsAlterNote       $FB
00091924 8D06                       	dc.b	nC1, $06
00091926 EC04                       	smpsPSGAlterVol     $04
00091928 E701                       	dc.b	smpsNoAttack, $01
0009192A EC07                       	smpsPSGAlterVol     $07
0009192C 8006                       	dc.b	nRst, $06
0009192E E1FE                       	smpsAlterNote       $FE
00091930 01                         	dc.b	$01
00091931 E102                       	smpsAlterNote       $02
00091933 01                         	dc.b	$01
00091934 E1FE                       	smpsAlterNote       $FE
00091936 01                         	dc.b	$01
00091937 E1FB                       	smpsAlterNote       $FB
00091939 01                         	dc.b	$01
0009193A E1F7                       	smpsAlterNote       $F7
0009193C 01                         	dc.b	$01
0009193D E1FB                       	smpsAlterNote       $FB
0009193F 01                         	dc.b	$01
00091940 E101                       	smpsAlterNote       $01
00091942 01                         	dc.b	$01
00091943 E102                       	smpsAlterNote       $02
00091945 01                         	dc.b	$01
00091946 E1FB                       	smpsAlterNote       $FB
00091948 ECF5                       	smpsPSGAlterVol     $F5
0009194A 8D02                       	dc.b	nC1, $02
0009194C EC04                       	smpsPSGAlterVol     $04
0009194E E701                       	dc.b	smpsNoAttack, $01
00091950 E1FC                       	smpsAlterNote       $FC
00091952 ECFC                       	smpsPSGAlterVol     $FC
00091954 8F0D                       	dc.b	nD1, $0D
00091956 E1FF                       	smpsAlterNote       $FF
00091958 E701                       	dc.b	smpsNoAttack, $01
0009195A E103                       	smpsAlterNote       $03
0009195C E701                       	dc.b	smpsNoAttack, $01
0009195E E1FF                       	smpsAlterNote       $FF
00091960 E701                       	dc.b	smpsNoAttack, $01
00091962 E1FC                       	smpsAlterNote       $FC
00091964 E701                       	dc.b	smpsNoAttack, $01
00091966 E1F8                       	smpsAlterNote       $F8
00091968 E701                       	dc.b	smpsNoAttack, $01
0009196A E1FC                       	smpsAlterNote       $FC
0009196C E701                       	dc.b	smpsNoAttack, $01
0009196E E102                       	smpsAlterNote       $02
00091970 E701                       	dc.b	smpsNoAttack, $01
00091972 E103                       	smpsAlterNote       $03
00091974 E701                       	dc.b	smpsNoAttack, $01
00091976 E1FF                       	smpsAlterNote       $FF
00091978 E701                       	dc.b	smpsNoAttack, $01
0009197A E1F9                       	smpsAlterNote       $F9
0009197C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091980 E1FC                       	smpsAlterNote       $FC
00091982 E701                       	dc.b	smpsNoAttack, $01
00091984 E102                       	smpsAlterNote       $02
00091986 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009198A E1FC                       	smpsAlterNote       $FC
0009198C E701                       	dc.b	smpsNoAttack, $01
0009198E E1F9                       	smpsAlterNote       $F9
00091990 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091994 E1FF                       	smpsAlterNote       $FF
00091996 EC04                       	smpsPSGAlterVol     $04
00091998 E701                       	dc.b	smpsNoAttack, $01
0009199A EC07                       	smpsPSGAlterVol     $07
0009199C E103                       	smpsAlterNote       $03
0009199E 8001                       	dc.b	nRst, $01
000919A0 E102                       	smpsAlterNote       $02
000919A2 01                         	dc.b	$01
000919A3 E1FB                       	smpsAlterNote       $FB
000919A5 01                         	dc.b	$01
000919A6 E1F7                       	smpsAlterNote       $F7
000919A8 01                         	dc.b	$01
000919A9 E1FB                       	smpsAlterNote       $FB
000919AB 01                         	dc.b	$01
000919AC E102                       	smpsAlterNote       $02
000919AE 01                         	dc.b	$01
000919AF E103                       	smpsAlterNote       $03
000919B1 01                         	dc.b	$01
000919B2 E1FB                       	smpsAlterNote       $FB
000919B4 ECF5                       	smpsPSGAlterVol     $F5
000919B6 8E06                       	dc.b	nCs1, $06
000919B8 EC04                       	smpsPSGAlterVol     $04
000919BA E701                       	dc.b	smpsNoAttack, $01
000919BC EC07                       	smpsPSGAlterVol     $07
000919BE 8003                       	dc.b	nRst, $03
000919C0 ECF5                       	smpsPSGAlterVol     $F5
000919C2 8E06                       	dc.b	nCs1, $06
000919C4 EC04                       	smpsPSGAlterVol     $04
000919C6 E701                       	dc.b	smpsNoAttack, $01
000919C8 EC07                       	smpsPSGAlterVol     $07
000919CA 8006                       	dc.b	nRst, $06
000919CC E1FE                       	smpsAlterNote       $FE
000919CE 01                         	dc.b	$01
000919CF E102                       	smpsAlterNote       $02
000919D1 01                         	dc.b	$01
000919D2 E1FE                       	smpsAlterNote       $FE
000919D4 01                         	dc.b	$01
000919D5 E1F9                       	smpsAlterNote       $F9
000919D7 01                         	dc.b	$01
000919D8 E1FC                       	smpsAlterNote       $FC
000919DA ECF5                       	smpsPSGAlterVol     $F5
000919DC 8F06                       	dc.b	nD1, $06
000919DE EC04                       	smpsPSGAlterVol     $04
000919E0 E701                       	dc.b	smpsNoAttack, $01
000919E2 EC07                       	smpsPSGAlterVol     $07
000919E4 8003                       	dc.b	nRst, $03
000919E6 ECF5                       	smpsPSGAlterVol     $F5
000919E8 8F07                       	dc.b	nD1, $07
000919EA EC0B                       	smpsPSGAlterVol     $0B
000919EC 8006                       	dc.b	nRst, $06
000919EE E1FF                       	smpsAlterNote       $FF
000919F0 01                         	dc.b	$01
000919F1 E102                       	smpsAlterNote       $02
000919F3 0101                       	dc.b	$01, $01
000919F5 E1FB                       	smpsAlterNote       $FB
000919F7 01                         	dc.b	$01
000919F8 ECF5                       	smpsPSGAlterVol     $F5
000919FA 8E07                       	dc.b	nCs1, $07
000919FC EC0B                       	smpsPSGAlterVol     $0B
000919FE 8004                       	dc.b	nRst, $04
00091A00 ECF5                       	smpsPSGAlterVol     $F5
00091A02 8E06                       	dc.b	nCs1, $06
00091A04 EC04                       	smpsPSGAlterVol     $04
00091A06 E701                       	dc.b	smpsNoAttack, $01
00091A08 EC07                       	smpsPSGAlterVol     $07
00091A0A 8006                       	dc.b	nRst, $06
00091A0C E101                       	smpsAlterNote       $01
00091A0E 01                         	dc.b	$01
00091A0F E102                       	smpsAlterNote       $02
00091A11 01                         	dc.b	$01
00091A12 E1FE                       	smpsAlterNote       $FE
00091A14 01                         	dc.b	$01
00091A15 E1F8                       	smpsAlterNote       $F8
00091A17 01                         	dc.b	$01
00091A18 E1FB                       	smpsAlterNote       $FB
00091A1A ECF5                       	smpsPSGAlterVol     $F5
00091A1C 8E06                       	dc.b	nCs1, $06
00091A1E EC04                       	smpsPSGAlterVol     $04
00091A20 E701                       	dc.b	smpsNoAttack, $01
00091A22 EC07                       	smpsPSGAlterVol     $07
00091A24 8003                       	dc.b	nRst, $03
00091A26 ECF5                       	smpsPSGAlterVol     $F5
00091A28 8E06                       	dc.b	nCs1, $06
00091A2A EC04                       	smpsPSGAlterVol     $04
00091A2C E701                       	dc.b	smpsNoAttack, $01
00091A2E EC07                       	smpsPSGAlterVol     $07
00091A30 8004                       	dc.b	nRst, $04
00091A32 E1FC                       	smpsAlterNote       $FC
00091A34 ECF5                       	smpsPSGAlterVol     $F5
00091A36 8F06                       	dc.b	nD1, $06
00091A38 EC0B                       	smpsPSGAlterVol     $0B
00091A3A 8006                       	dc.b	nRst, $06
00091A3C E1FF                       	smpsAlterNote       $FF
00091A3E 01                         	dc.b	$01
00091A3F E102                       	smpsAlterNote       $02
00091A41 0101                       	dc.b	$01, $01
00091A43 E1FC                       	smpsAlterNote       $FC
00091A45 01                         	dc.b	$01
00091A46 E1F8                       	smpsAlterNote       $F8
00091A48 01                         	dc.b	$01
00091A49 E1F9                       	smpsAlterNote       $F9
00091A4B 01                         	dc.b	$01
00091A4C E1FF                       	smpsAlterNote       $FF
00091A4E 01                         	dc.b	$01
00091A4F E103                       	smpsAlterNote       $03
00091A51 01                         	dc.b	$01
00091A52 E1FC                       	smpsAlterNote       $FC
00091A54 ECF5                       	smpsPSGAlterVol     $F5
00091A56 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00091A5A EC04                       	smpsPSGAlterVol     $04
00091A5C E701                       	dc.b	smpsNoAttack, $01
00091A5E EC07                       	smpsPSGAlterVol     $07
00091A60 8009                       	dc.b	nRst, $09
00091A62 E1FF                       	smpsAlterNote       $FF
00091A64 01                         	dc.b	$01
00091A65 E102                       	smpsAlterNote       $02
00091A67 0101                       	dc.b	$01, $01
00091A69 E1FC                       	smpsAlterNote       $FC
00091A6B 01                         	dc.b	$01
00091A6C E1F8                       	smpsAlterNote       $F8
00091A6E 01                         	dc.b	$01
00091A6F E1F9                       	smpsAlterNote       $F9
00091A71 01                         	dc.b	$01
00091A72 E1FF                       	smpsAlterNote       $FF
00091A74 01                         	dc.b	$01
00091A75 E103                       	smpsAlterNote       $03
00091A77 01                         	dc.b	$01
00091A78 E1FF                       	smpsAlterNote       $FF
00091A7A 01                         	dc.b	$01
00091A7B E1FC                       	smpsAlterNote       $FC
00091A7D 01                         	dc.b	$01
00091A7E E1F8                       	smpsAlterNote       $F8
00091A80 01                         	dc.b	$01
00091A81 E1FC                       	smpsAlterNote       $FC
00091A83 01                         	dc.b	$01
00091A84 E102                       	smpsAlterNote       $02
00091A86 01                         	dc.b	$01
00091A87 E103                       	smpsAlterNote       $03
00091A89 01                         	dc.b	$01
00091A8A E1FF                       	smpsAlterNote       $FF
00091A8C 01                         	dc.b	$01
00091A8D E1FC                       	smpsAlterNote       $FC
00091A8F ECF5                       	smpsPSGAlterVol     $F5
00091A91 8F03                       	dc.b	nD1, $03
00091A93 E1FB                       	smpsAlterNote       $FB
00091A95 8D06                       	dc.b	nC1, $06
00091A97 EC04                       	smpsPSGAlterVol     $04
00091A99 E701                       	dc.b	smpsNoAttack, $01
00091A9B EC07                       	smpsPSGAlterVol     $07
00091A9D 8006                       	dc.b	nRst, $06
00091A9F E1FE                       	smpsAlterNote       $FE
00091AA1 01                         	dc.b	$01
00091AA2 E102                       	smpsAlterNote       $02
00091AA4 01                         	dc.b	$01
00091AA5 E101                       	smpsAlterNote       $01
00091AA7 01                         	dc.b	$01
00091AA8 E1FB                       	smpsAlterNote       $FB
00091AAA 01                         	dc.b	$01
00091AAB E1F7                       	smpsAlterNote       $F7
00091AAD 01                         	dc.b	$01
00091AAE E1FB                       	smpsAlterNote       $FB
00091AB0 01                         	dc.b	$01
00091AB1 E1FE                       	smpsAlterNote       $FE
00091AB3 01                         	dc.b	$01
00091AB4 E102                       	smpsAlterNote       $02
00091AB6 01                         	dc.b	$01
00091AB7 E1FB                       	smpsAlterNote       $FB
00091AB9 ECF5                       	smpsPSGAlterVol     $F5
00091ABB 8D03                       	dc.b	nC1, $03
00091ABD E1FC                       	smpsAlterNote       $FC
00091ABF 8F0D                       	dc.b	nD1, $0D
00091AC1 E1FF                       	smpsAlterNote       $FF
00091AC3 E701                       	dc.b	smpsNoAttack, $01
00091AC5 E103                       	smpsAlterNote       $03
00091AC7 E701                       	dc.b	smpsNoAttack, $01
00091AC9 E1FF                       	smpsAlterNote       $FF
00091ACB E701                       	dc.b	smpsNoAttack, $01
00091ACD E1FC                       	smpsAlterNote       $FC
00091ACF E701                       	dc.b	smpsNoAttack, $01
00091AD1 E1F8                       	smpsAlterNote       $F8
00091AD3 E701                       	dc.b	smpsNoAttack, $01
00091AD5 E1FC                       	smpsAlterNote       $FC
00091AD7 E701                       	dc.b	smpsNoAttack, $01
00091AD9 E102                       	smpsAlterNote       $02
00091ADB E701                       	dc.b	smpsNoAttack, $01
00091ADD E103                       	smpsAlterNote       $03
00091ADF E701                       	dc.b	smpsNoAttack, $01
00091AE1 E1FF                       	smpsAlterNote       $FF
00091AE3 E701                       	dc.b	smpsNoAttack, $01
00091AE5 E1F9                       	smpsAlterNote       $F9
00091AE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091AEB E1FC                       	smpsAlterNote       $FC
00091AED E701                       	dc.b	smpsNoAttack, $01
00091AEF E102                       	smpsAlterNote       $02
00091AF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091AF5 E1FF                       	smpsAlterNote       $FF
00091AF7 E701                       	dc.b	smpsNoAttack, $01
00091AF9 E1F9                       	smpsAlterNote       $F9
00091AFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091AFF E1FF                       	smpsAlterNote       $FF
00091B01 EC04                       	smpsPSGAlterVol     $04
00091B03 E701                       	dc.b	smpsNoAttack, $01
00091B05 EC07                       	smpsPSGAlterVol     $07
00091B07 E103                       	smpsAlterNote       $03
00091B09 8001                       	dc.b	nRst, $01
00091B0B E102                       	smpsAlterNote       $02
00091B0D 01                         	dc.b	$01
00091B0E E1FB                       	smpsAlterNote       $FB
00091B10 01                         	dc.b	$01
00091B11 E1F7                       	smpsAlterNote       $F7
00091B13 01                         	dc.b	$01
00091B14 E1FB                       	smpsAlterNote       $FB
00091B16 01                         	dc.b	$01
00091B17 E1FF                       	smpsAlterNote       $FF
00091B19 01                         	dc.b	$01
00091B1A E103                       	smpsAlterNote       $03
00091B1C 01                         	dc.b	$01
00091B1D E1FB                       	smpsAlterNote       $FB
00091B1F ECF5                       	smpsPSGAlterVol     $F5
00091B21 8E06                       	dc.b	nCs1, $06
00091B23 EC04                       	smpsPSGAlterVol     $04
00091B25 E701                       	dc.b	smpsNoAttack, $01
00091B27 EC07                       	smpsPSGAlterVol     $07
00091B29 8003                       	dc.b	nRst, $03
00091B2B ECF5                       	smpsPSGAlterVol     $F5
00091B2D 8E06                       	dc.b	nCs1, $06
00091B2F EC04                       	smpsPSGAlterVol     $04
00091B31 E701                       	dc.b	smpsNoAttack, $01
00091B33 EC07                       	smpsPSGAlterVol     $07
00091B35 8006                       	dc.b	nRst, $06
00091B37 E1FE                       	smpsAlterNote       $FE
00091B39 01                         	dc.b	$01
00091B3A E102                       	smpsAlterNote       $02
00091B3C 01                         	dc.b	$01
00091B3D E1FE                       	smpsAlterNote       $FE
00091B3F 01                         	dc.b	$01
00091B40 E1FC                       	smpsAlterNote       $FC
00091B42 01                         	dc.b	$01
00091B43 ECF5                       	smpsPSGAlterVol     $F5
00091B45 8F06                       	dc.b	nD1, $06
00091B47 EC04                       	smpsPSGAlterVol     $04
00091B49 E701                       	dc.b	smpsNoAttack, $01
00091B4B EC07                       	smpsPSGAlterVol     $07
00091B4D 8003                       	dc.b	nRst, $03
00091B4F ECF5                       	smpsPSGAlterVol     $F5
00091B51 8F07                       	dc.b	nD1, $07
00091B53 EC0B                       	smpsPSGAlterVol     $0B
00091B55 8007                       	dc.b	nRst, $07
00091B57 E102                       	smpsAlterNote       $02
00091B59 0101                       	dc.b	$01, $01
00091B5B E1FB                       	smpsAlterNote       $FB
00091B5D 01                         	dc.b	$01
00091B5E E1F8                       	smpsAlterNote       $F8
00091B60 01                         	dc.b	$01
00091B61 E1FB                       	smpsAlterNote       $FB
00091B63 ECF5                       	smpsPSGAlterVol     $F5
00091B65 8E06                       	dc.b	nCs1, $06
00091B67 EC0B                       	smpsPSGAlterVol     $0B
00091B69 8004                       	dc.b	nRst, $04
00091B6B ECF5                       	smpsPSGAlterVol     $F5
00091B6D 8E06                       	dc.b	nCs1, $06
00091B6F EC04                       	smpsPSGAlterVol     $04
00091B71 E701                       	dc.b	smpsNoAttack, $01
00091B73 EC07                       	smpsPSGAlterVol     $07
00091B75 8006                       	dc.b	nRst, $06
00091B77 E1FE                       	smpsAlterNote       $FE
00091B79 01                         	dc.b	$01
00091B7A E102                       	smpsAlterNote       $02
00091B7C 01                         	dc.b	$01
00091B7D E1FE                       	smpsAlterNote       $FE
00091B7F 01                         	dc.b	$01
00091B80 E1F9                       	smpsAlterNote       $F9
00091B82 01                         	dc.b	$01
00091B83 E1FC                       	smpsAlterNote       $FC
00091B85 ECF5                       	smpsPSGAlterVol     $F5
00091B87 8F06                       	dc.b	nD1, $06
00091B89 EC04                       	smpsPSGAlterVol     $04
00091B8B E701                       	dc.b	smpsNoAttack, $01
00091B8D EC07                       	smpsPSGAlterVol     $07
00091B8F 8003                       	dc.b	nRst, $03
00091B91 ECF5                       	smpsPSGAlterVol     $F5
00091B93 8F06                       	dc.b	nD1, $06
00091B95 EC04                       	smpsPSGAlterVol     $04
00091B97 E701                       	dc.b	smpsNoAttack, $01
00091B99 EC07                       	smpsPSGAlterVol     $07
00091B9B 8006                       	dc.b	nRst, $06
00091B9D E1FF                       	smpsAlterNote       $FF
00091B9F 01                         	dc.b	$01
00091BA0 E103                       	smpsAlterNote       $03
00091BA2 01                         	dc.b	$01
00091BA3 E102                       	smpsAlterNote       $02
00091BA5 01                         	dc.b	$01
00091BA6 E1FB                       	smpsAlterNote       $FB
00091BA8 01                         	dc.b	$01
00091BA9 ECF5                       	smpsPSGAlterVol     $F5
00091BAB 8E07                       	dc.b	nCs1, $07
00091BAD EC0B                       	smpsPSGAlterVol     $0B
00091BAF 8004                       	dc.b	nRst, $04
00091BB1 ECF5                       	smpsPSGAlterVol     $F5
00091BB3 8E06                       	dc.b	nCs1, $06
00091BB5 EC0B                       	smpsPSGAlterVol     $0B
00091BB7 8007                       	dc.b	nRst, $07
00091BB9 E101                       	smpsAlterNote       $01
00091BBB 0101                       	dc.b	$01, $01
00091BBD E1FE                       	smpsAlterNote       $FE
00091BBF 01                         	dc.b	$01
00091BC0 E1F9                       	smpsAlterNote       $F9
00091BC2 01                         	dc.b	$01
00091BC3 E1FC                       	smpsAlterNote       $FC
00091BC5 ECF5                       	smpsPSGAlterVol     $F5
00091BC7 8F06                       	dc.b	nD1, $06
00091BC9 EC04                       	smpsPSGAlterVol     $04
00091BCB E701                       	dc.b	smpsNoAttack, $01
00091BCD EC07                       	smpsPSGAlterVol     $07
00091BCF 8003                       	dc.b	nRst, $03
00091BD1 ECF5                       	smpsPSGAlterVol     $F5
00091BD3 8F06                       	dc.b	nD1, $06
00091BD5 EC04                       	smpsPSGAlterVol     $04
00091BD7 E701                       	dc.b	smpsNoAttack, $01
00091BD9 EC07                       	smpsPSGAlterVol     $07
00091BDB 8006                       	dc.b	nRst, $06
00091BDD E1FF                       	smpsAlterNote       $FF
00091BDF 01                         	dc.b	$01
00091BE0 E103                       	smpsAlterNote       $03
00091BE2 01                         	dc.b	$01
00091BE3 E1FF                       	smpsAlterNote       $FF
00091BE5 01                         	dc.b	$01
00091BE6 E1FB                       	smpsAlterNote       $FB
00091BE8 01                         	dc.b	$01
00091BE9 ECF5                       	smpsPSGAlterVol     $F5
00091BEB 8E06                       	dc.b	nCs1, $06
00091BED EC04                       	smpsPSGAlterVol     $04
00091BEF E701                       	dc.b	smpsNoAttack, $01
00091BF1 EC07                       	smpsPSGAlterVol     $07
00091BF3 8003                       	dc.b	nRst, $03
00091BF5 ECF5                       	smpsPSGAlterVol     $F5
00091BF7 8E07                       	dc.b	nCs1, $07
00091BF9 E1FF                       	smpsAlterNote       $FF
00091BFB 9B06                       	dc.b	nD2, $06
00091BFD EC04                       	smpsPSGAlterVol     $04
00091BFF E701                       	dc.b	smpsNoAttack, $01
00091C01 ECFC                       	smpsPSGAlterVol     $FC
00091C03 9B03                       	dc.b	nD2, $03
00091C05 EC04                       	smpsPSGAlterVol     $04
00091C07 E701                       	dc.b	smpsNoAttack, $01
00091C09 ECFC                       	smpsPSGAlterVol     $FC
00091C0B 9B02                       	dc.b	nD2, $02
00091C0D EC04                       	smpsPSGAlterVol     $04
00091C0F E701                       	dc.b	smpsNoAttack, $01
00091C11 ECFC                       	smpsPSGAlterVol     $FC
00091C13 E1FE                       	smpsAlterNote       $FE
00091C15 9A03                       	dc.b	nCs2, $03
00091C17 EC0B                       	smpsPSGAlterVol     $0B
00091C19 800A                       	dc.b	nRst, $0A
00091C1B E102                       	smpsAlterNote       $02
00091C1D 01                         	dc.b	$01
00091C1E E10A                       	smpsAlterNote       $0A
00091C20 01                         	dc.b	$01
00091C21 E102                       	smpsAlterNote       $02
00091C23 01                         	dc.b	$01
00091C24 E1F7                       	smpsAlterNote       $F7
00091C26 01                         	dc.b	$01
00091C27 E10A                       	smpsAlterNote       $0A
00091C29 01                         	dc.b	$01
00091C2A E1FC                       	smpsAlterNote       $FC
00091C2C 01                         	dc.b	$01
00091C2D E108                       	smpsAlterNote       $08
00091C2F 0101                       	dc.b	$01, $01
00091C31 E102                       	smpsAlterNote       $02
00091C33 01                         	dc.b	$01
00091C34 E1F7                       	smpsAlterNote       $F7
00091C36 0101                       	dc.b	$01, $01
00091C38 E1FC                       	smpsAlterNote       $FC
00091C3A ECF5                       	smpsPSGAlterVol     $F5
00091C3C 8F06                       	dc.b	nD1, $06
00091C3E EC04                       	smpsPSGAlterVol     $04
00091C40 E701                       	dc.b	smpsNoAttack, $01
00091C42 EC07                       	smpsPSGAlterVol     $07
00091C44 8003                       	dc.b	nRst, $03
00091C46 ECF5                       	smpsPSGAlterVol     $F5
00091C48 8F06                       	dc.b	nD1, $06
00091C4A EC04                       	smpsPSGAlterVol     $04
00091C4C E701                       	dc.b	smpsNoAttack, $01
00091C4E EC07                       	smpsPSGAlterVol     $07
00091C50 8006                       	dc.b	nRst, $06
00091C52 E1FF                       	smpsAlterNote       $FF
00091C54 01                         	dc.b	$01
00091C55 E102                       	smpsAlterNote       $02
00091C57 01                         	dc.b	$01
00091C58 E101                       	smpsAlterNote       $01
00091C5A 01                         	dc.b	$01
00091C5B E1FC                       	smpsAlterNote       $FC
00091C5D 01                         	dc.b	$01
00091C5E ECF5                       	smpsPSGAlterVol     $F5
00091C60 9007                       	dc.b	nEb1, $07
00091C62 EC0B                       	smpsPSGAlterVol     $0B
00091C64 8004                       	dc.b	nRst, $04
00091C66 ECF5                       	smpsPSGAlterVol     $F5
00091C68 9006                       	dc.b	nEb1, $06
00091C6A EC0B                       	smpsPSGAlterVol     $0B
00091C6C 8007                       	dc.b	nRst, $07
00091C6E E103                       	smpsAlterNote       $03
00091C70 0101                       	dc.b	$01, $01
00091C72 E1FF                       	smpsAlterNote       $FF
00091C74 01                         	dc.b	$01
00091C75 E1F9                       	smpsAlterNote       $F9
00091C77 01                         	dc.b	$01
00091C78 E1FC                       	smpsAlterNote       $FC
00091C7A ECF5                       	smpsPSGAlterVol     $F5
00091C7C 8F06                       	dc.b	nD1, $06
00091C7E EC04                       	smpsPSGAlterVol     $04
00091C80 E701                       	dc.b	smpsNoAttack, $01
00091C82 EC07                       	smpsPSGAlterVol     $07
00091C84 8003                       	dc.b	nRst, $03
00091C86 ECF5                       	smpsPSGAlterVol     $F5
00091C88 8F06                       	dc.b	nD1, $06
00091C8A EC04                       	smpsPSGAlterVol     $04
00091C8C E701                       	dc.b	smpsNoAttack, $01
00091C8E EC07                       	smpsPSGAlterVol     $07
00091C90 8006                       	dc.b	nRst, $06
00091C92 E1FF                       	smpsAlterNote       $FF
00091C94 01                         	dc.b	$01
00091C95 E103                       	smpsAlterNote       $03
00091C97 01                         	dc.b	$01
00091C98 E1FF                       	smpsAlterNote       $FF
00091C9A 01                         	dc.b	$01
00091C9B E1F9                       	smpsAlterNote       $F9
00091C9D 01                         	dc.b	$01
00091C9E E1FC                       	smpsAlterNote       $FC
00091CA0 ECF5                       	smpsPSGAlterVol     $F5
00091CA2 8F06                       	dc.b	nD1, $06
00091CA4 EC04                       	smpsPSGAlterVol     $04
00091CA6 E701                       	dc.b	smpsNoAttack, $01
00091CA8 EC07                       	smpsPSGAlterVol     $07
00091CAA 8003                       	dc.b	nRst, $03
00091CAC ECF5                       	smpsPSGAlterVol     $F5
00091CAE 8F07                       	dc.b	nD1, $07
00091CB0 EC0B                       	smpsPSGAlterVol     $0B
00091CB2 8006                       	dc.b	nRst, $06
00091CB4 E1FF                       	smpsAlterNote       $FF
00091CB6 01                         	dc.b	$01
00091CB7 E102                       	smpsAlterNote       $02
00091CB9 0101                       	dc.b	$01, $01
00091CBB E1FC                       	smpsAlterNote       $FC
00091CBD 01                         	dc.b	$01
00091CBE ECF5                       	smpsPSGAlterVol     $F5
00091CC0 8F07                       	dc.b	nD1, $07
00091CC2 EC0B                       	smpsPSGAlterVol     $0B
00091CC4 8004                       	dc.b	nRst, $04
00091CC6 ECF5                       	smpsPSGAlterVol     $F5
00091CC8 8F06                       	dc.b	nD1, $06
00091CCA EC04                       	smpsPSGAlterVol     $04
00091CCC E701                       	dc.b	smpsNoAttack, $01
00091CCE EC07                       	smpsPSGAlterVol     $07
00091CD0 8006                       	dc.b	nRst, $06
00091CD2 E101                       	smpsAlterNote       $01
00091CD4 01                         	dc.b	$01
00091CD5 E102                       	smpsAlterNote       $02
00091CD7 01                         	dc.b	$01
00091CD8 E1FF                       	smpsAlterNote       $FF
00091CDA 01                         	dc.b	$01
00091CDB E1F9                       	smpsAlterNote       $F9
00091CDD 01                         	dc.b	$01
00091CDE E1FC                       	smpsAlterNote       $FC
00091CE0 ECF5                       	smpsPSGAlterVol     $F5
00091CE2 9006                       	dc.b	nEb1, $06
00091CE4 EC04                       	smpsPSGAlterVol     $04
00091CE6 E701                       	dc.b	smpsNoAttack, $01
00091CE8 EC07                       	smpsPSGAlterVol     $07
00091CEA 8003                       	dc.b	nRst, $03
00091CEC ECF5                       	smpsPSGAlterVol     $F5
00091CEE 9006                       	dc.b	nEb1, $06
00091CF0 EC04                       	smpsPSGAlterVol     $04
00091CF2 E701                       	dc.b	smpsNoAttack, $01
00091CF4 EC07                       	smpsPSGAlterVol     $07
00091CF6 8006                       	dc.b	nRst, $06
00091CF8 E100                       	smpsAlterNote       $00
00091CFA 01                         	dc.b	$01
00091CFB E102                       	smpsAlterNote       $02
00091CFD 01                         	dc.b	$01
00091CFE E100                       	smpsAlterNote       $00
00091D00 01                         	dc.b	$01
00091D01 E1FF                       	smpsAlterNote       $FF
00091D03 01                         	dc.b	$01
00091D04 ECF5                       	smpsPSGAlterVol     $F5
00091D06 9B06                       	dc.b	nD2, $06
00091D08 EC04                       	smpsPSGAlterVol     $04
00091D0A E701                       	dc.b	smpsNoAttack, $01
00091D0C EC07                       	smpsPSGAlterVol     $07
00091D0E 8003                       	dc.b	nRst, $03
00091D10 ECF5                       	smpsPSGAlterVol     $F5
00091D12 9B07                       	dc.b	nD2, $07
00091D14 EC0B                       	smpsPSGAlterVol     $0B
00091D16 8007                       	dc.b	nRst, $07
00091D18 E105                       	smpsAlterNote       $05
00091D1A 0101                       	dc.b	$01, $01
00091D1C E1FF                       	smpsAlterNote       $FF
00091D1E 01                         	dc.b	$01
00091D1F E1FC                       	smpsAlterNote       $FC
00091D21 01                         	dc.b	$01
00091D22 E1FF                       	smpsAlterNote       $FF
00091D24 ECF5                       	smpsPSGAlterVol     $F5
00091D26 9B06                       	dc.b	nD2, $06
00091D28 EC0B                       	smpsPSGAlterVol     $0B
00091D2A 8004                       	dc.b	nRst, $04
00091D2C ECF5                       	smpsPSGAlterVol     $F5
00091D2E 9B06                       	dc.b	nD2, $06
00091D30 EC04                       	smpsPSGAlterVol     $04
00091D32 E701                       	dc.b	smpsNoAttack, $01
00091D34 EC07                       	smpsPSGAlterVol     $07
00091D36 8006                       	dc.b	nRst, $06
00091D38 E102                       	smpsAlterNote       $02
00091D3A 01                         	dc.b	$01
00091D3B E106                       	smpsAlterNote       $06
00091D3D 01                         	dc.b	$01
00091D3E E102                       	smpsAlterNote       $02
00091D40 01                         	dc.b	$01
00091D41 E1FC                       	smpsAlterNote       $FC
00091D43 01                         	dc.b	$01
00091D44 E1FF                       	smpsAlterNote       $FF
00091D46 ECF5                       	smpsPSGAlterVol     $F5
00091D48 9B06                       	dc.b	nD2, $06
00091D4A EC04                       	smpsPSGAlterVol     $04
00091D4C E701                       	dc.b	smpsNoAttack, $01
00091D4E EC07                       	smpsPSGAlterVol     $07
00091D50 8003                       	dc.b	nRst, $03
00091D52 ECF5                       	smpsPSGAlterVol     $F5
00091D54 9B07                       	dc.b	nD2, $07
00091D56 EC0B                       	smpsPSGAlterVol     $0B
00091D58 8006                       	dc.b	nRst, $06
00091D5A E102                       	smpsAlterNote       $02
00091D5C 01                         	dc.b	$01
00091D5D E105                       	smpsAlterNote       $05
00091D5F 0101                       	dc.b	$01, $01
00091D61 E1FF                       	smpsAlterNote       $FF
00091D63 01                         	dc.b	$01
00091D64 ECF5                       	smpsPSGAlterVol     $F5
00091D66 9B07                       	dc.b	nD2, $07
00091D68 EC0B                       	smpsPSGAlterVol     $0B
00091D6A 8004                       	dc.b	nRst, $04
00091D6C ECF5                       	smpsPSGAlterVol     $F5
00091D6E 9B06                       	dc.b	nD2, $06
00091D70 EC04                       	smpsPSGAlterVol     $04
00091D72 E701                       	dc.b	smpsNoAttack, $01
00091D74 EC07                       	smpsPSGAlterVol     $07
00091D76 8006                       	dc.b	nRst, $06
00091D78 E105                       	smpsAlterNote       $05
00091D7A 0101                       	dc.b	$01, $01
00091D7C E102                       	smpsAlterNote       $02
00091D7E 01                         	dc.b	$01
00091D7F E1FC                       	smpsAlterNote       $FC
00091D81 01                         	dc.b	$01
00091D82 E1FF                       	smpsAlterNote       $FF
00091D84 ECF5                       	smpsPSGAlterVol     $F5
00091D86 9B06                       	dc.b	nD2, $06
00091D88 EC04                       	smpsPSGAlterVol     $04
00091D8A E701                       	dc.b	smpsNoAttack, $01
00091D8C EC07                       	smpsPSGAlterVol     $07
00091D8E 8003                       	dc.b	nRst, $03
00091D90 ECF5                       	smpsPSGAlterVol     $F5
00091D92 9B06                       	dc.b	nD2, $06
00091D94 EC04                       	smpsPSGAlterVol     $04
00091D96 E701                       	dc.b	smpsNoAttack, $01
00091D98 EC07                       	smpsPSGAlterVol     $07
00091D9A 8006                       	dc.b	nRst, $06
00091D9C E102                       	smpsAlterNote       $02
00091D9E 01                         	dc.b	$01
00091D9F E106                       	smpsAlterNote       $06
00091DA1 01                         	dc.b	$01
00091DA2 E102                       	smpsAlterNote       $02
00091DA4 01                         	dc.b	$01
00091DA5 E1FF                       	smpsAlterNote       $FF
00091DA7 01                         	dc.b	$01
00091DA8 ECF5                       	smpsPSGAlterVol     $F5
00091DAA 9B06                       	dc.b	nD2, $06
00091DAC EC04                       	smpsPSGAlterVol     $04
00091DAE E701                       	dc.b	smpsNoAttack, $01
00091DB0 EC07                       	smpsPSGAlterVol     $07
00091DB2 8003                       	dc.b	nRst, $03
00091DB4 ECF5                       	smpsPSGAlterVol     $F5
00091DB6 9B07                       	dc.b	nD2, $07
00091DB8 EC0B                       	smpsPSGAlterVol     $0B
00091DBA 8007                       	dc.b	nRst, $07
00091DBC E107                       	smpsAlterNote       $07
00091DBE 0101                       	dc.b	$01, $01
00091DC0 E1FE                       	smpsAlterNote       $FE
00091DC2 01                         	dc.b	$01
00091DC3 E1FA                       	smpsAlterNote       $FA
00091DC5 0101                       	dc.b	$01, $01
00091DC7 E103                       	smpsAlterNote       $03
00091DC9 01                         	dc.b	$01
00091DCA E109                       	smpsAlterNote       $09
00091DCC 01                         	dc.b	$01
00091DCD E107                       	smpsAlterNote       $07
00091DCF 01                         	dc.b	$01
00091DD0 E1FE                       	smpsAlterNote       $FE
00091DD2 01                         	dc.b	$01
00091DD3 E108                       	smpsAlterNote       $08
00091DD5 01                         	dc.b	$01
00091DD6 E1FD                       	smpsAlterNote       $FD
00091DD8 ECF5                       	smpsPSGAlterVol     $F5
00091DDA 940E                       	dc.b	nG1, $0E
00091DDC E103                       	smpsAlterNote       $03
00091DDE EC0B                       	smpsPSGAlterVol     $0B
00091DE0 8001 01                    	dc.b	nRst, $01, $01
00091DE3 E1FD                       	smpsAlterNote       $FD
00091DE5 01                         	dc.b	$01
00091DE6 E1FB                       	smpsAlterNote       $FB
00091DE8 0101                       	dc.b	$01, $01
00091DEA E100                       	smpsAlterNote       $00
00091DEC 01                         	dc.b	$01
00091DED E103                       	smpsAlterNote       $03
00091DEF 01                         	dc.b	$01
00091DF0 E100                       	smpsAlterNote       $00
00091DF2 01                         	dc.b	$01
00091DF3 E1FD                       	smpsAlterNote       $FD
00091DF5 01                         	dc.b	$01
00091DF6 E1FA                       	smpsAlterNote       $FA
00091DF8 01                         	dc.b	$01
00091DF9 E1FD                       	smpsAlterNote       $FD
00091DFB 01                         	dc.b	$01
00091DFC E103                       	smpsAlterNote       $03
00091DFE 0101                       	dc.b	$01, $01
00091E00 E100                       	smpsAlterNote       $00
00091E02 01                         	dc.b	$01
00091E03 E1FE                       	smpsAlterNote       $FE
00091E05 ECF5                       	smpsPSGAlterVol     $F5
00091E07 960D                       	dc.b	nA1, $0D
00091E09 E104                       	smpsAlterNote       $04
00091E0B EC0B                       	smpsPSGAlterVol     $0B
00091E0D 8001 01                    	dc.b	nRst, $01, $01
00091E10 E101                       	smpsAlterNote       $01
00091E12 01                         	dc.b	$01
00091E13 E1FB                       	smpsAlterNote       $FB
00091E15 0101                       	dc.b	$01, $01
00091E17 E1FE                       	smpsAlterNote       $FE
00091E19 01                         	dc.b	$01
00091E1A E104                       	smpsAlterNote       $04
00091E1C 0101                       	dc.b	$01, $01
00091E1E E1FE                       	smpsAlterNote       $FE
00091E20 01                         	dc.b	$01
00091E21 E1FB                       	smpsAlterNote       $FB
00091E23 0101                       	dc.b	$01, $01
00091E25 E101                       	smpsAlterNote       $01
00091E27 01                         	dc.b	$01
00091E28 E104                       	smpsAlterNote       $04
00091E2A 0101                       	dc.b	$01, $01
00091E2C E1FE                       	smpsAlterNote       $FE
00091E2E ECF5                       	smpsPSGAlterVol     $F5
00091E30 970D                       	dc.b	nBb1, $0D
00091E32 E101                       	smpsAlterNote       $01
00091E34 EC04                       	smpsPSGAlterVol     $04
00091E36 E701                       	dc.b	smpsNoAttack, $01
00091E38 EC07                       	smpsPSGAlterVol     $07
00091E3A E104                       	smpsAlterNote       $04
00091E3C 8001                       	dc.b	nRst, $01
00091E3E E103                       	smpsAlterNote       $03
00091E40 01                         	dc.b	$01
00091E41 E1FE                       	smpsAlterNote       $FE
00091E43 01                         	dc.b	$01
00091E44 E1FA                       	smpsAlterNote       $FA
00091E46 01                         	dc.b	$01
00091E47 E1FE                       	smpsAlterNote       $FE
00091E49 01                         	dc.b	$01
00091E4A E101                       	smpsAlterNote       $01
00091E4C 01                         	dc.b	$01
00091E4D E104                       	smpsAlterNote       $04
00091E4F 01                         	dc.b	$01
00091E50 E101                       	smpsAlterNote       $01
00091E52 01                         	dc.b	$01
00091E53 E1FB                       	smpsAlterNote       $FB
00091E55 01                         	dc.b	$01
00091E56 E1FA                       	smpsAlterNote       $FA
00091E58 01                         	dc.b	$01
00091E59 E1FE                       	smpsAlterNote       $FE
00091E5B 01                         	dc.b	$01
00091E5C E103                       	smpsAlterNote       $03
00091E5E 0101                       	dc.b	$01, $01
00091E60 E101                       	smpsAlterNote       $01
00091E62 01                         	dc.b	$01
00091E63 E1FE                       	smpsAlterNote       $FE
00091E65 ECF5                       	smpsPSGAlterVol     $F5
00091E67 990D                       	dc.b	nC2, $0D
00091E69 E104                       	smpsAlterNote       $04
00091E6B EC0B                       	smpsPSGAlterVol     $0B
00091E6D 8001 01                    	dc.b	nRst, $01, $01
00091E70 E102                       	smpsAlterNote       $02
00091E72 01                         	dc.b	$01
00091E73 E1FC                       	smpsAlterNote       $FC
00091E75 0101                       	dc.b	$01, $01
00091E77 E102                       	smpsAlterNote       $02
00091E79 01                         	dc.b	$01
00091E7A E104                       	smpsAlterNote       $04
00091E7C 01                         	dc.b	$01
00091E7D E1FF                       	smpsAlterNote       $FF
00091E7F ECF5                       	smpsPSGAlterVol     $F5
00091E81 9B06                       	dc.b	nD2, $06
00091E83 EC04                       	smpsPSGAlterVol     $04
00091E85 E701                       	dc.b	smpsNoAttack, $01
00091E87 EC07                       	smpsPSGAlterVol     $07
00091E89 8003                       	dc.b	nRst, $03
00091E8B ECF5                       	smpsPSGAlterVol     $F5
00091E8D 9B07                       	dc.b	nD2, $07
00091E8F EC0B                       	smpsPSGAlterVol     $0B
00091E91 8006                       	dc.b	nRst, $06
00091E93 E101                       	smpsAlterNote       $01
00091E95 01                         	dc.b	$01
00091E96 E104                       	smpsAlterNote       $04
00091E98 0101                       	dc.b	$01, $01
00091E9A E1FE                       	smpsAlterNote       $FE
00091E9C 01                         	dc.b	$01
00091E9D E1FC                       	smpsAlterNote       $FC
00091E9F 01                         	dc.b	$01
00091EA0 E1FE                       	smpsAlterNote       $FE
00091EA2 ECF5                       	smpsPSGAlterVol     $F5
00091EA4 9C06                       	dc.b	nEb2, $06
00091EA6 EC0B                       	smpsPSGAlterVol     $0B
00091EA8 8004                       	dc.b	nRst, $04
00091EAA ECF5                       	smpsPSGAlterVol     $F5
00091EAC 9C06                       	dc.b	nEb2, $06
00091EAE EC04                       	smpsPSGAlterVol     $04
00091EB0 E701                       	dc.b	smpsNoAttack, $01
00091EB2 EC07                       	smpsPSGAlterVol     $07
00091EB4 8006                       	dc.b	nRst, $06
00091EB6 E105                       	smpsAlterNote       $05
00091EB8 01                         	dc.b	$01
00091EB9 E106                       	smpsAlterNote       $06
00091EBB 01                         	dc.b	$01
00091EBC E102                       	smpsAlterNote       $02
00091EBE 01                         	dc.b	$01
00091EBF E1FB                       	smpsAlterNote       $FB
00091EC1 01                         	dc.b	$01
00091EC2 E1FF                       	smpsAlterNote       $FF
00091EC4 ECF5                       	smpsPSGAlterVol     $F5
00091EC6 9B06                       	dc.b	nD2, $06
00091EC8 EC04                       	smpsPSGAlterVol     $04
00091ECA E701                       	dc.b	smpsNoAttack, $01
00091ECC EC07                       	smpsPSGAlterVol     $07
00091ECE 8003                       	dc.b	nRst, $03
00091ED0 ECF5                       	smpsPSGAlterVol     $F5
00091ED2 9B06                       	dc.b	nD2, $06
00091ED4 EC04                       	smpsPSGAlterVol     $04
00091ED6 E701                       	dc.b	smpsNoAttack, $01
00091ED8 EC07                       	smpsPSGAlterVol     $07
00091EDA 8006                       	dc.b	nRst, $06
00091EDC E101                       	smpsAlterNote       $01
00091EDE 01                         	dc.b	$01
00091EDF E105                       	smpsAlterNote       $05
00091EE1 01                         	dc.b	$01
00091EE2 E104                       	smpsAlterNote       $04
00091EE4 01                         	dc.b	$01
00091EE5 E1FE                       	smpsAlterNote       $FE
00091EE7 01                         	dc.b	$01
00091EE8 ECF5                       	smpsPSGAlterVol     $F5
00091EEA 9C07                       	dc.b	nEb2, $07
00091EEC EC0B                       	smpsPSGAlterVol     $0B
00091EEE 8004                       	dc.b	nRst, $04
00091EF0 ECF5                       	smpsPSGAlterVol     $F5
00091EF2 9C06                       	dc.b	nEb2, $06
00091EF4 EC0B                       	smpsPSGAlterVol     $0B
00091EF6 8007                       	dc.b	nRst, $07
00091EF8 E105                       	smpsAlterNote       $05
00091EFA 0101                       	dc.b	$01, $01
00091EFC E102                       	smpsAlterNote       $02
00091EFE 01                         	dc.b	$01
00091EFF E1FB                       	smpsAlterNote       $FB
00091F01 01                         	dc.b	$01
00091F02 E1FF                       	smpsAlterNote       $FF
00091F04 ECF5                       	smpsPSGAlterVol     $F5
00091F06 9B06                       	dc.b	nD2, $06
00091F08 EC04                       	smpsPSGAlterVol     $04
00091F0A E701                       	dc.b	smpsNoAttack, $01
00091F0C EC07                       	smpsPSGAlterVol     $07
00091F0E 8003                       	dc.b	nRst, $03
00091F10 ECF5                       	smpsPSGAlterVol     $F5
00091F12 9B06                       	dc.b	nD2, $06
00091F14 EC04                       	smpsPSGAlterVol     $04
00091F16 E701                       	dc.b	smpsNoAttack, $01
00091F18 EC07                       	smpsPSGAlterVol     $07
00091F1A 8006                       	dc.b	nRst, $06
00091F1C E101                       	smpsAlterNote       $01
00091F1E 01                         	dc.b	$01
00091F1F E105                       	smpsAlterNote       $05
00091F21 01                         	dc.b	$01
00091F22 E101                       	smpsAlterNote       $01
00091F24 01                         	dc.b	$01
00091F25 E1FC                       	smpsAlterNote       $FC
00091F27 01                         	dc.b	$01
00091F28 E1FE                       	smpsAlterNote       $FE
00091F2A ECF5                       	smpsPSGAlterVol     $F5
00091F2C 9C06                       	dc.b	nEb2, $06
00091F2E EC04                       	smpsPSGAlterVol     $04
00091F30 E701                       	dc.b	smpsNoAttack, $01
00091F32 EC07                       	smpsPSGAlterVol     $07
00091F34 8003                       	dc.b	nRst, $03
00091F36 ECF5                       	smpsPSGAlterVol     $F5
00091F38 9C07                       	dc.b	nEb2, $07
00091F3A EC0B                       	smpsPSGAlterVol     $0B
00091F3C 8006                       	dc.b	nRst, $06
00091F3E E102                       	smpsAlterNote       $02
00091F40 01                         	dc.b	$01
00091F41 E105                       	smpsAlterNote       $05
00091F43 0101                       	dc.b	$01, $01
00091F45 E1FF                       	smpsAlterNote       $FF
00091F47 01                         	dc.b	$01
00091F48 ECF5                       	smpsPSGAlterVol     $F5
00091F4A 9B07                       	dc.b	nD2, $07
00091F4C EC0B                       	smpsPSGAlterVol     $0B
00091F4E 8004                       	dc.b	nRst, $04
00091F50 ECF5                       	smpsPSGAlterVol     $F5
00091F52 9B06                       	dc.b	nD2, $06
00091F54 EC04                       	smpsPSGAlterVol     $04
00091F56 E701                       	dc.b	smpsNoAttack, $01
00091F58 EC07                       	smpsPSGAlterVol     $07
00091F5A 8002                       	dc.b	nRst, $02
00091F5C E1FC                       	smpsAlterNote       $FC
00091F5E ECF5                       	smpsPSGAlterVol     $F5
00091F60 9006                       	dc.b	nEb1, $06
00091F62 EC04                       	smpsPSGAlterVol     $04
00091F64 E701                       	dc.b	smpsNoAttack, $01
00091F66 ECFC                       	smpsPSGAlterVol     $FC
00091F68 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00091F6C EC04                       	smpsPSGAlterVol     $04
00091F6E E701                       	dc.b	smpsNoAttack, $01
00091F70 E1FD                       	smpsAlterNote       $FD
00091F72 ECFC                       	smpsPSGAlterVol     $FC
00091F74 9402                       	dc.b	nG1, $02
00091F76 EC04                       	smpsPSGAlterVol     $04
00091F78 E701                       	dc.b	smpsNoAttack, $01
00091F7A E1FE                       	smpsAlterNote       $FE
00091F7C ECFC                       	smpsPSGAlterVol     $FC
00091F7E 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00091F82 EC04                       	smpsPSGAlterVol     $04
00091F84 E701                       	dc.b	smpsNoAttack, $01
00091F86 EC07                       	smpsPSGAlterVol     $07
00091F88 8008                       	dc.b	nRst, $08
00091F8A F6F4 F3                    	smpsJump            music84_Jump06
00091F8D                            
00091F8D                            ; PSG3 Data
00091F8D                            music84_PSG3:
00091F8D F500                       	smpsPSGvoice        $00
00091F8F E1FF                       	smpsAlterNote       $FF
00091F91 EC0F                       	smpsPSGAlterVol     $0F
00091F93 803A                       	dc.b	nRst, $3A
00091F95                            
00091F95                            music84_Jump05:
00091F95 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00091FA1 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00091FAB F6FF E8                    	smpsJump            music84_Jump05
00091FAE                            
00091FAE                            ; DAC Data
00091FAE                            music84_DAC:
00091FAE E0C0                       	smpsPan             panCenter, $00
00091FB0 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00091FBC 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00091FC8 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00091FD4 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00091FE0 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00091FEC 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00091FF8 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00092004 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00092010 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0009201C 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00092028 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00092034 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00092040 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0009204C 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00092058 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00092064 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00092070 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0009207C 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00092088 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00092094 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000920A0 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000920AC 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000920B8 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
000920C4 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
000920D0 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
000920DC 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
000920E8 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
000920F4 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00092100 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0009210C 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00092118 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00092124 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00092130 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0009213C 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00092148 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00092154 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00092160 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0009216C 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00092178 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00092184 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00092190 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0009219C 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
000921A8 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000921B4 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000921C0 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
000921CC 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000921D8 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
000921E4 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
000921F0 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
000921FC 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00092208 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00092214 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00092220 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0009222C 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00092238 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00092244 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00092250 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0009225C 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00092268 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00092274 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00092280 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0009228C 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00092298 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
000922A4 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
000922B0 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
000922BC 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
000922C8 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
000922D4 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
000922E0 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
000922EC 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
000922F8 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00092304 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00092310 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0009231C 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00092328 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00092334 E0C0                       	smpsPan             panCenter, $00
00092336 F2                         	smpsStop
00092337                            
00092337                            music84_Voices:
00092337                            ;	Voice $00
00092337                            ;	$3D
00092337                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00092337                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00092337                            	smpsVcAlgorithm     $05
00092337                            	smpsVcFeedback      $07
00092337                            	smpsVcUnusedBits    $00
00092337                            	smpsVcDetune        $05, $04, $03, $04
00092337                            	smpsVcCoarseFreq    $01, $01, $01, $01
00092337                            	smpsVcRateScale     $00, $00, $00, $00
00092337                            	smpsVcAttackRate    $11, $11, $11, $11
00092337                            	smpsVcAmpMod        $00, $00, $00, $00
00092337                            	smpsVcDecayRate1    $00, $00, $00, $0A
00092337                            	smpsVcDecayRate2    $00, $00, $00, $0B
00092337                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00092337                            	smpsVcReleaseRate   $08, $08, $08, $07
00092337 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00092350                            
00092350                            ;	Voice $01
00092350                            ;	$04
00092350                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00092350                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00092350                            	smpsVcAlgorithm     $04
00092350                            	smpsVcFeedback      $00
00092350                            	smpsVcUnusedBits    $00
00092350                            	smpsVcDetune        $04, $03, $04, $05
00092350                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00092350                            	smpsVcRateScale     $00, $01, $00, $01
00092350                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00092350                            	smpsVcAmpMod        $00, $00, $00, $00
00092350                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00092350                            	smpsVcDecayRate2    $05, $00, $05, $00
00092350                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00092350                            	smpsVcReleaseRate   $06, $06, $06, $06
00092350 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00092369                            
00092369                            ;	Voice $02
00092369                            ;	$30
00092369                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00092369                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00092369                            	smpsVcAlgorithm     $00
00092369                            	smpsVcFeedback      $06
00092369                            	smpsVcUnusedBits    $00
00092369                            	smpsVcDetune        $04, $02, $00, $06
00092369                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00092369                            	smpsVcRateScale     $00, $00, $00, $00
00092369                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00092369                            	smpsVcAmpMod        $00, $00, $00, $00
00092369                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00092369                            	smpsVcDecayRate2    $01, $01, $01, $01
00092369                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00092369                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00092369 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
00092382                            
00092382                            ;	Voice $03
00092382                            ;	$3A
00092382                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
00092382                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
00092382                            	smpsVcAlgorithm     $02
00092382                            	smpsVcFeedback      $07
00092382                            	smpsVcUnusedBits    $00
00092382                            	smpsVcDetune        $04, $06, $02, $00
00092382                            	smpsVcCoarseFreq    $01, $01, $01, $01
00092382                            	smpsVcRateScale     $00, $00, $00, $00
00092382                            	smpsVcAttackRate    $18, $19, $14, $14
00092382                            	smpsVcAmpMod        $00, $00, $00, $00
00092382                            	smpsVcDecayRate1    $09, $0D, $09, $09
00092382                            	smpsVcDecayRate2    $00, $00, $00, $00
00092382                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
00092382                            	smpsVcReleaseRate   $08, $0F, $0F, $07
00092382 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0009239B                            
0009239B                            ;	Voice $04
0009239B                            ;	$3C
0009239B                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0009239B                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0009239B                            	smpsVcAlgorithm     $04
0009239B                            	smpsVcFeedback      $07
0009239B                            	smpsVcUnusedBits    $00
0009239B                            	smpsVcDetune        $07, $00, $00, $03
0009239B                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0009239B                            	smpsVcRateScale     $00, $00, $00, $00
0009239B                            	smpsVcAttackRate    $10, $1F, $10, $1F
0009239B                            	smpsVcAmpMod        $00, $00, $00, $00
0009239B                            	smpsVcDecayRate1    $00, $00, $00, $00
0009239B                            	smpsVcDecayRate2    $00, $00, $00, $00
0009239B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009239B                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0009239B 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
000923B4                            
000923B4                            ;	Voice $05
000923B4                            ;	$38
000923B4                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
000923B4                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
000923B4                            	smpsVcAlgorithm     $00
000923B4                            	smpsVcFeedback      $07
000923B4                            	smpsVcUnusedBits    $00
000923B4                            	smpsVcDetune        $04, $06, $02, $00
000923B4                            	smpsVcCoarseFreq    $01, $01, $01, $00
000923B4                            	smpsVcRateScale     $00, $00, $00, $00
000923B4                            	smpsVcAttackRate    $1F, $1F, $1F, $10
000923B4                            	smpsVcAmpMod        $00, $00, $00, $00
000923B4                            	smpsVcDecayRate1    $00, $03, $00, $17
000923B4                            	smpsVcDecayRate2    $00, $08, $08, $0B
000923B4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
000923B4                            	smpsVcReleaseRate   $08, $05, $05, $05
000923B4 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
000923CD                            
000923CD                            
000923CE 00                         		even
000923CE                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
000965DE                            		even
000965DE                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
0009A136 00                         		even
0009A136                            Music87:	include	sound\music87.asm; Invincibility
0009A136                            triple_Header:
0009A136 =00000001                  smpsHeaderStartSong = 1
0009A136 0000                       	smpsHeaderVoice     triple_Voices
0009A138 0501                       	smpsHeaderChan      $05, $01
0009A13A 0200                       	smpsHeaderTempo     $02, $00
0009A13C                            
0009A140 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
0009A144 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
0009A148 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
0009A14C 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
0009A150 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
0009A156                            
0009A156                            ; DAC Data
0009A156                            triple_DAC:
0009A156 E0C0                       	smpsPan             panCenter, $00
0009A158 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
0009A15E                            
0009A15E                            triple_Loop01:
0009A15E 8282 82                    	dc.b	dSnare, dSnare, dSnare
0009A161                            
0009A161                            triple_Loop00:
0009A161 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
0009A16D 06                         	dc.b	$06
0009A16E F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
0009A173 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
0009A17F 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
0009A186 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
0009A18B 0303 1B                    	dc.b	$03, $03, $1B
0009A18E E0C0                       	smpsPan             panCenter, $00
0009A190 F6FF C4                    	smpsJump triple_DAC
0009A193                            
0009A193                            ; FM1 Data
0009A193                            triple_FM1:
0009A193 E0C0                       	smpsPan             panCenter, $00
0009A197 8018                       	dc.b	nRst, $18
0009A199                            
0009A199                            triple_Loop0B:
0009A199 AC06 B8                    	dc.b	nG3, $06, nG4
0009A19C F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
0009A1A1                            
0009A1A1                            triple_Loop0C:
0009A1A1 A7B3                       	dc.b	nD3, nD4
0009A1A3 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
0009A1A8                            
0009A1A8                            triple_Loop0D:
0009A1A8 A9B5                       	dc.b	nE3, nE4
0009A1AA F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
0009A1AF A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
0009A1B7 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
0009A1BC A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
0009A1C8 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
0009A1D4 AD                         	dc.b	nAb3
0009A1D5 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
0009A1DA 8018                       	dc.b	nRst, $18
0009A1DC E0C0                       	smpsPan             panCenter, $00
0009A1E0 F6FF B1                    	smpsJump triple_FM1
0009A1E3                            
0009A1E3                            ; FM2 Data
0009A1E3                            triple_FM2:
0009A1E3 E0C0                       	smpsPan             panCenter, $00
0009A1E7 8018                       	dc.b	nRst, $18
0009A1E9                            
0009A1E9                            triple_Loop07:
0009A1E9 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009A1F5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009A201 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
0009A206 8003                       	dc.b	nRst, $03
0009A208                            
0009A208                            triple_Loop08:
0009A208 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009A20E F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
0009A213 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0009A219                            
0009A219                            triple_Loop09:
0009A219 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009A225 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009A231 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
0009A236 8003                       	dc.b	nRst, $03
0009A238                            
0009A238                            triple_Loop0A:
0009A238 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009A23E F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
0009A243 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0009A249 E0C0                       	smpsPan             panCenter, $00
0009A24D F6FF 94                    	smpsJump triple_FM2
0009A250                            
0009A250                            ; FM3 Data
0009A250                            triple_FM3:
0009A250 E0C0                       	smpsPan             panCenter, $00
0009A254 8018                       	dc.b	nRst, $18
0009A256                            
0009A256                            triple_Loop06:
0009A256 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
0009A25D F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
0009A262 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
0009A26E BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
0009A27A C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
0009A27D F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
0009A282 8018                       	dc.b	nRst, $18
0009A284 E0C0                       	smpsPan             panCenter, $00
0009A288 F6FF C6                    	smpsJump triple_FM3
0009A28B                            
0009A28B                            ; FM4 Data
0009A28B                            triple_FM4:
0009A28B E103                       	smpsAlterNote       $03
0009A28F E0C0                       	smpsPan             panCenter, $00
0009A291 8018                       	dc.b	nRst, $18
0009A293                            
0009A293                            triple_Loop02:
0009A293 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009A29F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009A2AB F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
0009A2B0 8003                       	dc.b	nRst, $03
0009A2B2                            
0009A2B2                            triple_Loop03:
0009A2B2 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009A2B8 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
0009A2BD B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0009A2C3                            
0009A2C3                            triple_Loop04:
0009A2C3 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009A2CF C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009A2DB F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
0009A2E0 8003                       	dc.b	nRst, $03
0009A2E2                            
0009A2E2                            triple_Loop05:
0009A2E2 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009A2E8 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
0009A2ED B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0009A2F3 E0C0                       	smpsPan             panCenter, $00
0009A2F5 F6FF 94                    	smpsJump triple_FM4
0009A2F8                            
0009A2F8                            ; PSG1 Data
0009A2F8                            triple_PSG1:
0009A2F8 8018                       	dc.b	nRst, $18
0009A2FA                            
0009A2FA                            triple_Loop0E:
0009A2FA A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A306 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A312 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A31E 9402 8004                  	dc.b	nG1, $02, nRst, $04
0009A322 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
0009A327 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A333 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A33F 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A34B 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009A34F                            
0009A34F                            triple_Loop0F:
0009A34F 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009A355 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
0009A35A 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
0009A360                            
0009A360                            triple_Loop10:
0009A360 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A36C 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A378 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A384 9402 8004                  	dc.b	nG1, $02, nRst, $04
0009A388 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
0009A38D A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A399 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A3A5 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A3B1 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009A3B5                            
0009A3B5                            triple_Loop11:
0009A3B5 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009A3BB F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
0009A3C0 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
0009A3C6 F500                       	smpsPSGvoice        $00
0009A3C8 F6FF 2E                    	smpsJump triple_PSG1
0009A3CB                            
0009A3CB                            triple_Voices:
0009A3CB                            ;	Voice $00
0009A3CB                            ;	$3A
0009A3CB                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0009A3CB                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
0009A3CB                            	smpsVcAlgorithm     $02
0009A3CB                            	smpsVcFeedback      $07
0009A3CB                            	smpsVcUnusedBits    $00
0009A3CB                            	smpsVcDetune        $00, $00, $00, $00
0009A3CB                            	smpsVcCoarseFreq    $01, $01, $07, $01
0009A3CB                            	smpsVcRateScale     $01, $02, $02, $02
0009A3CB                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0009A3CB                            	smpsVcAmpMod        $00, $00, $00, $00
0009A3CB                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0009A3CB                            	smpsVcDecayRate2    $00, $00, $00, $00
0009A3CB                            	smpsVcDecayLevel    $00, $01, $0F, $01
0009A3CB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009A3CB 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
0009A3E4                            
0009A3E4                            ;	Voice $01
0009A3E4                            ;	$20
0009A3E4                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
0009A3E4                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
0009A3E4                            	smpsVcAlgorithm     $00
0009A3E4                            	smpsVcFeedback      $04
0009A3E4                            	smpsVcUnusedBits    $00
0009A3E4                            	smpsVcDetune        $00, $00, $03, $07
0009A3E4                            	smpsVcCoarseFreq    $00, $00, $01, $0A
0009A3E4                            	smpsVcRateScale     $03, $03, $03, $02
0009A3E4                            	smpsVcAttackRate    $1F, $1C, $18, $1F
0009A3E4                            	smpsVcAmpMod        $00, $00, $00, $00
0009A3E4                            	smpsVcDecayRate1    $04, $04, $0A, $10
0009A3E4                            	smpsVcDecayRate2    $08, $08, $08, $0F
0009A3E4                            	smpsVcDecayLevel    $0B, $0B, $05, $05
0009A3E4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009A3E4 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009A3E4 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009A3FE 00                         		even
0009A3FE                            Music88:	incbin	sound\music88.bin; Extra Life
0009A4EC                            		even
0009A4EC                            Music89:	incbin	sound\music89.bin; Special Stage
0009E3B4 00                         		even
0009E3B4                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009E57E                            		even
0009E57E                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009E818                            		even
0009E818                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009EAB6                            		even
0009EAB6                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009ECD2                            		even
0009ECD2                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009F140 00                         		even
0009F140                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009F780 00                         		even
0009F780                            Music90:	incbin	sound\music90.bin ; Continue
0009FB1A 00                         		even
0009FB1A                            Music91:	incbin	sound\music91.bin ; Credits
000A0DE8                            		even
000A0DE8                            Music92:	incbin	sound\music92.bin ; Drowning
000A112A 00                         		even
000A112A                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A11FA                            		even
000A11FA                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A1ED0 00                         		even
000A1ED0                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A2020 00                         		even
000A2020                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A205A 00                         		even
000A205A                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A2094 00                         		even
000A2094                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A20CE 00                         		even
000A20CE                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A2108 00                         		even
000A2108                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A2142 00                         		even
000A2142                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A217C 00                         		even
000A217C                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A21B6 00                         		even
000A21B6                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A21F0 00                         		even
000A21F0                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A26E0                            		even
000A26E0                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A26E0                            GentleBreeze_Header:
000A26E0 =00000001                  smpsHeaderStartSong = 1
000A26E0 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A26E2 0603                       	smpsHeaderChan      $06, $03
000A26E4 0100                       	smpsHeaderTempo     $01, $00
000A26E6                            
000A26EA 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A26EE 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A26F2 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A26F6 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A26FA 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A26FE 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A2704 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A270A 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A2710                            
000A2710                            ; PSG3 Data
000A2710                            GentleBreeze_PSG3:
000A2710 F2                         	smpsStop
000A2711                            
000A2711                            ; FM1 Data
000A2711                            GentleBreeze_FM1:
000A2713 E0C0                       	smpsPan             panCenter, $00
000A2715 E1FF                       	smpsAlterNote       $FF
000A2717 C410                       	dc.b	nG5, $10
000A2719 E60F                       	smpsAlterVol        $0F
000A271B C4                         	dc.b	nG5
000A271C E6F1                       	smpsAlterVol        $F1
000A271E E100                       	smpsAlterNote       $00
000A2720 C2                         	dc.b	nF5
000A2721 E60F                       	smpsAlterVol        $0F
000A2723 08                         	dc.b	$08
000A2724 E6F1                       	smpsAlterVol        $F1
000A2726 C010                       	dc.b	nEb5, $10
000A2728 E60F                       	smpsAlterVol        $0F
000A272A C0                         	dc.b	nEb5
000A272B E6F1                       	smpsAlterVol        $F1
000A272D BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A2733 E60F                       	smpsAlterVol        $0F
000A2735 C9                         	dc.b	nC6
000A2736 E6F1                       	smpsAlterVol        $F1
000A2738 C5                         	dc.b	nAb5
000A2739 E60F                       	smpsAlterVol        $0F
000A273B 08                         	dc.b	$08
000A273C E6F1                       	smpsAlterVol        $F1
000A273E C010                       	dc.b	nEb5, $10
000A2740 E60F                       	smpsAlterVol        $0F
000A2742 C0                         	dc.b	nEb5
000A2743 E6F1                       	smpsAlterVol        $F1
000A2745 C208                       	dc.b	nF5, $08
000A2747 E1FF                       	smpsAlterNote       $FF
000A2749 C410                       	dc.b	nG5, $10
000A274B E100                       	smpsAlterNote       $00
000A274D C5C7                       	dc.b	nAb5, nBb5
000A274F E60F                       	smpsAlterVol        $0F
000A2751 C7                         	dc.b	nBb5
000A2752 E6F1                       	smpsAlterVol        $F1
000A2754 C5                         	dc.b	nAb5
000A2755 E60F                       	smpsAlterVol        $0F
000A2757 08                         	dc.b	$08
000A2758 E6F1                       	smpsAlterVol        $F1
000A275A E1FF                       	smpsAlterNote       $FF
000A275C C410                       	dc.b	nG5, $10
000A275E E60F                       	smpsAlterVol        $0F
000A2760 C4                         	dc.b	nG5
000A2761 E6F1                       	smpsAlterVol        $F1
000A2763 C4                         	dc.b	nG5
000A2764 E100                       	smpsAlterNote       $00
000A2766 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A276B E60F                       	smpsAlterVol        $0F
000A276D C2                         	dc.b	nF5
000A276E E6F1                       	smpsAlterVol        $F1
000A2770 E1FF                       	smpsAlterNote       $FF
000A2772 C4                         	dc.b	nG5
000A2773 E60F                       	smpsAlterVol        $0F
000A2775 08                         	dc.b	$08
000A2776 E6F1                       	smpsAlterVol        $F1
000A2778 10                         	dc.b	$10
000A2779 E60F                       	smpsAlterVol        $0F
000A277B 38                         	dc.b	$38
000A277C E6F1                       	smpsAlterVol        $F1
000A277E 10                         	dc.b	$10
000A277F E60F                       	smpsAlterVol        $0F
000A2781 C4                         	dc.b	nG5
000A2782 E6F1                       	smpsAlterVol        $F1
000A2784 E100                       	smpsAlterNote       $00
000A2786 C2                         	dc.b	nF5
000A2787 E60F                       	smpsAlterVol        $0F
000A2789 08                         	dc.b	$08
000A278A E6F1                       	smpsAlterVol        $F1
000A278C C010                       	dc.b	nEb5, $10
000A278E E60F                       	smpsAlterVol        $0F
000A2790 C0                         	dc.b	nEb5
000A2791 E6F1                       	smpsAlterVol        $F1
000A2793 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A2799 E60F                       	smpsAlterVol        $0F
000A279B C9                         	dc.b	nC6
000A279C E6F1                       	smpsAlterVol        $F1
000A279E C5                         	dc.b	nAb5
000A279F E60F                       	smpsAlterVol        $0F
000A27A1 08                         	dc.b	$08
000A27A2 E6F1                       	smpsAlterVol        $F1
000A27A4 C010                       	dc.b	nEb5, $10
000A27A6 E60F                       	smpsAlterVol        $0F
000A27A8 C0                         	dc.b	nEb5
000A27A9 E6F1                       	smpsAlterVol        $F1
000A27AB C208                       	dc.b	nF5, $08
000A27AD E1FF                       	smpsAlterNote       $FF
000A27AF C410                       	dc.b	nG5, $10
000A27B1 E100                       	smpsAlterNote       $00
000A27B3 C5C7                       	dc.b	nAb5, nBb5
000A27B5 E60F                       	smpsAlterVol        $0F
000A27B7 C7                         	dc.b	nBb5
000A27B8 E6F1                       	smpsAlterVol        $F1
000A27BA C5                         	dc.b	nAb5
000A27BB E60F                       	smpsAlterVol        $0F
000A27BD 08                         	dc.b	$08
000A27BE E6F1                       	smpsAlterVol        $F1
000A27C0 E1FF                       	smpsAlterNote       $FF
000A27C2 C410                       	dc.b	nG5, $10
000A27C4 E60F                       	smpsAlterVol        $0F
000A27C6 C4                         	dc.b	nG5
000A27C7 E6F1                       	smpsAlterVol        $F1
000A27C9 C4                         	dc.b	nG5
000A27CA E100                       	smpsAlterNote       $00
000A27CC C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A27D1 E60F                       	smpsAlterVol        $0F
000A27D3 28                         	dc.b	$28
000A27D4 E6F1                       	smpsAlterVol        $F1
000A27D6 C008 10                    	dc.b	nEb5, $08, $10
000A27D9 E60F                       	smpsAlterVol        $0F
000A27DB 21                         	dc.b	$21
000A27DC                            
000A27DC                            GentleBreeze_Loop12:
000A27DC E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A27DF F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A27E4 E717                       	dc.b	smpsNoAttack, $17
000A27E6 E6F1                       	smpsAlterVol        $F1
000A27E8 E1FF                       	smpsAlterNote       $FF
000A27EA C410                       	dc.b	nG5, $10
000A27EC E60F                       	smpsAlterVol        $0F
000A27EE C4                         	dc.b	nG5
000A27EF E6F1                       	smpsAlterVol        $F1
000A27F1 E100                       	smpsAlterNote       $00
000A27F3 C2                         	dc.b	nF5
000A27F4 E60F                       	smpsAlterVol        $0F
000A27F6 08                         	dc.b	$08
000A27F7 E6F1                       	smpsAlterVol        $F1
000A27F9 C010                       	dc.b	nEb5, $10
000A27FB E60F                       	smpsAlterVol        $0F
000A27FD C0                         	dc.b	nEb5
000A27FE E6F1                       	smpsAlterVol        $F1
000A2800 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A2806 E60F                       	smpsAlterVol        $0F
000A2808 C9                         	dc.b	nC6
000A2809 E6F1                       	smpsAlterVol        $F1
000A280B C5                         	dc.b	nAb5
000A280C E60F                       	smpsAlterVol        $0F
000A280E 08                         	dc.b	$08
000A280F E6F1                       	smpsAlterVol        $F1
000A2811 C010                       	dc.b	nEb5, $10
000A2813 E60F                       	smpsAlterVol        $0F
000A2815 C0                         	dc.b	nEb5
000A2816 E6F1                       	smpsAlterVol        $F1
000A2818 C208                       	dc.b	nF5, $08
000A281A E1FF                       	smpsAlterNote       $FF
000A281C C410                       	dc.b	nG5, $10
000A281E E100                       	smpsAlterNote       $00
000A2820 C5C7                       	dc.b	nAb5, nBb5
000A2822 E60F                       	smpsAlterVol        $0F
000A2824 C7                         	dc.b	nBb5
000A2825 E6F1                       	smpsAlterVol        $F1
000A2827 C5                         	dc.b	nAb5
000A2828 E60F                       	smpsAlterVol        $0F
000A282A 08                         	dc.b	$08
000A282B E6F1                       	smpsAlterVol        $F1
000A282D E1FF                       	smpsAlterNote       $FF
000A282F C410                       	dc.b	nG5, $10
000A2831 E60F                       	smpsAlterVol        $0F
000A2833 C4                         	dc.b	nG5
000A2834 E6F1                       	smpsAlterVol        $F1
000A2836 C4                         	dc.b	nG5
000A2837 E100                       	smpsAlterNote       $00
000A2839 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A283E E60F                       	smpsAlterVol        $0F
000A2840 C2                         	dc.b	nF5
000A2841 E6F1                       	smpsAlterVol        $F1
000A2843 E1FF                       	smpsAlterNote       $FF
000A2845 C4                         	dc.b	nG5
000A2846 E60F                       	smpsAlterVol        $0F
000A2848 08                         	dc.b	$08
000A2849 E6F1                       	smpsAlterVol        $F1
000A284B 10                         	dc.b	$10
000A284C E60F                       	smpsAlterVol        $0F
000A284E 38                         	dc.b	$38
000A284F E6F1                       	smpsAlterVol        $F1
000A2851 10                         	dc.b	$10
000A2852 E60F                       	smpsAlterVol        $0F
000A2854 C4                         	dc.b	nG5
000A2855 E6F1                       	smpsAlterVol        $F1
000A2857 E100                       	smpsAlterNote       $00
000A2859 C2                         	dc.b	nF5
000A285A E60F                       	smpsAlterVol        $0F
000A285C 08                         	dc.b	$08
000A285D E6F1                       	smpsAlterVol        $F1
000A285F C010                       	dc.b	nEb5, $10
000A2861 E60F                       	smpsAlterVol        $0F
000A2863 C0                         	dc.b	nEb5
000A2864 E6F1                       	smpsAlterVol        $F1
000A2866 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A286C E60F                       	smpsAlterVol        $0F
000A286E C9                         	dc.b	nC6
000A286F E6F1                       	smpsAlterVol        $F1
000A2871 C5                         	dc.b	nAb5
000A2872 E60F                       	smpsAlterVol        $0F
000A2874 08                         	dc.b	$08
000A2875 E6F1                       	smpsAlterVol        $F1
000A2877 C010                       	dc.b	nEb5, $10
000A2879 E60F                       	smpsAlterVol        $0F
000A287B C0                         	dc.b	nEb5
000A287C E6F1                       	smpsAlterVol        $F1
000A287E C208                       	dc.b	nF5, $08
000A2880 E1FF                       	smpsAlterNote       $FF
000A2882 C410                       	dc.b	nG5, $10
000A2884 E100                       	smpsAlterNote       $00
000A2886 C5C7                       	dc.b	nAb5, nBb5
000A2888 E60F                       	smpsAlterVol        $0F
000A288A C7                         	dc.b	nBb5
000A288B E6F1                       	smpsAlterVol        $F1
000A288D C5                         	dc.b	nAb5
000A288E E60F                       	smpsAlterVol        $0F
000A2890 08                         	dc.b	$08
000A2891 E6F1                       	smpsAlterVol        $F1
000A2893 E1FF                       	smpsAlterNote       $FF
000A2895 C410                       	dc.b	nG5, $10
000A2897 E60F                       	smpsAlterVol        $0F
000A2899 C4                         	dc.b	nG5
000A289A E6F1                       	smpsAlterVol        $F1
000A289C C4                         	dc.b	nG5
000A289D E100                       	smpsAlterNote       $00
000A289F C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A28A4 E60F                       	smpsAlterVol        $0F
000A28A6 28                         	dc.b	$28
000A28A7 E6F1                       	smpsAlterVol        $F1
000A28A9 C008 10                    	dc.b	nEb5, $08, $10
000A28AC E60F                       	smpsAlterVol        $0F
000A28AE 21                         	dc.b	$21
000A28AF E0C0                       	smpsPan             panCenter, $00
000A28B1 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A28B4                            
000A28B4                            ; FM2 Data
000A28B4                            GentleBreeze_FM2:
000A28B6 E60C                       	smpsAlterVol        $0C
000A28B8 E0C0                       	smpsPan             panCenter, $00
000A28BA 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A28C6 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A28D2 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A28DE 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A28EA 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A28F6 A039                       	dc.b	nG2, $39
000A28F8                            
000A28F8                            GentleBreeze_Jump04:
000A28F8 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A28FB                            
000A28FB                            GentleBreeze_Loop11:
000A28FB A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A2907 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A2913 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A291F 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A292B A3                         	dc.b	nBb2
000A292C F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A2931 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A293D A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A2949 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A2955 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A2961 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A296D A039                       	dc.b	nG2, $39
000A296F E0C0                       	smpsPan             panCenter, $00
000A2971 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A2974                            
000A2974                            ; FM3 Data
000A2974                            GentleBreeze_FM3:
000A2976 E0C0                       	smpsPan             panCenter, $00
000A2978 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A2980 E616                       	smpsAlterVol        $16
000A2982 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A2987                            
000A2987                            GentleBreeze_Loop0F:
000A2987 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A298B E1FF                       	smpsAlterNote       $FF
000A298D C4                         	dc.b	nG5
000A298E E100                       	smpsAlterNote       $00
000A2990 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A2995 E608                       	smpsAlterVol        $08
000A2997 C080 08                    	dc.b	nEb5, nRst, $08
000A299A E6F8                       	smpsAlterVol        $F8
000A299C C7                         	dc.b	nBb5
000A299D E1FF                       	smpsAlterNote       $FF
000A299F C4                         	dc.b	nG5
000A29A0 E100                       	smpsAlterNote       $00
000A29A2 C0BB                       	dc.b	nEb5, nBb4
000A29A4 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A29A9 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A29AC E1FF                       	smpsAlterNote       $FF
000A29AE C4                         	dc.b	nG5
000A29AF E100                       	smpsAlterNote       $00
000A29B1 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A29B6 E608                       	smpsAlterVol        $08
000A29B8 C080 08                    	dc.b	nEb5, nRst, $08
000A29BB E6F8                       	smpsAlterVol        $F8
000A29BD E1FF                       	smpsAlterNote       $FF
000A29BF C4                         	dc.b	nG5
000A29C0 E100                       	smpsAlterNote       $00
000A29C2 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A29C9 E1FF                       	smpsAlterNote       $FF
000A29CB C4                         	dc.b	nG5
000A29CC E100                       	smpsAlterNote       $00
000A29CE C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A29D3 E1FF                       	smpsAlterNote       $FF
000A29D5 C4                         	dc.b	nG5
000A29D6 E100                       	smpsAlterNote       $00
000A29D8 C7                         	dc.b	nBb5
000A29D9 E1FF                       	smpsAlterNote       $FF
000A29DB C4                         	dc.b	nG5
000A29DC E100                       	smpsAlterNote       $00
000A29DE C2C0 01                    	dc.b	nF5, nEb5, $01
000A29E1                            
000A29E1                            GentleBreeze_Jump03:
000A29E1 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A29E8 E6FA                       	smpsAlterVol        $FA
000A29EA F4                         	smpsModOff
000A29EB E1FF                       	smpsAlterNote       $FF
000A29ED B850                       	dc.b	nG4, $50
000A29EF E100                       	smpsAlterNote       $00
000A29F1 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A29FD E1FF                       	smpsAlterNote       $FF
000A29FF B810                       	dc.b	nG4, $10
000A2A01 E100                       	smpsAlterNote       $00
000A2A03 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A2A08 E1FF                       	smpsAlterNote       $FF
000A2A0A B8                         	dc.b	nG4
000A2A0B E100                       	smpsAlterNote       $00
000A2A0D B610                       	dc.b	nF4, $10
000A2A0F E1FF                       	smpsAlterNote       $FF
000A2A11 B850                       	dc.b	nG4, $50
000A2A13 E100                       	smpsAlterNote       $00
000A2A15 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A2A1D E1FF                       	smpsAlterNote       $FF
000A2A1F AC08                       	dc.b	nG3, $08
000A2A21 E100                       	smpsAlterNote       $00
000A2A23 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A2A28 E1FF                       	smpsAlterNote       $FF
000A2A2A B850                       	dc.b	nG4, $50
000A2A2C E100                       	smpsAlterNote       $00
000A2A2E BB08                       	dc.b	nBb4, $08
000A2A30 E1FF                       	smpsAlterNote       $FF
000A2A32 B8                         	dc.b	nG4
000A2A33 E100                       	smpsAlterNote       $00
000A2A35 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A2A38 E1FF                       	smpsAlterNote       $FF
000A2A3A B810 08                    	dc.b	nG4, $10, $08
000A2A3D E100                       	smpsAlterNote       $00
000A2A3F B6                         	dc.b	nF4
000A2A40 E1FF                       	smpsAlterNote       $FF
000A2A42 B880                       	dc.b	nG4, nRst
000A2A44 E100                       	smpsAlterNote       $00
000A2A46 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A2A49 E1FF                       	smpsAlterNote       $FF
000A2A4B B810                       	dc.b	nG4, $10
000A2A4D E100                       	smpsAlterNote       $00
000A2A4F B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A2A56 E1FF                       	smpsAlterNote       $FF
000A2A58 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A2A66 E606                       	smpsAlterVol        $06
000A2A68 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A2A6D E100                       	smpsAlterNote       $00
000A2A6F                            
000A2A6F                            GentleBreeze_Loop10:
000A2A6F C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A2A73 E1FF                       	smpsAlterNote       $FF
000A2A75 C4                         	dc.b	nG5
000A2A76 E100                       	smpsAlterNote       $00
000A2A78 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A2A7D E608                       	smpsAlterVol        $08
000A2A7F C080 08                    	dc.b	nEb5, nRst, $08
000A2A82 E6F8                       	smpsAlterVol        $F8
000A2A84 C7                         	dc.b	nBb5
000A2A85 E1FF                       	smpsAlterNote       $FF
000A2A87 C4                         	dc.b	nG5
000A2A88 E100                       	smpsAlterNote       $00
000A2A8A C0BB                       	dc.b	nEb5, nBb4
000A2A8C F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A2A91 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A2A94 E1FF                       	smpsAlterNote       $FF
000A2A96 C4                         	dc.b	nG5
000A2A97 E100                       	smpsAlterNote       $00
000A2A99 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A2A9E E608                       	smpsAlterVol        $08
000A2AA0 C080 08                    	dc.b	nEb5, nRst, $08
000A2AA3 E6F8                       	smpsAlterVol        $F8
000A2AA5 E1FF                       	smpsAlterNote       $FF
000A2AA7 C4                         	dc.b	nG5
000A2AA8 E100                       	smpsAlterNote       $00
000A2AAA C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A2AB1 E1FF                       	smpsAlterNote       $FF
000A2AB3 C4                         	dc.b	nG5
000A2AB4 E100                       	smpsAlterNote       $00
000A2AB6 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A2ABB E1FF                       	smpsAlterNote       $FF
000A2ABD C4                         	dc.b	nG5
000A2ABE E100                       	smpsAlterNote       $00
000A2AC0 C7                         	dc.b	nBb5
000A2AC1 E1FF                       	smpsAlterNote       $FF
000A2AC3 C4                         	dc.b	nG5
000A2AC4 E100                       	smpsAlterNote       $00
000A2AC6 C2C0 01                    	dc.b	nF5, nEb5, $01
000A2AC9 E0C0                       	smpsPan             panCenter, $00
000A2ACB F1                         	smpsModOn
000A2ACC F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A2ACF                            
000A2ACF                            ; FM4 Data
000A2ACF                            GentleBreeze_FM4:
000A2AD1 E0C0                       	smpsPan             panCenter, $00
000A2AD3 80                         	dc.b	nRst
000A2AD4                            
000A2AD4                            GentleBreeze_Loop0D:
000A2AD4 7F                         	dc.b	$7F
000A2AD5 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A2ADA 77                         	dc.b	$77
000A2ADD E609                       	smpsAlterVol        $09
000A2ADF C001                       	dc.b	nEb5, $01
000A2AE1                            
000A2AE1                            GentleBreeze_Jump02:
000A2AE1 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A2AE6 E607                       	smpsAlterVol        $07
000A2AE8 E1FF                       	smpsAlterNote       $FF
000A2AEA C450                       	dc.b	nG5, $50
000A2AEC E100                       	smpsAlterNote       $00
000A2AEE C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A2AFA E1FF                       	smpsAlterNote       $FF
000A2AFC C410                       	dc.b	nG5, $10
000A2AFE E100                       	smpsAlterNote       $00
000A2B00 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A2B05 E1FF                       	smpsAlterNote       $FF
000A2B07 C4                         	dc.b	nG5
000A2B08 E100                       	smpsAlterNote       $00
000A2B0A C210                       	dc.b	nF5, $10
000A2B0C E1FF                       	smpsAlterNote       $FF
000A2B0E C450                       	dc.b	nG5, $50
000A2B10 E100                       	smpsAlterNote       $00
000A2B12 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A2B1A E1FF                       	smpsAlterNote       $FF
000A2B1C B808                       	dc.b	nG4, $08
000A2B1E E100                       	smpsAlterNote       $00
000A2B20 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A2B25 E1FF                       	smpsAlterNote       $FF
000A2B27 C450                       	dc.b	nG5, $50
000A2B29 E100                       	smpsAlterNote       $00
000A2B2B C708                       	dc.b	nBb5, $08
000A2B2D E1FF                       	smpsAlterNote       $FF
000A2B2F C4                         	dc.b	nG5
000A2B30 E100                       	smpsAlterNote       $00
000A2B32 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A2B35 E1FF                       	smpsAlterNote       $FF
000A2B37 C410 08                    	dc.b	nG5, $10, $08
000A2B3A E100                       	smpsAlterNote       $00
000A2B3C C2                         	dc.b	nF5
000A2B3D E1FF                       	smpsAlterNote       $FF
000A2B3F C480                       	dc.b	nG5, nRst
000A2B41 E100                       	smpsAlterNote       $00
000A2B43 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A2B46 E1FF                       	smpsAlterNote       $FF
000A2B48 C410                       	dc.b	nG5, $10
000A2B4A E100                       	smpsAlterNote       $00
000A2B4C BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A2B53 E1FF                       	smpsAlterNote       $FF
000A2B55 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A2B5D                            
000A2B5D                            GentleBreeze_Loop0E:
000A2B5D 7F                         	dc.b	$7F
000A2B5E F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A2B63 77                         	dc.b	$77
000A2B64 E100                       	smpsAlterNote       $00
000A2B66 C001                       	dc.b	nEb5, $01
000A2B68 E6F9                       	smpsAlterVol        $F9
000A2B6A E0C0                       	smpsPan             panCenter, $00
000A2B6C E100                       	smpsAlterNote       $00
000A2B6E F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A2B71                            
000A2B71                            ; FM5 Data
000A2B71                            GentleBreeze_FM5:
000A2B73 E0C0                       	smpsPan             panCenter, $00
000A2B75 A5                         	dc.b	nC3
000A2B76                            
000A2B76                            GentleBreeze_Loop06:
000A2B76 10                         	dc.b	$10
000A2B77 E607                       	smpsAlterVol        $07
000A2B79 A5                         	dc.b	nC3
000A2B7A E6F9                       	smpsAlterVol        $F9
000A2B7C 08                         	dc.b	$08
000A2B7D E607                       	smpsAlterVol        $07
000A2B7F A5                         	dc.b	nC3
000A2B80 E608                       	smpsAlterVol        $08
000A2B82 A5                         	dc.b	nC3
000A2B83 E6F1                       	smpsAlterVol        $F1
000A2B85 18                         	dc.b	$18
000A2B86 E607                       	smpsAlterVol        $07
000A2B88 10                         	dc.b	$10
000A2B89 E608                       	smpsAlterVol        $08
000A2B8B A5                         	dc.b	nC3
000A2B8C E6F1                       	smpsAlterVol        $F1
000A2B8E A5                         	dc.b	nC3
000A2B8F F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A2B94 A5                         	dc.b	nC3
000A2B95                            
000A2B95                            GentleBreeze_Loop07:
000A2B95 E607                       	smpsAlterVol        $07
000A2B97 A5                         	dc.b	nC3
000A2B98 E6F9                       	smpsAlterVol        $F9
000A2B9A 08                         	dc.b	$08
000A2B9B E607                       	smpsAlterVol        $07
000A2B9D A5                         	dc.b	nC3
000A2B9E E608                       	smpsAlterVol        $08
000A2BA0 A5                         	dc.b	nC3
000A2BA1 E6F1                       	smpsAlterVol        $F1
000A2BA3 10                         	dc.b	$10
000A2BA4 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A2BA9                            
000A2BA9                            GentleBreeze_Loop08:
000A2BA9 A5                         	dc.b	nC3
000A2BAA E607                       	smpsAlterVol        $07
000A2BAC A5                         	dc.b	nC3
000A2BAD E6F9                       	smpsAlterVol        $F9
000A2BAF 08                         	dc.b	$08
000A2BB0 E607                       	smpsAlterVol        $07
000A2BB2 A5                         	dc.b	nC3
000A2BB3 E608                       	smpsAlterVol        $08
000A2BB5 A5                         	dc.b	nC3
000A2BB6 E6F1                       	smpsAlterVol        $F1
000A2BB8 18                         	dc.b	$18
000A2BB9 E607                       	smpsAlterVol        $07
000A2BBB 10                         	dc.b	$10
000A2BBC E608                       	smpsAlterVol        $08
000A2BBE A5                         	dc.b	nC3
000A2BBF E6F1                       	smpsAlterVol        $F1
000A2BC1 A5                         	dc.b	nC3
000A2BC2 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A2BC7 A5                         	dc.b	nC3
000A2BC8 E607                       	smpsAlterVol        $07
000A2BCA A5                         	dc.b	nC3
000A2BCB E6F9                       	smpsAlterVol        $F9
000A2BCD 08                         	dc.b	$08
000A2BCE E607                       	smpsAlterVol        $07
000A2BD0 A5                         	dc.b	nC3
000A2BD1 E608                       	smpsAlterVol        $08
000A2BD3 A5                         	dc.b	nC3
000A2BD4 E6F1                       	smpsAlterVol        $F1
000A2BD6 10                         	dc.b	$10
000A2BD7 E607                       	smpsAlterVol        $07
000A2BD9 A5                         	dc.b	nC3
000A2BDA E6F9                       	smpsAlterVol        $F9
000A2BDC 08                         	dc.b	$08
000A2BDD E607                       	smpsAlterVol        $07
000A2BDF A5                         	dc.b	nC3
000A2BE0 E608                       	smpsAlterVol        $08
000A2BE2 A5                         	dc.b	nC3
000A2BE3 E6F1                       	smpsAlterVol        $F1
000A2BE5 01                         	dc.b	$01
000A2BE6                            
000A2BE6                            GentleBreeze_Jump01:
000A2BE6 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A2BE9 E607                       	smpsAlterVol        $07
000A2BEB                            
000A2BEB                            GentleBreeze_Loop09:
000A2BEB 10                         	dc.b	$10
000A2BEC E608                       	smpsAlterVol        $08
000A2BEE A5                         	dc.b	nC3
000A2BEF E6F1                       	smpsAlterVol        $F1
000A2BF1 08                         	dc.b	$08
000A2BF2 E60F                       	smpsAlterVol        $0F
000A2BF4 18                         	dc.b	$18
000A2BF5 E6F8                       	smpsAlterVol        $F8
000A2BF7 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A2BFC 10                         	dc.b	$10
000A2BFD E608                       	smpsAlterVol        $08
000A2BFF A5                         	dc.b	nC3
000A2C00 E6F1                       	smpsAlterVol        $F1
000A2C02 08                         	dc.b	$08
000A2C03 E60F                       	smpsAlterVol        $0F
000A2C05 18                         	dc.b	$18
000A2C06 E6F1                       	smpsAlterVol        $F1
000A2C08                            
000A2C08                            GentleBreeze_Loop0A:
000A2C08 10                         	dc.b	$10
000A2C09 E607                       	smpsAlterVol        $07
000A2C0B A5                         	dc.b	nC3
000A2C0C E6F9                       	smpsAlterVol        $F9
000A2C0E 08                         	dc.b	$08
000A2C0F E607                       	smpsAlterVol        $07
000A2C11 A5                         	dc.b	nC3
000A2C12 E608                       	smpsAlterVol        $08
000A2C14 A5                         	dc.b	nC3
000A2C15 E6F1                       	smpsAlterVol        $F1
000A2C17 18                         	dc.b	$18
000A2C18 E607                       	smpsAlterVol        $07
000A2C1A 10                         	dc.b	$10
000A2C1B E608                       	smpsAlterVol        $08
000A2C1D A5                         	dc.b	nC3
000A2C1E E6F1                       	smpsAlterVol        $F1
000A2C20 A5                         	dc.b	nC3
000A2C21 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A2C26 A5                         	dc.b	nC3
000A2C27                            
000A2C27                            GentleBreeze_Loop0B:
000A2C27 E607                       	smpsAlterVol        $07
000A2C29 A5                         	dc.b	nC3
000A2C2A E6F9                       	smpsAlterVol        $F9
000A2C2C 08                         	dc.b	$08
000A2C2D E607                       	smpsAlterVol        $07
000A2C2F A5                         	dc.b	nC3
000A2C30 E608                       	smpsAlterVol        $08
000A2C32 A5                         	dc.b	nC3
000A2C33 E6F1                       	smpsAlterVol        $F1
000A2C35 10                         	dc.b	$10
000A2C36 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A2C3B                            
000A2C3B                            GentleBreeze_Loop0C:
000A2C3B A5                         	dc.b	nC3
000A2C3C E607                       	smpsAlterVol        $07
000A2C3E A5                         	dc.b	nC3
000A2C3F E6F9                       	smpsAlterVol        $F9
000A2C41 08                         	dc.b	$08
000A2C42 E607                       	smpsAlterVol        $07
000A2C44 A5                         	dc.b	nC3
000A2C45 E608                       	smpsAlterVol        $08
000A2C47 A5                         	dc.b	nC3
000A2C48 E6F1                       	smpsAlterVol        $F1
000A2C4A 18                         	dc.b	$18
000A2C4B E607                       	smpsAlterVol        $07
000A2C4D 10                         	dc.b	$10
000A2C4E E608                       	smpsAlterVol        $08
000A2C50 A5                         	dc.b	nC3
000A2C51 E6F1                       	smpsAlterVol        $F1
000A2C53 A5                         	dc.b	nC3
000A2C54 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A2C59 A5                         	dc.b	nC3
000A2C5A E607                       	smpsAlterVol        $07
000A2C5C A5                         	dc.b	nC3
000A2C5D E6F9                       	smpsAlterVol        $F9
000A2C5F 08                         	dc.b	$08
000A2C60 E607                       	smpsAlterVol        $07
000A2C62 A5                         	dc.b	nC3
000A2C63 E608                       	smpsAlterVol        $08
000A2C65 A5                         	dc.b	nC3
000A2C66 E6F1                       	smpsAlterVol        $F1
000A2C68 10                         	dc.b	$10
000A2C69 E607                       	smpsAlterVol        $07
000A2C6B A5                         	dc.b	nC3
000A2C6C E6F9                       	smpsAlterVol        $F9
000A2C6E 08                         	dc.b	$08
000A2C6F E607                       	smpsAlterVol        $07
000A2C71 A5                         	dc.b	nC3
000A2C72 E608                       	smpsAlterVol        $08
000A2C74 A5                         	dc.b	nC3
000A2C75 E6F1                       	smpsAlterVol        $F1
000A2C77 01                         	dc.b	$01
000A2C78 E0C0                       	smpsPan             panCenter, $00
000A2C7A F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A2C7D                            
000A2C7D                            ; DAC Data
000A2C7D                            GentleBreeze_DAC:
000A2C7D 81                         	dc.b	dKick
000A2C7E                            
000A2C7E                            GentleBreeze_Loop00:
000A2C7E 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2C84 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A2C89 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A2C94                            
000A2C94                            GentleBreeze_Loop01:
000A2C94 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2C9A F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A2C9F 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A2CA9                            
000A2CA9                            GentleBreeze_Jump00:
000A2CA9 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A2CAD                            
000A2CAD                            GentleBreeze_Loop02:
000A2CAD 81                         	dc.b	dKick
000A2CAE                            
000A2CAE                            GentleBreeze_Loop03:
000A2CAE 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A2CBA 088A                       	dc.b	$08, dLowTimpani
000A2CBC F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A2CC1 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A2CCD 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A2CD2 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A2CD7                            
000A2CD7                            GentleBreeze_Loop04:
000A2CD7 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2CDD F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A2CE2 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A2CED                            
000A2CED                            GentleBreeze_Loop05:
000A2CED 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2CF3 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A2CF8 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A2D02 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A2D05                            
000A2D05                            ; PSG 1 Data
000A2D05                            GentleBreeze_PSG1:
000A2D05 80                         	dc.b	nRst
000A2D06                            
000A2D06                            GentleBreeze_LoopPSG02:
000A2D06 7F                         	dc.b	$7F
000A2D07 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A2D0C 08                         	dc.b	$08
000A2D0D EC04                       	smpsPSGAlterVol     $04
000A2D0F                            
000A2D0F                            GentleBreeze_JumpPSG01:
000A2D0F A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A2D1B A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A2D23                            
000A2D23                            GentleBreeze_LoopPSG03:
000A2D23 7F                         	dc.b	$7F
000A2D24 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A2D29 08A3 01                    	dc.b	$08, nBb2, $01
000A2D2C F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A2D2F                            
000A2D2F                            ; PSG2 Data
000A2D2F                            GentleBreeze_PSG2:
000A2D2F 80                         	dc.b	nRst
000A2D30                            
000A2D30                            GentleBreeze_LoopPSG00:
000A2D30 7F                         	dc.b	$7F
000A2D31 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A2D36 08                         	dc.b	$08
000A2D37 EC04                       	smpsPSGAlterVol     $04
000A2D39                            
000A2D39                            GentleBreeze_JumpPSG00:
000A2D39 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A2D45 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A2D4D                            
000A2D4D                            GentleBreeze_LoopPSG01:
000A2D4D 7F                         	dc.b	$7F
000A2D4E F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A2D53 08A8 01                    	dc.b	$08, nEb3, $01
000A2D56 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A2D59                            
000A2D59                            GentleBreeze_Voices:
000A2D59                            ;	Voice $00
000A2D59                            ;	$0C
000A2D59                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A2D59                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A2D59                            	smpsVcAlgorithm     $04
000A2D59                            	smpsVcFeedback      $01
000A2D59                            	smpsVcUnusedBits    $00
000A2D59                            	smpsVcDetune        $07, $02, $07, $02
000A2D59                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A2D59                            	smpsVcRateScale     $00, $00, $00, $00
000A2D59                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2D59                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D59                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A2D59                            	smpsVcDecayRate2    $01, $00, $00, $00
000A2D59                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A2D59                            	smpsVcReleaseRate   $09, $01, $04, $03
000A2D59 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A2D72                            
000A2D72                            ;	Voice $01
000A2D72                            ;	$38
000A2D72                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A2D72                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A2D72                            	smpsVcAlgorithm     $00
000A2D72                            	smpsVcFeedback      $07
000A2D72                            	smpsVcUnusedBits    $00
000A2D72                            	smpsVcDetune        $03, $07, $01, $05
000A2D72                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A2D72                            	smpsVcRateScale     $00, $02, $00, $02
000A2D72                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2D72                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D72                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A2D72                            	smpsVcDecayRate2    $00, $00, $10, $00
000A2D72                            	smpsVcDecayLevel    $00, $00, $00, $00
000A2D72                            	smpsVcReleaseRate   $08, $05, $05, $05
000A2D72 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A2D8B                            
000A2D8B                            ;	Voice $02
000A2D8B                            ;	$00
000A2D8B                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A2D8B                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A2D8B                            	smpsVcAlgorithm     $00
000A2D8B                            	smpsVcFeedback      $00
000A2D8B                            	smpsVcUnusedBits    $00
000A2D8B                            	smpsVcDetune        $00, $00, $00, $00
000A2D8B                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A2D8B                            	smpsVcRateScale     $00, $00, $00, $00
000A2D8B                            	smpsVcAttackRate    $00, $00, $00, $00
000A2D8B                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D8B                            	smpsVcDecayRate1    $00, $00, $00, $00
000A2D8B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2D8B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A2D8B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2D8B 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2DA4                            
000A2DA4                            ;	Voice $03
000A2DA4                            ;	$36
000A2DA4                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A2DA4                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A2DA4                            	smpsVcAlgorithm     $06
000A2DA4                            	smpsVcFeedback      $06
000A2DA4                            	smpsVcUnusedBits    $00
000A2DA4                            	smpsVcDetune        $00, $00, $00, $00
000A2DA4                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A2DA4                            	smpsVcRateScale     $00, $00, $00, $00
000A2DA4                            	smpsVcAttackRate    $1F, $00, $18, $16
000A2DA4                            	smpsVcAmpMod        $00, $00, $00, $00
000A2DA4                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A2DA4                            	smpsVcDecayRate2    $00, $00, $12, $00
000A2DA4                            	smpsVcDecayLevel    $04, $04, $02, $00
000A2DA4                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A2DA4 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A2DBD                            
000A2DBD                            ;	Voice $04
000A2DBD                            ;	$07
000A2DBD                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A2DBD                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A2DBD                            	smpsVcAlgorithm     $07
000A2DBD                            	smpsVcFeedback      $00
000A2DBD                            	smpsVcUnusedBits    $00
000A2DBD                            	smpsVcDetune        $07, $06, $05, $00
000A2DBD                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A2DBD                            	smpsVcRateScale     $00, $01, $01, $01
000A2DBD                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A2DBD                            	smpsVcAmpMod        $00, $00, $00, $00
000A2DBD                            	smpsVcDecayRate1    $17, $17, $17, $17
000A2DBD                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2DBD                            	smpsVcDecayLevel    $02, $02, $02, $02
000A2DBD                            	smpsVcReleaseRate   $06, $06, $06, $06
000A2DBD 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2DD6                            
000A2DD6                            ;	Voice $05
000A2DD6                            ;	$3C
000A2DD6                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A2DD6                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A2DD6                            	smpsVcAlgorithm     $04
000A2DD6                            	smpsVcFeedback      $07
000A2DD6                            	smpsVcUnusedBits    $00
000A2DD6                            	smpsVcDetune        $06, $06, $02, $02
000A2DD6                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A2DD6                            	smpsVcRateScale     $00, $00, $00, $00
000A2DD6                            	smpsVcAttackRate    $0E, $14, $10, $13
000A2DD6                            	smpsVcAmpMod        $00, $00, $00, $00
000A2DD6                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A2DD6                            	smpsVcDecayRate2    $04, $04, $04, $04
000A2DD6                            	smpsVcDecayLevel    $02, $01, $01, $01
000A2DD6                            	smpsVcReleaseRate   $07, $07, $07, $07
000A2DD6 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A2DEF                            
000A2DEF                            
000A2DF0 00                         		even
000A2DF0                            ; ---------------------------------------------------------------------------
000A2DF0                            ; Sound	effect pointers
000A2DF0                            ; ---------------------------------------------------------------------------
000A2DF0 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A2DFC 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A2E08 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A2E14 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A2E20 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A2E2C 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A2E38 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A2E44 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A2E50 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A2E5C 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A2E68 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A2E74 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A2E80 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A2E8C 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A2E98 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A2EA4 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A2EB0 0000 0000                  SoundD0Index:	dc.l SoundD0
000A2EB4                            SoundA0:	include	sound\jump.asm
000A2EB4                            jump_Header:
000A2EB4 =00000001                  smpsHeaderStartSong = 1
000A2EB4 0000                       	smpsHeaderVoice     jump_Voices
000A2EB6 01                         	smpsHeaderTempoSFX  $01
000A2EB7 01                         	smpsHeaderChanSFX   $01
000A2EB8                            
000A2EC4                            
000A2EC4                            ; FM4 Data
000A2EC4                            jump_FM4:
000A2EC6 E000                       	smpsPan             panNone, $00
000A2EC8 E607                       	smpsAlterVol        $07
000A2ECA E0C0                       	smpsPan             panCenter, $00
000A2ECC 9903 B1                    	dc.b	nC2, $03, nC4
000A2ECF E607                       	smpsAlterVol        $07
000A2ED1 E040                       	smpsPan             panRight, $00
000A2ED3 99B1                       	dc.b	nC2, nC4
000A2ED5 E60A                       	smpsAlterVol        $0A
000A2ED7 E080                       	smpsPan             panLeft, $00
000A2ED9 99B1                       	dc.b	nC2, nC4
000A2EDB E603                       	smpsAlterVol        $03
000A2EDD E0C0                       	smpsPan             panCenter, $00
000A2EDF 99B1                       	dc.b	nC2, nC4
000A2EE1 E000                       	smpsPan             panNone, $00
000A2EE3 803D                       	dc.b	nRst, $3D
000A2EE5 F2                         	smpsStop
000A2EE6                            
000A2EE6                            ; PSG3 Data
000A2EE6                            jump_PSG3:
000A2EE6 F3E7                       	smpsPSGform         $E7
000A2EE8 8056                       	dc.b	nRst, $56
000A2EEA F2                         	smpsStop
000A2EEB                            
000A2EEB                            jump_Voices:
000A2EEB                            ;	Voice $00
000A2EEB                            ;	$3C
000A2EEB                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A2EEB                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A2EEB                            	smpsVcAlgorithm     $04
000A2EEB                            	smpsVcFeedback      $07
000A2EEB                            	smpsVcUnusedBits    $00
000A2EEB                            	smpsVcDetune        $00, $00, $00, $00
000A2EEB                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A2EEB                            	smpsVcRateScale     $00, $00, $00, $00
000A2EEB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2EEB                            	smpsVcAmpMod        $00, $00, $00, $00
000A2EEB                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A2EEB                            	smpsVcDecayRate2    $11, $00, $11, $00
000A2EEB                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A2EEB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2EEB 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2F04                            
000A2F04                            
000A2F04                            		even
000A2F04                            SoundA1:	incbin	sound\soundA1.bin
000A2F2E                            		even
000A2F2E                            SoundA2:	incbin	sound\soundA2.bin
000A2F4E                            		even
000A2F4E                            SoundA3:	incbin	sound\soundA3.bin
000A2F80                            		even
000A2F80                            SoundA4:	incbin	sound\soundA4.bin
000A2FB6                            		even
000A2FB6                            SoundA5:	include	sound\fart.asm
000A2FB6                            Fart_Header:
000A2FB6 =00000001                  smpsHeaderStartSong = 1
000A2FB6 0000                       	smpsHeaderVoice     Fart_Voices
000A2FB8 01                         	smpsHeaderTempoSFX  $01
000A2FB9 04                         	smpsHeaderChanSFX   $04
000A2FBA                            
000A2FD2                            
000A2FD2                            Fart_FM3:
000A2FD4 E607                       	smpsAlterVol        $07
000A2FD6 E0C0                       	smpsPan             panCenter, $00
000A2FD8 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2FDD A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A2FE0 E1FE                       	smpsAlterNote       $FE
000A2FE2 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A2FE5 E100                       	smpsAlterNote       $00
000A2FE7 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A2FEC F2                         	smpsStop
000A2FED                            
000A2FED                            ; FM4 Data
000A2FED                            Fart_FM4:
000A2FEF E0C0                       	smpsPan             panCenter, $00
000A2FF1 8006                       	dc.b	nRst, $06
000A2FF5 E616                       	smpsAlterVol        $16
000A2FF7 E080                       	smpsPan             panLeft, $00
000A2FF9 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2FFE A212                       	dc.b	nA2, $12
000A3000 E60A                       	smpsAlterVol        $0A
000A3002 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A3005 E603                       	smpsAlterVol        $03
000A3007 E7A2                       	dc.b	smpsNoAttack, nA2
000A3009 E603                       	smpsAlterVol        $03
000A300B E7A2                       	dc.b	smpsNoAttack, nA2
000A300D E604                       	smpsAlterVol        $04
000A300F E7A2                       	dc.b	smpsNoAttack, nA2
000A3011 E606                       	smpsAlterVol        $06
000A3013 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A3016 E610                       	smpsAlterVol        $10
000A3018 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A301B E610                       	smpsAlterVol        $10
000A301D E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A3022 F2                         	smpsStop
000A3023                            
000A3023                            ; FM5 Data
000A3023                            Fart_FM5:
000A3025 E0C0                       	smpsPan             panCenter, $00
000A3027 8009                       	dc.b	nRst, $09
000A302B E616                       	smpsAlterVol        $16
000A302D E040                       	smpsPan             panRight, $00
000A302F F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A3034 A215                       	dc.b	nA2, $15
000A3036 E60A                       	smpsAlterVol        $0A
000A3038 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A303B E603                       	smpsAlterVol        $03
000A303D E7A2                       	dc.b	smpsNoAttack, nA2
000A303F E603                       	smpsAlterVol        $03
000A3041 E7A2                       	dc.b	smpsNoAttack, nA2
000A3043 E604                       	smpsAlterVol        $04
000A3045 E7A2                       	dc.b	smpsNoAttack, nA2
000A3047 E606                       	smpsAlterVol        $06
000A3049 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A304C E610                       	smpsAlterVol        $10
000A304E E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A3051 E610                       	smpsAlterVol        $10
000A3053 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A3058 F2                         	smpsStop
000A3059                            
000A3059                            ; PSG3 Data
000A3059                            Fart_PSG3:
000A3059 F2                         	smpsStop
000A305A                            
000A305A                            ; FM Voices
000A305A                            Fart_Voices:
000A305A                            ;	Voice $00
000A305A                            ;	$39
000A305A                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A305A                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A305A                            	smpsVcAlgorithm     $01
000A305A                            	smpsVcFeedback      $07
000A305A                            	smpsVcUnusedBits    $00
000A305A                            	smpsVcDetune        $00, $07, $03, $07
000A305A                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A305A                            	smpsVcRateScale     $00, $03, $03, $03
000A305A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A305A                            	smpsVcAmpMod        $00, $00, $00, $00
000A305A                            	smpsVcDecayRate1    $00, $00, $00, $04
000A305A                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A305A                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A305A                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A305A 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A3073                            
000A3073                            ;	Voice $01
000A3073                            ;	$00
000A3073                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A3073                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A3073                            	smpsVcAlgorithm     $00
000A3073                            	smpsVcFeedback      $00
000A3073                            	smpsVcUnusedBits    $00
000A3073                            	smpsVcDetune        $00, $00, $00, $00
000A3073                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A3073                            	smpsVcRateScale     $00, $00, $00, $00
000A3073                            	smpsVcAttackRate    $00, $00, $00, $00
000A3073                            	smpsVcAmpMod        $00, $00, $00, $00
000A3073                            	smpsVcDecayRate1    $00, $00, $00, $00
000A3073                            	smpsVcDecayRate2    $00, $00, $00, $00
000A3073                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A3073                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A3073 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A3073 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A308C                            		even
000A308C                            SoundA6:	incbin	sound\soundA6.bin
000A30BC                            		even
000A30BC                            SoundA7:	incbin	sound\soundA7.bin
000A30EC                            		even
000A30EC                            SoundA8:	incbin	sound\soundA8.bin
000A3120                            		even
000A3120                            SoundA9:	incbin	sound\soundA9.bin
000A3132                            		even
000A3132                            SoundAA:	incbin	sound\soundAA.bin
000A3174                            		even
000A3174                            SoundAB:	incbin	sound\soundAB.bin
000A3194                            		even
000A3194                            SoundAC:	incbin	sound\soundAC.bin
000A31C8                            		even
000A31C8                            SoundAD:	incbin	sound\soundAD.bin
000A31FE                            		even
000A31FE                            SoundAE:	incbin	sound\soundAE.bin
000A3248                            		even
000A3248                            SoundAF:	incbin	sound\soundAF.bin
000A3276                            		even
000A3276                            SoundB0:	incbin	sound\soundB0.bin
000A32A8                            		even
000A32A8                            SoundB1:	incbin	sound\soundB1.bin
000A32D4                            		even
000A32D4                            SoundB2:	incbin	sound\soundB2.bin
000A3324                            		even
000A3324                            SoundB3:	incbin	sound\soundB3.bin
000A336E                            		even
000A336E                            SoundB4:	include	sound\soundB4.asm
000A336E                            SndB4_Bumper_Header:
000A336E =00000001                  smpsHeaderStartSong = 1
000A336E 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A3370 01                         	smpsHeaderTempoSFX  $01
000A3371 03                         	smpsHeaderChanSFX   $03
000A3372                            
000A3384                            
000A3384                            ; FM5 Data
000A3384                            SndB4_Bumper_FM5:
000A3386 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A3389                            
000A3389                            ; FM4 Data
000A3389                            SndB4_Bumper_FM4:
000A3389 F2                         	smpsStop
000A338A                            
000A338A                            SndB4_Bumper_Jump00:
000A338A A020                       	dc.b	nG2, $20
000A338C F2                         	smpsStop
000A338D                            
000A338D                            ; FM3 Data
000A338D                            SndB4_Bumper_FM3:
000A338D F2                         	smpsStop
000A338E                            
000A338E                            SndB4_Bumper_Voices:
000A338E                            ;	Voice $00
000A338E                            ;	$32
000A338E                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A338E                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A338E                            	smpsVcAlgorithm     $02
000A338E                            	smpsVcFeedback      $06
000A338E                            	smpsVcUnusedBits    $00
000A338E                            	smpsVcDetune        $07, $07, $02, $00
000A338E                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A338E                            	smpsVcRateScale     $00, $00, $00, $00
000A338E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A338E                            	smpsVcAmpMod        $00, $00, $00, $00
000A338E                            	smpsVcDecayRate1    $08, $00, $00, $09
000A338E                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A338E                            	smpsVcDecayLevel    $00, $00, $00, $00
000A338E                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A338E 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A338E 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A33A8 00                         		even
000A33A8                            SoundB5:	incbin	sound\soundB5.bin
000A33C6 00                         		even
000A33C6                            SoundB6:	incbin	sound\soundB6.bin
000A33E4                            		even
000A33E4                            SoundB7:	incbin	sound\soundB7.bin
000A3420                            		even
000A3420                            SoundB8:	incbin	sound\soundB8.bin
000A343E                            		even
000A343E                            SoundB9:	incbin	sound\soundB9.bin
000A34A2                            		even
000A34A2                            SoundBA:	incbin	sound\soundBA.bin
000A34CA                            		even
000A34CA                            SoundBB:	incbin	sound\soundBB.bin
000A34F6                            		even
000A34F6                            SoundBC:	incbin	sound\soundBC.bin
000A3538                            		even
000A3538                            SoundBD:	incbin	sound\soundBD.bin
000A358C                            		even
000A358C                            SoundBE:	incbin	sound\soundBE.bin
000A35C6                            		even
000A35C6                            SoundBF:	incbin	sound\soundBF.bin
000A3638                            		even
000A3638                            SoundC0:	incbin	sound\soundC0.bin
000A3666                            		even
000A3666                            SoundC1:	incbin	sound\soundC1.bin
000A36C0                            		even
000A36C0                            SoundC2:	incbin	sound\soundC2.bin
000A36EA                            		even
000A36EA                            SoundC3:	incbin	sound\soundC3.bin
000A3764                            		even
000A3764                            SoundC4:	incbin	sound\soundC4.bin
000A3862                            		even
000A3862                            SoundC5:	incbin	sound\soundC5.bin
000A38CA                            		even
000A38CA                            SoundC6:	incbin	sound\soundC6.bin
000A390C                            		even
000A390C                            SoundC7:	incbin	sound\soundC7.bin
000A393A                            		even
000A393A                            SoundC8:	incbin	sound\soundC8.bin
000A394C                            		even
000A394C                            SoundC9:	incbin	sound\soundC9.bin
000A397A                            		even
000A397A                            SoundCA:	incbin	sound\soundCA.bin
000A39A8                            		even
000A39A8                            SoundCB:	incbin	sound\soundCB.bin
000A39F4                            		even
000A39F4                            SoundCC:	incbin	sound\C9.ssf
000A3A22                            		even
000A3A22                            SoundCD:	incbin	sound\soundCD.bin
000A3A4E                            		even
000A3A4E                            SoundCE:	incbin	sound\soundCE.bin
000A3A6C 00                         		even
000A3A6C                            SoundCF:	incbin	sound\soundCF.bin
000A3AA4                            		even
000A3AA4                            SoundD0:	incbin	sound\soundD0.bin
000A3ADE                            		even
000A3ADE                            SegaPCM:	incbin	sound\segapcm.bin
000BDC34                            SegaPCM_end:	even
000BDC34                            
000BDC34                            IdiotPCM:	incbin	sound\youare.bin
000C7D06 00                         IdiotPCM_end:	even
000C7D06                            
000C7D06                            Minecraft:	include	minecraft\code\main.asm
000C7D06                            ; Minecraft: Very Legacy Console Edition
000C7D06                            ; Main file
000C7D06                            
000C7D06                            ;	align	$20000
000C7D06                            	opt	l.
000C7D06                            	include	"minecraft\code\variables.asm"
000C7D06                            ; Minecraft: Very Legacy Console Edition
000C7D06                            ; Variable Definitions
000C7D06                            
000C7D06 =00000040                  MAP_HEIGHT	equ	64
000C7D06 =00000100                  MAP_WIDTH	equ	256
000C7D06                            
000C7D06                            		rsset	$FF0000
000C7D06 =00FF0000                  mcRAM		rs.b	0
000C7D06 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C7D06 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C7D06                            
000C7D06                            		rsset	$FFFF8000
000C7D06 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C7D06 =FFFF8E80                  planeBuffer_End	rs.b	0
000C7D06 =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000C7D06                            
000C7D06 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C7D06 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C7D06 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C7D06 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C7D06                            
000C7D06                            		rsset	__rs&$FFFFFF
000C7D06 =00FF8E88                  mcRAM_End	rs.b	0
000C7D06 =00FF8E88                  mcRAM_End	rs.b	0
000C7D06                            	include	"minecraft\code\macros.asm"
000C7D06                            ; =========================================================================================================================================================
000C7D06                            ; MegaDrive macros
000C7D06                            ; =========================================================================================================================================================
000C7D06                            clrRAM		macro	starta, enda
000C7D06                            		local	endaddr
000C7D06                            		if narg<2
000C7D06                            endaddr			EQUS	"\starta\_End"
000C7D06                            		else
000C7D06                            endaddr			EQUS	"\enda"
000C7D06                            		endif
000C7D06                            
000C7D06                            		moveq	#0,d0
000C7D06                            
000C7D06                            		if ((\starta)&$8000)=0
000C7D06                            			lea	\starta,a1
000C7D06                            		else
000C7D06                            			lea	(\starta).w,a1
000C7D06                            		endif
000C7D06                            		if (\starta)&1
000C7D06                            			move.b	d0,(a1)+
000C7D06                            		endif
000C7D06                            
000C7D06                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000C7D06                            .Clear\@:	move.l	d0,(a1)+
000C7D06                            		dbf	d1,.Clear\@
000C7D06                            
000C7D06                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000C7D06                            			move.w	d0,(a1)+
000C7D06                            		endif
000C7D06                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000C7D06                            			move.b	d0,(a1)+
000C7D06                            		endif
000C7D06                            		endm
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; Disable interrupts
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; ARGUMENTS:
000C7D06                            ;	Nothing
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; RETURNS:
000C7D06                            ;	Nothing
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            intsOff		macros
000C7D06                            		ori	#$700,sr
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; Enable interrupts
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; ARGUMENTS:
000C7D06                            ;	Nothing
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; RETURNS:
000C7D06                            ;	Nothing
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            intsOn		macros
000C7D06                            		andi	#$F8FF,sr
000C7D06                            
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; VDP command instruction
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; ARGUMENTS:
000C7D06                            ;	addr	- Address in VDP memory
000C7D06                            ;	type	- Type of VDP memory
000C7D06                            ;	rwd	- VDP command
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; RETURNS:
000C7D06                            ;	Nothing
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06 =00000021                  VRAM		EQU	%100001		; VRAM
000C7D06 =0000002B                  CRAM		EQU	%101011		; CRAM
000C7D06 =00000025                  VSRAM		EQU	%100101		; VSRAM
000C7D06 =0000000C                  READ		EQU	%001100		; VDP read
000C7D06 =00000007                  WRITE		EQU	%000111		; VDP write
000C7D06 =00000027                  DMA		EQU	%100111		; VDP DMA
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000C7D06                            		if narg=5
000C7D06                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000C7D06                            		elseif narg>=6
000C7D06                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000C7D06                            		else
000C7D06                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000C7D06                            		endif
000C7D06                            		endm
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; VDP DMA from 68000 memory to VDP memory
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; ARGUMENTS:
000C7D06                            ;	src	- Source address in 68000 memory
000C7D06                            ;	dest	- Destination address in VDP memory
000C7D06                            ;	len	- Length of data in bytes
000C7D06                            ;	type	- Type of VDP memory
000C7D06                            ;	a6.l	- VDP control port
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; RETURNS:
000C7D06                            ;	Nothing
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            dma68k		macro	src, dest, len, type
000C7D06                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000C7D06                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000C7D06                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000C7D06                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000C7D06                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000C7D06                            		move.w	(sp)+,(a6)
000C7D06                            		endm
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; Fill VRAM with byte
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; ARGUMENTS:
000C7D06                            ;	byte	- Byte to fill VRAM with
000C7D06                            ;	addr	- Address in VRAM
000C7D06                            ;	len	- Length of fill in bytes
000C7D06                            ;	a6.l	- VDP control port
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; RETURNS:
000C7D06                            ;	Nothing
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            dmaFill		macro	byte, addr, len
000C7D06                            		move.w	#$8F01,(a6)
000C7D06                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000C7D06                            		move.w	#$9780,(a6)
000C7D06                            		move.l	#$40000080|(((\addr)&$3FFF)<<16)|(((\addr)&$C000)>>14),(a6)
000C7D06                            		move.w	#(\byte)<<8,-4(a6)
000C7D06                            		waitDMA	(a6)
000C7D06                            		move.w	#$8F02,(a6)
000C7D06                            		endm
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; Copy a region of VRAM to a location in VRAM
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; ARGUMENTS:
000C7D06                            ;	src	- Source address in VRAM
000C7D06                            ;	dest	- Destination address in VRAM
000C7D06                            ;	len	- Length of copy in bytes
000C7D06                            ;	a6.l	- VDP control port
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            ; RETURNS:
000C7D06                            ;	Nothing
000C7D06                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7D06                            dmaCopy		macro	src, dest, len
000C7D06                            		move.w	#$8F01,(a6)
000C7D06                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000C7D06                            		move.l	#$96009500|(((\src)&$FF00)<<8)|((\src)&$FF),(a6)
000C7D06                            		move.w	#$97C0,(a6)
000C7D06                            		move.l	#$000000C0|(((\dest)&$3FFF)<<16)|(((\dest)&$C000)>>14),(a6)
000C7D06                            		waitDMA	(a6)
000C7D06                            		move.w	#$8F02,(a6)
000C7D06                            		endm
000C7D06                            		endm
000C7D06                            
000C7D06                            MC_Init:
000C7D06 007C 0700                  		intsOff						; disable CPU interrupts
000C7D0A 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000C7D12                            
000C7D12 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000C7D18 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000C7D1C                            
000C7D1C 3CBC 8230                  		move.w	#$8200+($C000>>10),(a6)			; set plane A address
000C7D20 3CBC 8334                  		move.w	#$8300+($D000>>10),(a6)			; set plane W address
000C7D24 3CBC 8407                  		move.w	#$8400+($E000>>13),(a6)			; set plane B address
000C7D28 3CBC 857C                  		move.w	#$8500+($F800>>9),(a6)			; set sprite table address
000C7D2C                            		
000C7D2C 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
000C7D30 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000C7D34 3CBC 8D3F                  		move.w	#$8D00+($FC00>>10),(a6)			; set HScroll table address
000C7D38 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000C7D3C 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000C7D40                            
000C7D52 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000C7D56                            
000C7D56                            .waitVBlank:	
000C7D56 44D6                       		move.w	(a6),ccr				; is v-blank active?
000C7D58 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000C7D5A                            
000C7D8E                            
000C7D8E 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000C7D92 027C F8FF                  		intsOn						; enable CPU interrupts
000C7D96                            
000C7D96 41FA 0000                  		lea	MC_BlockRender(pc),a0
000C7D9A 43F8 8000                  		lea	(planeBuffer).w,a1
000C7D9E 7E2E                       		moveq	#$2F-1,d7
000C7DA0                            
000C7DA0                            .loopLo:
000C7DA0 32D8                       		move.w	(a0)+,(a1)+
000C7DA2 51CF FFFC                  		dbf	d7,.loopLo
000C7DA6                            
000C7DA6 41FA 0000                  		lea	MC_BlockRender(pc),a0
000C7DAA 43F8 8080                  		lea	(planeBuffer+(64*2)).w,a1
000C7DAE 7E2E                       		moveq	#$2F-1,d7
000C7DB0                            
000C7DB0                            .loopHi:
000C7DB0 303C 8000                  		move.w	#$8000,d0
000C7DB4 8058                       		or.w	(a0)+,d0
000C7DB6 32C0                       		move.w	d0,(a1)+
000C7DB8 51CF FFF6                  		dbf	d7,.loopHi
000C7DBC                            
000C7DBC 6000 FFFE                  		bra.w	*					; spin infinitely
000C7DC0                            
000C7DC0                            ; ===========================================================================
000C7DC0                            ; ---------------------------------------------------------------------------
000C7DC0                            ; Clear The Screen
000C7DC0                            ; ---------------------------------------------------------------------------
000C7DC0                            MC_ClearScreen:
000C7DC0 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000C7DC4                            
000C7DC4 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000C7DCA 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000C7DCE 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000C7DD4 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000C7DDA                            
000C7DDA 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000C7DDC 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000C7DDE                            
000C7DDE 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000C7DE4 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000C7DE8 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000C7DEE 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000C7DF4                            
000C7DF4 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000C7DF6 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000C7DF8                            
000C7DF8 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000C7DFE 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000C7E02 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000C7E08 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000C7E0E                            
000C7E0E 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000C7E10 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000C7E12                            
000C7E12 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000C7E16 4E75                       		rts						; return
000C7E18                            ; ---------------------------------------------------------------------------
000C7E18                            
000C7E18                            ; ===========================================================================
000C7E18                            ; ---------------------------------------------------------------------------
000C7E18                            ; VBlank Interrupt
000C7E18                            ; ---------------------------------------------------------------------------
000C7E18                            MC_VInt:
000C7E32                            
000C7E32 5278 8E80                  		addq.w	#1,(camXPosFG).w			; update scrolling
000C7E3C 3D78 8E80 FFFC             		move.w	(camXPosFG).w,-4(a6)			; ^
000C7E42                            
000C7E42                            
000C7E42 4E73                       		rte						; return
000C7E44                            ; ---------------------------------------------------------------------------
000C7E44                            
000C7E44                            block_entry	macro	tileID, palLine, priority
000C7E44                            	if (narg<3)
000C7E44                            		dc.w	(palLine<<13)|tileID
000C7E44                            	else
000C7E44                            		dc.w	$8000|(palLine<<13)|tileID
000C7E44                            	endif
000C7E44                            		endm
000C7E44                            
000C7E44                            MC_BlockRender:
000C7E84                            
000C7EA2                            
000C7EA2                            ; ---------------------------------------------------------------------------
000C7EA2                            MC_Palette:
000C7EA2 0E86 08AE 068E 046C 0EE0+  	dc.w	$E86, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000C7EC2 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000C7EE2 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000C7F02 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C7F22                            ; ---------------------------------------------------------------------------
000C7F22                            MC_Terrain:
000C7F22                            	incbin	"minecraft\assets\bin\terrain.bin"
000C83A2                            MC_Terrain_End:
000C83A2                            ; ---------------------------------------------------------------------------
000C83A2                            ; ---------------------------------------------------------------------------
000C83A2                            ; end of 'ROM'
000C83A2                            EndOfRom:
000C83A2                            
000C83A2                            
